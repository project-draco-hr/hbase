{
  resetConf();
  int mergeSize=5000;
  conf.setLong(MobConstants.MOB_COMPACTION_MERGEABLE_THRESHOLD,mergeSize);
  NamespaceDescriptor namespaceDescriptor=NamespaceDescriptor.create("ns").build();
  String tableNameAsString="ns:testMinorCompaction";
  admin.createNamespace(namespaceDescriptor);
  setUp(tableNameAsString);
  int count=4;
  loadData(admin,bufMut,tableName,count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  assertEquals("Before deleting: mob rows count",regionNum * rowNumPerRegion,countMobRows(table));
  assertEquals("Before deleting: mob cells count",regionNum * cellNumPerRow * rowNumPerRegion,countMobCells(table));
  assertEquals("Before deleting: mob file count",regionNum * count,countFiles(tableName,true,family1));
  int largeFilesCount=countLargeFiles(mergeSize,tableName,family1);
  createDelFile(table,tableName,Bytes.toBytes(family1),Bytes.toBytes(qf1));
  assertEquals("Before compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(table));
  assertEquals("Before compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(table));
  assertEquals("Before compaction: family1 mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("Before compaction: family1 del file count",regionNum,countFiles(tableName,false,family1));
  assertEquals("Before compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
  MobCompactor compactor=new PartitionedMobCompactor(conf,fs,tableName,hcd1,pool);
  compactor.compact();
  assertEquals("After compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(table));
  assertEquals("After compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(table));
  assertEquals("After compaction: family1 mob file count",largeFilesCount + regionNum,countFiles(tableName,true,family1));
  assertEquals("After compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("After compaction: family1 del file count",regionNum,countFiles(tableName,false,family1));
  assertEquals("After compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
}
