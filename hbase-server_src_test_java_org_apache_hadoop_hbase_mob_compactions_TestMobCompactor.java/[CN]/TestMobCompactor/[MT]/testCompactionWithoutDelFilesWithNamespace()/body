{
  resetConf();
  NamespaceDescriptor namespaceDescriptor=NamespaceDescriptor.create("ns").build();
  String tableNameAsString="ns:testCompactionWithoutDelFilesWithNamespace";
  admin.createNamespace(namespaceDescriptor);
  TableName tableName=TableName.valueOf(tableNameAsString);
  HColumnDescriptor hcd1=new HColumnDescriptor(family1);
  hcd1.setMobEnabled(true);
  hcd1.setMobThreshold(5);
  hcd1.setMaxVersions(4);
  HColumnDescriptor hcd2=new HColumnDescriptor(family2);
  hcd2.setMobEnabled(true);
  hcd2.setMobThreshold(5);
  hcd2.setMaxVersions(4);
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(hcd1);
  desc.addFamily(hcd2);
  admin.createTable(desc,getSplitKeys());
  BufferedMutator bufMut=conn.getBufferedMutator(tableName);
  Table table=conn.getTable(tableName);
  int count=4;
  loadData(admin,bufMut,tableName,count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  assertEquals("Before compaction: mob rows count",regionNum * rowNumPerRegion,countMobRows(table));
  assertEquals("Before compaction: mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before compaction: del file count",0,countFiles(tableName,false,family1));
  MobCompactor compactor=new PartitionedMobCompactor(conf,fs,tableName,hcd1,pool);
  compactor.compact();
  assertEquals("After compaction: mob rows count",regionNum * rowNumPerRegion,countMobRows(table));
  assertEquals("After compaction: mob file count",regionNum,countFiles(tableName,true,family1));
  assertEquals("After compaction: del file count",0,countFiles(tableName,false,family1));
  table.close();
  admin.disableTable(tableName);
  admin.deleteTable(tableName);
  admin.deleteNamespace("ns");
}
