{
  resetConf();
  Configuration conf=TEST_UTIL.getConfiguration();
  SecureRandom rng=new SecureRandom();
  byte[] keyBytes=new byte[AES.KEY_LENGTH];
  rng.nextBytes(keyBytes);
  String algorithm=conf.get(HConstants.CRYPTO_KEY_ALGORITHM_CONF_KEY,HConstants.CIPHER_AES);
  Key cfKey=new SecretKeySpec(keyBytes,algorithm);
  byte[] encryptionKey=EncryptionUtil.wrapKey(conf,conf.get(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY,User.getCurrent().getShortName()),cfKey);
  String tableNameAsString="testCompactionWithoutDelFilesAndWithEncryption";
  TableName tableName=TableName.valueOf(tableNameAsString);
  HTableDescriptor desc=new HTableDescriptor(tableName);
  HColumnDescriptor hcd=new HColumnDescriptor(family1);
  hcd.setMobEnabled(true);
  hcd.setMobThreshold(0);
  hcd.setMaxVersions(4);
  hcd.setEncryptionType(algorithm);
  hcd.setEncryptionKey(encryptionKey);
  HColumnDescriptor hcd2=new HColumnDescriptor(family2);
  hcd2.setMobEnabled(true);
  hcd2.setMobThreshold(0);
  hcd2.setMaxVersions(4);
  desc.addFamily(hcd);
  desc.addFamily(hcd2);
  admin.createTable(desc,getSplitKeys());
  Table hTable=conn.getTable(tableName);
  BufferedMutator bufMut=conn.getBufferedMutator(tableName);
  int count=4;
  loadData(admin,bufMut,tableName,count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  assertEquals("Before compaction: mob rows count",regionNum * rowNumPerRegion,countMobRows(hTable));
  assertEquals("Before compaction: mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before compaction: del file count",0,countFiles(tableName,false,family1));
  MobCompactor compactor=new PartitionedMobCompactor(conf,fs,tableName,hcd,pool);
  compactor.compact();
  assertEquals("After compaction: mob rows count",regionNum * rowNumPerRegion,countMobRows(hTable));
  assertEquals("After compaction: mob file count",regionNum,countFiles(tableName,true,family1));
  assertEquals("After compaction: del file count",0,countFiles(tableName,false,family1));
  Assert.assertTrue(verifyEncryption(tableName,family1));
}
