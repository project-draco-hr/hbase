{
  resetConf();
  int batchSize=2;
  conf.setInt(MobConstants.MOB_COMPACTION_BATCH_SIZE,batchSize);
  int count=4;
  loadData(admin,bufMut,tableName,count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  assertEquals("Before deleting: mob row count",regionNum * rowNumPerRegion,countMobRows(hTable));
  assertEquals("Before deleting: family1 mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before deleting: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  createDelFile();
  assertEquals("Before compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(hTable));
  assertEquals("Before compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(hTable));
  assertEquals("Before compaction: family1 mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("Before compaction: family1 del file count",regionNum,countFiles(tableName,false,family1));
  assertEquals("Before compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
  MobCompactor compactor=new PartitionedMobCompactor(conf,fs,tableName,hcd1,pool);
  compactor.compact();
  assertEquals("After compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(hTable));
  assertEquals("After compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(hTable));
  assertEquals("After compaction: family1 mob file count",regionNum * (count / batchSize),countFiles(tableName,true,family1));
  assertEquals("After compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("After compaction: family1 del file count",0,countFiles(tableName,false,family1));
  assertEquals("After compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
}
