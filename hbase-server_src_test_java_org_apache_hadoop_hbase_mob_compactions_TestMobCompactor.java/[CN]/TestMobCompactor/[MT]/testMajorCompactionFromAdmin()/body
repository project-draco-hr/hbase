{
  resetConf();
  int mergeSize=5000;
  conf.setLong(MobConstants.MOB_COMPACTION_MERGEABLE_THRESHOLD,mergeSize);
  String tableNameAsString="testMajorCompactionFromAdmin";
  SecureRandom rng=new SecureRandom();
  byte[] keyBytes=new byte[AES.KEY_LENGTH];
  rng.nextBytes(keyBytes);
  String algorithm=conf.get(HConstants.CRYPTO_KEY_ALGORITHM_CONF_KEY,HConstants.CIPHER_AES);
  Key cfKey=new SecretKeySpec(keyBytes,algorithm);
  byte[] encryptionKey=EncryptionUtil.wrapKey(conf,conf.get(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY,User.getCurrent().getShortName()),cfKey);
  TableName tableName=TableName.valueOf(tableNameAsString);
  HTableDescriptor desc=new HTableDescriptor(tableName);
  HColumnDescriptor hcd1=new HColumnDescriptor(family1);
  hcd1.setMobEnabled(true);
  hcd1.setMobThreshold(0);
  hcd1.setEncryptionType(algorithm);
  hcd1.setEncryptionKey(encryptionKey);
  HColumnDescriptor hcd2=new HColumnDescriptor(family2);
  hcd2.setMobEnabled(true);
  hcd2.setMobThreshold(0);
  desc.addFamily(hcd1);
  desc.addFamily(hcd2);
  admin.createTable(desc,getSplitKeys());
  Table table=conn.getTable(tableName);
  BufferedMutator bufMut=conn.getBufferedMutator(tableName);
  int count=4;
  loadData(admin,bufMut,tableName,count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  assertEquals("Before deleting: mob rows count",regionNum * rowNumPerRegion,countMobRows(table));
  assertEquals("Before deleting: mob cells count",regionNum * cellNumPerRow * rowNumPerRegion,countMobCells(table));
  assertEquals("Before deleting: mob file count",regionNum * count,countFiles(tableName,true,family1));
  createDelFile(table,tableName,Bytes.toBytes(family1),Bytes.toBytes(qf1));
  assertEquals("Before compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(table));
  assertEquals("Before compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(table));
  assertEquals("Before compaction: family1 mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("Before compaction: family1 del file count",regionNum,countFiles(tableName,false,family1));
  assertEquals("Before compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
  admin.majorCompact(tableName,hcd1.getName(),Admin.CompactType.MOB);
  waitUntilMobCompactionFinished(tableName);
  assertEquals("After compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(table));
  assertEquals("After compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(table));
  assertEquals("After compaction: family1 mob file count",regionNum,countFiles(tableName,true,family1));
  assertEquals("After compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("After compaction: family1 del file count",0,countFiles(tableName,false,family1));
  assertEquals("After compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
  Assert.assertTrue(verifyEncryption(tableName,family1));
  table.close();
}
