{
  int sleepMultiplier=1;
  if (this.currentNbEntries == 0) {
    LOG.warn("Was given 0 edits to ship");
    return;
  }
  while (!this.stopper.isStopped()) {
    try {
      HRegionInterface rrs=getRS();
      LOG.debug("Replicating " + currentNbEntries);
      rrs.replicateLogEntries(Arrays.copyOf(this.entriesArray,currentNbEntries));
      this.manager.logPositionAndCleanOldLogs(this.currentPath,this.peerClusterZnode,this.position,queueRecovered);
      this.totalReplicatedEdits+=currentNbEntries;
      this.metrics.shippedBatchesRate.inc(1);
      this.metrics.shippedOpsRate.inc(this.currentNbOperations);
      this.metrics.setAgeOfLastShippedOp(this.entriesArray[this.entriesArray.length - 1].getKey().getWriteTime());
      LOG.debug("Replicated in total: " + this.totalReplicatedEdits);
      break;
    }
 catch (    IOException ioe) {
      if (ioe instanceof RemoteException) {
        ioe=((RemoteException)ioe).unwrapRemoteException();
        LOG.warn("Can't replicate because of an error on the remote cluster: ",ioe);
      }
 else {
        LOG.warn("Can't replicate because of a local or network error: ",ioe);
      }
      try {
        boolean down;
        do {
          down=isSlaveDown();
          if (down) {
            if (sleepForRetries("Since we are unable to replicate",sleepMultiplier)) {
              sleepMultiplier++;
            }
 else {
              chooseSinks();
            }
          }
        }
 while (!this.stopper.isStopped() && down);
      }
 catch (      InterruptedException e) {
        LOG.debug("Interrupted while trying to contact the peer cluster");
      }
catch (      KeeperException e) {
        LOG.error("Error talking to zookeeper, retrying",e);
      }
    }
  }
}
