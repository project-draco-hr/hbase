{
  String javaCode=code != null ? code : "public class " + className + " {}";
  Path srcDir=new Path(testDir,"src");
  File srcDirPath=new File(srcDir.toString());
  srcDirPath.mkdirs();
  File sourceCodeFile=new File(srcDir.toString(),className + ".java");
  BufferedWriter bw=new BufferedWriter(new FileWriter(sourceCodeFile));
  bw.write(javaCode);
  bw.close();
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  ArrayList<String> srcFileNames=new ArrayList<String>();
  srcFileNames.add(sourceCodeFile.toString());
  StandardJavaFileManager fm=compiler.getStandardFileManager(null,null,null);
  Iterable<? extends JavaFileObject> cu=fm.getJavaFileObjects(sourceCodeFile);
  List<String> options=new ArrayList<String>();
  options.add("-classpath");
  String currentDir=new File(".").getAbsolutePath();
  String classpath=currentDir + File.separator + "target"+ File.separator+ "classes"+ System.getProperty("path.separator")+ System.getProperty("java.class.path")+ System.getProperty("path.separator")+ System.getProperty("surefire.test.class.path");
  options.add(classpath);
  LOG.debug("Setting classpath to: " + classpath);
  JavaCompiler.CompilationTask task=compiler.getTask(null,fm,null,options,null,cu);
  assertTrue("Compile file " + sourceCodeFile + " failed.",task.call());
  String jarFileName=className + ".jar";
  File jarFile=new File(folder,jarFileName);
  if (!createJarArchive(jarFile,new File[]{new File(srcDir.toString(),className + ".class")})) {
    assertTrue("Build jar file failed.",false);
  }
  return jarFile;
}
