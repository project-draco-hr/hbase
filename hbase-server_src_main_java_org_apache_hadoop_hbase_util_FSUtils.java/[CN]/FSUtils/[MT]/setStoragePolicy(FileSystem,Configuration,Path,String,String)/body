{
  String storagePolicy=conf.get(policyKey,defaultPolicy).toUpperCase(Locale.ROOT);
  if (storagePolicy.equals(defaultPolicy)) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("default policy of " + defaultPolicy + " requested, exiting early.");
    }
    return;
  }
  if (fs instanceof DistributedFileSystem) {
    DistributedFileSystem dfs=(DistributedFileSystem)fs;
    Class<? extends DistributedFileSystem> dfsClass=dfs.getClass();
    Method m=null;
    try {
      m=dfsClass.getDeclaredMethod("setStoragePolicy",new Class<?>[]{Path.class,String.class});
      m.setAccessible(true);
    }
 catch (    NoSuchMethodException e) {
      LOG.info("FileSystem doesn't support" + " setStoragePolicy; --HDFS-6584 not available");
    }
catch (    SecurityException e) {
      LOG.info("Doesn't have access to setStoragePolicy on " + "FileSystems --HDFS-6584 not available",e);
      m=null;
    }
    if (m != null) {
      try {
        m.invoke(dfs,path,storagePolicy);
        LOG.info("set " + storagePolicy + " for "+ path);
      }
 catch (      Exception e) {
        boolean probablyBadPolicy=false;
        if (e instanceof InvocationTargetException) {
          final Throwable exception=e.getCause();
          if (exception instanceof RemoteException && HadoopIllegalArgumentException.class.getName().equals(((RemoteException)exception).getClassName())) {
            LOG.warn("Given storage policy, '" + storagePolicy + "', was rejected and probably "+ "isn't a valid policy for the version of Hadoop you're running. I.e. if you're "+ "trying to use SSD related policies then you're likely missing HDFS-7228. For "+ "more information see the 'ArchivalStorage' docs for your Hadoop release.");
            LOG.debug("More information about the invalid storage policy.",exception);
            probablyBadPolicy=true;
          }
        }
        if (!probablyBadPolicy) {
          LOG.warn("Unable to set " + storagePolicy + " for "+ path,e);
        }
      }
    }
  }
 else {
    LOG.info("FileSystem isn't an instance of DistributedFileSystem; presuming it doesn't " + "support setStoragePolicy.");
  }
}
