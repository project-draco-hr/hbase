{
  if (fs instanceof HFileSystem) {
    FileSystem backingFs=((HFileSystem)fs).getBackingFs();
    if (backingFs instanceof DistributedFileSystem) {
      try {
        return (FSDataOutputStream)(DistributedFileSystem.class.getDeclaredMethod("create",Path.class,FsPermission.class,boolean.class,int.class,short.class,long.class,Progressable.class,InetSocketAddress[].class).invoke(backingFs,path,FsPermission.getDefault(),true,getDefaultBufferSize(backingFs),getDefaultReplication(backingFs,path),getDefaultBlockSize(backingFs,path),null,favoredNodes));
      }
 catch (      InvocationTargetException ite) {
        throw new IOException(ite.getCause());
      }
catch (      NoSuchMethodException e) {
        LOG.debug("DFS Client does not support most favored nodes create; using default create");
        if (LOG.isTraceEnabled())         LOG.trace("Ignoring; use default create",e);
      }
catch (      IllegalArgumentException e) {
        LOG.debug("Ignoring (most likely Reflection related exception) " + e);
      }
catch (      SecurityException e) {
        LOG.debug("Ignoring (most likely Reflection related exception) " + e);
      }
catch (      IllegalAccessException e) {
        LOG.debug("Ignoring (most likely Reflection related exception) " + e);
      }
    }
  }
  return create(fs,path,perm,true);
}
