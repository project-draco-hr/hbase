{
  HTable table=null;
  try {
    latch=new CountDownLatch(1);
    compactionLatch=new CountDownLatch(1);
    TableName tableName=TableName.valueOf(tableNameStr);
    table=TEST_UTIL.createTable(tableName,FAMILIES_1,1,1024,CustomInnerRegionObserverWrapper.class.getName());
    RegionLocator locator=table.getRegionLocator();
    String regionName=locator.getAllRegionLocations().get(0).getRegionInfo().getEncodedName();
    Region region=TEST_UTIL.getRSForFirstRegionInTable(tableName).getFromOnlineRegions(regionName);
    Store store=region.getStores().iterator().next();
    CacheConfig cacheConf=store.getCacheConfig();
    cacheConf.setCacheDataOnWrite(true);
    cacheConf.setEvictOnClose(true);
    BlockCache cache=cacheConf.getBlockCache();
    Put put=new Put(ROW);
    put.add(FAMILY,QUALIFIER,data);
    table.put(put);
    put=new Put(ROW1);
    put.add(FAMILY,QUALIFIER,data);
    table.put(put);
    assertTrue(Bytes.equals(table.get(new Get(ROW)).value(),data));
    region.flush(true);
    int refCount=0;
    byte[] QUALIFIER2=Bytes.add(QUALIFIER,QUALIFIER);
    byte[] data2=Bytes.add(data,data);
    put=new Put(ROW);
    put.add(FAMILY,QUALIFIER2,data2);
    table.put(put);
    System.out.println("Flushing cache");
    region.flush(true);
    Iterator<CachedBlock> iterator=cache.iterator();
    iterateBlockCache(cache,iterator);
    ScanThread[] scanThreads=initiateScan(table,reversed);
    Thread.sleep(100);
    iterator=cache.iterator();
    boolean usedBlocksFound=false;
    while (iterator.hasNext()) {
      CachedBlock next=iterator.next();
      BlockCacheKey cacheKey=new BlockCacheKey(next.getFilename(),next.getOffset());
      if (cache instanceof BucketCache) {
        refCount=((BucketCache)cache).getRefCount(cacheKey);
      }
 else       if (cache instanceof CombinedBlockCache) {
        refCount=((CombinedBlockCache)cache).getRefCount(cacheKey);
      }
 else {
        continue;
      }
      if (refCount != 0) {
        assertEquals(NO_OF_THREADS,refCount);
        usedBlocksFound=true;
      }
    }
    assertTrue("Blocks with non zero ref count should be found ",usedBlocksFound);
    usedBlocksFound=false;
    System.out.println("Compacting");
    assertEquals(2,store.getStorefilesCount());
    store.triggerMajorCompaction();
    region.compact(true);
    waitForStoreFileCount(store,1,10000);
    assertEquals(1,store.getStorefilesCount());
    iterator=cache.iterator();
    while (iterator.hasNext()) {
      CachedBlock next=iterator.next();
      BlockCacheKey cacheKey=new BlockCacheKey(next.getFilename(),next.getOffset());
      if (cache instanceof BucketCache) {
        refCount=((BucketCache)cache).getRefCount(cacheKey);
      }
 else       if (cache instanceof CombinedBlockCache) {
        refCount=((CombinedBlockCache)cache).getRefCount(cacheKey);
      }
 else {
        continue;
      }
      if (refCount != 0) {
        assertEquals(NO_OF_THREADS,refCount);
        usedBlocksFound=true;
      }
    }
    assertTrue("Blocks with non zero ref count should be found ",usedBlocksFound);
    compactionLatch.countDown();
    latch.countDown();
    for (    ScanThread thread : scanThreads) {
      thread.join();
    }
    iterator=cache.iterator();
    iterateBlockCache(cache,iterator);
    Result r=table.get(new Get(ROW));
    assertTrue(Bytes.equals(r.getValue(FAMILY,QUALIFIER),data));
    assertTrue(Bytes.equals(r.getValue(FAMILY,QUALIFIER2),data2));
    iterator=cache.iterator();
    iterateBlockCache(cache,iterator);
  }
  finally {
    if (table != null) {
      table.close();
    }
  }
}
