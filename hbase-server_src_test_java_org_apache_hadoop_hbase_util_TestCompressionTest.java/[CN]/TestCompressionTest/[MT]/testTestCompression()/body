{
  try {
    CompressionTest.testCompression(Compression.Algorithm.LZO);
    fail();
  }
 catch (  IOException e) {
    assertNotNull(e.getCause());
  }
  try {
    CompressionTest.testCompression(Compression.Algorithm.LZO);
    fail();
  }
 catch (  IOException e) {
    assertNull(e.getCause());
  }
  assertFalse(CompressionTest.testCompression("LZO"));
  assertTrue(CompressionTest.testCompression("NONE"));
  assertTrue(CompressionTest.testCompression("GZ"));
  if (isCompressionAvailable("org.apache.hadoop.io.compress.SnappyCodec")) {
    if (NativeCodeLoader.isNativeCodeLoaded()) {
      try {
        System.loadLibrary("snappy");
        try {
          Configuration conf=new Configuration();
          CompressionCodec codec=(CompressionCodec)ReflectionUtils.newInstance(conf.getClassByName("org.apache.hadoop.io.compress.SnappyCodec"),conf);
          DataOutputBuffer compressedDataBuffer=new DataOutputBuffer();
          CompressionOutputStream deflateFilter=codec.createOutputStream(compressedDataBuffer);
          byte[] data=new byte[1024];
          DataOutputStream deflateOut=new DataOutputStream(new BufferedOutputStream(deflateFilter));
          deflateOut.write(data,0,data.length);
          deflateOut.flush();
          deflateFilter.finish();
          assertTrue(CompressionTest.testCompression("SNAPPY"));
        }
 catch (        UnsatisfiedLinkError ex) {
        }
catch (        Exception ex) {
        }
      }
 catch (      UnsatisfiedLinkError ex) {
        assertFalse(CompressionTest.testCompression("SNAPPY"));
      }
    }
 else {
      assertFalse(CompressionTest.testCompression("SNAPPY"));
    }
  }
 else {
    assertFalse(CompressionTest.testCompression("SNAPPY"));
  }
}
