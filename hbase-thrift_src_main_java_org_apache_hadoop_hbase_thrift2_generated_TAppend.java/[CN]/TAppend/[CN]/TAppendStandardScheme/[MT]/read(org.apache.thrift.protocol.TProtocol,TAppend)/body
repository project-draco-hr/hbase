{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.row=iprot.readBinary();
        struct.setRowIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list88=iprot.readListBegin();
      struct.columns=new ArrayList<TColumnValue>(_list88.size);
      for (int _i89=0; _i89 < _list88.size; ++_i89) {
        TColumnValue _elem90;
        _elem90=new TColumnValue();
        _elem90.read(iprot);
        struct.columns.add(_elem90);
      }
      iprot.readListEnd();
    }
    struct.setColumnsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map91=iprot.readMapBegin();
  struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map91.size);
  for (int _i92=0; _i92 < _map91.size; ++_i92) {
    ByteBuffer _key93;
    ByteBuffer _val94;
    _key93=iprot.readBinary();
    _val94=iprot.readBinary();
    struct.attributes.put(_key93,_val94);
  }
  iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.durability=TDurability.findByValue(iprot.readI32());
struct.setDurabilityIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.cellVisibility=new TCellVisibility();
struct.cellVisibility.read(iprot);
struct.setCellVisibilityIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
