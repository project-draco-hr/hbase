{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.row != null) {
    oprot.writeFieldBegin(ROW_FIELD_DESC);
    oprot.writeBinary(struct.row);
    oprot.writeFieldEnd();
  }
  if (struct.columns != null) {
    oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
{
      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.columns.size()));
      for (      TColumnValue _iter95 : struct.columns) {
        _iter95.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
  if (struct.attributes != null) {
    if (struct.isSetAttributes()) {
      oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,struct.attributes.size()));
        for (        Map.Entry<ByteBuffer,ByteBuffer> _iter96 : struct.attributes.entrySet()) {
          oprot.writeBinary(_iter96.getKey());
          oprot.writeBinary(_iter96.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.durability != null) {
    if (struct.isSetDurability()) {
      oprot.writeFieldBegin(DURABILITY_FIELD_DESC);
      oprot.writeI32(struct.durability.getValue());
      oprot.writeFieldEnd();
    }
  }
  if (struct.cellVisibility != null) {
    if (struct.isSetCellVisibility()) {
      oprot.writeFieldBegin(CELL_VISIBILITY_FIELD_DESC);
      struct.cellVisibility.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
