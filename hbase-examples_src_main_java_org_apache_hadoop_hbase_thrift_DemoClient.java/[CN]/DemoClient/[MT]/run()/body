{
  TTransport transport=new TSocket(host,port);
  TProtocol protocol=new TBinaryProtocol(transport,true,true);
  Hbase.Client client=new Hbase.Client(protocol);
  transport.open();
  byte[] t=bytes("demo_table");
  System.out.println("scanning tables...");
  for (  ByteBuffer name : client.getTableNames()) {
    System.out.println("  found: " + utf8(name.array()));
    if (utf8(name.array()).equals(utf8(t))) {
      if (client.isTableEnabled(name)) {
        System.out.println("    disabling table: " + utf8(name.array()));
        client.disableTable(name);
      }
      System.out.println("    deleting table: " + utf8(name.array()));
      client.deleteTable(name);
    }
  }
  ArrayList<ColumnDescriptor> columns=new ArrayList<ColumnDescriptor>();
  ColumnDescriptor col;
  col=new ColumnDescriptor();
  col.name=ByteBuffer.wrap(bytes("entry:"));
  col.maxVersions=10;
  columns.add(col);
  col=new ColumnDescriptor();
  col.name=ByteBuffer.wrap(bytes("unused:"));
  columns.add(col);
  System.out.println("creating table: " + utf8(t));
  try {
    client.createTable(ByteBuffer.wrap(t),columns);
  }
 catch (  AlreadyExists ae) {
    System.out.println("WARN: " + ae.message);
  }
  System.out.println("column families in " + utf8(t) + ": ");
  Map<ByteBuffer,ColumnDescriptor> columnMap=client.getColumnDescriptors(ByteBuffer.wrap(t));
  for (  ColumnDescriptor col2 : columnMap.values()) {
    System.out.println("  column: " + utf8(col2.name.array()) + ", maxVer: "+ Integer.toString(col2.maxVersions));
  }
  Map<ByteBuffer,ByteBuffer> dummyAttributes=null;
  boolean writeToWal=false;
  byte[] invalid={(byte)'f',(byte)'o',(byte)'o',(byte)'-',(byte)0xfc,(byte)0xa1,(byte)0xa1,(byte)0xa1,(byte)0xa1};
  byte[] valid={(byte)'f',(byte)'o',(byte)'o',(byte)'-',(byte)0xE7,(byte)0x94,(byte)0x9F,(byte)0xE3,(byte)0x83,(byte)0x93,(byte)0xE3,(byte)0x83,(byte)0xBC,(byte)0xE3,(byte)0x83,(byte)0xAB};
  ArrayList<Mutation> mutations;
  mutations=new ArrayList<Mutation>();
  mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:foo")),ByteBuffer.wrap(invalid),writeToWal));
  client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(bytes("foo")),mutations,dummyAttributes);
  mutations=new ArrayList<Mutation>();
  mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:")),ByteBuffer.wrap(bytes("")),writeToWal));
  client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(bytes("")),mutations,dummyAttributes);
  mutations=new ArrayList<Mutation>();
  mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:foo")),ByteBuffer.wrap(valid),writeToWal));
  client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(valid),mutations,dummyAttributes);
  mutations=new ArrayList<Mutation>();
  mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:foo")),ByteBuffer.wrap(invalid),writeToWal));
  client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(invalid),mutations,dummyAttributes);
  ArrayList<ByteBuffer> columnNames=new ArrayList<ByteBuffer>();
  columnNames.add(ByteBuffer.wrap(bytes("entry:")));
  System.out.println("Starting scanner...");
  int scanner=client.scannerOpen(ByteBuffer.wrap(t),ByteBuffer.wrap(bytes("")),columnNames,dummyAttributes);
  while (true) {
    List<TRowResult> entry=client.scannerGet(scanner);
    if (entry.isEmpty()) {
      break;
    }
    printRow(entry);
  }
  for (int i=100; i >= 0; --i) {
    NumberFormat nf=NumberFormat.getInstance();
    nf.setMinimumIntegerDigits(5);
    nf.setGroupingUsed(false);
    byte[] row=bytes(nf.format(i));
    mutations=new ArrayList<Mutation>();
    mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("unused:")),ByteBuffer.wrap(bytes("DELETE_ME")),writeToWal));
    client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),mutations,dummyAttributes);
    printRow(client.getRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),dummyAttributes));
    client.deleteAllRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),dummyAttributes);
    mutations=new ArrayList<Mutation>();
    mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:num")),ByteBuffer.wrap(bytes("0")),writeToWal));
    mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:foo")),ByteBuffer.wrap(bytes("FOO")),writeToWal));
    client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),mutations,dummyAttributes);
    printRow(client.getRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),dummyAttributes));
    Mutation m;
    mutations=new ArrayList<Mutation>();
    m=new Mutation();
    m.column=ByteBuffer.wrap(bytes("entry:foo"));
    m.isDelete=true;
    mutations.add(m);
    m=new Mutation();
    m.column=ByteBuffer.wrap(bytes("entry:num"));
    m.value=ByteBuffer.wrap(bytes("-1"));
    mutations.add(m);
    client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),mutations,dummyAttributes);
    printRow(client.getRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),dummyAttributes));
    mutations=new ArrayList<Mutation>();
    mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:num")),ByteBuffer.wrap(bytes(Integer.toString(i))),writeToWal));
    mutations.add(new Mutation(false,ByteBuffer.wrap(bytes("entry:sqr")),ByteBuffer.wrap(bytes(Integer.toString(i * i))),writeToWal));
    client.mutateRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),mutations,dummyAttributes);
    printRow(client.getRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),dummyAttributes));
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
    }
    mutations.clear();
    m=new Mutation();
    m.column=ByteBuffer.wrap(bytes("entry:num"));
    m.value=ByteBuffer.wrap(bytes("-999"));
    mutations.add(m);
    m=new Mutation();
    m.column=ByteBuffer.wrap(bytes("entry:sqr"));
    m.isDelete=true;
    client.mutateRowTs(ByteBuffer.wrap(t),ByteBuffer.wrap(row),mutations,1,dummyAttributes);
    printRow(client.getRow(ByteBuffer.wrap(t),ByteBuffer.wrap(row),dummyAttributes));
    List<TCell> versions=client.getVer(ByteBuffer.wrap(t),ByteBuffer.wrap(row),ByteBuffer.wrap(bytes("entry:num")),10,dummyAttributes);
    printVersions(ByteBuffer.wrap(row),versions);
    if (versions.isEmpty()) {
      System.out.println("FATAL: wrong # of versions");
      System.exit(-1);
    }
    List<TCell> result=client.get(ByteBuffer.wrap(t),ByteBuffer.wrap(row),ByteBuffer.wrap(bytes("entry:foo")),dummyAttributes);
    if (!result.isEmpty()) {
      System.out.println("FATAL: shouldn't get here");
      System.exit(-1);
    }
    System.out.println("");
  }
  columnNames.clear();
  for (  ColumnDescriptor col2 : client.getColumnDescriptors(ByteBuffer.wrap(t)).values()) {
    System.out.println("column with name: " + new String(col2.name.array()));
    System.out.println(col2.toString());
    columnNames.add(col2.name);
  }
  System.out.println("Starting scanner...");
  scanner=client.scannerOpenWithStop(ByteBuffer.wrap(t),ByteBuffer.wrap(bytes("00020")),ByteBuffer.wrap(bytes("00040")),columnNames,dummyAttributes);
  while (true) {
    List<TRowResult> entry=client.scannerGet(scanner);
    if (entry.isEmpty()) {
      System.out.println("Scanner finished");
      break;
    }
    printRow(entry);
  }
  transport.close();
}
