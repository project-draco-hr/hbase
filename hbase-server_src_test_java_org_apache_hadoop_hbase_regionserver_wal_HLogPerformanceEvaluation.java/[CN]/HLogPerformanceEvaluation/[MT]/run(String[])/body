{
  Path rootRegionDir=null;
  int numThreads=1;
  long numIterations=10000;
  int numFamilies=1;
  boolean noSync=false;
  boolean verify=false;
  boolean verbose=false;
  long roll=Long.MAX_VALUE;
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    try {
      if (cmd.equals("-threads")) {
        numThreads=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-iterations")) {
        numIterations=Long.parseLong(args[++i]);
      }
 else       if (cmd.equals("-path")) {
        rootRegionDir=new Path(args[++i]);
      }
 else       if (cmd.equals("-families")) {
        numFamilies=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-qualifiers")) {
        numQualifiers=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-keySize")) {
        keySize=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-valueSize")) {
        valueSize=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-nosync")) {
        noSync=true;
      }
 else       if (cmd.equals("-verify")) {
        verify=true;
      }
 else       if (cmd.equals("-verbose")) {
        verbose=true;
      }
 else       if (cmd.equals("-roll")) {
        roll=Long.parseLong(args[++i]);
      }
 else       if (cmd.equals("-h")) {
        printUsageAndExit();
      }
 else       if (cmd.equals("--help")) {
        printUsageAndExit();
      }
 else {
        System.err.println("UNEXPECTED: " + cmd);
        printUsageAndExit();
      }
    }
 catch (    Exception e) {
      printUsageAndExit();
    }
  }
  FileSystem fs=FileSystem.get(getConf());
  LOG.info("" + fs);
  try {
    if (rootRegionDir == null) {
      rootRegionDir=TEST_UTIL.getDataTestDir("HLogPerformanceEvaluation");
    }
    rootRegionDir=rootRegionDir.makeQualified(fs);
    cleanRegionRootDir(fs,rootRegionDir);
    HTableDescriptor htd=createHTableDescriptor(numFamilies);
    final long whenToRoll=roll;
    HLog hlog=new FSHLog(fs,rootRegionDir,"wals",getConf()){
      int appends=0;
      protected void doWrite(      HRegionInfo info,      HLogKey logKey,      WALEdit logEdit,      HTableDescriptor htd) throws IOException {
        this.appends++;
        if (this.appends % whenToRoll == 0) {
          LOG.info("Rolling after " + appends + " edits");
          rollWriter();
        }
        super.doWrite(info,logKey,logEdit,htd);
      }
    }
;
    hlog.rollWriter();
    HRegion region=null;
    try {
      region=openRegion(fs,rootRegionDir,htd,hlog);
      long putTime=runBenchmark(new HLogPutBenchmark(region,htd,numIterations,noSync),numThreads);
      logBenchmarkResult("Summary: threads=" + numThreads + ", iterations="+ numIterations,numIterations * numThreads,putTime);
      if (region != null) {
        closeRegion(region);
        region=null;
      }
      if (verify) {
        Path dir=((FSHLog)hlog).getDir();
        long editCount=0;
        for (        FileStatus fss : fs.listStatus(dir)) {
          editCount+=verify(fss.getPath(),verbose);
        }
        long expected=numIterations * numThreads;
        if (editCount != expected) {
          throw new IllegalStateException("Counted=" + editCount + ", expected="+ expected);
        }
      }
    }
  finally {
      if (region != null)       closeRegion(region);
      cleanRegionRootDir(fs,rootRegionDir);
    }
  }
  finally {
    fs.close();
  }
  return (0);
}
