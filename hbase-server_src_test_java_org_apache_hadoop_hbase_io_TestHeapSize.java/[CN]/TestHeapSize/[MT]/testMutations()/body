{
  Class<?> cl;
  long expected;
  long actual;
  cl=TimeRange.class;
  actual=ClassSize.TIMERANGE;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=Put.class;
  actual=new Put(new byte[]{0}).heapSize();
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.align(ClassSize.TREEMAP + ClassSize.REFERENCE);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=Delete.class;
  actual=new Delete(new byte[]{0}).heapSize();
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.align(ClassSize.TREEMAP + ClassSize.REFERENCE);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=Increment.class;
  actual=new Increment(new byte[]{0}).heapSize();
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.align(ClassSize.TREEMAP + ClassSize.REFERENCE + ClassSize.TIMERANGE);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
}
