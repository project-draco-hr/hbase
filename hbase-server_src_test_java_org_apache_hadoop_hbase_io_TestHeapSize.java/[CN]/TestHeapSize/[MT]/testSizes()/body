{
  Class<?> cl;
  long expected;
  long actual;
  cl=KeyValue.class;
  expected=ClassSize.estimateBase(cl,false);
  KeyValue kv=new KeyValue();
  actual=kv.heapSize();
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=LruBlockCache.class;
  actual=LruBlockCache.CACHE_FIXED_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=LruCachedBlock.class;
  actual=LruCachedBlock.PER_BLOCK_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.estimateBase(String.class,false);
  expected+=ClassSize.estimateBase(ByteBuffer.class,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    ClassSize.estimateBase(String.class,true);
    ClassSize.estimateBase(ByteBuffer.class,true);
    assertEquals(expected,actual);
  }
  cl=DefaultMemStore.class;
  actual=DefaultMemStore.FIXED_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  actual=DefaultMemStore.DEEP_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=CompactingMemStore.class;
  actual=CompactingMemStore.DEEP_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.estimateBase(AtomicBoolean.class,false);
  expected+=ClassSize.estimateBase(AtomicBoolean.class,false);
  expected+=ClassSize.estimateBase(CompactionPipeline.class,false);
  expected+=ClassSize.estimateBase(LinkedList.class,false);
  expected+=ClassSize.estimateBase(MemStoreCompactor.class,false);
  expected+=ClassSize.estimateBase(AtomicBoolean.class,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    ClassSize.estimateBase(AtomicBoolean.class,true);
    ClassSize.estimateBase(AtomicBoolean.class,true);
    ClassSize.estimateBase(CompactionPipeline.class,true);
    ClassSize.estimateBase(LinkedList.class,true);
    ClassSize.estimateBase(MemStoreCompactor.class,true);
    ClassSize.estimateBase(AtomicBoolean.class,true);
    assertEquals(expected,actual);
  }
  cl=Segment.class;
  actual=Segment.DEEP_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.estimateBase(AtomicLong.class,false);
  expected+=ClassSize.estimateBase(AtomicReference.class,false);
  expected+=ClassSize.estimateBase(CellSet.class,false);
  expected+=ClassSize.estimateBase(TimeRangeTracker.class,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    ClassSize.estimateBase(AtomicLong.class,true);
    ClassSize.estimateBase(AtomicReference.class,true);
    ClassSize.estimateBase(CellSet.class,true);
    ClassSize.estimateBase(TimeRangeTracker.class,true);
    assertEquals(expected,actual);
  }
  cl=MutableSegment.class;
  actual=MutableSegment.DEEP_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.estimateBase(AtomicLong.class,false);
  expected+=ClassSize.estimateBase(AtomicReference.class,false);
  expected+=ClassSize.estimateBase(CellSet.class,false);
  expected+=ClassSize.estimateBase(TimeRangeTracker.class,false);
  expected+=ClassSize.estimateBase(ConcurrentSkipListMap.class,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    ClassSize.estimateBase(AtomicLong.class,true);
    ClassSize.estimateBase(AtomicReference.class,true);
    ClassSize.estimateBase(CellSet.class,true);
    ClassSize.estimateBase(TimeRangeTracker.class,true);
    ClassSize.estimateBase(ConcurrentSkipListMap.class,true);
    assertEquals(expected,actual);
  }
  cl=ImmutableSegment.class;
  actual=ImmutableSegment.DEEP_OVERHEAD_CSLM;
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.estimateBase(AtomicLong.class,false);
  expected+=ClassSize.estimateBase(AtomicReference.class,false);
  expected+=ClassSize.estimateBase(CellSet.class,false);
  expected+=ClassSize.estimateBase(TimeRangeTracker.class,false);
  expected+=ClassSize.estimateBase(TimeRange.class,false);
  expected+=ClassSize.estimateBase(ConcurrentSkipListMap.class,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    ClassSize.estimateBase(AtomicLong.class,true);
    ClassSize.estimateBase(AtomicReference.class,true);
    ClassSize.estimateBase(CellSet.class,true);
    ClassSize.estimateBase(TimeRangeTracker.class,true);
    ClassSize.estimateBase(TimeRange.class,true);
    ClassSize.estimateBase(ConcurrentSkipListMap.class,true);
    assertEquals(expected,actual);
  }
  actual=ImmutableSegment.DEEP_OVERHEAD_CAM;
  expected=ClassSize.estimateBase(cl,false);
  expected+=ClassSize.estimateBase(AtomicLong.class,false);
  expected+=ClassSize.estimateBase(AtomicReference.class,false);
  expected+=ClassSize.estimateBase(CellSet.class,false);
  expected+=ClassSize.estimateBase(TimeRangeTracker.class,false);
  expected+=ClassSize.estimateBase(TimeRange.class,false);
  expected+=ClassSize.estimateBase(CellArrayMap.class,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    ClassSize.estimateBase(AtomicLong.class,true);
    ClassSize.estimateBase(AtomicReference.class,true);
    ClassSize.estimateBase(CellSet.class,true);
    ClassSize.estimateBase(TimeRangeTracker.class,true);
    ClassSize.estimateBase(TimeRange.class,true);
    ClassSize.estimateBase(CellArrayMap.class,true);
    assertEquals(expected,actual);
  }
  cl=HStore.class;
  actual=HStore.FIXED_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=HRegion.class;
  actual=HRegion.FIXED_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
  cl=BlockCacheKey.class;
  actual=BlockCacheKey.FIXED_OVERHEAD;
  expected=ClassSize.estimateBase(cl,false);
  if (expected != actual) {
    ClassSize.estimateBase(cl,true);
    assertEquals(expected,actual);
  }
}
