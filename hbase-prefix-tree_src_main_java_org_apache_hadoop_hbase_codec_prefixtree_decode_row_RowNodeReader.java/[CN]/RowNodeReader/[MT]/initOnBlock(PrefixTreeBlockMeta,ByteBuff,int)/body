{
  this.block=block;
  this.offset=offset;
  resetFanIndex();
  this.tokenLength=UVIntTool.getInt(block,offset);
  this.tokenOffset=offset + UVIntTool.numBytes(tokenLength);
  this.fanOut=UVIntTool.getInt(block,tokenOffset + tokenLength);
  this.fanOffset=tokenOffset + tokenLength + UVIntTool.numBytes(fanOut);
  this.numCells=UVIntTool.getInt(block,fanOffset + fanOut);
  this.familyOffsetsOffset=fanOffset + fanOut + UVIntTool.numBytes(numCells);
  this.qualifierOffsetsOffset=familyOffsetsOffset + numCells * blockMeta.getFamilyOffsetWidth();
  this.tagOffsetsOffset=this.qualifierOffsetsOffset + numCells * blockMeta.getQualifierOffsetWidth();
  if (blockMeta.getTagsOffsetWidth() == 0) {
    this.tagOffsetsOffset=this.qualifierOffsetsOffset;
    this.timestampIndexesOffset=qualifierOffsetsOffset + numCells * blockMeta.getQualifierOffsetWidth();
  }
 else {
    this.timestampIndexesOffset=tagOffsetsOffset + numCells * blockMeta.getTagsOffsetWidth();
  }
  this.mvccVersionIndexesOffset=timestampIndexesOffset + numCells * blockMeta.getTimestampIndexWidth();
  this.operationTypesOffset=mvccVersionIndexesOffset + numCells * blockMeta.getMvccVersionIndexWidth();
  this.valueOffsetsOffset=operationTypesOffset + numCells * blockMeta.getKeyValueTypeWidth();
  this.valueLengthsOffset=valueOffsetsOffset + numCells * blockMeta.getValueOffsetWidth();
  this.nextNodeOffsetsOffset=valueLengthsOffset + numCells * blockMeta.getValueLengthWidth();
}
