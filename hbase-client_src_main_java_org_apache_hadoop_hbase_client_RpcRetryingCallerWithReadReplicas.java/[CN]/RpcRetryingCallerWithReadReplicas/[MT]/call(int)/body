{
  boolean isTargetReplicaSpecified=(get.getReplicaId() >= 0);
  RegionLocations rl=getRegionLocations(true,(isTargetReplicaSpecified ? get.getReplicaId() : RegionReplicaUtil.DEFAULT_REPLICA_ID),cConnection,tableName,get.getRow());
  final ResultBoundedCompletionService<Result> cs=new ResultBoundedCompletionService<Result>(this.rpcRetryingCallerFactory,pool,rl.size());
  int startIndex=0;
  int endIndex=rl.size();
  if (isTargetReplicaSpecified) {
    addCallsForReplica(cs,rl,get.getReplicaId(),get.getReplicaId());
    endIndex=1;
  }
 else {
    addCallsForReplica(cs,rl,0,0);
    try {
      Future<Result> f=cs.poll(timeBeforeReplicas,TimeUnit.MICROSECONDS);
      if (f != null) {
        return f.get();
      }
    }
 catch (    ExecutionException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Primary replica returns " + e.getCause());
      }
      startIndex=1;
    }
catch (    CancellationException e) {
      throw new InterruptedIOException();
    }
catch (    InterruptedException e) {
      throw new InterruptedIOException();
    }
    addCallsForReplica(cs,rl,1,rl.size() - 1);
  }
  try {
    Future<Result> f=cs.pollForFirstSuccessfullyCompletedTask(operationTimeout,TimeUnit.MILLISECONDS,startIndex,endIndex);
    if (f == null) {
      throw new RetriesExhaustedException("timed out after " + operationTimeout + " ms");
    }
    return f.get();
  }
 catch (  ExecutionException e) {
    throwEnrichedException(e,retries);
  }
catch (  CancellationException e) {
    throw new InterruptedIOException();
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
 finally {
    cs.cancelAll();
  }
  LOG.error("Imposible? Arrive at an unreachable line...");
  return null;
}
