{
synchronized (masterAndZKLock) {
    if (!isKeepAliveMasterConnectedAndRunning(this.masterServiceState)) {
      MasterServiceStubMaker stubMaker=new MasterServiceStubMaker();
      this.masterServiceState.stub=stubMaker.makeStub();
    }
    resetMasterServiceState(this.masterServiceState);
  }
  final MasterService.BlockingInterface stub=this.masterServiceState.stub;
  return new MasterKeepAliveConnection(){
    MasterServiceState mss=masterServiceState;
    @Override public AddColumnResponse addColumn(    RpcController controller,    AddColumnRequest request) throws ServiceException {
      return stub.addColumn(controller,request);
    }
    @Override public DeleteColumnResponse deleteColumn(    RpcController controller,    DeleteColumnRequest request) throws ServiceException {
      return stub.deleteColumn(controller,request);
    }
    @Override public ModifyColumnResponse modifyColumn(    RpcController controller,    ModifyColumnRequest request) throws ServiceException {
      return stub.modifyColumn(controller,request);
    }
    @Override public MoveRegionResponse moveRegion(    RpcController controller,    MoveRegionRequest request) throws ServiceException {
      return stub.moveRegion(controller,request);
    }
    @Override public DispatchMergingRegionsResponse dispatchMergingRegions(    RpcController controller,    DispatchMergingRegionsRequest request) throws ServiceException {
      return stub.dispatchMergingRegions(controller,request);
    }
    @Override public AssignRegionResponse assignRegion(    RpcController controller,    AssignRegionRequest request) throws ServiceException {
      return stub.assignRegion(controller,request);
    }
    @Override public UnassignRegionResponse unassignRegion(    RpcController controller,    UnassignRegionRequest request) throws ServiceException {
      return stub.unassignRegion(controller,request);
    }
    @Override public OfflineRegionResponse offlineRegion(    RpcController controller,    OfflineRegionRequest request) throws ServiceException {
      return stub.offlineRegion(controller,request);
    }
    @Override public DeleteTableResponse deleteTable(    RpcController controller,    DeleteTableRequest request) throws ServiceException {
      return stub.deleteTable(controller,request);
    }
    @Override public EnableTableResponse enableTable(    RpcController controller,    EnableTableRequest request) throws ServiceException {
      return stub.enableTable(controller,request);
    }
    @Override public DisableTableResponse disableTable(    RpcController controller,    DisableTableRequest request) throws ServiceException {
      return stub.disableTable(controller,request);
    }
    @Override public ModifyTableResponse modifyTable(    RpcController controller,    ModifyTableRequest request) throws ServiceException {
      return stub.modifyTable(controller,request);
    }
    @Override public CreateTableResponse createTable(    RpcController controller,    CreateTableRequest request) throws ServiceException {
      return stub.createTable(controller,request);
    }
    @Override public ShutdownResponse shutdown(    RpcController controller,    ShutdownRequest request) throws ServiceException {
      return stub.shutdown(controller,request);
    }
    @Override public StopMasterResponse stopMaster(    RpcController controller,    StopMasterRequest request) throws ServiceException {
      return stub.stopMaster(controller,request);
    }
    @Override public BalanceResponse balance(    RpcController controller,    BalanceRequest request) throws ServiceException {
      return stub.balance(controller,request);
    }
    @Override public SetBalancerRunningResponse setBalancerRunning(    RpcController controller,    SetBalancerRunningRequest request) throws ServiceException {
      return stub.setBalancerRunning(controller,request);
    }
    @Override public RunCatalogScanResponse runCatalogScan(    RpcController controller,    RunCatalogScanRequest request) throws ServiceException {
      return stub.runCatalogScan(controller,request);
    }
    @Override public EnableCatalogJanitorResponse enableCatalogJanitor(    RpcController controller,    EnableCatalogJanitorRequest request) throws ServiceException {
      return stub.enableCatalogJanitor(controller,request);
    }
    @Override public IsCatalogJanitorEnabledResponse isCatalogJanitorEnabled(    RpcController controller,    IsCatalogJanitorEnabledRequest request) throws ServiceException {
      return stub.isCatalogJanitorEnabled(controller,request);
    }
    @Override public CoprocessorServiceResponse execMasterService(    RpcController controller,    CoprocessorServiceRequest request) throws ServiceException {
      return stub.execMasterService(controller,request);
    }
    @Override public SnapshotResponse snapshot(    RpcController controller,    SnapshotRequest request) throws ServiceException {
      return stub.snapshot(controller,request);
    }
    @Override public GetCompletedSnapshotsResponse getCompletedSnapshots(    RpcController controller,    GetCompletedSnapshotsRequest request) throws ServiceException {
      return stub.getCompletedSnapshots(controller,request);
    }
    @Override public DeleteSnapshotResponse deleteSnapshot(    RpcController controller,    DeleteSnapshotRequest request) throws ServiceException {
      return stub.deleteSnapshot(controller,request);
    }
    @Override public IsSnapshotDoneResponse isSnapshotDone(    RpcController controller,    IsSnapshotDoneRequest request) throws ServiceException {
      return stub.isSnapshotDone(controller,request);
    }
    @Override public RestoreSnapshotResponse restoreSnapshot(    RpcController controller,    RestoreSnapshotRequest request) throws ServiceException {
      return stub.restoreSnapshot(controller,request);
    }
    @Override public IsRestoreSnapshotDoneResponse isRestoreSnapshotDone(    RpcController controller,    IsRestoreSnapshotDoneRequest request) throws ServiceException {
      return stub.isRestoreSnapshotDone(controller,request);
    }
    @Override public ExecProcedureResponse execProcedure(    RpcController controller,    ExecProcedureRequest request) throws ServiceException {
      return stub.execProcedure(controller,request);
    }
    @Override public IsProcedureDoneResponse isProcedureDone(    RpcController controller,    IsProcedureDoneRequest request) throws ServiceException {
      return stub.isProcedureDone(controller,request);
    }
    @Override public IsMasterRunningResponse isMasterRunning(    RpcController controller,    IsMasterRunningRequest request) throws ServiceException {
      return stub.isMasterRunning(controller,request);
    }
    @Override public ModifyNamespaceResponse modifyNamespace(    RpcController controller,    ModifyNamespaceRequest request) throws ServiceException {
      return stub.modifyNamespace(controller,request);
    }
    @Override public CreateNamespaceResponse createNamespace(    RpcController controller,    CreateNamespaceRequest request) throws ServiceException {
      return stub.createNamespace(controller,request);
    }
    @Override public DeleteNamespaceResponse deleteNamespace(    RpcController controller,    DeleteNamespaceRequest request) throws ServiceException {
      return stub.deleteNamespace(controller,request);
    }
    @Override public GetNamespaceDescriptorResponse getNamespaceDescriptor(    RpcController controller,    GetNamespaceDescriptorRequest request) throws ServiceException {
      return stub.getNamespaceDescriptor(controller,request);
    }
    @Override public ListNamespaceDescriptorsResponse listNamespaceDescriptors(    RpcController controller,    ListNamespaceDescriptorsRequest request) throws ServiceException {
      return stub.listNamespaceDescriptors(controller,request);
    }
    @Override public ListTableDescriptorsByNamespaceResponse listTableDescriptorsByNamespace(    RpcController controller,    ListTableDescriptorsByNamespaceRequest request) throws ServiceException {
      return stub.listTableDescriptorsByNamespace(controller,request);
    }
    @Override public ListTableNamesByNamespaceResponse listTableNamesByNamespace(    RpcController controller,    ListTableNamesByNamespaceRequest request) throws ServiceException {
      return stub.listTableNamesByNamespace(controller,request);
    }
    @Override public void close(){
      release(this.mss);
    }
    @Override public GetSchemaAlterStatusResponse getSchemaAlterStatus(    RpcController controller,    GetSchemaAlterStatusRequest request) throws ServiceException {
      return stub.getSchemaAlterStatus(controller,request);
    }
    @Override public GetTableDescriptorsResponse getTableDescriptors(    RpcController controller,    GetTableDescriptorsRequest request) throws ServiceException {
      return stub.getTableDescriptors(controller,request);
    }
    @Override public GetTableNamesResponse getTableNames(    RpcController controller,    GetTableNamesRequest request) throws ServiceException {
      return stub.getTableNames(controller,request);
    }
    @Override public GetClusterStatusResponse getClusterStatus(    RpcController controller,    GetClusterStatusRequest request) throws ServiceException {
      return stub.getClusterStatus(controller,request);
    }
  }
;
}
