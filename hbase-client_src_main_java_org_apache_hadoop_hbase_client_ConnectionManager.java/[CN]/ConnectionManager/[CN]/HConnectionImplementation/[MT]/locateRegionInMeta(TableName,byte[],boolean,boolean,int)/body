{
  if (useCache) {
    RegionLocations locations=getCachedLocation(tableName,row);
    if (locations != null && locations.getRegionLocation(replicaId) != null) {
      return locations;
    }
  }
  byte[] metaKey=HRegionInfo.createRegionName(tableName,row,HConstants.NINES,false);
  Scan s=new Scan();
  s.setReversed(true);
  s.setStartRow(metaKey);
  s.setSmall(true);
  s.setCaching(1);
  if (this.useMetaReplicas) {
    s.setConsistency(Consistency.TIMELINE);
  }
  int localNumRetries=(retry ? numTries : 1);
  for (int tries=0; true; tries++) {
    if (tries >= localNumRetries) {
      throw new NoServerForRegionException("Unable to find region for " + Bytes.toStringBinary(row) + " in "+ tableName+ " after "+ localNumRetries+ " tries.");
    }
    if (useCache) {
      RegionLocations locations=getCachedLocation(tableName,row);
      if (locations != null && locations.getRegionLocation(replicaId) != null) {
        return locations;
      }
    }
 else {
      metaCache.clearCache(tableName,row);
    }
    try {
      Result regionInfoRow=null;
      ReversedClientScanner rcs=null;
      try {
        rcs=new ClientSmallReversedScanner(conf,s,TableName.META_TABLE_NAME,this,rpcCallerFactory,rpcControllerFactory,getBatchPool(),0);
        regionInfoRow=rcs.next();
      }
  finally {
        if (rcs != null) {
          rcs.close();
        }
      }
      if (regionInfoRow == null) {
        throw new TableNotFoundException(tableName);
      }
      RegionLocations locations=MetaTableAccessor.getRegionLocations(regionInfoRow);
      if (locations == null || locations.getRegionLocation(replicaId) == null) {
        throw new IOException("HRegionInfo was null in " + tableName + ", row="+ regionInfoRow);
      }
      HRegionInfo regionInfo=locations.getRegionLocation(replicaId).getRegionInfo();
      if (regionInfo == null) {
        throw new IOException("HRegionInfo was null or empty in " + TableName.META_TABLE_NAME + ", row="+ regionInfoRow);
      }
      if (!regionInfo.getTable().equals(tableName)) {
        throw new TableNotFoundException("Table '" + tableName + "' was not found, got: "+ regionInfo.getTable()+ ".");
      }
      if (regionInfo.isSplit()) {
        throw new RegionOfflineException("the only available region for" + " the required row is a split parent," + " the daughters should be online soon: "+ regionInfo.getRegionNameAsString());
      }
      if (regionInfo.isOffline()) {
        throw new RegionOfflineException("the region is offline, could" + " be caused by a disable table call: " + regionInfo.getRegionNameAsString());
      }
      ServerName serverName=locations.getRegionLocation(replicaId).getServerName();
      if (serverName == null) {
        throw new NoServerForRegionException("No server address listed " + "in " + TableName.META_TABLE_NAME + " for region "+ regionInfo.getRegionNameAsString()+ " containing row "+ Bytes.toStringBinary(row));
      }
      if (isDeadServer(serverName)) {
        throw new RegionServerStoppedException("hbase:meta says the region " + regionInfo.getRegionNameAsString() + " is managed by the server "+ serverName+ ", but it is dead.");
      }
      cacheLocation(tableName,locations);
      return locations;
    }
 catch (    TableNotFoundException e) {
      throw e;
    }
catch (    IOException e) {
      ExceptionUtil.rethrowIfInterrupt(e);
      if (e instanceof RemoteException) {
        e=((RemoteException)e).unwrapRemoteException();
      }
      if (tries < localNumRetries - 1) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("locateRegionInMeta parentTable=" + TableName.META_TABLE_NAME + ", metaLocation="+ ", attempt="+ tries+ " of "+ localNumRetries+ " failed; retrying after sleep of "+ ConnectionUtils.getPauseTime(this.pause,tries)+ " because: "+ e.getMessage());
        }
      }
 else {
        throw e;
      }
      if (!(e instanceof RegionOfflineException || e instanceof NoServerForRegionException)) {
        relocateRegion(TableName.META_TABLE_NAME,metaKey,replicaId);
      }
    }
    try {
      Thread.sleep(ConnectionUtils.getPauseTime(this.pause,tries));
    }
 catch (    InterruptedException e) {
      throw new InterruptedIOException("Giving up trying to location region in " + "meta: thread is interrupted.");
    }
  }
}
