{
  int leftDelimiter=Bytes.searchDelimiterIndex(left,loffset,llength,HConstants.DELIMITER);
  int rightDelimiter=Bytes.searchDelimiterIndex(right,roffset,rlength,HConstants.DELIMITER);
  int lpart=(leftDelimiter < 0 ? llength : leftDelimiter - loffset);
  int rpart=(rightDelimiter < 0 ? rlength : rightDelimiter - roffset);
  int result=Bytes.compareTo(left,loffset,lpart,right,roffset,rpart);
  if (result != 0) {
    return result;
  }
 else {
    if (leftDelimiter < 0 && rightDelimiter >= 0) {
      return -1;
    }
 else     if (rightDelimiter < 0 && leftDelimiter >= 0) {
      return 1;
    }
 else     if (leftDelimiter < 0 && rightDelimiter < 0) {
      return 0;
    }
  }
  leftDelimiter++;
  rightDelimiter++;
  int leftFarDelimiter=Bytes.searchDelimiterIndexInReverse(left,leftDelimiter,llength - (leftDelimiter - loffset),HConstants.DELIMITER);
  int rightFarDelimiter=Bytes.searchDelimiterIndexInReverse(right,rightDelimiter,rlength - (rightDelimiter - roffset),HConstants.DELIMITER);
  lpart=(leftFarDelimiter < 0 ? llength + loffset : leftFarDelimiter) - leftDelimiter;
  rpart=(rightFarDelimiter < 0 ? rlength + roffset : rightFarDelimiter) - rightDelimiter;
  result=Bytes.compareTo(left,leftDelimiter,lpart,right,rightDelimiter,rpart);
  if (result != 0) {
    return result;
  }
 else {
    if (leftDelimiter < 0 && rightDelimiter >= 0) {
      return -1;
    }
 else     if (rightDelimiter < 0 && leftDelimiter >= 0) {
      return 1;
    }
 else     if (leftDelimiter < 0 && rightDelimiter < 0) {
      return 0;
    }
  }
  leftFarDelimiter++;
  rightFarDelimiter++;
  result=Bytes.compareTo(left,leftFarDelimiter,llength - (leftFarDelimiter - loffset),right,rightFarDelimiter,rlength - (rightFarDelimiter - roffset));
  return result;
}
