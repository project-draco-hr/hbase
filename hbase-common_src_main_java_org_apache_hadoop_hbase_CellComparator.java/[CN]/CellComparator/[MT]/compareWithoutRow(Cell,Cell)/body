{
  int lFamLength=left.getFamilyLength();
  int rFamLength=right.getFamilyLength();
  int lQualLength=left.getQualifierLength();
  int rQualLength=right.getQualifierLength();
  if (lFamLength + lQualLength == 0 && left.getTypeByte() == Type.Minimum.getCode()) {
    return 1;
  }
  if (rFamLength + rQualLength == 0 && right.getTypeByte() == Type.Minimum.getCode()) {
    return -1;
  }
  boolean sameFamilySize=(lFamLength == rFamLength);
  int lFamOffset=left.getFamilyOffset();
  int rFamOffset=right.getFamilyOffset();
  if (!sameFamilySize) {
    return compareFamilies(left,lFamOffset,lFamLength,right,rFamOffset,rFamLength);
  }
  int lQualOffset=left.getQualifierOffset();
  int rQualOffset=right.getQualifierOffset();
  int diff=compareColumns(left,lFamOffset,lFamLength,lQualOffset,lQualLength,right,rFamOffset,rFamLength,rQualOffset,rQualLength);
  if (diff != 0)   return diff;
  diff=compareTimestamps(left,right);
  if (diff != 0)   return diff;
  return (0xff & right.getTypeByte()) - (0xff & left.getTypeByte());
}
