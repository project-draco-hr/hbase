{
  int minLength=leftLength < rightLength ? leftLength : rightLength;
  short diffIdx=0;
  while (diffIdx < minLength && leftArray[leftOffset + diffIdx] == rightArray[rightOffset + diffIdx]) {
    diffIdx++;
  }
  byte[] minimumMidpointArray=null;
  if (diffIdx >= minLength) {
    minimumMidpointArray=new byte[diffIdx + 1];
    System.arraycopy(rightArray,rightOffset,minimumMidpointArray,0,diffIdx + 1);
  }
 else {
    int diffByte=leftArray[leftOffset + diffIdx];
    if ((0xff & diffByte) < 0xff && (diffByte + 1) < (rightArray[rightOffset + diffIdx] & 0xff)) {
      minimumMidpointArray=new byte[diffIdx + 1];
      System.arraycopy(leftArray,leftOffset,minimumMidpointArray,0,diffIdx);
      minimumMidpointArray[diffIdx]=(byte)(diffByte + 1);
    }
 else {
      minimumMidpointArray=new byte[diffIdx + 1];
      System.arraycopy(rightArray,rightOffset,minimumMidpointArray,0,diffIdx + 1);
    }
  }
  return minimumMidpointArray;
}
