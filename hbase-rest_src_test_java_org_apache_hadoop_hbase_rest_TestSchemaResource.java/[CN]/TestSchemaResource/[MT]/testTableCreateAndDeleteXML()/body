{
  String schemaPath="/" + TABLE1 + "/schema";
  TableSchemaModel model;
  Response response;
  Admin admin=TEST_UTIL.getHBaseAdmin();
  assertFalse(admin.tableExists(TableName.valueOf(TABLE1)));
  model=testTableSchemaModel.buildTestModel(TABLE1);
  testTableSchemaModel.checkModel(model,TABLE1);
  if (csrfEnabled) {
    response=client.put(schemaPath,Constants.MIMETYPE_XML,toXML(model));
    assertEquals(response.getCode(),400);
  }
  response=client.put(schemaPath,Constants.MIMETYPE_XML,toXML(model),extraHdr);
  assertEquals(response.getCode(),201);
  conf.set("hbase.rest.readonly","true");
  response=client.put(schemaPath,Constants.MIMETYPE_XML,toXML(model),extraHdr);
  assertEquals(response.getCode(),403);
  response=client.get(schemaPath,Constants.MIMETYPE_XML);
  assertEquals(response.getCode(),200);
  assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
  model=fromXML(response.getBody());
  testTableSchemaModel.checkModel(model,TABLE1);
  response=client.get(schemaPath,Constants.MIMETYPE_JSON);
  assertEquals(response.getCode(),200);
  assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  model=testTableSchemaModel.fromJSON(Bytes.toString(response.getBody()));
  testTableSchemaModel.checkModel(model,TABLE1);
  if (csrfEnabled) {
    response=client.delete(schemaPath);
    assertEquals(400,response.getCode());
  }
  response=client.delete(schemaPath,extraHdr);
  assertEquals(response.getCode(),403);
  conf.set("hbase.rest.readonly","false");
  response=client.delete(schemaPath,extraHdr);
  assertEquals(response.getCode(),200);
  assertFalse(admin.tableExists(TableName.valueOf(TABLE1)));
}
