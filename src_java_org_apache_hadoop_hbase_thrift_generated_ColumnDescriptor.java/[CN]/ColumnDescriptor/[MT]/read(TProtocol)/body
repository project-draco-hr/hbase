{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.name=iprot.readBinary();
        this.__isset.name=true;
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.I32) {
    this.maxVersions=iprot.readI32();
    this.__isset.maxVersions=true;
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRING) {
this.compression=iprot.readString();
this.__isset.compression=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.BOOL) {
this.inMemory=iprot.readBool();
this.__isset.inMemory=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.I32) {
this.maxValueLength=iprot.readI32();
this.__isset.maxValueLength=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 6:
if (field.type == TType.STRING) {
this.bloomFilterType=iprot.readString();
this.__isset.bloomFilterType=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 7:
if (field.type == TType.I32) {
this.bloomFilterVectorSize=iprot.readI32();
this.__isset.bloomFilterVectorSize=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 8:
if (field.type == TType.I32) {
this.bloomFilterNbHashes=iprot.readI32();
this.__isset.bloomFilterNbHashes=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 9:
if (field.type == TType.BOOL) {
this.blockCacheEnabled=iprot.readBool();
this.__isset.blockCacheEnabled=true;
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}
