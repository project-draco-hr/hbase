{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case NAME:
        if (field.type == TType.STRING) {
          this.name=iprot.readBinary();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case MAX_VERSIONS:
    if (field.type == TType.I32) {
      this.maxVersions=iprot.readI32();
      setMaxVersionsIsSet(true);
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case COMPRESSION:
if (field.type == TType.STRING) {
  this.compression=iprot.readString();
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case IN_MEMORY:
if (field.type == TType.BOOL) {
this.inMemory=iprot.readBool();
setInMemoryIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case BLOOM_FILTER_TYPE:
if (field.type == TType.STRING) {
this.bloomFilterType=iprot.readString();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case BLOOM_FILTER_VECTOR_SIZE:
if (field.type == TType.I32) {
this.bloomFilterVectorSize=iprot.readI32();
setBloomFilterVectorSizeIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case BLOOM_FILTER_NB_HASHES:
if (field.type == TType.I32) {
this.bloomFilterNbHashes=iprot.readI32();
setBloomFilterNbHashesIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case BLOCK_CACHE_ENABLED:
if (field.type == TType.BOOL) {
this.blockCacheEnabled=iprot.readBool();
setBlockCacheEnabledIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case TIME_TO_LIVE:
if (field.type == TType.I32) {
this.timeToLive=iprot.readI32();
setTimeToLiveIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
