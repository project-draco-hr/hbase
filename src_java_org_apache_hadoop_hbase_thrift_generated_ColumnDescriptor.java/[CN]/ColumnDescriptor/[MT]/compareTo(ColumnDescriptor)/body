{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  ColumnDescriptor typedOther=(ColumnDescriptor)other;
  lastComparison=Boolean.valueOf(isSetName()).compareTo(isSetName());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(name,typedOther.name);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetMaxVersions()).compareTo(isSetMaxVersions());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(maxVersions,typedOther.maxVersions);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetCompression()).compareTo(isSetCompression());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(compression,typedOther.compression);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetInMemory()).compareTo(isSetInMemory());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(inMemory,typedOther.inMemory);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetBloomFilterType()).compareTo(isSetBloomFilterType());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(bloomFilterType,typedOther.bloomFilterType);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetBloomFilterVectorSize()).compareTo(isSetBloomFilterVectorSize());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(bloomFilterVectorSize,typedOther.bloomFilterVectorSize);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetBloomFilterNbHashes()).compareTo(isSetBloomFilterNbHashes());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(bloomFilterNbHashes,typedOther.bloomFilterNbHashes);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetBlockCacheEnabled()).compareTo(isSetBlockCacheEnabled());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(blockCacheEnabled,typedOther.blockCacheEnabled);
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=Boolean.valueOf(isSetTimeToLive()).compareTo(isSetTimeToLive());
  if (lastComparison != 0) {
    return lastComparison;
  }
  lastComparison=TBaseHelper.compareTo(timeToLive,typedOther.timeToLive);
  if (lastComparison != 0) {
    return lastComparison;
  }
  return 0;
}
