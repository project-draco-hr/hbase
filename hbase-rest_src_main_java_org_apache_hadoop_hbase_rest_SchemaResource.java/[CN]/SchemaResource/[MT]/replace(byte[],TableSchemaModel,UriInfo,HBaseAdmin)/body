{
  if (servlet.isReadOnly()) {
    return Response.status(Response.Status.FORBIDDEN).type(MIMETYPE_TEXT).entity("Forbidden" + CRLF).build();
  }
  try {
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name));
    for (    Map.Entry<QName,Object> e : model.getAny().entrySet()) {
      htd.setValue(e.getKey().getLocalPart(),e.getValue().toString());
    }
    for (    ColumnSchemaModel family : model.getColumns()) {
      HColumnDescriptor hcd=new HColumnDescriptor(family.getName());
      for (      Map.Entry<QName,Object> e : family.getAny().entrySet()) {
        hcd.setValue(e.getKey().getLocalPart(),e.getValue().toString());
      }
      htd.addFamily(hcd);
    }
    if (admin.tableExists(name)) {
      admin.disableTable(name);
      admin.modifyTable(name,htd);
      admin.enableTable(name);
      servlet.getMetrics().incrementSucessfulPutRequests(1);
    }
 else     try {
      admin.createTable(htd);
      servlet.getMetrics().incrementSucessfulPutRequests(1);
    }
 catch (    TableExistsException e) {
      return Response.status(Response.Status.NOT_MODIFIED).type(MIMETYPE_TEXT).entity("Not modified" + CRLF).build();
    }
    return Response.created(uriInfo.getAbsolutePath()).build();
  }
 catch (  Exception e) {
    servlet.getMetrics().incrementFailedPutRequests(1);
    return processException(e);
  }
}
