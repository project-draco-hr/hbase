{
  Text[] cols=new Text[]{new Text(ANCHORNUM + "[0-9]+"),new Text(CONTENTS_BASIC)};
  long startTime=System.currentTimeMillis();
  HScannerInterface s=client.obtainScanner(cols,new Text());
  try {
    int contentsFetched=0;
    int anchorFetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<Text,byte[]> curVals=new TreeMap<Text,byte[]>();
    int k=0;
    while (s.next(curKey,curVals)) {
      for (Iterator<Text> it=curVals.keySet().iterator(); it.hasNext(); ) {
        Text col=it.next();
        byte val[]=curVals.get(col);
        String curval=new String(val).trim();
        if (col.compareTo(CONTENTS_BASIC) == 0) {
          assertTrue("Error at:" + curKey.getRow() + "/"+ curKey.getTimestamp()+ ", Value for "+ col+ " should start with: "+ CONTENTSTR+ ", but was fetched as: "+ curval,curval.startsWith(CONTENTSTR));
          contentsFetched++;
        }
 else         if (col.toString().startsWith(ANCHORNUM)) {
          assertTrue("Error at:" + curKey.getRow() + "/"+ curKey.getTimestamp()+ ", Value for "+ col+ " should start with: "+ ANCHORSTR+ ", but was fetched as: "+ curval,curval.startsWith(ANCHORSTR));
          anchorFetched++;
        }
 else {
          System.out.println(col);
        }
      }
      curVals.clear();
      k++;
    }
    assertEquals("Expected " + NUM_VALS + " "+ CONTENTS_BASIC+ " values, but fetched "+ contentsFetched,NUM_VALS,contentsFetched);
    assertEquals("Expected " + NUM_VALS + " "+ ANCHORNUM+ " values, but fetched "+ anchorFetched,NUM_VALS,anchorFetched);
    System.out.println("Scanned " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
  finally {
    s.close();
  }
}
