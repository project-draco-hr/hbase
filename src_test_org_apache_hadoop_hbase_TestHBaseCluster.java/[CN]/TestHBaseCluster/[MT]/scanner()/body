{
  Text[] cols=new Text[]{new Text(ANCHORNUM + "[0-9]+"),new Text(CONTENTS_BASIC)};
  long startTime=System.currentTimeMillis();
  Scanner s=table.getScanner(cols,new Text());
  try {
    int contentsFetched=0;
    int anchorFetched=0;
    int k=0;
    for (    RowResult curVals : s) {
      for (Iterator<Text> it=curVals.keySet().iterator(); it.hasNext(); ) {
        Text col=it.next();
        byte val[]=curVals.get(col).getValue();
        String curval=new String(val,HConstants.UTF8_ENCODING).trim();
        if (col.compareTo(CONTENTS_BASIC) == 0) {
          assertTrue("Error at:" + curVals.getRow() + ", Value for "+ col+ " should start with: "+ CONTENTSTR+ ", but was fetched as: "+ curval,curval.startsWith(CONTENTSTR));
          contentsFetched++;
        }
 else         if (col.toString().startsWith(ANCHORNUM)) {
          assertTrue("Error at:" + curVals.getRow() + ", Value for "+ col+ " should start with: "+ ANCHORSTR+ ", but was fetched as: "+ curval,curval.startsWith(ANCHORSTR));
          anchorFetched++;
        }
 else {
          LOG.info(col);
        }
      }
      k++;
    }
    assertEquals("Expected " + NUM_VALS + " "+ CONTENTS_BASIC+ " values, but fetched "+ contentsFetched,NUM_VALS,contentsFetched);
    assertEquals("Expected " + NUM_VALS + " "+ ANCHORNUM+ " values, but fetched "+ anchorFetched,NUM_VALS,anchorFetched);
    LOG.info("Scanned " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
  finally {
    s.close();
  }
}
