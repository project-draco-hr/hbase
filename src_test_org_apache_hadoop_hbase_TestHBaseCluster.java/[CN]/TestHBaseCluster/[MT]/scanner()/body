{
  byte[][] cols=new byte[][]{Bytes.toBytes(ANCHORNUM + "[0-9]+"),CONTENTS_BASIC};
  long startTime=System.currentTimeMillis();
  Scanner s=table.getScanner(cols,HConstants.EMPTY_BYTE_ARRAY);
  try {
    int contentsFetched=0;
    int anchorFetched=0;
    int k=0;
    for (    RowResult curVals : s) {
      for (Iterator<byte[]> it=curVals.keySet().iterator(); it.hasNext(); ) {
        byte[] col=it.next();
        byte val[]=curVals.get(col).getValue();
        String curval=Bytes.toString(val);
        if (Bytes.compareTo(col,CONTENTS_BASIC) == 0) {
          assertTrue("Error at:" + Bytes.toString(curVals.getRow()) + ", Value for "+ Bytes.toString(col)+ " should start with: "+ CONTENTSTR+ ", but was fetched as: "+ curval,curval.startsWith(CONTENTSTR));
          contentsFetched++;
        }
 else         if (Bytes.toString(col).startsWith(ANCHORNUM)) {
          assertTrue("Error at:" + Bytes.toString(curVals.getRow()) + ", Value for "+ Bytes.toString(col)+ " should start with: "+ ANCHORSTR+ ", but was fetched as: "+ curval,curval.startsWith(ANCHORSTR));
          anchorFetched++;
        }
 else {
          LOG.info(Bytes.toString(col));
        }
      }
      k++;
    }
    assertEquals("Expected " + NUM_VALS + " "+ Bytes.toString(CONTENTS_BASIC)+ " values, but fetched "+ contentsFetched,NUM_VALS,contentsFetched);
    assertEquals("Expected " + NUM_VALS + " "+ ANCHORNUM+ " values, but fetched "+ anchorFetched,NUM_VALS,anchorFetched);
    LOG.info("Scanned " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
  finally {
    s.close();
  }
}
