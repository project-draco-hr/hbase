{
  if (!initialized) {
    throw new IllegalStateException();
  }
  try {
    long startTime=System.currentTimeMillis();
    client.openTable(desc.getName());
    for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
      long writeid=client.startUpdate(new Text("row_" + k));
      client.put(writeid,CONTENTS_BASIC,(CONTENTSTR + k).getBytes());
      client.put(writeid,new Text(ANCHORNUM + k),(ANCHORSTR + k).getBytes());
      client.commit(writeid);
    }
    System.out.println("Write " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
    startTime=System.currentTimeMillis();
    Text collabel=null;
    for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
      Text rowlabel=new Text("row_" + k);
      byte bodydata[]=client.get(rowlabel,CONTENTS_BASIC);
      assertNotNull(bodydata);
      String bodystr=new String(bodydata).toString().trim();
      String teststr=CONTENTSTR + k;
      assertEquals("Incorrect value for key: (" + rowlabel + ","+ CONTENTS_BASIC+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",bodystr,teststr);
      collabel=new Text(ANCHORNUM + k);
      bodydata=client.get(rowlabel,collabel);
      bodystr=new String(bodydata).toString().trim();
      teststr=ANCHORSTR + k;
      assertEquals("Incorrect value for key: (" + rowlabel + ","+ collabel+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",bodystr,teststr);
    }
    System.out.println("Read " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
 catch (  IOException e) {
    failures=true;
    throw e;
  }
}
