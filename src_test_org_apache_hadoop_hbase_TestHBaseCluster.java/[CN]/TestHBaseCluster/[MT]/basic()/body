{
  long startTime=System.currentTimeMillis();
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    long writeid=table.startUpdate(new Text("row_" + k));
    table.put(writeid,CONTENTS_BASIC,(CONTENTSTR + k).getBytes(HConstants.UTF8_ENCODING));
    table.put(writeid,new Text(ANCHORNUM + k),(ANCHORSTR + k).getBytes(HConstants.UTF8_ENCODING));
    table.commit(writeid);
  }
  System.out.println("Write " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  startTime=System.currentTimeMillis();
  Text collabel=null;
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    Text rowlabel=new Text("row_" + k);
    byte bodydata[]=table.get(rowlabel,CONTENTS_BASIC);
    assertNotNull("no data for row " + rowlabel + "/"+ CONTENTS_BASIC,bodydata);
    String bodystr=new String(bodydata,HConstants.UTF8_ENCODING);
    String teststr=CONTENTSTR + k;
    assertTrue("Incorrect value for key: (" + rowlabel + "/"+ CONTENTS_BASIC+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
    collabel=new Text(ANCHORNUM + k);
    bodydata=table.get(rowlabel,collabel);
    assertNotNull("no data for row " + rowlabel + "/"+ collabel,bodydata);
    bodystr=new String(bodydata,HConstants.UTF8_ENCODING);
    teststr=ANCHORSTR + k;
    assertTrue("Incorrect value for key: (" + rowlabel + "/"+ collabel+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
  }
  System.out.println("Read " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
}
