{
  long startTime=System.currentTimeMillis();
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    Put put=new Put(Bytes.toBytes("row_" + k));
    put.add(CONTENTS_CF,CONTENTS_CQ,Bytes.toBytes(CONTENTSTR + k));
    put.add(ANCHOR_CF,Bytes.toBytes(ANCHORNUM_CQ + k),Bytes.toBytes(ANCHORSTR_VALUE + k));
    table.put(put);
  }
  LOG.info("Write " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  startTime=System.currentTimeMillis();
  byte[] collabel=null;
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    String rowlabelStr="row_" + k;
    byte[] rowlabel=Bytes.toBytes(rowlabelStr);
    Get get=new Get(rowlabel);
    get.addColumn(CONTENTS_CF,CONTENTS_CQ);
    byte[] bodydata=table.get(get).getValue(CONTENTS_CF,CONTENTS_CQ);
    assertNotNull("no data for row " + rowlabelStr + "/"+ CONTENTS_CQ_STR,bodydata);
    String bodystr=new String(bodydata,HConstants.UTF8_ENCODING);
    String teststr=CONTENTSTR + k;
    assertTrue("Incorrect value for key: (" + rowlabelStr + "/"+ CONTENTS_CQ_STR+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
    String collabelStr=ANCHORNUM_CQ + k;
    collabel=Bytes.toBytes(collabelStr);
    get=new Get(rowlabel);
    get.addColumn(ANCHOR_CF,collabel);
    bodydata=table.get(get).getValue(ANCHOR_CF,collabel);
    assertNotNull("no data for row " + rowlabelStr + "/"+ collabelStr,bodydata);
    bodystr=new String(bodydata,HConstants.UTF8_ENCODING);
    teststr=ANCHORSTR_VALUE + k;
    assertTrue("Incorrect value for key: (" + rowlabelStr + "/"+ collabelStr+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
  }
  LOG.info("Read " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
}
