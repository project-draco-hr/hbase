{
  try {
    this.conf=conf;
    String parts=getPartitionFile(conf);
    final Path partFile=new Path(parts);
    final FileSystem fs=(DEFAULT_PATH.equals(parts)) ? FileSystem.getLocal(conf) : partFile.getFileSystem(conf);
    Job job=new Job(conf);
    Class<K> keyClass=(Class<K>)job.getMapOutputKeyClass();
    K[] splitPoints=readPartitions(fs,partFile,keyClass,conf);
    if (splitPoints.length != job.getNumReduceTasks() - 1) {
      throw new IOException("Wrong number of partitions in keyset:" + splitPoints.length);
    }
    RawComparator<K> comparator=(RawComparator<K>)job.getSortComparator();
    for (int i=0; i < splitPoints.length - 1; ++i) {
      if (comparator.compare(splitPoints[i],splitPoints[i + 1]) >= 0) {
        throw new IOException("Split points are out of order");
      }
    }
    boolean natOrder=conf.getBoolean(NATURAL_ORDER,true);
    if (natOrder && BinaryComparable.class.isAssignableFrom(keyClass)) {
      partitions=buildTrie((BinaryComparable[])splitPoints,0,splitPoints.length,new byte[0],conf.getInt(MAX_TRIE_DEPTH,200));
    }
 else {
      partitions=new BinarySearchNode(splitPoints,comparator);
    }
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Can't read partitions file",e);
  }
}
