{
  this.methodName=method.getName();
  this.parameterClasses=method.getParameterTypes();
  this.parameters=parameters;
  Class<?> declaringClass=method.getDeclaringClass();
  if (declaringClass.equals(VersionedProtocol.class)) {
    clientVersion=0;
    clientMethodsHash=0;
  }
 else {
    try {
      Long version=PROTOCOL_VERSION.get(declaringClass);
      if (version != null) {
        this.clientVersion=version.longValue();
      }
 else {
        Field versionField=declaringClass.getField("VERSION");
        versionField.setAccessible(true);
        this.clientVersion=versionField.getLong(declaringClass);
      }
    }
 catch (    NoSuchFieldException ex) {
      throw new RuntimeException("The " + declaringClass,ex);
    }
catch (    IllegalAccessException ex) {
      throw new RuntimeException(ex);
    }
    this.clientMethodsHash=ProtocolSignature.getFingerprint(declaringClass.getMethods());
  }
}
