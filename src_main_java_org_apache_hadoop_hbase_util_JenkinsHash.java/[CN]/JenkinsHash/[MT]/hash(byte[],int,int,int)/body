{
  int length=nbytes;
  int a, b, c;
  a=b=c=0xdeadbeef + length + initval;
  int offset=off;
  for (; length > 12; offset+=12, length-=12) {
    a+=(key[offset] & BYTE_MASK);
    a+=((key[offset + 1] & BYTE_MASK) << 8);
    a+=((key[offset + 2] & BYTE_MASK) << 16);
    a+=((key[offset + 3] & BYTE_MASK) << 24);
    b+=(key[offset + 4] & BYTE_MASK);
    b+=((key[offset + 5] & BYTE_MASK) << 8);
    b+=((key[offset + 6] & BYTE_MASK) << 16);
    b+=((key[offset + 7] & BYTE_MASK) << 24);
    c+=(key[offset + 8] & BYTE_MASK);
    c+=((key[offset + 9] & BYTE_MASK) << 8);
    c+=((key[offset + 10] & BYTE_MASK) << 16);
    c+=((key[offset + 11] & BYTE_MASK) << 24);
    a-=c;
    a^=rotateLeft(c,4);
    c+=b;
    b-=a;
    b^=rotateLeft(a,6);
    a+=c;
    c-=b;
    c^=rotateLeft(b,8);
    b+=a;
    a-=c;
    a^=rotateLeft(c,16);
    c+=b;
    b-=a;
    b^=rotateLeft(a,19);
    a+=c;
    c-=b;
    c^=rotateLeft(b,4);
    b+=a;
  }
switch (length) {
case 12:
    c+=((key[offset + 11] & BYTE_MASK) << 24);
case 11:
  c+=((key[offset + 10] & BYTE_MASK) << 16);
case 10:
c+=((key[offset + 9] & BYTE_MASK) << 8);
case 9:
c+=(key[offset + 8] & BYTE_MASK);
case 8:
b+=((key[offset + 7] & BYTE_MASK) << 24);
case 7:
b+=((key[offset + 6] & BYTE_MASK) << 16);
case 6:
b+=((key[offset + 5] & BYTE_MASK) << 8);
case 5:
b+=(key[offset + 4] & BYTE_MASK);
case 4:
a+=((key[offset + 3] & BYTE_MASK) << 24);
case 3:
a+=((key[offset + 2] & BYTE_MASK) << 16);
case 2:
a+=((key[offset + 1] & BYTE_MASK) << 8);
case 1:
a+=(key[offset + 0] & BYTE_MASK);
break;
case 0:
return c;
}
c^=b;
c-=rotateLeft(b,14);
a^=c;
a-=rotateLeft(c,11);
b^=a;
b-=rotateLeft(a,25);
c^=b;
c-=rotateLeft(b,16);
a^=c;
a-=rotateLeft(c,4);
b^=a;
b-=rotateLeft(a,14);
c^=b;
c-=rotateLeft(b,24);
return c;
}
