{
  HConnection connection=HConnectionTestingUtility.getMockedConnection(UTIL.getConfiguration());
  try {
    final HRegionInterface implementation=Mockito.mock(HRegionInterface.class);
    ServerName sn=new ServerName("example.com",1234,System.currentTimeMillis());
    final HRegionLocation anyLocation=new HRegionLocation(HRegionInfo.FIRST_META_REGIONINFO,sn.getHostname(),sn.getPort());
    Mockito.when(connection.getRegionLocation((byte[])Mockito.any(),(byte[])Mockito.any(),Mockito.anyBoolean())).thenReturn(anyLocation);
    Mockito.when(connection.getHRegionConnection(Mockito.anyString(),Mockito.anyInt(),Matchers.anyBoolean())).thenReturn(implementation);
    Mockito.when(connection.getHRegionConnection(Mockito.anyString(),Mockito.anyInt())).thenReturn(implementation);
    final CatalogTracker ct=constructAndStartCatalogTracker(connection);
    ServerName hsa=ct.getMetaLocation();
    Assert.assertNull(hsa);
    Thread t=new WaitOnMetaThread(ct){
      @Override void doWaiting() throws InterruptedException {
        this.ct.waitForMeta();
      }
    }
;
    startWaitAliveThenWaitItLives(t,1000);
    final Result result=getMetaTableRowResult();
    Mockito.when(connection.getRegionServerWithRetries((ServerCallable<Result>)Mockito.any())).thenReturn(result);
    Mockito.when(implementation.getRegionInfo((byte[])Mockito.any())).thenReturn(HRegionInfo.FIRST_META_REGIONINFO);
    String node=ct.getMetaNodeTracker().getNode();
    ZKUtil.createAndFailSilent(this.watcher,node);
    MetaEditor.updateMetaLocation(ct,HRegionInfo.FIRST_META_REGIONINFO,SN);
    ZKUtil.deleteNode(this.watcher,node);
    Assert.assertTrue(ct.waitForMeta(10000).equals(SN));
    t.join();
    Assert.assertTrue(ct.waitForMeta(10000).equals(SN));
  }
  finally {
    HConnectionManager.deleteConnection(UTIL.getConfiguration(),true);
  }
}
