{
  Configuration conf=HBaseConfiguration.create();
  TestRpcServer rpcServer=new TestRpcServer();
  AsyncRpcClient client=new AsyncRpcClient(conf,HConstants.CLUSTER_ID_DEFAULT,null,new ChannelInitializer<SocketChannel>(){
    @Override protected void initChannel(    SocketChannel ch) throws Exception {
      ch.pipeline().addFirst(new ChannelOutboundHandlerAdapter(){
        @Override public void write(        ChannelHandlerContext ctx,        Object msg,        ChannelPromise promise) throws Exception {
          promise.setFailure(new RuntimeException("Injected fault"));
        }
      }
);
    }
  }
);
  try {
    rpcServer.start();
    InetSocketAddress address=rpcServer.getListenerAddress();
    MethodDescriptor md=SERVICE.getDescriptorForType().findMethodByName("echo");
    EchoRequestProto param=EchoRequestProto.newBuilder().setMessage("hello").build();
    RpcChannel channel=client.createRpcChannel(ServerName.valueOf(address.getHostName(),address.getPort(),System.currentTimeMillis()),User.getCurrent(),0);
    final AtomicBoolean done=new AtomicBoolean(false);
    PayloadCarryingRpcController controller=new PayloadCarryingRpcController();
    controller.notifyOnFail(new RpcCallback<IOException>(){
      @Override public void run(      IOException e){
        done.set(true);
        LOG.info("Caught expected exception: " + e.toString());
        assertTrue(StringUtils.stringifyException(e).contains("Injected fault"));
      }
    }
);
    channel.callMethod(md,controller,param,md.getOutputType().toProto(),new RpcCallback<Message>(){
      @Override public void run(      Message parameter){
        done.set(true);
        fail("Expected an exception to have been thrown!");
      }
    }
);
    TEST_UTIL.waitFor(1000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return done.get();
      }
    }
);
  }
  finally {
    client.close();
    rpcServer.stop();
  }
}
