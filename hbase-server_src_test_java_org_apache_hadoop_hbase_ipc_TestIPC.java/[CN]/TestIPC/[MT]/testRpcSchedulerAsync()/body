{
  RpcScheduler scheduler=spy(new FifoRpcScheduler(CONF,1));
  RpcServer rpcServer=new TestRpcServer(scheduler);
  verify(scheduler).init((RpcScheduler.Context)anyObject());
  AbstractRpcClient client=new AsyncRpcClient(CONF,HConstants.CLUSTER_ID_DEFAULT,null);
  try {
    rpcServer.start();
    verify(scheduler).start();
    MethodDescriptor md=SERVICE.getDescriptorForType().findMethodByName("echo");
    EchoRequestProto param=EchoRequestProto.newBuilder().setMessage("hello").build();
    ServerName serverName=ServerName.valueOf(rpcServer.getListenerAddress().getHostName(),rpcServer.getListenerAddress().getPort(),System.currentTimeMillis());
    for (int i=0; i < 10; i++) {
      BlockingRpcChannel channel=client.createBlockingRpcChannel(serverName,User.getCurrent(),0);
      channel.callBlockingMethod(md,new PayloadCarryingRpcController(CellUtil.createCellScanner(ImmutableList.of(CELL))),param,md.getOutputType().toProto());
    }
    verify(scheduler,times(10)).dispatch((CallRunner)anyObject());
  }
  finally {
    rpcServer.stop();
    verify(scheduler).stop();
  }
}
