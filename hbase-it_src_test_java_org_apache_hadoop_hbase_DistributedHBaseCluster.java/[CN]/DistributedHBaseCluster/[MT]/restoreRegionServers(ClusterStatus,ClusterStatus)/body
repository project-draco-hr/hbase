{
  HashMap<String,ServerName> initialServers=new HashMap<String,ServerName>();
  HashMap<String,ServerName> currentServers=new HashMap<String,ServerName>();
  for (  ServerName server : initial.getServers()) {
    initialServers.put(server.getHostname(),server);
  }
  for (  ServerName server : current.getServers()) {
    currentServers.put(server.getHostname(),server);
  }
  List<IOException> deferred=new ArrayList<IOException>();
  for (  String hostname : Sets.difference(initialServers.keySet(),currentServers.keySet())) {
    try {
      if (!clusterManager.isRunning(ServiceType.HBASE_REGIONSERVER,hostname)) {
        LOG.info("Restoring cluster - starting initial region server: " + hostname);
        startRegionServer(hostname);
      }
    }
 catch (    IOException ex) {
      deferred.add(ex);
    }
  }
  for (  String hostname : Sets.difference(currentServers.keySet(),initialServers.keySet())) {
    try {
      if (clusterManager.isRunning(ServiceType.HBASE_REGIONSERVER,hostname)) {
        LOG.info("Restoring cluster - stopping initial region server: " + hostname);
        stopRegionServer(currentServers.get(hostname));
      }
    }
 catch (    IOException ex) {
      deferred.add(ex);
    }
  }
  if (!deferred.isEmpty()) {
    LOG.warn("Restoring cluster - restoring region servers reported " + deferred.size() + " errors:");
    for (int i=0; i < deferred.size() && i < 3; i++) {
      LOG.warn(deferred.get(i));
    }
  }
  return deferred.isEmpty();
}
