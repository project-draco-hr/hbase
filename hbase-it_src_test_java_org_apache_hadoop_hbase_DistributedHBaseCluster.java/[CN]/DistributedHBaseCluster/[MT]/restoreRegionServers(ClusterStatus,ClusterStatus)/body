{
  Set<ServerName> toStart=new TreeSet<ServerName>(new ServerNameIgnoreStartCodeComparator());
  Set<ServerName> toKill=new TreeSet<ServerName>(new ServerNameIgnoreStartCodeComparator());
  toStart.addAll(initial.getServers());
  toKill.addAll(current.getServers());
  for (  ServerName server : current.getServers()) {
    toStart.remove(server);
  }
  for (  ServerName server : initial.getServers()) {
    toKill.remove(server);
  }
  List<IOException> deferred=new ArrayList<IOException>();
  for (  ServerName sn : toStart) {
    try {
      if (!clusterManager.isRunning(ServiceType.HBASE_REGIONSERVER,sn.getHostname(),sn.getPort())) {
        LOG.info("Restoring cluster - starting initial region server: " + sn.getHostAndPort());
        startRegionServer(sn.getHostname(),sn.getPort());
      }
    }
 catch (    IOException ex) {
      deferred.add(ex);
    }
  }
  for (  ServerName sn : toKill) {
    try {
      if (clusterManager.isRunning(ServiceType.HBASE_REGIONSERVER,sn.getHostname(),sn.getPort())) {
        LOG.info("Restoring cluster - stopping initial region server: " + sn.getHostAndPort());
        stopRegionServer(sn);
      }
    }
 catch (    IOException ex) {
      deferred.add(ex);
    }
  }
  if (!deferred.isEmpty()) {
    LOG.warn("Restoring cluster - restoring region servers reported " + deferred.size() + " errors:");
    for (int i=0; i < deferred.size() && i < 3; i++) {
      LOG.warn(deferred.get(i));
    }
  }
  return deferred.isEmpty();
}
