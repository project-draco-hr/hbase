{
  try {
    if (!alreadyRunning.compareAndSet(false,true)) {
      return 0;
    }
    Pair<Integer,Map<HRegionInfo,Result>> pair=getSplitParents();
    int count=pair.getFirst();
    Map<HRegionInfo,Result> splitParents=pair.getSecond();
    int cleaned=0;
    HashSet<String> parentNotCleaned=new HashSet<String>();
    for (    Map.Entry<HRegionInfo,Result> e : splitParents.entrySet()) {
      if (!parentNotCleaned.contains(e.getKey().getEncodedName()) && cleanParent(e.getKey(),e.getValue())) {
        cleaned++;
      }
 else {
        PairOfSameType<HRegionInfo> daughters=HRegionInfo.getDaughterRegions(e.getValue());
        parentNotCleaned.add(daughters.getFirst().getEncodedName());
        parentNotCleaned.add(daughters.getSecond().getEncodedName());
      }
    }
    if (cleaned != 0) {
      LOG.info("Scanned " + count + " catalog row(s) and gc'd "+ cleaned+ " unreferenced parent region(s)");
    }
 else     if (LOG.isDebugEnabled()) {
      LOG.debug("Scanned " + count + " catalog row(s) and gc'd "+ cleaned+ " unreferenced parent region(s)");
    }
    return cleaned;
  }
  finally {
    alreadyRunning.set(false);
  }
}
