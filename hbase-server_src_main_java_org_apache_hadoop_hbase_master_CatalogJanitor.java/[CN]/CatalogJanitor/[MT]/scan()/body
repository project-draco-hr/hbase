{
  try {
    if (!alreadyRunning.compareAndSet(false,true)) {
      return 0;
    }
    Triple<Integer,Map<HRegionInfo,Result>,Map<HRegionInfo,Result>> scanTriple=getMergedRegionsAndSplitParents();
    int count=scanTriple.getFirst();
    int mergeCleaned=0;
    Map<HRegionInfo,Result> mergedRegions=scanTriple.getSecond();
    for (    Map.Entry<HRegionInfo,Result> e : mergedRegions.entrySet()) {
      HRegionInfo regionA=HRegionInfo.getHRegionInfo(e.getValue(),HConstants.MERGEA_QUALIFIER);
      HRegionInfo regionB=HRegionInfo.getHRegionInfo(e.getValue(),HConstants.MERGEB_QUALIFIER);
      if (regionA == null || regionB == null) {
        LOG.warn("Unexpected references regionA=" + (regionA == null ? "null" : regionA.getRegionNameAsString()) + ",regionB="+ (regionB == null ? "null" : regionB.getRegionNameAsString())+ " in merged region "+ e.getKey().getRegionNameAsString());
      }
 else {
        if (cleanMergeRegion(e.getKey(),regionA,regionB)) {
          mergeCleaned++;
        }
      }
    }
    Map<HRegionInfo,Result> splitParents=scanTriple.getThird();
    int splitCleaned=0;
    HashSet<String> parentNotCleaned=new HashSet<String>();
    for (    Map.Entry<HRegionInfo,Result> e : splitParents.entrySet()) {
      if (!parentNotCleaned.contains(e.getKey().getEncodedName()) && cleanParent(e.getKey(),e.getValue())) {
        splitCleaned++;
      }
 else {
        PairOfSameType<HRegionInfo> daughters=HRegionInfo.getDaughterRegions(e.getValue());
        parentNotCleaned.add(daughters.getFirst().getEncodedName());
        parentNotCleaned.add(daughters.getSecond().getEncodedName());
      }
    }
    if ((mergeCleaned + splitCleaned) != 0) {
      LOG.info("Scanned " + count + " catalog row(s), gc'd "+ mergeCleaned+ " unreferenced merged region(s) and "+ splitCleaned+ " unreferenced parent region(s)");
    }
 else     if (LOG.isTraceEnabled()) {
      LOG.trace("Scanned " + count + " catalog row(s), gc'd "+ mergeCleaned+ " unreferenced merged region(s) and "+ splitCleaned+ " unreferenced parent region(s)");
    }
    return mergeCleaned + splitCleaned;
  }
  finally {
    alreadyRunning.set(false);
  }
}
