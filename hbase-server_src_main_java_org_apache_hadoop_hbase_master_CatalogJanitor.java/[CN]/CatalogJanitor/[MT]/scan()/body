{
  try {
    if (!alreadyRunning.compareAndSet(false,true)) {
      return 0;
    }
    Pair<Integer,Map<HRegionInfo,Result>> pair=getSplitParents();
    int count=pair.getFirst();
    Map<HRegionInfo,Result> splitParents=pair.getSecond();
    int cleaned=0;
    HashSet<HRegionInfo> parentNotCleaned=new HashSet<HRegionInfo>();
    for (    Map.Entry<HRegionInfo,Result> e : splitParents.entrySet()) {
      if (!parentNotCleaned.contains(e.getKey()) && cleanParent(e.getKey(),e.getValue())) {
        cleaned++;
      }
 else {
        parentNotCleaned.add(getDaughterRegionInfo(e.getValue(),HConstants.SPLITA_QUALIFIER));
        parentNotCleaned.add(getDaughterRegionInfo(e.getValue(),HConstants.SPLITB_QUALIFIER));
      }
    }
    if (cleaned != 0) {
      LOG.info("Scanned " + count + " catalog row(s) and gc'd "+ cleaned+ " unreferenced parent region(s)");
    }
 else     if (LOG.isDebugEnabled()) {
      LOG.debug("Scanned " + count + " catalog row(s) and gc'd "+ cleaned+ " unreferenced parent region(s)");
    }
    return cleaned;
  }
  finally {
    alreadyRunning.set(false);
  }
}
