{
  if (daughter == null) {
    return new Pair<Boolean,Boolean>(Boolean.FALSE,Boolean.FALSE);
  }
  FileSystem fs=this.services.getMasterFileSystem().getFileSystem();
  Path rootdir=this.services.getMasterFileSystem().getRootDir();
  Path tabledir=FSUtils.getTableDir(rootdir,daughter.getTable());
  Path daughterRegionDir=new Path(tabledir,daughter.getEncodedName());
  HRegionFileSystem regionFs=null;
  try {
    if (!FSUtils.isExists(fs,daughterRegionDir)) {
      return new Pair<Boolean,Boolean>(Boolean.FALSE,Boolean.FALSE);
    }
  }
 catch (  IOException ioe) {
    LOG.error("Error trying to determine if daughter region exists, " + "assuming exists and has references",ioe);
    return new Pair<Boolean,Boolean>(Boolean.TRUE,Boolean.TRUE);
  }
  boolean references=false;
  HTableDescriptor parentDescriptor=getTableDescriptor(parent.getTable());
  try {
    regionFs=HRegionFileSystem.openRegionFromFileSystem(this.services.getConfiguration(),fs,tabledir,daughter,true);
    for (    HColumnDescriptor family : parentDescriptor.getFamilies()) {
      if ((references=regionFs.hasReferences(family.getNameAsString()))) {
        break;
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Error trying to determine referenced files from : " + daughter.getEncodedName() + ", to: "+ parent.getEncodedName()+ " assuming has references",e);
    return new Pair<Boolean,Boolean>(Boolean.TRUE,Boolean.TRUE);
  }
  return new Pair<Boolean,Boolean>(Boolean.TRUE,Boolean.valueOf(references));
}
