{
  for (int tries=0; tries < numRetries; tries++) {
    boolean tableExists=false;
    try {
synchronized (master.regionManager.metaScannerThread.scannerLock) {
        for (        MetaRegion m : metaRegions) {
          HRegionInterface server=master.connection.getHRegionConnection(m.getServer());
          long scannerId=server.openScanner(m.getRegionName(),COLUMN_FAMILY_ARRAY,tableName,System.currentTimeMillis(),null);
          List<Text> emptyRows=new ArrayList<Text>();
          try {
            while (true) {
              RowResult values=server.next(scannerId);
              if (values == null || values.size() == 0) {
                break;
              }
              HRegionInfo info=this.master.getHRegionInfo(values.getRow(),values);
              if (info == null) {
                emptyRows.add(values.getRow());
                throw new IOException(COL_REGIONINFO + " not found on " + values.getRow());
              }
              String serverName=Writables.cellToString(values.get(COL_SERVER));
              long startCode=Writables.cellToLong(values.get(COL_STARTCODE));
              if (info.getTableDesc().getName().compareTo(tableName) > 0) {
                break;
              }
              tableExists=true;
              if (!isBeingServed(serverName,startCode)) {
                unservedRegions.add(info);
              }
              processScanItem(serverName,startCode,info);
            }
          }
  finally {
            if (scannerId != -1L) {
              try {
                server.close(scannerId);
              }
 catch (              IOException e) {
                e=RemoteExceptionHandler.checkIOException(e);
                LOG.error("closing scanner",e);
              }
            }
            scannerId=-1L;
          }
          if (emptyRows.size() > 0) {
            LOG.warn("Found " + emptyRows.size() + " rows with empty HRegionInfo while scanning meta region "+ m.getRegionName());
            master.deleteEmptyMetaRows(server,m.getRegionName(),emptyRows);
          }
          if (!tableExists) {
            throw new IOException(tableName + " does not exist");
          }
          postProcessMeta(m,server);
          unservedRegions.clear();
        }
      }
    }
 catch (    IOException e) {
      if (tries == numRetries - 1) {
        this.master.checkFileSystem();
        throw RemoteExceptionHandler.checkIOException(e);
      }
      continue;
    }
    break;
  }
}
