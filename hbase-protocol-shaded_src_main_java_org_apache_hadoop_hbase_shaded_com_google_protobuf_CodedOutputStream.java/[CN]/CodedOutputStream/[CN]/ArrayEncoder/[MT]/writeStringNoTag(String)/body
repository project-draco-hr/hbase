{
  final int oldPosition=position;
  try {
    final int maxLength=value.length() * Utf8.MAX_BYTES_PER_CHAR;
    final int maxLengthVarIntSize=computeUInt32SizeNoTag(maxLength);
    final int minLengthVarIntSize=computeUInt32SizeNoTag(value.length());
    if (minLengthVarIntSize == maxLengthVarIntSize) {
      position=oldPosition + minLengthVarIntSize;
      int newPosition=Utf8.encode(value,buffer,position,spaceLeft());
      position=oldPosition;
      int length=newPosition - oldPosition - minLengthVarIntSize;
      writeUInt32NoTag(length);
      position=newPosition;
    }
 else {
      int length=Utf8.encodedLength(value);
      writeUInt32NoTag(length);
      position=Utf8.encode(value,buffer,position,spaceLeft());
    }
  }
 catch (  UnpairedSurrogateException e) {
    position=oldPosition;
    inefficientWriteStringNoTag(value,e);
  }
catch (  IndexOutOfBoundsException e) {
    throw new OutOfSpaceException(e);
  }
}
