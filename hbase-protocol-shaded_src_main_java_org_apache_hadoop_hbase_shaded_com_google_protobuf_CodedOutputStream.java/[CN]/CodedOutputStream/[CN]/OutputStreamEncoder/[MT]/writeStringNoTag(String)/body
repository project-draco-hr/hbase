{
  try {
    final int maxLength=value.length() * Utf8.MAX_BYTES_PER_CHAR;
    final int maxLengthVarIntSize=computeUInt32SizeNoTag(maxLength);
    if (maxLengthVarIntSize + maxLength > limit) {
      final byte[] encodedBytes=new byte[maxLength];
      int actualLength=Utf8.encode(value,encodedBytes,0,maxLength);
      writeUInt32NoTag(actualLength);
      writeLazy(encodedBytes,0,actualLength);
      return;
    }
    if (maxLengthVarIntSize + maxLength > limit - position) {
      doFlush();
    }
    final int minLengthVarIntSize=computeUInt32SizeNoTag(value.length());
    int oldPosition=position;
    final int length;
    try {
      if (minLengthVarIntSize == maxLengthVarIntSize) {
        position=oldPosition + minLengthVarIntSize;
        int newPosition=Utf8.encode(value,buffer,position,limit - position);
        position=oldPosition;
        length=newPosition - oldPosition - minLengthVarIntSize;
        bufferUInt32NoTag(length);
        position=newPosition;
      }
 else {
        length=Utf8.encodedLength(value);
        bufferUInt32NoTag(length);
        position=Utf8.encode(value,buffer,position,length);
      }
      totalBytesWritten+=length;
    }
 catch (    UnpairedSurrogateException e) {
      totalBytesWritten-=position - oldPosition;
      position=oldPosition;
      throw e;
    }
catch (    ArrayIndexOutOfBoundsException e) {
      throw new OutOfSpaceException(e);
    }
  }
 catch (  UnpairedSurrogateException e) {
    inefficientWriteStringNoTag(value,e);
  }
}
