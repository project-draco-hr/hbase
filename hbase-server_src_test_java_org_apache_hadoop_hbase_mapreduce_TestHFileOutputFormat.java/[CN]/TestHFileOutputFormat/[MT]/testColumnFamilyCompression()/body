{
  Configuration conf=new Configuration(this.util.getConfiguration());
  RecordWriter<ImmutableBytesWritable,KeyValue> writer=null;
  TaskAttemptContext context=null;
  Path dir=util.getDataTestDir("testColumnFamilyCompression");
  HTable table=Mockito.mock(HTable.class);
  Map<String,Compression.Algorithm> configuredCompression=new HashMap<String,Compression.Algorithm>();
  Compression.Algorithm[] supportedAlgos=getSupportedCompressionAlgorithms();
  int familyIndex=0;
  for (  byte[] family : FAMILIES) {
    configuredCompression.put(Bytes.toString(family),supportedAlgos[familyIndex++ % supportedAlgos.length]);
  }
  setupMockColumnFamilies(table,configuredCompression);
  setupMockStartKeys(table);
  try {
    conf.set("io.seqfile.compression.type","NONE");
    Job job=new Job(conf,"testLocalMRIncrementalLoad");
    job.setWorkingDirectory(util.getDataTestDir("testColumnFamilyCompression"));
    setupRandomGeneratorMapper(job);
    HFileOutputFormat.configureIncrementalLoad(job,table);
    FileOutputFormat.setOutputPath(job,dir);
    context=createTestTaskAttemptContext(job);
    HFileOutputFormat hof=new HFileOutputFormat();
    writer=hof.getRecordWriter(context);
    writeRandomKeyValues(writer,context,ROWSPERSPLIT);
    writer.close(context);
    FileSystem fileSystem=dir.getFileSystem(conf);
    hof.getOutputCommitter(context).commitTask(context);
    hof.getOutputCommitter(context).commitJob(context);
    for (    byte[] family : FAMILIES) {
      String familyStr=new String(family);
      boolean found=false;
      for (      FileStatus f : fileSystem.listStatus(dir)) {
        if (Bytes.toString(family).equals(f.getPath().getName())) {
          found=true;
          Path dataFilePath=fileSystem.listStatus(f.getPath())[0].getPath();
          Reader reader=HFile.createReader(fileSystem,dataFilePath,new CacheConfig(conf));
          reader.loadFileInfo();
          assertEquals("Incorrect compression used for column family " + familyStr + "(reader: "+ reader+ ")",configuredCompression.get(familyStr),reader.getCompressionAlgorithm());
          break;
        }
      }
      if (!found) {
        fail("HFile for column family " + familyStr + " not found");
      }
    }
  }
  finally {
    dir.getFileSystem(conf).delete(dir,true);
  }
}
