{
  util=new HBaseTestingUtility();
  Configuration conf=util.getConfiguration();
  byte[][] splitKeys=generateRandomSplitKeys(4);
  try {
    util.startMiniCluster();
    Path testDir=util.getDataTestDirOnTestFS("testLocalMRIncrementalLoad");
    HBaseAdmin admin=util.getHBaseAdmin();
    Table table=util.createTable(TABLE_NAME,FAMILIES,splitKeys);
    assertEquals("Should start with empty table",0,util.countRows(table));
    int numRegions=-1;
    try (RegionLocator r=util.getConnection().getRegionLocator(TABLE_NAME)){
      numRegions=r.getStartKeys().length;
      assertEquals("Should make 5 regions",numRegions,5);
      runIncrementalPELoad(conf,table,r,testDir);
      assertEquals("HFOF should not touch actual table",0,util.countRows(table));
      int dir=0;
      for (      FileStatus f : testDir.getFileSystem(conf).listStatus(testDir)) {
        for (        byte[] family : FAMILIES) {
          if (Bytes.toString(family).equals(f.getPath().getName())) {
            ++dir;
          }
        }
      }
      assertEquals("Column family not found in FS.",FAMILIES.length,dir);
      if (shouldChangeRegions) {
        LOG.info("Changing regions in table");
        admin.disableTable(table.getName());
        while (util.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionStates().isRegionsInTransition()) {
          Threads.sleep(200);
          LOG.info("Waiting on table to finish disabling");
        }
        util.deleteTable(table.getName());
        byte[][] newSplitKeys=generateRandomSplitKeys(14);
        table=util.createTable(TABLE_NAME,FAMILIES,newSplitKeys);
        while (r.getAllRegionLocations().size() != 15 || !admin.isTableAvailable(table.getName())) {
          Thread.sleep(200);
          LOG.info("Waiting for new region assignment to happen");
        }
      }
      new LoadIncrementalHFiles(conf).doBulkLoad(testDir,admin,table,r);
    }
     int expectedRows=NMapInputFormat.getNumMapTasks(conf) * ROWSPERSPLIT;
    assertEquals("LoadIncrementalHFiles should put expected data in table",expectedRows,util.countRows(table));
    Scan scan=new Scan();
    ResultScanner results=table.getScanner(scan);
    for (    Result res : results) {
      assertEquals(FAMILIES.length,res.rawCells().length);
      Cell first=res.rawCells()[0];
      for (      Cell kv : res.rawCells()) {
        assertTrue(CellUtil.matchingRow(first,kv));
        assertTrue(Bytes.equals(CellUtil.cloneValue(first),CellUtil.cloneValue(kv)));
      }
    }
    results.close();
    String tableDigestBefore=util.checksumRows(table);
    admin.disableTable(TABLE_NAME);
    while (!admin.isTableDisabled(TABLE_NAME)) {
      Thread.sleep(200);
      LOG.info("Waiting for table to disable");
    }
    admin.enableTable(TABLE_NAME);
    util.waitTableAvailable(TABLE_NAME);
    assertEquals("Data should remain after reopening of regions",tableDigestBefore,util.checksumRows(table));
  }
  finally {
    util.shutdownMiniCluster();
  }
}
