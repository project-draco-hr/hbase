{
  Configuration conf=util.getConfiguration();
  conf.setInt("hbase.hstore.compaction.min",2);
  generateRandomStartKeys(5);
  try {
    util.startMiniCluster();
    Path testDir=util.getDataTestDirOnTestFS("testExcludeMinorCompaction");
    final FileSystem fs=util.getDFSCluster().getFileSystem();
    Admin admin=util.getHBaseAdmin();
    HTable table=util.createTable(TABLE_NAME,FAMILIES);
    assertEquals("Should start with empty table",0,util.countRows(table));
    final Path storePath=HStore.getStoreHomedir(FSUtils.getTableDir(FSUtils.getRootDir(conf),TABLE_NAME),admin.getTableRegions(TABLE_NAME).get(0),FAMILIES[0]);
    assertEquals(0,fs.listStatus(storePath).length);
    Put p=new Put(Bytes.toBytes("test"));
    p.add(FAMILIES[0],Bytes.toBytes("1"),Bytes.toBytes("1"));
    table.put(p);
    admin.flush(TABLE_NAME);
    assertEquals(1,util.countRows(table));
    quickPoll(new Callable<Boolean>(){
      public Boolean call() throws Exception {
        return fs.listStatus(storePath).length == 1;
      }
    }
,5000);
    conf.setBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",true);
    util.startMiniMapReduceCluster();
    runIncrementalPELoad(conf,table,testDir);
    new LoadIncrementalHFiles(conf).doBulkLoad(testDir,table);
    int expectedRows=NMapInputFormat.getNumMapTasks(conf) * ROWSPERSPLIT;
    assertEquals("LoadIncrementalHFiles should put expected data in table",expectedRows + 1,util.countRows(table));
    assertEquals(2,fs.listStatus(storePath).length);
    admin.compact(TABLE_NAME);
    try {
      quickPoll(new Callable<Boolean>(){
        public Boolean call() throws Exception {
          return fs.listStatus(storePath).length == 1;
        }
      }
,5000);
      throw new IOException("SF# = " + fs.listStatus(storePath).length);
    }
 catch (    AssertionError ae) {
    }
    admin.majorCompact(TABLE_NAME);
    quickPoll(new Callable<Boolean>(){
      public Boolean call() throws Exception {
        return fs.listStatus(storePath).length == 1;
      }
    }
,5000);
  }
  finally {
    util.shutdownMiniMapReduceCluster();
    util.shutdownMiniCluster();
  }
}
