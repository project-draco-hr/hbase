{
  byte[] aPadded=null;
  byte[] bPadded=null;
  if (a.length < b.length) {
    aPadded=padTail(a,b.length - a.length);
    bPadded=b;
  }
 else   if (b.length < a.length) {
    aPadded=a;
    bPadded=padTail(b,a.length - b.length);
  }
 else {
    aPadded=a;
    bPadded=b;
  }
  if (compareTo(aPadded,bPadded) > 1) {
    throw new IllegalArgumentException("b > a");
  }
  if (num <= 0)   throw new IllegalArgumentException("num cannot be < 0");
  byte[] prependHeader={1,0};
  BigInteger startBI=new BigInteger(add(prependHeader,aPadded));
  BigInteger stopBI=new BigInteger(add(prependHeader,bPadded));
  BigInteger diffBI=stopBI.subtract(startBI);
  BigInteger splitsBI=BigInteger.valueOf(num + 1);
  if (diffBI.compareTo(splitsBI) <= 0)   return null;
  BigInteger intervalBI=null;
  try {
    intervalBI=diffBI.divide(splitsBI);
  }
 catch (  Exception e) {
    return null;
  }
  byte[][] result=new byte[num + 2][];
  result[0]=a;
  for (int i=1; i <= num; i++) {
    BigInteger curBI=startBI.add(intervalBI.multiply(BigInteger.valueOf(i)));
    byte[] padded=curBI.toByteArray();
    if (padded[1] == 0)     padded=tail(padded,padded.length - 2);
 else     padded=tail(padded,padded.length - 1);
    result[i]=padded;
  }
  result[num + 1]=b;
  return result;
}
