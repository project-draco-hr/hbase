{
  if (isClosed()) {
    LOG.warn("Region " + this + " already closed");
    return null;
  }
  boolean wasFlushing=false;
synchronized (writestate) {
    writestate.writesEnabled=false;
    wasFlushing=writestate.flushing;
    LOG.debug("Closing " + this + ": disabling compactions & flushes");
    while (writestate.compacting || writestate.flushing) {
      LOG.debug("waiting for" + (writestate.compacting ? " compaction" : "") + (writestate.flushing ? (writestate.compacting ? "," : "") + " cache flush" : "")+ " to complete for region "+ this);
      try {
        writestate.wait();
      }
 catch (      InterruptedException iex) {
      }
    }
  }
  if (!abort && !wasFlushing && worthPreFlushing()) {
    LOG.info("Running close preflush of " + this.getRegionNameAsString());
    internalFlushcache();
  }
  newScannerLock.writeLock().lock();
  this.closing.set(true);
  try {
    splitsAndClosesLock.writeLock().lock();
    LOG.debug("Updates disabled for region, no outstanding scanners on " + this);
    try {
      waitOnRowLocks();
      LOG.debug("No more row locks outstanding on region " + this);
      if (!abort) {
        internalFlushcache();
      }
      List<StoreFile> result=new ArrayList<StoreFile>();
      for (      Store store : stores.values()) {
        result.addAll(store.close());
      }
      this.closed.set(true);
      LOG.info("Closed " + this);
      return result;
    }
  finally {
      splitsAndClosesLock.writeLock().unlock();
    }
  }
  finally {
    newScannerLock.writeLock().unlock();
  }
}
