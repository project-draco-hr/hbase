{
  if (cr == null) {
    return false;
  }
  if (this.closing.get() || this.closed.get()) {
    LOG.debug("Skipping compaction on " + this + " because closing/closed");
    return false;
  }
  Preconditions.checkArgument(cr.getHRegion().equals(this));
  lock.readLock().lock();
  MonitoredTask status=TaskMonitor.get().createStatus("Compacting " + cr.getStore() + " in "+ this);
  try {
    if (this.closed.get()) {
      LOG.debug("Skipping compaction on " + this + " because closed");
      return false;
    }
    boolean decr=true;
    try {
synchronized (writestate) {
        if (writestate.writesEnabled) {
          ++writestate.compacting;
        }
 else {
          String msg="NOT compacting region " + this + ". Writes disabled.";
          LOG.info(msg);
          status.abort(msg);
          decr=false;
          return false;
        }
      }
      LOG.info("Starting compaction on " + cr.getStore() + " in region "+ this+ (cr.getCompactSelection().isOffPeakCompaction() ? " as an off-peak compaction" : ""));
      doRegionCompactionPrep();
      try {
        status.setStatus("Compacting store " + cr.getStore());
        cr.getStore().compact(cr);
      }
 catch (      InterruptedIOException iioe) {
        String msg="compaction interrupted by user";
        LOG.info(msg,iioe);
        status.abort(msg);
        return false;
      }
    }
  finally {
      if (decr) {
synchronized (writestate) {
          --writestate.compacting;
          if (writestate.compacting <= 0) {
            writestate.notifyAll();
          }
        }
      }
    }
    status.markComplete("Compaction complete");
    return true;
  }
  finally {
    status.cleanup();
    lock.readLock().unlock();
  }
}
