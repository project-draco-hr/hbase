{
  if (this.closing.get()) {
    LOG.debug("Skipping compaction on " + this + " because closing");
    return null;
  }
  lock.readLock().lock();
  try {
    if (this.closed.get()) {
      LOG.debug("Skipping compaction on " + this + " because closed");
      return null;
    }
    byte[] splitRow=null;
    if (this.closed.get()) {
      return splitRow;
    }
    try {
synchronized (writestate) {
        if (!writestate.compacting && writestate.writesEnabled) {
          writestate.compacting=true;
        }
 else {
          LOG.info("NOT compacting region " + this + ": compacting="+ writestate.compacting+ ", writesEnabled="+ writestate.writesEnabled);
          return splitRow;
        }
      }
      LOG.info("Starting" + (majorCompaction ? " major " : " ") + "compaction on region "+ this);
      long startTime=EnvironmentEdgeManager.currentTimeMillis();
      doRegionCompactionPrep();
      long maxSize=-1;
      for (      Store store : stores.values()) {
        final Store.StoreSize ss=store.compact(majorCompaction);
        if (ss != null && ss.getSize() > maxSize) {
          maxSize=ss.getSize();
          splitRow=ss.getSplitRow();
        }
      }
      String timeTaken=StringUtils.formatTimeDiff(EnvironmentEdgeManager.currentTimeMillis(),startTime);
      LOG.info("compaction completed on region " + this + " in "+ timeTaken);
    }
  finally {
synchronized (writestate) {
        writestate.compacting=false;
        writestate.notifyAll();
      }
    }
    return splitRow;
  }
  finally {
    lock.readLock().unlock();
  }
}
