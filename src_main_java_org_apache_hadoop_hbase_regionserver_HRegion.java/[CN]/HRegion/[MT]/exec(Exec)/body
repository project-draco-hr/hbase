{
  Class<? extends CoprocessorProtocol> protocol=call.getProtocol();
  if (!protocolHandlers.containsKey(protocol)) {
    throw new HBaseRPC.UnknownProtocolException(protocol,"No matching handler for protocol " + protocol.getName() + " in region "+ Bytes.toStringBinary(getRegionName()));
  }
  CoprocessorProtocol handler=protocolHandlers.getInstance(protocol);
  Object value;
  Class<?> returnType;
  try {
    Method method=protocol.getMethod(call.getMethodName(),call.getParameterClasses());
    method.setAccessible(true);
    returnType=method.getReturnType();
    value=method.invoke(handler,call.getParameters());
  }
 catch (  InvocationTargetException e) {
    Throwable target=e.getTargetException();
    if (target instanceof IOException) {
      throw (IOException)target;
    }
    IOException ioe=new IOException(target.toString());
    ioe.setStackTrace(target.getStackTrace());
    throw ioe;
  }
catch (  Throwable e) {
    if (!(e instanceof IOException)) {
      LOG.error("Unexpected throwable object ",e);
    }
    IOException ioe=new IOException(e.toString());
    ioe.setStackTrace(e.getStackTrace());
    throw ioe;
  }
  return new ExecResult(getRegionName(),returnType,value);
}
