{
  checkReadOnly();
  checkResources();
  boolean isPut=w instanceof Put;
  if (!isPut && !(w instanceof Delete))   throw new DoNotRetryIOException("Action must be Put or Delete");
  Row r=(Row)w;
  if (Bytes.compareTo(row,r.getRow()) != 0) {
    throw new DoNotRetryIOException("Action's getRow must match the passed row");
  }
  startRegionOperation();
  try {
    RowLock lock=isPut ? ((Put)w).getRowLock() : ((Delete)w).getRowLock();
    Get get=new Get(row,lock);
    checkFamily(family);
    get.addColumn(family,qualifier);
    Integer lid=getLock(lockId,get.getRow(),true);
    List<KeyValue> result=new ArrayList<KeyValue>();
    try {
      result=get(get,false);
      boolean matches=false;
      if (result.size() == 0 && (comparator.getValue() == null || comparator.getValue().length == 0)) {
        matches=true;
      }
 else       if (result.size() == 1) {
        int compareResult=comparator.compareTo(result.get(0).getValue());
switch (compareOp) {
case LESS:
          matches=compareResult <= 0;
        break;
case LESS_OR_EQUAL:
      matches=compareResult < 0;
    break;
case EQUAL:
  matches=compareResult == 0;
break;
case NOT_EQUAL:
matches=compareResult != 0;
break;
case GREATER_OR_EQUAL:
matches=compareResult > 0;
break;
case GREATER:
matches=compareResult >= 0;
break;
default :
throw new RuntimeException("Unknown Compare op " + compareOp.name());
}
}
if (matches) {
if (isPut) {
put(((Put)w).getFamilyMap(),writeToWAL);
}
 else {
Delete d=(Delete)w;
prepareDelete(d);
delete(d.getFamilyMap(),writeToWAL);
}
return true;
}
return false;
}
  finally {
if (lockId == null) releaseRowLock(lid);
}
}
  finally {
closeRegionOperation();
}
}
