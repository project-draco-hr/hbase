{
  Map<byte[],List<KeyValue>> familyMap=delete.getFamilyMap();
  WALEdit localWalEdit=walEdit == null ? new WALEdit() : walEdit;
  if (coprocessorHost != null && walEdit == null) {
    if (coprocessorHost.preDelete(delete,localWalEdit,writeToWAL)) {
      return;
    }
  }
  long now=EnvironmentEdgeManager.currentTimeMillis();
  byte[] byteNow=Bytes.toBytes(now);
  boolean flush=false;
  updatesLock.readLock().lock();
  try {
    for (    Map.Entry<byte[],List<KeyValue>> e : familyMap.entrySet()) {
      byte[] family=e.getKey();
      List<KeyValue> kvs=e.getValue();
      Map<byte[],Integer> kvCount=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
      for (      KeyValue kv : kvs) {
        if (kv.isLatestTimestamp() && kv.isDeleteType()) {
          byte[] qual=kv.getQualifier();
          if (qual == null)           qual=HConstants.EMPTY_BYTE_ARRAY;
          Integer count=kvCount.get(qual);
          if (count == null) {
            kvCount.put(qual,1);
          }
 else {
            kvCount.put(qual,count + 1);
          }
          count=kvCount.get(qual);
          Get get=new Get(kv.getRow());
          get.setMaxVersions(count);
          get.addColumn(family,qual);
          List<KeyValue> result=get(get,false);
          if (result.size() < count) {
            kv.updateLatestStamp(byteNow);
            continue;
          }
          if (result.size() > count) {
            throw new RuntimeException("Unexpected size: " + result.size());
          }
          KeyValue getkv=result.get(count - 1);
          Bytes.putBytes(kv.getBuffer(),kv.getTimestampOffset(),getkv.getBuffer(),getkv.getTimestampOffset(),Bytes.SIZEOF_LONG);
        }
 else {
          kv.updateLatestStamp(byteNow);
        }
      }
    }
    if (writeToWAL) {
      addFamilyMapToWALEdit(familyMap,localWalEdit);
      this.log.append(regionInfo,this.htableDescriptor.getName(),localWalEdit,clusterId,now,this.htableDescriptor);
    }
    long addedSize=applyFamilyMapToMemstore(familyMap,writeEntry);
    flush=isFlushSize(this.addAndGetGlobalMemstoreSize(addedSize));
  }
  finally {
    this.updatesLock.readLock().unlock();
  }
  if (coprocessorHost != null && walEdit == null) {
    coprocessorHost.postDelete(delete,localWalEdit,writeToWAL);
  }
  final long after=EnvironmentEdgeManager.currentTimeMillis();
  final String metricPrefix=SchemaMetrics.generateSchemaMetricsPrefix(getTableDesc().getNameAsString(),familyMap.keySet());
  if (!metricPrefix.isEmpty()) {
    HRegion.incrTimeVaryingMetric(metricPrefix + "delete_",after - now);
  }
  if (flush) {
    requestFlush();
  }
}
