{
  Map<byte[],List<KeyValue>> familyMap=put.getFamilyMap();
  WALEdit walEdit=new WALEdit();
  if (coprocessorHost != null) {
    if (coprocessorHost.prePut(put,walEdit,writeToWAL)) {
      return;
    }
  }
  long now=EnvironmentEdgeManager.currentTimeMillis();
  byte[] byteNow=Bytes.toBytes(now);
  boolean flush=false;
  this.updatesLock.readLock().lock();
  try {
    checkFamilies(familyMap.keySet());
    checkTimestamps(familyMap,now);
    updateKVTimestamps(familyMap.values(),byteNow);
    if (writeToWAL) {
      addFamilyMapToWALEdit(familyMap,walEdit);
      this.log.append(regionInfo,this.htableDescriptor.getName(),walEdit,clusterId,now,this.htableDescriptor);
    }
    long addedSize=applyFamilyMapToMemstore(familyMap,null);
    flush=isFlushSize(this.addAndGetGlobalMemstoreSize(addedSize));
  }
  finally {
    this.updatesLock.readLock().unlock();
  }
  if (coprocessorHost != null) {
    coprocessorHost.postPut(put,walEdit,writeToWAL);
  }
  final long after=EnvironmentEdgeManager.currentTimeMillis();
  final String metricPrefix=SchemaMetrics.generateSchemaMetricsPrefix(this.getTableDesc().getNameAsString(),familyMap.keySet());
  if (!metricPrefix.isEmpty()) {
    HRegion.incrTimeVaryingMetric(metricPrefix + "put_",after - now);
  }
  if (flush) {
    requestFlush();
  }
}
