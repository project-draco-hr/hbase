{
  if (timeout < 0) {
    try {
      processor.process(now,region,mutations,walEdit);
    }
 catch (    IOException e) {
      LOG.warn("RowProcessor:" + processor.getClass().getName() + " throws Exception on row(s):"+ Bytes.toStringBinary(processor.getRowsToLock().iterator().next())+ "...",e);
      throw e;
    }
    return;
  }
  FutureTask<Void> task=new FutureTask<Void>(new Callable<Void>(){
    @Override public Void call() throws IOException {
      try {
        processor.process(now,region,mutations,walEdit);
        return null;
      }
 catch (      IOException e) {
        LOG.warn("RowProcessor:" + processor.getClass().getName() + " throws Exception on row(s):"+ Bytes.toStringBinary(processor.getRowsToLock().iterator().next())+ "...",e);
        throw e;
      }
    }
  }
);
  rowProcessorExecutor.execute(task);
  try {
    task.get(timeout,TimeUnit.MILLISECONDS);
  }
 catch (  TimeoutException te) {
    LOG.error("RowProcessor timeout:" + timeout + " ms on row(s):"+ Bytes.toStringBinary(processor.getRowsToLock().iterator().next())+ "...");
    throw new IOException(te);
  }
catch (  Exception e) {
    throw new IOException(e);
  }
}
