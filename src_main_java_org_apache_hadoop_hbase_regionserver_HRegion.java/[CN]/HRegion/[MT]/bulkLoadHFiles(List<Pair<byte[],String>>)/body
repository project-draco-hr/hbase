{
  Preconditions.checkNotNull(familyPaths);
  startBulkRegionOperation(hasMultipleColumnFamilies(familyPaths));
  this.writeRequestsCount.increment();
  List<IOException> ioes=new ArrayList<IOException>();
  List<Pair<byte[],String>> failures=new ArrayList<Pair<byte[],String>>();
  boolean rangesOk=true;
  try {
    for (    Pair<byte[],String> p : familyPaths) {
      byte[] familyName=p.getFirst();
      String path=p.getSecond();
      Store store=getStore(familyName);
      if (store == null) {
        IOException ioe=new DoNotRetryIOException("No such column family " + Bytes.toStringBinary(familyName));
        ioes.add(ioe);
        failures.add(p);
      }
      try {
        store.assertBulkLoadHFileOk(new Path(path));
      }
 catch (      IOException ioe) {
        rangesOk=false;
        ioes.add(ioe);
        failures.add(p);
      }
    }
    if (ioes.size() != 0) {
      return;
    }
    for (    Pair<byte[],String> p : familyPaths) {
      byte[] familyName=p.getFirst();
      String path=p.getSecond();
      Store store=getStore(familyName);
      try {
        store.bulkLoadHFile(path);
      }
 catch (      IOException ioe) {
        ioes.add(ioe);
        failures.add(p);
        break;
      }
    }
  }
  finally {
    closeBulkRegionOperation();
    if (ioes.size() != 0) {
      StringBuilder list=new StringBuilder();
      for (      Pair<byte[],String> p : failures) {
        list.append("\n").append(Bytes.toString(p.getFirst())).append(" : ").append(p.getSecond());
      }
      if (rangesOk) {
        LOG.error("There was a partial failure due to IO.   These " + "(family,hfile) pairs were not loaded: " + list);
      }
 else {
        LOG.info("There was a recoverable bulk load failure likely due to a" + " split.  These (family, HFile) pairs were not loaded: " + list);
      }
      if (ioes.size() == 1) {
        throw ioes.get(0);
      }
      throw MultipleIOException.createIOException(ioes);
    }
  }
}
