{
  this.maxResultSize=scan.getMaxResultSize();
  this.filter=scan.getFilter();
  this.batch=scan.getBatch();
  if (Bytes.equals(scan.getStopRow(),HConstants.EMPTY_END_ROW)) {
    this.stopRow=null;
  }
 else {
    this.stopRow=scan.getStopRow();
  }
  this.isScan=scan.isGetScan() ? -1 : 0;
  IsolationLevel isolationLevel=scan.getIsolationLevel();
synchronized (scannerReadPoints) {
    if (isolationLevel == IsolationLevel.READ_UNCOMMITTED) {
      this.readPt=Long.MAX_VALUE;
      MultiVersionConsistencyControl.setThreadReadPoint(this.readPt);
    }
 else {
      this.readPt=MultiVersionConsistencyControl.resetThreadReadPoint(mvcc);
    }
    scannerReadPoints.put(this,this.readPt);
  }
  List<KeyValueScanner> scanners=new ArrayList<KeyValueScanner>();
  if (additionalScanners != null) {
    scanners.addAll(additionalScanners);
  }
  for (  Map.Entry<byte[],NavigableSet<byte[]>> entry : scan.getFamilyMap().entrySet()) {
    Store store=stores.get(entry.getKey());
    StoreScanner scanner=store.getScanner(scan,entry.getValue());
    scanners.add(scanner);
  }
  this.storeHeap=new KeyValueHeap(scanners,comparator);
}
