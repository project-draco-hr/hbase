{
  byte[] localStartKey;
  int cacheNum=nbRows;
  boolean regionChanged=true;
  boolean isFirstRegionToLocate=false;
  if (this.currentRegion != null && currentRegionDone) {
    byte[] startKey=this.currentRegion.getStartKey();
    if (startKey == null || Bytes.equals(startKey,HConstants.EMPTY_BYTE_ARRAY) || checkScanStopRow(startKey) || done) {
      close();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Finished with small scan at " + this.currentRegion);
      }
      return false;
    }
    localStartKey=createClosestRowBefore(startKey);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Finished with region " + this.currentRegion);
    }
  }
 else   if (this.lastResult != null) {
    regionChanged=false;
    localStartKey=createClosestRowBefore(lastResult.getRow());
  }
 else {
    isFirstRegionToLocate=true;
    localStartKey=this.scan.getStartRow();
  }
  if (!isFirstRegionToLocate && (localStartKey == null || Bytes.equals(localStartKey,HConstants.EMPTY_BYTE_ARRAY))) {
    return false;
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("Advancing internal small scanner to startKey at '" + Bytes.toStringBinary(localStartKey) + "'");
  }
  smallReversedScanCallable=callableFactory.getCallable(getConnection(),getTable(),scan,getScanMetrics(),localStartKey,cacheNum,rpcControllerFactory,getPool(),getPrimaryOperationTimeout(),getRetries(),getScannerTimeout(),getConf(),caller,isFirstRegionToLocate);
  if (this.scanMetrics != null && regionChanged) {
    this.scanMetrics.countOfRegions.incrementAndGet();
  }
  return true;
}
