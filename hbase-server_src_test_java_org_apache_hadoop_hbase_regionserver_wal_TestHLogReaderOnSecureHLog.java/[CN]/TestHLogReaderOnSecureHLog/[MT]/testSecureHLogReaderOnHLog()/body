{
  Configuration conf=TEST_UTIL.getConfiguration();
  HLogFactory.resetLogReaderClass();
  HLogFactory.resetLogWriterClass();
  conf.setClass("hbase.regionserver.hlog.reader.impl",SecureProtobufLogReader.class,HLog.Reader.class);
  conf.setClass("hbase.regionserver.hlog.writer.impl",ProtobufLogWriter.class,HLog.Writer.class);
  FileSystem fs=TEST_UTIL.getTestFileSystem();
  Path walPath=writeWAL("testSecureHLogReaderOnHLog");
  long length=fs.getFileStatus(walPath).getLen();
  FSDataInputStream in=fs.open(walPath);
  byte[] fileData=new byte[(int)length];
  IOUtils.readFully(in,fileData);
  in.close();
  assertTrue("Cells should be plaintext",Bytes.contains(fileData,value));
  try {
    HLog.Reader reader=HLogFactory.createReader(TEST_UTIL.getTestFileSystem(),walPath,conf);
  }
 catch (  IOException ioe) {
    assertFalse(true);
  }
  FileStatus[] listStatus=fs.listStatus(walPath.getParent());
  RecoveryMode mode=(conf.getBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,false) ? RecoveryMode.LOG_REPLAY : RecoveryMode.LOG_SPLITTING);
  Path rootdir=FSUtils.getRootDir(conf);
  try {
    HLogSplitter s=new HLogSplitter(conf,rootdir,fs,null,null,mode);
    s.splitLogFile(listStatus[0],null);
    Path file=new Path(ZKSplitLog.getSplitLogDir(rootdir,listStatus[0].getPath().getName()),"corrupt");
    assertTrue(!fs.exists(file));
  }
 catch (  IOException ioe) {
    assertTrue("WAL should have been processed",false);
  }
}
