{
  int primitives=0;
  int arrays=0;
  int references=nrOfRefsPerObj;
  for (; null != cl; cl=cl.getSuperclass()) {
    Field[] field=cl.getDeclaredFields();
    if (null != field) {
      for (int i=0; i < field.length; i++) {
        if (!Modifier.isStatic(field[i].getModifiers())) {
          Class fieldClass=field[i].getType();
          if (fieldClass.isArray()) {
            arrays++;
            references++;
          }
 else           if (!fieldClass.isPrimitive()) {
            references++;
          }
 else {
            String name=fieldClass.getName();
            if (name.equals("int") || name.equals("I"))             primitives+=Bytes.SIZEOF_INT;
 else             if (name.equals("long") || name.equals("J"))             primitives+=Bytes.SIZEOF_LONG;
 else             if (name.equals("boolean") || name.equals("Z"))             primitives+=Bytes.SIZEOF_BOOLEAN;
 else             if (name.equals("short") || name.equals("S"))             primitives+=Bytes.SIZEOF_SHORT;
 else             if (name.equals("byte") || name.equals("B"))             primitives+=Bytes.SIZEOF_BYTE;
 else             if (name.equals("char") || name.equals("C"))             primitives+=Bytes.SIZEOF_CHAR;
 else             if (name.equals("float") || name.equals("F"))             primitives+=Bytes.SIZEOF_FLOAT;
 else             if (name.equals("double") || name.equals("D"))             primitives+=Bytes.SIZEOF_DOUBLE;
          }
          if (debug) {
            if (LOG.isDebugEnabled()) {
              LOG.debug(field[i].getName() + "\n\t" + field[i].getType());
            }
          }
        }
      }
    }
  }
  return new int[]{primitives,arrays,references};
}
