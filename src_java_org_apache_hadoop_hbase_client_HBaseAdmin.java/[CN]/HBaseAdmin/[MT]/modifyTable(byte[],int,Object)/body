{
  if (this.master == null) {
    throw new MasterNotRunningException("master has been shut down");
  }
  HTableDescriptor.isLegalTableName(tableName);
  try {
switch (op) {
case HConstants.MODIFY_TABLE_SET_HTD:
{
        if (args == null || args.length < 1 || !(args[0] instanceof HTableDescriptor))         throw new IOException("SET_HTD requires a HTableDescriptor");
        Writable[] arr=new Writable[1];
        arr[0]=(HTableDescriptor)args[0];
        this.master.modifyTable(tableName,op,arr);
      }
    break;
case HConstants.MODIFY_TABLE_SPLIT:
{
    Writable[] arr=null;
    if (args != null && args.length > 0) {
      arr=new Writable[1];
      if (args[0] instanceof byte[]) {
        arr[0]=new ImmutableBytesWritable((byte[])args[0]);
      }
 else       if (args[0] instanceof ImmutableBytesWritable) {
        arr[0]=(ImmutableBytesWritable)args[0];
      }
 else {
        throw new IOException("SPLIT with arg requires byte[] or ImmutableBytesWritable");
      }
    }
    this.master.modifyTable(tableName,op,arr);
    break;
  }
default :
throw new IOException("unknown modifyTable op " + op);
}
}
 catch (RemoteException e) {
throw RemoteExceptionHandler.decodeRemoteException(e);
}
}
