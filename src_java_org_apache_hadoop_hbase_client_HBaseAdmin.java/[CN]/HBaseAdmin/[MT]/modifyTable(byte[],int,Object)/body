{
  if (this.master == null) {
    throw new MasterNotRunningException("master has been shut down");
  }
  if (tableName != null && !MetaUtils.isMetaTableName(tableName)) {
    HTableDescriptor.isLegalTableName(tableName);
  }
  Writable[] arr=null;
  try {
switch (op) {
case HConstants.MODIFY_TABLE_SET_HTD:
      if (args == null || args.length < 1 || !(args[0] instanceof HTableDescriptor)) {
        throw new IllegalArgumentException("SET_HTD requires a HTableDescriptor");
      }
    arr=new Writable[1];
  arr[0]=(HTableDescriptor)args[0];
this.master.modifyTable(tableName,op,arr);
break;
case HConstants.MODIFY_TABLE_COMPACT:
case HConstants.MODIFY_TABLE_SPLIT:
case HConstants.MODIFY_TABLE_MAJOR_COMPACT:
case HConstants.MODIFY_TABLE_FLUSH:
if (args != null && args.length > 0) {
arr=new Writable[1];
if (args[0] instanceof byte[]) {
arr[0]=new ImmutableBytesWritable((byte[])args[0]);
}
 else if (args[0] instanceof ImmutableBytesWritable) {
arr[0]=(ImmutableBytesWritable)args[0];
}
 else if (args[0] instanceof String) {
arr[0]=new ImmutableBytesWritable(Bytes.toBytes((String)args[0]));
}
 else {
throw new IllegalArgumentException("Requires byte[], String, or" + "ImmutableBytesWritable");
}
}
this.master.modifyTable(tableName,op,arr);
break;
case HConstants.MODIFY_CLOSE_REGION:
if (args == null || args.length < 1) {
throw new IllegalArgumentException("Requires at least a region name");
}
arr=new Writable[args.length];
for (int i=0; i < args.length; i++) {
if (args[i] instanceof byte[]) {
arr[i]=new ImmutableBytesWritable((byte[])args[i]);
}
 else if (args[i] instanceof ImmutableBytesWritable) {
arr[i]=(ImmutableBytesWritable)args[i];
}
 else if (args[i] instanceof String) {
arr[i]=new ImmutableBytesWritable(Bytes.toBytes((String)args[i]));
}
 else if (args[i] instanceof Boolean) {
arr[i]=new BooleanWritable(((Boolean)args[i]).booleanValue());
}
 else {
throw new IllegalArgumentException("Requires byte [] or " + "ImmutableBytesWritable, not " + args[i]);
}
}
this.master.modifyTable(tableName,op,arr);
break;
default :
throw new IOException("unknown modifyTable op " + op);
}
}
 catch (RemoteException e) {
throw RemoteExceptionHandler.decodeRemoteException(e);
}
}
