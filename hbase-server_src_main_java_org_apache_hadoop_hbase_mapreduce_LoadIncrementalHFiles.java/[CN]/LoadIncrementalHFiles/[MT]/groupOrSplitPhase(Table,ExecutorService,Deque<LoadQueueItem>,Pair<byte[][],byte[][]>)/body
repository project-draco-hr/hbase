{
  Multimap<ByteBuffer,LoadQueueItem> rgs=HashMultimap.create();
  final Multimap<ByteBuffer,LoadQueueItem> regionGroups=Multimaps.synchronizedMultimap(rgs);
  List<String> missingHFiles=new ArrayList<>();
  Pair<Multimap<ByteBuffer,LoadQueueItem>,List<String>> pair=new Pair<>(regionGroups,missingHFiles);
  Set<Future<Pair<List<LoadQueueItem>,String>>> splittingFutures=new HashSet<>();
  while (!queue.isEmpty()) {
    final LoadQueueItem item=queue.remove();
    final Callable<Pair<List<LoadQueueItem>,String>> call=new Callable<Pair<List<LoadQueueItem>,String>>(){
      @Override public Pair<List<LoadQueueItem>,String> call() throws Exception {
        Pair<List<LoadQueueItem>,String> splits=groupOrSplit(regionGroups,item,table,startEndKeys);
        return splits;
      }
    }
;
    splittingFutures.add(pool.submit(call));
  }
  for (  Future<Pair<List<LoadQueueItem>,String>> lqis : splittingFutures) {
    try {
      Pair<List<LoadQueueItem>,String> splits=lqis.get();
      if (splits != null) {
        if (splits.getFirst() != null) {
          queue.addAll(splits.getFirst());
        }
 else {
          missingHFiles.add(splits.getSecond());
        }
      }
    }
 catch (    ExecutionException e1) {
      Throwable t=e1.getCause();
      if (t instanceof IOException) {
        LOG.error("IOException during splitting",e1);
        throw (IOException)t;
      }
      LOG.error("Unexpected execution exception during splitting",e1);
      throw new IllegalStateException(t);
    }
catch (    InterruptedException e1) {
      LOG.error("Unexpected interrupted exception during splitting",e1);
      throw (InterruptedIOException)new InterruptedIOException().initCause(e1);
    }
  }
  return pair;
}
