{
  FileSystem fs=inFile.getFileSystem(conf);
  CacheConfig cacheConf=new CacheConfig(conf);
  HalfStoreFileReader halfReader=null;
  StoreFile.Writer halfWriter=null;
  try {
    halfReader=new HalfStoreFileReader(fs,inFile,cacheConf,reference,DataBlockEncoding.NONE);
    Map<byte[],byte[]> fileInfo=halfReader.loadFileInfo();
    int blocksize=familyDescriptor.getBlocksize();
    Algorithm compression=familyDescriptor.getCompression();
    BloomType bloomFilterType=familyDescriptor.getBloomFilterType();
    HFileContext meta=new HFileContext();
    meta.setCompressAlgo(compression);
    meta.setChecksumType(HStore.getChecksumType(conf));
    meta.setBytesPerChecksum(HStore.getBytesPerChecksum(conf));
    meta.setBlocksize(blocksize);
    meta.setEncodingInCache(familyDescriptor.getDataBlockEncoding());
    meta.setEncodingOnDisk(familyDescriptor.getDataBlockEncodingOnDisk());
    halfWriter=new StoreFile.WriterBuilder(conf,cacheConf,fs).withFilePath(outFile).withBloomType(bloomFilterType).withFileContext(meta).build();
    HFileScanner scanner=halfReader.getScanner(false,false,false);
    scanner.seekTo();
    do {
      KeyValue kv=scanner.getKeyValue();
      halfWriter.append(kv);
    }
 while (scanner.next());
    for (    Map.Entry<byte[],byte[]> entry : fileInfo.entrySet()) {
      if (shouldCopyHFileMetaKey(entry.getKey())) {
        halfWriter.appendFileInfo(entry.getKey(),entry.getValue());
      }
    }
  }
  finally {
    if (halfWriter != null)     halfWriter.close();
    if (halfReader != null)     halfReader.close(cacheConf.shouldEvictOnClose());
  }
}
