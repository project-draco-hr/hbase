{
  final Path hfilePath=item.hfilePath;
  Path tmpDir=item.hfilePath.getParent();
  if (!tmpDir.getName().equals(TMP_DIR)) {
    tmpDir=new Path(tmpDir,TMP_DIR);
  }
  LOG.info("HFile at " + hfilePath + " no longer fits inside a single "+ "region. Splitting...");
  String uniqueName=getUniqueName();
  HColumnDescriptor familyDesc=table.getTableDescriptor().getFamily(item.family);
  Path botOut=new Path(tmpDir,uniqueName + ".bottom");
  Path topOut=new Path(tmpDir,uniqueName + ".top");
  splitStoreFile(getConf(),hfilePath,familyDesc,splitKey,botOut,topOut);
  FileSystem fs=tmpDir.getFileSystem(getConf());
  fs.setPermission(tmpDir,FsPermission.valueOf("-rwxrwxrwx"));
  fs.setPermission(botOut,FsPermission.valueOf("-rwxrwxrwx"));
  fs.setPermission(topOut,FsPermission.valueOf("-rwxrwxrwx"));
  List<LoadQueueItem> lqis=new ArrayList<LoadQueueItem>(2);
  lqis.add(new LoadQueueItem(item.family,botOut));
  lqis.add(new LoadQueueItem(item.family,topOut));
  try {
    tmpDir=item.hfilePath.getParent();
    if (tmpDir.getName().equals(TMP_DIR)) {
      fs.delete(item.hfilePath,false);
    }
  }
 catch (  IOException e) {
    LOG.warn("Unable to delete temporary split file " + item.hfilePath);
  }
  LOG.info("Successfully split into new HFiles " + botOut + " and "+ topOut);
  return lqis;
}
