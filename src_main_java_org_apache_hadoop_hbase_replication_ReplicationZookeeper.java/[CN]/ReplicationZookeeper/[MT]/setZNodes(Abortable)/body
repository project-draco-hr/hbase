{
  String replicationZNodeName=conf.get("zookeeper.znode.replication","replication");
  String peersZNodeName=conf.get("zookeeper.znode.replication.peers","peers");
  String repMasterZNodeName=conf.get("zookeeper.znode.replication.master","master");
  this.replicationStateNodeName=conf.get("zookeeper.znode.replication.state","state");
  String clusterIdZNodeName=conf.get("zookeeper.znode.replication.clusterId","clusterId");
  String rsZNodeName=conf.get("zookeeper.znode.replication.rs","rs");
  this.ourClusterKey=ZKUtil.getZooKeeperClusterKey(this.conf);
  this.replicationZNode=ZKUtil.joinZNode(this.zookeeper.baseZNode,replicationZNodeName);
  this.peersZNode=ZKUtil.joinZNode(replicationZNode,peersZNodeName);
  ZKUtil.createWithParents(this.zookeeper,this.peersZNode);
  this.rsZNode=ZKUtil.joinZNode(replicationZNode,rsZNodeName);
  ZKUtil.createWithParents(this.zookeeper,this.rsZNode);
  String znode=ZKUtil.joinZNode(this.replicationZNode,clusterIdZNodeName);
  byte[] data=ZKUtil.getData(this.zookeeper,znode);
  String idResult=Bytes.toString(data);
  this.clusterId=idResult == null ? Byte.toString(HConstants.DEFAULT_CLUSTER_ID) : idResult;
  this.statusTracker=new ReplicationStatusTracker(this.zookeeper,abortable);
  statusTracker.start();
  readReplicationStateZnode();
}
