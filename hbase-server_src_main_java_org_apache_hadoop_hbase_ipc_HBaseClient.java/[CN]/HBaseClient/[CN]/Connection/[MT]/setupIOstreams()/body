{
  if (socket != null || shouldCloseConnection.get()) {
    return;
  }
  if (failedServers.isFailedServer(remoteId.getAddress())) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Not trying to connect to " + server + " this server is in the failed servers list");
    }
    IOException e=new FailedServerException("This server is in the failed servers list: " + server);
    markClosed(e);
    close();
    throw e;
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Connecting to " + server);
    }
    short numRetries=0;
    final short MAX_RETRIES=5;
    Random rand=null;
    while (true) {
      setupConnection();
      InputStream inStream=NetUtils.getInputStream(socket);
      OutputStream outStream=NetUtils.getOutputStream(socket);
      writeRpcHeader(outStream);
      if (useSasl) {
        final InputStream in2=inStream;
        final OutputStream out2=outStream;
        UserGroupInformation ticket=remoteId.getTicket().getUGI();
        if (authMethod == AuthMethod.KERBEROS) {
          if (ticket != null && ticket.getRealUser() != null) {
            ticket=ticket.getRealUser();
          }
        }
        boolean continueSasl=false;
        try {
          continueSasl=ticket.doAs(new PrivilegedExceptionAction<Boolean>(){
            @Override public Boolean run() throws IOException {
              return setupSaslConnection(in2,out2);
            }
          }
);
        }
 catch (        Exception ex) {
          if (rand == null) {
            rand=new Random();
          }
          handleSaslConnectionFailure(numRetries++,MAX_RETRIES,ex,rand,ticket);
          continue;
        }
        if (continueSasl) {
          inStream=saslRpcClient.getInputStream(inStream);
          outStream=saslRpcClient.getOutputStream(outStream);
        }
 else {
          authMethod=AuthMethod.SIMPLE;
          useSasl=false;
        }
      }
      this.in=new DataInputStream(new BufferedInputStream(new PingInputStream(inStream)));
      this.out=new DataOutputStream(new BufferedOutputStream(outStream));
      writeHeader();
      touch();
      start();
      return;
    }
  }
 catch (  Throwable t) {
    failedServers.addToFailedServers(remoteId.address);
    IOException e=null;
    if (t instanceof IOException) {
      e=(IOException)t;
      markClosed(e);
    }
 else {
      e=new IOException("Coundn't set up IO Streams",t);
      markClosed(e);
    }
    close();
    throw e;
  }
}
