{
  Connection lastConnection=null;
  boolean lastFailed=false;
  int initialInvocations=RandomTimeoutBlockingRpcChannel.invokations.get();
  RpcClient rpcClient=newRandomTimeoutRpcClient();
  try {
    for (int i=0; i < 5 || (lastFailed && i < 100); ++i) {
      lastFailed=false;
      Configuration conf=HBaseConfiguration.create(TEST_UTIL.getConfiguration());
      conf.set(HConstants.HBASE_CLIENT_INSTANCE_ID,String.valueOf(-1));
      HBaseAdmin admin=null;
      try {
        admin=new HBaseAdmin(conf);
        Connection connection=admin.getConnection();
        assertFalse(connection == lastConnection);
        lastConnection=connection;
        RpcClient oldRpcClient=((ConnectionManager.HConnectionImplementation)connection).setRpcClient(rpcClient);
        if (oldRpcClient != null) {
          oldRpcClient.stop();
        }
        HBaseAdmin.checkHBaseAvailable(conf);
        admin.setBalancerRunning(false,false);
      }
 catch (      MasterNotRunningException ex) {
        lastFailed=true;
      }
 finally {
        admin.close();
        if (admin.getConnection().isClosed()) {
          rpcClient=newRandomTimeoutRpcClient();
        }
      }
    }
    assertFalse(lastFailed);
    assertTrue(RandomTimeoutBlockingRpcChannel.invokations.get() > initialInvocations);
  }
  finally {
    rpcClient.stop();
  }
}
