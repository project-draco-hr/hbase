{
  Put put=new Put(Bytes.toBytes("a-b-0-0"));
  put.addColumn(fam,qual1,Bytes.toBytes("c1-value"));
  region.put(put);
  put=new Put(row1_bytes);
  put.addColumn(fam,qual1,Bytes.toBytes("c1-value"));
  region.put(put);
  put=new Put(row2_bytes);
  put.addColumn(fam,qual2,Bytes.toBytes("c2-value"));
  region.put(put);
  put=new Put(row3_bytes);
  put.addColumn(fam,qual2,Bytes.toBytes("c2-value-2"));
  region.put(put);
  put=new Put(row4_bytes);
  put.addColumn(fam,qual2,Bytes.toBytes("c2-value-3"));
  region.put(put);
  region.flushcache();
  String[] rows=new String[3];
  rows[0]=row1;
  rows[1]=row2;
  rows[2]=row3;
  byte[][] val=new byte[3][];
  val[0]=Bytes.toBytes("c1-value");
  val[1]=Bytes.toBytes("c2-value");
  val[2]=Bytes.toBytes("c2-value-2");
  Scan scan=new Scan();
  scan.setStartRow(row1_bytes);
  scan.setStopRow(Bytes.toBytes("a-b-A-1:"));
  RegionScanner scanner=region.getScanner(scan);
  List<Cell> cells=new ArrayList<Cell>();
  for (int i=0; i < 3; i++) {
    assertEquals(i < 2,NextState.hasMoreValues(scanner.next(cells)));
    CellScanner cellScanner=Result.create(cells).cellScanner();
    while (cellScanner.advance()) {
      assertEquals(rows[i],Bytes.toString(cellScanner.current().getRowArray(),cellScanner.current().getRowOffset(),cellScanner.current().getRowLength()));
      assertEquals(Bytes.toString(val[i]),Bytes.toString(cellScanner.current().getValueArray(),cellScanner.current().getValueOffset(),cellScanner.current().getValueLength()));
    }
    cells.clear();
  }
  scanner.close();
  scan=new Scan();
  scan.addColumn(fam,qual2);
  scan.setStartRow(row1_bytes);
  scan.setStopRow(Bytes.toBytes("a-b-A-1:"));
  scanner=region.getScanner(scan);
  for (int i=1; i < 3; i++) {
    assertEquals(i < 2,NextState.hasMoreValues(scanner.next(cells)));
    CellScanner cellScanner=Result.create(cells).cellScanner();
    while (cellScanner.advance()) {
      assertEquals(rows[i],Bytes.toString(cellScanner.current().getRowArray(),cellScanner.current().getRowOffset(),cellScanner.current().getRowLength()));
    }
    cells.clear();
  }
  scanner.close();
  scan=new Scan();
  scan.addColumn(fam,qual2);
  scan.setStartRow(Bytes.toBytes("a-b-A-1-"));
  scan.setStopRow(Bytes.toBytes("a-b-A-1:"));
  scanner=region.getScanner(scan);
  for (int i=1; i < 3; i++) {
    assertEquals(i < 2,NextState.hasMoreValues(scanner.next(cells)));
    CellScanner cellScanner=Result.create(cells).cellScanner();
    while (cellScanner.advance()) {
      assertEquals(rows[i],Bytes.toString(cellScanner.current().getRowArray(),cellScanner.current().getRowOffset(),cellScanner.current().getRowLength()));
    }
    cells.clear();
  }
  scanner.close();
  scan=new Scan();
  scan.addColumn(fam,qual2);
  scan.setStartRow(Bytes.toBytes("a-b-A-1-140239"));
  scan.setStopRow(Bytes.toBytes("a-b-A-1:"));
  scanner=region.getScanner(scan);
  assertFalse(NextState.hasMoreValues(scanner.next(cells)));
  assertFalse(cells.isEmpty());
  scanner.close();
}
