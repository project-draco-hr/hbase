{
  List<byte[]> startKeys=new ArrayList<byte[]>();
  for (int i=0; i < regionStartEndKeys.getFirst().length; i++) {
    byte[] regionStartKey=regionStartEndKeys.getFirst()[i];
    byte[] regionEndKey=regionStartEndKeys.getSecond()[i];
    if ((isTableStartRow(startRow) || isTableEndRow(regionEndKey) || Bytes.compareTo(startRow,regionEndKey) < 0) && (isTableEndRow(stopRow) || isTableStartRow(regionStartKey) || Bytes.compareTo(stopRow,regionStartKey) > 0)) {
      startKeys.add(regionStartKey);
    }
  }
  int numRegions=startKeys.size();
  if (numHashFiles == 0) {
    numHashFiles=numRegions / 100;
  }
  if (numHashFiles == 0) {
    numHashFiles=1;
  }
  if (numHashFiles > numRegions) {
    numHashFiles=numRegions;
  }
  partitions=new ArrayList<ImmutableBytesWritable>(numHashFiles - 1);
  for (long i=1; i < numHashFiles; i++) {
    int splitIndex=(int)(numRegions * i / numHashFiles);
    partitions.add(new ImmutableBytesWritable(startKeys.get(splitIndex)));
  }
}
