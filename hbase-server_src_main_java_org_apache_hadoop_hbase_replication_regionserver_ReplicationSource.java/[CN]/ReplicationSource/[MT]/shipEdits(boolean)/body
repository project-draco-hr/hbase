{
  int sleepMultiplier=1;
  if (this.currentNbEntries == 0) {
    LOG.warn("Was given 0 edits to ship");
    return;
  }
  while (this.isActive()) {
    if (!isPeerEnabled()) {
      if (sleepForRetries("Replication is disabled",sleepMultiplier)) {
        sleepMultiplier++;
      }
      continue;
    }
    SinkPeer sinkPeer=null;
    try {
      sinkPeer=replicationSinkMgr.getReplicationSink();
      BlockingInterface rrs=sinkPeer.getRegionServer();
      if (LOG.isTraceEnabled()) {
        LOG.trace("Replicating " + this.currentNbEntries + " entries of total size "+ currentSize);
      }
      ReplicationProtbufUtil.replicateWALEntry(rrs,Arrays.copyOf(this.entriesArray,currentNbEntries));
      if (this.lastLoggedPosition != this.repLogReader.getPosition()) {
        this.manager.logPositionAndCleanOldLogs(this.currentPath,this.peerClusterZnode,this.repLogReader.getPosition(),this.replicationQueueInfo.isQueueRecovered(),currentWALisBeingWrittenTo);
        this.lastLoggedPosition=this.repLogReader.getPosition();
      }
      this.totalReplicatedEdits+=currentNbEntries;
      this.totalReplicatedOperations+=currentNbOperations;
      this.metrics.shipBatch(this.currentNbOperations);
      this.metrics.setAgeOfLastShippedOp(this.entriesArray[currentNbEntries - 1].getKey().getWriteTime());
      if (LOG.isTraceEnabled()) {
        LOG.trace("Replicated " + this.totalReplicatedEdits + " entries in total, or "+ this.totalReplicatedOperations+ " operations");
      }
      break;
    }
 catch (    IOException ioe) {
      this.metrics.refreshAgeOfLastShippedOp();
      if (ioe instanceof RemoteException) {
        ioe=((RemoteException)ioe).unwrapRemoteException();
        LOG.warn("Can't replicate because of an error on the remote cluster: ",ioe);
        if (ioe instanceof TableNotFoundException) {
          if (sleepForRetries("A table is missing in the peer cluster. " + "Replication cannot proceed without losing data.",sleepMultiplier)) {
            sleepMultiplier++;
          }
        }
      }
 else {
        if (ioe instanceof SocketTimeoutException) {
          sleepForRetries("Encountered a SocketTimeoutException. Since the " + "call to the remote cluster timed out, which is usually " + "caused by a machine failure or a massive slowdown",this.socketTimeoutMultiplier);
        }
 else         if (ioe instanceof ConnectException) {
          LOG.warn("Peer is unavailable, rechecking all sinks: ",ioe);
          replicationSinkMgr.chooseSinks();
        }
 else {
          LOG.warn("Can't replicate because of a local or network error: ",ioe);
        }
      }
      if (sinkPeer != null) {
        replicationSinkMgr.reportBadSink(sinkPeer);
      }
      if (sleepForRetries("Since we are unable to replicate",sleepMultiplier)) {
        sleepMultiplier++;
      }
    }
  }
}
