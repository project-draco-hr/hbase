{
  long seenEntries=0;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Seeking in " + this.currentPath + " at position "+ this.repLogReader.getPosition());
  }
  this.repLogReader.seek();
  long positionBeforeRead=this.repLogReader.getPosition();
  HLog.Entry entry=this.repLogReader.readNextAndSetPosition();
  while (entry != null) {
    this.metrics.incrLogEditsRead();
    seenEntries++;
    if (replicationEndpoint.canReplicateToSameCluster() || !entry.getKey().getClusterIds().contains(peerClusterId)) {
      entry=walEntryFilter.filter(entry);
      WALEdit edit=null;
      HLogKey logKey=null;
      if (entry != null) {
        edit=entry.getEdit();
        logKey=entry.getKey();
      }
      if (edit != null && edit.size() != 0) {
        logKey.addClusterId(clusterId);
        currentNbOperations+=countDistinctRowKeys(edit);
        entries.add(entry);
        currentSize+=entry.getEdit().heapSize();
      }
 else {
        this.metrics.incrLogEditsFiltered();
      }
    }
    if (currentSize >= this.replicationQueueSizeCapacity || entries.size() >= this.replicationQueueNbCapacity) {
      break;
    }
    try {
      entry=this.repLogReader.readNextAndSetPosition();
    }
 catch (    IOException ie) {
      LOG.debug("Break on IOE: " + ie.getMessage());
      break;
    }
  }
  metrics.incrLogReadInBytes(this.repLogReader.getPosition() - positionBeforeRead);
  if (currentWALisBeingWrittenTo) {
    return false;
  }
  return seenEntries == 0 && processEndOfFile();
}
