{
  String logPrefix=DefaultWALProvider.getWALPrefixFromWALName(log.getName());
  PriorityBlockingQueue<Path> queue=queues.get(logPrefix);
  if (queue == null) {
    queue=new PriorityBlockingQueue<Path>(queueSizePerGroup,new LogsComparator());
    queues.put(logPrefix,queue);
    if (this.sourceRunning) {
      final ReplicationSourceWorkerThread worker=new ReplicationSourceWorkerThread(logPrefix,queue,replicationQueueInfo,this);
      ReplicationSourceWorkerThread extant=workerThreads.putIfAbsent(logPrefix,worker);
      if (extant != null) {
        LOG.debug("Someone has beat us to start a worker thread for wal group " + logPrefix);
      }
 else {
        LOG.debug("Starting up worker for wal group " + logPrefix);
        worker.startup();
      }
    }
  }
  queue.put(log);
  this.metrics.incrSizeOfLogQueue();
  int queueSize=queue.size();
  if (queueSize > this.logQueueWarnThreshold) {
    LOG.warn("WAL group " + logPrefix + " queue size: "+ queueSize+ " exceeds value of replication.source.log.queue.warn: "+ logQueueWarnThreshold);
  }
}
