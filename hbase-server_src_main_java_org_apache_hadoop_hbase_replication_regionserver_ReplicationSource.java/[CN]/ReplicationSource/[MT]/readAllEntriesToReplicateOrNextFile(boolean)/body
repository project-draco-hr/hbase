{
  long seenEntries=0;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Seeking in " + this.currentPath + " at position "+ this.repLogReader.getPosition());
  }
  this.repLogReader.seek();
  HLog.Entry entry=this.repLogReader.readNextAndSetPosition(this.entriesArray,this.currentNbEntries);
  while (entry != null) {
    WALEdit edit=entry.getEdit();
    this.metrics.incrLogEditsRead();
    seenEntries++;
    HLogKey logKey=entry.getKey();
    if (!logKey.getClusterIds().contains(peerClusterId)) {
      removeNonReplicableEdits(entry);
      if (!logKey.getTablename().equals(TableName.META_TABLE_NAME) && edit.size() != 0) {
        logKey.addClusterId(clusterId);
        currentNbOperations+=countDistinctRowKeys(edit);
        currentNbEntries++;
        currentSize+=entry.getEdit().size();
      }
 else {
        this.metrics.incrLogEditsFiltered();
      }
    }
    if (currentSize >= this.replicationQueueSizeCapacity || currentNbEntries >= this.replicationQueueNbCapacity) {
      break;
    }
    try {
      entry=this.repLogReader.readNextAndSetPosition(this.entriesArray,this.currentNbEntries);
    }
 catch (    IOException ie) {
      LOG.debug("Break on IOE: " + ie.getMessage());
      break;
    }
  }
  if (currentWALisBeingWrittenTo) {
    return false;
  }
  return seenEntries == 0 && processEndOfFile();
}
