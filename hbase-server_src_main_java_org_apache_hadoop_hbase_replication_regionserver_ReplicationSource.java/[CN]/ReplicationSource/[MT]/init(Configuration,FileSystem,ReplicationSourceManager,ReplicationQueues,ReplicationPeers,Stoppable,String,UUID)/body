{
  this.stopper=stopper;
  this.conf=HBaseConfiguration.create(conf);
  decorateConf();
  this.replicationQueueSizeCapacity=this.conf.getLong("replication.source.size.capacity",1024 * 1024 * 64);
  this.replicationQueueNbCapacity=this.conf.getInt("replication.source.nb.capacity",25000);
  this.maxRetriesMultiplier=this.conf.getInt("replication.source.maxretriesmultiplier",10);
  this.socketTimeoutMultiplier=this.conf.getInt("replication.source.socketTimeoutMultiplier",maxRetriesMultiplier * maxRetriesMultiplier);
  this.queue=new PriorityBlockingQueue<Path>(this.conf.getInt("hbase.regionserver.maxlogs",32),new LogsComparator());
  this.conn=HConnectionManager.getConnection(this.conf);
  long bandwidth=this.conf.getLong("replication.source.per.peer.node.bandwidth",0);
  this.throttler=new ReplicationThrottler((double)bandwidth / 10.0);
  this.replicationQueues=replicationQueues;
  this.replicationPeers=replicationPeers;
  this.manager=manager;
  this.sleepForRetries=this.conf.getLong("replication.source.sleepforretries",1000);
  this.fs=fs;
  this.metrics=new MetricsSource(peerClusterZnode);
  this.repLogReader=new ReplicationHLogReaderManager(this.fs,this.conf);
  this.clusterId=clusterId;
  this.peerClusterZnode=peerClusterZnode;
  this.replicationQueueInfo=new ReplicationQueueInfo(peerClusterZnode);
  this.peerId=this.replicationQueueInfo.getPeerId();
  this.replicationSinkMgr=new ReplicationSinkManager(conn,peerId,replicationPeers,this.conf);
  this.logQueueWarnThreshold=this.conf.getInt("replication.source.log.queue.warn",2);
}
