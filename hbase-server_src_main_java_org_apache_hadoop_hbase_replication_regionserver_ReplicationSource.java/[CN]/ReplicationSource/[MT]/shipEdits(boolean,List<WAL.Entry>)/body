{
  int sleepMultiplier=0;
  if (entries.isEmpty()) {
    LOG.warn("Was given 0 edits to ship");
    return;
  }
  while (this.isActive()) {
    try {
      if (this.throttler.isEnabled()) {
        long sleepTicks=this.throttler.getNextSleepInterval(currentSize);
        if (sleepTicks > 0) {
          try {
            if (LOG.isTraceEnabled()) {
              LOG.trace("To sleep " + sleepTicks + "ms for throttling control");
            }
            Thread.sleep(sleepTicks);
          }
 catch (          InterruptedException e) {
            LOG.debug("Interrupted while sleeping for throttling control");
            Thread.currentThread().interrupt();
            continue;
          }
          this.throttler.resetStartTick();
        }
      }
      ReplicationEndpoint.ReplicateContext replicateContext=new ReplicationEndpoint.ReplicateContext();
      replicateContext.setEntries(entries).setSize(currentSize);
      long startTimeNs=System.nanoTime();
      boolean replicated=replicationEndpoint.replicate(replicateContext);
      long endTimeNs=System.nanoTime();
      if (!replicated) {
        continue;
      }
 else {
        sleepMultiplier=Math.max(sleepMultiplier - 1,0);
      }
      if (this.lastLoggedPosition != this.repLogReader.getPosition()) {
        this.manager.logPositionAndCleanOldLogs(this.currentPath,this.peerClusterZnode,this.repLogReader.getPosition(),this.replicationQueueInfo.isQueueRecovered(),currentWALisBeingWrittenTo);
        this.lastLoggedPosition=this.repLogReader.getPosition();
      }
      if (this.throttler.isEnabled()) {
        this.throttler.addPushSize(currentSize);
      }
      this.totalReplicatedEdits+=entries.size();
      this.totalReplicatedOperations+=currentNbOperations;
      this.metrics.shipBatch(this.currentNbOperations,this.currentSize / 1024);
      this.metrics.setAgeOfLastShippedOp(entries.get(entries.size() - 1).getKey().getWriteTime());
      if (LOG.isTraceEnabled()) {
        LOG.trace("Replicated " + this.totalReplicatedEdits + " entries in total, or "+ this.totalReplicatedOperations+ " operations in "+ ((endTimeNs - startTimeNs) / 1000000)+ " ms");
      }
      break;
    }
 catch (    Exception ex) {
      LOG.warn(replicationEndpoint.getClass().getName() + " threw unknown exception:" + org.apache.hadoop.util.StringUtils.stringifyException(ex));
      if (sleepForRetries("ReplicationEndpoint threw exception",sleepMultiplier)) {
        sleepMultiplier++;
      }
    }
  }
}
