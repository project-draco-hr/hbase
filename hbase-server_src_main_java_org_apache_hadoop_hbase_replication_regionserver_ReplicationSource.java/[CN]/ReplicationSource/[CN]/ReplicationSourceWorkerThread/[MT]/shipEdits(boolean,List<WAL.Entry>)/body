{
  int sleepMultiplier=0;
  if (entries.isEmpty()) {
    LOG.warn("Was given 0 edits to ship");
    return;
  }
  while (isWorkerActive()) {
    try {
      if (throttler.isEnabled()) {
        long sleepTicks=throttler.getNextSleepInterval(currentSize);
        if (sleepTicks > 0) {
          try {
            if (LOG.isTraceEnabled()) {
              LOG.trace("To sleep " + sleepTicks + "ms for throttling control");
            }
            Thread.sleep(sleepTicks);
          }
 catch (          InterruptedException e) {
            LOG.debug("Interrupted while sleeping for throttling control");
            Thread.currentThread().interrupt();
            continue;
          }
          throttler.resetStartTick();
        }
      }
      ReplicationEndpoint.ReplicateContext replicateContext=new ReplicationEndpoint.ReplicateContext();
      replicateContext.setEntries(entries).setSize(currentSize);
      replicateContext.setWalGroupId(walGroupId);
      long startTimeNs=System.nanoTime();
      boolean replicated=replicationEndpoint.replicate(replicateContext);
      long endTimeNs=System.nanoTime();
      if (!replicated) {
        continue;
      }
 else {
        sleepMultiplier=Math.max(sleepMultiplier - 1,0);
      }
      if (this.lastLoggedPosition != this.repLogReader.getPosition()) {
        int size=entries.size();
        for (int i=0; i < size; i++) {
          cleanUpHFileRefs(entries.get(i).getEdit());
        }
        manager.logPositionAndCleanOldLogs(this.currentPath,peerClusterZnode,this.repLogReader.getPosition(),this.replicationQueueInfo.isQueueRecovered(),currentWALisBeingWrittenTo);
        this.lastLoggedPosition=this.repLogReader.getPosition();
      }
      if (throttler.isEnabled()) {
        throttler.addPushSize(currentSize);
      }
      totalReplicatedEdits.addAndGet(entries.size());
      totalReplicatedOperations.addAndGet(currentNbOperations);
      metrics.shipBatch(currentNbOperations,currentSize,currentNbHFiles);
      metrics.setAgeOfLastShippedOp(entries.get(entries.size() - 1).getKey().getWriteTime(),walGroupId);
      if (LOG.isTraceEnabled()) {
        LOG.trace("Replicated " + totalReplicatedEdits + " entries in total, or "+ totalReplicatedOperations+ " operations in "+ ((endTimeNs - startTimeNs) / 1000000)+ " ms");
      }
      break;
    }
 catch (    Exception ex) {
      LOG.warn(replicationEndpoint.getClass().getName() + " threw unknown exception:" + org.apache.hadoop.util.StringUtils.stringifyException(ex));
      if (sleepForRetries("ReplicationEndpoint threw exception",sleepMultiplier)) {
        sleepMultiplier++;
      }
    }
  }
}
