{
  if (this.queue.size() != 0) {
    final long trailerSize=this.repLogReader.currentTrailerSize();
    final long currentPosition=this.repLogReader.getPosition();
    FileStatus stat=null;
    try {
      stat=fs.getFileStatus(this.currentPath);
    }
 catch (    IOException exception) {
      LOG.warn("Couldn't get file length information about log " + this.currentPath + ", it "+ (trailerSize < 0 ? "was not" : "was")+ " closed cleanly"+ ", stats: "+ getStats());
      metrics.incrUnknownFileLengthForClosedWAL();
    }
    if (stat != null) {
      if (trailerSize < 0) {
        if (currentPosition < stat.getLen()) {
          final long skippedBytes=stat.getLen() - currentPosition;
          LOG.info("Reached the end of WAL file '" + currentPath + "'. It was not closed cleanly, so we did not parse "+ skippedBytes+ " bytes of data.");
          metrics.incrUncleanlyClosedWALs();
          metrics.incrBytesSkippedInUncleanlyClosedWALs(skippedBytes);
        }
      }
 else       if (currentPosition + trailerSize < stat.getLen()) {
        LOG.warn("Processing end of WAL file '" + currentPath + "'. At position "+ currentPosition+ ", which is too far away from reported file length "+ stat.getLen()+ ". Restarting WAL reading (see HBASE-15983 for details). stats: "+ getStats());
        repLogReader.setPosition(0);
        metrics.incrRestartedWALReading();
        metrics.incrRepeatedFileBytes(currentPosition);
        return false;
      }
    }
    if (LOG.isTraceEnabled()) {
      LOG.trace("Reached the end of log " + this.currentPath + ", stats: "+ getStats()+ ", and the length of the file is "+ (stat == null ? "N/A" : stat.getLen()));
    }
    this.currentPath=null;
    this.repLogReader.finishCurrentFile();
    this.reader=null;
    metrics.incrCompletedWAL();
    return true;
  }
 else   if (this.replicationQueueInfo.isQueueRecovered()) {
    LOG.debug("Finished recovering queue for group " + walGroupId + " of peer "+ peerClusterZnode);
    metrics.incrCompletedRecoveryQueue();
    workerRunning=false;
    return true;
  }
  return false;
}
