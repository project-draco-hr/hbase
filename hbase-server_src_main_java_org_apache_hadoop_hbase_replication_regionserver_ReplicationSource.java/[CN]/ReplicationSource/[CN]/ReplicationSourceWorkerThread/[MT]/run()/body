{
  if (this.replicationQueueInfo.isQueueRecovered()) {
    try {
      this.repLogReader.setPosition(replicationQueues.getLogPosition(peerClusterZnode,this.queue.peek().getName()));
      if (LOG.isTraceEnabled()) {
        LOG.trace("Recovered queue started with log " + this.queue.peek() + " at position "+ this.repLogReader.getPosition());
      }
    }
 catch (    ReplicationException e) {
      terminate("Couldn't get the position of this recovered queue " + peerClusterZnode,e);
    }
  }
  while (isWorkerActive()) {
    int sleepMultiplier=1;
    if (!isPeerEnabled()) {
      if (sleepForRetries("Replication is disabled",sleepMultiplier)) {
        sleepMultiplier++;
      }
      continue;
    }
    Path oldPath=getCurrentPath();
    boolean hasCurrentPath=getNextPath();
    if (getCurrentPath() != null && oldPath == null) {
      sleepMultiplier=1;
    }
    if (!hasCurrentPath) {
      if (sleepForRetries("No log to process",sleepMultiplier)) {
        sleepMultiplier++;
      }
      continue;
    }
    boolean currentWALisBeingWrittenTo=false;
    if (!this.replicationQueueInfo.isQueueRecovered() && queue.size() == 0) {
      currentWALisBeingWrittenTo=true;
    }
    if (!openReader(sleepMultiplier)) {
      sleepMultiplier=1;
      continue;
    }
    if (this.reader == null) {
      if (sleepForRetries("Unable to open a reader",sleepMultiplier)) {
        sleepMultiplier++;
      }
      continue;
    }
    boolean gotIOE=false;
    currentNbOperations=0;
    currentNbHFiles=0;
    List<WAL.Entry> entries=new ArrayList<WAL.Entry>(1);
    currentSize=0;
    try {
      if (readAllEntriesToReplicateOrNextFile(currentWALisBeingWrittenTo,entries)) {
        continue;
      }
    }
 catch (    IOException ioe) {
      LOG.warn(peerClusterZnode + " Got: ",ioe);
      gotIOE=true;
      if (ioe.getCause() instanceof EOFException) {
        boolean considerDumping=false;
        if (this.replicationQueueInfo.isQueueRecovered()) {
          try {
            FileStatus stat=fs.getFileStatus(this.currentPath);
            if (stat.getLen() == 0) {
              LOG.warn(peerClusterZnode + " Got EOF and the file was empty");
            }
            considerDumping=true;
          }
 catch (          IOException e) {
            LOG.warn(peerClusterZnode + " Got while getting file size: ",e);
          }
        }
        if (considerDumping && sleepMultiplier == maxRetriesMultiplier && processEndOfFile()) {
          continue;
        }
      }
    }
 finally {
      try {
        this.reader=null;
        this.repLogReader.closeReader();
      }
 catch (      IOException e) {
        gotIOE=true;
        LOG.warn("Unable to finalize the tailing of a file",e);
      }
    }
    if (isWorkerActive() && (gotIOE || entries.isEmpty())) {
      if (this.lastLoggedPosition != this.repLogReader.getPosition()) {
        manager.logPositionAndCleanOldLogs(this.currentPath,peerClusterZnode,this.repLogReader.getPosition(),this.replicationQueueInfo.isQueueRecovered(),currentWALisBeingWrittenTo);
        this.lastLoggedPosition=this.repLogReader.getPosition();
      }
      if (!gotIOE) {
        sleepMultiplier=1;
        metrics.setAgeOfLastShippedOp(EnvironmentEdgeManager.currentTime(),walGroupId);
      }
      if (sleepForRetries("Nothing to replicate",sleepMultiplier)) {
        sleepMultiplier++;
      }
      continue;
    }
    sleepMultiplier=1;
    shipEdits(currentWALisBeingWrittenTo,entries);
  }
  if (replicationQueueInfo.isQueueRecovered()) {
synchronized (workerThreads) {
      Threads.sleep(100);
      boolean allOtherTaskDone=true;
      for (      ReplicationSourceWorkerThread worker : workerThreads.values()) {
        if (!worker.equals(this) && worker.isAlive()) {
          allOtherTaskDone=false;
          break;
        }
      }
      if (allOtherTaskDone) {
        manager.closeRecoveredQueue(this.source);
        LOG.info("Finished recovering queue " + peerClusterZnode + " with the following stats: "+ getStats());
      }
    }
  }
}
