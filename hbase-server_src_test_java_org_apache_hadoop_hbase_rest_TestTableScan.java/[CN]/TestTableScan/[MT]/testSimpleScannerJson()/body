{
  StringBuilder builder=new StringBuilder();
  builder.append("/*");
  builder.append("?");
  builder.append(Constants.SCAN_COLUMN + "=" + COLUMN_1);
  builder.append("&");
  builder.append(Constants.SCAN_LIMIT + "=20");
  Response response=client.get("/" + TABLE + builder.toString(),Constants.MIMETYPE_JSON);
  assertEquals(200,response.getCode());
  assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  ObjectMapper mapper=new JacksonProvider().locateMapper(CellSetModel.class,MediaType.APPLICATION_JSON_TYPE);
  CellSetModel model=mapper.readValue(response.getStream(),CellSetModel.class);
  int count=TestScannerResource.countCellSet(model);
  assertEquals(20,count);
  checkRowsNotNull(model);
  builder=new StringBuilder();
  builder.append("/*");
  builder.append("?");
  builder.append(Constants.SCAN_COLUMN + "=" + COLUMN_2);
  response=client.get("/" + TABLE + builder.toString(),Constants.MIMETYPE_JSON);
  assertEquals(200,response.getCode());
  assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  model=mapper.readValue(response.getStream(),CellSetModel.class);
  count=TestScannerResource.countCellSet(model);
  assertEquals(expectedRows2,count);
  checkRowsNotNull(model);
  builder=new StringBuilder();
  builder.append("/*");
  builder.append("?");
  builder.append(Constants.SCAN_COLUMN + "=" + COLUMN_1);
  builder.append("&");
  builder.append(Constants.SCAN_START_ROW + "=aaa");
  builder.append("&");
  builder.append(Constants.SCAN_END_ROW + "=aay");
  response=client.get("/" + TABLE + builder.toString(),Constants.MIMETYPE_JSON);
  assertEquals(200,response.getCode());
  model=mapper.readValue(response.getStream(),CellSetModel.class);
  RowModel startRow=model.getRows().get(0);
  assertEquals("aaa",Bytes.toString(startRow.getKey()));
  RowModel endRow=model.getRows().get(model.getRows().size() - 1);
  assertEquals("aax",Bytes.toString(endRow.getKey()));
  count=TestScannerResource.countCellSet(model);
  assertEquals(24,count);
  checkRowsNotNull(model);
}
