{
  if (state.isFirst()) {
    state.familyLength=source.readByte();
    state.familyNameWithSize=new byte[(state.familyLength & 0xff) + KeyValue.FAMILY_LENGTH_SIZE];
    state.familyNameWithSize[0]=state.familyLength;
    source.read(state.familyNameWithSize,KeyValue.FAMILY_LENGTH_SIZE,state.familyLength);
  }
  byte flag=source.readByte();
  int keyLength;
  int valueLength;
  if ((flag & FLAG_SAME_KEY_LENGTH) != 0) {
    keyLength=state.keyLength;
  }
 else {
    keyLength=ByteBufferUtils.readCompressedInt(source);
  }
  if ((flag & FLAG_SAME_VALUE_LENGTH) != 0) {
    valueLength=state.valueLength;
  }
 else {
    valueLength=ByteBufferUtils.readCompressedInt(source);
  }
  int commonPrefix=ByteBufferUtils.readCompressedInt(source);
  int keyOffset=buffer.position();
  ByteBufferUtils.ensureSpace(buffer,keyLength + valueLength + KeyValue.ROW_OFFSET);
  buffer.putInt(keyLength);
  buffer.putInt(valueLength);
  if (commonPrefix > 0) {
    ByteBufferUtils.copyFromBuffer(buffer,buffer,state.prevOffset + KeyValue.ROW_OFFSET,commonPrefix);
  }
  int keyRestLength;
  if (state.isFirst() || commonPrefix < state.rowLength + KeyValue.ROW_LENGTH_SIZE) {
    short rowLength;
    int rowRestLength;
    if (commonPrefix < KeyValue.ROW_LENGTH_SIZE) {
      ByteBufferUtils.copyFromStream(source,buffer,KeyValue.ROW_LENGTH_SIZE - commonPrefix);
      ByteBufferUtils.skip(buffer,-KeyValue.ROW_LENGTH_SIZE);
      rowLength=buffer.getShort();
      rowRestLength=rowLength;
    }
 else {
      rowLength=buffer.getShort(keyOffset + KeyValue.ROW_OFFSET);
      rowRestLength=rowLength + KeyValue.ROW_LENGTH_SIZE - commonPrefix;
    }
    ByteBufferUtils.copyFromStream(source,buffer,rowRestLength);
    state.rowLength=rowLength;
    buffer.put(state.familyNameWithSize);
    keyRestLength=keyLength - rowLength - state.familyNameWithSize.length- (KeyValue.ROW_LENGTH_SIZE + KeyValue.TIMESTAMP_TYPE_SIZE);
  }
 else {
    keyRestLength=keyLength - commonPrefix - KeyValue.TIMESTAMP_TYPE_SIZE;
  }
  ByteBufferUtils.copyFromStream(source,buffer,keyRestLength);
  int timestampFitsInBytes=((flag & MASK_TIMESTAMP_LENGTH) >>> SHIFT_TIMESTAMP_LENGTH) + 1;
  long timestamp=ByteBufferUtils.readLong(source,timestampFitsInBytes);
  if ((flag & FLAG_TIMESTAMP_SIGN) != 0) {
    timestamp=-timestamp;
  }
  if ((flag & FLAG_TIMESTAMP_IS_DIFF) != 0) {
    timestamp=state.timestamp - timestamp;
  }
  buffer.putLong(timestamp);
  byte type;
  if ((flag & FLAG_SAME_TYPE) != 0) {
    type=state.type;
  }
 else {
    type=source.readByte();
  }
  buffer.put(type);
  ByteBufferUtils.copyFromStream(source,buffer,valueLength);
  state.keyLength=keyLength;
  state.valueLength=valueLength;
  state.prevOffset=keyOffset;
  state.timestamp=timestamp;
  state.type=type;
}
