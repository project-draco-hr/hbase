{
  TEST_UTIL.getConfiguration().setInt(HFileBlockIndex.MAX_CHUNK_SIZE_KEY,BLOCK_SIZE);
  SchemaMetrics.setUseTableNameInTest(false);
  HColumnDescriptor hcd=new HColumnDescriptor(Bytes.toBytes(CF),MAX_VERSIONS,COMPRESSION_ALGORITHM.getName(),HColumnDescriptor.DEFAULT_IN_MEMORY,HColumnDescriptor.DEFAULT_BLOCKCACHE,HColumnDescriptor.DEFAULT_TTL,BLOOM_TYPE.toString());
  hcd.setBlocksize(BLOCK_SIZE);
  hcd.setBlockCacheEnabled(cfCacheEnabled);
  HRegion region=TEST_UTIL.createTestRegion(TABLE,hcd);
  writeTestData(region);
  Map<String,Long> metricsBefore=SchemaMetrics.getMetricsSnapshot();
  for (int i=0; i < NUM_ROWS; ++i) {
    Get get=new Get(Bytes.toBytes("row" + i));
    region.get(get,null);
  }
  SchemaMetrics.validateMetricChanges(metricsBefore);
  Map<String,Long> metricsAfter=SchemaMetrics.getMetricsSnapshot();
  Map<String,Long> metricsDelta=SchemaMetrics.diffMetrics(metricsBefore,metricsAfter);
  SchemaMetrics metrics=SchemaMetrics.getInstance(TABLE,CF);
  List<BlockCategory> importantBlockCategories=new ArrayList<BlockCategory>();
  importantBlockCategories.add(BlockCategory.BLOOM);
  if (hfileVersion == 2) {
    importantBlockCategories.add(BlockCategory.INDEX);
  }
  for (  BlockCategory category : importantBlockCategories) {
    String hitsMetricName=getMetricName(metrics,category);
    assertTrue("Metric " + hitsMetricName + " was not incremented",metricsDelta.containsKey(hitsMetricName));
    long hits=metricsDelta.get(hitsMetricName);
    assertTrue("Invalid value of " + hitsMetricName + ": "+ hits,hits > 0);
  }
  if (!cfCacheEnabled) {
    String dataHitMetricName=getMetricName(metrics,BlockCategory.DATA);
    assertFalse("Nonzero value for metric " + dataHitMetricName,metricsDelta.containsKey(dataHitMetricName));
  }
}
