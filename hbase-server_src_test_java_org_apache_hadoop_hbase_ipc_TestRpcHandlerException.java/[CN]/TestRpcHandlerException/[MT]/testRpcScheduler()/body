{
  PriorityFunction qosFunction=mock(PriorityFunction.class);
  Abortable abortable=new AbortServer();
  RpcScheduler scheduler=new SimpleRpcScheduler(CONF,2,0,0,qosFunction,abortable,0);
  RpcServer rpcServer=new TestRpcServer(scheduler);
  RpcClientImpl client=new RpcClientImpl(CONF,HConstants.CLUSTER_ID_DEFAULT);
  try {
    rpcServer.start();
    MethodDescriptor md=SERVICE.getDescriptorForType().findMethodByName("echo");
    EchoRequestProto param=EchoRequestProto.newBuilder().setMessage("hello").build();
    PayloadCarryingRpcController controller=new PayloadCarryingRpcController(CellUtil.createCellScanner(ImmutableList.of(CELL)));
    InetSocketAddress address=rpcServer.getListenerAddress();
    if (address == null) {
      throw new IOException("Listener channel is closed");
    }
    client.call(controller,md,param,md.getOutputType().toProto(),User.getCurrent(),address,new MetricsConnection.CallStats());
  }
 catch (  Throwable e) {
    assert(abortable.isAborted() == true);
  }
 finally {
    rpcServer.stop();
  }
}
