{
  Admin admin=TEST_UTIL.getHBaseAdmin();
  String userName=User.getCurrent().getShortName();
  admin.setQuota(QuotaSettingsFactory.throttleUser(userName,ThrottleType.READ_NUMBER,6,TimeUnit.MINUTES));
  admin.setQuota(QuotaSettingsFactory.throttleUser(userName,ThrottleType.WRITE_NUMBER,12,TimeUnit.MINUTES));
  admin.setQuota(QuotaSettingsFactory.bypassGlobals(userName,true));
  try (QuotaRetriever scanner=QuotaRetriever.open(TEST_UTIL.getConfiguration())){
    int countThrottle=0;
    int countGlobalBypass=0;
    for (    QuotaSettings settings : scanner) {
switch (settings.getQuotaType()) {
case THROTTLE:
        ThrottleSettings throttle=(ThrottleSettings)settings;
      if (throttle.getSoftLimit() == 6) {
        assertEquals(ThrottleType.READ_NUMBER,throttle.getThrottleType());
      }
 else       if (throttle.getSoftLimit() == 12) {
        assertEquals(ThrottleType.WRITE_NUMBER,throttle.getThrottleType());
      }
 else {
        fail("should not come here, because don't set quota with this limit");
      }
    assertEquals(userName,throttle.getUserName());
  assertEquals(null,throttle.getTableName());
assertEquals(null,throttle.getNamespace());
assertEquals(TimeUnit.MINUTES,throttle.getTimeUnit());
countThrottle++;
break;
case GLOBAL_BYPASS:
countGlobalBypass++;
break;
default :
fail("unexpected settings type: " + settings.getQuotaType());
}
}
assertEquals(2,countThrottle);
assertEquals(1,countGlobalBypass);
}
 admin.setQuota(QuotaSettingsFactory.unthrottleUser(userName));
assertNumResults(1,null);
admin.setQuota(QuotaSettingsFactory.bypassGlobals(userName,false));
assertNumResults(0,null);
}
