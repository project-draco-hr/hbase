{
  MiniHBaseCluster cluster=UTIL.getHBaseCluster();
  HMaster master=cluster.getMaster();
  MasterCoprocessorHost host=master.getMasterCoprocessorHost();
  CPMasterObserver cp=(CPMasterObserver)host.findCoprocessor(CPMasterObserver.class.getName());
  cp.resetStates();
  HTableDescriptor htd=new HTableDescriptor(TEST_TABLE);
  htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
  Admin admin=UTIL.getHBaseAdmin();
  tableCreationLatch=new CountDownLatch(1);
  admin.createTable(htd);
  tableCreationLatch.await();
  tableCreationLatch=new CountDownLatch(1);
  admin.disableTable(TEST_TABLE);
  assertTrue(admin.isTableDisabled(TEST_TABLE));
  try {
    assertFalse("Coprocessor should not have been called yet",cp.wasSnapshotCalled());
    admin.snapshot(TEST_SNAPSHOT,TEST_TABLE);
    assertTrue("Coprocessor should have been called on snapshot",cp.wasSnapshotCalled());
    admin.cloneSnapshot(TEST_SNAPSHOT,TEST_CLONE);
    assertTrue("Coprocessor should have been called on snapshot clone",cp.wasCloneSnapshotCalled());
    assertFalse("Coprocessor restore should not have been called on snapshot clone",cp.wasRestoreSnapshotCalled());
    admin.disableTable(TEST_CLONE);
    assertTrue(admin.isTableDisabled(TEST_TABLE));
    admin.deleteTable(TEST_CLONE);
    cp.resetStates();
    admin.restoreSnapshot(TEST_SNAPSHOT);
    assertTrue("Coprocessor should have been called on snapshot restore",cp.wasRestoreSnapshotCalled());
    assertFalse("Coprocessor clone should not have been called on snapshot restore",cp.wasCloneSnapshotCalled());
    admin.deleteSnapshot(TEST_SNAPSHOT);
    assertTrue("Coprocessor should have been called on snapshot delete",cp.wasDeleteSnapshotCalled());
  }
  finally {
    admin.deleteTable(TEST_TABLE);
  }
}
