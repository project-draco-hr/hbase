{
  this.blockSize=blockSize;
  this.numBlocks=numBlocks;
  backingStore=new Slab(blockSize,numBlocks);
  this.stats=new CacheStats();
  this.actionWatcher=master;
  this.size=new AtomicLong(CACHE_FIXED_OVERHEAD + backingStore.heapSize());
  this.timeSinceLastAccess=new AtomicLong();
  RemovalListener<BlockCacheKey,CacheablePair> listener=new RemovalListener<BlockCacheKey,CacheablePair>(){
    @Override public void onRemoval(    RemovalNotification<BlockCacheKey,CacheablePair> notification){
      if (!notification.wasEvicted()) {
        return;
      }
      CacheablePair value=notification.getValue();
      timeSinceLastAccess.set(System.nanoTime() - value.recentlyAccessed.get());
      stats.evict();
      doEviction(notification.getKey(),value);
    }
  }
;
  backingMap=CacheBuilder.newBuilder().maximumSize(numBlocks - 1).removalListener(listener).<BlockCacheKey,CacheablePair>build().asMap();
}
