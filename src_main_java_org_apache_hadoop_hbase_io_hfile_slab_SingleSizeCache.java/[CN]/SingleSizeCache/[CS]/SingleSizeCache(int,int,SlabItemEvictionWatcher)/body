{
  this.blockSize=blockSize;
  this.numBlocks=numBlocks;
  backingStore=new Slab(blockSize,numBlocks);
  this.stats=new CacheStats();
  this.evictionWatcher=master;
  this.size=new AtomicLong(CACHE_FIXED_OVERHEAD + backingStore.heapSize());
  this.timeSinceLastAccess=new AtomicLong();
  MapEvictionListener<String,CacheablePair> listener=new MapEvictionListener<String,CacheablePair>(){
    @Override public void onEviction(    String key,    CacheablePair value){
      timeSinceLastAccess.set(System.nanoTime() - value.recentlyAccessed.get());
      stats.evict();
      doEviction(key,value);
    }
  }
;
  backingMap=new MapMaker().maximumSize(numBlocks - 1).evictionListener(listener).makeMap();
}
