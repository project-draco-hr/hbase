{
  if (path == null) {
    throw new IOException("The jar path is null");
  }
  if (!path.toString().endsWith(".jar")) {
    throw new IOException(path.toString() + ": not a jar file?");
  }
  String parentDirPath=conf.get(LOCAL_DIR_KEY,DEFAULT_LOCAL_DIR) + TMP_JARS_DIR;
  File parentDir=new File(parentDirPath);
  if (!parentDir.mkdirs() && !parentDir.isDirectory()) {
    throw new RuntimeException("Failed to create local dir " + parentDir.getPath() + ", CoprocessorClassLoader failed to init");
  }
  FileSystem fs=path.getFileSystem(conf);
  File dst=new File(parentDir,"." + pathPrefix + "."+ path.getName()+ "."+ System.currentTimeMillis()+ ".jar");
  fs.copyToLocalFile(path,new Path(dst.toString()));
  dst.deleteOnExit();
  addURL(dst.getCanonicalFile().toURI().toURL());
  JarFile jarFile=new JarFile(dst.toString());
  try {
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      if (entry.getName().matches("/lib/[^/]+\\.jar")) {
        File file=new File(parentDir,"." + pathPrefix + "."+ path.getName()+ "."+ System.currentTimeMillis()+ "."+ entry.getName().substring(5));
        IOUtils.copyBytes(jarFile.getInputStream(entry),new FileOutputStream(file),conf,true);
        file.deleteOnExit();
        addURL(file.toURI().toURL());
      }
    }
  }
  finally {
    jarFile.close();
  }
}
