{
  final Configuration conf=HBaseConfiguration.create();
  CoprocessorHost<CoprocessorEnvironment> host=new CoprocessorHost<CoprocessorEnvironment>(new TestAbortable()){
    final Configuration cpHostConf=conf;
    @Override public CoprocessorEnvironment createEnvironment(    Class<?> implClass,    final Coprocessor instance,    int priority,    int sequence,    Configuration conf){
      return new CoprocessorEnvironment(){
        final Coprocessor envInstance=instance;
        @Override public int getVersion(){
          return 0;
        }
        @Override public String getHBaseVersion(){
          return "0.0.0";
        }
        @Override public Coprocessor getInstance(){
          return envInstance;
        }
        @Override public int getPriority(){
          return 0;
        }
        @Override public int getLoadSequence(){
          return 0;
        }
        @Override public Configuration getConfiguration(){
          return cpHostConf;
        }
        @Override public Table getTable(        TableName tableName) throws IOException {
          return null;
        }
        @Override public Table getTable(        TableName tableName,        ExecutorService service) throws IOException {
          return null;
        }
        @Override public ClassLoader getClassLoader(){
          return null;
        }
      }
;
    }
  }
;
  final String key="KEY";
  final String coprocessor="org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver";
  conf.setStrings(key,coprocessor,coprocessor,coprocessor);
  host.loadSystemCoprocessors(conf,key);
  Assert.assertEquals(1,host.coprocessors.size());
}
