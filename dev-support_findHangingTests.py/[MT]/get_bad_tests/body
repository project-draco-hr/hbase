def get_bad_tests(console_url):
    '\n    Returns [[all tests], [failed tests], [timeout tests], [hanging tests]] if successfully gets\n    the build information.\n    If there is error getting console text or if there are blacklisted strings in console text,\n    then returns None.\n    '
    response = requests.get(console_url)
    if (response.status_code != 200):
        print 'Error getting consoleText. Response = {} {}'.format(response.status_code, response.reason)
        return
    all_tests_set = set()
    hanging_tests_set = set()
    failed_tests_set = set()
    timeout_tests_set = set()
    for line in response.content.splitlines():
        result1 = re.match('^Running org.apache.hadoop.hbase.(\\w*\\.)*(\\w*)', line)
        if result1:
            test_case = result1.group(2)
            if (test_case in all_tests_set):
                print "ERROR! Multiple tests with same name '{}'. Might get wrong results for this test.".format(test_case)
            else:
                hanging_tests_set.add(test_case)
                all_tests_set.add(test_case)
        result2 = re.match('^Tests run:.*- in org.apache.hadoop.hbase.(\\w*\\.)*(\\w*)', line)
        if result2:
            test_case = result2.group(2)
            if ('FAILURE!' in line):
                failed_tests_set.add(test_case)
            if (test_case not in hanging_tests_set):
                print "ERROR! No test '{}' found in hanging_tests. Might get wrong results for this test.".format(test_case)
            else:
                hanging_tests_set.remove(test_case)
        result3 = re.match('^\\s+(\\w*).*\\sTestTimedOut', line)
        if result3:
            test_case = result3.group(1)
            timeout_tests_set.add(test_case)
        for bad_string in BAD_RUN_STRINGS:
            if re.match((('.*' + bad_string) + '.*'), line):
                print 'Bad string found in build:\n > {}'.format(line)
                return
    print 'Result > total tests: {:4}   failed : {:4}  timedout : {:4}  hanging : {:4}'.format(len(all_tests_set), len(failed_tests_set), len(timeout_tests_set), len(hanging_tests_set))
    return [all_tests_set, failed_tests_set, timeout_tests_set, hanging_tests_set]
