import argparse
import getpass
import git
import json
import logging
import os
import re
import requests
import subprocess
import sys
parser = argparse.ArgumentParser(epilog='To avoid having to enter jira/review board username/password every time, setup an encrypted ~/.apache-cred files as follows:\n1) Create a file with following single line: \n{"jira_username" : "appy", "jira_password":"123", "rb_username":"appy", "rb_password" : "@#$"}\n2) Encrypt it with openssl.\nopenssl enc -aes-256-cbc -in <file> -out ~/.apache-creds\n3) Delete original file.\nNow onwards, you\'ll need to enter this encryption key only once per run. If you forget the key, simply regenerate ~/.apache-cred file again.', formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-b', '--branch', help='Branch to use for generating diff. If not specified, tracking branch is used. If there is no tracking branch, error will be thrown.')
parser.add_argument('-jid', '--jira-id', help='Jira id of the issue. If set, we deduce next patch version from attachments in the jira and also upload the new patch. Script will ask for jira username/password for authentication. If not set, patch is named <branch>.patch.')
parser.add_argument('-srb', '--skip-review-board', help="Don't create/update the review board.", default=False, action='store_true')
parser.add_argument('--reviewers', help='Comma separated list of users to add as reviewers.')
parser.add_argument('--patch-dir', default='~/patches', help="Directory to store patch files. If it doesn't exist, it will be created. Default: ~/patches")
parser.add_argument('--rb-repo', default='hbase-git', help='Review board repository. Default: hbase-git')
args = parser.parse_args()
logging.basicConfig()
logger = logging.getLogger('submit-patch')
logger.setLevel(logging.INFO)
try:
    repo = git.Repo(os.getcwd())
    git = repo.git
except git.exc.InvalidGitRepositoryError as e:
    log_fatal_and_exit(" '%s' is not valid git repo directory.\nRun from base directory of HBase's git repo.", e)
logger.info(' Active branch: %s', repo.active_branch.name)
if repo.is_dirty():
    log_fatal_and_exit(' Git status is dirty. Commit locally first.')
base_branch = get_base_branch()
base_branch_without_remote = base_branch.split('/')[(-1)]
logger.info(' Base branch: %s', base_branch)
check_diff_between_branches(base_branch)
patch_dir = os.path.abspath(os.path.expanduser(args.patch_dir))
logger.info(' Patch directory: %s', patch_dir)
validate_patch_dir(patch_dir)
patch_filename = get_patch_name(base_branch_without_remote)
logger.info(' Patch name: %s', patch_filename)
patch_filepath = os.path.join(patch_dir, patch_filename)
diff = git.format_patch(base_branch, stdout=True)
with open(patch_filepath, 'w') as f:
    f.write(diff)
if (args.jira_id is not None):
    creds = get_credentials()
    issue_url = ('https://issues.apache.org/jira/rest/api/2/issue/' + args.jira_id)
    attach_patch_to_jira(issue_url, patch_filepath, creds)
    if (not args.skip_review_board):
        rb_auth = requests.auth.HTTPBasicAuth(creds['rb_username'], creds['rb_password'])
        rb_link_title = (('Review Board (' + base_branch_without_remote) + ')')
        rb_id = get_review_board_id_if_present(issue_url, rb_link_title)
        if (rb_id is None):
            reviews_url = 'https://reviews.apache.org/api/review-requests/'
            data = {'repository': 'hbase-git', }
            r = requests.post(reviews_url, data=data, auth=rb_auth)
            assert_status_code(r, 201, 'creating new review request')
            review_request = json.loads(r.content)['review_request']
            absolute_url = review_request['absolute_url']
            logger.info(' Created new review request: %s', absolute_url)
            summary = get_jira_summary(issue_url)
            description = git.log('-1', pretty='%B')
            update_draft_data = {'bugs_closed': [args.jira_id.upper()], 'target_groups': 'hbase', 'target_people': args.reviewers, 'summary': summary, 'description': description, }
            draft_url = review_request['links']['draft']['href']
            r = requests.put(draft_url, data=update_draft_data, auth=rb_auth)
            assert_status_code(r, 200, 'updating review draft')
            draft_request = json.loads(r.content)['draft']
            diff_url = draft_request['links']['draft_diffs']['href']
            files = {'path': (patch_filename, open(patch_filepath, 'rb')), }
            r = requests.post(diff_url, files=files, auth=rb_auth)
            assert_status_code(r, 201, 'uploading diff to review draft')
            r = requests.put(draft_url, data={'public': True, }, auth=rb_auth)
            assert_status_code(r, 200, 'publishing review request')
            remote_link = json.dumps({'object': {'url': absolute_url, 'title': rb_link_title, }, })
            jira_auth = requests.auth.HTTPBasicAuth(creds['jira_username'], creds['jira_password'])
            r = requests.post((issue_url + '/remotelink'), data=remote_link, auth=jira_auth, headers={'Content-Type': 'application/json', })
        else:
            logger.info(' Updating existing review board: https://reviews.apache.org/r/%s', rb_id)
            draft_url = (('https://reviews.apache.org/api/review-requests/' + rb_id) + '/draft/')
            diff_url = (draft_url + 'diffs/')
            files = {'path': (patch_filename, open(patch_filepath, 'rb')), }
            r = requests.post(diff_url, files=files, auth=rb_auth)
            assert_status_code(r, 201, 'uploading diff to review draft')
            r = requests.put(draft_url, data={'public': True, }, auth=rb_auth)
            assert_status_code(r, 200, 'publishing review request')
