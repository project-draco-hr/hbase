{
  Path dir=util.getDataTestDir(testName);
  FileSystem fs=util.getTestFileSystem();
  dir=dir.makeQualified(fs);
  Path familyDir=new Path(dir,Bytes.toString(FAMILY));
  int hfileIdx=0;
  for (  byte[][] range : hfileRanges) {
    byte[] from=range[0];
    byte[] to=range[1];
    createHFile(util.getConfiguration(),fs,new Path(familyDir,"hfile_" + hfileIdx++),FAMILY,QUALIFIER,from,to,1000);
  }
  final byte[] TABLE=Bytes.toBytes("mytable_" + testName);
  HBaseAdmin admin=new HBaseAdmin(util.getConfiguration());
  HTableDescriptor htd=new HTableDescriptor(TABLE);
  HColumnDescriptor familyDesc=new HColumnDescriptor(FAMILY);
  htd.addFamily(familyDesc);
  admin.createTable(htd,SPLIT_KEYS);
  HTable table=new HTable(util.getConfiguration(),TABLE);
  util.waitTableEnabled(TABLE);
  LoadIncrementalHFiles loader=new LoadIncrementalHFiles(util.getConfiguration());
  Put put=new Put(Bytes.toBytes("row"));
  put.add(FAMILY,QUALIFIER,Bytes.toBytes("value"));
  table.put(put);
  loader.doBulkLoad(dir,table);
  Collection<StoreFile> files=util.getHBaseCluster().getRegions(TABLE).get(0).getStore(FAMILY).getStorefiles();
  for (  StoreFile file : files) {
    file.createReader();
    if (nonZero)     assertTrue(file.getMaxSequenceId() > 0);
 else     assertTrue(file.getMaxSequenceId() == -1);
  }
}
