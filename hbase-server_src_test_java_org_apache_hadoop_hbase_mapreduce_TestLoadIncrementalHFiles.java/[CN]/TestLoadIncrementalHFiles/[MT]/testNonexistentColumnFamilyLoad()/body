{
  String testName="testNonexistentColumnFamilyLoad";
  byte[][][] hFileRanges=new byte[][][]{new byte[][]{Bytes.toBytes("aaa"),Bytes.toBytes("ccc")},new byte[][]{Bytes.toBytes("ddd"),Bytes.toBytes("ooo")}};
  Path dir=util.getDataTestDirOnTestFS(testName);
  FileSystem fs=util.getTestFileSystem();
  dir=dir.makeQualified(fs);
  Path familyDir=new Path(dir,Bytes.toString(FAMILY));
  int hFileIdx=0;
  for (  byte[][] range : hFileRanges) {
    byte[] from=range[0];
    byte[] to=range[1];
    createHFile(util.getConfiguration(),fs,new Path(familyDir,"hfile_" + hFileIdx++),FAMILY,QUALIFIER,from,to,1000);
  }
  final byte[] TABLE=Bytes.toBytes("mytable_" + testName);
  HBaseAdmin admin=new HBaseAdmin(util.getConfiguration());
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(TABLE));
  HColumnDescriptor family=new HColumnDescriptor(Bytes.toBytes(new String(FAMILY).toUpperCase()));
  htd.addFamily(family);
  admin.createTable(htd,SPLIT_KEYS);
  HTable table=new HTable(util.getConfiguration(),TABLE);
  util.waitTableEnabled(TABLE);
  LoadIncrementalHFiles loader=new LoadIncrementalHFiles(util.getConfiguration(),false);
  try {
    loader.doBulkLoad(dir,table);
    assertTrue("Loading into table with non-existent family should have failed",false);
  }
 catch (  Exception e) {
    assertTrue("IOException expected",e instanceof IOException);
    String errMsg=e.getMessage();
    assertTrue("Incorrect exception message, expected message: [" + EXPECTED_MSG_FOR_NON_EXISTING_FAMILY + "], current message: ["+ errMsg+ "]",errMsg.contains(EXPECTED_MSG_FOR_NON_EXISTING_FAMILY));
  }
  table.close();
  admin.close();
}
