{
  if (disabledAndDroppedTables.getIfPresent(tableName) != null) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Skipping " + entries.size() + " entries because table "+ tableName+ " is cached as a disabled or dropped table");
    }
    sink.getSkippedEditsCounter().addAndGet(entries.size());
    return;
  }
  RegionLocations locations=null;
  boolean useCache=true;
  while (true) {
    try {
      locations=getRegionLocations(connection,tableName,row,useCache,0);
      if (locations == null) {
        throw new HBaseIOException("Cannot locate locations for " + tableName + ", row:"+ Bytes.toStringBinary(row));
      }
    }
 catch (    TableNotFoundException e) {
      if (LOG.isTraceEnabled()) {
        LOG.trace("Skipping " + entries.size() + " entries because table "+ tableName+ " is dropped. Adding table to cache.");
      }
      disabledAndDroppedTables.put(tableName,Boolean.TRUE);
      sink.getSkippedEditsCounter().addAndGet(entries.size());
      return;
    }
    HRegionLocation primaryLocation=locations.getDefaultRegionLocation();
    if (!Bytes.equals(primaryLocation.getRegionInfo().getEncodedNameAsBytes(),encodedRegionName)) {
      if (useCache) {
        useCache=false;
        continue;
      }
      if (LOG.isTraceEnabled()) {
        LOG.trace("Skipping " + entries.size() + " entries in table "+ tableName+ " because located region region "+ primaryLocation.getRegionInfo().getEncodedName()+ " is different than the original region "+ Bytes.toStringBinary(encodedRegionName)+ " from WALEdit");
      }
      sink.getSkippedEditsCounter().addAndGet(entries.size());
      return;
    }
    break;
  }
  if (locations.size() == 1) {
    return;
  }
  ArrayList<Future<ReplicateWALEntryResponse>> tasks=new ArrayList<Future<ReplicateWALEntryResponse>>(locations.size() - 1);
  for (int replicaId=0; replicaId < locations.size(); replicaId++) {
    HRegionLocation location=locations.getRegionLocation(replicaId);
    if (!RegionReplicaUtil.isDefaultReplica(replicaId)) {
      HRegionInfo regionInfo=location == null ? RegionReplicaUtil.getRegionInfoForReplica(locations.getDefaultRegionLocation().getRegionInfo(),replicaId) : location.getRegionInfo();
      RegionReplicaReplayCallable callable=new RegionReplicaReplayCallable(connection,rpcControllerFactory,tableName,location,regionInfo,row,entries,sink.getSkippedEditsCounter());
      Future<ReplicateWALEntryResponse> task=pool.submit(new RetryingRpcCallable<ReplicateWALEntryResponse>(rpcRetryingCallerFactory,callable,operationTimeout));
      tasks.add(task);
    }
  }
  boolean tasksCancelled=false;
  for (  Future<ReplicateWALEntryResponse> task : tasks) {
    try {
      task.get();
    }
 catch (    InterruptedException e) {
      throw new InterruptedIOException(e.getMessage());
    }
catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof IOException) {
        if (cause instanceof TableNotFoundException || connection.isTableDisabled(tableName)) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Skipping " + entries.size() + " entries in table "+ tableName+ " because received exception for dropped or disabled table",cause);
          }
          disabledAndDroppedTables.put(tableName,Boolean.TRUE);
          if (!tasksCancelled) {
            sink.getSkippedEditsCounter().addAndGet(entries.size());
            tasksCancelled=true;
          }
          continue;
        }
        throw (IOException)cause;
      }
      throw new IOException(cause);
    }
  }
}
