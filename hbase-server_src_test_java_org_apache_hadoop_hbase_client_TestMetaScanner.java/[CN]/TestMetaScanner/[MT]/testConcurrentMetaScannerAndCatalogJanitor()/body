{
  TEST_UTIL.getConfiguration().setLong("hbase.catalogjanitor.interval",500);
  setUp();
  final long runtime=30 * 1000;
  LOG.info("Starting testConcurrentMetaScannerAndCatalogJanitor");
  final TableName TABLENAME=TableName.valueOf("testConcurrentMetaScannerAndCatalogJanitor");
  final byte[] FAMILY=Bytes.toBytes("family");
  TEST_UTIL.createTable(TABLENAME,FAMILY);
class RegionMetaSplitter extends StoppableImplementation implements Runnable {
    Random random=new Random();
    Throwable ex=null;
    @Override public void run(){
      while (!isStopped()) {
        try {
          List<HRegionInfo> regions=MetaScanner.listAllRegions(TEST_UTIL.getConfiguration(),connection,false);
          HRegionInfo parent=regions.get(random.nextInt(regions.size()));
          if (parent == null || !TABLENAME.equals(parent.getTable())) {
            continue;
          }
          long startKey=0, endKey=Long.MAX_VALUE;
          byte[] start=parent.getStartKey();
          byte[] end=parent.getEndKey();
          if (!Bytes.equals(HConstants.EMPTY_START_ROW,parent.getStartKey())) {
            startKey=Bytes.toLong(parent.getStartKey());
          }
          if (!Bytes.equals(HConstants.EMPTY_END_ROW,parent.getEndKey())) {
            endKey=Bytes.toLong(parent.getEndKey());
          }
          if (startKey == endKey) {
            continue;
          }
          long midKey=BigDecimal.valueOf(startKey).add(BigDecimal.valueOf(endKey)).divideToIntegralValue(BigDecimal.valueOf(2)).longValue();
          HRegionInfo splita=new HRegionInfo(TABLENAME,start,Bytes.toBytes(midKey));
          HRegionInfo splitb=new HRegionInfo(TABLENAME,Bytes.toBytes(midKey),end);
          MetaTableAccessor.splitRegion(connection,parent,splita,splitb,ServerName.valueOf("fooserver",1,0),1);
          Threads.sleep(random.nextInt(200));
        }
 catch (        Throwable e) {
          ex=e;
          Assert.fail(StringUtils.stringifyException(e));
        }
      }
    }
    void rethrowExceptionIfAny() throws Throwable {
      if (ex != null) {
        throw ex;
      }
    }
  }
class MetaScannerVerifier extends StoppableImplementation implements Runnable {
    Random random=new Random();
    Throwable ex=null;
    @Override public void run(){
      while (!isStopped()) {
        try {
          NavigableMap<HRegionInfo,ServerName> regions=MetaScanner.allTableRegions(connection,TABLENAME);
          LOG.info("-------");
          byte[] lastEndKey=HConstants.EMPTY_START_ROW;
          for (          HRegionInfo hri : regions.navigableKeySet()) {
            long startKey=0, endKey=Long.MAX_VALUE;
            if (!Bytes.equals(HConstants.EMPTY_START_ROW,hri.getStartKey())) {
              startKey=Bytes.toLong(hri.getStartKey());
            }
            if (!Bytes.equals(HConstants.EMPTY_END_ROW,hri.getEndKey())) {
              endKey=Bytes.toLong(hri.getEndKey());
            }
            LOG.info("start:" + startKey + " end:"+ endKey+ " hri:"+ hri);
            Assert.assertTrue("lastEndKey=" + Bytes.toString(lastEndKey) + ", startKey="+ Bytes.toString(hri.getStartKey()),Bytes.equals(lastEndKey,hri.getStartKey()));
            lastEndKey=hri.getEndKey();
          }
          Assert.assertTrue(Bytes.equals(lastEndKey,HConstants.EMPTY_END_ROW));
          LOG.info("-------");
          Threads.sleep(10 + random.nextInt(50));
        }
 catch (        Throwable e) {
          ex=e;
          Assert.fail(StringUtils.stringifyException(e));
        }
      }
    }
    void rethrowExceptionIfAny() throws Throwable {
      if (ex != null) {
        throw ex;
      }
    }
  }
  RegionMetaSplitter regionMetaSplitter=new RegionMetaSplitter();
  MetaScannerVerifier metaScannerVerifier=new MetaScannerVerifier();
  Thread regionMetaSplitterThread=new Thread(regionMetaSplitter);
  Thread metaScannerVerifierThread=new Thread(metaScannerVerifier);
  regionMetaSplitterThread.start();
  metaScannerVerifierThread.start();
  Threads.sleep(runtime);
  regionMetaSplitter.stop("test finished");
  metaScannerVerifier.stop("test finished");
  regionMetaSplitterThread.join();
  metaScannerVerifierThread.join();
  regionMetaSplitter.rethrowExceptionIfAny();
  metaScannerVerifier.rethrowExceptionIfAny();
}
