{
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preOpen(ObserverContext.createAndPrepare(RCP_ENV,null));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preFlush(ObserverContext.createAndPrepare(RCP_ENV,null));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preSplit(ObserverContext.createAndPrepare(RCP_ENV,null));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preGetClosestRowBefore(ObserverContext.createAndPrepare(RCP_ENV,null),TEST_ROW,TEST_FAMILY,new Result());
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<Cell> cells=Lists.newArrayList();
      ACCESS_CONTROLLER.preGetOp(ObserverContext.createAndPrepare(RCP_ENV,null),new Get(TEST_ROW),cells);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preExists(ObserverContext.createAndPrepare(RCP_ENV,null),new Get(TEST_ROW),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.prePut(ObserverContext.createAndPrepare(RCP_ENV,null),new Put(TEST_ROW),new WALEdit(),Durability.USE_DEFAULT);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preDelete(ObserverContext.createAndPrepare(RCP_ENV,null),new Delete(TEST_ROW),new WALEdit(),Durability.USE_DEFAULT);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preBatchMutate(ObserverContext.createAndPrepare(RCP_ENV,null),new MiniBatchOperationInProgress<Mutation>(null,null,null,0,0));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preCheckAndPut(ObserverContext.createAndPrepare(RCP_ENV,null),TEST_ROW,TEST_FAMILY,TEST_Q1,CompareFilter.CompareOp.EQUAL,new BinaryComparator("foo".getBytes()),new Put(TEST_ROW),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preCheckAndDelete(ObserverContext.createAndPrepare(RCP_ENV,null),TEST_ROW,TEST_FAMILY,TEST_Q1,CompareFilter.CompareOp.EQUAL,new BinaryComparator("foo".getBytes()),new Delete(TEST_ROW),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preAppend(ObserverContext.createAndPrepare(RCP_ENV,null),new Append(TEST_ROW));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preIncrement(ObserverContext.createAndPrepare(RCP_ENV,null),new Increment(TEST_ROW));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preScannerOpen(ObserverContext.createAndPrepare(RCP_ENV,null),new Scan(),mock(RegionScanner.class));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<Pair<byte[],String>> paths=Lists.newArrayList();
      ACCESS_CONTROLLER.preBulkLoadHFile(ObserverContext.createAndPrepare(RCP_ENV,null),paths);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
}
