{
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HTableDescriptor htd=new HTableDescriptor(TEST_TABLE.getTableName());
      htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
      ACCESS_CONTROLLER.preCreateTable(ObserverContext.createAndPrepare(CP_ENV,null),htd,null);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HTableDescriptor htd=new HTableDescriptor(TEST_TABLE.getTableName());
      htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
      htd.addFamily(new HColumnDescriptor(TEST_FAMILY2));
      ACCESS_CONTROLLER.preModifyTable(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName(),htd);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preDeleteTable(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName());
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preTruncateTable(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName());
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HColumnDescriptor hcd=new HColumnDescriptor(TEST_FAMILY2);
      ACCESS_CONTROLLER.preAddColumn(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName(),hcd);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HColumnDescriptor hcd=new HColumnDescriptor(TEST_FAMILY2);
      ACCESS_CONTROLLER.preModifyColumn(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName(),hcd);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preDeleteColumn(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName(),TEST_FAMILY2);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preEnableTable(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName());
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preDisableTable(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName());
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HRegionInfo region=new HRegionInfo(TEST_TABLE.getTableName());
      ServerName srcServer=ServerName.valueOf("1.1.1.1",1,0);
      ServerName destServer=ServerName.valueOf("2.2.2.2",2,0);
      ACCESS_CONTROLLER.preMove(ObserverContext.createAndPrepare(CP_ENV,null),region,srcServer,destServer);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HRegionInfo region=new HRegionInfo(TEST_TABLE.getTableName());
      ACCESS_CONTROLLER.preAssign(ObserverContext.createAndPrepare(CP_ENV,null),region);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HRegionInfo region=new HRegionInfo(TEST_TABLE.getTableName());
      ACCESS_CONTROLLER.preUnassign(ObserverContext.createAndPrepare(CP_ENV,null),region,true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preBalance(ObserverContext.createAndPrepare(CP_ENV,null));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preBalanceSwitch(ObserverContext.createAndPrepare(CP_ENV,null),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      SnapshotDescription snapshot=SnapshotDescription.newBuilder().setName("foo").build();
      HTableDescriptor htd=new HTableDescriptor(TEST_TABLE.getTableName());
      ACCESS_CONTROLLER.preSnapshot(ObserverContext.createAndPrepare(CP_ENV,null),snapshot,htd);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      SnapshotDescription snapshot=SnapshotDescription.newBuilder().setName("foo").build();
      ACCESS_CONTROLLER.preListSnapshot(ObserverContext.createAndPrepare(CP_ENV,null),snapshot);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      SnapshotDescription snapshot=SnapshotDescription.newBuilder().setName("foo").build();
      HTableDescriptor htd=new HTableDescriptor(TEST_TABLE.getTableName());
      ACCESS_CONTROLLER.preCloneSnapshot(ObserverContext.createAndPrepare(CP_ENV,null),snapshot,htd);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      SnapshotDescription snapshot=SnapshotDescription.newBuilder().setName("foo").build();
      HTableDescriptor htd=new HTableDescriptor(TEST_TABLE.getTableName());
      ACCESS_CONTROLLER.preRestoreSnapshot(ObserverContext.createAndPrepare(CP_ENV,null),snapshot,htd);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      SnapshotDescription snapshot=SnapshotDescription.newBuilder().setName("foo").build();
      ACCESS_CONTROLLER.preDeleteSnapshot(ObserverContext.createAndPrepare(CP_ENV,null),snapshot);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<TableName> tableNamesList=Lists.newArrayList();
      tableNamesList.add(TEST_TABLE.getTableName());
      List<HTableDescriptor> descriptors=Lists.newArrayList();
      ACCESS_CONTROLLER.preGetTableDescriptors(ObserverContext.createAndPrepare(CP_ENV,null),tableNamesList,descriptors,".+");
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<HTableDescriptor> descriptors=Lists.newArrayList();
      ACCESS_CONTROLLER.preGetTableNames(ObserverContext.createAndPrepare(CP_ENV,null),descriptors,".+");
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      NamespaceDescriptor ns=NamespaceDescriptor.create("test").build();
      ACCESS_CONTROLLER.preCreateNamespace(ObserverContext.createAndPrepare(CP_ENV,null),ns);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preDeleteNamespace(ObserverContext.createAndPrepare(CP_ENV,null),"test");
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      NamespaceDescriptor ns=NamespaceDescriptor.create("test").build();
      ACCESS_CONTROLLER.preModifyNamespace(ObserverContext.createAndPrepare(CP_ENV,null),ns);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preGetNamespaceDescriptor(ObserverContext.createAndPrepare(CP_ENV,null),"test");
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<NamespaceDescriptor> descriptors=Lists.newArrayList();
      ACCESS_CONTROLLER.preListNamespaceDescriptors(ObserverContext.createAndPrepare(CP_ENV,null),descriptors);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      Quotas quotas=Quotas.newBuilder().build();
      ACCESS_CONTROLLER.preSetUserQuota(ObserverContext.createAndPrepare(CP_ENV,null),"testuser",quotas);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      Quotas quotas=Quotas.newBuilder().build();
      ACCESS_CONTROLLER.preSetTableQuota(ObserverContext.createAndPrepare(CP_ENV,null),TEST_TABLE.getTableName(),quotas);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      Quotas quotas=Quotas.newBuilder().build();
      ACCESS_CONTROLLER.preSetNamespaceQuota(ObserverContext.createAndPrepare(CP_ENV,null),"test",quotas);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
}
