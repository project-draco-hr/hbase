{
  final KeyValue kv1=new KeyValue("row1".getBytes(),"cf".getBytes(),"cq".getBytes(),1,Type.Maximum), kv2=new KeyValue("row2".getBytes(),"cf".getBytes(),"cq".getBytes(),1,Type.Maximum), kv3=new KeyValue("row3".getBytes(),"cf".getBytes(),"cq".getBytes(),1,Type.Maximum);
  ScannerCallableWithReplicas callableWithReplicas=Mockito.mock(ScannerCallableWithReplicas.class);
  scan.setCaching(2);
  SmallScannerCallableFactory factory=getFactory(callableWithReplicas);
  try (ClientSmallReversedScanner csrs=new ClientSmallReversedScanner(conf,scan,TableName.valueOf("table"),clusterConn,rpcFactory,controllerFactory,pool,Integer.MAX_VALUE)){
    csrs.setScannerCallableFactory(factory);
    Mockito.when(caller.callWithoutRetries(callableWithReplicas,csrs.getScannerTimeout())).thenAnswer(new Answer<Result[]>(){
      int count=0;
      @Override public Result[] answer(      InvocationOnMock invocation){
        Result[] results;
        if (0 == count) {
          results=new Result[]{Result.create(new Cell[]{kv3}),Result.create(new Cell[]{kv2})};
        }
 else         if (1 == count) {
          results=new Result[]{Result.create(new Cell[]{kv1})};
        }
 else {
          throw new RuntimeException("Should not fetch a third batch from the server");
        }
        count++;
        return results;
      }
    }
);
    Mockito.when(callableWithReplicas.hasMoreResultsContext()).thenReturn(false);
    Mockito.when(callableWithReplicas.getServerHasMoreResults()).thenThrow(new RuntimeException("Should not be called"));
    HRegionInfo regionInfo=Mockito.mock(HRegionInfo.class);
    Mockito.when(callableWithReplicas.getHRegionInfo()).thenReturn(regionInfo);
    Mockito.when(regionInfo.getEndKey()).thenReturn(HConstants.EMPTY_BYTE_ARRAY);
    csrs.loadCache();
    List<Result> results=csrs.cache;
    Iterator<Result> iter=results.iterator();
    assertEquals(2,results.size());
    for (int i=3; i >= 2 && iter.hasNext(); i--) {
      Result result=iter.next();
      byte[] row=result.getRow();
      assertEquals("row" + i,new String(row,StandardCharsets.UTF_8));
      assertEquals(1,result.getMap().size());
    }
    results.clear();
    csrs.loadCache();
    assertEquals(1,results.size());
    Result result=results.get(0);
    assertEquals("row1",new String(result.getRow(),StandardCharsets.UTF_8));
    assertEquals(1,result.getMap().size());
    assertTrue(csrs.closed);
  }
 }
