{
  utility2.shutdownMiniHBaseCluster();
  List<Delete> list=new ArrayList<Delete>();
  for (int i=0; i < NB_ROWS_IN_BATCH / 2; i++) {
    String rowKey="row" + i;
    Delete del=new Delete(rowKey.getBytes());
    list.add(del);
  }
  ht1Source.delete(list);
  for (int i=0; i < NB_ROWS_IN_BATCH; i++) {
    String rowKey="row" + i;
    Delete del=new Delete(rowKey.getBytes());
    list.add(del);
  }
  ht2Source.delete(list);
  rowCount_ht1Source=utility1.countRows(ht1Source);
  assertEquals("t1_syncup has 51 rows on source, after remove 50 of the replicated colfam",51,rowCount_ht1Source);
  rowCount_ht2Source=utility1.countRows(ht2Source);
  assertEquals("t2_syncup has 101 rows on source, after remove 100 of the replicated colfam",101,rowCount_ht2Source);
  utility1.shutdownMiniHBaseCluster();
  utility2.restartHBaseCluster(1);
  Thread.sleep(SLEEP_TIME);
  rowCount_ht1TargetAtPeer1=utility2.countRows(ht1TargetAtPeer1);
  rowCount_ht2TargetAtPeer1=utility2.countRows(ht2TargetAtPeer1);
  assertEquals("@Peer1 t1_syncup should still have 100 rows",100,rowCount_ht1TargetAtPeer1);
  assertEquals("@Peer1 t2_syncup should still have 200 rows",200,rowCount_ht2TargetAtPeer1);
  syncUp(utility1);
  rowCount_ht1TargetAtPeer1=utility2.countRows(ht1TargetAtPeer1);
  rowCount_ht2TargetAtPeer1=utility2.countRows(ht2TargetAtPeer1);
  assertEquals("@Peer1 t1_syncup should be sync up and have 50 rows",50,rowCount_ht1TargetAtPeer1);
  assertEquals("@Peer1 t2_syncup should be sync up and have 100 rows",100,rowCount_ht2TargetAtPeer1);
}
