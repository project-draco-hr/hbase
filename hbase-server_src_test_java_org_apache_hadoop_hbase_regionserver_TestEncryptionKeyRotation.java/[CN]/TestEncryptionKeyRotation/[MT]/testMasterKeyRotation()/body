{
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("default","testMasterKeyRotation"));
  HColumnDescriptor hcd=new HColumnDescriptor("cf");
  String algorithm=conf.get(HConstants.CRYPTO_KEY_ALGORITHM_CONF_KEY,HConstants.CIPHER_AES);
  hcd.setEncryptionType(algorithm);
  hcd.setEncryptionKey(EncryptionUtil.wrapKey(conf,"hbase",initialCFKey));
  htd.addFamily(hcd);
  createTableAndFlush(htd);
  List<Path> storeFilePaths=findStorefilePaths(htd.getTableName());
  assertTrue(storeFilePaths.size() > 0);
  for (  Path path : storeFilePaths) {
    assertTrue("Store file " + path + " has incorrect key",Bytes.equals(initialCFKey.getEncoded(),extractHFileKey(path)));
  }
  TEST_UTIL.shutdownMiniHBaseCluster();
  conf.set(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY,"other");
  conf.set(HConstants.CRYPTO_MASTERKEY_ALTERNATE_NAME_CONF_KEY,"hbase");
  TEST_UTIL.startMiniHBaseCluster(1,1);
  TEST_UTIL.waitTableAvailable(htd.getName(),5000);
  storeFilePaths=findStorefilePaths(htd.getTableName());
  assertTrue(storeFilePaths.size() > 0);
  for (  Path path : storeFilePaths) {
    assertTrue("Store file " + path + " has incorrect key",Bytes.equals(initialCFKey.getEncoded(),extractHFileKey(path)));
  }
}
