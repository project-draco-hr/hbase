{
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("default","testCFKeyRotation"));
  HColumnDescriptor hcd=new HColumnDescriptor("cf");
  String algorithm=conf.get(HConstants.CRYPTO_KEY_ALGORITHM_CONF_KEY,HConstants.CIPHER_AES);
  hcd.setEncryptionType(algorithm);
  hcd.setEncryptionKey(EncryptionUtil.wrapKey(conf,"hbase",initialCFKey));
  htd.addFamily(hcd);
  createTableAndFlush(htd);
  final List<Path> initialPaths=findStorefilePaths(htd.getTableName());
  assertTrue(initialPaths.size() > 0);
  for (  Path path : initialPaths) {
    assertTrue("Store file " + path + " has incorrect key",Bytes.equals(initialCFKey.getEncoded(),extractHFileKey(path)));
  }
  hcd=htd.getFamily(Bytes.toBytes("cf"));
  hcd.setEncryptionKey(EncryptionUtil.wrapKey(conf,conf.get(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY,User.getCurrent().getShortName()),secondCFKey));
  TEST_UTIL.getHBaseAdmin().modifyColumnFamily(htd.getTableName(),hcd);
  Thread.sleep(5000);
  TEST_UTIL.getHBaseAdmin().majorCompact(htd.getTableName());
  final List<Path> updatePaths=findCompactedStorefilePaths(htd.getTableName());
  TEST_UTIL.waitFor(30000,1000,true,new Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      boolean found=false;
      for (      Path path : updatePaths) {
        found=TEST_UTIL.getTestFileSystem().exists(path);
        if (found) {
          LOG.info("Found " + path);
          break;
        }
      }
      return !found;
    }
  }
);
  Thread.sleep(1000);
  waitForCompaction(htd.getTableName());
  List<Path> pathsAfterCompaction=findStorefilePaths(htd.getTableName());
  assertTrue(pathsAfterCompaction.size() > 0);
  for (  Path path : pathsAfterCompaction) {
    assertTrue("Store file " + path + " has incorrect key",Bytes.equals(secondCFKey.getEncoded(),extractHFileKey(path)));
  }
  List<Path> compactedPaths=findCompactedStorefilePaths(htd.getTableName());
  assertTrue(compactedPaths.size() > 0);
  for (  Path path : compactedPaths) {
    assertTrue("Store file " + path + " retains initial key",Bytes.equals(initialCFKey.getEncoded(),extractHFileKey(path)));
  }
}
