{
  Stoppable stoppable=new Stoppable(){
    private volatile boolean isStopped=false;
    @Override public void stop(    String why){
      isStopped=true;
    }
    @Override public boolean isStopped(){
      return isStopped;
    }
  }
;
  this.choreService=new ChoreService("ConnectionCache");
  ScheduledChore cleaner=new ScheduledChore("ConnectionCleaner",stoppable,cleanInterval){
    @Override protected void chore(){
      for (      Map.Entry<String,ConnectionInfo> entry : connections.entrySet()) {
        ConnectionInfo connInfo=entry.getValue();
        if (connInfo.timedOut(maxIdleTime)) {
          if (connInfo.admin != null) {
            try {
              connInfo.admin.close();
            }
 catch (            Throwable t) {
              LOG.info("Got exception in closing idle admin",t);
            }
          }
          try {
            connInfo.connection.close();
          }
 catch (          Throwable t) {
            LOG.info("Got exception in closing idle connection",t);
          }
        }
      }
    }
  }
;
  choreService.scheduleChore(cleaner);
  this.realUser=userProvider.getCurrent().getUGI();
  this.realUserName=realUser.getShortUserName();
  this.userProvider=userProvider;
  this.conf=conf;
}
