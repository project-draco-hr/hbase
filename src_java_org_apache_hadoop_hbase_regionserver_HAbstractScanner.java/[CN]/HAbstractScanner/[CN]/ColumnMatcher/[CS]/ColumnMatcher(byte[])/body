{
  byte[][] parse=parseColumn(col);
  byte[] columnWithoutDelimiter=new byte[parse[0].length + parse[1].length];
  System.arraycopy(parse[0],0,columnWithoutDelimiter,0,parse[0].length);
  System.arraycopy(parse[1],0,columnWithoutDelimiter,parse[0].length,parse[1].length);
  byte[] qualifier=parse[1];
  try {
    if (qualifier == null || qualifier.length == 0) {
      this.matchType=MATCH_TYPE.FAMILY_ONLY;
      this.family=parse[0];
      this.wildCardmatch=true;
    }
 else     if (isRegexPattern.matcher(Bytes.toString(qualifier)).matches()) {
      this.matchType=MATCH_TYPE.REGEX;
      this.columnMatcher=Pattern.compile(Bytes.toString(columnWithoutDelimiter));
      this.wildCardmatch=true;
    }
 else {
      this.matchType=MATCH_TYPE.SIMPLE;
      this.col=columnWithoutDelimiter;
      this.familylength=parse[0].length;
      this.wildCardmatch=false;
    }
  }
 catch (  Exception e) {
    throw new IOException("Column: " + Bytes.toString(col) + ": "+ e.getMessage());
  }
}
