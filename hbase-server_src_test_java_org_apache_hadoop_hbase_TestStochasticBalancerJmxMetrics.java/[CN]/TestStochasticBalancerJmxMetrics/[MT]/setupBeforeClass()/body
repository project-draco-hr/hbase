{
  conf=UTIL.getConfiguration();
  conf.setClass("hbase.util.ip.to.rack.determiner",MockMapping.class,DNSToSwitchMapping.class);
  conf.setFloat("hbase.master.balancer.stochastic.maxMovePercent",0.75f);
  conf.setFloat("hbase.regions.slop",0.0f);
  conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,JMXListener.class.getName());
  Random rand=new Random();
  for (int i=0; i < 10; i++) {
    do {
      int sign=i % 2 == 0 ? 1 : -1;
      connectorPort+=sign * rand.nextInt(100);
    }
 while (!HBaseTestingUtility.available(connectorPort));
    try {
      conf.setInt("regionserver.rmi.registry.port",connectorPort);
      UTIL.startMiniCluster();
      break;
    }
 catch (    Exception e) {
      LOG.debug("Encountered exception when starting cluster. Trying port " + connectorPort,e);
      try {
        UTIL.shutdownMiniCluster();
      }
 catch (      Exception ex) {
        LOG.debug("Encountered exception shutting down cluster",ex);
      }
    }
  }
}
