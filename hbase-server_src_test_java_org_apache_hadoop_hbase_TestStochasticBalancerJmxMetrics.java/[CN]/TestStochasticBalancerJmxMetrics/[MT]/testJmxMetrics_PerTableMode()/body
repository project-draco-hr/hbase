{
  loadBalancer=new StochasticLoadBalancer();
  conf.setBoolean(HConstants.HBASE_MASTER_LOADBALANCE_BYTABLE,true);
  loadBalancer.setConf(conf);
  String[] functionNames=loadBalancer.getCostFunctionNames();
  loadBalancer.updateMetricsSize(3 * (functionNames.length + 1));
  TableName tableName=TableName.valueOf(TABLE_NAME_1);
  Map<ServerName,List<HRegionInfo>> clusterState=mockClusterServers(mockCluster_pertable_1);
  loadBalancer.balanceCluster(tableName,clusterState);
  tableName=TableName.valueOf(TABLE_NAME_2);
  clusterState=mockClusterServers(mockCluster_pertable_2);
  loadBalancer.balanceCluster(tableName,clusterState);
  tableName=TableName.valueOf(TABLE_NAME_NAMESPACE);
  clusterState=mockClusterServers(mockCluster_pertable_namespace);
  loadBalancer.balanceCluster(tableName,clusterState);
  String[] tableNames=new String[]{TABLE_NAME_1,TABLE_NAME_2,TABLE_NAME_NAMESPACE};
  Set<String> jmxMetrics=readJmxMetricsWithRetry();
  Set<String> expectedMetrics=getExpectedJmxMetrics(tableNames,functionNames);
  for (  String expected : expectedMetrics) {
    assertTrue("Metric " + expected + " can not be found in JMX in per-table mode.",jmxMetrics.contains(expected));
  }
}
