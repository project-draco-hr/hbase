{
  rq1.addLog("Queue1","WALLogFile1.1");
  assertEquals(1,rqc.getLogsInQueue(server1,"Queue1").size());
  rq1.removeLog("Queue1","WALLogFile1.1");
  assertEquals(0,rqc.getLogsInQueue(server1,"Queue1").size());
  rq2.addLog("Queue2","WALLogFile2.1");
  rq2.addLog("Queue2","WALLogFile2.2");
  assertEquals(2,rqc.getLogsInQueue(server2,"Queue2").size());
  rq3.addLog("Queue1","WALLogFile1.1");
  rq3.addLog("Queue3","WALLogFile3.1");
  rq3.addLog("Queue3","WALLogFile3.2");
  assertEquals(0,ds0.getAbortCount());
  assertNull(rqc.getLogsInQueue("NotHereServer","NotHereQueue"));
  assertNull(rqc.getLogsInQueue(server1,"NotHereQueue"));
  assertNull(rqc.getLogsInQueue("NotHereServer","WALLogFile1.1"));
  assertEquals(3,ds0.getAbortCount());
  List<String> replicators=rqc.getListOfReplicators();
  assertEquals(3,replicators.size());
  assertTrue(replicators.contains(server1));
  assertTrue(replicators.contains(server2));
  rq1.removeQueue("Queue1");
  assertEquals(2,rqc.getListOfReplicators().size());
  assertEquals(0,rqc.getAllQueues(server1).size());
  rq1.addLog("Queue2","WALLogFile2.1");
  rq1.addLog("Queue3","WALLogFile3.1");
  assertEquals(2,rqc.getAllQueues(server1).size());
  rq1.removeAllQueues();
  assertEquals(0,rqc.getAllQueues(server1).size());
  assertEquals(0,rqc.getAllQueues("NotHereServer").size());
  assertEquals(5,rqc.getAllWALs().size());
  rq3.removeLog("Queue1","WALLogFile1.1");
  assertEquals(4,rqc.getAllWALs().size());
  rq3.removeAllQueues();
  assertEquals(2,rqc.getAllWALs().size());
  rq2.removeAllQueues();
  assertEquals(0,rqc.getAllWALs().size());
}
