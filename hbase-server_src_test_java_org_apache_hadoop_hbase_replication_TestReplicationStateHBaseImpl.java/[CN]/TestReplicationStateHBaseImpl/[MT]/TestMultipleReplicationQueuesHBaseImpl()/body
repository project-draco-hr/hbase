{
  try {
    rq1.addLog("Queue1","WALLogFile1.1");
    rq1.addLog("Queue1","WALLogFile1.2");
    rq1.addLog("Queue1","WALLogFile1.3");
    rq1.addLog("Queue1","WALLogFile1.4");
    rq1.addLog("Queue2","WALLogFile2.1");
    rq1.addLog("Queue3","WALLogFile3.1");
    rq2.addLog("Queue1","WALLogFile1.1");
    rq2.addLog("Queue1","WALLogFile1.2");
    rq2.addLog("Queue2","WALLogFile2.1");
    rq3.addLog("Queue1","WALLogFile1.1");
    assertEquals(3,rq1.getAllQueues().size());
    assertEquals(2,rq2.getAllQueues().size());
    assertEquals(1,rq3.getAllQueues().size());
    assertEquals(4,rq1.getLogsInQueue("Queue1").size());
    assertEquals(1,rq1.getLogsInQueue("Queue2").size());
    assertEquals(1,rq1.getLogsInQueue("Queue3").size());
    assertEquals(2,rq2.getLogsInQueue("Queue1").size());
    assertEquals(1,rq2.getLogsInQueue("Queue2").size());
    assertEquals(1,rq3.getLogsInQueue("Queue1").size());
  }
 catch (  ReplicationException e) {
    e.printStackTrace();
    fail("testAddLogs received a ReplicationException");
  }
  try {
    rq1.setLogPosition("Queue1","WALLogFile1.1",1l);
    rq1.setLogPosition("Queue1","WALLogFile1.2",2l);
    rq1.setLogPosition("Queue1","WALLogFile1.3",3l);
    rq1.setLogPosition("Queue2","WALLogFile2.1",4l);
    rq1.setLogPosition("Queue2","WALLogFile2.2",5l);
    rq1.setLogPosition("Queue3","WALLogFile3.1",6l);
    rq2.setLogPosition("Queue1","WALLogFile1.1",7l);
    rq2.setLogPosition("Queue2","WALLogFile2.1",8l);
    rq3.setLogPosition("Queue1","WALLogFile1.1",9l);
    assertEquals(1l,rq1.getLogPosition("Queue1","WALLogFile1.1"));
    assertEquals(2l,rq1.getLogPosition("Queue1","WALLogFile1.2"));
    assertEquals(4l,rq1.getLogPosition("Queue2","WALLogFile2.1"));
    assertEquals(6l,rq1.getLogPosition("Queue3","WALLogFile3.1"));
    assertEquals(7l,rq2.getLogPosition("Queue1","WALLogFile1.1"));
    assertEquals(8l,rq2.getLogPosition("Queue2","WALLogFile2.1"));
    assertEquals(9l,rq3.getLogPosition("Queue1","WALLogFile1.1"));
    assertEquals(rq1.getListOfReplicators().size(),3);
    assertEquals(rq2.getListOfReplicators().size(),3);
    assertEquals(rq3.getListOfReplicators().size(),3);
  }
 catch (  ReplicationException e) {
    fail("testAddLogs threw a ReplicationException");
  }
  try {
    Map<String,Set<String>> claimedQueuesFromRq2=rq1.claimQueues(server2);
    assertEquals(rq1.getListOfReplicators().size(),2);
    assertEquals(rq2.getListOfReplicators().size(),2);
    assertEquals(rq3.getListOfReplicators().size(),2);
    assertEquals(2,claimedQueuesFromRq2.size());
    assertTrue(claimedQueuesFromRq2.containsKey("Queue1-" + server2));
    assertTrue(claimedQueuesFromRq2.containsKey("Queue2-" + server2));
    assertEquals(2,claimedQueuesFromRq2.get("Queue1-" + server2).size());
    assertEquals(1,claimedQueuesFromRq2.get("Queue2-" + server2).size());
    assertEquals(5,rq1.getAllQueues().size());
    assertEquals(2,rq1.getLogsInQueue("Queue1-" + server2).size());
    assertEquals(1,rq1.getLogsInQueue("Queue2-" + server2).size());
    assertEquals(7l,rq1.getLogPosition("Queue1-" + server2,"WALLogFile1.1"));
    assertEquals(8l,rq1.getLogPosition("Queue2-" + server2,"WALLogFile2.1"));
    assertEquals(0,rq2.getAllQueues().size());
    assertNull(rq2.getLogsInQueue("Queue1"));
    assertNull(rq2.getLogsInQueue("Queue2"));
    rq1.addLog("UnclaimableQueue","WALLogFile1.1");
    rq1.addLog("UnclaimableQueue","WALLogFile1.2");
    assertEquals(6,rq1.getAllQueues().size());
    Map<String,Set<String>> claimedQueuesFromRq1=rq3.claimQueues(server1);
    assertEquals(rq1.getListOfReplicators().size(),1);
    assertEquals(rq2.getListOfReplicators().size(),1);
    assertEquals(rq3.getListOfReplicators().size(),1);
    assertEquals(6,rq3.getAllQueues().size());
    Map<String,Set<String>> noQueues=rq3.claimQueues("NotARealServer");
    assertEquals(0,noQueues.size());
    assertEquals(6,rq3.getAllQueues().size());
    noQueues=rq3.claimQueues(server3);
    assertEquals(0,noQueues.size());
    assertEquals(6,rq3.getAllQueues().size());
    assertEquals(1,rq3.getListOfReplicators().size());
  }
 catch (  ReplicationException e) {
    fail("testClaimQueue threw a ReplicationException");
  }
}
