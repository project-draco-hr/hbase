{
  DummyServer ds=new DummyServer(server1);
  try {
    rqH=ReplicationFactory.getReplicationQueues(new ReplicationQueuesArguments(conf,ds,null));
    rqH.init(server1);
    Table replicationTable=connection.getTable(ReplicationQueuesHBaseImpl.REPLICATION_TABLE_NAME);
    assertTrue(replicationTable.getName().isSystemTable());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("testReplicationStateHBaseConstruction received an Exception");
  }
  try {
    assertEquals(0,rqH.getAllQueues().size());
    rqH.addLog("Queue1","WALLogFile1.1");
    assertEquals(1,rqH.getAllQueues().size());
    rqH.addLog("Queue1","WALLogFile1.2");
    rqH.addLog("Queue1","WALLogFile1.3");
    rqH.addLog("Queue1","WALLogFile1.4");
    rqH.addLog("Queue2","WALLogFile2.1");
    rqH.addLog("Queue3","WALLogFile3.1");
    assertEquals(3,rqH.getAllQueues().size());
    assertEquals(4,rqH.getLogsInQueue("Queue1").size());
    assertEquals(1,rqH.getLogsInQueue("Queue2").size());
    assertEquals(1,rqH.getLogsInQueue("Queue3").size());
    assertEquals(0,ds.getAbortCount());
    assertNull(rqH.getLogsInQueue("Queue4"));
    assertEquals(1,ds.getAbortCount());
  }
 catch (  ReplicationException e) {
    e.printStackTrace();
    fail("testAddLog received a ReplicationException");
  }
  try {
    assertEquals(0L,rqH.getLogPosition("Queue1","WALLogFile1.1"));
    rqH.setLogPosition("Queue1","WALLogFile1.1",123L);
    assertEquals(123L,rqH.getLogPosition("Queue1","WALLogFile1.1"));
    rqH.setLogPosition("Queue1","WALLogFile1.1",123456789L);
    assertEquals(123456789L,rqH.getLogPosition("Queue1","WALLogFile1.1"));
    rqH.setLogPosition("Queue2","WALLogFile2.1",242L);
    assertEquals(242L,rqH.getLogPosition("Queue2","WALLogFile2.1"));
    rqH.setLogPosition("Queue3","WALLogFile3.1",243L);
    assertEquals(243L,rqH.getLogPosition("Queue3","WALLogFile3.1"));
    assertEquals(1,ds.getAbortCount());
    rqH.setLogPosition("NotHereQueue","WALLogFile3.1",243L);
    assertEquals(2,ds.getAbortCount());
    rqH.setLogPosition("NotHereQueue","NotHereFile",243L);
    assertEquals(3,ds.getAbortCount());
    rqH.setLogPosition("Queue1","NotHereFile",243l);
    assertEquals(4,ds.getAbortCount());
    try {
      rqH.getLogPosition("Queue1","NotHereWAL");
      fail("Replication queue should have thrown a ReplicationException for reading from a " + "non-existent WAL");
    }
 catch (    ReplicationException e) {
    }
    try {
      rqH.getLogPosition("NotHereQueue","NotHereWAL");
      fail("Replication queue should have thrown a ReplicationException for reading from a " + "non-existent queue");
    }
 catch (    ReplicationException e) {
    }
    rqH.removeLog("Queue1","WALLogFile1.1");
    assertEquals(3,rqH.getLogsInQueue("Queue1").size());
    rqH.removeQueue("Queue2");
    assertEquals(2,rqH.getAllQueues().size());
    assertNull(rqH.getLogsInQueue("Queue2"));
    assertEquals(5,ds.getAbortCount());
    rqH.removeAllQueues();
    assertEquals(0,rqH.getAllQueues().size());
    assertNull(rqH.getLogsInQueue("Queue1"));
    assertEquals(6,ds.getAbortCount());
  }
 catch (  ReplicationException e) {
    e.printStackTrace();
    fail("testAddLog received a ReplicationException");
  }
}
