{
  try {
    assertEquals(0,rq1.getAllQueues().size());
    rq1.addLog("Queue1","WALLogFile1.1");
    assertEquals(1,rq1.getAllQueues().size());
    rq1.addLog("Queue1","WALLogFile1.2");
    rq1.addLog("Queue1","WALLogFile1.3");
    rq1.addLog("Queue1","WALLogFile1.4");
    rq1.addLog("Queue2","WALLogFile2.1");
    rq1.addLog("Queue3","WALLogFile3.1");
    assertEquals(3,rq1.getAllQueues().size());
    assertEquals(4,rq1.getLogsInQueue("Queue1").size());
    assertEquals(1,rq1.getLogsInQueue("Queue2").size());
    assertEquals(1,rq1.getLogsInQueue("Queue3").size());
    assertEquals(0,ds1.getAbortCount());
    assertNull(rq1.getLogsInQueue("Queue4"));
    assertEquals(1,ds1.getAbortCount());
  }
 catch (  ReplicationException e) {
    e.printStackTrace();
    fail("testAddLog received a ReplicationException");
  }
  try {
    assertEquals(0L,rq1.getLogPosition("Queue1","WALLogFile1.1"));
    rq1.setLogPosition("Queue1","WALLogFile1.1",123L);
    assertEquals(123L,rq1.getLogPosition("Queue1","WALLogFile1.1"));
    rq1.setLogPosition("Queue1","WALLogFile1.1",123456789L);
    assertEquals(123456789L,rq1.getLogPosition("Queue1","WALLogFile1.1"));
    rq1.setLogPosition("Queue2","WALLogFile2.1",242L);
    assertEquals(242L,rq1.getLogPosition("Queue2","WALLogFile2.1"));
    rq1.setLogPosition("Queue3","WALLogFile3.1",243L);
    assertEquals(243L,rq1.getLogPosition("Queue3","WALLogFile3.1"));
    assertEquals(1,ds1.getAbortCount());
    rq1.setLogPosition("NotHereQueue","WALLogFile3.1",243L);
    assertEquals(2,ds1.getAbortCount());
    rq1.setLogPosition("NotHereQueue","NotHereFile",243L);
    assertEquals(3,ds1.getAbortCount());
    rq1.setLogPosition("Queue1","NotHereFile",243l);
    assertEquals(4,ds1.getAbortCount());
    try {
      rq1.getLogPosition("Queue1","NotHereWAL");
      fail("Replication queue should have thrown a ReplicationException for reading from a " + "non-existent WAL");
    }
 catch (    ReplicationException e) {
    }
    try {
      rq1.getLogPosition("NotHereQueue","NotHereWAL");
      fail("Replication queue should have thrown a ReplicationException for reading from a " + "non-existent queue");
    }
 catch (    ReplicationException e) {
    }
    rq1.removeLog("Queue1","WALLogFile1.1");
    assertEquals(3,rq1.getLogsInQueue("Queue1").size());
    rq1.removeQueue("Queue2");
    assertEquals(2,rq1.getAllQueues().size());
    assertNull(rq1.getLogsInQueue("Queue2"));
    assertEquals(5,ds1.getAbortCount());
    rq1.removeAllQueues();
    assertEquals(0,rq1.getAllQueues().size());
    assertNull(rq1.getLogsInQueue("Queue1"));
    assertEquals(6,ds1.getAbortCount());
    rq1.removeQueue("NotHereQueue");
    assertEquals(6,ds1.getAbortCount());
  }
 catch (  ReplicationException e) {
    e.printStackTrace();
    fail("testAddLog received a ReplicationException");
  }
}
