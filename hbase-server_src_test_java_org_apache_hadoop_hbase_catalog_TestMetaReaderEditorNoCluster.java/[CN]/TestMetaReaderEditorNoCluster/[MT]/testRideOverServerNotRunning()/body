{
  ZooKeeperWatcher zkw=new ZooKeeperWatcher(UTIL.getConfiguration(),this.getClass().getSimpleName(),ABORTABLE,true);
  ServerName sn=new ServerName("example.com",1234,System.currentTimeMillis());
  HConnection connection;
  CatalogTracker ct=null;
  try {
    final ClientProtocol implementation=Mockito.mock(ClientProtocol.class);
    List<KeyValue> kvs=new ArrayList<KeyValue>();
    final byte[] rowToVerify=Bytes.toBytes("rowToVerify");
    kvs.add(new KeyValue(rowToVerify,HConstants.CATALOG_FAMILY,HConstants.REGIONINFO_QUALIFIER,HRegionInfo.FIRST_META_REGIONINFO.toByteArray()));
    kvs.add(new KeyValue(rowToVerify,HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER,Bytes.toBytes(sn.getHostAndPort())));
    kvs.add(new KeyValue(rowToVerify,HConstants.CATALOG_FAMILY,HConstants.STARTCODE_QUALIFIER,Bytes.toBytes(sn.getStartcode())));
    final Result[] results=new Result[]{new Result(kvs)};
    ScanResponse.Builder builder=ScanResponse.newBuilder();
    for (    Result result : results) {
      builder.addResult(ProtobufUtil.toResult(result));
    }
    Mockito.when(implementation.scan((RpcController)Mockito.any(),(ScanRequest)Mockito.any())).thenThrow(new ServiceException("Server not running (1 of 3)")).thenThrow(new ServiceException("Server not running (2 of 3)")).thenThrow(new ServiceException("Server not running (3 of 3)")).thenReturn(ScanResponse.newBuilder().setScannerId(1234567890L).build()).thenReturn(builder.build()).thenReturn(ScanResponse.newBuilder().setMoreResults(false).build());
    connection=HConnectionTestingUtility.getSpiedConnection(UTIL.getConfiguration());
    final HRegionLocation anyLocation=new HRegionLocation(HRegionInfo.FIRST_META_REGIONINFO,sn,HConstants.NO_SEQNUM);
    Mockito.doReturn(anyLocation).when(connection).locateRegion((byte[])Mockito.any(),(byte[])Mockito.any());
    Mockito.doReturn(anyLocation).when(connection).getRegionLocation((byte[])Mockito.any(),(byte[])Mockito.any(),Mockito.anyBoolean());
    Mockito.doReturn(implementation).when(connection).getClient(Mockito.any(ServerName.class));
    ct=new CatalogTracker(zkw,null,connection,ABORTABLE);
    ct.start();
    NavigableMap<HRegionInfo,Result> hris=MetaReader.getServerUserRegions(ct,sn);
    assertEquals(1,hris.size());
    assertTrue(hris.firstEntry().getKey().equals(HRegionInfo.FIRST_META_REGIONINFO));
    assertTrue(Bytes.equals(rowToVerify,hris.firstEntry().getValue().getRow()));
    Mockito.verify(implementation,Mockito.times(6)).scan((RpcController)Mockito.any(),(ScanRequest)Mockito.any());
  }
  finally {
    if (ct != null)     ct.stop();
    HConnectionManager.deleteConnection(UTIL.getConfiguration());
    zkw.close();
  }
}
