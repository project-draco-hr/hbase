{
  final BlockCacheKey key=new BlockCacheKey("key",0);
  final byte[] buf=new byte[5 * 1024];
  Arrays.fill(buf,(byte)5);
  final ByteArrayCacheable bac=new ByteArrayCacheable(buf);
  Configuration conf=new Configuration();
  MultithreadedTestUtil.TestContext ctx=new MultithreadedTestUtil.TestContext(conf);
  final AtomicInteger totalQueries=new AtomicInteger();
  toBeTested.cacheBlock(key,bac);
  for (int i=0; i < numThreads; i++) {
    TestThread t=new MultithreadedTestUtil.RepeatingTestThread(ctx){
      @Override public void doAnAction() throws Exception {
        ByteArrayCacheable returned=(ByteArrayCacheable)toBeTested.getBlock(key,false,false,true);
        if (returned != null) {
          assertArrayEquals(buf,returned.buf);
        }
 else {
          Thread.sleep(10);
        }
        totalQueries.incrementAndGet();
      }
    }
;
    t.setDaemon(true);
    ctx.addThread(t);
  }
  final long blockEvictPeriod=50;
  TestThread t=new MultithreadedTestUtil.RepeatingTestThread(ctx){
    @Override public void doAnAction() throws Exception {
      toBeTested.evictBlock(key);
      toBeTested.cacheBlock(key,bac);
      Thread.sleep(blockEvictPeriod);
    }
  }
;
  t.setDaemon(true);
  ctx.addThread(t);
  ctx.startThreads();
  while (totalQueries.get() < numQueries && ctx.shouldRun()) {
    Thread.sleep(10);
  }
  ctx.stop();
}
