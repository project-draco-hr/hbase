{
  ZooKeeperProtos.TableCF[] tableCFs=null;
  Map<TableName,List<String>> tabCFsMap=null;
  assertNull(ReplicationSerDeHelper.convert(tabCFsMap));
  tabCFsMap=new HashMap<TableName,List<String>>();
  tableCFs=ReplicationSerDeHelper.convert(tabCFsMap);
  assertEquals(0,tableCFs.length);
  TableName tab1=TableName.valueOf("tab1");
  TableName tab2=TableName.valueOf("tab2");
  TableName tab3=TableName.valueOf("tab3");
  tabCFsMap.clear();
  tabCFsMap.put(tab1,null);
  tableCFs=ReplicationSerDeHelper.convert(tabCFsMap);
  assertEquals(1,tableCFs.length);
  assertEquals(tab1.toString(),tableCFs[0].getTableName().getQualifier().toStringUtf8());
  assertEquals(0,tableCFs[0].getFamiliesCount());
  tabCFsMap.clear();
  tabCFsMap.put(tab2,new ArrayList<String>());
  tabCFsMap.get(tab2).add("cf1");
  tableCFs=ReplicationSerDeHelper.convert(tabCFsMap);
  assertEquals(1,tableCFs.length);
  assertEquals(tab2.toString(),tableCFs[0].getTableName().getQualifier().toStringUtf8());
  assertEquals(1,tableCFs[0].getFamiliesCount());
  assertEquals("cf1",tableCFs[0].getFamilies(0).toStringUtf8());
  tabCFsMap.clear();
  tabCFsMap.put(tab3,new ArrayList<String>());
  tabCFsMap.get(tab3).add("cf1");
  tabCFsMap.get(tab3).add("cf3");
  tableCFs=ReplicationSerDeHelper.convert(tabCFsMap);
  assertEquals(1,tableCFs.length);
  assertEquals(tab3.toString(),tableCFs[0].getTableName().getQualifier().toStringUtf8());
  assertEquals(2,tableCFs[0].getFamiliesCount());
  assertEquals("cf1",tableCFs[0].getFamilies(0).toStringUtf8());
  assertEquals("cf3",tableCFs[0].getFamilies(1).toStringUtf8());
  tabCFsMap.clear();
  tabCFsMap.put(tab1,null);
  tabCFsMap.put(tab2,new ArrayList<String>());
  tabCFsMap.get(tab2).add("cf1");
  tabCFsMap.put(tab3,new ArrayList<String>());
  tabCFsMap.get(tab3).add("cf1");
  tabCFsMap.get(tab3).add("cf3");
  tableCFs=ReplicationSerDeHelper.convert(tabCFsMap);
  assertEquals(3,tableCFs.length);
  assertNotNull(ReplicationSerDeHelper.getTableCF(tableCFs,tab1.toString()));
  assertNotNull(ReplicationSerDeHelper.getTableCF(tableCFs,tab2.toString()));
  assertNotNull(ReplicationSerDeHelper.getTableCF(tableCFs,tab3.toString()));
  assertEquals(0,ReplicationSerDeHelper.getTableCF(tableCFs,tab1.toString()).getFamiliesCount());
  assertEquals(1,ReplicationSerDeHelper.getTableCF(tableCFs,tab2.toString()).getFamiliesCount());
  assertEquals("cf1",ReplicationSerDeHelper.getTableCF(tableCFs,tab2.toString()).getFamilies(0).toStringUtf8());
  assertEquals(2,ReplicationSerDeHelper.getTableCF(tableCFs,tab3.toString()).getFamiliesCount());
  assertEquals("cf1",ReplicationSerDeHelper.getTableCF(tableCFs,tab3.toString()).getFamilies(0).toStringUtf8());
  assertEquals("cf3",ReplicationSerDeHelper.getTableCF(tableCFs,tab3.toString()).getFamilies(1).toStringUtf8());
  tabCFsMap=ReplicationSerDeHelper.convert2Map(tableCFs);
  assertEquals(3,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tab1));
  assertTrue(tabCFsMap.containsKey(tab2));
  assertTrue(tabCFsMap.containsKey(tab3));
  assertEquals(null,tabCFsMap.get(tab1));
  assertEquals(1,tabCFsMap.get(tab2).size());
  assertEquals("cf1",tabCFsMap.get(tab2).get(0));
  assertEquals(2,tabCFsMap.get(tab3).size());
  assertTrue(tabCFsMap.get(tab3).contains("cf1"));
  assertTrue(tabCFsMap.get(tab3).contains("cf3"));
}
