{
  String mcAddress=conf.get(HConstants.STATUS_MULTICAST_ADDRESS,HConstants.DEFAULT_STATUS_MULTICAST_ADDRESS);
  String bindAddress=conf.get(HConstants.STATUS_MULTICAST_BIND_ADDRESS,HConstants.DEFAULT_STATUS_MULTICAST_BIND_ADDRESS);
  int port=conf.getInt(HConstants.STATUS_MULTICAST_PORT,HConstants.DEFAULT_STATUS_MULTICAST_PORT);
  InetAddress ina;
  try {
    ina=InetAddress.getByName(mcAddress);
  }
 catch (  UnknownHostException e) {
    close();
    throw new IOException("Can't connect to " + mcAddress,e);
  }
  InternetProtocolFamily family=InternetProtocolFamily.IPv4;
  if (ina instanceof Inet6Address) {
    family=InternetProtocolFamily.IPv6;
  }
  try {
    Bootstrap b=new Bootstrap();
    b.group(group).channelFactory(new HBaseDatagramChannelFactory<Channel>(NioDatagramChannel.class,family)).option(ChannelOption.SO_REUSEADDR,true).handler(new ClusterStatusHandler());
    channel=(DatagramChannel)b.bind(bindAddress,port).sync().channel();
  }
 catch (  InterruptedException e) {
    close();
    throw ExceptionUtil.asInterrupt(e);
  }
  NetworkInterface ni=NetworkInterface.getByInetAddress(Addressing.getIpAddress());
  channel.joinGroup(ina,ni,null,channel.newPromise());
}
