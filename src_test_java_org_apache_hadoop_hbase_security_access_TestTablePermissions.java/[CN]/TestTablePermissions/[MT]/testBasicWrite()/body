{
  Configuration conf=UTIL.getConfiguration();
  AccessControlLists.addTablePermission(conf,TEST_TABLE,"george",new TablePermission(TEST_TABLE,null,TablePermission.Action.READ,TablePermission.Action.WRITE));
  AccessControlLists.addTablePermission(conf,TEST_TABLE,"hubert",new TablePermission(TEST_TABLE,null,TablePermission.Action.READ));
  AccessControlLists.addTablePermission(conf,TEST_TABLE,"humphrey",new TablePermission(TEST_TABLE,TEST_FAMILY,TEST_QUALIFIER,TablePermission.Action.READ));
  ListMultimap<String,TablePermission> perms=AccessControlLists.getTablePermissions(conf,TEST_TABLE);
  List<TablePermission> userPerms=perms.get("george");
  assertNotNull("Should have permissions for george",userPerms);
  assertEquals("Should have 1 permission for george",1,userPerms.size());
  TablePermission permission=userPerms.get(0);
  assertTrue("Permission should be for " + TEST_TABLE,Bytes.equals(TEST_TABLE,permission.getTable()));
  assertNull("Column family should be empty",permission.getFamily());
  assertNotNull(permission.getActions());
  assertEquals(2,permission.getActions().length);
  List<TablePermission.Action> actions=Arrays.asList(permission.getActions());
  assertTrue(actions.contains(TablePermission.Action.READ));
  assertTrue(actions.contains(TablePermission.Action.WRITE));
  userPerms=perms.get("hubert");
  assertNotNull("Should have permissions for hubert",userPerms);
  assertEquals("Should have 1 permission for hubert",1,userPerms.size());
  permission=userPerms.get(0);
  assertTrue("Permission should be for " + TEST_TABLE,Bytes.equals(TEST_TABLE,permission.getTable()));
  assertNull("Column family should be empty",permission.getFamily());
  assertNotNull(permission.getActions());
  assertEquals(1,permission.getActions().length);
  actions=Arrays.asList(permission.getActions());
  assertTrue(actions.contains(TablePermission.Action.READ));
  assertFalse(actions.contains(TablePermission.Action.WRITE));
  userPerms=perms.get("humphrey");
  assertNotNull("Should have permissions for humphrey",userPerms);
  assertEquals("Should have 1 permission for humphrey",1,userPerms.size());
  permission=userPerms.get(0);
  assertTrue("Permission should be for " + TEST_TABLE,Bytes.equals(TEST_TABLE,permission.getTable()));
  assertTrue("Permission should be for family " + TEST_FAMILY,Bytes.equals(TEST_FAMILY,permission.getFamily()));
  assertTrue("Permission should be for qualifier " + TEST_QUALIFIER,Bytes.equals(TEST_QUALIFIER,permission.getQualifier()));
  assertNotNull(permission.getActions());
  assertEquals(1,permission.getActions().length);
  actions=Arrays.asList(permission.getActions());
  assertTrue(actions.contains(TablePermission.Action.READ));
  assertFalse(actions.contains(TablePermission.Action.WRITE));
  AccessControlLists.addTablePermission(conf,TEST_TABLE2,"hubert",new TablePermission(TEST_TABLE2,null,TablePermission.Action.READ,TablePermission.Action.WRITE));
  Map<byte[],ListMultimap<String,TablePermission>> allPerms=AccessControlLists.loadAll(conf);
  assertEquals("Full permission map should have entries for both test tables",2,allPerms.size());
  userPerms=allPerms.get(TEST_TABLE).get("hubert");
  assertNotNull(userPerms);
  assertEquals(1,userPerms.size());
  permission=userPerms.get(0);
  assertTrue(Bytes.equals(TEST_TABLE,permission.getTable()));
  assertEquals(1,permission.getActions().length);
  assertEquals(TablePermission.Action.READ,permission.getActions()[0]);
  userPerms=allPerms.get(TEST_TABLE2).get("hubert");
  assertNotNull(userPerms);
  assertEquals(1,userPerms.size());
  permission=userPerms.get(0);
  assertTrue(Bytes.equals(TEST_TABLE2,permission.getTable()));
  assertEquals(2,permission.getActions().length);
  actions=Arrays.asList(permission.getActions());
  assertTrue(actions.contains(TablePermission.Action.READ));
  assertTrue(actions.contains(TablePermission.Action.WRITE));
}
