{
  assertEquals(0,keys.size());
  HFileContext meta=new HFileContextBuilder().withHBaseCheckSum(true).withIncludesMvcc(includesMemstoreTS).withIncludesTags(useTags).withCompression(compr).withBytesPerCheckSum(HFile.DEFAULT_BYTES_PER_CHECKSUM).build();
  HFileBlock.Writer hbw=new HFileBlock.Writer(null,meta);
  FSDataOutputStream outputStream=fs.create(path);
  HFileBlockIndex.BlockIndexWriter biw=new HFileBlockIndex.BlockIndexWriter(hbw,null,null);
  for (int i=0; i < NUM_DATA_BLOCKS; ++i) {
    hbw.startWriting(BlockType.DATA).write(String.valueOf(rand.nextInt(1000)).getBytes());
    long blockOffset=outputStream.getPos();
    hbw.writeHeaderAndData(outputStream);
    byte[] firstKey=null;
    for (int j=0; j < 16; ++j) {
      byte[] k=TestHFileWriterV2.randomOrderedKey(rand,i * 16 + j);
      keys.add(k);
      if (j == 8)       firstKey=k;
    }
    assertTrue(firstKey != null);
    if (firstKeyInFile == null)     firstKeyInFile=firstKey;
    biw.addEntry(firstKey,blockOffset,hbw.getOnDiskSizeWithHeader());
    writeInlineBlocks(hbw,outputStream,biw,false);
  }
  writeInlineBlocks(hbw,outputStream,biw,true);
  rootIndexOffset=biw.writeIndexBlocks(outputStream);
  outputStream.close();
  numLevels=biw.getNumLevels();
  numRootEntries=biw.getNumRootEntries();
  LOG.info("Index written: numLevels=" + numLevels + ", numRootEntries="+ numRootEntries+ ", rootIndexOffset="+ rootIndexOffset);
}
