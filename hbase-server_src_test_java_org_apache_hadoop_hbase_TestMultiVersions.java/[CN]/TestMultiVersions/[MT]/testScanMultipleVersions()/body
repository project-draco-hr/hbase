{
  final byte[] tableName=Bytes.toBytes("testScanMultipleVersions");
  final HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  final byte[][] rows=new byte[][]{Bytes.toBytes("row_0200"),Bytes.toBytes("row_0800")};
  final byte[][] splitRows=new byte[][]{Bytes.toBytes("row_0500")};
  final long[] timestamp=new long[]{100L,1000L};
  this.admin.createTable(desc,splitRows);
  HTable table=new HTable(UTIL.getConfiguration(),tableName);
  NavigableMap<HRegionInfo,ServerName> locations=table.getRegionLocations();
  assertEquals(2,locations.size());
  int index=0;
  for (  Map.Entry<HRegionInfo,ServerName> e : locations.entrySet()) {
    HRegionInfo hri=e.getKey();
    if (index == 0) {
      assertTrue(Bytes.equals(HConstants.EMPTY_START_ROW,hri.getStartKey()));
      assertTrue(Bytes.equals(hri.getEndKey(),splitRows[0]));
    }
 else     if (index == 1) {
      assertTrue(Bytes.equals(splitRows[0],hri.getStartKey()));
      assertTrue(Bytes.equals(hri.getEndKey(),HConstants.EMPTY_END_ROW));
    }
    index++;
  }
  for (int i=0; i < locations.size(); i++) {
    for (int j=0; j < timestamp.length; j++) {
      Put put=new Put(rows[i],timestamp[j]);
      put.add(HConstants.CATALOG_FAMILY,null,timestamp[j],Bytes.toBytes(timestamp[j]));
      table.put(put);
    }
  }
  for (int i=0; i < rows.length; i++) {
    for (int j=0; j < timestamp.length; j++) {
      Get get=new Get(rows[i]);
      get.addFamily(HConstants.CATALOG_FAMILY);
      get.setTimeStamp(timestamp[j]);
      Result result=table.get(get);
      int cellCount=0;
      for (      @SuppressWarnings("unused") KeyValue kv : result.list()) {
        cellCount++;
      }
      assertTrue(cellCount == 1);
    }
    table.close();
  }
  int count=0;
  Scan scan=new Scan();
  scan.addFamily(HConstants.CATALOG_FAMILY);
  ResultScanner s=table.getScanner(scan);
  try {
    for (Result rr=null; (rr=s.next()) != null; ) {
      System.out.println(rr.toString());
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  scan=new Scan();
  scan.setTimeRange(1000L,Long.MAX_VALUE);
  scan.addFamily(HConstants.CATALOG_FAMILY);
  s=table.getScanner(scan);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  scan=new Scan();
  scan.setTimeStamp(1000L);
  scan.addFamily(HConstants.CATALOG_FAMILY);
  s=table.getScanner(scan);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  scan=new Scan();
  scan.setTimeRange(100L,1000L);
  scan.addFamily(HConstants.CATALOG_FAMILY);
  s=table.getScanner(scan);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  scan=new Scan();
  scan.setTimeStamp(100L);
  scan.addFamily(HConstants.CATALOG_FAMILY);
  s=table.getScanner(scan);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
}
