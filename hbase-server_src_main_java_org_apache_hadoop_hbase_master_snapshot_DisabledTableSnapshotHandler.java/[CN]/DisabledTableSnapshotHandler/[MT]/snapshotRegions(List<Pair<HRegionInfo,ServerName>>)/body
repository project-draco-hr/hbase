{
  try {
    timeoutInjector.start();
    Set<HRegionInfo> regions=new HashSet<HRegionInfo>();
    for (    Pair<HRegionInfo,ServerName> p : regionsAndLocations) {
      HRegionInfo hri=p.getFirst();
      if (RegionReplicaUtil.isDefaultReplica(hri)) {
        regions.add(hri);
      }
      if (Bytes.equals(hri.getStartKey(),HConstants.EMPTY_START_ROW)) {
        HRegionInfo mobRegion=MobUtils.getMobRegionInfo(hri.getTable());
        regions.add(mobRegion);
      }
    }
    String msg="Starting to write region info and WALs for regions for offline snapshot:" + ClientSnapshotDescriptionUtils.toString(snapshot);
    LOG.info(msg);
    status.setStatus(msg);
    ThreadPoolExecutor exec=SnapshotManifest.createExecutor(conf,"DisabledTableSnapshot");
    try {
      ModifyRegionUtils.editRegions(exec,regions,new ModifyRegionUtils.RegionEditTask(){
        @Override public void editRegion(        final HRegionInfo regionInfo) throws IOException {
          snapshotManifest.addRegion(FSUtils.getTableDir(rootDir,snapshotTable),regionInfo);
        }
      }
);
    }
  finally {
      exec.shutdown();
    }
  }
 catch (  Exception e) {
    String reason="Failed snapshot " + ClientSnapshotDescriptionUtils.toString(snapshot) + " due to exception:"+ e.getMessage();
    ForeignException ee=new ForeignException(reason,e);
    monitor.receive(ee);
    status.abort("Snapshot of table: " + snapshotTable + " failed because "+ e.getMessage());
  }
 finally {
    LOG.debug("Marking snapshot" + ClientSnapshotDescriptionUtils.toString(snapshot) + " as finished.");
    timeoutInjector.complete();
  }
}
