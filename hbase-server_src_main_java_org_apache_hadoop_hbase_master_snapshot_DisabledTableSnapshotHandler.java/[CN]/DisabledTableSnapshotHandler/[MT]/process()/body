{
  LOG.info("Running table snapshot operation " + eventType + " on table "+ tableName);
  try {
    timer.start();
    SnapshotDescriptionUtils.writeSnapshotInfo(snapshot,workingDir,this.fs);
    List<Pair<HRegionInfo,ServerName>> regionsAndLocations=null;
    while (regionsAndLocations == null) {
      try {
        regionsAndLocations=MetaReader.getTableRegionsAndLocations(this.server.getCatalogTracker(),Bytes.toBytes(tableName),true);
      }
 catch (      InterruptedException e) {
        if (this.monitor.checkForError())         return;
        Thread.currentThread().interrupt();
      }
    }
    Set<String> serverNames=new HashSet<String>();
    Set<HRegionInfo> regions=new HashSet<HRegionInfo>();
    for (    Pair<HRegionInfo,ServerName> p : regionsAndLocations) {
      regions.add(p.getFirst());
      serverNames.add(p.getSecond().toString());
    }
    LOG.info("Starting to write region info and WALs for regions for offline snapshot:" + snapshot);
    for (    HRegionInfo regionInfo : regions) {
      Path snapshotRegionDir=TakeSnapshotUtils.getRegionSnapshotDirectory(snapshot,rootDir,regionInfo.getEncodedName());
      HRegion.writeRegioninfoOnFilesystem(regionInfo,snapshotRegionDir,fs,conf);
      monitor.failOnError();
      Path regionDir=HRegion.getRegionDir(rootDir,regionInfo);
      new CopyRecoveredEditsTask(snapshot,monitor,fs,regionDir,snapshotRegionDir).run();
      monitor.failOnError();
      new ReferenceRegionHFilesTask(snapshot,monitor,regionDir,fs,snapshotRegionDir).run();
      monitor.failOnError();
    }
    LOG.info("Starting to copy tableinfo for offline snapshot:\n" + snapshot);
    TableInfoCopyTask tableInfo=new TableInfoCopyTask(this.monitor,snapshot,fs,FSUtils.getRootDir(conf));
    tableInfo.run();
    monitor.failOnError();
    verify.verifySnapshot(this.workingDir,serverNames);
    SnapshotDescriptionUtils.completeSnapshot(this.snapshot,this.rootDir,this.workingDir,this.fs);
  }
 catch (  Exception e) {
    monitor.snapshotFailure("Failed due to exception:" + e.getMessage(),snapshot,e);
  }
 finally {
    LOG.debug("Marking snapshot" + this.snapshot + " as finished.");
    this.stopped=true;
    timer.complete();
    LOG.debug("Launching cleanup of working dir:" + workingDir);
    try {
      if (!this.fs.delete(this.workingDir,true)) {
        LOG.error("Couldn't delete snapshot working directory:" + workingDir);
      }
    }
 catch (    IOException e) {
      LOG.error("Couldn't delete snapshot working directory:" + workingDir);
    }
  }
}
