{
  LOG.info("testMultipleTasks");
  SplitLogCounters.resetCounters();
  final ServerName SRV=ServerName.valueOf("tmt_svr,1,1");
  final String PATH1=ZKSplitLog.getEncodedNodeName(zkw,"tmt_task");
  RegionServerServices mockedRS=getRegionServer(SRV);
  SplitLogWorker slw=new SplitLogWorker(zkw,TEST_UTIL.getConfiguration(),mockedRS,neverEndingTask);
  slw.start();
  try {
    Thread.yield();
    Thread.sleep(100);
    waitForCounter(SplitLogCounters.tot_wkr_task_grabing,0,1,WAIT_TIME);
    SplitLogTask unassignedManager=new SplitLogTask.Unassigned(MANAGER);
    zkw.getRecoverableZooKeeper().create(PATH1,unassignedManager.toByteArray(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
    waitForCounter(SplitLogCounters.tot_wkr_task_acquired,0,1,WAIT_TIME);
    final String PATH2=ZKSplitLog.getEncodedNodeName(zkw,"tmt_task_2");
    zkw.getRecoverableZooKeeper().create(PATH2,unassignedManager.toByteArray(),Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
    final ServerName anotherWorker=ServerName.valueOf("another-worker,1,1");
    SplitLogTask slt=new SplitLogTask.Owned(anotherWorker);
    ZKUtil.setData(zkw,PATH1,slt.toByteArray());
    waitForCounter(SplitLogCounters.tot_wkr_preempt_task,0,1,WAIT_TIME);
    waitForCounter(SplitLogCounters.tot_wkr_task_acquired,1,2,WAIT_TIME);
    assertEquals(2,slw.taskReadySeq);
    byte[] bytes=ZKUtil.getData(zkw,PATH2);
    slt=SplitLogTask.parseFrom(bytes);
    assertTrue(slt.isOwned(SRV));
  }
  finally {
    stopSplitLogWorker(slw);
  }
}
