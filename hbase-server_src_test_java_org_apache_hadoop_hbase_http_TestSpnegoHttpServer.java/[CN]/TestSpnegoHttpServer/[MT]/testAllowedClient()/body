{
  final Subject clientSubject=JaasKrbUtil.loginUsingKeytab(CLIENT_PRINCIPAL,clientKeytab);
  final Set<Principal> clientPrincipals=clientSubject.getPrincipals();
  assertFalse(clientPrincipals.isEmpty());
  Set<KerberosTicket> privateCredentials=clientSubject.getPrivateCredentials(KerberosTicket.class);
  assertFalse(privateCredentials.isEmpty());
  KerberosTicket tgt=privateCredentials.iterator().next();
  assertNotNull(tgt);
  final String principalName=clientPrincipals.iterator().next().getName();
  HttpResponse resp=Subject.doAs(clientSubject,new PrivilegedExceptionAction<HttpResponse>(){
    @Override public HttpResponse run() throws Exception {
      GSSManager gssManager=GSSManager.getInstance();
      Oid oid=new Oid("1.2.840.113554.1.2.2");
      GSSName gssClient=gssManager.createName(principalName,GSSName.NT_USER_NAME);
      GSSCredential credential=gssManager.createCredential(gssClient,GSSCredential.DEFAULT_LIFETIME,oid,GSSCredential.INITIATE_ONLY);
      HttpClientContext context=HttpClientContext.create();
      Lookup<AuthSchemeProvider> authRegistry=RegistryBuilder.<AuthSchemeProvider>create().register(AuthSchemes.SPNEGO,new SPNegoSchemeFactory(true,true)).build();
      HttpClient client=HttpClients.custom().setDefaultAuthSchemeRegistry(authRegistry).build();
      BasicCredentialsProvider credentialsProvider=new BasicCredentialsProvider();
      credentialsProvider.setCredentials(AuthScope.ANY,new KerberosCredentials(credential));
      URL url=new URL(getServerURL(server),"/echo?a=b");
      context.setTargetHost(new HttpHost(url.getHost(),url.getPort()));
      context.setCredentialsProvider(credentialsProvider);
      context.setAuthSchemeRegistry(authRegistry);
      HttpGet get=new HttpGet(url.toURI());
      return client.execute(get,context);
    }
  }
);
  assertNotNull(resp);
  assertEquals(HttpURLConnection.HTTP_OK,resp.getStatusLine().getStatusCode());
  assertEquals("a:b",EntityUtils.toString(resp.getEntity()).trim());
}
