{
  if (this.server.isStopping() || this.server.isStopped()) {
    LOG.debug("Skipping split because server is stopping=" + this.server.isStopping() + " or stopped="+ this.server.isStopped());
    return;
  }
  try {
    final long startTime=System.currentTimeMillis();
    SplitTransaction st=new SplitTransaction(parent,midKey);
    tableLock=server.getTableLockManager().readLock(parent.getTableDesc().getTableName(),"SPLIT_REGION:" + parent.getRegionNameAsString());
    try {
      tableLock.acquire();
    }
 catch (    IOException ex) {
      tableLock=null;
      throw ex;
    }
    if (!st.prepare())     return;
    try {
      st.execute(this.server,this.server);
    }
 catch (    Exception e) {
      if (this.server.isStopping() || this.server.isStopped()) {
        LOG.info("Skip rollback/cleanup of failed split of " + parent.getRegionNameAsString() + " because server is"+ (this.server.isStopping() ? " stopping" : " stopped"),e);
        return;
      }
      try {
        LOG.info("Running rollback/cleanup of failed split of " + parent.getRegionNameAsString() + "; "+ e.getMessage(),e);
        if (st.rollback(this.server,this.server)) {
          LOG.info("Successful rollback of failed split of " + parent.getRegionNameAsString());
        }
 else {
          this.server.abort("Abort; we got an error after point-of-no-return");
        }
      }
 catch (      RuntimeException ee) {
        String msg="Failed rollback of failed split of " + parent.getRegionNameAsString() + " -- aborting server";
        LOG.info(msg,ee);
        this.server.abort(msg + " -- Cause: " + ee.getMessage());
      }
      return;
    }
    LOG.info("Region split, hbase:meta updated, and report to master. Parent=" + parent.getRegionNameAsString() + ", new regions: "+ st.getFirstDaughter().getRegionNameAsString()+ ", "+ st.getSecondDaughter().getRegionNameAsString()+ ". Split took "+ StringUtils.formatTimeDiff(System.currentTimeMillis(),startTime));
  }
 catch (  IOException ex) {
    ex=ex instanceof RemoteException ? ((RemoteException)ex).unwrapRemoteException() : ex;
    LOG.error("Split failed " + this,ex);
    server.checkFileSystem();
  }
 finally {
    if (this.parent.getCoprocessorHost() != null) {
      try {
        this.parent.getCoprocessorHost().postCompleteSplit();
      }
 catch (      IOException io) {
        LOG.error("Split failed " + this,io instanceof RemoteException ? ((RemoteException)io).unwrapRemoteException() : io);
      }
    }
    releaseTableLock();
  }
}
