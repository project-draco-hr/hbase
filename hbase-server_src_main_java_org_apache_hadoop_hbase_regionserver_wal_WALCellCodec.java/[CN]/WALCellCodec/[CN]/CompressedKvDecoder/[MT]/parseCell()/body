{
  int keylength=StreamUtils.readRawVarint32(in);
  int vlength=StreamUtils.readRawVarint32(in);
  int tagsLength=StreamUtils.readRawVarint32(in);
  int length=0;
  if (tagsLength == 0) {
    length=KeyValue.KEYVALUE_INFRASTRUCTURE_SIZE + keylength + vlength;
  }
 else {
    length=KeyValue.KEYVALUE_WITH_TAGS_INFRASTRUCTURE_SIZE + keylength + vlength+ tagsLength;
  }
  byte[] backingArray=new byte[length];
  int pos=0;
  pos=Bytes.putInt(backingArray,pos,keylength);
  pos=Bytes.putInt(backingArray,pos,vlength);
  int elemLen=readIntoArray(backingArray,pos + Bytes.SIZEOF_SHORT,compression.rowDict);
  checkLength(elemLen,Short.MAX_VALUE);
  pos=Bytes.putShort(backingArray,pos,(short)elemLen);
  pos+=elemLen;
  elemLen=readIntoArray(backingArray,pos + Bytes.SIZEOF_BYTE,compression.familyDict);
  checkLength(elemLen,Byte.MAX_VALUE);
  pos=Bytes.putByte(backingArray,pos,(byte)elemLen);
  pos+=elemLen;
  elemLen=readIntoArray(backingArray,pos,compression.qualifierDict);
  pos+=elemLen;
  IOUtils.readFully(in,backingArray,pos,length - pos);
  return new KeyValue(backingArray,0,length);
}
