{
  if (fs instanceof DistributedFileSystem) {
    return FanOutOneBlockAsyncDFSOutputHelper.createOutput((DistributedFileSystem)fs,f,overwrite,createParent,replication,blockSize,eventLoop);
  }
  final FSDataOutputStream fsOut;
  int bufferSize=fs.getConf().getInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY,CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_DEFAULT);
  if (createParent) {
    fsOut=fs.create(f,overwrite,bufferSize,replication,blockSize,null);
  }
 else {
    fsOut=fs.createNonRecursive(f,overwrite,bufferSize,replication,blockSize,null);
  }
  final ExecutorService flushExecutor=Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).setNameFormat("AsyncFSOutputFlusher-" + f.toString().replace("%","%%")).build());
  return new AsyncFSOutput(){
    private final ByteArrayOutputStream out=new ByteArrayOutputStream();
    @Override public void write(    final byte[] b,    final int off,    final int len){
      if (eventLoop.inEventLoop()) {
        out.write(b,off,len);
      }
 else {
        eventLoop.submit(new Runnable(){
          public void run(){
            out.write(b,off,len);
          }
        }
).syncUninterruptibly();
      }
    }
    @Override public void write(    byte[] b){
      write(b,0,b.length);
    }
    @Override public void recoverAndClose(    CancelableProgressable reporter) throws IOException {
      fsOut.close();
    }
    @Override public DatanodeInfo[] getPipeline(){
      return new DatanodeInfo[0];
    }
    @Override public <A>void flush(    final A attachment,    final CompletionHandler<Long,? super A> handler,    final boolean sync){
      flushExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
synchronized (out) {
              out.writeTo(fsOut);
              out.reset();
            }
          }
 catch (          final IOException e) {
            eventLoop.execute(new Runnable(){
              @Override public void run(){
                handler.failed(e,attachment);
              }
            }
);
            return;
          }
          try {
            if (sync) {
              fsOut.hsync();
            }
 else {
              fsOut.hflush();
            }
            final long pos=fsOut.getPos();
            eventLoop.execute(new Runnable(){
              @Override public void run(){
                handler.completed(pos,attachment);
              }
            }
);
          }
 catch (          final IOException e) {
            eventLoop.execute(new Runnable(){
              @Override public void run(){
                handler.failed(e,attachment);
              }
            }
);
          }
        }
      }
);
    }
    @Override public void close() throws IOException {
      try {
        flushExecutor.submit(new Callable<Void>(){
          @Override public Void call() throws Exception {
synchronized (out) {
              out.writeTo(fsOut);
              out.reset();
            }
            return null;
          }
        }
).get();
      }
 catch (      InterruptedException e) {
        throw new InterruptedIOException();
      }
catch (      ExecutionException e) {
        Throwables.propagateIfPossible(e.getCause(),IOException.class);
        throw new IOException(e.getCause());
      }
 finally {
        flushExecutor.shutdown();
      }
      fsOut.close();
    }
    @Override public int buffered(){
      return out.size();
    }
  }
;
}
