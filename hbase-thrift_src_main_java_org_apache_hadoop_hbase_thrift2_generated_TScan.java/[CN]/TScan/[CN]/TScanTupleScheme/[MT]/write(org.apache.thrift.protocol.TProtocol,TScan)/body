{
  TTupleProtocol oprot=(TTupleProtocol)prot;
  BitSet optionals=new BitSet();
  if (struct.isSetStartRow()) {
    optionals.set(0);
  }
  if (struct.isSetStopRow()) {
    optionals.set(1);
  }
  if (struct.isSetColumns()) {
    optionals.set(2);
  }
  if (struct.isSetCaching()) {
    optionals.set(3);
  }
  if (struct.isSetMaxVersions()) {
    optionals.set(4);
  }
  if (struct.isSetTimeRange()) {
    optionals.set(5);
  }
  if (struct.isSetFilterString()) {
    optionals.set(6);
  }
  if (struct.isSetBatchSize()) {
    optionals.set(7);
  }
  if (struct.isSetAttributes()) {
    optionals.set(8);
  }
  oprot.writeBitSet(optionals,9);
  if (struct.isSetStartRow()) {
    oprot.writeBinary(struct.startRow);
  }
  if (struct.isSetStopRow()) {
    oprot.writeBinary(struct.stopRow);
  }
  if (struct.isSetColumns()) {
{
      oprot.writeI32(struct.columns.size());
      for (      TColumn _iter89 : struct.columns) {
        _iter89.write(oprot);
      }
    }
  }
  if (struct.isSetCaching()) {
    oprot.writeI32(struct.caching);
  }
  if (struct.isSetMaxVersions()) {
    oprot.writeI32(struct.maxVersions);
  }
  if (struct.isSetTimeRange()) {
    struct.timeRange.write(oprot);
  }
  if (struct.isSetFilterString()) {
    oprot.writeBinary(struct.filterString);
  }
  if (struct.isSetBatchSize()) {
    oprot.writeI32(struct.batchSize);
  }
  if (struct.isSetAttributes()) {
{
      oprot.writeI32(struct.attributes.size());
      for (      Map.Entry<ByteBuffer,ByteBuffer> _iter90 : struct.attributes.entrySet()) {
        oprot.writeBinary(_iter90.getKey());
        oprot.writeBinary(_iter90.getValue());
      }
    }
  }
}
