{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.startRow=iprot.readBinary();
        struct.setStartRowIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.stopRow=iprot.readBinary();
    struct.setStopRowIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list106=iprot.readListBegin();
  struct.columns=new ArrayList<TColumn>(_list106.size);
  TColumn _elem107;
  for (int _i108=0; _i108 < _list106.size; ++_i108) {
    _elem107=new TColumn();
    _elem107.read(iprot);
    struct.columns.add(_elem107);
  }
  iprot.readListEnd();
}
struct.setColumnsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.caching=iprot.readI32();
struct.setCachingIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.maxVersions=iprot.readI32();
struct.setMaxVersionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.timeRange=new TTimeRange();
struct.timeRange.read(iprot);
struct.setTimeRangeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.filterString=iprot.readBinary();
struct.setFilterStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.batchSize=iprot.readI32();
struct.setBatchSizeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map109=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map109.size);
ByteBuffer _key110;
ByteBuffer _val111;
for (int _i112=0; _i112 < _map109.size; ++_i112) {
_key110=iprot.readBinary();
_val111=iprot.readBinary();
struct.attributes.put(_key110,_val111);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.authorizations=new TAuthorization();
struct.authorizations.read(iprot);
struct.setAuthorizationsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.reversed=iprot.readBool();
struct.setReversedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.cacheBlocks=iprot.readBool();
struct.setCacheBlocksIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
