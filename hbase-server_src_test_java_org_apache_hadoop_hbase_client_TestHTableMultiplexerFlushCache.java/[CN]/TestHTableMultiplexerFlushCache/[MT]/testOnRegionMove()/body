{
  TableName TABLE=TableName.valueOf("testOnRegionMove");
  final int NUM_REGIONS=10;
  Table htable=TEST_UTIL.createTable(TABLE,new byte[][]{FAMILY},3,Bytes.toBytes("aaaaa"),Bytes.toBytes("zzzzz"),NUM_REGIONS);
  HTableMultiplexer multiplexer=new HTableMultiplexer(TEST_UTIL.getConfiguration(),PER_REGIONSERVER_QUEUE_SIZE);
  final RegionLocator regionLocator=TEST_UTIL.getConnection().getRegionLocator(TABLE);
  Pair<byte[][],byte[][]> startEndRows=regionLocator.getStartEndKeys();
  byte[] row=startEndRows.getFirst()[1];
  assertTrue("2nd region should not start with empty row",row != null && row.length > 0);
  Put put=new Put(row).addColumn(FAMILY,QUALIFIER1,VALUE1);
  assertTrue("multiplexer.put returns",multiplexer.put(TABLE,put));
  checkExistence(htable,row,FAMILY,QUALIFIER1,VALUE1);
  final HRegionLocation loc=regionLocator.getRegionLocation(row);
  final MiniHBaseCluster hbaseCluster=TEST_UTIL.getHBaseCluster();
  final ServerName originalServer=loc.getServerName();
  ServerName newServer=null;
  for (int i=0; i < SLAVES; i++) {
    HRegionServer rs=hbaseCluster.getRegionServer(0);
    if (!rs.getServerName().equals(originalServer.getServerName())) {
      newServer=rs.getServerName();
      break;
    }
  }
  assertNotNull("Did not find a new RegionServer to use",newServer);
  LOG.info("Moving " + loc.getRegionInfo().getEncodedName() + " from "+ originalServer+ " to "+ newServer);
  TEST_UTIL.getHBaseAdmin().move(loc.getRegionInfo().getEncodedNameAsBytes(),Bytes.toBytes(newServer.getServerName()));
  TEST_UTIL.waitUntilAllRegionsAssigned(TABLE);
  put=new Put(row).addColumn(FAMILY,QUALIFIER2,VALUE2);
  assertTrue("multiplexer.put returns",multiplexer.put(TABLE,put));
  checkExistence(htable,row,FAMILY,QUALIFIER2,VALUE2);
}
