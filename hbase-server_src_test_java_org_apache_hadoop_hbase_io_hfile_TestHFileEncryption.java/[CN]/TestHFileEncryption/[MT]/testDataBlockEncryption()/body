{
  final int blocks=10;
  final int[] blockSizes=new int[blocks];
  for (int i=0; i < blocks; i++) {
    blockSizes[i]=(1024 + RNG.nextInt(1024 * 63)) / Bytes.SIZEOF_INT;
  }
  for (  Compression.Algorithm compression : TestHFileBlock.COMPRESSION_ALGORITHMS) {
    Path path=new Path(TEST_UTIL.getDataTestDir(),"block_v3_" + compression + "_AES");
    LOG.info("testDataBlockEncryption: encryption=AES compression=" + compression);
    long totalSize=0;
    HFileContext fileContext=new HFileContextBuilder().withCompression(compression).withEncryptionContext(cryptoContext).build();
    FSDataOutputStream os=fs.create(path);
    try {
      for (int i=0; i < blocks; i++) {
        totalSize+=writeBlock(os,fileContext,blockSizes[i]);
      }
    }
  finally {
      os.close();
    }
    FSDataInputStream is=fs.open(path);
    try {
      HFileBlock.FSReaderV2 hbr=new HFileBlock.FSReaderV2(is,totalSize,fileContext);
      long pos=0;
      for (int i=0; i < blocks; i++) {
        pos+=readAndVerifyBlock(pos,hbr,blockSizes[i]);
      }
    }
  finally {
      is.close();
    }
  }
}
