{
  boolean retrySplitting=!conf.getBoolean("hbase.hlog.split.skip.errors",WALSplitter.SPLIT_SKIP_ERRORS_DEFAULT);
  Set<ServerName> serverNames=new HashSet<ServerName>();
  Path logsDirPath=new Path(this.rootDir,HConstants.HREGION_LOGDIR_NAME);
  do {
    if (services.isStopped()) {
      LOG.warn("Master stopped while trying to get failed servers.");
      break;
    }
    try {
      if (!this.fs.exists(logsDirPath))       return serverNames;
      FileStatus[] logFolders=FSUtils.listStatus(this.fs,logsDirPath,null);
      Set<ServerName> onlineServers=services.getServerManager().getOnlineServers().keySet();
      if (logFolders == null || logFolders.length == 0) {
        LOG.debug("No log files to split, proceeding...");
        return serverNames;
      }
      for (      FileStatus status : logFolders) {
        FileStatus[] curLogFiles=FSUtils.listStatus(this.fs,status.getPath(),null);
        if (curLogFiles == null || curLogFiles.length == 0) {
          continue;
        }
        final ServerName serverName=AbstractFSWALProvider.getServerNameFromWALDirectoryName(status.getPath());
        if (null == serverName) {
          LOG.warn("Log folder " + status.getPath() + " doesn't look like its name includes a "+ "region server name; leaving in place. If you see later errors about missing "+ "write ahead logs they may be saved in this location.");
        }
 else         if (!onlineServers.contains(serverName)) {
          LOG.info("Log folder " + status.getPath() + " doesn't belong "+ "to a known region server, splitting");
          serverNames.add(serverName);
        }
 else {
          LOG.info("Log folder " + status.getPath() + " belongs to an existing region server");
        }
      }
      retrySplitting=false;
    }
 catch (    IOException ioe) {
      LOG.warn("Failed getting failed servers to be recovered.",ioe);
      if (!checkFileSystem()) {
        LOG.warn("Bad Filesystem, exiting");
        Runtime.getRuntime().halt(1);
      }
      try {
        if (retrySplitting) {
          Thread.sleep(conf.getInt("hbase.hlog.split.failure.retry.interval",30 * 1000));
        }
      }
 catch (      InterruptedException e) {
        LOG.warn("Interrupted, aborting since cannot return w/o splitting");
        Thread.currentThread().interrupt();
        retrySplitting=false;
        Runtime.getRuntime().halt(1);
      }
    }
  }
 while (retrySplitting);
  return serverNames;
}
