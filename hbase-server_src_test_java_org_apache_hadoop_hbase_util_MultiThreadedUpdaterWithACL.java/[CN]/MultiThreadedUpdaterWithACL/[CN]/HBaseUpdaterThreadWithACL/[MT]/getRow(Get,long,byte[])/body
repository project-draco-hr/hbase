{
  PrivilegedExceptionAction<Object> action=new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      Result res=null;
      HTable localTable=null;
      try {
        int mod=((int)rowKeyBase % userNames.length);
        if (userVsTable.get(userNames[mod]) == null) {
          localTable=new HTable(conf,tableName);
          userVsTable.put(userNames[mod],localTable);
          res=localTable.get(get);
        }
 else {
          localTable=userVsTable.get(userNames[mod]);
          res=localTable.get(get);
        }
      }
 catch (      IOException ie) {
        LOG.warn("Failed to get the row for key = [" + get.getRow() + "], column family = ["+ Bytes.toString(cf)+ "]",ie);
      }
      return res;
    }
  }
;
  if (userNames != null && userNames.length > 0) {
    int mod=((int)rowKeyBase % userNames.length);
    User user;
    UserGroupInformation realUserUgi;
    try {
      if (!users.containsKey(userNames[mod])) {
        if (LoadTestTool.isSecure(conf)) {
          realUserUgi=LoadTestTool.loginAndReturnUGI(conf,userNames[mod]);
        }
 else {
          realUserUgi=UserGroupInformation.createRemoteUser(userNames[mod]);
        }
        user=User.create(realUserUgi);
        users.put(userNames[mod],user);
      }
 else {
        user=users.get(userNames[mod]);
      }
      Result result=(Result)user.runAs(action);
      return result;
    }
 catch (    Exception ie) {
      LOG.warn("Failed to get the row for key = [" + get.getRow() + "], column family = ["+ Bytes.toString(cf)+ "]",ie);
    }
  }
  return null;
}
