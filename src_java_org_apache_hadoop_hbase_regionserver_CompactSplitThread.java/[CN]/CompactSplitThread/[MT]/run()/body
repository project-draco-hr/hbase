{
  while (!this.server.isStopRequested()) {
    try {
      Thread.sleep(this.frequency);
    }
 catch (    InterruptedException ex) {
      continue;
    }
  }
  int count=0;
  while (!this.server.isStopRequested()) {
    HRegion r=null;
    try {
      if ((limit > 0) && (++count > limit)) {
        try {
          Thread.sleep(this.frequency);
        }
 catch (        InterruptedException ex) {
          continue;
        }
        count=0;
      }
      r=compactionQueue.poll(this.frequency,TimeUnit.MILLISECONDS);
      if (r != null && !this.server.isStopRequested()) {
synchronized (regionsInQueue) {
          regionsInQueue.remove(r);
        }
        lock.lock();
        try {
          byte[] midKey=r.compactStores();
          if (midKey != null && !this.server.isStopRequested()) {
            split(r,midKey);
          }
        }
  finally {
          lock.unlock();
        }
      }
    }
 catch (    InterruptedException ex) {
      continue;
    }
catch (    IOException ex) {
      LOG.error("Compaction/Split failed for region " + r.getRegionNameAsString(),RemoteExceptionHandler.checkIOException(ex));
      if (!server.checkFileSystem()) {
        break;
      }
    }
catch (    Exception ex) {
      LOG.error("Compaction failed" + (r != null ? (" for region " + r.getRegionNameAsString()) : ""),ex);
      if (!server.checkFileSystem()) {
        break;
      }
    }
  }
  regionsInQueue.clear();
  compactionQueue.clear();
  LOG.info(getName() + " exiting");
}
