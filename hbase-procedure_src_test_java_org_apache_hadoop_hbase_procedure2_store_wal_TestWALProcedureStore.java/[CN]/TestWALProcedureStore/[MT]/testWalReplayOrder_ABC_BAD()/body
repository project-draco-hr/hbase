{
  TestProcedure a=new TestProcedure(1,0);
  TestProcedure b=new TestProcedure(2,1);
  TestProcedure c=new TestProcedure(3,2);
  TestProcedure d=new TestProcedure(4,0);
  procStore.insert(a,null);
  a.addStackId(0);
  procStore.update(a);
  procStore.insert(a,new Procedure[]{b});
  b.addStackId(1);
  procStore.update(b);
  procStore.insert(b,new Procedure[]{c});
  b.addStackId(2);
  procStore.update(b);
  procStore.rollWriterForTesting();
  b.addStackId(3);
  procStore.update(b);
  a.addStackId(4);
  procStore.update(a);
  procStore.insert(d,null);
  d.addStackId(0);
  procStore.update(d);
  storeRestart(new ProcedureStore.ProcedureLoader(){
    @Override public void setMaxProcId(    long maxProcId){
      assertEquals(4,maxProcId);
    }
    @Override public void load(    ProcedureIterator procIter) throws IOException {
      assertTrue(procIter.hasNext());
      assertEquals(4,procIter.nextAsProcedureInfo().getProcId());
      assertTrue(procIter.hasNext());
      assertEquals(1,procIter.nextAsProcedureInfo().getProcId());
      assertTrue(procIter.hasNext());
      assertEquals(2,procIter.nextAsProcedureInfo().getProcId());
      assertTrue(procIter.hasNext());
      assertEquals(3,procIter.nextAsProcedureInfo().getProcId());
      assertFalse(procIter.hasNext());
    }
    @Override public void handleCorrupted(    ProcedureIterator procIter) throws IOException {
      assertFalse(procIter.hasNext());
    }
  }
);
}
