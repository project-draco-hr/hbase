{
  TestProcedure[] procs=new TestProcedure[3];
  for (int i=0; i < procs.length; ++i) {
    procs[i]=new TestProcedure(i + 1,0);
    procStore.insert(procs[i],null);
  }
  procStore.rollWriterForTesting();
  for (int i=0; i < procs.length; ++i) {
    procStore.update(procs[i]);
    procStore.rollWriterForTesting();
  }
  procStore.stop(false);
  FileStatus[] status=fs.listStatus(logDir);
  assertEquals(procs.length + 2,status.length);
  procStore=new WALProcedureStore(htu.getConfiguration(),fs,logDir,new WALProcedureStore.LeaseRecovery(){
    private int count=0;
    @Override public void recoverFileLease(    FileSystem fs,    Path path) throws IOException {
      if (++count <= 2) {
        fs.delete(path,false);
        LOG.debug("Simulate FileNotFound at count=" + count + " for "+ path);
        throw new FileNotFoundException("test file not found " + path);
      }
      LOG.debug("Simulate recoverFileLease() at count=" + count + " for "+ path);
    }
  }
);
  final LoadCounter loader=new LoadCounter();
  procStore.start(PROCEDURE_STORE_SLOTS);
  procStore.recoverLease();
  procStore.load(loader);
  assertEquals(procs.length,loader.getMaxProcId());
  assertEquals(procs.length - 1,loader.getLoadedCount());
  assertEquals(0,loader.getCorruptedCount());
}
