{
  final Procedure[] procs=new Procedure[6];
  for (int i=0; i < procs.length; ++i) {
    procs[i]=new TestSequentialProcedure();
  }
  procStore.insert(procs[0],null);
  procStore.insert(procs[1],null);
  procStore.insert(procs[2],null);
  procStore.insert(procs[3],null);
  procStore.delete(procs[0],null);
  procStore.rollWriterForTesting();
  procStore.delete(procs[2],null);
  procStore.update(procs[3]);
  procStore.insert(procs[4],null);
  procStore.rollWriterForTesting();
  procStore.delete(procs[4],null);
  procStore.insert(procs[5],null);
  procStore.stop(false);
  final FileStatus[] logs=fs.listStatus(logDir);
  assertEquals(3,logs.length);
  for (int i=0; i < logs.length; ++i) {
    corruptLog(logs[i],4);
  }
  final LoadCounter loader=new LoadCounter();
  storeRestart(loader);
  assertEquals(3,loader.getLoadedCount());
  assertEquals(0,loader.getCorruptedCount());
  final ArrayList<ProcedureWALFile> walFiles=procStore.getActiveLogs();
  assertEquals(4,walFiles.size());
  LOG.info("Checking wal " + walFiles.get(0));
  assertUpdated(walFiles.get(0).getTracker(),procs,new int[]{0,1,2,3},new int[]{4,5});
  LOG.info("Checking wal " + walFiles.get(1));
  assertUpdated(walFiles.get(1).getTracker(),procs,new int[]{2,3,4},new int[]{0,1,5});
  LOG.info("Checking wal " + walFiles.get(2));
  assertUpdated(walFiles.get(2).getTracker(),procs,new int[]{4,5},new int[]{0,1,2,3});
  LOG.info("Checking global tracker ");
  assertDeleted(procStore.getStoreTracker(),procs,new int[]{0,2,4},new int[]{1,3,5});
}
