{
  TestProcedure[] rootProcs=new TestProcedure[10];
  for (int i=1; i <= rootProcs.length; i++) {
    rootProcs[i - 1]=new TestProcedure(i,0);
    procStore.insert(rootProcs[i - 1],null);
    rootProcs[i - 1].addStackId(0);
    procStore.update(rootProcs[i - 1]);
  }
  procStore.rollWriter();
  for (int i=1; i <= rootProcs.length; i++) {
    TestProcedure b=new TestProcedure(rootProcs.length + i,i);
    rootProcs[i - 1].addStackId(1);
    procStore.insert(rootProcs[i - 1],new Procedure[]{b});
  }
  procStore.rollWriter();
  for (int i=1; i <= rootProcs.length; i++) {
    procStore.update(new TestProcedure(rootProcs.length + i,i));
  }
  procStore.stop(false);
  FileStatus[] logs=fs.listStatus(logDir);
  assertEquals(3,logs.length);
  Arrays.sort(logs,new Comparator<FileStatus>(){
    @Override public int compare(    FileStatus o1,    FileStatus o2){
      return o1.getPath().getName().compareTo(o2.getPath().getName());
    }
  }
);
  fs.delete(logs[0].getPath(),false);
  LoadCounter loader=new LoadCounter();
  storeRestart(loader);
  assertEquals(rootProcs.length * 2,loader.getLoadedCount());
  assertEquals(0,loader.getCorruptedCount());
  fs.delete(logs[1].getPath(),false);
  loader.reset();
  storeRestart(loader);
  assertEquals(0,loader.getLoadedCount());
  assertEquals(rootProcs.length,loader.getCorruptedCount());
  for (  Procedure proc : loader.getCorrupted()) {
    assertTrue(proc.toString(),proc.getParentProcId() <= rootProcs.length);
    assertTrue(proc.toString(),proc.getProcId() > rootProcs.length && proc.getProcId() <= (rootProcs.length * 2));
  }
}
