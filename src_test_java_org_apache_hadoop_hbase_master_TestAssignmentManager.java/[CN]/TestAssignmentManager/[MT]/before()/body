{
  this.server=Mockito.mock(Server.class);
  Mockito.when(server.getConfiguration()).thenReturn(HTU.getConfiguration());
  this.watcher=new ZooKeeperWatcher(HTU.getConfiguration(),"mockedServer",this.server,true);
  Mockito.when(server.getZooKeeper()).thenReturn(this.watcher);
  Mockito.doThrow(new RuntimeException("Aborted")).when(server).abort(Mockito.anyString(),(Throwable)Mockito.anyObject());
  this.serverManager=Mockito.mock(ServerManager.class);
  Mockito.when(this.serverManager.isServerOnline(SERVERNAME_A)).thenReturn(true);
  Mockito.when(this.serverManager.isServerOnline(SERVERNAME_B)).thenReturn(true);
  final List<ServerName> onlineServers=new ArrayList<ServerName>();
  onlineServers.add(SERVERNAME_B);
  onlineServers.add(SERVERNAME_A);
  Mockito.when(this.serverManager.getOnlineServersList()).thenReturn(onlineServers);
  Mockito.when(this.serverManager.sendRegionClose(SERVERNAME_A,REGIONINFO,-1)).thenReturn(true);
  Mockito.when(this.serverManager.sendRegionClose(SERVERNAME_B,REGIONINFO,-1)).thenReturn(true);
  Mockito.when(this.serverManager.sendRegionOpen(SERVERNAME_A,REGIONINFO,-1)).thenReturn(RegionOpeningState.OPENED);
  Mockito.when(this.serverManager.sendRegionOpen(SERVERNAME_B,REGIONINFO,-1)).thenReturn(RegionOpeningState.OPENED);
}
