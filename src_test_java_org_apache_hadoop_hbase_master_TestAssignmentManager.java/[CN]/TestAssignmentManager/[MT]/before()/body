{
  this.server=Mockito.mock(Server.class);
  Mockito.when(server.getServerName()).thenReturn(new ServerName("master,1,1"));
  Mockito.when(server.getConfiguration()).thenReturn(HTU.getConfiguration());
  this.watcher=new ZooKeeperWatcher(HTU.getConfiguration(),"mockedServer",this.server,true);
  Mockito.when(server.getZooKeeper()).thenReturn(this.watcher);
  Mockito.doThrow(new RuntimeException("Aborted")).when(server).abort(Mockito.anyString(),(Throwable)Mockito.anyObject());
  this.serverManager=Mockito.mock(ServerManager.class);
  Mockito.when(this.serverManager.isServerOnline(SERVERNAME_A)).thenReturn(true);
  Mockito.when(this.serverManager.isServerOnline(SERVERNAME_B)).thenReturn(true);
  final Map<ServerName,HServerLoad> onlineServers=new HashMap<ServerName,HServerLoad>();
  onlineServers.put(SERVERNAME_B,new HServerLoad());
  onlineServers.put(SERVERNAME_A,new HServerLoad());
  Mockito.when(this.serverManager.getOnlineServersList()).thenReturn(new ArrayList<ServerName>(onlineServers.keySet()));
  Mockito.when(this.serverManager.getOnlineServers()).thenReturn(onlineServers);
  Mockito.when(this.serverManager.sendRegionClose(SERVERNAME_A,REGIONINFO,-1)).thenReturn(true);
  Mockito.when(this.serverManager.sendRegionClose(SERVERNAME_B,REGIONINFO,-1)).thenReturn(true);
  Mockito.when(this.serverManager.sendRegionOpen(SERVERNAME_A,REGIONINFO,-1)).thenReturn(RegionOpeningState.OPENED);
  Mockito.when(this.serverManager.sendRegionOpen(SERVERNAME_B,REGIONINFO,-1)).thenReturn(RegionOpeningState.OPENED);
}
