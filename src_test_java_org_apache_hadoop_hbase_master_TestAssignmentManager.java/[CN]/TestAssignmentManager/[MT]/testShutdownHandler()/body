{
  ExecutorService executor=startupMasterExecutor("testShutdownHandler");
  CatalogTracker ct=Mockito.mock(CatalogTracker.class);
  LoadBalancer balancer=LoadBalancerFactory.getLoadBalancer(server.getConfiguration());
  AssignmentManager am=new AssignmentManager(this.server,this.serverManager,ct,balancer,executor,null);
  try {
    this.watcher.registerListenerFirst(am);
    ClientProtocol implementation=Mockito.mock(ClientProtocol.class);
    Result r=Mocking.getMetaTableRowResult(REGIONINFO,SERVERNAME_A);
    ScanResponse.Builder builder=ScanResponse.newBuilder();
    builder.setMoreResults(false);
    builder.addResult(ProtobufUtil.toResult(r));
    Mockito.when(implementation.scan((RpcController)Mockito.any(),(ScanRequest)Mockito.any())).thenReturn(builder.build());
    HConnection connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(HTU.getConfiguration(),null,implementation,SERVERNAME_B,REGIONINFO);
    Mockito.when(ct.getConnection()).thenReturn(connection);
    Mockito.when(this.server.getCatalogTracker()).thenReturn(ct);
    DeadServer deadServers=new DeadServer();
    deadServers.add(SERVERNAME_A);
    MasterServices services=Mockito.mock(MasterServices.class);
    Mockito.when(services.getAssignmentManager()).thenReturn(am);
    ServerShutdownHandler handler=new ServerShutdownHandler(this.server,services,deadServers,SERVERNAME_A,false);
    handler.process();
  }
  finally {
    executor.shutdown();
    am.shutdown();
    ZKAssign.deleteAllNodes(this.watcher);
  }
}
