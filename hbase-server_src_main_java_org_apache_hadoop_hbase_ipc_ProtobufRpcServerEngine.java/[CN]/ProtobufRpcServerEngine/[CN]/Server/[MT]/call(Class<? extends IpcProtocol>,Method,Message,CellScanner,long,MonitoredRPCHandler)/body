{
  try {
    if (verbose) {
      LOG.info("callId: " + CurCall.get().id + " protocol: "+ protocol.getName()+ " method: "+ method.getName());
    }
    status.setRPC(method.getName(),new Object[]{param},receiveTime);
    status.setRPCPacket(param);
    status.resume("Servicing call");
    Message result;
    Object impl=null;
    if (protocol.isAssignableFrom(this.implementation)) {
      impl=this.instance;
    }
 else {
      throw new UnknownProtocolException(protocol);
    }
    PayloadCarryingRpcController controller=null;
    long startTime=System.currentTimeMillis();
    if (method.getParameterTypes().length == 2) {
      controller=new PayloadCarryingRpcController(cellScanner);
      result=(Message)method.invoke(impl,controller,param);
    }
 else {
      throw new ServiceException("Wrong number of parameters for method: [" + method.getName() + "]"+ ", wanted: 2, actual: "+ method.getParameterTypes().length);
    }
    int processingTime=(int)(System.currentTimeMillis() - startTime);
    int qTime=(int)(startTime - receiveTime);
    if (LOG.isTraceEnabled()) {
      LOG.trace(CurCall.get().toString() + " response: " + TextFormat.shortDebugString(result)+ " served: "+ protocol.getSimpleName()+ " queueTime: "+ qTime+ " processingTime: "+ processingTime);
    }
    metrics.dequeuedCall(qTime);
    metrics.processedCall(processingTime);
    if (verbose) {
      log("Return " + TextFormat.shortDebugString(result),LOG);
    }
    long responseSize=result.getSerializedSize();
    boolean tooSlow=(processingTime > warnResponseTime && warnResponseTime > -1);
    boolean tooLarge=(responseSize > warnResponseSize && warnResponseSize > -1);
    if (tooSlow || tooLarge) {
      StringBuilder buffer=new StringBuilder(256);
      buffer.append(method.getName());
      buffer.append("(");
      buffer.append(param.getClass().getName());
      buffer.append(")");
      logResponse(new Object[]{param},method.getName(),buffer.toString(),(tooLarge ? "TooLarge" : "TooSlow"),status.getClient(),startTime,processingTime,qTime,responseSize);
    }
    return new Pair<Message,CellScanner>(result,controller != null ? controller.cellScanner() : null);
  }
 catch (  InvocationTargetException e) {
    Throwable target=e.getTargetException();
    if (target instanceof IOException) {
      throw (IOException)target;
    }
    if (target instanceof ServiceException) {
      throw ProtobufUtil.getRemoteException((ServiceException)target);
    }
    IOException ioe=new IOException(target.toString());
    ioe.setStackTrace(target.getStackTrace());
    throw ioe;
  }
catch (  Throwable e) {
    if (!(e instanceof IOException)) {
      LOG.error("Unexpected throwable object ",e);
    }
    IOException ioe=new IOException(e.toString());
    ioe.setStackTrace(e.getStackTrace());
    throw ioe;
  }
}
