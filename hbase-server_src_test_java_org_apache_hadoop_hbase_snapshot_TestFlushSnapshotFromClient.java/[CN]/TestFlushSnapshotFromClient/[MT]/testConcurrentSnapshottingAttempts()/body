{
  final TableName TABLE2_NAME=TableName.valueOf(TABLE_NAME + "2");
  int ssNum=20;
  SnapshotTestingUtils.assertNoSnapshots(admin);
  SnapshotTestingUtils.createTable(UTIL,TABLE2_NAME,TEST_FAM);
  SnapshotTestingUtils.loadData(UTIL,TABLE_NAME,DEFAULT_NUM_ROWS,TEST_FAM);
  SnapshotTestingUtils.loadData(UTIL,TABLE2_NAME,DEFAULT_NUM_ROWS,TEST_FAM);
  final CountDownLatch toBeSubmitted=new CountDownLatch(ssNum);
class SSRunnable implements Runnable {
    SnapshotDescription ss;
    SSRunnable(    SnapshotDescription ss){
      this.ss=ss;
    }
    @Override public void run(){
      try {
        LOG.info("Submitting snapshot request: " + ClientSnapshotDescriptionUtils.toString(ProtobufUtil.createHBaseProtosSnapshotDesc(ss)));
        admin.takeSnapshotAsync(ss);
      }
 catch (      Exception e) {
        LOG.info("Exception during snapshot request: " + ClientSnapshotDescriptionUtils.toString(ProtobufUtil.createHBaseProtosSnapshotDesc(ss)) + ".  This is ok, we expect some",e);
      }
      LOG.info("Submitted snapshot request: " + ClientSnapshotDescriptionUtils.toString(ProtobufUtil.createHBaseProtosSnapshotDesc(ss)));
      toBeSubmitted.countDown();
    }
  }
  ;
  SnapshotDescription[] descs=new SnapshotDescription[ssNum];
  for (int i=0; i < ssNum; i++) {
    HBaseProtos.SnapshotDescription.Builder builder=HBaseProtos.SnapshotDescription.newBuilder();
    if (i % 2 == 0) {
      descs[i]=new SnapshotDescription("ss" + i,TABLE_NAME.getNameAsString(),ProtobufUtil.createSnapshotType(HBaseProtos.SnapshotDescription.Type.FLUSH));
    }
 else {
      descs[i]=new SnapshotDescription("ss" + i,TABLE2_NAME.getNameAsString(),ProtobufUtil.createSnapshotType(HBaseProtos.SnapshotDescription.Type.FLUSH));
    }
  }
  for (int i=0; i < ssNum; i++) {
    new Thread(new SSRunnable(descs[i])).start();
  }
  toBeSubmitted.await();
  while (true) {
    int doneCount=0;
    for (    SnapshotDescription ss : descs) {
      try {
        if (admin.isSnapshotFinished(ss)) {
          doneCount++;
        }
      }
 catch (      Exception e) {
        LOG.warn("Got an exception when checking for snapshot " + ss.getName(),e);
        doneCount++;
      }
    }
    if (doneCount == descs.length) {
      break;
    }
    Thread.sleep(100);
  }
  UTIL.getHBaseCluster().getMaster().getMasterFileSystem().logFileSystemState(LOG);
  List<SnapshotDescription> taken=admin.listSnapshots();
  int takenSize=taken.size();
  LOG.info("Taken " + takenSize + " snapshots:  "+ taken);
  assertTrue("We expect at least 1 request to be rejected because of we concurrently" + " issued many requests",takenSize < ssNum && takenSize > 0);
  int t1SnapshotsCount=0;
  int t2SnapshotsCount=0;
  for (  SnapshotDescription ss : taken) {
    if (TableName.valueOf(ss.getTable()).equals(TABLE_NAME)) {
      t1SnapshotsCount++;
    }
 else     if (TableName.valueOf(ss.getTable()).equals(TABLE2_NAME)) {
      t2SnapshotsCount++;
    }
  }
  assertTrue("We expect at least 1 snapshot of table1 ",t1SnapshotsCount > 0);
  assertTrue("We expect at least 1 snapshot of table2 ",t2SnapshotsCount > 0);
  UTIL.deleteTable(TABLE2_NAME);
}
