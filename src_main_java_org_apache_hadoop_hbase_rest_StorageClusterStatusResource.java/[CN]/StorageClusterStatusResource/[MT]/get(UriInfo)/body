{
  if (LOG.isDebugEnabled()) {
    LOG.debug("GET " + uriInfo.getAbsolutePath());
  }
  servlet.getMetrics().incrementRequests(1);
  try {
    HBaseAdmin admin=new HBaseAdmin(servlet.getConfiguration());
    ClusterStatus status=admin.getClusterStatus();
    StorageClusterStatusModel model=new StorageClusterStatusModel();
    model.setRegions(status.getRegionsCount());
    model.setRequests(status.getRequestsCount());
    model.setAverageLoad(status.getAverageLoad());
    for (    ServerName info : status.getServers()) {
      HServerLoad load=status.getLoad(info);
      StorageClusterStatusModel.Node node=model.addLiveNode(info.getHostname() + ":" + Integer.toString(info.getPort()),info.getStartcode(),load.getUsedHeapMB(),load.getMaxHeapMB());
      node.setRequests(load.getNumberOfRequests());
      for (      HServerLoad.RegionLoad region : load.getRegionsLoad().values()) {
        node.addRegion(region.getName(),region.getStores(),region.getStorefiles(),region.getStorefileSizeMB(),region.getMemStoreSizeMB(),region.getStorefileIndexSizeMB());
      }
    }
    for (    ServerName name : status.getDeadServerNames()) {
      model.addDeadNode(name.toString());
    }
    ResponseBuilder response=Response.ok(model);
    response.cacheControl(cacheControl);
    return response.build();
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.SERVICE_UNAVAILABLE);
  }
}
