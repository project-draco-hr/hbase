{
  try {
    return in.next();
  }
 catch (  EOFException eof) {
    LOG.info("EOF from hlog " + path + ".  continuing");
    return null;
  }
catch (  IOException e) {
    if (e.getCause() instanceof ParseException) {
      LOG.warn("ParseException from hlog " + path + ".  continuing");
      return null;
    }
    if (!skipErrors) {
      throw e;
    }
    CorruptedLogFileException t=new CorruptedLogFileException("skipErrors=true Ignoring exception" + " while parsing hlog " + path + ". Marking as corrupted");
    t.initCause(e);
    throw t;
  }
}
