{
  String actualSeparator=conf.get(SEPARATOR_CONF_KEY);
  if (actualSeparator != null) {
    conf.set(SEPARATOR_CONF_KEY,Base64.encodeBytes(actualSeparator.getBytes()));
  }
  String mapperClassName=conf.get(MAPPER_CONF_KEY);
  Class mapperClass=mapperClassName != null ? Class.forName(mapperClassName) : DEFAULT_MAPPER;
  String tableName=args[0];
  Path inputDir=new Path(args[1]);
  Job job=new Job(conf,NAME + "_" + tableName);
  job.setJarByClass(mapperClass);
  FileInputFormat.setInputPaths(job,inputDir);
  job.setInputFormatClass(TextInputFormat.class);
  job.setMapperClass(mapperClass);
  String hfileOutPath=conf.get(BULK_OUTPUT_CONF_KEY);
  if (hfileOutPath != null) {
    if (!doesTableExist(tableName)) {
      createTable(conf,tableName);
    }
    HTable table=new HTable(conf,tableName);
    job.setReducerClass(PutSortReducer.class);
    Path outputDir=new Path(hfileOutPath);
    FileOutputFormat.setOutputPath(job,outputDir);
    job.setMapOutputKeyClass(ImmutableBytesWritable.class);
    job.setMapOutputValueClass(Put.class);
    HFileOutputFormat.configureIncrementalLoad(job,table);
  }
 else {
    TableMapReduceUtil.initTableReducerJob(tableName,null,job);
    job.setNumReduceTasks(0);
  }
  TableMapReduceUtil.addDependencyJars(job);
  TableMapReduceUtil.addDependencyJars(job.getConfiguration(),com.google.common.base.Function.class);
  return job;
}
