{
  try {
    return table.coprocessorService(SecureBulkLoadProtos.SecureBulkLoadService.class,startRow,startRow,new Batch.Call<SecureBulkLoadProtos.SecureBulkLoadService,Boolean>(){
      @Override public Boolean call(      SecureBulkLoadProtos.SecureBulkLoadService instance) throws IOException {
        SecureBulkLoadProtos.DelegationTokenProto protoDT=SecureBulkLoadProtos.DelegationTokenProto.newBuilder().build();
        if (userToken != null) {
          protoDT=SecureBulkLoadProtos.DelegationTokenProto.newBuilder().setIdentifier(ByteString.copyFrom(userToken.getIdentifier())).setPassword(ByteString.copyFrom(userToken.getPassword())).setKind(userToken.getKind().toString()).setService(userToken.getService().toString()).build();
        }
        List<ClientProtos.BulkLoadHFileRequest.FamilyPath> protoFamilyPaths=new ArrayList<ClientProtos.BulkLoadHFileRequest.FamilyPath>();
        for (        Pair<byte[],String> el : familyPaths) {
          protoFamilyPaths.add(ClientProtos.BulkLoadHFileRequest.FamilyPath.newBuilder().setFamily(ByteString.copyFrom(el.getFirst())).setPath(el.getSecond()).build());
        }
        SecureBulkLoadProtos.SecureBulkLoadHFilesRequest request=SecureBulkLoadProtos.SecureBulkLoadHFilesRequest.newBuilder().setFsToken(protoDT).addAllFamilyPath(protoFamilyPaths).setBulkToken(bulkToken).build();
        ServerRpcController controller=new ServerRpcController();
        BlockingRpcCallback<SecureBulkLoadProtos.SecureBulkLoadHFilesResponse> rpcCallback=new BlockingRpcCallback<SecureBulkLoadProtos.SecureBulkLoadHFilesResponse>();
        instance.secureBulkLoadHFiles(controller,request,rpcCallback);
        SecureBulkLoadProtos.SecureBulkLoadHFilesResponse response=rpcCallback.get();
        if (controller.failedOnException()) {
          throw controller.getFailedOn();
        }
        return response.getLoaded();
      }
    }
).entrySet().iterator().next().getValue();
  }
 catch (  Throwable throwable) {
    throw new IOException(throwable);
  }
}
