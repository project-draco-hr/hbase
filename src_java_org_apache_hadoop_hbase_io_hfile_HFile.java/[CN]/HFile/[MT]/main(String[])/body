{
  if (args.length < 1) {
    System.out.println("usage: <filename> -- dumps hfile stats");
    return;
  }
  HBaseConfiguration conf=new HBaseConfiguration();
  FileSystem fs=FileSystem.get(conf);
  Path path=new Path(args[0]);
  if (!fs.exists(path)) {
    System.out.println("File doesnt exist: " + path);
    return;
  }
  HFile.Reader reader=new HFile.Reader(fs,path,null);
  Map<byte[],byte[]> fileInfo=reader.loadFileInfo();
  HFileScanner scanner=reader.getScanner();
  scanner.seekTo();
  KeyValue kv;
  do {
    kv=scanner.getKeyValue();
    System.out.println("K: " + Bytes.toStringBinary(kv.getKey()) + " V: "+ Bytes.toStringBinary(kv.getValue()));
  }
 while (scanner.next());
  System.out.println("Block index size as per heapsize: " + reader.indexSize());
  System.out.println(reader.toString());
  System.out.println(reader.getTrailerInfo());
  System.out.println("Fileinfo:");
  for (  Map.Entry<byte[],byte[]> e : fileInfo.entrySet()) {
    System.out.print(Bytes.toString(e.getKey()) + " = ");
    if (Bytes.compareTo(e.getKey(),Bytes.toBytes("MAX_SEQ_ID_KEY")) == 0) {
      long seqid=Bytes.toLong(e.getValue());
      System.out.println(seqid);
    }
 else {
      System.out.println(Bytes.toStringBinary(e.getValue()));
    }
  }
  reader.close();
}
