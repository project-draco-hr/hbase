{
  if (this.outputStream == null) {
    return;
  }
  finishBlock();
  FixedFileTrailer trailer=new FixedFileTrailer();
  ArrayList<Long> metaOffsets=null;
  ArrayList<Integer> metaDataSizes=null;
  if (metaNames.size() > 0) {
    metaOffsets=new ArrayList<Long>(metaNames.size());
    metaDataSizes=new ArrayList<Integer>(metaNames.size());
    for (int i=0; i < metaNames.size(); ++i) {
      metaOffsets.add(Long.valueOf(outputStream.getPos()));
      metaDataSizes.add(Integer.valueOf(METABLOCKMAGIC.length + metaData.get(i).length));
      writeMetaBlock(metaData.get(i));
    }
  }
  trailer.fileinfoOffset=writeFileInfo(this.outputStream);
  trailer.dataIndexOffset=BlockIndex.writeIndex(this.outputStream,this.blockKeys,this.blockOffsets,this.blockDataSizes);
  if (metaNames.size() > 0) {
    trailer.metaIndexOffset=BlockIndex.writeIndex(this.outputStream,this.metaNames,metaOffsets,metaDataSizes);
  }
  trailer.dataIndexCount=blockKeys.size();
  trailer.metaIndexCount=metaNames.size();
  trailer.totalUncompressedBytes=totalBytes;
  trailer.entryCount=entryCount;
  trailer.compressionCodec=this.compressAlgo.ordinal();
  trailer.serialize(outputStream);
  if (this.closeOutputStream) {
    this.outputStream.close();
    this.outputStream=null;
  }
}
