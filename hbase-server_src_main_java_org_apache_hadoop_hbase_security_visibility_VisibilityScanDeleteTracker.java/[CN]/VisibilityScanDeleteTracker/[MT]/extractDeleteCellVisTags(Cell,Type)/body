{
  boolean hasVisTag=false;
  if (delCell.getTagsLength() > 0) {
    Byte deleteCellVisTagsFormat=null;
switch (type) {
case DeleteFamily:
      List<Tag> delTags=new ArrayList<Tag>();
    if (visibilityTagsDeleteFamily == null) {
      visibilityTagsDeleteFamily=new ArrayList<Triple<List<Tag>,Byte,Long>>();
    }
  deleteCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
  visibilityTagsDeleteFamily.add(new Triple<List<Tag>,Byte,Long>(delTags,deleteCellVisTagsFormat,delCell.getTimestamp()));
  hasVisTag=true;
}
break;
case DeleteFamilyVersion:
if (visibilityTagsDeleteFamilyVersion == null) {
visibilityTagsDeleteFamilyVersion=new ArrayList<Triple<List<Tag>,Byte,Long>>();
}
delTags=new ArrayList<Tag>();
deleteCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
visibilityTagsDeleteFamilyVersion.add(new Triple<List<Tag>,Byte,Long>(delTags,deleteCellVisTagsFormat,delCell.getTimestamp()));
hasVisTag=true;
}
break;
case DeleteColumn:
if (visibilityTagsDeleteColumns == null) {
visibilityTagsDeleteColumns=new ArrayList<Pair<List<Tag>,Byte>>();
}
delTags=new ArrayList<Tag>();
deleteCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
visibilityTagsDeleteColumns.add(new Pair<List<Tag>,Byte>(delTags,deleteCellVisTagsFormat));
hasVisTag=true;
}
break;
case Delete:
if (visiblityTagsDeleteColumnVersion == null) {
visiblityTagsDeleteColumnVersion=new ArrayList<Pair<List<Tag>,Byte>>();
}
delTags=new ArrayList<Tag>();
deleteCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
visiblityTagsDeleteColumnVersion.add(new Pair<List<Tag>,Byte>(delTags,deleteCellVisTagsFormat));
hasVisTag=true;
}
break;
default :
throw new IllegalArgumentException("Invalid delete type");
}
}
return hasVisTag;
}
