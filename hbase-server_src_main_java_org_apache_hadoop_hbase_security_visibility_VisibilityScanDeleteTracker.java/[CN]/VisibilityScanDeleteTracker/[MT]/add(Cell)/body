{
  long timestamp=delCell.getTimestamp();
  int qualifierOffset=delCell.getQualifierOffset();
  int qualifierLength=delCell.getQualifierLength();
  byte type=delCell.getTypeByte();
  if (type == KeyValue.Type.DeleteFamily.getCode()) {
    hasFamilyStamp=true;
    boolean hasVisTag=extractDeleteCellVisTags(delCell,KeyValue.Type.DeleteFamily);
    if (!hasVisTag && timestamp > familyStamp) {
      familyStamp=timestamp;
    }
    return;
  }
 else   if (type == KeyValue.Type.DeleteFamilyVersion.getCode()) {
    familyVersionStamps.add(timestamp);
    extractDeleteCellVisTags(delCell,KeyValue.Type.DeleteFamilyVersion);
    return;
  }
  if (deleteBuffer != null) {
    if (Bytes.compareTo(deleteBuffer,deleteOffset,deleteLength,delCell.getQualifierArray(),qualifierOffset,qualifierLength) != 0) {
      visibilityTagsDeleteColumns=null;
      visiblityTagsDeleteColumnVersion=null;
    }
 else     if (type == KeyValue.Type.Delete.getCode() && (deleteTimestamp != timestamp)) {
      visiblityTagsDeleteColumnVersion=null;
    }
  }
  deleteBuffer=delCell.getQualifierArray();
  deleteOffset=qualifierOffset;
  deleteLength=qualifierLength;
  deleteType=type;
  deleteTimestamp=timestamp;
  extractDeleteCellVisTags(delCell,KeyValue.Type.codeToType(type));
}
