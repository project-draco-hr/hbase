{
  long timestamp=cell.getTimestamp();
  int qualifierOffset=cell.getQualifierOffset();
  int qualifierLength=cell.getQualifierLength();
  if (hasFamilyStamp) {
    if (visibilityTagsDeleteFamily != null) {
      Set<Entry<Long,List<Tag>>> deleteFamilies=visibilityTagsDeleteFamily.entrySet();
      Iterator<Entry<Long,List<Tag>>> iterator=deleteFamilies.iterator();
      while (iterator.hasNext()) {
        Entry<Long,List<Tag>> entry=iterator.next();
        if (timestamp <= entry.getKey()) {
          boolean matchFound=VisibilityUtils.checkForMatchingVisibilityTags(cell,entry.getValue());
          if (matchFound) {
            return DeleteResult.FAMILY_VERSION_DELETED;
          }
        }
      }
    }
 else {
      if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
        return DeleteResult.FAMILY_VERSION_DELETED;
      }
    }
  }
  if (familyVersionStamps.contains(Long.valueOf(timestamp))) {
    if (visibilityTagsDeleteFamilyVersion != null) {
      List<Tag> tags=visibilityTagsDeleteFamilyVersion.get(Long.valueOf(timestamp));
      if (tags != null) {
        boolean matchFound=VisibilityUtils.checkForMatchingVisibilityTags(cell,tags);
        if (matchFound) {
          return DeleteResult.FAMILY_VERSION_DELETED;
        }
      }
    }
 else {
      if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
        return DeleteResult.FAMILY_VERSION_DELETED;
      }
    }
  }
  if (deleteBuffer != null) {
    int ret=Bytes.compareTo(deleteBuffer,deleteOffset,deleteLength,cell.getQualifierArray(),qualifierOffset,qualifierLength);
    if (ret == 0) {
      if (deleteType == KeyValue.Type.DeleteColumn.getCode()) {
        if (visibilityTagsDeleteColumns != null) {
          for (          List<Tag> tags : visibilityTagsDeleteColumns) {
            boolean matchFound=VisibilityUtils.checkForMatchingVisibilityTags(cell,tags);
            if (matchFound) {
              return DeleteResult.VERSION_DELETED;
            }
          }
        }
 else {
          if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
            return DeleteResult.VERSION_DELETED;
          }
        }
      }
      if (timestamp == deleteTimestamp) {
        if (visiblityTagsDeleteColumnVersion != null) {
          for (          List<Tag> tags : visiblityTagsDeleteColumnVersion) {
            boolean matchFound=VisibilityUtils.checkForMatchingVisibilityTags(cell,tags);
            if (matchFound) {
              return DeleteResult.VERSION_DELETED;
            }
          }
        }
 else {
          if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
            return DeleteResult.VERSION_DELETED;
          }
        }
      }
    }
 else     if (ret < 0) {
      deleteBuffer=null;
      visibilityTagsDeleteColumns=null;
      visiblityTagsDeleteColumnVersion=null;
    }
 else {
      throw new IllegalStateException("isDeleted failed: deleteBuffer=" + Bytes.toStringBinary(deleteBuffer,deleteOffset,deleteLength) + ", qualifier="+ Bytes.toStringBinary(cell.getQualifierArray(),qualifierOffset,qualifierLength)+ ", timestamp="+ timestamp+ ", comparison result: "+ ret);
    }
  }
  return DeleteResult.NOT_DELETED;
}
