{
  long timestamp=cell.getTimestamp();
  try {
    if (hasFamilyStamp) {
      if (visibilityTagsDeleteFamily != null) {
        if (!visibilityTagsDeleteFamily.isEmpty()) {
          for (int i=0; i < visibilityTagsDeleteFamily.size(); i++) {
            Triple<List<Tag>,Byte,Long> triple=visibilityTagsDeleteFamily.get(i);
            if (timestamp <= triple.getThird()) {
              List<Tag> putVisTags=new ArrayList<Tag>();
              Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
              boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,triple.getFirst(),triple.getSecond());
              if (matchFound) {
                return DeleteResult.FAMILY_VERSION_DELETED;
              }
            }
          }
        }
 else {
          if (!VisibilityUtils.isVisibilityTagsPresent(cell) && timestamp <= familyStamp) {
            return DeleteResult.FAMILY_VERSION_DELETED;
          }
        }
      }
 else {
        if (!VisibilityUtils.isVisibilityTagsPresent(cell) && timestamp <= familyStamp) {
          return DeleteResult.FAMILY_VERSION_DELETED;
        }
      }
    }
    if (familyVersionStamps.contains(Long.valueOf(timestamp))) {
      if (visibilityTagsDeleteFamilyVersion != null) {
        if (!visibilityTagsDeleteFamilyVersion.isEmpty()) {
          for (int i=0; i < visibilityTagsDeleteFamilyVersion.size(); i++) {
            Triple<List<Tag>,Byte,Long> triple=visibilityTagsDeleteFamilyVersion.get(i);
            if (timestamp == triple.getThird()) {
              List<Tag> putVisTags=new ArrayList<Tag>();
              Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
              boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,triple.getFirst(),triple.getSecond());
              if (matchFound) {
                return DeleteResult.FAMILY_VERSION_DELETED;
              }
            }
          }
        }
 else {
          if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
            return DeleteResult.FAMILY_VERSION_DELETED;
          }
        }
      }
 else {
        if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
          return DeleteResult.FAMILY_VERSION_DELETED;
        }
      }
    }
    if (deleteBuffer != null) {
      int ret=CellComparator.compareQualifiers(cell,deleteBuffer,deleteOffset,deleteLength);
      if (ret == 0) {
        if (deleteType == KeyValue.Type.DeleteColumn.getCode()) {
          if (visibilityTagsDeleteColumns != null) {
            if (!visibilityTagsDeleteColumns.isEmpty()) {
              for (              Pair<List<Tag>,Byte> tags : visibilityTagsDeleteColumns) {
                List<Tag> putVisTags=new ArrayList<Tag>();
                Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
                boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,tags.getFirst(),tags.getSecond());
                if (matchFound) {
                  return DeleteResult.VERSION_DELETED;
                }
              }
            }
 else {
              if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
                return DeleteResult.VERSION_DELETED;
              }
            }
          }
 else {
            if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
              return DeleteResult.VERSION_DELETED;
            }
          }
        }
        if (timestamp == deleteTimestamp) {
          if (visiblityTagsDeleteColumnVersion != null) {
            if (!visiblityTagsDeleteColumnVersion.isEmpty()) {
              for (              Pair<List<Tag>,Byte> tags : visiblityTagsDeleteColumnVersion) {
                List<Tag> putVisTags=new ArrayList<Tag>();
                Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
                boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,tags.getFirst(),tags.getSecond());
                if (matchFound) {
                  return DeleteResult.VERSION_DELETED;
                }
              }
            }
 else {
              if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
                return DeleteResult.VERSION_DELETED;
              }
            }
          }
 else {
            if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
              return DeleteResult.VERSION_DELETED;
            }
          }
        }
      }
 else       if (ret > 0) {
        deleteBuffer=null;
        visibilityTagsDeleteColumns=null;
        visiblityTagsDeleteColumnVersion=null;
      }
 else {
        throw new IllegalStateException("isDeleted failed: deleteBuffer=" + Bytes.toStringBinary(deleteBuffer,deleteOffset,deleteLength) + ", qualifier="+ Bytes.toStringBinary(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength())+ ", timestamp="+ timestamp+ ", comparison result: "+ ret);
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Error in isDeleted() check! Will treat cell as not deleted",e);
  }
  return DeleteResult.NOT_DELETED;
}
