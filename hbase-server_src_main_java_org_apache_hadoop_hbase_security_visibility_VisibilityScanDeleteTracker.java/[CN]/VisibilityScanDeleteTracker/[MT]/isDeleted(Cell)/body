{
  long timestamp=cell.getTimestamp();
  int qualifierOffset=cell.getQualifierOffset();
  int qualifierLength=cell.getQualifierLength();
  try {
    if (hasFamilyStamp) {
      if (visibilityTagsDeleteFamily != null) {
        Set<Entry<Long,Pair<List<Tag>,Byte>>> deleteFamilies=visibilityTagsDeleteFamily.entrySet();
        Iterator<Entry<Long,Pair<List<Tag>,Byte>>> iterator=deleteFamilies.iterator();
        while (iterator.hasNext()) {
          Entry<Long,Pair<List<Tag>,Byte>> entry=iterator.next();
          if (timestamp <= entry.getKey()) {
            List<Tag> putVisTags=new ArrayList<Tag>();
            Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
            boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,entry.getValue().getFirst(),entry.getValue().getSecond());
            if (matchFound) {
              return DeleteResult.FAMILY_VERSION_DELETED;
            }
          }
        }
      }
 else {
        if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
          return DeleteResult.FAMILY_VERSION_DELETED;
        }
      }
    }
    if (familyVersionStamps.contains(Long.valueOf(timestamp))) {
      if (visibilityTagsDeleteFamilyVersion != null) {
        Pair<List<Tag>,Byte> tags=visibilityTagsDeleteFamilyVersion.get(Long.valueOf(timestamp));
        if (tags != null) {
          List<Tag> putVisTags=new ArrayList<Tag>();
          Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
          boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,tags.getFirst(),tags.getSecond());
          if (matchFound) {
            return DeleteResult.FAMILY_VERSION_DELETED;
          }
        }
      }
 else {
        if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
          return DeleteResult.FAMILY_VERSION_DELETED;
        }
      }
    }
    if (deleteBuffer != null) {
      int ret=Bytes.compareTo(deleteBuffer,deleteOffset,deleteLength,cell.getQualifierArray(),qualifierOffset,qualifierLength);
      if (ret == 0) {
        if (deleteType == KeyValue.Type.DeleteColumn.getCode()) {
          if (visibilityTagsDeleteColumns != null) {
            for (            Pair<List<Tag>,Byte> tags : visibilityTagsDeleteColumns) {
              List<Tag> putVisTags=new ArrayList<Tag>();
              Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
              boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,tags.getFirst(),tags.getSecond());
              if (matchFound) {
                return DeleteResult.VERSION_DELETED;
              }
            }
          }
 else {
            if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
              return DeleteResult.VERSION_DELETED;
            }
          }
        }
        if (timestamp == deleteTimestamp) {
          if (visiblityTagsDeleteColumnVersion != null) {
            for (            Pair<List<Tag>,Byte> tags : visiblityTagsDeleteColumnVersion) {
              List<Tag> putVisTags=new ArrayList<Tag>();
              Byte putCellVisTagsFormat=VisibilityUtils.extractVisibilityTags(cell,putVisTags);
              boolean matchFound=VisibilityLabelServiceManager.getInstance().getVisibilityLabelService().matchVisibility(putVisTags,putCellVisTagsFormat,tags.getFirst(),tags.getSecond());
              if (matchFound) {
                return DeleteResult.VERSION_DELETED;
              }
            }
          }
 else {
            if (!VisibilityUtils.isVisibilityTagsPresent(cell)) {
              return DeleteResult.VERSION_DELETED;
            }
          }
        }
      }
 else       if (ret < 0) {
        deleteBuffer=null;
        visibilityTagsDeleteColumns=null;
        visiblityTagsDeleteColumnVersion=null;
      }
 else {
        throw new IllegalStateException("isDeleted failed: deleteBuffer=" + Bytes.toStringBinary(deleteBuffer,deleteOffset,deleteLength) + ", qualifier="+ Bytes.toStringBinary(cell.getQualifierArray(),qualifierOffset,qualifierLength)+ ", timestamp="+ timestamp+ ", comparison result: "+ ret);
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Error in isDeleted() check! Will treat cell as not deleted",e);
  }
  return DeleteResult.NOT_DELETED;
}
