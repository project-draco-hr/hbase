{
  if (delCell.getTagsLength() > 0) {
switch (type) {
case DeleteFamily:
      List<Tag> delTags=new ArrayList<Tag>();
    if (visibilityTagsDeleteFamily != null) {
      VisibilityUtils.getVisibilityTags(delCell,delTags);
      if (!delTags.isEmpty()) {
        visibilityTagsDeleteFamily.put(delCell.getTimestamp(),delTags);
      }
    }
  break;
case DeleteFamilyVersion:
delTags=new ArrayList<Tag>();
VisibilityUtils.getVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
visibilityTagsDeleteFamilyVersion.put(delCell.getTimestamp(),delTags);
}
break;
case DeleteColumn:
if (visibilityTagsDeleteColumns == null) {
visibilityTagsDeleteColumns=new ArrayList<List<Tag>>();
}
delTags=new ArrayList<Tag>();
VisibilityUtils.getVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
visibilityTagsDeleteColumns.add(delTags);
}
break;
case Delete:
if (visiblityTagsDeleteColumnVersion == null) {
visiblityTagsDeleteColumnVersion=new ArrayList<List<Tag>>();
}
delTags=new ArrayList<Tag>();
VisibilityUtils.getVisibilityTags(delCell,delTags);
if (!delTags.isEmpty()) {
visiblityTagsDeleteColumnVersion.add(delTags);
}
break;
default :
throw new IllegalArgumentException("Invalid delete type");
}
}
 else {
switch (type) {
case DeleteFamily:
visibilityTagsDeleteFamily=null;
break;
case DeleteFamilyVersion:
visibilityTagsDeleteFamilyVersion=null;
break;
case DeleteColumn:
visibilityTagsDeleteColumns=null;
break;
case Delete:
visiblityTagsDeleteColumnVersion=null;
break;
default :
throw new IllegalArgumentException("Invalid delete type");
}
}
}
