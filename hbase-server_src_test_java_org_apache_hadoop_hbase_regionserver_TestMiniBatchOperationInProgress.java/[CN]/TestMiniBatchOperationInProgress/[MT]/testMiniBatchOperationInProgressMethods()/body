{
  Pair<Mutation,Integer>[] operations=new Pair[10];
  OperationStatus[] retCodeDetails=new OperationStatus[10];
  WALEdit[] walEditsFromCoprocessors=new WALEdit[10];
  for (int i=0; i < 10; i++) {
    operations[i]=new Pair<Mutation,Integer>(new Put(Bytes.toBytes(i)),null);
  }
  MiniBatchOperationInProgress<Pair<Mutation,Integer>> miniBatch=new MiniBatchOperationInProgress<Pair<Mutation,Integer>>(operations,retCodeDetails,walEditsFromCoprocessors,0,5);
  assertEquals(5,miniBatch.size());
  assertTrue(Bytes.equals(Bytes.toBytes(0),miniBatch.getOperation(0).getFirst().getRow()));
  assertTrue(Bytes.equals(Bytes.toBytes(2),miniBatch.getOperation(2).getFirst().getRow()));
  assertTrue(Bytes.equals(Bytes.toBytes(4),miniBatch.getOperation(4).getFirst().getRow()));
  try {
    miniBatch.getOperation(5);
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  miniBatch.setOperationStatus(1,OperationStatus.FAILURE);
  assertEquals(OperationStatus.FAILURE,retCodeDetails[1]);
  try {
    miniBatch.setOperationStatus(6,OperationStatus.FAILURE);
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    miniBatch.setWalEdit(5,new WALEdit());
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  miniBatch=new MiniBatchOperationInProgress<Pair<Mutation,Integer>>(operations,retCodeDetails,walEditsFromCoprocessors,7,10);
  try {
    miniBatch.setWalEdit(-1,new WALEdit());
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    miniBatch.getOperation(-1);
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    miniBatch.getOperation(3);
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    miniBatch.getOperationStatus(9);
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    miniBatch.setOperationStatus(3,OperationStatus.FAILURE);
    fail("Should throw Exception while accessing out of range");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  assertTrue(Bytes.equals(Bytes.toBytes(7),miniBatch.getOperation(0).getFirst().getRow()));
  assertTrue(Bytes.equals(Bytes.toBytes(9),miniBatch.getOperation(2).getFirst().getRow()));
  miniBatch.setOperationStatus(1,OperationStatus.SUCCESS);
  assertEquals(OperationStatus.SUCCESS,retCodeDetails[8]);
  WALEdit wal=new WALEdit();
  miniBatch.setWalEdit(0,wal);
  assertEquals(wal,walEditsFromCoprocessors[7]);
}
