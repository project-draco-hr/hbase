{
  final String nsp1=prefix + "_testStatePreserve";
  NamespaceDescriptor nspDesc=NamespaceDescriptor.create(nsp1).addConfiguration(TableNamespaceManager.KEY_MAX_REGIONS,"20").addConfiguration(TableNamespaceManager.KEY_MAX_TABLES,"10").build();
  ADMIN.createNamespace(nspDesc);
  TableName tableOne=TableName.valueOf(nsp1 + TableName.NAMESPACE_DELIM + "table1");
  TableName tableTwo=TableName.valueOf(nsp1 + TableName.NAMESPACE_DELIM + "table2");
  TableName tableThree=TableName.valueOf(nsp1 + TableName.NAMESPACE_DELIM + "table3");
  HTableDescriptor tableDescOne=new HTableDescriptor(tableOne);
  HTableDescriptor tableDescTwo=new HTableDescriptor(tableTwo);
  HTableDescriptor tableDescThree=new HTableDescriptor(tableThree);
  ADMIN.createTable(tableDescOne,Bytes.toBytes("1"),Bytes.toBytes("1000"),3);
  ADMIN.createTable(tableDescTwo,Bytes.toBytes("1"),Bytes.toBytes("1000"),3);
  ADMIN.createTable(tableDescThree,Bytes.toBytes("1"),Bytes.toBytes("1000"),4);
  ADMIN.disableTable(tableThree);
  ADMIN.deleteTable(tableThree);
  UTIL.waitFor(1000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return (getNamespaceState(nsp1).getTables().size() == 2);
    }
  }
);
  NamespaceTableAndRegionInfo before=getNamespaceState(nsp1);
  restartMaster();
  NamespaceTableAndRegionInfo after=getNamespaceState(nsp1);
  assertEquals("Expected: " + before.getTables() + " Found: "+ after.getTables(),before.getTables().size(),after.getTables().size());
}
