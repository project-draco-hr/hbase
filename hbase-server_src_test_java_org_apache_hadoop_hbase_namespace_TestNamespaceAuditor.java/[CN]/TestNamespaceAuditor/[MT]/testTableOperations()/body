{
  String nsp=prefix + "_np2";
  NamespaceDescriptor nspDesc=NamespaceDescriptor.create(nsp).addConfiguration(TableNamespaceManager.KEY_MAX_REGIONS,"5").addConfiguration(TableNamespaceManager.KEY_MAX_TABLES,"2").build();
  ADMIN.createNamespace(nspDesc);
  assertNotNull("Namespace descriptor found null.",ADMIN.getNamespaceDescriptor(nsp));
  assertEquals(ADMIN.listNamespaceDescriptors().length,3);
  HTableDescriptor tableDescOne=new HTableDescriptor(TableName.valueOf(nsp + TableName.NAMESPACE_DELIM + "table1"));
  HTableDescriptor tableDescTwo=new HTableDescriptor(TableName.valueOf(nsp + TableName.NAMESPACE_DELIM + "table2"));
  HTableDescriptor tableDescThree=new HTableDescriptor(TableName.valueOf(nsp + TableName.NAMESPACE_DELIM + "table3"));
  ADMIN.createTable(tableDescOne);
  boolean constraintViolated=false;
  try {
    ADMIN.createTable(tableDescTwo,Bytes.toBytes("AAA"),Bytes.toBytes("ZZZ"),5);
  }
 catch (  Exception exp) {
    assertTrue(exp instanceof IOException);
    constraintViolated=true;
  }
 finally {
    assertTrue("Constraint not violated for table " + tableDescTwo.getTableName(),constraintViolated);
  }
  ADMIN.createTable(tableDescTwo,Bytes.toBytes("AAA"),Bytes.toBytes("ZZZ"),4);
  NamespaceTableAndRegionInfo nspState=getQuotaManager().getState(nsp);
  assertNotNull(nspState);
  assertTrue(nspState.getTables().size() == 2);
  assertTrue(nspState.getRegionCount() == 5);
  constraintViolated=false;
  try {
    ADMIN.createTable(tableDescThree);
  }
 catch (  Exception exp) {
    assertTrue(exp instanceof IOException);
    constraintViolated=true;
  }
 finally {
    assertTrue("Constraint not violated for table " + tableDescThree.getTableName(),constraintViolated);
  }
}
