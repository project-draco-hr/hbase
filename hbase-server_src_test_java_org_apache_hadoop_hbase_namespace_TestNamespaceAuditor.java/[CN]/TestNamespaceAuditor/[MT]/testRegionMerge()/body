{
  String nsp1=prefix + "_regiontest";
  NamespaceDescriptor nspDesc=NamespaceDescriptor.create(nsp1).addConfiguration(TableNamespaceManager.KEY_MAX_REGIONS,"3").addConfiguration(TableNamespaceManager.KEY_MAX_TABLES,"2").build();
  ADMIN.createNamespace(nspDesc);
  final TableName tableTwo=TableName.valueOf(nsp1 + TableName.NAMESPACE_DELIM + "table2");
  byte[] columnFamily=Bytes.toBytes("info");
  HTableDescriptor tableDescOne=new HTableDescriptor(tableTwo);
  tableDescOne.addFamily(new HColumnDescriptor(columnFamily));
  final int initialRegions=3;
  ADMIN.createTable(tableDescOne,Bytes.toBytes("1"),Bytes.toBytes("2000"),initialRegions);
  Connection connection=ConnectionFactory.createConnection(UTIL.getConfiguration());
  try (Table table=connection.getTable(tableTwo)){
    UTIL.loadNumericRows(table,Bytes.toBytes("info"),1000,1999);
  }
   ADMIN.flush(tableTwo);
  List<HRegionInfo> hris=ADMIN.getTableRegions(tableTwo);
  Collections.sort(hris);
  final Set<String> encodedRegionNamesToMerge=Sets.newHashSet(hris.get(0).getEncodedName(),hris.get(1).getEncodedName());
  ADMIN.mergeRegionsAsync(hris.get(0).getEncodedNameAsBytes(),hris.get(1).getEncodedNameAsBytes(),false);
  UTIL.waitFor(10000,100,new Waiter.ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      RegionStates regionStates=UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionStates();
      for (      HRegionInfo hri : ADMIN.getTableRegions(tableTwo)) {
        if (encodedRegionNamesToMerge.contains(hri.getEncodedName())) {
          return false;
        }
        if (!regionStates.isRegionInState(hri,RegionState.State.OPEN)) {
          return false;
        }
      }
      return true;
    }
    @Override public String explainFailure() throws Exception {
      RegionStates regionStates=UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionStates();
      for (      HRegionInfo hri : ADMIN.getTableRegions(tableTwo)) {
        if (encodedRegionNamesToMerge.contains(hri.getEncodedName())) {
          return hri + " which is expected to be merged is still online";
        }
        if (!regionStates.isRegionInState(hri,RegionState.State.OPEN)) {
          return hri + " is still in not opened";
        }
      }
      return "Unknown";
    }
  }
);
  hris=ADMIN.getTableRegions(tableTwo);
  assertEquals(initialRegions - 1,hris.size());
  Collections.sort(hris);
  final HRegionInfo hriToSplit=hris.get(1);
  ADMIN.split(tableTwo,Bytes.toBytes("500"));
  UTIL.waitFor(10000,100,new Waiter.ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      RegionStates regionStates=UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionStates();
      for (      HRegionInfo hri : ADMIN.getTableRegions(tableTwo)) {
        if (hri.getEncodedName().equals(hriToSplit.getEncodedName())) {
          return false;
        }
        if (!regionStates.isRegionInState(hri,RegionState.State.OPEN)) {
          return false;
        }
      }
      return true;
    }
    @Override public String explainFailure() throws Exception {
      RegionStates regionStates=UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionStates();
      for (      HRegionInfo hri : ADMIN.getTableRegions(tableTwo)) {
        if (hri.getEncodedName().equals(hriToSplit.getEncodedName())) {
          return hriToSplit + " which is expected to be split is still online";
        }
        if (!regionStates.isRegionInState(hri,RegionState.State.OPEN)) {
          return hri + " is still in not opened";
        }
      }
      return "Unknown";
    }
  }
);
  hris=ADMIN.getTableRegions(tableTwo);
  assertEquals(initialRegions,hris.size());
  Collections.sort(hris);
  MiniHBaseCluster cluster=UTIL.getHBaseCluster();
  HRegionServer regionServer=cluster.getRegionServer(0);
  RegionServerCoprocessorHost cpHost=regionServer.getRegionServerCoprocessorHost();
  Coprocessor coprocessor=cpHost.findCoprocessor(CPRegionServerObserver.class.getName());
  CPRegionServerObserver regionServerObserver=(CPRegionServerObserver)coprocessor;
  regionServerObserver.failMerge(true);
  regionServerObserver.triggered=false;
  ADMIN.mergeRegionsAsync(hris.get(1).getEncodedNameAsBytes(),hris.get(2).getEncodedNameAsBytes(),false);
  regionServerObserver.waitUtilTriggered();
  hris=ADMIN.getTableRegions(tableTwo);
  assertEquals(initialRegions,hris.size());
  Collections.sort(hris);
  HRegionInfo hriToSplit2=hris.get(1);
  ADMIN.split(tableTwo,TableInputFormatBase.getSplitKey(hriToSplit2.getStartKey(),hriToSplit2.getEndKey(),true));
  Thread.sleep(2000);
  assertEquals(initialRegions,ADMIN.getTableRegions(tableTwo).size());
}
