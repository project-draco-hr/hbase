{
  createStoreFile(r);
  for (int i=0; i < compactionThreshold; i++) {
    createStoreFile(r);
  }
  HBaseTestCase.addContent(new RegionAsTable(r),Bytes.toString(COLUMN_FAMILY));
  Result result=r.get(new Get(STARTROW).addFamily(COLUMN_FAMILY_TEXT).setMaxVersions(100));
  assertEquals(compactionThreshold,result.size());
  for (  Store store : r.getStores()) {
    assertNull(store.getCompactionProgress());
  }
  r.flush(true);
  r.compact(true);
  int storeCount=0;
  for (  Store store : r.getStores()) {
    CompactionProgress progress=store.getCompactionProgress();
    if (progress != null) {
      ++storeCount;
      assertTrue(progress.currentCompactedKVs > 0);
      assertTrue(progress.totalCompactingKVs > 0);
    }
    assertTrue(storeCount > 0);
  }
  byte[] secondRowBytes=START_KEY_BYTES.clone();
  secondRowBytes[START_KEY_BYTES.length - 1]++;
  result=r.get(new Get(secondRowBytes).addFamily(COLUMN_FAMILY_TEXT).setMaxVersions(100));
  LOG.debug("Row " + Bytes.toStringBinary(secondRowBytes) + " after "+ "initial compaction: "+ result);
  assertEquals("Invalid number of versions of row " + Bytes.toStringBinary(secondRowBytes) + ".",compactionThreshold,result.size());
  LOG.debug("Adding deletes to memstore and flushing");
  Delete delete=new Delete(secondRowBytes,System.currentTimeMillis());
  byte[][] famAndQf={COLUMN_FAMILY,null};
  delete.deleteFamily(famAndQf[0]);
  r.delete(delete);
  result=r.get(new Get(secondRowBytes).addFamily(COLUMN_FAMILY_TEXT).setMaxVersions(100));
  assertTrue("Second row should have been deleted",result.isEmpty());
  r.flush(true);
  result=r.get(new Get(secondRowBytes).addFamily(COLUMN_FAMILY_TEXT).setMaxVersions(100));
  assertTrue("Second row should have been deleted",result.isEmpty());
  createSmallerStoreFile(this.r);
  r.flush(true);
  result=r.get(new Get(secondRowBytes).addFamily(COLUMN_FAMILY_TEXT).setMaxVersions(100));
  assertTrue("Second row should still be deleted",result.isEmpty());
  r.compact(true);
  assertEquals(r.getStore(COLUMN_FAMILY_TEXT).getStorefiles().size(),1);
  result=r.get(new Get(secondRowBytes).addFamily(COLUMN_FAMILY_TEXT).setMaxVersions(100));
  assertTrue("Second row should still be deleted",result.isEmpty());
  verifyCounts(3,0);
  final int ttl=1000;
  for (  Store hstore : r.getStores()) {
    HStore store=((HStore)hstore);
    ScanInfo old=store.getScanInfo();
    ScanInfo si=new ScanInfo(old.getFamily(),old.getMinVersions(),old.getMaxVersions(),ttl,old.getKeepDeletedCells(),0,old.getComparator());
    store.setScanInfo(si);
  }
  Thread.sleep(1000);
  r.compact(true);
  int count=count();
  assertEquals("Should not see anything after TTL has expired",0,count);
}
