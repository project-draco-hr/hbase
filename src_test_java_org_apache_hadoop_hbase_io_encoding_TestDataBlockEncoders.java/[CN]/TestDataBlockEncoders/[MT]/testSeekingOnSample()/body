{
  List<KeyValue> sampleKv=generator.generateTestKeyValues(NUMBER_OF_KV);
  ByteBuffer originalBuffer=RedundantKVGenerator.convertKvToByteBuffer(sampleKv,includesMemstoreTS);
  List<DataBlockEncoder> dataBlockEncoders=DataBlockEncodings.getAllEncoders();
  List<DataBlockEncoder.EncodedSeeker> encodedSeekers=new ArrayList<DataBlockEncoder.EncodedSeeker>();
  for (  DataBlockEncoder encoder : dataBlockEncoders) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream dataOut=new DataOutputStream(baos);
    encoder.compressKeyValues(dataOut,originalBuffer,includesMemstoreTS);
    ByteBuffer encodedBuffer=ByteBuffer.wrap(baos.toByteArray());
    DataBlockEncoder.EncodedSeeker seeker=encoder.createSeeker(KeyValue.KEY_COMPARATOR,includesMemstoreTS);
    seeker.setCurrentBuffer(encodedBuffer);
    encodedSeekers.add(seeker);
  }
  for (  boolean seekBefore : new boolean[]{false,true}) {
    for (int i=0; i < NUM_RANDOM_SEEKS; ++i) {
      int keyValueId;
      if (!seekBefore) {
        keyValueId=randomizer.nextInt(sampleKv.size());
      }
 else {
        keyValueId=randomizer.nextInt(sampleKv.size() - 1) + 1;
      }
      KeyValue keyValue=sampleKv.get(keyValueId);
      checkSeekingConsistency(encodedSeekers,seekBefore,keyValue);
    }
  }
  checkSeekingConsistency(encodedSeekers,false,sampleKv.get(0));
  for (  boolean seekBefore : new boolean[]{false,true}) {
    checkSeekingConsistency(encodedSeekers,seekBefore,sampleKv.get(sampleKv.size() - 1));
    KeyValue midKv=sampleKv.get(sampleKv.size() / 2);
    KeyValue lastMidKv=midKv.createLastOnRowCol();
    checkSeekingConsistency(encodedSeekers,seekBefore,lastMidKv);
  }
}
