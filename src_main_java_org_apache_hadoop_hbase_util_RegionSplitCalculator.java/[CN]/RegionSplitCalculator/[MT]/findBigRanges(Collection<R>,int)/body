{
  List<R> bigRanges=new ArrayList<R>();
  TreeMap<Integer,List<R>> overlapRangeMap=new TreeMap<Integer,List<R>>();
  for (  R r : bigOverlap) {
    byte[] startKey=r.getStartKey();
    byte[] endKey=specialEndKey(r);
    int overlappedRegions=0;
    for (    R rr : bigOverlap) {
      byte[] start=rr.getStartKey();
      byte[] end=specialEndKey(rr);
      if (BYTES_COMPARATOR.compare(startKey,end) < 0 && BYTES_COMPARATOR.compare(endKey,start) > 0) {
        overlappedRegions++;
      }
    }
    if (overlappedRegions > 1) {
      Integer key=Integer.valueOf(overlappedRegions);
      List<R> ranges=overlapRangeMap.get(key);
      if (ranges == null) {
        ranges=new ArrayList<R>();
        overlapRangeMap.put(key,ranges);
      }
      ranges.add(r);
    }
  }
  int toBeAdded=count;
  for (  Integer key : overlapRangeMap.descendingKeySet()) {
    List<R> chunk=overlapRangeMap.get(key);
    int chunkSize=chunk.size();
    if (chunkSize <= toBeAdded) {
      bigRanges.addAll(chunk);
      toBeAdded-=chunkSize;
      if (toBeAdded > 0)       continue;
    }
 else {
      int start=(chunkSize - toBeAdded) / 2;
      int end=start + toBeAdded;
      for (int i=start; i < end; i++) {
        bigRanges.add(chunk.get(i));
      }
    }
    break;
  }
  return bigRanges;
}
