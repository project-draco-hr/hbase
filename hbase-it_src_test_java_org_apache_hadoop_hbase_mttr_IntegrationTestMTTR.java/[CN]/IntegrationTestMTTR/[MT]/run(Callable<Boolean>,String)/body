{
  int maxIters=util.getHBaseClusterInterface().isDistributedCluster() ? 10 : 3;
  LOG.info("Starting " + testName + " with "+ maxIters+ " iterations.");
  ArrayList<TimingResult> resultPuts=new ArrayList<TimingResult>(maxIters);
  ArrayList<TimingResult> resultScan=new ArrayList<TimingResult>(maxIters);
  ArrayList<TimingResult> resultAdmin=new ArrayList<TimingResult>(maxIters);
  long start=System.nanoTime();
  try {
    for (int fullIterations=0; fullIterations < maxIters; fullIterations++) {
      Future<Boolean> monkeyFuture=executorService.submit(monkeyCallable);
      Future<TimingResult> putFuture=executorService.submit(new PutCallable(monkeyFuture));
      Future<TimingResult> scanFuture=executorService.submit(new ScanCallable(monkeyFuture));
      Future<TimingResult> adminFuture=executorService.submit(new AdminCallable(monkeyFuture));
      Future<Boolean> loadFuture=executorService.submit(new LoadCallable(monkeyFuture));
      monkeyFuture.get();
      loadFuture.get();
      TimingResult putTime=putFuture.get();
      TimingResult scanTime=scanFuture.get();
      TimingResult adminTime=adminFuture.get();
      resultPuts.add(putTime);
      resultScan.add(scanTime);
      resultAdmin.add(adminTime);
      Thread.sleep(5000l);
    }
  }
 catch (  Exception e) {
    long runtimeMs=TimeUnit.MILLISECONDS.convert(System.nanoTime() - start,TimeUnit.NANOSECONDS);
    LOG.info(testName + " failed after " + runtimeMs+ "ms.",e);
    throw e;
  }
  long runtimeMs=TimeUnit.MILLISECONDS.convert(System.nanoTime() - start,TimeUnit.NANOSECONDS);
  Objects.ToStringHelper helper=Objects.toStringHelper("MTTRResults").add("putResults",resultPuts).add("scanResults",resultScan).add("adminResults",resultAdmin).add("totalRuntimeMs",runtimeMs).add("name",testName);
  LOG.info(helper.toString());
}
