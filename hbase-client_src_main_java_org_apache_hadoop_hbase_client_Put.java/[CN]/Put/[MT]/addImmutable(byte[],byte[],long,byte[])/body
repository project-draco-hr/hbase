{
  if (family == null || family.length == 0 || family.length > HConstants.MAX_FAMILY_LENGTH) {
    throw new IllegalArgumentException("Family cannot be null. " + "And its length cannot be 0 or greater than " + HConstants.MAX_FAMILY_LENGTH);
  }
  if (qualifier == null) {
    throw new IllegalArgumentException("Qualifier is null");
  }
  if (value == null) {
    throw new IllegalArgumentException("Value is null");
  }
  if (ts < 0) {
    throw new IllegalArgumentException("Timestamp cannot be negative. ts=" + ts);
  }
  List<Cell> list=getCellList(family);
  list.add(new Cell(){
    @Override public byte[] getRowArray(){
      return row;
    }
    @Override public int getRowOffset(){
      return 0;
    }
    @Override public short getRowLength(){
      return (short)(row.length);
    }
    @Override public byte[] getFamilyArray(){
      return family;
    }
    @Override public int getFamilyOffset(){
      return 0;
    }
    @Override public byte getFamilyLength(){
      return (byte)(family.length);
    }
    @Override public byte[] getQualifierArray(){
      return qualifier;
    }
    @Override public int getQualifierOffset(){
      return 0;
    }
    @Override public int getQualifierLength(){
      return qualifier.length;
    }
    @Override public long getTimestamp(){
      return ts;
    }
    @Override public byte getTypeByte(){
      return KeyValue.Type.Put.getCode();
    }
    @Override public long getSequenceId(){
      return 0L;
    }
    @Override public byte[] getValueArray(){
      return value;
    }
    @Override public int getValueOffset(){
      return 0;
    }
    @Override public int getValueLength(){
      return value.length;
    }
    @Override public byte[] getTagsArray(){
      return HConstants.EMPTY_BYTE_ARRAY;
    }
    @Override public int getTagsOffset(){
      return 0;
    }
    @Override public int getTagsLength(){
      return 0;
    }
  }
);
  familyMap.put(family,list);
  return this;
}
