{
  byte[] tableName=Bytes.toBytes("testtable");
  byte[][] families={fam1,fam2,fam3};
  Configuration hc=initSplit();
  HRegion region=initHRegion(tableName,getName(),hc,CoprocessorImpl.class,families);
  for (int i=0; i < 3; i++) {
    addContent(region,fam3);
    region.flushcache();
  }
  region.compactStores();
  byte[] splitRow=region.checkSplit();
  assertNotNull(splitRow);
  HRegion[] regions=split(region,splitRow);
  for (int i=0; i < regions.length; i++) {
    regions[i]=reopenRegion(regions[i],CoprocessorImpl.class);
  }
  HRegion.closeHRegion(region);
  Coprocessor c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class.getName());
  Scan s=new Scan();
  RegionScanner scanner=regions[0].getCoprocessorHost().postScannerOpen(s,regions[0].getScanner(s));
  assertTrue(scanner instanceof CustomScanner);
  scanner.next(new ArrayList<KeyValue>());
  assertTrue("Coprocessor not started",((CoprocessorImpl)c).wasStarted());
  assertTrue("Coprocessor not stopped",((CoprocessorImpl)c).wasStopped());
  assertTrue(((CoprocessorImpl)c).wasOpened());
  assertTrue(((CoprocessorImpl)c).wasClosed());
  assertTrue(((CoprocessorImpl)c).wasFlushed());
  assertTrue(((CoprocessorImpl)c).wasCompacted());
  assertTrue(((CoprocessorImpl)c).wasSplit());
  for (int i=0; i < regions.length; i++) {
    HRegion.closeHRegion(regions[i]);
    c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class.getName());
    assertTrue("Coprocessor not started",((CoprocessorImpl)c).wasStarted());
    assertTrue("Coprocessor not stopped",((CoprocessorImpl)c).wasStopped());
    assertTrue(((CoprocessorImpl)c).wasOpened());
    assertTrue(((CoprocessorImpl)c).wasClosed());
    assertTrue(((CoprocessorImpl)c).wasCompacted());
  }
}
