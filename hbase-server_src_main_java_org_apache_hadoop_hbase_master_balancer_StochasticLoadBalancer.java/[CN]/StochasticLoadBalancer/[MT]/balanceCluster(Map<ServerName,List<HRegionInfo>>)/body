{
  List<RegionPlan> plans=balanceMasterRegions(clusterState);
  if (plans != null || clusterState == null || clusterState.size() <= 1) {
    return plans;
  }
  if (masterServerName != null && clusterState.containsKey(masterServerName)) {
    if (clusterState.size() <= 2) {
      return null;
    }
    clusterState=new HashMap<ServerName,List<HRegionInfo>>(clusterState);
    clusterState.remove(masterServerName);
  }
  RegionLocationFinder finder=null;
  if (this.localityCost != null && this.localityCost.getMultiplier() > 0) {
    finder=this.regionFinder;
  }
  Cluster cluster=new Cluster(clusterState,loads,finder,rackManager);
  long startTime=EnvironmentEdgeManager.currentTime();
  initCosts(cluster);
  if (!needsBalance(cluster)) {
    return null;
  }
  double currentCost=computeCost(cluster,Double.MAX_VALUE);
  curOverallCost=currentCost;
  for (int i=0; i < this.curFunctionCosts.length; i++) {
    curFunctionCosts[i]=tempFunctionCosts[i];
  }
  LOG.info("start StochasticLoadBalancer.balaner, initCost=" + currentCost + ", functionCost="+ functionCost());
  double initCost=currentCost;
  double newCost=currentCost;
  long computedMaxSteps=Math.min(this.maxSteps,((long)cluster.numRegions * (long)this.stepsPerRegion * (long)cluster.numServers));
  long step;
  for (step=0; step < computedMaxSteps; step++) {
    int generatorIdx=RANDOM.nextInt(candidateGenerators.length);
    CandidateGenerator p=candidateGenerators[generatorIdx];
    Cluster.Action action=p.generate(cluster);
    if (action.type == Type.NULL) {
      continue;
    }
    cluster.doAction(action);
    updateCostsWithAction(cluster,action);
    newCost=computeCost(cluster,currentCost);
    if (newCost < currentCost) {
      currentCost=newCost;
      curOverallCost=currentCost;
      for (int i=0; i < this.curFunctionCosts.length; i++) {
        curFunctionCosts[i]=tempFunctionCosts[i];
      }
    }
 else {
      Action undoAction=action.undoAction();
      cluster.doAction(undoAction);
      updateCostsWithAction(cluster,undoAction);
    }
    if (EnvironmentEdgeManager.currentTime() - startTime > maxRunningTime) {
      break;
    }
  }
  long endTime=EnvironmentEdgeManager.currentTime();
  metricsBalancer.balanceCluster(endTime - startTime);
  updateStochasticCosts(tableName,curOverallCost,curFunctionCosts);
  if (initCost > currentCost) {
    plans=createRegionPlans(cluster);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Finished computing new load balance plan.  Computation took " + (endTime - startTime) + "ms to try "+ step+ " different iterations.  Found a solution that moves "+ plans.size()+ " regions; Going from a computed cost of "+ initCost+ " to a new cost of "+ currentCost);
    }
    return plans;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Could not find a better load balance plan.  Tried " + step + " different configurations in "+ (endTime - startTime)+ "ms, and did not find anything with a computed cost less than "+ initCost);
  }
  return null;
}
