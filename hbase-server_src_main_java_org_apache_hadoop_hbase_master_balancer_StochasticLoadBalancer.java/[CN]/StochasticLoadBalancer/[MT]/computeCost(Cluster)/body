{
  double moveCost=moveCostMultiplier * computeMoveCost(cluster);
  double regionCountSkewCost=loadMultiplier * computeSkewLoadCost(cluster);
  double tableSkewCost=tableMultiplier * computeTableSkewLoadCost(cluster);
  double localityCost=localityMultiplier * computeDataLocalityCost(cluster);
  double memstoreSizeCost=memStoreSizeMultiplier * computeRegionLoadCost(cluster,RegionLoadCostType.MEMSTORE_SIZE);
  double storefileSizeCost=storeFileSizeMultiplier * computeRegionLoadCost(cluster,RegionLoadCostType.STOREFILE_SIZE);
  double readRequestCost=readRequestMultiplier * computeRegionLoadCost(cluster,RegionLoadCostType.READ_REQUEST);
  double writeRequestCost=writeRequestMultiplier * computeRegionLoadCost(cluster,RegionLoadCostType.WRITE_REQUEST);
  double total=moveCost + regionCountSkewCost + tableSkewCost+ localityCost+ memstoreSizeCost+ storefileSizeCost+ readRequestCost+ writeRequestCost;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Computed weights for a potential balancing total = " + total + " moveCost = "+ moveCost+ " regionCountSkewCost = "+ regionCountSkewCost+ " tableSkewCost = "+ tableSkewCost+ " localityCost = "+ localityCost+ " memstoreSizeCost = "+ memstoreSizeCost+ " storefileSizeCost = "+ storefileSizeCost);
  }
  return total;
}
