{
  int currentPrimary=-1;
  int currentPrimaryIndex=-1;
  int selectedPrimaryIndex=-1;
  double currentLargestRandom=-1;
  for (int j=0; j <= primariesOfRegionsPerGroup.length; j++) {
    int primary=j < primariesOfRegionsPerGroup.length ? primariesOfRegionsPerGroup[j] : -1;
    if (primary != currentPrimary) {
      int numReplicas=j - currentPrimaryIndex;
      if (numReplicas > 1) {
        double currentRandom=RANDOM.nextDouble();
        if (currentRandom > currentLargestRandom) {
          selectedPrimaryIndex=currentPrimary;
          currentLargestRandom=currentRandom;
        }
      }
      currentPrimary=primary;
      currentPrimaryIndex=j;
    }
  }
  for (int j=0; j < regionsPerGroup.length; j++) {
    int regionIndex=regionsPerGroup[j];
    if (selectedPrimaryIndex == regionIndexToPrimaryIndex[regionIndex]) {
      if (selectedPrimaryIndex != regionIndex) {
        return regionIndex;
      }
    }
  }
  return -1;
}
