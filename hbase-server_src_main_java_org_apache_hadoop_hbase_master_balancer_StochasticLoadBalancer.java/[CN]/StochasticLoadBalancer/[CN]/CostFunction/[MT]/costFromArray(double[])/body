{
  double totalCost=0;
  double total=getSum(stats);
  double count=stats.length;
  if (stats.length > 1 && cluster.activeMasterIndex != -1) {
    count--;
  }
  double mean=total / count;
  double max=((count - 1) * mean) + (total - mean);
  double min;
  if (count > total) {
    min=((count - total) * mean) + ((1 - mean) * total);
  }
 else {
    int numHigh=(int)(total - (Math.floor(mean) * count));
    int numLow=(int)(count - numHigh);
    min=(numHigh * (Math.ceil(mean) - mean)) + (numLow * (mean - Math.floor(mean)));
  }
  min=Math.max(0,min);
  for (int i=0; i < stats.length; i++) {
    if (stats.length > 1 && cluster.isActiveMaster(i)) {
      continue;
    }
    double n=stats[i];
    double diff=Math.abs(mean - n);
    totalCost+=diff;
  }
  double scaled=scale(min,max,totalCost);
  return scaled;
}
