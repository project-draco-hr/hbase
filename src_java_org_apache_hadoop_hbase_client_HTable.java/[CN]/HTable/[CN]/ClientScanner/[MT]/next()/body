{
  if (cache.size() == 0 && this.closed) {
    return null;
  }
  if (cache.size() == 0) {
    Result[] values=null;
    int countdown=this.caching;
    callable.setCaching(this.caching);
    boolean skipFirst=false;
    do {
      try {
        values=getConnection().getRegionServerWithRetries(callable);
        if (skipFirst) {
          skipFirst=false;
          values=getConnection().getRegionServerWithRetries(callable);
        }
      }
 catch (      DoNotRetryIOException e) {
        Throwable cause=e.getCause();
        if (cause == null || !(cause instanceof NotServingRegionException)) {
          throw e;
        }
        this.scan.setStartRow(this.lastResult.getRow());
        this.currentRegion=null;
        skipFirst=true;
        continue;
      }
catch (      IOException e) {
        if (e instanceof UnknownScannerException && lastNext + scannerTimeout < System.currentTimeMillis()) {
          ScannerTimeoutException ex=new ScannerTimeoutException();
          ex.initCause(e);
          throw ex;
        }
        throw e;
      }
      lastNext=System.currentTimeMillis();
      if (values != null && values.length > 0) {
        for (        Result rs : values) {
          cache.add(rs);
          countdown--;
          this.lastResult=rs;
        }
      }
    }
 while (countdown > 0 && nextScanner(countdown,values == null));
  }
  if (cache.size() > 0) {
    return cache.poll();
  }
  return null;
}
