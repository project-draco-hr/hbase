{
  buildCohortMemberPair();
  final TimeoutException oate=new TimeoutException("bogus timeout",1,2,0);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      spySub.cancel("bogus message",oate);
      Thread.sleep(WAKE_FREQUENCY);
      return null;
    }
  }
).when(spySub).waitForReachedGlobalBarrier();
  Subprocedure subproc=member.createSubprocedure(op,data);
  member.submitSubprocedure(subproc);
  member.closeAndWait(TIMEOUT);
  InOrder order=inOrder(mockMemberComms,spySub);
  order.verify(spySub).acquireBarrier();
  order.verify(mockMemberComms).sendMemberAcquired(eq(spySub));
  order.verify(spySub,never()).insideBarrier();
  order.verify(mockMemberComms,never()).sendMemberCompleted(eq(spySub));
  order.verify(spySub).cancel(anyString(),any(Exception.class));
  order.verify(spySub).cleanup(any(Exception.class));
}
