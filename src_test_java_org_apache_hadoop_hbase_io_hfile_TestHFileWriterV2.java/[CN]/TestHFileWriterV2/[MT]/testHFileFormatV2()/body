{
  Path hfilePath=new Path(TEST_UTIL.getDataTestDir(),"testHFileFormatV2");
  final Compression.Algorithm COMPRESS_ALGO=Compression.Algorithm.GZ;
  HFileWriterV2 writer=new HFileWriterV2(conf,new CacheConfig(conf),fs,hfilePath,4096,COMPRESS_ALGO,KeyValue.KEY_COMPARATOR);
  long totalKeyLength=0;
  long totalValueLength=0;
  Random rand=new Random(9713312);
  final int ENTRY_COUNT=10000;
  List<byte[]> keys=new ArrayList<byte[]>();
  List<byte[]> values=new ArrayList<byte[]>();
  for (int i=0; i < ENTRY_COUNT; ++i) {
    byte[] keyBytes=randomOrderedKey(rand,i);
    byte[] valueBytes=randomValue(rand);
    writer.append(keyBytes,valueBytes);
    totalKeyLength+=keyBytes.length;
    totalValueLength+=valueBytes.length;
    keys.add(keyBytes);
    values.add(valueBytes);
  }
  writer.appendMetaBlock("CAPITAL_OF_USA",new Text("Washington, D.C."));
  writer.appendMetaBlock("CAPITAL_OF_RUSSIA",new Text("Moscow"));
  writer.appendMetaBlock("CAPITAL_OF_FRANCE",new Text("Paris"));
  writer.close();
  FSDataInputStream fsdis=fs.open(hfilePath);
  long fileSize=fs.getFileStatus(hfilePath).getLen();
  FixedFileTrailer trailer=FixedFileTrailer.readFromStream(fsdis,fileSize);
  assertEquals(2,trailer.getVersion());
  assertEquals(ENTRY_COUNT,trailer.getEntryCount());
  HFileBlock.FSReader blockReader=new HFileBlock.FSReaderV2(fsdis,COMPRESS_ALGO,fileSize);
  RawComparator<byte[]> comparator=trailer.createComparator();
  HFileBlockIndex.BlockIndexReader dataBlockIndexReader=new HFileBlockIndex.BlockIndexReader(comparator,trailer.getNumDataIndexLevels());
  HFileBlockIndex.BlockIndexReader metaBlockIndexReader=new HFileBlockIndex.BlockIndexReader(Bytes.BYTES_RAWCOMPARATOR,1);
  HFileBlock.BlockIterator blockIter=blockReader.blockRange(trailer.getLoadOnOpenDataOffset(),fileSize - trailer.getTrailerSize());
  dataBlockIndexReader.readMultiLevelIndexRoot(blockIter.nextBlockAsStream(BlockType.ROOT_INDEX),trailer.getDataIndexCount());
  metaBlockIndexReader.readRootIndex(blockIter.nextBlockAsStream(BlockType.ROOT_INDEX),trailer.getMetaIndexCount());
  FileInfo fileInfo=new FileInfo();
  fileInfo.readFields(blockIter.nextBlockAsStream(BlockType.FILE_INFO));
  byte[] keyValueFormatVersion=fileInfo.get(HFileWriterV2.KEY_VALUE_VERSION);
  boolean includeMemstoreTS=(keyValueFormatVersion != null && Bytes.toInt(keyValueFormatVersion) > 0);
  int entriesRead=0;
  int blocksRead=0;
  long memstoreTS=0;
  fsdis.seek(0);
  long curBlockPos=0;
  while (curBlockPos <= trailer.getLastDataBlockOffset()) {
    HFileBlock block=blockReader.readBlockData(curBlockPos,-1,-1,false);
    assertEquals(BlockType.DATA,block.getBlockType());
    ByteBuffer buf=block.getBufferWithoutHeader();
    while (buf.hasRemaining()) {
      int keyLen=buf.getInt();
      int valueLen=buf.getInt();
      byte[] key=new byte[keyLen];
      buf.get(key);
      byte[] value=new byte[valueLen];
      buf.get(value);
      if (includeMemstoreTS) {
        ByteArrayInputStream byte_input=new ByteArrayInputStream(buf.array(),buf.arrayOffset() + buf.position(),buf.remaining());
        DataInputStream data_input=new DataInputStream(byte_input);
        memstoreTS=WritableUtils.readVLong(data_input);
        buf.position(buf.position() + WritableUtils.getVIntSize(memstoreTS));
      }
      assertTrue(Bytes.compareTo(key,keys.get(entriesRead)) == 0);
      assertTrue(Bytes.compareTo(value,values.get(entriesRead)) == 0);
      ++entriesRead;
    }
    ++blocksRead;
    curBlockPos+=block.getOnDiskSizeWithHeader();
  }
  LOG.info("Finished reading: entries=" + entriesRead + ", blocksRead="+ blocksRead);
  assertEquals(ENTRY_COUNT,entriesRead);
  int metaCounter=0;
  while (fsdis.getPos() < trailer.getLoadOnOpenDataOffset()) {
    LOG.info("Current offset: " + fsdis.getPos() + ", scanning until "+ trailer.getLoadOnOpenDataOffset());
    HFileBlock block=blockReader.readBlockData(curBlockPos,-1,-1,false);
    assertEquals(BlockType.META,block.getBlockType());
    Text t=new Text();
    block.readInto(t);
    Text expectedText=(metaCounter == 0 ? new Text("Paris") : metaCounter == 1 ? new Text("Moscow") : new Text("Washington, D.C."));
    assertEquals(expectedText,t);
    LOG.info("Read meta block data: " + t);
    ++metaCounter;
    curBlockPos+=block.getOnDiskSizeWithHeader();
  }
  fsdis.close();
}
