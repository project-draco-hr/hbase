{
  final byte[] tableName=Bytes.toBytes("pendingCloseAndSplit");
  HTable t=TESTING_UTIL.createTable(tableName,HConstants.CATALOG_FAMILY);
  List<HRegion> regions=cluster.getRegions(tableName);
  HRegionInfo hri=getAndCheckSingleTableRegion(regions);
  int tableRegionIndex=ensureTableRegionNotOnSameServerAsMeta(admin,hri);
  this.admin.balanceSwitch(false);
  this.cluster.getMaster().setCatalogJanitorEnabled(false);
  try {
    TESTING_UTIL.loadTable(t,HConstants.CATALOG_FAMILY);
    HRegionServer server=cluster.getRegionServer(tableRegionIndex);
    printOutRegions(server,"Initial regions: ");
    int regionCount=server.getOnlineRegions().size();
    MiniHBaseCluster.MiniHBaseClusterRegionServer.TEST_SKIP_CLOSE=true;
    this.cluster.getMaster().unassign(hri.getRegionName(),false);
    LOG.info("Running split on server " + server.toString());
    split(hri,server,regionCount);
    List<HRegion> daughters=this.cluster.getRegions(tableName);
    assertTrue(daughters.size() >= 2);
    String path=ZKAssign.getNodeName(t.getConnection().getZooKeeperWatcher(),hri.getEncodedName());
    Stat stat=null;
    for (int i=0; i < 10; i++) {
      stat=t.getConnection().getZooKeeperWatcher().getZooKeeper().exists(path,false);
      LOG.info("Stat for znode path=" + path + ": "+ stat);
      if (stat == null)       break;
      org.apache.hadoop.hbase.util.Threads.sleep(100);
    }
    assertTrue(stat == null);
  }
  finally {
    MiniHBaseCluster.MiniHBaseClusterRegionServer.TEST_SKIP_CLOSE=false;
    admin.balanceSwitch(true);
    cluster.getMaster().setCatalogJanitorEnabled(true);
  }
}
