{
  ADMIN.runAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      HTable aclmeta=new HTable(TEST_UTIL.getConfiguration(),AccessControlLists.ACL_TABLE_NAME);
      try {
        byte[] table=Bytes.toBytes(name.getMethodName());
        BlockingRpcChannel service=aclmeta.coprocessorService(table);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.grant(protocol,READER.getShortName(),TABLE,null,null,Permission.Action.READ);
        ProtobufUtil.grant(protocol,LIMITED.getShortName(),TABLE,FAMILY,PUBLIC_COL,Permission.Action.READ);
        return null;
      }
  finally {
        aclmeta.close();
      }
    }
  }
);
  List<Put> puts=new ArrayList<Put>(100);
  for (int i=0; i < 100; i++) {
    Put p=new Put(Bytes.toBytes(i));
    p.add(FAMILY,PRIVATE_COL,Bytes.toBytes("secret " + i));
    p.add(FAMILY,PUBLIC_COL,Bytes.toBytes("info " + i));
    puts.add(p);
  }
  table.put(puts);
  READER.runAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
      conf.set("testkey",UUID.randomUUID().toString());
      HTable t=new HTable(conf,TABLE);
      try {
        ResultScanner rs=t.getScanner(new Scan());
        int rowcnt=0;
        for (        Result r : rs) {
          rowcnt++;
          int rownum=Bytes.toInt(r.getRow());
          assertTrue(r.containsColumn(FAMILY,PRIVATE_COL));
          assertEquals("secret " + rownum,Bytes.toString(r.getValue(FAMILY,PRIVATE_COL)));
          assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
          assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
        }
        assertEquals("Expected 100 rows returned",100,rowcnt);
        return null;
      }
  finally {
        t.close();
      }
    }
  }
);
  LIMITED.runAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
      conf.set("testkey",UUID.randomUUID().toString());
      HTable t=new HTable(conf,TABLE);
      try {
        ResultScanner rs=t.getScanner(new Scan());
        int rowcnt=0;
        for (        Result r : rs) {
          rowcnt++;
          int rownum=Bytes.toInt(r.getRow());
          assertFalse(r.containsColumn(FAMILY,PRIVATE_COL));
          assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
          assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
        }
        assertEquals("Expected 100 rows returned",100,rowcnt);
        return null;
      }
  finally {
        t.close();
      }
    }
  }
);
  DENIED.runAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
      conf.set("testkey",UUID.randomUUID().toString());
      HTable t=new HTable(conf,TABLE);
      try {
        ResultScanner rs=t.getScanner(new Scan());
        int rowcnt=0;
        for (        Result r : rs) {
          rowcnt++;
          int rownum=Bytes.toInt(r.getRow());
          assertFalse(r.containsColumn(FAMILY,PRIVATE_COL));
          assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
          assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
        }
        assertEquals("Expected 0 rows returned",0,rowcnt);
        return null;
      }
  finally {
        t.close();
      }
    }
  }
);
}
