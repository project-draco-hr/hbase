{
  String result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Runtime"));
  LOG.info("/jmx?qry=java.lang:type=Runtime RESULT: " + result);
  assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Runtime\"",result);
  assertReFind("\"modelerType\"",result);
  result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Memory"));
  LOG.info("/jmx?qry=java.lang:type=Memory RESULT: " + result);
  assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
  assertReFind("\"modelerType\"",result);
  result=readOutput(new URL(baseUrl,"/jmx"));
  LOG.info("/jmx RESULT: " + result);
  assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
  result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::HeapMemoryUsage"));
  LOG.info("/jmx RESULT: " + result);
  assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
  assertReFind("\"committed\"\\s*:",result);
  result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::"));
  LOG.info("/jmx RESULT: " + result);
  assertReFind("\"ERROR\"",result);
  result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Memory&callback=mycallback1"));
  LOG.info("/jmx?qry=java.lang:type=Memory&callback=mycallback RESULT: " + result);
  assertReFind("^mycallback1\\(\\{",result);
  assertReFind("\\}\\);$",result);
  result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::&callback=mycallback2"));
  LOG.info("/jmx RESULT: " + result);
  assertReFind("^mycallback2\\(\\{",result);
  assertReFind("\"ERROR\"",result);
  assertReFind("\\}\\);$",result);
  result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::HeapMemoryUsage&callback=mycallback3"));
  LOG.info("/jmx RESULT: " + result);
  assertReFind("^mycallback3\\(\\{",result);
  assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
  assertReFind("\"committed\"\\s*:",result);
  assertReFind("\\}\\);$",result);
}
