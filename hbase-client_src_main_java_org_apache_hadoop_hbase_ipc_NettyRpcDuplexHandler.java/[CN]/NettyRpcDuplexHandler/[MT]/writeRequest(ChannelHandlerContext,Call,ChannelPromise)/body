{
  id2Call.put(call.id,call);
  ByteBuf cellBlock=cellBlockBuilder.buildCellBlock(codec,compressor,call.cells,ctx.alloc());
  CellBlockMeta cellBlockMeta;
  if (cellBlock != null) {
    CellBlockMeta.Builder cellBlockMetaBuilder=CellBlockMeta.newBuilder();
    cellBlockMetaBuilder.setLength(cellBlock.writerIndex());
    cellBlockMeta=cellBlockMetaBuilder.build();
  }
 else {
    cellBlockMeta=null;
  }
  RequestHeader requestHeader=IPCUtil.buildRequestHeader(call,cellBlockMeta);
  int sizeWithoutCellBlock=IPCUtil.getTotalSizeWhenWrittenDelimited(requestHeader,call.param);
  int totalSize=cellBlock != null ? sizeWithoutCellBlock + cellBlock.writerIndex() : sizeWithoutCellBlock;
  ByteBuf buf=ctx.alloc().buffer(sizeWithoutCellBlock + 4);
  buf.writeInt(totalSize);
  ByteBufOutputStream bbos=new ByteBufOutputStream(buf);
  requestHeader.writeDelimitedTo(bbos);
  if (call.param != null) {
    call.param.writeDelimitedTo(bbos);
  }
  if (cellBlock != null) {
    ChannelPromise withoutCellBlockPromise=ctx.newPromise();
    ctx.write(buf,withoutCellBlockPromise);
    ChannelPromise cellBlockPromise=ctx.newPromise();
    ctx.write(cellBlock,cellBlockPromise);
    PromiseCombiner combiner=new PromiseCombiner();
    combiner.addAll(withoutCellBlockPromise,cellBlockPromise);
    combiner.finish(promise);
  }
 else {
    ctx.write(buf,promise);
  }
}
