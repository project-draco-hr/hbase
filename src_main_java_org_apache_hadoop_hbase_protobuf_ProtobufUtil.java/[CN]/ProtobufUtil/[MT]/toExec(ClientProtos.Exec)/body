{
  byte[] row=proto.getRow().toByteArray();
  String protocolName=proto.getProtocolName();
  String methodName=proto.getMethodName();
  List<Object> parameters=new ArrayList<Object>();
  Class<? extends CoprocessorProtocol> protocol=null;
  Method method=null;
  try {
    List<Class<?>> types=new ArrayList<Class<?>>();
    for (    NameBytesPair parameter : proto.getParameterList()) {
      String type=parameter.getName();
      Class<?> declaredClass=PRIMITIVES.get(type);
      if (declaredClass == null) {
        declaredClass=Class.forName(parameter.getName());
      }
      parameters.add(toObject(parameter));
      types.add(declaredClass);
    }
    Class<?>[] parameterTypes=new Class<?>[types.size()];
    types.toArray(parameterTypes);
    protocol=(Class<? extends CoprocessorProtocol>)Class.forName(protocolName);
    method=protocol.getMethod(methodName,parameterTypes);
  }
 catch (  NoSuchMethodException nsme) {
    throw new IOException(nsme);
  }
catch (  ClassNotFoundException cnfe) {
    throw new IOException(cnfe);
  }
  Configuration conf=HBaseConfiguration.create();
  for (  NameStringPair p : proto.getPropertyList()) {
    conf.set(p.getName(),p.getValue());
  }
  Object[] parameterObjects=new Object[parameters.size()];
  parameters.toArray(parameterObjects);
  return new Exec(conf,row,protocol,method,parameterObjects);
}
