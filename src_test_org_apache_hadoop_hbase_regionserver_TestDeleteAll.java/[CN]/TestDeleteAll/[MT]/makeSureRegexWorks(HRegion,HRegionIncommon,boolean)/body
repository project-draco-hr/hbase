{
  byte[] row=Bytes.toBytes("test_row");
  long t0=System.currentTimeMillis();
  long t1=t0 - 15000;
  long t2=t1 - 15000;
  byte[] colA=Bytes.toBytes(Bytes.toString(COLUMNS[0]) + "a");
  byte[] colB=Bytes.toBytes(Bytes.toString(COLUMNS[0]) + "b");
  byte[] colC=Bytes.toBytes(Bytes.toString(COLUMNS[0]) + "c");
  byte[] colD=Bytes.toBytes(Bytes.toString(COLUMNS[0]));
  BatchUpdate batchUpdate=new BatchUpdate(row,t0);
  batchUpdate.put(colA,cellData(0,flush).getBytes());
  batchUpdate.put(colB,cellData(0,flush).getBytes());
  batchUpdate.put(colC,cellData(0,flush).getBytes());
  batchUpdate.put(colD,cellData(0,flush).getBytes());
  region_incommon.commit(batchUpdate);
  batchUpdate=new BatchUpdate(row,t1);
  batchUpdate.put(colA,cellData(1,flush).getBytes());
  batchUpdate.put(colB,cellData(1,flush).getBytes());
  batchUpdate.put(colC,cellData(1,flush).getBytes());
  batchUpdate.put(colD,cellData(1,flush).getBytes());
  region_incommon.commit(batchUpdate);
  batchUpdate=new BatchUpdate(row,t2);
  batchUpdate.put(colA,cellData(2,flush).getBytes());
  batchUpdate.put(colB,cellData(2,flush).getBytes());
  batchUpdate.put(colC,cellData(2,flush).getBytes());
  batchUpdate.put(colD,cellData(2,flush).getBytes());
  region_incommon.commit(batchUpdate);
  if (flush) {
    region_incommon.flushcache();
  }
  region.deleteAllByRegex(row,COLUMN_REGEX,t1,null);
  if (flush) {
    region_incommon.flushcache();
  }
  assertCellEquals(region,row,colA,t0,cellData(0,flush));
  assertCellEquals(region,row,colA,t1,cellData(1,flush));
  assertCellEquals(region,row,colA,t2,cellData(2,flush));
  assertCellEquals(region,row,colB,t0,cellData(0,flush));
  assertCellEquals(region,row,colB,t1,null);
  assertCellEquals(region,row,colB,t2,null);
  assertCellEquals(region,row,colC,t0,cellData(0,flush));
  assertCellEquals(region,row,colC,t1,null);
  assertCellEquals(region,row,colC,t2,null);
  assertCellEquals(region,row,colD,t0,cellData(0,flush));
  assertCellEquals(region,row,colD,t1,null);
  assertCellEquals(region,row,colD,t2,null);
  region.deleteAllByRegex(row,COLUMN_REGEX,HConstants.LATEST_TIMESTAMP,null);
  if (flush) {
    region_incommon.flushcache();
  }
  assertCellEquals(region,row,colA,t0,cellData(0,flush));
  assertCellEquals(region,row,colA,t1,cellData(1,flush));
  assertCellEquals(region,row,colA,t2,cellData(2,flush));
  assertCellEquals(region,row,colB,t0,null);
  assertCellEquals(region,row,colB,t1,null);
  assertCellEquals(region,row,colB,t2,null);
  assertCellEquals(region,row,colC,t0,null);
  assertCellEquals(region,row,colC,t1,null);
  assertCellEquals(region,row,colC,t2,null);
  assertCellEquals(region,row,colD,t0,null);
  assertCellEquals(region,row,colD,t1,null);
  assertCellEquals(region,row,colD,t2,null);
}
