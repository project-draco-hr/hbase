{
  byte[] row=Bytes.toBytes("test_row");
  long now=System.currentTimeMillis();
  long past=now - 100;
  long future=now + 100;
  Thread.sleep(100);
  LOG.info("now=" + now + ", past="+ past+ ", future="+ future);
  byte[] colA=Bytes.toBytes(Bytes.toString(COLUMNS[0]) + "a");
  byte[] colB=Bytes.toBytes(Bytes.toString(COLUMNS[0]) + "b");
  byte[] colC=Bytes.toBytes(Bytes.toString(COLUMNS[0]) + "c");
  byte[] colD=Bytes.toBytes(Bytes.toString(COLUMNS[0]));
  BatchUpdate batchUpdate=new BatchUpdate(row,now);
  batchUpdate.put(colA,cellData(0,flush).getBytes());
  batchUpdate.put(colB,cellData(0,flush).getBytes());
  batchUpdate.put(colC,cellData(0,flush).getBytes());
  batchUpdate.put(colD,cellData(0,flush).getBytes());
  region_incommon.commit(batchUpdate);
  batchUpdate=new BatchUpdate(row,past);
  batchUpdate.put(colA,cellData(1,flush).getBytes());
  batchUpdate.put(colB,cellData(1,flush).getBytes());
  batchUpdate.put(colC,cellData(1,flush).getBytes());
  batchUpdate.put(colD,cellData(1,flush).getBytes());
  region_incommon.commit(batchUpdate);
  batchUpdate=new BatchUpdate(row,future);
  batchUpdate.put(colA,cellData(2,flush).getBytes());
  batchUpdate.put(colB,cellData(2,flush).getBytes());
  batchUpdate.put(colC,cellData(2,flush).getBytes());
  batchUpdate.put(colD,cellData(2,flush).getBytes());
  region_incommon.commit(batchUpdate);
  if (flush) {
    region_incommon.flushcache();
  }
  region.deleteAll(row,now,null);
  if (flush) {
    region_incommon.flushcache();
  }
  assertCellEquals(region,row,colA,future,cellData(2,flush));
  assertCellEquals(region,row,colA,past,null);
  assertCellEquals(region,row,colA,now,null);
  assertCellEquals(region,row,colD,future,cellData(2,flush));
  assertCellEquals(region,row,colD,past,null);
  assertCellEquals(region,row,colD,now,null);
  region.deleteAll(row,HConstants.LATEST_TIMESTAMP,null);
  if (flush) {
    region_incommon.flushcache();
  }
  assertCellEquals(region,row,colA,now,null);
  assertCellEquals(region,row,colA,past,null);
  assertCellEquals(region,row,colA,future,null);
  assertCellEquals(region,row,colD,now,null);
  assertCellEquals(region,row,colD,past,null);
  assertCellEquals(region,row,colD,future,null);
}
