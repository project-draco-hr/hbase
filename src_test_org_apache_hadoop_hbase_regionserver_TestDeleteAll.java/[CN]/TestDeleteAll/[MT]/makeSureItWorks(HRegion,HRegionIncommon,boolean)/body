{
  Text row=new Text("test_row");
  long t0=System.currentTimeMillis();
  long t1=t0 - 15000;
  long t2=t1 - 15000;
  Text colA=new Text(COLUMNS[0].toString() + "a");
  Text colB=new Text(COLUMNS[0].toString() + "b");
  Text colC=new Text(COLUMNS[0].toString() + "c");
  Text colD=new Text(COLUMNS[0].toString());
  long lock=region_incommon.startUpdate(row);
  region_incommon.put(lock,colA,cellData(0,flush).getBytes());
  region_incommon.put(lock,colB,cellData(0,flush).getBytes());
  region_incommon.put(lock,colC,cellData(0,flush).getBytes());
  region_incommon.put(lock,colD,cellData(0,flush).getBytes());
  region_incommon.commit(lock,t0);
  lock=region_incommon.startUpdate(row);
  region_incommon.put(lock,colA,cellData(1,flush).getBytes());
  region_incommon.put(lock,colB,cellData(1,flush).getBytes());
  region_incommon.put(lock,colC,cellData(1,flush).getBytes());
  region_incommon.put(lock,colD,cellData(1,flush).getBytes());
  region_incommon.commit(lock,t1);
  lock=region_incommon.startUpdate(row);
  region_incommon.put(lock,colA,cellData(2,flush).getBytes());
  region_incommon.put(lock,colB,cellData(2,flush).getBytes());
  region_incommon.put(lock,colC,cellData(2,flush).getBytes());
  region_incommon.put(lock,colD,cellData(2,flush).getBytes());
  region_incommon.commit(lock,t2);
  if (flush) {
    region_incommon.flushcache();
  }
  region.deleteAll(row,t1);
  if (flush) {
    region_incommon.flushcache();
  }
  assertCellEquals(region,row,colA,t0,cellData(0,flush));
  assertCellEquals(region,row,colA,t1,null);
  assertCellEquals(region,row,colA,t2,null);
  assertCellEquals(region,row,colD,t0,cellData(0,flush));
  assertCellEquals(region,row,colD,t1,null);
  assertCellEquals(region,row,colD,t2,null);
  region.deleteAll(row,HConstants.LATEST_TIMESTAMP);
  if (flush) {
    region_incommon.flushcache();
  }
  assertCellEquals(region,row,colA,t0,null);
  assertCellEquals(region,row,colA,t1,null);
  assertCellEquals(region,row,colA,t2,null);
  assertCellEquals(region,row,colD,t0,null);
  assertCellEquals(region,row,colD,t1,null);
  assertCellEquals(region,row,colD,t2,null);
}
