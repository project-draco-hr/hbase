{
  Configuration c=getConnection().getConfiguration();
  final long pause=c.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  final int numRetries=c.getInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);
  List<RetriesExhaustedException.ThrowableWithExtraContext> exceptions=new ArrayList<RetriesExhaustedException.ThrowableWithExtraContext>();
  this.globalStartTime=EnvironmentEdgeManager.currentTimeMillis();
  for (int tries=0; tries < numRetries; tries++) {
    try {
      beforeCall();
      connect(tries != 0);
      return call();
    }
 catch (    Throwable t) {
      t=translateException(t);
      if (t instanceof SocketTimeoutException || t instanceof ConnectException || t instanceof RetriesExhaustedException) {
        HRegionLocation hrl=location;
        if (hrl != null) {
          getConnection().clearCaches(hrl.getHostnamePort());
        }
      }
      RetriesExhaustedException.ThrowableWithExtraContext qt=new RetriesExhaustedException.ThrowableWithExtraContext(t,EnvironmentEdgeManager.currentTimeMillis(),toString());
      exceptions.add(qt);
      if (tries == numRetries - 1) {
        throw new RetriesExhaustedException(tries,exceptions);
      }
      long expectedSleep=ConnectionUtils.getPauseTime(pause,tries);
      if (((this.endTime - this.globalStartTime) + MIN_RPC_TIMEOUT + expectedSleep) > this.callTimeout) {
        throw (SocketTimeoutException)new SocketTimeoutException("Call to access row '" + Bytes.toString(row) + "' on table '"+ Bytes.toString(tableName)+ "' failed on timeout. "+ " callTimeout="+ this.callTimeout+ ", time="+ (this.endTime - this.startTime)).initCause(t);
      }
    }
 finally {
      afterCall();
    }
    try {
      Thread.sleep(ConnectionUtils.getPauseTime(pause,tries));
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException("Interrupted after tries=" + tries,e);
    }
  }
  return null;
}
