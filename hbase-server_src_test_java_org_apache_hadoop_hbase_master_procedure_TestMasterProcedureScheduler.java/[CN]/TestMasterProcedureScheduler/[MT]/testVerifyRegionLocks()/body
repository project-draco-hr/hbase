{
  final TableName tableName=TableName.valueOf("testtb");
  final HRegionInfo regionA=new HRegionInfo(tableName,Bytes.toBytes("a"),Bytes.toBytes("b"));
  final HRegionInfo regionB=new HRegionInfo(tableName,Bytes.toBytes("b"),Bytes.toBytes("c"));
  final HRegionInfo regionC=new HRegionInfo(tableName,Bytes.toBytes("c"),Bytes.toBytes("d"));
  queue.addBack(new TestTableProcedure(1,tableName,TableProcedureInterface.TableOperationType.EDIT));
  queue.addBack(new TestRegionProcedure(2,tableName,TableProcedureInterface.TableOperationType.MERGE,regionA,regionB));
  queue.addBack(new TestRegionProcedure(3,tableName,TableProcedureInterface.TableOperationType.SPLIT,regionA));
  queue.addBack(new TestRegionProcedure(4,tableName,TableProcedureInterface.TableOperationType.SPLIT,regionB));
  queue.addBack(new TestRegionProcedure(5,tableName,TableProcedureInterface.TableOperationType.UNASSIGN,regionC));
  Procedure proc=queue.poll();
  assertEquals(1,proc.getProcId());
  assertEquals(true,queue.tryAcquireTableExclusiveLock(proc,tableName));
  assertEquals(null,queue.poll(0));
  queue.releaseTableExclusiveLock(proc,tableName);
  Procedure mergeProc=queue.poll();
  assertEquals(2,mergeProc.getProcId());
  assertEquals(false,queue.waitRegions(mergeProc,tableName,regionA,regionB));
  Procedure procA=queue.poll();
  assertEquals(3,procA.getProcId());
  assertEquals(true,queue.waitRegions(procA,tableName,regionA));
  Procedure procB=queue.poll();
  assertEquals(4,procB.getProcId());
  assertEquals(true,queue.waitRegions(procB,tableName,regionB));
  Procedure procC=queue.poll();
  assertEquals(5,procC.getProcId());
  assertEquals(false,queue.waitRegions(procC,tableName,regionC));
  assertEquals(null,queue.poll(0));
  queue.wakeRegions(mergeProc,tableName,regionA,regionB);
  procA=queue.poll();
  assertEquals(3,procA.getProcId());
  assertEquals(false,queue.waitRegions(procA,tableName,regionA));
  procB=queue.poll();
  assertEquals(4,procB.getProcId());
  assertEquals(false,queue.waitRegions(procB,tableName,regionB));
  queue.wakeRegions(procA,tableName,regionA);
  queue.wakeRegions(procB,tableName,regionB);
  queue.wakeRegions(procC,tableName,regionC);
}
