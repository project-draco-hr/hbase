{
  Job job=null;
  Scan scan=null;
  job=new Job(getConf());
  job.setJobName("Data copier");
  job.getConfiguration().setInt("INDEX",labelIndex);
  job.getConfiguration().set("LABELS",labels);
  job.setJarByClass(getClass());
  scan=new Scan();
  scan.setCacheBlocks(false);
  scan.setRaw(true);
  String[] split=labels.split(COMMA);
  scan.setAuthorizations(new Authorizations(split[this.labelIndex * 2],split[(this.labelIndex * 2) + 1]));
  if (delete) {
    LOG.info("Running deletes");
  }
 else {
    LOG.info("Running copiers");
  }
  if (delete) {
    TableMapReduceUtil.initTableMapperJob(tableName.getNameAsString(),scan,VisibilityDeleteImport.class,null,null,job);
  }
 else {
    TableMapReduceUtil.initTableMapperJob(tableName.getNameAsString(),scan,VisibilityImport.class,null,null,job);
  }
  job.getConfiguration().setBoolean("mapreduce.map.speculative",false);
  job.getConfiguration().setBoolean("mapreduce.reduce.speculative",false);
  TableMapReduceUtil.initTableReducerJob(COMMON_TABLE_NAME,null,job,null,null,null,null);
  TableMapReduceUtil.addDependencyJars(job);
  TableMapReduceUtil.addDependencyJars(job.getConfiguration(),AbstractHBaseTool.class);
  TableMapReduceUtil.initCredentials(job);
  job.setNumReduceTasks(0);
  boolean success=job.waitForCompletion(true);
  return success ? 0 : 1;
}
