{
  if (args.length < 5) {
    System.err.println("Usage: Loop <num iterations> " + "<num mappers> <num nodes per mapper> <output dir> " + "<num reducers> [<width> <wrap multiplier>]");
    return 1;
  }
  LOG.info("Running Loop with args:" + Arrays.deepToString(args));
  int numIterations=Integer.parseInt(args[0]);
  int numMappers=Integer.parseInt(args[1]);
  long numNodes=Long.parseLong(args[2]);
  String outputDir=args[3];
  int numReducers=Integer.parseInt(args[4]);
  Integer width=(args.length < 6) ? null : Integer.parseInt(args[5]);
  Integer wrapMultiplier=(args.length < 7) ? null : Integer.parseInt(args[6]);
  long expectedNumNodes=0;
  if (numIterations < 0) {
    numIterations=Integer.MAX_VALUE;
  }
  for (int i=0; i < numIterations; i++) {
    LOG.info("Starting iteration = " + i);
    LOG.info("Generating data");
    runGenerator(numMappers,numNodes,outputDir,width,wrapMultiplier,0);
    expectedNumNodes+=numMappers * numNodes;
    LOG.info("Running copier");
    sleep(SLEEP_IN_MS);
    runCopier(outputDir);
    LOG.info("Verifying copied data");
    sleep(SLEEP_IN_MS);
    runVerify(outputDir,numReducers,expectedNumNodes,true);
    sleep(SLEEP_IN_MS);
    for (int j=0; j < DEFAULT_TABLES_COUNT; j++) {
      LOG.info("Deleting data on table with index: " + j);
      runDelete(numMappers,numNodes,outputDir,width,wrapMultiplier,j);
      sleep(SLEEP_IN_MS);
      LOG.info("Verifying common table after deleting");
      runVerify(outputDir,numReducers,expectedNumNodes,j);
      sleep(SLEEP_IN_MS);
    }
  }
  return 0;
}
