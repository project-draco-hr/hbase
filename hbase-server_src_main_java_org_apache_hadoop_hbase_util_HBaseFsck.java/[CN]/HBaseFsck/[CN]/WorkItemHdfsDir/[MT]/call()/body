{
  try {
    FileStatus[] regionDirs=fs.listStatus(tableDir.getPath());
    for (    FileStatus regionDir : regionDirs) {
      String encodedName=regionDir.getPath().getName();
      if (!encodedName.toLowerCase().matches("[0-9a-f]+")) {
        continue;
      }
      LOG.debug("Loading region info from hdfs:" + regionDir.getPath());
      HbckInfo hbi=hbck.getOrCreateInfo(encodedName);
      HdfsEntry he=new HdfsEntry();
synchronized (hbi) {
        if (hbi.getHdfsRegionDir() != null) {
          errors.print("Directory " + encodedName + " duplicate??"+ hbi.getHdfsRegionDir());
        }
        he.hdfsRegionDir=regionDir.getPath();
        he.hdfsRegionDirModTime=regionDir.getModificationTime();
        Path regioninfoFile=new Path(he.hdfsRegionDir,HRegionFileSystem.REGION_INFO_FILE);
        he.hdfsRegioninfoFilePresent=fs.exists(regioninfoFile);
        he.hdfsOnlyEdits=true;
        FileStatus[] subDirs=fs.listStatus(regionDir.getPath());
        Path ePath=HLogUtil.getRegionDirRecoveredEditsDir(regionDir.getPath());
        for (        FileStatus subDir : subDirs) {
          String sdName=subDir.getPath().getName();
          if (!sdName.startsWith(".") && !sdName.equals(ePath.getName())) {
            he.hdfsOnlyEdits=false;
            break;
          }
        }
        hbi.hdfsEntry=he;
      }
    }
  }
 catch (  IOException e) {
    errors.reportError(ERROR_CODE.RS_CONNECT_FAILURE,"Table Directory: " + tableDir.getPath().getName() + " Unable to fetch region information. "+ e);
    throw e;
  }
  return null;
}
