{
  String thread=Thread.currentThread().getName();
  LOG.info("== [" + thread + "] Merging regions into one region: "+ Joiner.on(",").join(overlap));
  Pair<byte[],byte[]> range=null;
  for (  HbckInfo hi : overlap) {
    if (range == null) {
      range=new Pair<byte[],byte[]>(hi.getStartKey(),hi.getEndKey());
    }
 else {
      if (RegionSplitCalculator.BYTES_COMPARATOR.compare(hi.getStartKey(),range.getFirst()) < 0) {
        range.setFirst(hi.getStartKey());
      }
      if (RegionSplitCalculator.BYTES_COMPARATOR.compare(hi.getEndKey(),range.getSecond()) > 0) {
        range.setSecond(hi.getEndKey());
      }
    }
    LOG.debug("[" + thread + "] Closing region before moving data around: "+ hi);
    LOG.debug("[" + thread + "] Contained region dir before close");
    debugLsr(hi.getHdfsRegionDir());
    try {
      LOG.info("[" + thread + "] Closing region: "+ hi);
      closeRegion(hi);
    }
 catch (    IOException ioe) {
      LOG.warn("[" + thread + "] Was unable to close region "+ hi+ ".  Just continuing... ",ioe);
    }
catch (    InterruptedException e) {
      LOG.warn("[" + thread + "] Was unable to close region "+ hi+ ".  Just continuing... ",e);
    }
    try {
      LOG.info("[" + thread + "] Offlining region: "+ hi);
      offline(hi.getRegionName());
    }
 catch (    IOException ioe) {
      LOG.warn("[" + thread + "] Unable to offline region from master: "+ hi+ ".  Just continuing... ",ioe);
    }
  }
  HTableDescriptor htd=getTableInfo().getHTD();
  HRegionInfo newRegion=new HRegionInfo(htd.getTableName(),range.getFirst(),range.getSecond());
  HRegion region=HBaseFsckRepair.createHDFSRegionDir(conf,newRegion,htd);
  LOG.info("[" + thread + "] Created new empty container region: "+ newRegion+ " to contain regions: "+ Joiner.on(",").join(overlap));
  debugLsr(region.getRegionFileSystem().getRegionDir());
  boolean didFix=false;
  Path target=region.getRegionFileSystem().getRegionDir();
  for (  HbckInfo contained : overlap) {
    LOG.info("[" + thread + "] Merging "+ contained+ " into "+ target);
    int merges=mergeRegionDirs(target,contained);
    if (merges > 0) {
      didFix=true;
    }
  }
  if (didFix) {
    fixes++;
  }
}
