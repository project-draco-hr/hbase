{
  List<HbckInfo> metaRegions=Lists.newArrayList();
  for (  HbckInfo value : regionInfoMap.values()) {
    if (value.metaEntry != null && value.metaEntry.isMetaRegion()) {
      metaRegions.add(value);
    }
  }
  List<ServerName> servers=new ArrayList<ServerName>();
  HbckInfo metaHbckInfo=null;
  if (!metaRegions.isEmpty()) {
    metaHbckInfo=metaRegions.get(0);
    servers=metaHbckInfo.deployedOn;
  }
  if (servers.size() != 1) {
    if (servers.size() == 0) {
      errors.reportError(ERROR_CODE.NO_META_REGION,"hbase:meta is not found on any region.");
      if (shouldFixAssignments()) {
        errors.print("Trying to fix a problem with hbase:meta..");
        setShouldRerun();
        HBaseFsckRepair.fixUnassigned(admin,HRegionInfo.FIRST_META_REGIONINFO);
        HBaseFsckRepair.waitUntilAssigned(admin,HRegionInfo.FIRST_META_REGIONINFO);
      }
    }
 else     if (servers.size() > 1) {
      errors.reportError(ERROR_CODE.MULTI_META_REGION,"hbase:meta is found on more than one region.");
      if (shouldFixAssignments()) {
        if (metaHbckInfo == null) {
          errors.print("Unable to fix problem with hbase:meta due to hbase:meta region info missing");
          return false;
        }
        errors.print("Trying to fix a problem with hbase:meta..");
        setShouldRerun();
        HBaseFsckRepair.fixMultiAssignment(connection,metaHbckInfo.metaEntry,servers);
      }
    }
    return false;
  }
  return true;
}
