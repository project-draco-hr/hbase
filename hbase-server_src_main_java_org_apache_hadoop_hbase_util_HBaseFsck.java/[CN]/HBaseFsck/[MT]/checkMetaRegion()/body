{
  Map<Integer,HbckInfo> metaRegions=new HashMap<Integer,HbckInfo>();
  for (  HbckInfo value : regionInfoMap.values()) {
    if (value.metaEntry != null && value.metaEntry.isMetaRegion()) {
      metaRegions.put(value.getReplicaId(),value);
    }
  }
  int metaReplication=admin.getTableDescriptor(TableName.META_TABLE_NAME).getRegionReplication();
  boolean noProblem=true;
  for (int i=0; i < metaReplication; i++) {
    HbckInfo metaHbckInfo=metaRegions.remove(i);
    List<ServerName> servers=new ArrayList<ServerName>();
    if (metaHbckInfo != null) {
      servers=metaHbckInfo.deployedOn;
    }
    if (servers.size() != 1) {
      noProblem=false;
      if (servers.size() == 0) {
        assignMetaReplica(i);
      }
 else       if (servers.size() > 1) {
        errors.reportError(ERROR_CODE.MULTI_META_REGION,"hbase:meta, replicaId " + metaHbckInfo.getReplicaId() + " is found on more than one region.");
        if (shouldFixAssignments()) {
          errors.print("Trying to fix a problem with hbase:meta, replicaId " + metaHbckInfo.getReplicaId() + "..");
          setShouldRerun();
          HBaseFsckRepair.fixMultiAssignment(connection,metaHbckInfo.metaEntry,servers);
        }
      }
    }
  }
  for (  Map.Entry<Integer,HbckInfo> entry : metaRegions.entrySet()) {
    noProblem=false;
    errors.reportError(ERROR_CODE.SHOULD_NOT_BE_DEPLOYED,"hbase:meta replicas are deployed in excess. Configured " + metaReplication + ", deployed "+ metaRegions.size());
    if (shouldFixAssignments()) {
      errors.print("Trying to undeploy excess replica, replicaId: " + entry.getKey() + " of hbase:meta..");
      setShouldRerun();
      unassignMetaReplica(entry.getValue());
    }
  }
  return noProblem;
}
