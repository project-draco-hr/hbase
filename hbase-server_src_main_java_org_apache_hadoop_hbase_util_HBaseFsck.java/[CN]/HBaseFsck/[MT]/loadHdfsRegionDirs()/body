{
  Path rootDir=new Path(conf.get(HConstants.HBASE_DIR));
  FileSystem fs=rootDir.getFileSystem(conf);
  List<FileStatus> tableDirs=Lists.newArrayList();
  boolean foundVersionFile=false;
  FileStatus[] files=fs.listStatus(rootDir);
  for (  FileStatus file : files) {
    String dirName=file.getPath().getName();
    if (dirName.equals(HConstants.VERSION_FILE_NAME)) {
      foundVersionFile=true;
    }
 else {
      if (!checkMetaOnly || dirName.equals("-ROOT-") || dirName.equals(".META.")) {
        tableDirs.add(file);
      }
    }
  }
  if (!foundVersionFile) {
    errors.reportError(ERROR_CODE.NO_VERSION_FILE,"Version file does not exist in root dir " + rootDir);
    if (shouldFixVersionFile()) {
      LOG.info("Trying to create a new " + HConstants.VERSION_FILE_NAME + " file.");
      setShouldRerun();
      FSUtils.setVersion(fs,rootDir,conf.getInt(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000),conf.getInt(HConstants.VERSION_FILE_WRITE_ATTEMPTS,HConstants.DEFAULT_VERSION_FILE_WRITE_ATTEMPTS));
    }
  }
  WorkItemHdfsDir[] dirs=new WorkItemHdfsDir[tableDirs.size()];
  int num=0;
  for (  FileStatus tableDir : tableDirs) {
    LOG.debug("Loading region dirs from " + tableDir.getPath());
    dirs[num]=new WorkItemHdfsDir(this,fs,errors,tableDir);
    executor.execute(dirs[num]);
    num++;
  }
  for (int i=0; i < num; i++) {
    WorkItemHdfsDir dir=dirs[i];
synchronized (dir) {
      while (!dir.isDone()) {
        dir.wait();
      }
    }
  }
}
