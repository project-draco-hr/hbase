{
  tablesInfo.clear();
  Collection<HbckInfo> hbckInfos=regionInfoMap.values();
  List<WorkItemHdfsRegionInfo> hbis=new ArrayList<WorkItemHdfsRegionInfo>(hbckInfos.size());
  List<Future<Void>> hbiFutures;
  for (  HbckInfo hbi : hbckInfos) {
    WorkItemHdfsRegionInfo work=new WorkItemHdfsRegionInfo(hbi,this,errors);
    hbis.add(work);
  }
  hbiFutures=executor.invokeAll(hbis);
  for (int i=0; i < hbiFutures.size(); i++) {
    WorkItemHdfsRegionInfo work=hbis.get(i);
    Future<Void> f=hbiFutures.get(i);
    try {
      f.get();
    }
 catch (    ExecutionException e) {
      LOG.warn("Failed to read .regioninfo file for region " + work.hbi.getRegionNameAsString(),e.getCause());
    }
  }
  Path hbaseRoot=FSUtils.getRootDir(getConf());
  FileSystem fs=hbaseRoot.getFileSystem(getConf());
  for (  HbckInfo hbi : hbckInfos) {
    if (hbi.getHdfsHRI() == null) {
      continue;
    }
    TableName tableName=hbi.getTableName();
    if (tableName == null) {
      LOG.warn("tableName was null for: " + hbi);
      continue;
    }
    TableInfo modTInfo=tablesInfo.get(tableName);
    if (modTInfo == null) {
      modTInfo=new TableInfo(tableName);
      tablesInfo.put(tableName,modTInfo);
      try {
        HTableDescriptor htd=FSTableDescriptors.getTableDescriptorFromFs(fs,hbaseRoot,tableName);
        modTInfo.htds.add(htd);
      }
 catch (      IOException ioe) {
        if (!orphanTableDirs.containsKey(tableName)) {
          LOG.warn("Unable to read .tableinfo from " + hbaseRoot,ioe);
          errors.reportError(ERROR_CODE.NO_TABLEINFO_FILE,"Unable to read .tableinfo from " + hbaseRoot + "/"+ tableName);
          Set<String> columns=new HashSet<String>();
          orphanTableDirs.put(tableName,getColumnFamilyList(columns,hbi));
        }
      }
    }
    if (!hbi.isSkipChecks()) {
      modTInfo.addRegionInfo(hbi);
    }
  }
  loadTableInfosForTablesWithNoRegion();
  errors.print("");
  return tablesInfo;
}
