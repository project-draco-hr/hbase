{
  long sleepBeforeRerun=DEFAULT_SLEEP_BEFORE_RERUN;
  boolean checkCorruptHFiles=false;
  boolean sidelineCorruptHFiles=false;
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    if (cmd.equals("-help") || cmd.equals("-h")) {
      return printUsageAndExit();
    }
 else     if (cmd.equals("-details")) {
      setDisplayFullReport();
    }
 else     if (cmd.equals("-timelag")) {
      if (i == args.length - 1) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"HBaseFsck: -timelag needs a value.");
        return printUsageAndExit();
      }
      try {
        long timelag=Long.parseLong(args[i + 1]);
        setTimeLag(timelag);
      }
 catch (      NumberFormatException e) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"-timelag needs a numeric value.");
        return printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-sleepBeforeRerun")) {
      if (i == args.length - 1) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"HBaseFsck: -sleepBeforeRerun needs a value.");
        return printUsageAndExit();
      }
      try {
        sleepBeforeRerun=Long.parseLong(args[i + 1]);
      }
 catch (      NumberFormatException e) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"-sleepBeforeRerun needs a numeric value.");
        return printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-sidelineDir")) {
      if (i == args.length - 1) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"HBaseFsck: -sidelineDir needs a value.");
        return printUsageAndExit();
      }
      i++;
      setSidelineDir(args[i]);
    }
 else     if (cmd.equals("-fix")) {
      errors.reportError(ERROR_CODE.WRONG_USAGE,"This option is deprecated, please use  -fixAssignments instead.");
      setFixAssignments(true);
    }
 else     if (cmd.equals("-fixAssignments")) {
      setFixAssignments(true);
    }
 else     if (cmd.equals("-fixMeta")) {
      setFixMeta(true);
    }
 else     if (cmd.equals("-noHdfsChecking")) {
      setCheckHdfs(false);
    }
 else     if (cmd.equals("-fixHdfsHoles")) {
      setFixHdfsHoles(true);
    }
 else     if (cmd.equals("-fixHdfsOrphans")) {
      setFixHdfsOrphans(true);
    }
 else     if (cmd.equals("-fixTableOrphans")) {
      setFixTableOrphans(true);
    }
 else     if (cmd.equals("-fixHdfsOverlaps")) {
      setFixHdfsOverlaps(true);
    }
 else     if (cmd.equals("-fixVersionFile")) {
      setFixVersionFile(true);
    }
 else     if (cmd.equals("-sidelineBigOverlaps")) {
      setSidelineBigOverlaps(true);
    }
 else     if (cmd.equals("-fixSplitParents")) {
      setFixSplitParents(true);
    }
 else     if (cmd.equals("-ignorePreCheckPermission")) {
      setIgnorePreCheckPermission(true);
    }
 else     if (cmd.equals("-checkCorruptHFiles")) {
      checkCorruptHFiles=true;
    }
 else     if (cmd.equals("-sidelineCorruptHFiles")) {
      sidelineCorruptHFiles=true;
    }
 else     if (cmd.equals("-fixReferenceFiles")) {
      setFixReferenceFiles(true);
    }
 else     if (cmd.equals("-fixEmptyMetaCells")) {
      setFixEmptyMetaCells(true);
    }
 else     if (cmd.equals("-repair")) {
      setFixHdfsHoles(true);
      setFixHdfsOrphans(true);
      setFixMeta(true);
      setFixAssignments(true);
      setFixHdfsOverlaps(true);
      setFixVersionFile(true);
      setSidelineBigOverlaps(true);
      setFixSplitParents(false);
      setCheckHdfs(true);
      setFixReferenceFiles(true);
      setFixTableLocks(true);
    }
 else     if (cmd.equals("-repairHoles")) {
      setFixHdfsHoles(true);
      setFixHdfsOrphans(false);
      setFixMeta(true);
      setFixAssignments(true);
      setFixHdfsOverlaps(false);
      setSidelineBigOverlaps(false);
      setFixSplitParents(false);
      setCheckHdfs(true);
    }
 else     if (cmd.equals("-maxOverlapsToSideline")) {
      if (i == args.length - 1) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"-maxOverlapsToSideline needs a numeric value argument.");
        return printUsageAndExit();
      }
      try {
        int maxOverlapsToSideline=Integer.parseInt(args[i + 1]);
        setMaxOverlapsToSideline(maxOverlapsToSideline);
      }
 catch (      NumberFormatException e) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"-maxOverlapsToSideline needs a numeric value argument.");
        return printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-maxMerge")) {
      if (i == args.length - 1) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"-maxMerge needs a numeric value argument.");
        return printUsageAndExit();
      }
      try {
        int maxMerge=Integer.parseInt(args[i + 1]);
        setMaxMerge(maxMerge);
      }
 catch (      NumberFormatException e) {
        errors.reportError(ERROR_CODE.WRONG_USAGE,"-maxMerge needs a numeric value argument.");
        return printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-summary")) {
      setSummary();
    }
 else     if (cmd.equals("-metaonly")) {
      setCheckMetaOnly();
    }
 else     if (cmd.equals("-boundaries")) {
      setRegionBoundariesCheck();
    }
 else     if (cmd.equals("-fixTableLocks")) {
      setFixTableLocks(true);
    }
 else     if (cmd.startsWith("-")) {
      errors.reportError(ERROR_CODE.WRONG_USAGE,"Unrecognized option:" + cmd);
      return printUsageAndExit();
    }
 else {
      includeTable(TableName.valueOf(cmd));
      errors.print("Allow checking/fixes for table: " + cmd);
    }
  }
  errors.print("HBaseFsck command line options: " + StringUtils.join(args," "));
  try {
    preCheckPermission();
  }
 catch (  AccessDeniedException ace) {
    Runtime.getRuntime().exit(-1);
  }
catch (  IOException ioe) {
    Runtime.getRuntime().exit(-1);
  }
  connect();
  try {
    if (checkCorruptHFiles || sidelineCorruptHFiles) {
      LOG.info("Checking all hfiles for corruption");
      HFileCorruptionChecker hfcc=createHFileCorruptionChecker(sidelineCorruptHFiles);
      setHFileCorruptionChecker(hfcc);
      Collection<TableName> tables=getIncludedTables();
      Collection<Path> tableDirs=new ArrayList<Path>();
      Path rootdir=FSUtils.getRootDir(getConf());
      if (tables.size() > 0) {
        for (        TableName t : tables) {
          tableDirs.add(FSUtils.getTableDir(rootdir,t));
        }
      }
 else {
        tableDirs=FSUtils.getTableDirs(FSUtils.getCurrentFileSystem(getConf()),rootdir);
      }
      hfcc.checkTables(tableDirs);
      hfcc.report(errors);
    }
    int code=onlineHbck();
    setRetCode(code);
    if (shouldRerun()) {
      try {
        LOG.info("Sleeping " + sleepBeforeRerun + "ms before re-checking after fix...");
        Thread.sleep(sleepBeforeRerun);
      }
 catch (      InterruptedException ie) {
        LOG.warn("Interrupted while sleeping");
        return this;
      }
      setFixAssignments(false);
      setFixMeta(false);
      setFixHdfsHoles(false);
      setFixHdfsOverlaps(false);
      setFixVersionFile(false);
      setFixTableOrphans(false);
      errors.resetErrors();
      code=onlineHbck();
      setRetCode(code);
    }
  }
  finally {
    IOUtils.closeQuietly(this);
  }
  return this;
}
