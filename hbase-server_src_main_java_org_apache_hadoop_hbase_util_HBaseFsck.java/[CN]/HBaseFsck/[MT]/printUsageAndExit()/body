{
  StringWriter sw=new StringWriter(2048);
  PrintWriter out=new PrintWriter(sw);
  out.println("Usage: fsck [opts] {only tables}");
  out.println(" where [opts] are:");
  out.println("   -help Display help options (this)");
  out.println("   -details Display full report of all regions.");
  out.println("   -timelag <timeInSeconds>  Process only regions that " + " have not experienced any metadata updates in the last " + " <timeInSeconds> seconds.");
  out.println("   -sleepBeforeRerun <timeInSeconds> Sleep this many seconds" + " before checking if the fix worked if run with -fix");
  out.println("   -summary Print only summary of the tables and status.");
  out.println("   -metaonly Only check the state of the hbase:meta table.");
  out.println("   -sidelineDir <hdfs://> HDFS path to backup existing meta.");
  out.println("   -boundaries Verify that regions boundaries are the same between META and store files.");
  out.println("   -exclusive Abort if another hbck is exclusive or fixing.");
  out.println("");
  out.println("  Metadata Repair options: (expert features, use with caution!)");
  out.println("   -fix              Try to fix region assignments.  This is for backwards compatiblity");
  out.println("   -fixAssignments   Try to fix region assignments.  Replaces the old -fix");
  out.println("   -fixMeta          Try to fix meta problems.  This assumes HDFS region info is good.");
  out.println("   -noHdfsChecking   Don't load/check region info from HDFS." + " Assumes hbase:meta region info is good. Won't check/fix any HDFS issue, e.g. hole, orphan, or overlap");
  out.println("   -fixHdfsHoles     Try to fix region holes in hdfs.");
  out.println("   -fixHdfsOrphans   Try to fix region dirs with no .regioninfo file in hdfs");
  out.println("   -fixTableOrphans  Try to fix table dirs with no .tableinfo file in hdfs (online mode only)");
  out.println("   -fixHdfsOverlaps  Try to fix region overlaps in hdfs.");
  out.println("   -fixVersionFile   Try to fix missing hbase.version file in hdfs.");
  out.println("   -maxMerge <n>     When fixing region overlaps, allow at most <n> regions to merge. (n=" + DEFAULT_MAX_MERGE + " by default)");
  out.println("   -sidelineBigOverlaps  When fixing region overlaps, allow to sideline big overlaps");
  out.println("   -maxOverlapsToSideline <n>  When fixing region overlaps, allow at most <n> regions to sideline per group. (n=" + DEFAULT_OVERLAPS_TO_SIDELINE + " by default)");
  out.println("   -fixSplitParents  Try to force offline split parents to be online.");
  out.println("   -ignorePreCheckPermission  ignore filesystem permission pre-check");
  out.println("   -fixReferenceFiles  Try to offline lingering reference store files");
  out.println("   -fixEmptyMetaCells  Try to fix hbase:meta entries not referencing any region" + " (empty REGIONINFO_QUALIFIER rows)");
  out.println("");
  out.println("  Datafile Repair options: (expert features, use with caution!)");
  out.println("   -checkCorruptHFiles     Check all Hfiles by opening them to make sure they are valid");
  out.println("   -sidelineCorruptHFiles  Quarantine corrupted HFiles.  implies -checkCorruptHFiles");
  out.println("");
  out.println("  Metadata Repair shortcuts");
  out.println("   -repair           Shortcut for -fixAssignments -fixMeta -fixHdfsHoles " + "-fixHdfsOrphans -fixHdfsOverlaps -fixVersionFile -sidelineBigOverlaps -fixReferenceFiles -fixTableLocks");
  out.println("   -repairHoles      Shortcut for -fixAssignments -fixMeta -fixHdfsHoles");
  out.println("");
  out.println("  Table lock options");
  out.println("   -fixTableLocks    Deletes table locks held for a long time (hbase.table.lock.expire.ms, 10min by default)");
  out.println("");
  out.println(" Replication options");
  out.println("   -fixReplication   Deletes replication queues for removed peers");
  out.flush();
  errors.reportError(ERROR_CODE.WRONG_USAGE,sw.toString());
  setRetCode(-2);
  return this;
}
