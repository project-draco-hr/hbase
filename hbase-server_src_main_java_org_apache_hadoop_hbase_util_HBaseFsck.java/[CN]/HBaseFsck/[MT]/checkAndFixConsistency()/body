{
  List<CheckRegionConsistencyWorkItem> workItems=new ArrayList<CheckRegionConsistencyWorkItem>(regionInfoMap.size());
  for (  java.util.Map.Entry<String,HbckInfo> e : regionInfoMap.entrySet()) {
    if (e.getValue().getReplicaId() == HRegionInfo.DEFAULT_REPLICA_ID) {
      workItems.add(new CheckRegionConsistencyWorkItem(e.getKey(),e.getValue()));
    }
  }
  checkRegionConsistencyConcurrently(workItems);
  boolean prevHdfsCheck=shouldCheckHdfs();
  setCheckHdfs(false);
  List<CheckRegionConsistencyWorkItem> replicaWorkItems=new ArrayList<CheckRegionConsistencyWorkItem>(regionInfoMap.size());
  for (  java.util.Map.Entry<String,HbckInfo> e : regionInfoMap.entrySet()) {
    if (e.getValue().getReplicaId() != HRegionInfo.DEFAULT_REPLICA_ID) {
      replicaWorkItems.add(new CheckRegionConsistencyWorkItem(e.getKey(),e.getValue()));
    }
  }
  checkRegionConsistencyConcurrently(replicaWorkItems);
  setCheckHdfs(prevHdfsCheck);
  int terminateThreshold=getConf().getInt("hbase.hbck.skipped.regions.limit",0);
  int numOfSkippedRegions=skippedRegions.size();
  if (numOfSkippedRegions > 0 && numOfSkippedRegions > terminateThreshold) {
    throw new IOException(numOfSkippedRegions + " region(s) could not be checked or repaired.  See logs for detail.");
  }
  if (shouldCheckHdfs()) {
    checkAndFixTableStates();
  }
}
