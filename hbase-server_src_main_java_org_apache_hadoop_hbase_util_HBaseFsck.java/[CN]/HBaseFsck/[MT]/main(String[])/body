{
  Configuration conf=HBaseConfiguration.create();
  Path hbasedir=new Path(conf.get(HConstants.HBASE_DIR));
  URI defaultFs=hbasedir.getFileSystem(conf).getUri();
  conf.set("fs.defaultFS",defaultFs.toString());
  conf.set("fs.default.name",defaultFs.toString());
  HBaseFsck fsck=new HBaseFsck(conf);
  long sleepBeforeRerun=DEFAULT_SLEEP_BEFORE_RERUN;
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    if (cmd.equals("-help") || cmd.equals("-h")) {
      printUsageAndExit();
    }
 else     if (cmd.equals("-details")) {
      fsck.setDisplayFullReport();
    }
 else     if (cmd.equals("-timelag")) {
      if (i == args.length - 1) {
        System.err.println("HBaseFsck: -timelag needs a value.");
        printUsageAndExit();
      }
      try {
        long timelag=Long.parseLong(args[i + 1]);
        fsck.setTimeLag(timelag);
      }
 catch (      NumberFormatException e) {
        System.err.println("-timelag needs a numeric value.");
        printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-sleepBeforeRerun")) {
      if (i == args.length - 1) {
        System.err.println("HBaseFsck: -sleepBeforeRerun needs a value.");
        printUsageAndExit();
      }
      try {
        sleepBeforeRerun=Long.parseLong(args[i + 1]);
      }
 catch (      NumberFormatException e) {
        System.err.println("-sleepBeforeRerun needs a numeric value.");
        printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-fix")) {
      System.err.println("This option is deprecated, please use " + "-fixAssignments instead.");
      fsck.setFixAssignments(true);
    }
 else     if (cmd.equals("-fixAssignments")) {
      fsck.setFixAssignments(true);
    }
 else     if (cmd.equals("-fixMeta")) {
      fsck.setFixMeta(true);
    }
 else     if (cmd.equals("-fixHdfsHoles")) {
      fsck.setFixHdfsHoles(true);
    }
 else     if (cmd.equals("-fixHdfsOrphans")) {
      fsck.setFixHdfsOrphans(true);
    }
 else     if (cmd.equals("-fixHdfsOverlaps")) {
      fsck.setFixHdfsOverlaps(true);
    }
 else     if (cmd.equals("-fixVersionFile")) {
      fsck.setFixVersionFile(true);
    }
 else     if (cmd.equals("-sidelineBigOverlaps")) {
      fsck.setSidelineBigOverlaps(true);
    }
 else     if (cmd.equals("-fixSplitParents")) {
      fsck.setFixSplitParents(true);
    }
 else     if (cmd.equals("-repair")) {
      fsck.setFixHdfsHoles(true);
      fsck.setFixHdfsOrphans(true);
      fsck.setFixMeta(true);
      fsck.setFixAssignments(true);
      fsck.setFixHdfsOverlaps(true);
      fsck.setFixVersionFile(true);
      fsck.setSidelineBigOverlaps(true);
      fsck.setFixSplitParents(false);
    }
 else     if (cmd.equals("-repairHoles")) {
      fsck.setFixHdfsHoles(true);
      fsck.setFixHdfsOrphans(false);
      fsck.setFixMeta(true);
      fsck.setFixAssignments(true);
      fsck.setFixHdfsOverlaps(false);
      fsck.setSidelineBigOverlaps(false);
      fsck.setFixSplitParents(false);
    }
 else     if (cmd.equals("-maxOverlapsToSideline")) {
      if (i == args.length - 1) {
        System.err.println("-maxOverlapsToSideline needs a numeric value argument.");
        printUsageAndExit();
      }
      try {
        int maxOverlapsToSideline=Integer.parseInt(args[i + 1]);
        fsck.setMaxOverlapsToSideline(maxOverlapsToSideline);
      }
 catch (      NumberFormatException e) {
        System.err.println("-maxOverlapsToSideline needs a numeric value argument.");
        printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-maxMerge")) {
      if (i == args.length - 1) {
        System.err.println("-maxMerge needs a numeric value argument.");
        printUsageAndExit();
      }
      try {
        int maxMerge=Integer.parseInt(args[i + 1]);
        fsck.setMaxMerge(maxMerge);
      }
 catch (      NumberFormatException e) {
        System.err.println("-maxMerge needs a numeric value argument.");
        printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-summary")) {
      fsck.setSummary();
    }
 else     if (cmd.equals("-metaonly")) {
      fsck.setCheckMetaOnly();
    }
 else     if (cmd.startsWith("-")) {
      System.err.println("Unrecognized option:" + cmd);
      printUsageAndExit();
    }
 else {
      fsck.includeTable(cmd);
      System.out.println("Allow checking/fixes for table: " + cmd);
    }
  }
  fsck.connect();
  int code=fsck.onlineHbck();
  if (fsck.shouldRerun()) {
    try {
      LOG.info("Sleeping " + sleepBeforeRerun + "ms before re-checking after fix...");
      Thread.sleep(sleepBeforeRerun);
    }
 catch (    InterruptedException ie) {
      Runtime.getRuntime().exit(code);
    }
    fsck.setFixAssignments(false);
    fsck.setFixMeta(false);
    fsck.setFixHdfsHoles(false);
    fsck.setFixHdfsOverlaps(false);
    fsck.setFixVersionFile(false);
    fsck.errors.resetErrors();
    code=fsck.onlineHbck();
  }
  Runtime.getRuntime().exit(code);
}
