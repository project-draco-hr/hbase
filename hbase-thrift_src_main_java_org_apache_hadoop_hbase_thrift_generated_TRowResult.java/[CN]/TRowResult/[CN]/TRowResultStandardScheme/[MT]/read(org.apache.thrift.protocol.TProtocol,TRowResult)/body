{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.row=iprot.readBinary();
        struct.setRowIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map8=iprot.readMapBegin();
      struct.columns=new HashMap<ByteBuffer,TCell>(2 * _map8.size);
      ByteBuffer _key9;
      TCell _val10;
      for (int _i11=0; _i11 < _map8.size; ++_i11) {
        _key9=iprot.readBinary();
        _val10=new TCell();
        _val10.read(iprot);
        struct.columns.put(_key9,_val10);
      }
      iprot.readMapEnd();
    }
    struct.setColumnsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list12=iprot.readListBegin();
  struct.sortedColumns=new ArrayList<TColumn>(_list12.size);
  TColumn _elem13;
  for (int _i14=0; _i14 < _list12.size; ++_i14) {
    _elem13=new TColumn();
    _elem13.read(iprot);
    struct.sortedColumns.add(_elem13);
  }
  iprot.readListEnd();
}
struct.setSortedColumnsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
