{
  if (cell instanceof ExtendedCell) {
    return ((ExtendedCell)cell).write(out,withTags);
  }
 else {
    short rlen=cell.getRowLength();
    byte flen=cell.getFamilyLength();
    int qlen=cell.getQualifierLength();
    int vlen=cell.getValueLength();
    int tlen=cell.getTagsLength();
    int size=0;
    int klen=keyLength(rlen,flen,qlen);
    ByteBufferUtils.putInt(out,klen);
    ByteBufferUtils.putInt(out,vlen);
    StreamUtils.writeShort(out,rlen);
    out.write(cell.getRowArray(),cell.getRowOffset(),rlen);
    out.write(flen);
    out.write(cell.getFamilyArray(),cell.getFamilyOffset(),flen);
    out.write(cell.getQualifierArray(),cell.getQualifierOffset(),qlen);
    StreamUtils.writeLong(out,cell.getTimestamp());
    out.write(cell.getTypeByte());
    out.write(cell.getValueArray(),cell.getValueOffset(),vlen);
    size=klen + vlen + KeyValue.KEYVALUE_INFRASTRUCTURE_SIZE;
    if (withTags && tlen > 0) {
      out.write((byte)(0xff & (tlen >> 8)));
      out.write((byte)(0xff & tlen));
      out.write(cell.getTagsArray(),cell.getTagsOffset(),tlen);
      size+=tlen + KeyValue.TAGS_LENGTH_SIZE;
    }
    return size;
  }
}
