{
  if (state != COMPLETE) {
    if (index >= limit) {
      return state;
    }
    byte byte1=(byte)state;
    if (byte1 < (byte)0xE0) {
      if (byte1 < (byte)0xC2 || buffer.get(index++) > (byte)0xBF) {
        return MALFORMED;
      }
    }
 else     if (byte1 < (byte)0xF0) {
      byte byte2=(byte)~(state >> 8);
      if (byte2 == 0) {
        byte2=buffer.get(index++);
        if (index >= limit) {
          return incompleteStateFor(byte1,byte2);
        }
      }
      if (byte2 > (byte)0xBF || (byte1 == (byte)0xE0 && byte2 < (byte)0xA0) || (byte1 == (byte)0xED && byte2 >= (byte)0xA0) || buffer.get(index++) > (byte)0xBF) {
        return MALFORMED;
      }
    }
 else {
      byte byte2=(byte)~(state >> 8);
      byte byte3=0;
      if (byte2 == 0) {
        byte2=buffer.get(index++);
        if (index >= limit) {
          return incompleteStateFor(byte1,byte2);
        }
      }
 else {
        byte3=(byte)(state >> 16);
      }
      if (byte3 == 0) {
        byte3=buffer.get(index++);
        if (index >= limit) {
          return incompleteStateFor(byte1,byte2,byte3);
        }
      }
      if (byte2 > (byte)0xBF || (((byte1 << 28) + (byte2 - (byte)0x90)) >> 30) != 0 || byte3 > (byte)0xBF || buffer.get(index++) > (byte)0xBF) {
        return MALFORMED;
      }
    }
  }
  return partialIsValidUtf8(buffer,index,limit);
}
