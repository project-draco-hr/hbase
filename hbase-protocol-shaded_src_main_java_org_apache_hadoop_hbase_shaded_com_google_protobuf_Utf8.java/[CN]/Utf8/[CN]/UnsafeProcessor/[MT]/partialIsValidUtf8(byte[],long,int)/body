{
  final int skipped=unsafeEstimateConsecutiveAscii(bytes,offset,remaining);
  remaining-=skipped;
  offset+=skipped;
  for (; ; ) {
    int byte1=0;
    for (; remaining > 0 && (byte1=UnsafeUtil.getByte(bytes,offset++)) >= 0; --remaining) {
    }
    if (remaining == 0) {
      return COMPLETE;
    }
    remaining--;
    if (byte1 < (byte)0xE0) {
      if (remaining == 0) {
        return byte1;
      }
      remaining--;
      if (byte1 < (byte)0xC2 || UnsafeUtil.getByte(bytes,offset++) > (byte)0xBF) {
        return MALFORMED;
      }
    }
 else     if (byte1 < (byte)0xF0) {
      if (remaining < 2) {
        return unsafeIncompleteStateFor(bytes,byte1,offset,remaining);
      }
      remaining-=2;
      final int byte2;
      if ((byte2=UnsafeUtil.getByte(bytes,offset++)) > (byte)0xBF || (byte1 == (byte)0xE0 && byte2 < (byte)0xA0) || (byte1 == (byte)0xED && byte2 >= (byte)0xA0) || UnsafeUtil.getByte(bytes,offset++) > (byte)0xBF) {
        return MALFORMED;
      }
    }
 else {
      if (remaining < 3) {
        return unsafeIncompleteStateFor(bytes,byte1,offset,remaining);
      }
      remaining-=3;
      final int byte2;
      if ((byte2=UnsafeUtil.getByte(bytes,offset++)) > (byte)0xBF || (((byte1 << 28) + (byte2 - (byte)0x90)) >> 30) != 0 || UnsafeUtil.getByte(bytes,offset++) > (byte)0xBF || UnsafeUtil.getByte(bytes,offset++) > (byte)0xBF) {
        return MALFORMED;
      }
    }
  }
}
