{
  HashMap<ColumnFamilyQualifierMapKeyWrapper,ColumnFilter> columnFamilyQualifierFilterMap=new HashMap<>();
  FilterProtos.SQLPredicatePushDownFilter proto;
  try {
    proto=FilterProtos.SQLPredicatePushDownFilter.parseFrom(pbBytes);
  }
 catch (  InvalidProtocolBufferException e) {
    throw new DeserializationException(e);
  }
  final List<FilterProtos.SQLPredicatePushDownColumnFilter> columnFilterListList=proto.getColumnFilterListList();
  for (  FilterProtos.SQLPredicatePushDownColumnFilter columnFilter : columnFilterListList) {
    byte[] columnFamily=columnFilter.getColumnFamily().toByteArray();
    byte[] qualifier=columnFilter.getQualifier().toByteArray();
    final ColumnFamilyQualifierMapKeyWrapper columnFamilyQualifierMapKeyWrapper=new ColumnFamilyQualifierMapKeyWrapper(columnFamily,0,columnFamily.length,qualifier,0,qualifier.length);
    final MutableList<byte[]> points=new MutableList<>();
    final MutableList<ScanRange> scanRanges=new MutableList<>();
    for (    ByteString byteString : columnFilter.getGetPointListList()) {
      points.$plus$eq(byteString.toByteArray());
    }
    for (    FilterProtos.RowRange rowRange : columnFilter.getRangeListList()) {
      ScanRange scanRange=new ScanRange(rowRange.getStopRow().toByteArray(),rowRange.getStopRowInclusive(),rowRange.getStartRow().toByteArray(),rowRange.getStartRowInclusive());
      scanRanges.$plus$eq(scanRange);
    }
    final ColumnFilter columnFilterObj=new ColumnFilter(null,null,points,scanRanges);
    columnFamilyQualifierFilterMap.put(columnFamilyQualifierMapKeyWrapper,columnFilterObj);
  }
  return new SparkSQLPushDownFilter(columnFamilyQualifierFilterMap);
}
