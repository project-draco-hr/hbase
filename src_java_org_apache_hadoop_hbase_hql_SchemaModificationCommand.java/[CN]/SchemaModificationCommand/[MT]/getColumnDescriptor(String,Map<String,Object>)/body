{
  initOptions();
  Set<String> specs=columnSpec.keySet();
  for (  String spec : specs) {
    spec=spec.toUpperCase();
    if (spec.equals("MAX_VERSIONS")) {
      maxVersions=(Integer)columnSpec.get(spec);
    }
 else     if (spec.equals("MAX_LENGTH")) {
      maxLength=(Integer)columnSpec.get(spec);
    }
 else     if (spec.equals("COMPRESSION")) {
      compression=HColumnDescriptor.CompressionType.valueOf(((String)columnSpec.get(spec)).toUpperCase());
    }
 else     if (spec.equals("IN_MEMORY")) {
      inMemory=(Boolean)columnSpec.get(spec);
    }
 else     if (spec.equals("BLOCK_CACHE_ENABLED")) {
      blockCacheEnabled=(Boolean)columnSpec.get(spec);
    }
 else     if (spec.equals("BLOOMFILTER")) {
      bloomFilterType=BloomFilterType.valueOf(((String)columnSpec.get(spec)).toUpperCase());
    }
 else     if (spec.equals("VECTOR_SIZE")) {
      vectorSize=(Integer)columnSpec.get(spec);
    }
 else     if (spec.equals("NUM_HASH")) {
      numHash=(Integer)columnSpec.get(spec);
    }
 else     if (spec.equals("NUM_ENTRIES")) {
      numEntries=(Integer)columnSpec.get(spec);
    }
 else     if (spec.equals("TTL")) {
      timeToLive=(Integer)columnSpec.get(spec);
    }
 else {
      throw new IllegalArgumentException("Invalid option: " + spec);
    }
  }
  if (bloomFilterType != null) {
    if (specs.contains("NUM_ENTRIES")) {
      bloomFilterDesc=new BloomFilterDescriptor(bloomFilterType,numEntries);
    }
 else {
      bloomFilterDesc=new BloomFilterDescriptor(bloomFilterType,vectorSize,numHash);
    }
  }
  column=appendDelimiter(column);
  HColumnDescriptor columnDesc=new HColumnDescriptor(new Text(column),maxVersions,compression,inMemory,blockCacheEnabled,maxLength,timeToLive,bloomFilterDesc);
  return columnDesc;
}
