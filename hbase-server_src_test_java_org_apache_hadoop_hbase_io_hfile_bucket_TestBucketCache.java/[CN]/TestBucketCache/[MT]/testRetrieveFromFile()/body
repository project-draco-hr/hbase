{
  HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  Path testDir=TEST_UTIL.getDataTestDir();
  TEST_UTIL.getTestFileSystem().mkdirs(testDir);
  BucketCache bucketCache=new BucketCache("file:" + testDir + "/bucket.cache",capacitySize,constructedBlockSize,constructedBlockSizes,writeThreads,writerQLen,testDir + "/bucket.persistence");
  long usedSize=bucketCache.getAllocator().getUsedSize();
  assertTrue(usedSize == 0);
  HFileBlockPair[] blocks=CacheTestUtils.generateHFileBlocks(constructedBlockSize,1);
  for (  HFileBlockPair block : blocks) {
    bucketCache.cacheBlock(block.getBlockName(),block.getBlock());
  }
  for (  HFileBlockPair block : blocks) {
    cacheAndWaitUntilFlushedToBucket(bucketCache,block.getBlockName(),block.getBlock());
  }
  usedSize=bucketCache.getAllocator().getUsedSize();
  assertTrue(usedSize != 0);
  bucketCache.shutdown();
  bucketCache=new BucketCache("file:" + testDir + "/bucket.cache",capacitySize,constructedBlockSize,constructedBlockSizes,writeThreads,writerQLen,testDir + "/bucket.persistence");
  assertEquals(usedSize,bucketCache.getAllocator().getUsedSize());
  bucketCache.shutdown();
  int[] smallBucketSizes=new int[]{2 * 1024 + 1024,4 * 1024 + 1024};
  bucketCache=new BucketCache("file:" + testDir + "/bucket.cache",capacitySize,constructedBlockSize,smallBucketSizes,writeThreads,writerQLen,testDir + "/bucket.persistence");
  assertEquals(0,bucketCache.getAllocator().getUsedSize());
  assertEquals(0,bucketCache.backingMap.size());
  TEST_UTIL.cleanupTestDir();
}
