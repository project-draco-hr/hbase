{
  BucketAllocator mAllocator=cache.getAllocator();
  final List<Integer> BLOCKSIZES=Arrays.asList(4 * 1024,8 * 1024,64 * 1024,96 * 1024);
  boolean full=false;
  ArrayList<Long> allocations=new ArrayList<Long>();
  List<Integer> tmp=new ArrayList<Integer>(BLOCKSIZES);
  for (int i=0; !full; i++) {
    Integer blockSize=null;
    try {
      blockSize=randFrom(tmp);
      allocations.add(mAllocator.allocateBlock(blockSize));
    }
 catch (    CacheFullException cfe) {
      tmp.remove(blockSize);
      if (tmp.isEmpty())       full=true;
    }
  }
  for (  Integer blockSize : BLOCKSIZES) {
    BucketSizeInfo bucketSizeInfo=mAllocator.roundUpToBucketSizeInfo(blockSize);
    IndexStatistics indexStatistics=bucketSizeInfo.statistics();
    assertEquals("unexpected freeCount for " + bucketSizeInfo,0,indexStatistics.freeCount());
  }
  for (  long offset : allocations) {
    assertEquals(mAllocator.sizeOfAllocation(offset),mAllocator.freeBlock(offset));
  }
  assertEquals(0,mAllocator.getUsedSize());
}
