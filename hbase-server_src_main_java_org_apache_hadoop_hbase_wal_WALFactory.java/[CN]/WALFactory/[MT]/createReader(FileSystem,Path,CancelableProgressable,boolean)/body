{
  Class<? extends DefaultWALProvider.Reader> lrClass=allowCustom ? logReaderClass : ProtobufLogReader.class;
  try {
    long startWaiting=EnvironmentEdgeManager.currentTime();
    long openTimeout=timeoutMillis + startWaiting;
    int nbAttempt=0;
    while (true) {
      try {
        if (lrClass != ProtobufLogReader.class) {
          DefaultWALProvider.Reader reader=lrClass.newInstance();
          reader.init(fs,path,conf,null);
          return reader;
        }
 else {
          FSDataInputStream stream=fs.open(path);
          byte[] magic=new byte[ProtobufLogReader.PB_WAL_MAGIC.length];
          boolean isPbWal=(stream.read(magic) == magic.length) && Arrays.equals(magic,ProtobufLogReader.PB_WAL_MAGIC);
          DefaultWALProvider.Reader reader=isPbWal ? new ProtobufLogReader() : new SequenceFileLogReader();
          reader.init(fs,path,conf,stream);
          return reader;
        }
      }
 catch (      IOException e) {
        String msg=e.getMessage();
        if (msg != null && (msg.contains("Cannot obtain block length") || msg.contains("Could not obtain the last block") || msg.matches("Blocklist for [^ ]* has changed.*"))) {
          if (++nbAttempt == 1) {
            LOG.warn("Lease should have recovered. This is not expected. Will retry",e);
          }
          if (reporter != null && !reporter.progress()) {
            throw new InterruptedIOException("Operation is cancelled");
          }
          if (nbAttempt > 2 && openTimeout < EnvironmentEdgeManager.currentTime()) {
            LOG.error("Can't open after " + nbAttempt + " attempts and "+ (EnvironmentEdgeManager.currentTime() - startWaiting)+ "ms "+ " for "+ path);
          }
 else {
            try {
              Thread.sleep(nbAttempt < 3 ? 500 : 1000);
              continue;
            }
 catch (            InterruptedException ie) {
              InterruptedIOException iioe=new InterruptedIOException();
              iioe.initCause(ie);
              throw iioe;
            }
          }
        }
        throw e;
      }
    }
  }
 catch (  IOException ie) {
    throw ie;
  }
catch (  Exception e) {
    throw new IOException("Cannot get log reader",e);
  }
}
