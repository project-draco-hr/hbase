{
  CoprocessorRpcChannel channel=rsGroupTable.coprocessorService(ROW_KEY);
  MultiRowMutationProtos.MutateRowsRequest.Builder mmrBuilder=MultiRowMutationProtos.MutateRowsRequest.newBuilder();
  for (  Mutation mutation : mutations) {
    if (mutation instanceof Put) {
      mmrBuilder.addMutationRequest(org.apache.hadoop.hbase.protobuf.ProtobufUtil.toMutation(org.apache.hadoop.hbase.protobuf.generated.ClientProtos.MutationProto.MutationType.PUT,mutation));
    }
 else     if (mutation instanceof Delete) {
      mmrBuilder.addMutationRequest(org.apache.hadoop.hbase.protobuf.ProtobufUtil.toMutation(org.apache.hadoop.hbase.protobuf.generated.ClientProtos.MutationProto.MutationType.DELETE,mutation));
    }
 else {
      throw new DoNotRetryIOException("multiMutate doesn't support " + mutation.getClass().getName());
    }
  }
  MultiRowMutationProtos.MultiRowMutationService.BlockingInterface service=MultiRowMutationProtos.MultiRowMutationService.newBlockingStub(channel);
  try {
    service.mutateRows(null,mmrBuilder.build());
  }
 catch (  ServiceException ex) {
    ProtobufUtil.toIOException(ex);
  }
}
