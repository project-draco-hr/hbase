{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=13;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x3ff000000000000L & l) != 0L) {
            if (kind > 33)             kind=33;
            jjCheckNAdd(3);
          }
 else           if (curChar == 39)           jjCheckNAddStates(0,2);
 else           if (curChar == 34)           jjCheckNAdd(5);
 else           if (curChar == 45) {
            if (kind > 31)             kind=31;
            jjCheckNAdd(1);
          }
        if ((0x3ff000000000000L & l) != 0L) {
          if (kind > 32)           kind=32;
          jjCheckNAdd(2);
        }
      break;
case 13:
    if ((0x3ff200000000000L & l) != 0L) {
      if (kind > 31)       kind=31;
      jjCheckNAdd(1);
    }
  if ((0x3ff000000000000L & l) != 0L) {
    if (kind > 33)     kind=33;
    jjCheckNAdd(3);
  }
break;
case 1:
if ((0x3ff200000000000L & l) == 0L) break;
if (kind > 31) kind=31;
jjCheckNAdd(1);
break;
case 2:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 32) kind=32;
jjCheckNAdd(2);
break;
case 3:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 33) kind=33;
jjCheckNAdd(3);
break;
case 4:
if (curChar == 34) jjCheckNAdd(5);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddTwoStates(5,6);
break;
case 6:
if (curChar == 34 && kind > 34) kind=34;
break;
case 7:
if (curChar == 39) jjCheckNAddStates(0,2);
break;
case 8:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddStates(0,2);
break;
case 9:
if (curChar == 39) jjCheckNAddStates(3,5);
break;
case 10:
if (curChar == 39) jjstateSet[jjnewStateCnt++]=9;
break;
case 11:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddStates(3,5);
break;
case 12:
if (curChar == 39 && kind > 35) kind=35;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 31) kind=31;
jjCheckNAdd(1);
}
if ((0x7fffffe07fffffeL & l) != 0L) {
if (kind > 33) kind=33;
jjCheckNAdd(3);
}
break;
case 13:
if ((0x7fffffe87fffffeL & l) != 0L) {
if (kind > 31) kind=31;
jjCheckNAdd(1);
}
if ((0x7fffffe07fffffeL & l) != 0L) {
if (kind > 33) kind=33;
jjCheckNAdd(3);
}
break;
case 1:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 31) kind=31;
jjCheckNAdd(1);
break;
case 3:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 33) kind=33;
jjCheckNAdd(3);
break;
case 5:
jjAddStates(6,7);
break;
case 8:
jjCheckNAddStates(0,2);
break;
case 11:
jjCheckNAddStates(3,5);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 5:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(6,7);
break;
case 8:
if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddStates(0,2);
break;
case 11:
if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddStates(3,5);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=13 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
