{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=32;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x3ff000000000000L & l) != 0L) {
            if (kind > 66)             kind=66;
            jjCheckNAddStates(0,6);
          }
 else           if ((0x400a00000000000L & l) != 0L) {
            if (kind > 65)             kind=65;
            jjCheckNAdd(1);
          }
 else           if (curChar == 39)           jjCheckNAddStates(7,9);
 else           if (curChar == 34)           jjCheckNAdd(8);
 else           if (curChar == 46)           jjCheckNAdd(3);
        break;
case 1:
      if ((0x7ffa00000000000L & l) == 0L)       break;
    if (kind > 65)     kind=65;
  jjCheckNAdd(1);
break;
case 2:
if (curChar == 46) jjCheckNAdd(3);
break;
case 3:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAddTwoStates(3,4);
break;
case 5:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(6);
break;
case 6:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAdd(6);
break;
case 7:
if (curChar == 34) jjCheckNAdd(8);
break;
case 8:
if ((0xfffffffbffffffffL & l) != 0L) jjCheckNAddTwoStates(8,9);
break;
case 9:
if (curChar == 34 && kind > 69) kind=69;
break;
case 10:
if (curChar == 39) jjCheckNAddStates(7,9);
break;
case 11:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddStates(7,9);
break;
case 12:
if (curChar == 39) jjCheckNAddStates(10,12);
break;
case 13:
if (curChar == 39) jjstateSet[jjnewStateCnt++]=12;
break;
case 14:
if ((0xffffff7fffffffffL & l) != 0L) jjCheckNAddStates(10,12);
break;
case 15:
if (curChar == 39 && kind > 70) kind=70;
break;
case 16:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 66) kind=66;
jjCheckNAddStates(0,6);
break;
case 17:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 66) kind=66;
jjCheckNAdd(17);
break;
case 18:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(18,19);
break;
case 19:
if (curChar == 46) jjCheckNAdd(20);
break;
case 20:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAddTwoStates(20,21);
break;
case 22:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(23);
break;
case 23:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAdd(23);
break;
case 24:
if ((0x3ff000000000000L & l) != 0L) jjCheckNAddTwoStates(24,25);
break;
case 26:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(27);
break;
case 27:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAdd(27);
break;
case 28:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAddTwoStates(28,29);
break;
case 30:
if ((0x280000000000L & l) != 0L) jjCheckNAdd(31);
break;
case 31:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 67) kind=67;
jjCheckNAdd(31);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
case 1:
if ((0x47fffffe87fffffeL & l) == 0L) break;
if (kind > 65) kind=65;
jjCheckNAdd(1);
break;
case 4:
if ((0x2000000020L & l) != 0L) jjAddStates(13,14);
break;
case 8:
jjAddStates(15,16);
break;
case 11:
jjCheckNAddStates(7,9);
break;
case 14:
jjCheckNAddStates(10,12);
break;
case 21:
if ((0x2000000020L & l) != 0L) jjAddStates(17,18);
break;
case 25:
if ((0x2000000020L & l) != 0L) jjAddStates(19,20);
break;
case 29:
if ((0x2000000020L & l) != 0L) jjAddStates(21,22);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 8:
if ((jjbitVec0[i2] & l2) != 0L) jjAddStates(15,16);
break;
case 11:
if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddStates(7,9);
break;
case 14:
if ((jjbitVec0[i2] & l2) != 0L) jjCheckNAddStates(10,12);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=32 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
