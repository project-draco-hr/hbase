{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.row=iprot.readBinary();
  struct.setRowIsSet(true);
{
    org.apache.thrift.protocol.TList _list45=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.columnValues=new ArrayList<TColumnValue>(_list45.size);
    for (int _i46=0; _i46 < _list45.size; ++_i46) {
      TColumnValue _elem47;
      _elem47=new TColumnValue();
      _elem47.read(iprot);
      struct.columnValues.add(_elem47);
    }
  }
  struct.setColumnValuesIsSet(true);
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TMap _map48=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map48.size);
      for (int _i49=0; _i49 < _map48.size; ++_i49) {
        ByteBuffer _key50;
        ByteBuffer _val51;
        _key50=iprot.readBinary();
        _val51=iprot.readBinary();
        struct.attributes.put(_key50,_val51);
      }
    }
    struct.setAttributesIsSet(true);
  }
  if (incoming.get(2)) {
    struct.durability=TDurability.findByValue(iprot.readI32());
    struct.setDurabilityIsSet(true);
  }
  if (incoming.get(3)) {
    struct.cellVisibility=new TCellVisibility();
    struct.cellVisibility.read(iprot);
    struct.setCellVisibilityIsSet(true);
  }
}
