{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.row=iprot.readBinary();
        struct.setRowIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list34=iprot.readListBegin();
      struct.columnValues=new ArrayList<TColumnValue>(_list34.size);
      for (int _i35=0; _i35 < _list34.size; ++_i35) {
        TColumnValue _elem36;
        _elem36=new TColumnValue();
        _elem36.read(iprot);
        struct.columnValues.add(_elem36);
      }
      iprot.readListEnd();
    }
    struct.setColumnValuesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.timestamp=iprot.readI64();
struct.setTimestampIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map37=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map37.size);
for (int _i38=0; _i38 < _map37.size; ++_i38) {
ByteBuffer _key39;
ByteBuffer _val40;
_key39=iprot.readBinary();
_val40=iprot.readBinary();
struct.attributes.put(_key39,_val40);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.durability=TDurability.findByValue(iprot.readI32());
struct.setDurabilityIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.cellVisibility=new TCellVisibility();
struct.cellVisibility.read(iprot);
struct.setCellVisibilityIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
