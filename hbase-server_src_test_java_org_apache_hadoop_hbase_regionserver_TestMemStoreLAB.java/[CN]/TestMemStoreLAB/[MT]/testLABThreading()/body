{
  Configuration conf=new Configuration();
  MultithreadedTestUtil.TestContext ctx=new MultithreadedTestUtil.TestContext(conf);
  final AtomicInteger totalAllocated=new AtomicInteger();
  final MemStoreLAB mslab=new HeapMemStoreLAB();
  List<List<AllocRecord>> allocations=Lists.newArrayList();
  for (int i=0; i < 10; i++) {
    final List<AllocRecord> allocsByThisThread=Lists.newLinkedList();
    allocations.add(allocsByThisThread);
    TestThread t=new MultithreadedTestUtil.RepeatingTestThread(ctx){
      private Random r=new Random();
      @Override public void doAnAction() throws Exception {
        int valSize=r.nextInt(1000);
        KeyValue kv=new KeyValue(rk,cf,q,new byte[valSize]);
        int size=KeyValueUtil.length(kv);
        KeyValue newKv=(KeyValue)mslab.copyCellInto(kv);
        totalAllocated.addAndGet(size);
        allocsByThisThread.add(new AllocRecord(newKv.getBuffer(),newKv.getOffset(),size));
      }
    }
;
    ctx.addThread(t);
  }
  ctx.startThreads();
  while (totalAllocated.get() < 50 * 1024 * 1024 && ctx.shouldRun()) {
    Thread.sleep(10);
  }
  ctx.stop();
  Map<byte[],Map<Integer,AllocRecord>> mapsByChunk=Maps.newHashMap();
  int sizeCounted=0;
  for (  AllocRecord rec : Iterables.concat(allocations)) {
    sizeCounted+=rec.size;
    if (rec.size == 0)     continue;
    Map<Integer,AllocRecord> mapForThisByteArray=mapsByChunk.get(rec.alloc);
    if (mapForThisByteArray == null) {
      mapForThisByteArray=Maps.newTreeMap();
      mapsByChunk.put(rec.alloc,mapForThisByteArray);
    }
    AllocRecord oldVal=mapForThisByteArray.put(rec.offset,rec);
    assertNull("Already had an entry " + oldVal + " for allocation "+ rec,oldVal);
  }
  assertEquals("Sanity check test",sizeCounted,totalAllocated.get());
  for (  Map<Integer,AllocRecord> allocsInChunk : mapsByChunk.values()) {
    int expectedOff=0;
    for (    AllocRecord alloc : allocsInChunk.values()) {
      assertEquals(expectedOff,alloc.offset);
      assertTrue("Allocation overruns buffer",alloc.offset + alloc.size <= alloc.alloc.length);
      expectedOff+=alloc.size;
    }
  }
}
