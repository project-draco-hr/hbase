{
  assertEquals(1,HbaseObjectWritable.getClassCode(Boolean.TYPE).intValue());
  assertEquals(2,HbaseObjectWritable.getClassCode(Byte.TYPE).intValue());
  assertEquals(3,HbaseObjectWritable.getClassCode(Character.TYPE).intValue());
  assertEquals(4,HbaseObjectWritable.getClassCode(Short.TYPE).intValue());
  assertEquals(5,HbaseObjectWritable.getClassCode(Integer.TYPE).intValue());
  assertEquals(6,HbaseObjectWritable.getClassCode(Long.TYPE).intValue());
  assertEquals(7,HbaseObjectWritable.getClassCode(Float.TYPE).intValue());
  assertEquals(8,HbaseObjectWritable.getClassCode(Double.TYPE).intValue());
  assertEquals(9,HbaseObjectWritable.getClassCode(Void.TYPE).intValue());
  assertEquals(10,HbaseObjectWritable.getClassCode(String.class).intValue());
  assertEquals(11,HbaseObjectWritable.getClassCode(byte[].class).intValue());
  assertEquals(12,HbaseObjectWritable.getClassCode(byte[][].class).intValue());
  assertEquals(13,HbaseObjectWritable.getClassCode(Text.class).intValue());
  assertEquals(14,HbaseObjectWritable.getClassCode(Writable.class).intValue());
  assertEquals(15,HbaseObjectWritable.getClassCode(Writable[].class).intValue());
  assertEquals(18,HbaseObjectWritable.getClassCode(HColumnDescriptor.class).intValue());
  assertEquals(19,HbaseObjectWritable.getClassCode(HConstants.Modify.class).intValue());
  assertEquals(22,HbaseObjectWritable.getClassCode(HRegion.class).intValue());
  assertEquals(23,HbaseObjectWritable.getClassCode(HRegion[].class).intValue());
  assertEquals(24,HbaseObjectWritable.getClassCode(HRegionInfo.class).intValue());
  assertEquals(25,HbaseObjectWritable.getClassCode(HRegionInfo[].class).intValue());
  assertEquals(28,HbaseObjectWritable.getClassCode(HTableDescriptor.class).intValue());
  assertEquals(29,HbaseObjectWritable.getClassCode(MapWritable.class).intValue());
  assertEquals(30,HbaseObjectWritable.getClassCode(ClusterStatus.class).intValue());
  assertEquals(31,HbaseObjectWritable.getClassCode(Delete.class).intValue());
  assertEquals(32,HbaseObjectWritable.getClassCode(Get.class).intValue());
  assertEquals(33,HbaseObjectWritable.getClassCode(KeyValue.class).intValue());
  assertEquals(34,HbaseObjectWritable.getClassCode(KeyValue[].class).intValue());
  assertEquals(35,HbaseObjectWritable.getClassCode(Put.class).intValue());
  assertEquals(36,HbaseObjectWritable.getClassCode(Put[].class).intValue());
  assertEquals(37,HbaseObjectWritable.getClassCode(Result.class).intValue());
  assertEquals(38,HbaseObjectWritable.getClassCode(Result[].class).intValue());
  assertEquals(39,HbaseObjectWritable.getClassCode(Scan.class).intValue());
  assertEquals(40,HbaseObjectWritable.getClassCode(WhileMatchFilter.class).intValue());
  assertEquals(41,HbaseObjectWritable.getClassCode(PrefixFilter.class).intValue());
  assertEquals(42,HbaseObjectWritable.getClassCode(PageFilter.class).intValue());
  assertEquals(43,HbaseObjectWritable.getClassCode(InclusiveStopFilter.class).intValue());
  assertEquals(44,HbaseObjectWritable.getClassCode(ColumnCountGetFilter.class).intValue());
  assertEquals(45,HbaseObjectWritable.getClassCode(SingleColumnValueFilter.class).intValue());
  assertEquals(46,HbaseObjectWritable.getClassCode(SingleColumnValueExcludeFilter.class).intValue());
  assertEquals(47,HbaseObjectWritable.getClassCode(BinaryComparator.class).intValue());
  assertEquals(48,HbaseObjectWritable.getClassCode(BitComparator.class).intValue());
  assertEquals(49,HbaseObjectWritable.getClassCode(CompareFilter.class).intValue());
  assertEquals(50,HbaseObjectWritable.getClassCode(RowFilter.class).intValue());
  assertEquals(51,HbaseObjectWritable.getClassCode(ValueFilter.class).intValue());
  assertEquals(52,HbaseObjectWritable.getClassCode(QualifierFilter.class).intValue());
  assertEquals(53,HbaseObjectWritable.getClassCode(SkipFilter.class).intValue());
  assertEquals(54,HbaseObjectWritable.getClassCode(ByteArrayComparable.class).intValue());
  assertEquals(55,HbaseObjectWritable.getClassCode(FirstKeyOnlyFilter.class).intValue());
  assertEquals(56,HbaseObjectWritable.getClassCode(DependentColumnFilter.class).intValue());
  assertEquals(57,HbaseObjectWritable.getClassCode(Delete[].class).intValue());
  assertEquals(58,HbaseObjectWritable.getClassCode(HLog.Entry.class).intValue());
  assertEquals(59,HbaseObjectWritable.getClassCode(HLog.Entry[].class).intValue());
  assertEquals(60,HbaseObjectWritable.getClassCode(HLogKey.class).intValue());
  assertEquals(61,HbaseObjectWritable.getClassCode(List.class).intValue());
  assertEquals(62,HbaseObjectWritable.getClassCode(NavigableSet.class).intValue());
  assertEquals(63,HbaseObjectWritable.getClassCode(ColumnPrefixFilter.class).intValue());
  assertEquals(64,HbaseObjectWritable.getClassCode(Row.class).intValue());
  assertEquals(65,HbaseObjectWritable.getClassCode(Action.class).intValue());
  assertEquals(66,HbaseObjectWritable.getClassCode(MultiAction.class).intValue());
  assertEquals(67,HbaseObjectWritable.getClassCode(MultiResponse.class).intValue());
  assertEquals(68,HbaseObjectWritable.getClassCode(Exec.class).intValue());
  assertEquals(69,HbaseObjectWritable.getClassCode(Increment.class).intValue());
  assertEquals(70,HbaseObjectWritable.getClassCode(KeyOnlyFilter.class).intValue());
  assertEquals(71,HbaseObjectWritable.getClassCode(Serializable.class).intValue());
  assertEquals(72,HbaseObjectWritable.getClassCode(RandomRowFilter.class).intValue());
  assertEquals(73,HbaseObjectWritable.getClassCode(CompareOp.class).intValue());
  assertEquals(74,HbaseObjectWritable.getClassCode(ColumnRangeFilter.class).intValue());
  assertEquals(76,HbaseObjectWritable.getClassCode(RegionOpeningState.class).intValue());
  assertEquals(77,HbaseObjectWritable.getClassCode(HTableDescriptor[].class).intValue());
  assertEquals(78,HbaseObjectWritable.getClassCode(Append.class).intValue());
  assertEquals(79,HbaseObjectWritable.getClassCode(RowMutations.class).intValue());
  assertEquals(80,HbaseObjectWritable.getClassCode(Message.class).intValue());
  assertEquals(81,HbaseObjectWritable.getClassCode(Array.class).intValue());
  assertEquals(82,HbaseObjectWritable.getClassCode(RpcController.class).intValue());
}
