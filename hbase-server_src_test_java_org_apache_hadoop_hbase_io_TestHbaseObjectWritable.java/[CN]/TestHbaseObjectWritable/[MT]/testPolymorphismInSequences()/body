{
  Configuration conf=HBaseConfiguration.create();
  Object ret;
  List<A> list=Lists.newArrayList(new A(42),new B(10,100));
  ret=doType(conf,list,list.getClass());
  assertEquals(ret,list);
  Writable[] warr=new Writable[]{new A(42),new B(10,100)};
  ret=doType(conf,warr,warr.getClass());
  Assert.assertArrayEquals((Writable[])ret,warr);
  A[] arr=new A[]{new A(42),new B(10,100)};
  ret=doType(conf,arr,arr.getClass());
  Assert.assertArrayEquals((A[])ret,arr);
  A[][] darr=new A[][]{new A[]{new A(42),new B(10,100)},new A[]{new A(12)}};
  ret=doType(conf,darr,darr.getClass());
  Assert.assertArrayEquals((A[][])ret,darr);
  List<A[]> larr=Lists.newArrayList(arr,new A[]{new A(99)});
  ret=doType(conf,larr,larr.getClass());
  List<A[]> lret=(List<A[]>)ret;
  assertEquals(larr.size(),lret.size());
  for (int i=0; i < lret.size(); i++) {
    Assert.assertArrayEquals(larr.get(i),lret.get(i));
  }
  List[] alarr=new List[]{Lists.newArrayList(new A(1),new A(2)),Lists.newArrayList(new B(4,5))};
  ret=doType(conf,alarr,alarr.getClass());
  List[] alret=(List[])ret;
  Assert.assertArrayEquals(alarr,alret);
  Text[] tarr=new Text[]{new Text("foo"),new Text("bar")};
  ret=doType(conf,tarr,tarr.getClass());
  Assert.assertArrayEquals(tarr,(Text[])ret);
  byte[][] barr=new byte[][]{"foo".getBytes(),"baz".getBytes()};
  ret=doType(conf,barr,barr.getClass());
  Assert.assertArrayEquals(barr,(byte[][])ret);
}
