{
  LOG.info("testTableMove");
  final TableName tableName=TableName.valueOf(tablePrefix + "_testTableMoveAndDrop");
  final byte[] familyNameBytes=Bytes.toBytes("f");
  String newGroupName=getGroupName("testTableMove");
  final RSGroupInfo newGroup=addGroup(rsGroupAdmin,newGroupName,2);
  TEST_UTIL.createMultiRegionTable(tableName,familyNameBytes,5);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      List<String> regions=getTableRegionMap().get(tableName);
      if (regions == null)       return false;
      return getTableRegionMap().get(tableName).size() >= 5;
    }
  }
);
  RSGroupInfo tableGrp=rsGroupAdmin.getRSGroupInfoOfTable(tableName);
  assertTrue(tableGrp.getName().equals(RSGroupInfo.DEFAULT_GROUP));
  LOG.info("Moving table " + tableName + " to "+ newGroup.getName());
  rsGroupAdmin.moveTables(Sets.newHashSet(tableName),newGroup.getName());
  Assert.assertEquals(newGroup.getName(),rsGroupAdmin.getRSGroupInfoOfTable(tableName).getName());
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      Map<ServerName,List<String>> serverMap=getTableServerRegionMap().get(tableName);
      int count=0;
      if (serverMap != null) {
        for (        ServerName rs : serverMap.keySet()) {
          if (newGroup.containsServer(rs.getHostPort())) {
            count+=serverMap.get(rs).size();
          }
        }
      }
      return count == 5;
    }
  }
);
  admin.disableTable(tableName);
  admin.truncateTable(tableName,true);
  Assert.assertEquals(1,rsGroupAdmin.getRSGroupInfo(newGroup.getName()).getTables().size());
  Assert.assertEquals(tableName,rsGroupAdmin.getRSGroupInfo(newGroup.getName()).getTables().first());
  TEST_UTIL.deleteTable(tableName);
  Assert.assertEquals(0,rsGroupAdmin.getRSGroupInfo(newGroup.getName()).getTables().size());
}
