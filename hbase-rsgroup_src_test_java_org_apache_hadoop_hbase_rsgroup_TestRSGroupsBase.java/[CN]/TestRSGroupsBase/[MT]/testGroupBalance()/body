{
  LOG.info("testGroupBalance");
  String newGroupName=getGroupName("testGroupBalance");
  final RSGroupInfo newGroup=addGroup(rsGroupAdmin,newGroupName,3);
  final TableName tableName=TableName.valueOf(tablePrefix + "_ns","testGroupBalance");
  admin.createNamespace(NamespaceDescriptor.create(tableName.getNamespaceAsString()).addConfiguration(RSGroupInfo.NAMESPACEDESC_PROP_GROUP,newGroupName).build());
  final byte[] familyNameBytes=Bytes.toBytes("f");
  final HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor("f"));
  byte[] startKey=Bytes.toBytes("aaaaa");
  byte[] endKey=Bytes.toBytes("zzzzz");
  admin.createTable(desc,startKey,endKey,6);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      List<String> regions=getTableRegionMap().get(tableName);
      if (regions == null) {
        return false;
      }
      return regions.size() >= 6;
    }
  }
);
  Map<ServerName,List<String>> assignMap=getTableServerRegionMap().get(tableName);
  final ServerName first=assignMap.entrySet().iterator().next().getKey();
  for (  HRegionInfo region : admin.getTableRegions(tableName)) {
    if (!assignMap.get(first).contains(region)) {
      admin.move(region.getEncodedNameAsBytes(),Bytes.toBytes(first.getServerName()));
    }
  }
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      Map<ServerName,List<String>> map=getTableServerRegionMap().get(tableName);
      if (map == null) {
        return true;
      }
      List<String> regions=map.get(first);
      if (regions == null) {
        return true;
      }
      return regions.size() >= 6;
    }
  }
);
  rsGroupAdmin.balanceRSGroup(RSGroupInfo.DEFAULT_GROUP);
  assertEquals(6,getTableServerRegionMap().get(tableName).get(first).size());
  rsGroupAdmin.balanceRSGroup(newGroupName);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      for (      List<String> regions : getTableServerRegionMap().get(tableName).values()) {
        if (2 != regions.size()) {
          return false;
        }
      }
      return true;
    }
  }
);
}
