{
  LOG.info("testRegionMove");
  final RSGroupInfo newGroup=addGroup(rsGroupAdmin,getGroupName("testRegionMove"),1);
  final TableName tableName=TableName.valueOf(tablePrefix + rand.nextInt());
  final byte[] familyNameBytes=Bytes.toBytes("f");
  TEST_UTIL.createMultiRegionTable(tableName,familyNameBytes,6);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      List<String> regions=getTableRegionMap().get(tableName);
      if (regions == null)       return false;
      return getTableRegionMap().get(tableName).size() >= 6;
    }
  }
);
  Map<ServerName,List<String>> assignMap=getTableServerRegionMap().get(tableName);
  String targetRegion=null;
  for (  ServerName server : assignMap.keySet()) {
    targetRegion=assignMap.get(server).size() > 0 ? assignMap.get(server).get(0) : null;
    if (targetRegion != null) {
      break;
    }
  }
  ServerName targetServer=null;
  for (  ServerName server : admin.getClusterStatus().getServers()) {
    if (!newGroup.containsServer(server.getHostPort())) {
      targetServer=server;
      break;
    }
  }
  final AdminProtos.AdminService.BlockingInterface targetRS=admin.getConnection().getAdmin(targetServer);
  rsGroupAdmin.moveServers(Sets.newHashSet(targetServer.getHostPort()),newGroup.getName());
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return ProtobufUtil.getOnlineRegions(targetRS).size() <= 0;
    }
  }
);
  TEST_UTIL.getHBaseAdmin().move(Bytes.toBytes(HRegionInfo.encodeRegionName(Bytes.toBytes(targetRegion))),Bytes.toBytes(targetServer.getServerName()));
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return getTableRegionMap().get(tableName) != null && getTableRegionMap().get(tableName).size() == 6 && admin.getClusterStatus().getRegionsInTransition().size() < 1;
    }
  }
);
  assertFalse(ProtobufUtil.getOnlineRegions(targetRS).contains(targetRegion));
}
