{
  LOG.info("testMoveServers");
  addGroup(rsGroupAdmin,"bar",3);
  rsGroupAdmin.addRSGroup("foo");
  RSGroupInfo barGroup=rsGroupAdmin.getRSGroupInfo("bar");
  RSGroupInfo fooGroup=rsGroupAdmin.getRSGroupInfo("foo");
  assertEquals(3,barGroup.getServers().size());
  assertEquals(0,fooGroup.getServers().size());
  try {
    rsGroupAdmin.moveServers(Sets.newHashSet(HostAndPort.fromString("foo:9999")),"foo");
    fail("Bogus servers shouldn't have been successfully moved.");
  }
 catch (  IOException ex) {
    String exp="Server foo:9999 does not have a group.";
    String msg="Expected '" + exp + "' in exception message: ";
    assertTrue(msg + " " + ex.getMessage(),ex.getMessage().contains(exp));
  }
  LOG.info("moving servers " + barGroup.getServers() + " to group foo");
  rsGroupAdmin.moveServers(barGroup.getServers(),fooGroup.getName());
  barGroup=rsGroupAdmin.getRSGroupInfo("bar");
  fooGroup=rsGroupAdmin.getRSGroupInfo("foo");
  assertEquals(0,barGroup.getServers().size());
  assertEquals(3,fooGroup.getServers().size());
  LOG.info("moving servers " + fooGroup.getServers() + " to group default");
  rsGroupAdmin.moveServers(fooGroup.getServers(),RSGroupInfo.DEFAULT_GROUP);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return getNumServers() == rsGroupAdmin.getRSGroupInfo(RSGroupInfo.DEFAULT_GROUP).getServers().size();
    }
  }
);
  fooGroup=rsGroupAdmin.getRSGroupInfo("foo");
  assertEquals(0,fooGroup.getServers().size());
  LOG.info("Remove group " + barGroup.getName());
  rsGroupAdmin.removeRSGroup(barGroup.getName());
  Assert.assertEquals(null,rsGroupAdmin.getRSGroupInfo(barGroup.getName()));
  LOG.info("Remove group " + fooGroup.getName());
  rsGroupAdmin.removeRSGroup(fooGroup.getName());
  Assert.assertEquals(null,rsGroupAdmin.getRSGroupInfo(fooGroup.getName()));
}
