{
  super();
  this.server=server;
  this.threadWakeFrequency=conf.getLong(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000);
  long max=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  this.globalMemStoreLimit=globalMemStoreLimit(max,DEFAULT_UPPER,UPPER_KEY,conf);
  long lower=globalMemStoreLimit(max,DEFAULT_LOWER,LOWER_KEY,conf);
  if (lower > this.globalMemStoreLimit) {
    lower=this.globalMemStoreLimit;
    LOG.info("Setting globalMemStoreLimitLowMark == globalMemStoreLimit " + "because supplied " + LOWER_KEY + " was > "+ UPPER_KEY);
  }
  this.globalMemStoreLimitLowMark=lower;
  this.blockingStoreFilesNumber=conf.getInt("hbase.hstore.blockingStoreFiles",7);
  this.blockingWaitTime=conf.getInt("hbase.hstore.blockingWaitTime",90000);
  LOG.info("globalMemStoreLimit=" + StringUtils.humanReadableInt(this.globalMemStoreLimit) + ", globalMemStoreLimitLowMark="+ StringUtils.humanReadableInt(this.globalMemStoreLimitLowMark)+ ", maxHeap="+ StringUtils.humanReadableInt(max));
}
