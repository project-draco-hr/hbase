{
synchronized (this.regionsInQueue) {
    FlushRegionEntry fqe=this.regionsInQueue.remove(region);
    if (fqe != null && emergencyFlush) {
      flushQueue.remove(fqe);
    }
  }
  lock.readLock().lock();
  try {
    notifyFlushRequest(region,emergencyFlush);
    boolean shouldCompact=region.flushcache().isCompactionNeeded();
    boolean shouldSplit=region.checkSplit() != null;
    if (shouldSplit) {
      this.server.compactSplitThread.requestSplit(region);
    }
 else     if (shouldCompact) {
      server.compactSplitThread.requestSystemCompaction(region,Thread.currentThread().getName());
    }
  }
 catch (  DroppedSnapshotException ex) {
    server.abort("Replay of HLog required. Forcing server shutdown",ex);
    return false;
  }
catch (  IOException ex) {
    ex=ex instanceof RemoteException ? ((RemoteException)ex).unwrapRemoteException() : ex;
    LOG.error("Cache flush failed" + (region != null ? (" for region " + Bytes.toStringBinary(region.getRegionName())) : ""),ex);
    if (!server.checkFileSystem()) {
      return false;
    }
  }
 finally {
    lock.readLock().unlock();
    wakeUpIfBlocking();
  }
  return true;
}
