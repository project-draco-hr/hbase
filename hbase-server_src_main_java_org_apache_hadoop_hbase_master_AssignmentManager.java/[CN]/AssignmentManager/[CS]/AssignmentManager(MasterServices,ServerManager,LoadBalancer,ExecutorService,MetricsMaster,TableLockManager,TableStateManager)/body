{
  this.server=server;
  this.serverManager=serverManager;
  this.executorService=service;
  this.regionStateStore=new RegionStateStore(server);
  this.regionsToReopen=Collections.synchronizedMap(new HashMap<String,HRegionInfo>());
  Configuration conf=server.getConfiguration();
  this.shouldAssignRegionsWithFavoredNodes=conf.getClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,Object.class).equals(FavoredNodeLoadBalancer.class);
  this.tableStateManager=tableStateManager;
  this.maximumAttempts=Math.max(1,this.server.getConfiguration().getInt("hbase.assignment.maximum.attempts",10));
  this.sleepTimeBeforeRetryingMetaAssignment=this.server.getConfiguration().getLong("hbase.meta.assignment.retry.sleeptime",1000l);
  this.balancer=balancer;
  int maxThreads=conf.getInt("hbase.assignment.threads.max",30);
  this.threadPoolExecutorService=Threads.getBoundedCachedThreadPool(maxThreads,60L,TimeUnit.SECONDS,Threads.newDaemonThreadFactory("AM."));
  this.scheduledThreadPoolExecutor=new ScheduledThreadPoolExecutor(1,Threads.newDaemonThreadFactory("AM.Scheduler"));
  this.regionStates=new RegionStates(server,tableStateManager,serverManager,regionStateStore);
  this.bulkAssignWaitTillAllAssigned=conf.getBoolean("hbase.bulk.assignment.waittillallassigned",false);
  this.bulkAssignThresholdRegions=conf.getInt("hbase.bulk.assignment.threshold.regions",7);
  this.bulkAssignThresholdServers=conf.getInt("hbase.bulk.assignment.threshold.servers",3);
  this.bulkPerRegionOpenTimeGuesstimate=conf.getInt("hbase.bulk.assignment.perregion.open.time",10000);
  this.metricsAssignmentManager=new MetricsAssignmentManager();
  this.tableLockManager=tableLockManager;
  this.retryConfig=new RetryCounter.RetryConfig();
  this.retryConfig.setSleepInterval(conf.getLong("hbase.assignment.retry.sleep.initial",0l));
  this.retryConfig.setMaxSleepTime(conf.getLong("hbase.assignment.retry.sleep.max",retryConfig.getSleepInterval()));
  this.backoffPolicy=getBackoffPolicy();
}
