{
  super(server.getZooKeeper());
  this.server=server;
  this.serverManager=serverManager;
  this.catalogTracker=catalogTracker;
  this.executorService=service;
  this.regionsToReopen=Collections.synchronizedMap(new HashMap<String,HRegionInfo>());
  Configuration conf=server.getConfiguration();
  this.shouldAssignRegionsWithFavoredNodes=conf.getClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,Object.class).equals(FavoredNodeLoadBalancer.class);
  this.tomActivated=conf.getBoolean(ASSIGNMENT_TIMEOUT_MANAGEMENT,DEFAULT_ASSIGNMENT_TIMEOUT_MANAGEMENT);
  if (tomActivated) {
    this.serversInUpdatingTimer=new ConcurrentSkipListSet<ServerName>();
    this.timeoutMonitor=new TimeoutMonitor(conf.getInt("hbase.master.assignment.timeoutmonitor.period",30000),server,serverManager,conf.getInt(ASSIGNMENT_TIMEOUT,DEFAULT_ASSIGNMENT_TIMEOUT_DEFAULT));
    this.timerUpdater=new TimerUpdater(conf.getInt("hbase.master.assignment.timerupdater.period",10000),server);
    Threads.setDaemonThreadRunning(timerUpdater.getThread(),server.getServerName() + ".timerUpdater");
  }
 else {
    this.serversInUpdatingTimer=null;
    this.timeoutMonitor=null;
    this.timerUpdater=null;
  }
  try {
    this.zkTable=new ZKTable(this.watcher);
  }
 catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
  this.maximumAttempts=Math.max(1,this.server.getConfiguration().getInt("hbase.assignment.maximum.attempts",10));
  this.sleepTimeBeforeRetryingMetaAssignment=this.server.getConfiguration().getLong("hbase.meta.assignment.retry.sleeptime",1000l);
  this.balancer=balancer;
  int maxThreads=conf.getInt("hbase.assignment.threads.max",30);
  this.threadPoolExecutorService=Threads.getBoundedCachedThreadPool(maxThreads,60L,TimeUnit.SECONDS,Threads.newDaemonThreadFactory("AM."));
  this.regionStates=new RegionStates(server,serverManager);
  this.bulkAssignWaitTillAllAssigned=conf.getBoolean("hbase.bulk.assignment.waittillallassigned",false);
  this.bulkAssignThresholdRegions=conf.getInt("hbase.bulk.assignment.threshold.regions",7);
  this.bulkAssignThresholdServers=conf.getInt("hbase.bulk.assignment.threshold.servers",3);
  int workers=conf.getInt("hbase.assignment.zkevent.workers",20);
  ThreadFactory threadFactory=Threads.newDaemonThreadFactory("AM.ZK.Worker");
  zkEventWorkers=Threads.getBoundedCachedThreadPool(workers,60L,TimeUnit.SECONDS,threadFactory);
  this.tableLockManager=tableLockManager;
  this.metricsAssignmentManager=new MetricsAssignmentManager();
}
