{
  super(server.getZooKeeper());
  this.server=server;
  this.serverManager=serverManager;
  this.catalogTracker=catalogTracker;
  this.executorService=service;
  this.regionsToReopen=Collections.synchronizedMap(new HashMap<String,HRegionInfo>());
  Configuration conf=server.getConfiguration();
  this.timeoutMonitor=new TimeoutMonitor(conf.getInt("hbase.master.assignment.timeoutmonitor.period",30000),server,serverManager,conf.getInt("hbase.master.assignment.timeoutmonitor.timeout",600000));
  this.timerUpdater=new TimerUpdater(conf.getInt("hbase.master.assignment.timerupdater.period",10000),server);
  Threads.setDaemonThreadRunning(timerUpdater.getThread(),server.getServerName() + ".timerUpdater");
  this.zkTable=new ZKTable(this.watcher);
  this.maximumAttempts=this.server.getConfiguration().getInt("hbase.assignment.maximum.attempts",10);
  this.balancer=balancer;
  int maxThreads=conf.getInt("hbase.assignment.threads.max",30);
  this.threadPoolExecutorService=Threads.getBoundedCachedThreadPool(maxThreads,60L,TimeUnit.SECONDS,Threads.newDaemonThreadFactory("hbase-am"));
  this.metricsMaster=metricsMaster;
  this.regionStates=new RegionStates(server,serverManager);
  int workers=conf.getInt("hbase.assignment.zkevent.workers",5);
  zkEventWorkers=new java.util.concurrent.ExecutorService[workers];
  ThreadFactory threadFactory=Threads.newDaemonThreadFactory("am-zkevent-worker");
  for (int i=0; i < workers; i++) {
    zkEventWorkers[i]=Threads.getBoundedCachedThreadPool(1,60L,TimeUnit.SECONDS,threadFactory);
  }
}
