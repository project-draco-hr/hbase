{
  super(server.getZooKeeper());
  this.server=server;
  this.serverManager=serverManager;
  this.executorService=service;
  this.regionStateStore=new RegionStateStore(server);
  this.regionsToReopen=Collections.synchronizedMap(new HashMap<String,HRegionInfo>());
  Configuration conf=server.getConfiguration();
  this.shouldAssignRegionsWithFavoredNodes=conf.getClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,Object.class).equals(FavoredNodeLoadBalancer.class);
  try {
    if (server.getCoordinatedStateManager() != null) {
      this.tableStateManager=server.getCoordinatedStateManager().getTableStateManager();
    }
 else {
      this.tableStateManager=null;
    }
  }
 catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
  this.maximumAttempts=Math.max(1,this.server.getConfiguration().getInt("hbase.assignment.maximum.attempts",10));
  this.sleepTimeBeforeRetryingMetaAssignment=this.server.getConfiguration().getLong("hbase.meta.assignment.retry.sleeptime",1000l);
  this.balancer=balancer;
  int maxThreads=conf.getInt("hbase.assignment.threads.max",30);
  this.threadPoolExecutorService=Threads.getBoundedCachedThreadPool(maxThreads,60L,TimeUnit.SECONDS,Threads.newDaemonThreadFactory("AM."));
  this.regionStates=new RegionStates(server,tableStateManager,serverManager,regionStateStore);
  this.bulkAssignWaitTillAllAssigned=conf.getBoolean("hbase.bulk.assignment.waittillallassigned",false);
  this.bulkAssignThresholdRegions=conf.getInt("hbase.bulk.assignment.threshold.regions",7);
  this.bulkAssignThresholdServers=conf.getInt("hbase.bulk.assignment.threshold.servers",3);
  int workers=conf.getInt("hbase.assignment.zkevent.workers",20);
  ThreadFactory threadFactory=Threads.newDaemonThreadFactory("AM.ZK.Worker");
  zkEventWorkers=Threads.getBoundedCachedThreadPool(workers,60L,TimeUnit.SECONDS,threadFactory);
  this.tableLockManager=tableLockManager;
  this.metricsAssignmentManager=new MetricsAssignmentManager();
  useZKForAssignment=ConfigUtil.useZKForAssignment(conf);
}
