{
  if (current == null || !current.isSplittingOrSplitOnServer(serverName)) {
    return hri.getShortNameToLog() + " is not splitting on " + serverName;
  }
  if (current.isSplit()) {
    return null;
  }
  final HRegionInfo a=HRegionInfo.convert(transition.getRegionInfo(1));
  final HRegionInfo b=HRegionInfo.convert(transition.getRegionInfo(2));
  RegionState rs_a=regionStates.getRegionState(a);
  RegionState rs_b=regionStates.getRegionState(b);
  if (rs_a == null || !rs_a.isSplittingNewOnServer(serverName) || rs_b == null || !rs_b.isSplittingNewOnServer(serverName)) {
    return "Some daughter is not known to be splitting on " + serverName + ", a="+ rs_a+ ", b="+ rs_b;
  }
  if (TEST_SKIP_SPLIT_HANDLING) {
    return "Skipping split message, TEST_SKIP_SPLIT_HANDLING is set";
  }
  regionOffline(hri,State.SPLIT);
  regionOnline(a,serverName,1);
  regionOnline(b,serverName,1);
  if (getTableStateManager().isTableState(hri.getTable(),TableState.State.DISABLED,TableState.State.DISABLING)) {
    invokeUnAssign(a);
    invokeUnAssign(b);
  }
 else {
    Callable<Object> splitReplicasCallable=new Callable<Object>(){
      @Override public Object call(){
        doSplittingOfReplicas(hri,a,b);
        return null;
      }
    }
;
    threadPoolExecutorService.submit(splitReplicasCallable);
  }
  return null;
}
