{
  regionStates.regionOffline(regionInfo,state);
  removeClosedRegion(regionInfo);
  clearRegionPlan(regionInfo);
  balancer.regionOffline(regionInfo);
  sendRegionClosedNotification(regionInfo);
  if (state != null && state.equals(State.SPLIT)) {
    Collection<HRegionInfo> c=new ArrayList<HRegionInfo>(1);
    c.add(regionInfo);
    Map<ServerName,List<HRegionInfo>> map=regionStates.getRegionAssignments(c);
    Collection<List<HRegionInfo>> allReplicas=map.values();
    for (    List<HRegionInfo> list : allReplicas) {
      replicasToClose.addAll(list);
    }
  }
 else   if (state != null && state.equals(State.MERGED)) {
    Collection<HRegionInfo> c=new ArrayList<HRegionInfo>(1);
    c.add(regionInfo);
    Map<ServerName,List<HRegionInfo>> map=regionStates.getRegionAssignments(c);
    Collection<List<HRegionInfo>> allReplicas=map.values();
    for (    List<HRegionInfo> list : allReplicas) {
      replicasToClose.addAll(list);
    }
  }
}
