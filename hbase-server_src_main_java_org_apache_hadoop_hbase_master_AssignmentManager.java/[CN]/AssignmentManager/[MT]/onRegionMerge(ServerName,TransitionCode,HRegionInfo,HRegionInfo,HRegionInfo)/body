{
  RegionState rs_p=regionStates.getRegionState(p);
  RegionState rs_a=regionStates.getRegionState(a);
  RegionState rs_b=regionStates.getRegionState(b);
  if (!(rs_a.isOpenOrMergingOnServer(sn) && rs_b.isOpenOrMergingOnServer(sn) && (rs_p == null || rs_p.isOpenOrMergingNewOnServer(sn)))) {
    return "Not in state good for merge";
  }
  regionStates.updateRegionState(a,State.MERGING);
  regionStates.updateRegionState(b,State.MERGING);
  regionStates.updateRegionState(p,State.MERGING_NEW,sn);
  String encodedName=p.getEncodedName();
  if (code == TransitionCode.READY_TO_MERGE) {
    mergingRegions.put(encodedName,new PairOfSameType<HRegionInfo>(a,b));
  }
 else   if (code == TransitionCode.MERGED) {
    mergingRegions.remove(encodedName);
    regionOffline(a,State.MERGED);
    regionOffline(b,State.MERGED);
    regionOnline(p,sn,1);
    if (getTableStateManager().isTableState(p.getTable(),ZooKeeperProtos.Table.State.DISABLED,ZooKeeperProtos.Table.State.DISABLING)) {
      invokeUnAssign(p);
    }
  }
 else   if (code == TransitionCode.MERGE_PONR) {
    try {
      regionStates.mergeRegions(p,a,b,sn);
    }
 catch (    IOException ioe) {
      LOG.info("Failed to record merged region " + p.getShortNameToLog());
      return "Failed to record the merging in meta";
    }
  }
 else {
    mergingRegions.remove(encodedName);
    regionOnline(a,sn);
    regionOnline(b,sn);
    regionOffline(p);
    if (getTableStateManager().isTableState(p.getTable(),ZooKeeperProtos.Table.State.DISABLED,ZooKeeperProtos.Table.State.DISABLING)) {
      invokeUnAssign(a);
      invokeUnAssign(b);
    }
  }
  return null;
}
