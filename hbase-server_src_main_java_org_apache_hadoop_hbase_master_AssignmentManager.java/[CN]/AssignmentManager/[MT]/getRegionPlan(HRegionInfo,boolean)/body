{
  final String encodedName=region.getEncodedName();
  final List<ServerName> destServers=serverManager.createDestinationServersList();
  if (destServers.isEmpty()) {
    LOG.warn("Can't move " + encodedName + ", there is no destination server available.");
    return null;
  }
  RegionPlan randomPlan=null;
  boolean newPlan=false;
  RegionPlan existingPlan;
synchronized (this.regionPlans) {
    existingPlan=this.regionPlans.get(encodedName);
    if (existingPlan != null && existingPlan.getDestination() != null) {
      LOG.debug("Found an existing plan for " + region.getRegionNameAsString() + " destination server is "+ existingPlan.getDestination()+ " accepted as a dest server = "+ destServers.contains(existingPlan.getDestination()));
    }
    if (forceNewPlan || existingPlan == null || existingPlan.getDestination() == null || !destServers.contains(existingPlan.getDestination())) {
      newPlan=true;
      try {
        randomPlan=new RegionPlan(region,null,balancer.randomAssignment(region,destServers));
      }
 catch (      IOException ex) {
        LOG.warn("Failed to create new plan.",ex);
        return null;
      }
      if (!region.isMetaTable() && shouldAssignRegionsWithFavoredNodes) {
        List<HRegionInfo> regions=new ArrayList<HRegionInfo>(1);
        regions.add(region);
        try {
          processFavoredNodes(regions);
        }
 catch (        IOException ie) {
          LOG.warn("Ignoring exception in processFavoredNodes " + ie);
        }
      }
      this.regionPlans.put(encodedName,randomPlan);
    }
  }
  if (newPlan) {
    if (randomPlan.getDestination() == null) {
      LOG.warn("Can't find a destination for " + encodedName);
      return null;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("No previous transition plan found (or ignoring " + "an existing plan) for " + region.getRegionNameAsString() + "; generated random plan="+ randomPlan+ "; "+ destServers.size()+ " (online="+ serverManager.getOnlineServers().size()+ ") available servers, forceNewPlan="+ forceNewPlan);
    }
    return randomPlan;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Using pre-existing plan for " + region.getRegionNameAsString() + "; plan="+ existingPlan);
  }
  return existingPlan;
}
