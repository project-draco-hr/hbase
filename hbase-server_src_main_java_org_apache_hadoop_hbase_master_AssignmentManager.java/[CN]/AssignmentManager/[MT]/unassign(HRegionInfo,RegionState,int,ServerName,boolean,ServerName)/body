{
  ServerName server=src;
  if (state != null) {
    server=state.getServerName();
  }
  for (int i=1; i <= this.maximumAttempts; i++) {
    if (!serverManager.isServerOnline(server)) {
      if (transitionInZK) {
        deleteClosingOrClosedNode(region);
      }
      if (state != null) {
        regionOffline(region);
      }
      return;
    }
    try {
      if (serverManager.sendRegionClose(server,region,versionOfClosingNode,dest,transitionInZK)) {
        LOG.debug("Sent CLOSE to " + server + " for region "+ region.getRegionNameAsString());
        if (!transitionInZK && state != null) {
          regionOffline(region);
        }
        return;
      }
      LOG.warn("Server " + server + " region CLOSE RPC returned false for "+ region.getRegionNameAsString());
    }
 catch (    Throwable t) {
      if (t instanceof RemoteException) {
        t=((RemoteException)t).unwrapRemoteException();
      }
      if (t instanceof NotServingRegionException || t instanceof RegionServerStoppedException) {
        if (transitionInZK) {
          deleteClosingOrClosedNode(region);
        }
        if (state != null) {
          regionOffline(region);
        }
        return;
      }
 else       if (state != null && t instanceof RegionAlreadyInTransitionException) {
        LOG.debug("update " + state + " the timestamp.");
        state.updateTimestampToNow();
      }
      LOG.info("Server " + server + " returned "+ t+ " for "+ region.getRegionNameAsString()+ ", try="+ i+ " of "+ this.maximumAttempts,t);
    }
  }
  if (!tomActivated && state != null) {
    regionStates.updateRegionState(region,State.FAILED_CLOSE);
  }
}
