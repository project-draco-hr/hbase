{
  if (path.startsWith(watcher.assignmentZNode)) {
    final String regionName=ZKAssign.getRegionName(watcher,path);
    zkEventWorkersSubmit(new RegionRunnable(){
      @Override public String getRegionName(){
        return regionName;
      }
      @Override public void run(){
        Lock lock=locker.acquireLock(regionName);
        try {
          RegionState rs=regionStates.getRegionTransitionState(regionName);
          if (rs == null) {
            rs=regionStates.getRegionState(regionName);
            if (rs == null || !rs.isMergingNew()) {
              return;
            }
          }
          HRegionInfo regionInfo=rs.getRegion();
          String regionNameStr=regionInfo.getRegionNameAsString();
          LOG.debug("Znode " + regionNameStr + " deleted, state: "+ rs);
          boolean disabled=getZKTable().isDisablingOrDisabledTable(regionInfo.getTable());
          ServerName serverName=rs.getServerName();
          if (serverManager.isServerOnline(serverName)) {
            if (rs.isOnServer(serverName) && (rs.isOpened() || rs.isSplitting())) {
              regionOnline(regionInfo,serverName);
              if (disabled) {
                LOG.info("Opened " + regionNameStr + "but this table is disabled, triggering close of region");
                unassign(regionInfo);
              }
            }
 else             if (rs.isMergingNew()) {
synchronized (regionStates) {
                String p=regionInfo.getEncodedName();
                PairOfSameType<HRegionInfo> regions=mergingRegions.get(p);
                if (regions != null) {
                  onlineMergingRegion(disabled,regions.getFirst(),serverName);
                  onlineMergingRegion(disabled,regions.getSecond(),serverName);
                }
              }
            }
          }
        }
  finally {
          lock.unlock();
        }
      }
      private void onlineMergingRegion(      boolean disabled,      final HRegionInfo hri,      final ServerName serverName){
        RegionState regionState=regionStates.getRegionState(hri);
        if (regionState != null && regionState.isMerging() && regionState.isOnServer(serverName)) {
          regionOnline(regionState.getRegion(),serverName);
          if (disabled) {
            unassign(hri);
          }
        }
      }
    }
);
  }
}
