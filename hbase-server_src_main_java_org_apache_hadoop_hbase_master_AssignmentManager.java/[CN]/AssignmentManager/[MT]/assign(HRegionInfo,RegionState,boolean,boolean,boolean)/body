{
  boolean regionAlreadyInTransitionException=false;
  boolean serverNotRunningYet=false;
  RegionState currentState=state;
  long maxRegionServerStartupWaitTime=-1;
  for (int i=0; i < this.maximumAssignmentAttempts; i++) {
    int versionOfOfflineNode=-1;
    if (setOfflineInZK) {
      versionOfOfflineNode=setOfflineInZooKeeper(currentState,hijack);
      if (versionOfOfflineNode != -1) {
        if (isDisabledorDisablingRegionInRIT(region)) {
          return;
        }
        String tableName=region.getTableNameAsString();
        if (!zkTable.isEnablingTable(tableName) && !zkTable.isEnabledTable(tableName)) {
          LOG.debug("Setting table " + tableName + " to ENABLED state.");
          setEnabledTable(region);
        }
      }
    }
    if (setOfflineInZK && versionOfOfflineNode == -1) {
      return;
    }
    if (this.server.isStopped()) {
      LOG.debug("Server stopped; skipping assign of " + state);
      return;
    }
    RegionPlan plan=getRegionPlan(state,!regionAlreadyInTransitionException && !serverNotRunningYet && forceNewPlan);
    if (plan == null) {
      LOG.debug("Unable to determine a plan to assign " + state);
      this.timeoutMonitor.setAllRegionServersOffline(true);
      return;
    }
    try {
      LOG.info("Assigning region " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination().toString());
      currentState=regionStates.updateRegionState(state.getRegion(),RegionState.State.PENDING_OPEN,System.currentTimeMillis(),plan.getDestination());
      RegionOpeningState regionOpenState=serverManager.sendRegionOpen(plan.getDestination(),state.getRegion(),versionOfOfflineNode);
      if (regionOpenState == RegionOpeningState.ALREADY_OPENED) {
        processAlreadyOpenedRegion(state.getRegion(),plan.getDestination());
      }
 else       if (regionOpenState == RegionOpeningState.FAILED_OPENING) {
        throw new Exception("Get regionOpeningState=" + regionOpenState);
      }
      break;
    }
 catch (    Throwable t) {
      if (t instanceof RemoteException) {
        t=((RemoteException)t).unwrapRemoteException();
      }
      regionAlreadyInTransitionException=false;
      serverNotRunningYet=false;
      if (t instanceof RegionAlreadyInTransitionException) {
        regionAlreadyInTransitionException=true;
        if (LOG.isDebugEnabled()) {
          LOG.debug("Failed assignment in: " + plan.getDestination() + " due to "+ t.getMessage());
        }
      }
 else       if (t instanceof ServerNotRunningYetException) {
        if (maxRegionServerStartupWaitTime < 0) {
          maxRegionServerStartupWaitTime=System.currentTimeMillis() + this.server.getConfiguration().getLong("hbase.regionserver.rpc.startup.waittime",60000);
        }
        try {
          long now=System.currentTimeMillis();
          if (now < maxRegionServerStartupWaitTime) {
            LOG.debug("Server is not yet up; waiting up to " + (maxRegionServerStartupWaitTime - now) + "ms",t);
            serverNotRunningYet=true;
            Thread.sleep(100);
            i--;
          }
 else {
            LOG.debug("Server is not up for a while; try a new one",t);
          }
        }
 catch (        InterruptedException ie) {
          LOG.warn("Failed to assign " + state.getRegion().getRegionNameAsString() + " since interrupted",ie);
          Thread.currentThread().interrupt();
          return;
        }
      }
      if (t instanceof java.net.SocketTimeoutException && this.serverManager.isServerOnline(plan.getDestination())) {
        LOG.warn("Call openRegion() to " + plan.getDestination() + " has timed out when trying to assign "+ region.getRegionNameAsString()+ ", but the region might already be opened on "+ plan.getDestination()+ ".",t);
        return;
      }
      LOG.warn("Failed assignment of " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination()+ ", trying to assign "+ (regionAlreadyInTransitionException || serverNotRunningYet ? "to the same region server because of " + "RegionAlreadyInTransitionException/ServerNotRunningYetException;" : "elsewhere instead; ")+ "retry="+ i,t);
      currentState=regionStates.updateRegionState(state.getRegion(),RegionState.State.OFFLINE);
      RegionPlan newPlan=plan;
      if (!regionAlreadyInTransitionException && !serverNotRunningYet) {
        newPlan=getRegionPlan(state,true);
      }
      if (newPlan == null) {
        this.timeoutMonitor.setAllRegionServersOffline(true);
        LOG.warn("Unable to find a viable location to assign region " + state.getRegion().getRegionNameAsString());
        return;
      }
    }
  }
}
