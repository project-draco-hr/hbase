{
  for (int i=0; i < this.maximumAssignmentAttempts; i++) {
    int versionOfOfflineNode=-1;
    if (setOfflineInZK) {
      versionOfOfflineNode=setOfflineInZooKeeper(state,hijack);
      if (versionOfOfflineNode != -1) {
        if (isDisabledorDisablingRegionInRIT(region)) {
          return;
        }
        String tableName=region.getTableNameAsString();
        if (!zkTable.isEnablingTable(tableName) && !zkTable.isEnabledTable(tableName)) {
          LOG.debug("Setting table " + tableName + " to ENABLED state.");
          setEnabledTable(region);
        }
      }
    }
    if (setOfflineInZK && versionOfOfflineNode == -1) {
      return;
    }
    if (this.master.isStopped()) {
      LOG.debug("Server stopped; skipping assign of " + state);
      return;
    }
    RegionPlan plan=getRegionPlan(state,forceNewPlan);
    if (plan == null) {
      LOG.debug("Unable to determine a plan to assign " + state);
      this.timeoutMonitor.setAllRegionServersOffline(true);
      return;
    }
    try {
      LOG.info("Assigning region " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination().toString());
      state.update(RegionState.State.PENDING_OPEN,System.currentTimeMillis(),plan.getDestination());
      RegionOpeningState regionOpenState=serverManager.sendRegionOpen(plan.getDestination(),state.getRegion(),versionOfOfflineNode);
      if (regionOpenState == RegionOpeningState.ALREADY_OPENED) {
        processAlreadyOpenedRegion(state.getRegion(),plan.getDestination());
      }
 else       if (regionOpenState == RegionOpeningState.FAILED_OPENING) {
        throw new Exception("Get regionOpeningState=" + regionOpenState);
      }
      break;
    }
 catch (    Throwable t) {
      if (t instanceof RemoteException) {
        t=((RemoteException)t).unwrapRemoteException();
        if (t instanceof RegionAlreadyInTransitionException) {
          String errorMsg="Failed assignment in: " + plan.getDestination() + " due to "+ t.getMessage();
          LOG.error(errorMsg,t);
          return;
        }
      }
      LOG.warn("Failed assignment of " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination()+ ", trying to assign elsewhere instead; "+ "retry="+ i,t);
      state.update(RegionState.State.OFFLINE);
      if (getRegionPlan(state,plan.getDestination(),true) == null) {
        this.timeoutMonitor.setAllRegionServersOffline(true);
        LOG.warn("Unable to find a viable location to assign region " + state.getRegion().getRegionNameAsString());
        return;
      }
    }
  }
}
