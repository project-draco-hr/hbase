{
  boolean failover=!serverManager.getDeadServers().isEmpty();
  if (failover) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Found dead servers out on cluster " + serverManager.getDeadServers());
    }
  }
 else {
    Set<ServerName> onlineServers=serverManager.getOnlineServers().keySet();
    for (    Map.Entry<HRegionInfo,ServerName> en : regionStates.getRegionAssignments().entrySet()) {
      HRegionInfo hri=en.getKey();
      if (!hri.isMetaTable() && onlineServers.contains(en.getValue())) {
        LOG.debug("Found " + hri + " out on cluster");
        failover=true;
        break;
      }
    }
    if (!failover) {
      Map<String,RegionState> regionsInTransition=regionStates.getRegionsInTransition();
      if (!regionsInTransition.isEmpty()) {
        for (        RegionState regionState : regionsInTransition.values()) {
          if (!regionState.getRegion().isMetaRegion() && onlineServers.contains(regionState.getServerName())) {
            LOG.debug("Found " + regionState + " in RITs");
            failover=true;
            break;
          }
        }
      }
    }
  }
  if (!failover) {
    Set<ServerName> queuedDeadServers=serverManager.getRequeuedDeadServers().keySet();
    if (!queuedDeadServers.isEmpty()) {
      Configuration conf=server.getConfiguration();
      Path rootdir=FSUtils.getRootDir(conf);
      FileSystem fs=rootdir.getFileSystem(conf);
      for (      ServerName serverName : queuedDeadServers) {
        Path logDir=new Path(rootdir,HLogUtil.getHLogDirectoryName(serverName.toString()));
        Path splitDir=logDir.suffix(HLog.SPLITTING_EXT);
        if (fs.exists(logDir) || fs.exists(splitDir)) {
          LOG.debug("Found queued dead server " + serverName);
          failover=true;
          break;
        }
      }
      if (!failover) {
        LOG.info("AM figured that it's not a failover and cleaned up " + queuedDeadServers.size() + " queued dead servers");
        serverManager.removeRequeuedDeadServers();
      }
    }
  }
  Set<TableName> disabledOrDisablingOrEnabling=null;
  Map<HRegionInfo,ServerName> allRegions=null;
  if (!failover) {
    disabledOrDisablingOrEnabling=tableStateManager.getTablesInStates(ZooKeeperProtos.Table.State.DISABLED,ZooKeeperProtos.Table.State.DISABLING,ZooKeeperProtos.Table.State.ENABLING);
    allRegions=regionStates.closeAllUserRegions(disabledOrDisablingOrEnabling);
  }
  regionStateStore.start();
  if (failover) {
    if (deadServers != null && !deadServers.isEmpty()) {
      for (      ServerName serverName : deadServers) {
        if (!serverManager.isServerDead(serverName)) {
          serverManager.expireServer(serverName);
        }
      }
    }
    processRegionsInTransition(regionStates.getRegionsInTransition().values());
  }
  failoverCleanupDone();
  if (!failover) {
    LOG.info("Clean cluster startup. Assigning user regions");
    assignAllUserRegions(allRegions);
  }
  for (  HRegionInfo h : replicasToClose) {
    unassign(h);
  }
  replicasToClose.clear();
  return failover;
}
