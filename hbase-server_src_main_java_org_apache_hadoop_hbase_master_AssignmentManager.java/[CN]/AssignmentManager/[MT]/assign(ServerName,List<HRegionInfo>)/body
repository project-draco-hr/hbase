{
  long startTime=EnvironmentEdgeManager.currentTimeMillis();
  try {
    int regionCount=regions.size();
    if (regionCount == 0) {
      return true;
    }
    LOG.info("Assigning " + regionCount + " region(s) to "+ destination.toString());
    Set<String> encodedNames=new HashSet<String>(regionCount);
    for (    HRegionInfo region : regions) {
      encodedNames.add(region.getEncodedName());
    }
    List<HRegionInfo> failedToOpenRegions=new ArrayList<HRegionInfo>();
    Map<String,Lock> locks=locker.acquireLocks(encodedNames);
    try {
      Map<String,RegionPlan> plans=new HashMap<String,RegionPlan>(regionCount);
      List<RegionState> states=new ArrayList<RegionState>(regionCount);
      for (      HRegionInfo region : regions) {
        String encodedName=region.getEncodedName();
        if (!isDisabledorDisablingRegionInRIT(region)) {
          RegionState state=forceRegionStateToOffline(region,false);
          boolean onDeadServer=false;
          if (state != null) {
            if (regionStates.wasRegionOnDeadServer(encodedName)) {
              LOG.info("Skip assigning " + region.getRegionNameAsString() + ", it's host "+ regionStates.getLastRegionServerOfRegion(encodedName)+ " is dead but not processed yet");
              onDeadServer=true;
            }
 else {
              RegionPlan plan=new RegionPlan(region,state.getServerName(),destination);
              plans.put(encodedName,plan);
              states.add(state);
              continue;
            }
          }
          if (!onDeadServer) {
            LOG.info("failed to force region state to offline, " + "will reassign later: " + region);
            failedToOpenRegions.add(region);
          }
        }
        Lock lock=locks.remove(encodedName);
        lock.unlock();
      }
      if (server.isStopped()) {
        return false;
      }
      this.addPlans(plans);
      List<Pair<HRegionInfo,List<ServerName>>> regionOpenInfos=new ArrayList<Pair<HRegionInfo,List<ServerName>>>(states.size());
      for (      RegionState state : states) {
        HRegionInfo region=state.getRegion();
        regionStates.updateRegionState(region,State.PENDING_OPEN,destination);
        List<ServerName> favoredNodes=ServerName.EMPTY_SERVER_LIST;
        if (this.shouldAssignRegionsWithFavoredNodes) {
          favoredNodes=((FavoredNodeLoadBalancer)this.balancer).getFavoredNodes(region);
        }
        regionOpenInfos.add(new Pair<HRegionInfo,List<ServerName>>(region,favoredNodes));
      }
      try {
        long maxWaitTime=System.currentTimeMillis() + this.server.getConfiguration().getLong("hbase.regionserver.rpc.startup.waittime",60000);
        for (int i=1; i <= maximumAttempts && !server.isStopped(); i++) {
          try {
            List<RegionOpeningState> regionOpeningStateList=serverManager.sendRegionOpen(destination,regionOpenInfos);
            if (regionOpeningStateList == null) {
              return false;
            }
            for (int k=0, n=regionOpeningStateList.size(); k < n; k++) {
              RegionOpeningState openingState=regionOpeningStateList.get(k);
              if (openingState != RegionOpeningState.OPENED) {
                HRegionInfo region=regionOpenInfos.get(k).getFirst();
                failedToOpenRegions.add(region);
              }
            }
            break;
          }
 catch (          IOException e) {
            if (e instanceof RemoteException) {
              e=((RemoteException)e).unwrapRemoteException();
            }
            if (e instanceof RegionServerStoppedException) {
              LOG.warn("The region server was shut down, ",e);
              return false;
            }
 else             if (e instanceof ServerNotRunningYetException) {
              long now=System.currentTimeMillis();
              if (now < maxWaitTime) {
                LOG.debug("Server is not yet up; waiting up to " + (maxWaitTime - now) + "ms",e);
                Thread.sleep(100);
                i--;
                continue;
              }
            }
 else             if (e instanceof java.net.SocketTimeoutException && this.serverManager.isServerOnline(destination)) {
              if (LOG.isDebugEnabled()) {
                LOG.debug("Bulk assigner openRegion() to " + destination + " has timed out, but the regions might"+ " already be opened on it.",e);
              }
              Thread.sleep(100);
              i--;
              continue;
            }
            throw e;
          }
        }
      }
 catch (      IOException e) {
        LOG.info("Unable to communicate with " + destination + " in order to assign regions, ",e);
        return false;
      }
    }
  finally {
      for (      Lock lock : locks.values()) {
        lock.unlock();
      }
    }
    if (!failedToOpenRegions.isEmpty()) {
      for (      HRegionInfo region : failedToOpenRegions) {
        if (!regionStates.isRegionOnline(region)) {
          invokeAssign(region);
        }
      }
    }
    LOG.debug("Bulk assigning done for " + destination);
    return true;
  }
  finally {
    metricsAssignmentManager.updateBulkAssignTime(EnvironmentEdgeManager.currentTimeMillis() - startTime);
  }
}
