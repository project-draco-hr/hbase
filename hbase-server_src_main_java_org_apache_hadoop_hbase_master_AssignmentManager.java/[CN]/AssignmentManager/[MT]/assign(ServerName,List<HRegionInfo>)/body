{
  if (regions.size() == 0) {
    return true;
  }
  LOG.debug("Bulk assigning " + regions.size() + " region(s) to "+ destination.toString());
  List<RegionState> states=new ArrayList<RegionState>(regions.size());
  for (  HRegionInfo region : regions) {
    states.add(forceRegionStateToOffline(region));
  }
  Map<String,RegionPlan> plans=new HashMap<String,RegionPlan>(regions.size());
  for (  HRegionInfo region : regions) {
    plans.put(region.getEncodedName(),new RegionPlan(region,null,destination));
  }
  this.addPlans(plans);
  AtomicInteger counter=new AtomicInteger(0);
  CreateUnassignedAsyncCallback cb=new CreateUnassignedAsyncCallback(this.watcher,destination,counter);
  for (  RegionState state : states) {
    if (!asyncSetOfflineInZooKeeper(state,cb,state)) {
      return false;
    }
  }
  int total=regions.size();
  for (int oldCounter=0; true; ) {
    int count=counter.get();
    if (oldCounter != count) {
      LOG.info(destination.toString() + " unassigned znodes=" + count+ " of total="+ total);
      oldCounter=count;
    }
    if (count == total)     break;
    Threads.sleep(1);
  }
  try {
    long maxWaitTime=System.currentTimeMillis() + this.master.getConfiguration().getLong("hbase.regionserver.rpc.startup.waittime",60000);
    while (!this.master.isStopped()) {
      try {
        this.serverManager.sendRegionOpen(destination,regions);
        break;
      }
 catch (      RemoteException e) {
        IOException decodedException=e.unwrapRemoteException();
        if (decodedException instanceof RegionServerStoppedException) {
          LOG.warn("The region server was shut down, ",decodedException);
          return false;
        }
 else         if (decodedException instanceof ServerNotRunningYetException) {
          long now=System.currentTimeMillis();
          if (now > maxWaitTime)           throw e;
          LOG.debug("Server is not yet up; waiting up to " + (maxWaitTime - now) + "ms",e);
          Thread.sleep(1000);
        }
        throw decodedException;
      }
    }
  }
 catch (  IOException e) {
    LOG.info("Unable to communicate with the region server in order" + " to assign regions",e);
    return false;
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  LOG.debug("Bulk assigning done for " + destination.toString());
  return true;
}
