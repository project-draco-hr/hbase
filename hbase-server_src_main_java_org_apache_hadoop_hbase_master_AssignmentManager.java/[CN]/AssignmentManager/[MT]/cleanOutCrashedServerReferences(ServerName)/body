{
synchronized (this.regionPlans) {
    for (Iterator<Map.Entry<String,RegionPlan>> i=this.regionPlans.entrySet().iterator(); i.hasNext(); ) {
      Map.Entry<String,RegionPlan> e=i.next();
      ServerName otherSn=e.getValue().getDestination();
      if (otherSn != null && otherSn.equals(sn)) {
        i.remove();
      }
    }
  }
  List<HRegionInfo> rits=regionStates.serverOffline(sn);
  for (Iterator<HRegionInfo> it=rits.iterator(); it.hasNext(); ) {
    HRegionInfo hri=it.next();
    String encodedName=hri.getEncodedName();
    Lock lock=locker.acquireLock(encodedName);
    try {
      RegionState regionState=regionStates.getRegionTransitionState(encodedName);
      if (regionState == null || (regionState.getServerName() != null && !regionState.isOnServer(sn)) || !RegionStates.isOneOfStates(regionState,State.PENDING_OPEN,State.OPENING,State.FAILED_OPEN,State.FAILED_CLOSE,State.OFFLINE)) {
        LOG.info("Skip " + regionState + " since it is not opening/failed_close"+ " on the dead server any more: "+ sn);
        it.remove();
      }
 else {
        if (tableStateManager.isTableState(hri.getTable(),TableState.State.DISABLED,TableState.State.DISABLING)) {
          regionStates.regionOffline(hri);
          it.remove();
          continue;
        }
        regionStates.updateRegionState(hri,State.OFFLINE);
      }
    }
  finally {
      lock.unlock();
    }
  }
  return rits;
}
