{
  if (current != null && !current.isMergingNewOnServer(serverName)) {
    return "Merging daughter region already exists, p=" + current;
  }
  if (!((HMaster)server).getSplitOrMergeTracker().isSplitOrMergeEnabled(MasterSwitchType.MERGE)) {
    return "merge switch is off!";
  }
  if (current != null) {
    return null;
  }
  final HRegionInfo a=HRegionInfo.convert(transition.getRegionInfo(1));
  final HRegionInfo b=HRegionInfo.convert(transition.getRegionInfo(2));
  Set<String> encodedNames=new HashSet<String>(2);
  encodedNames.add(a.getEncodedName());
  encodedNames.add(b.getEncodedName());
  Map<String,Lock> locks=locker.acquireLocks(encodedNames);
  try {
    RegionState rs_a=regionStates.getRegionState(a);
    RegionState rs_b=regionStates.getRegionState(b);
    if (rs_a == null || !rs_a.isOpenedOnServer(serverName) || rs_b == null || !rs_b.isOpenedOnServer(serverName)) {
      return "Some daughter is not in a state to merge on " + serverName + ", a="+ rs_a+ ", b="+ rs_b;
    }
    regionStates.updateRegionState(a,State.MERGING);
    regionStates.updateRegionState(b,State.MERGING);
    regionStates.createRegionState(hri,State.MERGING_NEW,serverName,null);
    return null;
  }
  finally {
    for (    Lock lock : locks.values()) {
      lock.unlock();
    }
  }
}
