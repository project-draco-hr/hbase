{
  if (current == null || !current.isMergingNewOrOpenedOnServer(serverName)) {
    return hri.getShortNameToLog() + " is not merging on " + serverName;
  }
  if (current.isOpened()) {
    return null;
  }
  final HRegionInfo a=HRegionInfo.convert(transition.getRegionInfo(1));
  final HRegionInfo b=HRegionInfo.convert(transition.getRegionInfo(2));
  RegionState rs_a=regionStates.getRegionState(a);
  RegionState rs_b=regionStates.getRegionState(b);
  if (rs_a == null || !rs_a.isMergingOnServer(serverName) || rs_b == null || !rs_b.isMergingOnServer(serverName)) {
    return "Some daughter is not known to be merging on " + serverName + ", a="+ rs_a+ ", b="+ rs_b;
  }
  regionOffline(a,State.MERGED);
  regionOffline(b,State.MERGED);
  regionOnline(hri,serverName,1);
  if (getTableStateManager().isTableState(hri.getTable(),TableState.State.DISABLED,TableState.State.DISABLING)) {
    invokeUnAssign(hri);
  }
 else {
    Callable<Object> mergeReplicasCallable=new Callable<Object>(){
      @Override public Object call(){
        doMergingOfReplicas(hri,a,b);
        return null;
      }
    }
;
    threadPoolExecutorService.submit(mergeReplicasCallable);
  }
  return null;
}
