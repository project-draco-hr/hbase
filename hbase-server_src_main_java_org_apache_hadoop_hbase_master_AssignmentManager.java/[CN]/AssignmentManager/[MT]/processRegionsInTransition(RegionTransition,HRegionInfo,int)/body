{
  EventType et=rt.getEventType();
  final ServerName sn=rt.getServerName();
  String encodedRegionName=regionInfo.getEncodedName();
  LOG.info("Processing region " + regionInfo.getRegionNameAsString() + " in state "+ et);
  if (regionStates.isRegionInTransition(encodedRegionName)) {
    return;
  }
switch (et) {
case M_ZK_REGION_CLOSING:
    if (!serverManager.isServerOnline(sn)) {
      forceOffline(regionInfo,rt);
    }
 else {
      regionStates.updateRegionState(rt,RegionState.State.CLOSING);
      final RegionState rs=regionStates.getRegionState(regionInfo);
      this.executorService.submit(new EventHandler(server,EventType.M_MASTER_RECOVERY){
        @Override public void process() throws IOException {
          ReentrantLock lock=locker.acquireLock(regionInfo.getEncodedName());
          try {
            unassign(regionInfo,rs,expectedVersion,null,true,null);
          }
  finally {
            lock.unlock();
          }
        }
      }
);
    }
  break;
case RS_ZK_REGION_CLOSED:
case RS_ZK_REGION_FAILED_OPEN:
addToRITandCallClose(regionInfo,RegionState.State.CLOSED,rt);
break;
case M_ZK_REGION_OFFLINE:
if (!serverManager.isServerOnline(sn)) {
addToRITandCallClose(regionInfo,RegionState.State.OFFLINE,rt);
}
 else {
regionStates.updateRegionState(rt,RegionState.State.PENDING_OPEN);
final RegionState rs=regionStates.getRegionState(regionInfo);
this.executorService.submit(new EventHandler(server,EventType.M_MASTER_RECOVERY){
@Override public void process() throws IOException {
  ReentrantLock lock=locker.acquireLock(regionInfo.getEncodedName());
  try {
    assign(rs,false,false);
  }
  finally {
    lock.unlock();
  }
}
}
);
}
break;
case RS_ZK_REGION_OPENING:
if (!serverManager.isServerOnline(sn)) {
forceOffline(regionInfo,rt);
}
 else {
regionStates.updateRegionState(rt,RegionState.State.OPENING);
}
break;
case RS_ZK_REGION_OPENED:
if (!serverManager.isServerOnline(sn)) {
forceOffline(regionInfo,rt);
}
 else {
regionStates.updateRegionState(rt,RegionState.State.OPEN);
new OpenedRegionHandler(server,this,regionInfo,sn,expectedVersion).process();
}
break;
case RS_ZK_REGION_SPLITTING:
if (!serverManager.isServerOnline(sn)) {
LOG.warn("Processed region " + regionInfo.getEncodedName() + " in state : "+ et+ " on a dead regionserver: "+ sn+ " doing nothing");
}
 else {
LOG.info("Processed region " + regionInfo.getEncodedName() + " in state : "+ et+ " nothing to do.");
}
break;
case RS_ZK_REGION_SPLIT:
if (!serverManager.isServerOnline(sn)) {
forceOffline(regionInfo,rt);
}
 else {
LOG.info("Processed region " + regionInfo.getEncodedName() + " in state : "+ et+ " nothing to do.");
}
break;
case RS_ZK_REGION_MERGING:
LOG.info("Processed region " + regionInfo.getEncodedName() + " in state : "+ et+ " nothing to do.");
break;
case RS_ZK_REGION_MERGE:
if (!serverManager.isServerOnline(sn)) {
LOG.warn("Processed region " + regionInfo.getEncodedName() + " in state : "+ et+ " on a dead regionserver: "+ sn+ " doing nothing");
}
 else {
LOG.info("Processed region " + regionInfo.getEncodedName() + " in state : "+ et+ " nothing to do.");
}
break;
default :
throw new IllegalStateException("Received region in state :" + et + " is not valid.");
}
}
