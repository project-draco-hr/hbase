{
  EventType et=rt.getEventType();
  final ServerName sn=rt.getServerName();
  final byte[] regionName=rt.getRegionName();
  final String encodedName=HRegionInfo.encodeRegionName(regionName);
  final String prettyPrintedRegionName=HRegionInfo.prettyPrint(encodedName);
  LOG.info("Processing " + prettyPrintedRegionName + " in state "+ et);
  if (regionStates.isRegionInTransition(encodedName)) {
    return;
  }
switch (et) {
case M_ZK_REGION_CLOSING:
    if (!serverManager.isServerOnline(sn)) {
      forceOffline(regionInfo,rt);
    }
 else {
      final RegionState rs=regionStates.updateRegionState(rt,State.CLOSING);
      this.executorService.submit(new EventHandler(server,EventType.M_MASTER_RECOVERY){
        @Override public void process() throws IOException {
          ReentrantLock lock=locker.acquireLock(regionInfo.getEncodedName());
          try {
            unassign(regionInfo,rs,expectedVersion,null,true,null);
            if (regionStates.isRegionOffline(regionInfo)) {
              assign(regionInfo,true);
            }
          }
  finally {
            lock.unlock();
          }
        }
      }
);
    }
  break;
case RS_ZK_REGION_CLOSED:
case RS_ZK_REGION_FAILED_OPEN:
addToRITandInvokeAssign(regionInfo,State.CLOSED,rt);
break;
case M_ZK_REGION_OFFLINE:
if (!serverManager.isServerOnline(sn)) {
addToRITandInvokeAssign(regionInfo,State.OFFLINE,rt);
}
 else {
regionStates.updateRegionState(rt,State.PENDING_OPEN);
final RegionState rs=regionStates.getRegionState(regionInfo);
this.executorService.submit(new EventHandler(server,EventType.M_MASTER_RECOVERY){
@Override public void process() throws IOException {
  ReentrantLock lock=locker.acquireLock(regionInfo.getEncodedName());
  try {
    RegionPlan plan=new RegionPlan(regionInfo,null,sn);
    addPlan(encodedName,plan);
    assign(rs,false,false);
  }
  finally {
    lock.unlock();
  }
}
}
);
}
break;
case RS_ZK_REGION_OPENING:
if (!serverManager.isServerOnline(sn)) {
forceOffline(regionInfo,rt);
}
 else {
regionStates.updateRegionState(rt,State.OPENING);
}
break;
case RS_ZK_REGION_OPENED:
if (!serverManager.isServerOnline(sn)) {
forceOffline(regionInfo,rt);
}
 else {
regionStates.updateRegionState(rt,State.OPEN);
new OpenedRegionHandler(server,this,regionInfo,sn,expectedVersion).process();
}
break;
case RS_ZK_REQUEST_REGION_SPLIT:
case RS_ZK_REGION_SPLITTING:
case RS_ZK_REGION_SPLIT:
if (serverManager.isServerOnline(sn)) {
regionStates.regionOnline(regionInfo,sn);
regionStates.updateRegionState(rt,State.SPLITTING);
}
if (!handleRegionSplitting(rt,encodedName,prettyPrintedRegionName,sn)) {
deleteSplittingNode(encodedName);
}
LOG.info("Processed region " + prettyPrintedRegionName + " in state : "+ et);
break;
case RS_ZK_REQUEST_REGION_MERGE:
case RS_ZK_REGION_MERGING:
case RS_ZK_REGION_MERGED:
if (!handleRegionMerging(rt,encodedName,prettyPrintedRegionName,sn)) {
deleteMergingNode(encodedName);
}
LOG.info("Processed region " + prettyPrintedRegionName + " in state : "+ et);
break;
default :
throw new IllegalStateException("Received region in state :" + et + " is not valid.");
}
}
