{
  if (!hijack && !state.isClosed() && !state.isOffline()) {
    String msg="Unexpected state : " + state + " .. Cannot transit it to OFFLINE.";
    this.master.abort(msg,new IllegalStateException(msg));
    return -1;
  }
  boolean allowZNodeCreation=false;
  if (hijack && (state.getState().equals(RegionState.State.PENDING_OPEN) || state.getState().equals(RegionState.State.OPENING))) {
    state.update(RegionState.State.PENDING_OPEN);
    allowZNodeCreation=false;
  }
 else {
    state.update(RegionState.State.OFFLINE);
    allowZNodeCreation=true;
  }
  int versionOfOfflineNode=-1;
  try {
    versionOfOfflineNode=ZKAssign.createOrForceNodeOffline(master.getZooKeeper(),state.getRegion(),this.master.getServerName(),hijack,allowZNodeCreation);
    if (versionOfOfflineNode == -1) {
      LOG.warn("Attempted to create/force node into OFFLINE state before " + "completing assignment but failed to do so for " + state);
      return -1;
    }
  }
 catch (  KeeperException e) {
    master.abort("Unexpected ZK exception creating/setting node OFFLINE",e);
    return -1;
  }
  return versionOfOfflineNode;
}
