{
  RegionState rs_p=regionStates.getRegionState(p);
  RegionState rs_a=regionStates.getRegionState(a);
  RegionState rs_b=regionStates.getRegionState(b);
  if (!(rs_p.isOpenOrSplittingOnServer(sn) && (rs_a == null || rs_a.isOpenOrSplittingNewOnServer(sn)) && (rs_b == null || rs_b.isOpenOrSplittingNewOnServer(sn)))) {
    return "Not in state good for split";
  }
  regionStates.updateRegionState(a,State.SPLITTING_NEW,sn);
  regionStates.updateRegionState(b,State.SPLITTING_NEW,sn);
  regionStates.updateRegionState(p,State.SPLITTING);
  if (code == TransitionCode.SPLIT) {
    if (TEST_SKIP_SPLIT_HANDLING) {
      return "Skipping split message, TEST_SKIP_SPLIT_HANDLING is set";
    }
    regionOffline(p,State.SPLIT);
    regionOnline(a,sn,1);
    regionOnline(b,sn,1);
    if (getTableStateManager().isTableState(p.getTable(),ZooKeeperProtos.Table.State.DISABLED,ZooKeeperProtos.Table.State.DISABLING)) {
      invokeUnAssign(a);
      invokeUnAssign(b);
    }
  }
 else   if (code == TransitionCode.SPLIT_PONR) {
    try {
      regionStateStore.splitRegion(p,a,b,sn);
    }
 catch (    IOException ioe) {
      LOG.info("Failed to record split region " + p.getShortNameToLog());
      return "Failed to record the splitting in meta";
    }
  }
 else   if (code == TransitionCode.SPLIT_REVERTED) {
    regionOnline(p,sn);
    regionOffline(a);
    regionOffline(b);
    if (getTableStateManager().isTableState(p.getTable(),ZooKeeperProtos.Table.State.DISABLED,ZooKeeperProtos.Table.State.DISABLING)) {
      invokeUnAssign(p);
    }
  }
  return null;
}
