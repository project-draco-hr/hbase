{
synchronized (this.regionPlans) {
    for (Iterator<Map.Entry<String,RegionPlan>> i=this.regionPlans.entrySet().iterator(); i.hasNext(); ) {
      Map.Entry<String,RegionPlan> e=i.next();
      ServerName otherSn=e.getValue().getDestination();
      if (otherSn != null && otherSn.equals(sn)) {
        i.remove();
      }
    }
  }
  List<HRegionInfo> regions=regionStates.serverOffline(watcher,sn);
  for (Iterator<HRegionInfo> it=regions.iterator(); it.hasNext(); ) {
    HRegionInfo hri=it.next();
    String encodedName=hri.getEncodedName();
    Lock lock=locker.acquireLock(encodedName);
    try {
      RegionState regionState=regionStates.getRegionTransitionState(encodedName);
      if (regionState == null || !regionState.isPendingOpenOrOpeningOnServer(sn)) {
        LOG.info("Skip region " + hri + " since it is not opening on the dead server any more: "+ sn);
        it.remove();
      }
 else {
        try {
          ZKAssign.deleteNodeFailSilent(watcher,hri);
        }
 catch (        KeeperException ke) {
          server.abort("Unexpected ZK exception deleting node " + hri,ke);
        }
        if (zkTable.isDisablingOrDisabledTable(hri.getTableNameAsString())) {
          it.remove();
          regionStates.regionOffline(hri);
          continue;
        }
        regionStates.updateRegionState(hri,RegionState.State.CLOSED);
      }
    }
  finally {
      lock.unlock();
    }
  }
  return regions;
}
