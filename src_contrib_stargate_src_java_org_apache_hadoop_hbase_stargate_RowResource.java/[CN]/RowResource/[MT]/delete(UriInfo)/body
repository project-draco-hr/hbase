{
  if (LOG.isDebugEnabled()) {
    LOG.debug("DELETE " + uriInfo.getAbsolutePath());
  }
  Delete delete=new Delete(rowspec.getRow());
  for (  byte[] column : rowspec.getColumns()) {
    byte[][] split=KeyValue.parseColumn(column);
    if (rowspec.hasTimestamp()) {
      if (split[1] != null) {
        delete.deleteColumns(split[0],split[1],rowspec.getTimestamp());
      }
 else {
        delete.deleteFamily(split[0],rowspec.getTimestamp());
      }
    }
 else {
      if (split[1] != null) {
        delete.deleteColumns(split[0],split[1]);
      }
 else {
        delete.deleteFamily(split[0]);
      }
    }
  }
  HTablePool pool;
  try {
    pool=RESTServlet.getInstance().getTablePool();
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.INTERNAL_SERVER_ERROR);
  }
  HTableInterface table=null;
  try {
    table=pool.getTable(this.table);
    table.delete(delete);
    if (LOG.isDebugEnabled()) {
      LOG.debug("DELETE " + delete.toString());
    }
    table.flushCommits();
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.SERVICE_UNAVAILABLE);
  }
 finally {
    if (table != null) {
      pool.putTable(table);
    }
  }
  return Response.ok().build();
}
