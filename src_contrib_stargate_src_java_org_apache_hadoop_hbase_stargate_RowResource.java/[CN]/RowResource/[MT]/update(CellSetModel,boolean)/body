{
  if (replace) {
    deleteRow();
  }
  HTablePool pool;
  try {
    pool=RESTServlet.getInstance().getTablePool(this.table);
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.INTERNAL_SERVER_ERROR);
  }
  HTable table=null;
  try {
    table=pool.get();
    for (    RowModel row : model.getRows()) {
      Put put=new Put(row.getKey());
      for (      CellModel cell : row.getCells()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("update cell '" + Bytes.toStringBinary(cell.getColumn()) + "' @"+ cell.getTimestamp()+ " length "+ cell.getValue().length);
        }
        byte[][] parts=KeyValue.parseColumn(cell.getColumn());
        if (cell.hasUserTimestamp()) {
          put.add(parts[0],parts[1],cell.getTimestamp(),cell.getValue());
        }
 else {
          put.add(parts[0],parts[1],cell.getValue());
        }
      }
      table.put(put);
    }
    table.flushCommits();
    ResponseBuilder response=Response.ok();
    return response.build();
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.SERVICE_UNAVAILABLE);
  }
 finally {
    if (table != null) {
      pool.put(table);
    }
  }
}
