{
  TreeMap<byte[],Integer> map=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  byte[][] keys=null;
  for (  Path regionDir : regionDirList) {
    LOG.debug("Parsing region dir: " + regionDir);
    Path hfofDir=regionDir;
    if (!fs.exists(hfofDir)) {
      LOG.warn("HFileOutputFormat dir " + hfofDir + " not found");
    }
    FileStatus[] familyDirStatuses=fs.listStatus(hfofDir);
    if (familyDirStatuses == null) {
      throw new IOException("No families found in " + hfofDir);
    }
    for (    FileStatus stat : familyDirStatuses) {
      if (!stat.isDirectory()) {
        LOG.warn("Skipping non-directory " + stat.getPath());
        continue;
      }
      boolean isIgnore=false;
      String pathName=stat.getPath().getName();
      for (      String ignore : ignoreDirs) {
        if (pathName.contains(ignore)) {
          LOG.warn("Skipping non-family directory" + pathName);
          isIgnore=true;
          break;
        }
      }
      if (isIgnore) {
        continue;
      }
      Path familyDir=stat.getPath();
      LOG.debug("Parsing family dir [" + familyDir.toString() + " in region ["+ regionDir+ "]");
      if (familyDir.getName().startsWith("_") || familyDir.getName().startsWith(".")) {
        continue;
      }
      Path[] hfiles=FileUtil.stat2Paths(fs.listStatus(familyDir));
      for (      Path hfile : hfiles) {
        if (hfile.getName().startsWith("_") || hfile.getName().startsWith(".") || StoreFileInfo.isReference(hfile.getName())|| HFileLink.isHFileLink(hfile.getName())) {
          continue;
        }
        HFile.Reader reader=HFile.createReader(fs,hfile,new CacheConfig(conf),conf);
        final byte[] first, last;
        try {
          reader.loadFileInfo();
          first=reader.getFirstRowKey();
          last=reader.getLastRowKey();
          LOG.debug("Trying to figure out region boundaries hfile=" + hfile + " first="+ Bytes.toStringBinary(first)+ " last="+ Bytes.toStringBinary(last));
          Integer value=map.containsKey(first) ? (Integer)map.get(first) : 0;
          map.put(first,value + 1);
          value=map.containsKey(last) ? (Integer)map.get(last) : 0;
          map.put(last,value - 1);
        }
  finally {
          reader.close();
        }
      }
    }
  }
  keys=LoadIncrementalHFiles.inferBoundaries(map);
  return keys;
}
