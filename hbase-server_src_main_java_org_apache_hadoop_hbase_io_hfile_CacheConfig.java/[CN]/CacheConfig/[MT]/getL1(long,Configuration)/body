{
  if (GLOBAL_L1_CACHE_INSTANCE != null)   return GLOBAL_L1_CACHE_INSTANCE;
  if (blockCacheDisabled)   return null;
  if (cacheSize < 0)   return null;
  String policy=c.get(HFILE_BLOCK_CACHE_POLICY_KEY,HFILE_BLOCK_CACHE_POLICY_DEFAULT);
  int blockSize=c.getInt(BLOCKCACHE_BLOCKSIZE_KEY,HConstants.DEFAULT_BLOCKSIZE);
  LOG.info("Allocating BlockCache size=" + StringUtils.byteDesc(cacheSize) + ", blockSize="+ StringUtils.byteDesc(blockSize));
  if (policy.equalsIgnoreCase("LRU")) {
    GLOBAL_L1_CACHE_INSTANCE=new LruBlockCache(cacheSize,blockSize,true,c);
  }
 else   if (policy.equalsIgnoreCase("TinyLFU")) {
    GLOBAL_L1_CACHE_INSTANCE=new TinyLfuBlockCache(cacheSize,blockSize,ForkJoinPool.commonPool(),c);
  }
 else {
    throw new IllegalArgumentException("Unknown policy: " + policy);
  }
  return GLOBAL_L1_CACHE_INSTANCE;
}
