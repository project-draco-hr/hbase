{
  if (globalBlockCache != null)   return globalBlockCache;
  if (blockCacheDisabled)   return null;
  float cachePercentage=conf.getFloat(HConstants.HFILE_BLOCK_CACHE_SIZE_KEY,HConstants.HFILE_BLOCK_CACHE_SIZE_DEFAULT);
  if (cachePercentage == 0L) {
    blockCacheDisabled=true;
    return null;
  }
  if (cachePercentage > 1.0) {
    throw new IllegalArgumentException(HConstants.HFILE_BLOCK_CACHE_SIZE_KEY + " must be between 0.0 and 1.0, and not > 1.0");
  }
  MemoryUsage mu=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
  long cacheSize=(long)(mu.getMax() * cachePercentage);
  int blockSize=conf.getInt("hbase.offheapcache.minblocksize",HFile.DEFAULT_BLOCKSIZE);
  long offHeapCacheSize=(long)(conf.getFloat("hbase.offheapcache.percentage",(float)0) * DirectMemoryUtils.getDirectMemorySize());
  LOG.info("Allocating LruBlockCache with maximum size " + StringUtils.humanReadableInt(cacheSize));
  if (offHeapCacheSize <= 0) {
    globalBlockCache=new LruBlockCache(cacheSize,StoreFile.DEFAULT_BLOCKSIZE_SMALL,conf);
  }
 else {
    globalBlockCache=new DoubleBlockCache(cacheSize,offHeapCacheSize,StoreFile.DEFAULT_BLOCKSIZE_SMALL,blockSize,conf);
  }
  return globalBlockCache;
}
