{
  LOG.info("Running testDelayedRpc delayReturnValue=" + delayReturnValue);
  Configuration conf=HBaseConfiguration.create();
  InetSocketAddress isa=new InetSocketAddress("localhost",0);
  TestDelayedImplementation instance=new TestDelayedImplementation(delayReturnValue);
  BlockingService service=TestDelayedRpcProtos.TestDelayedService.newReflectiveBlockingService(instance);
  rpcServer=new RpcServer(null,"testDelayedRpc",Lists.newArrayList(new RpcServer.BlockingServiceAndInterface(service,null)),isa,conf,new FifoRpcScheduler(conf,1));
  rpcServer.start();
  RpcClient rpcClient=RpcClientFactory.createClient(conf,HConstants.DEFAULT_CLUSTER_ID.toString());
  try {
    BlockingRpcChannel channel=rpcClient.createBlockingRpcChannel(ServerName.valueOf(rpcServer.getListenerAddress().getHostName(),rpcServer.getListenerAddress().getPort(),System.currentTimeMillis()),User.getCurrent(),RPC_CLIENT_TIMEOUT);
    TestDelayedRpcProtos.TestDelayedService.BlockingInterface stub=TestDelayedRpcProtos.TestDelayedService.newBlockingStub(channel);
    List<Integer> results=new ArrayList<Integer>();
    TestThread th1=new TestThread(stub,true,results);
    TestThread th2=new TestThread(stub,false,results);
    TestThread th3=new TestThread(stub,false,results);
    th1.start();
    Thread.sleep(100);
    th2.start();
    Thread.sleep(200);
    th3.start();
    th1.join();
    th2.join();
    th3.join();
    assertEquals(UNDELAYED,results.get(0).intValue());
    assertEquals(UNDELAYED,results.get(1).intValue());
    assertEquals(results.get(2).intValue(),delayReturnValue ? DELAYED : 0xDEADBEEF);
  }
  finally {
    rpcClient.close();
  }
}
