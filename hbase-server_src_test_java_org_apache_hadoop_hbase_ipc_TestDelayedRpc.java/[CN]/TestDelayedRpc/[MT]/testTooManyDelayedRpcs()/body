{
  Configuration conf=HBaseConfiguration.create();
  final int MAX_DELAYED_RPC=10;
  conf.setInt("hbase.ipc.warn.delayedrpc.number",MAX_DELAYED_RPC);
  ListAppender listAppender=new ListAppender();
  Logger log=Logger.getLogger("org.apache.hadoop.ipc.HBaseServer");
  log.addAppender(listAppender);
  log.setLevel(Level.WARN);
  InetSocketAddress isa=new InetSocketAddress("localhost",0);
  TestRpcImpl instance=new TestRpcImpl(true);
  rpcServer=HBaseServerRPC.getServer(instance.getClass(),instance,new Class<?>[]{TestRpcImpl.class},isa.getHostName(),isa.getPort(),1,0,true,conf,0);
  rpcServer.start();
  ProtobufRpcClientEngine clientEngine=new ProtobufRpcClientEngine(conf);
  try {
    TestRpc client=clientEngine.getProxy(TestRpc.class,rpcServer.getListenerAddress(),conf,1000);
    Thread threads[]=new Thread[MAX_DELAYED_RPC + 1];
    for (int i=0; i < MAX_DELAYED_RPC; i++) {
      threads[i]=new TestThread(client,true,null);
      threads[i].start();
    }
    assertTrue(listAppender.getMessages().isEmpty());
    threads[MAX_DELAYED_RPC]=new TestThread(client,true,null);
    threads[MAX_DELAYED_RPC].start();
    for (int i=0; i < MAX_DELAYED_RPC; i++) {
      threads[i].join();
    }
    assertFalse(listAppender.getMessages().isEmpty());
    assertTrue(listAppender.getMessages().get(0).startsWith("Too many delayed calls"));
    log.removeAppender(listAppender);
  }
  finally {
    clientEngine.close();
  }
}
