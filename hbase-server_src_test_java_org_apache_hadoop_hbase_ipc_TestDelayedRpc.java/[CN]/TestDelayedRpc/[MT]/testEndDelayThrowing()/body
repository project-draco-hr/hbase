{
  Configuration conf=HBaseConfiguration.create();
  InetSocketAddress isa=new InetSocketAddress("localhost",0);
  FaultyTestDelayedImplementation instance=new FaultyTestDelayedImplementation();
  BlockingService service=TestDelayedRpcProtos.TestDelayedService.newReflectiveBlockingService(instance);
  rpcServer=new RpcServer(null,"testEndDelayThrowing",Lists.newArrayList(new RpcServer.BlockingServiceAndInterface(service,null)),isa,conf,new FifoRpcScheduler(conf,1));
  rpcServer.start();
  RpcClient rpcClient=RpcClientFactory.createClient(conf,HConstants.DEFAULT_CLUSTER_ID.toString());
  try {
    InetSocketAddress address=rpcServer.getListenerAddress();
    if (address == null) {
      throw new IOException("Listener channel is closed");
    }
    BlockingRpcChannel channel=rpcClient.createBlockingRpcChannel(ServerName.valueOf(address.getHostName(),address.getPort(),System.currentTimeMillis()),User.getCurrent(),1000);
    TestDelayedRpcProtos.TestDelayedService.BlockingInterface stub=TestDelayedRpcProtos.TestDelayedService.newBlockingStub(channel);
    int result=0xDEADBEEF;
    try {
      result=stub.test(null,TestArg.newBuilder().setDelay(false).build()).getResponse();
    }
 catch (    Exception e) {
      fail("No exception should have been thrown.");
    }
    assertEquals(result,UNDELAYED);
    boolean caughtException=false;
    try {
      result=stub.test(null,TestArg.newBuilder().setDelay(true).build()).getResponse();
    }
 catch (    Exception e) {
      if (e.getCause().getMessage().contains("java.lang.Exception: Something went wrong")) {
        caughtException=true;
      }
      LOG.warn("Caught exception, expected=" + caughtException);
    }
    assertTrue(caughtException);
  }
  finally {
    rpcClient.close();
  }
}
