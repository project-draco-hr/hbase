{
switch (type) {
case DOUBLE:
    output.writeDoubleNoTag((Double)value);
  break;
case FLOAT:
output.writeFloatNoTag((Float)value);
break;
case INT64:
output.writeInt64NoTag((Long)value);
break;
case UINT64:
output.writeUInt64NoTag((Long)value);
break;
case INT32:
output.writeInt32NoTag((Integer)value);
break;
case FIXED64:
output.writeFixed64NoTag((Long)value);
break;
case FIXED32:
output.writeFixed32NoTag((Integer)value);
break;
case BOOL:
output.writeBoolNoTag((Boolean)value);
break;
case GROUP:
output.writeGroupNoTag((MessageLite)value);
break;
case MESSAGE:
output.writeMessageNoTag((MessageLite)value);
break;
case STRING:
if (value instanceof ByteString) {
output.writeBytesNoTag((ByteString)value);
}
 else {
output.writeStringNoTag((String)value);
}
break;
case BYTES:
if (value instanceof ByteString) {
output.writeBytesNoTag((ByteString)value);
}
 else {
output.writeByteArrayNoTag((byte[])value);
}
break;
case UINT32:
output.writeUInt32NoTag((Integer)value);
break;
case SFIXED32:
output.writeSFixed32NoTag((Integer)value);
break;
case SFIXED64:
output.writeSFixed64NoTag((Long)value);
break;
case SINT32:
output.writeSInt32NoTag((Integer)value);
break;
case SINT64:
output.writeSInt64NoTag((Long)value);
break;
case ENUM:
if (value instanceof Internal.EnumLite) {
output.writeEnumNoTag(((Internal.EnumLite)value).getNumber());
}
 else {
output.writeEnumNoTag(((Integer)value).intValue());
}
break;
}
}
