{
  Map<String,String[]> load=new HashMap<String,String[]>();
  load.put("SHOW",new String[]{"Show information about selected title","SHOW TABLES[or substitution variable name];"});
  load.put("FS",new String[]{"Hadoop FsShell; entering a lone 'FS;' " + "will emit usage","FS [-option] arguments..;"});
  load.put("JAR",new String[]{"Hadoop RunJar util","JAR jarFile [mainClass] arguments...;"});
  load.put("CLEAR",new String[]{"Clear the screen","CLEAR;"});
  load.put("DESCRIBE",new String[]{"Print table information","[DESCRIBE|DESC] table_name;"});
  load.put("CREATE",new String[]{"Create tables","CREATE TABLE table_name (column_family_name [MAX_VERSIONS=n] " + "[MAX_LENGTH=n] [COMPRESSION=NONE|RECORD|BLOCK] [IN_MEMORY] " + "[BLOOMFILTER=NONE|BLOOM|COUNTING|RETOUCHED VECTOR_SIZE=n NUM_HASH=n], "+ "...)"});
  load.put("DROP",new String[]{"Drop tables","DROP TABLE table_name [, table_name] ...;"});
  load.put("INSERT",new String[]{"Insert values into table","INSERT INTO table_name (column_name, ...) " + "VALUES ('value', ...) WHERE row='row_key';"});
  load.put("DELETE",new String[]{"Delete table data","DELETE {column_name, [, column_name] ... | *} FROM table_name " + "WHERE row='row-key';"});
  load.put("SELECT",new String[]{"Select values from table","SELECT {column_name, [, column_name] ... | *} FROM table_name " + "[WHERE row='row_key' | STARTING FROM 'row-key'] " + "[NUM_VERSIONS = version_count] "+ "[TIMESTAMP 'timestamp'] "+ "[LIMIT = row_count] "+ "[INTO FILE 'file_name'];"});
  load.put("ALTER",new String[]{"Alter structure of table","ALTER TABLE table_name ADD column_spec | " + "ADD (column_spec, column_spec, ...) | " + "CHANGE column_family column_spec | "+ "DROP column_family_name | "+ "CHANGE column_spec;"});
  load.put("EXIT",new String[]{"Exit shell","EXIT;"});
  load.put("TABLE",new String[]{"Load a table","A = table('table_name');"});
  load.put("SUBSTITUTE",new String[]{"Substitute expression to [A~Z]","D = A.projection('cf_name1'[, 'cf_name2']);"});
  load.put("SAVE",new String[]{"Save results into specified table (It runs a mapreduce job)","SAVE A INTO table('table_name');"});
  load.put("PROJECTION",new String[]{"Selects a subset of the columnfamilies of a relation","A = TABLE('table_name');" + " B = A.Projection('cf_name1'[, 'cf_name2']);"});
  load.put("SELECTION",new String[]{"Selects a subset of the rows in a relation that satisfy a selection condition (>, <, AND, OR, etc.)","A = Table('table_name');" + " B = A.Selection(cf_name1 > 100 [AND cf_name2 = 'string_value']);"});
  load.put("GROUP",new String[]{"Group rows by value of an attribute","A = Table('table_name');" + " B = Group A by ('cf_name1'[, 'cf_name2']);"});
  return load;
}
