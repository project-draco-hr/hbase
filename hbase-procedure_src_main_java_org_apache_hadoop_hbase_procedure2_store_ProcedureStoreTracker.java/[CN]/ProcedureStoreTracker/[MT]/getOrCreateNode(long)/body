{
  BitSetNode leftNode=null;
  boolean leftCanGrow=false;
  Map.Entry<Long,BitSetNode> leftEntry=map.floorEntry(procId);
  if (leftEntry != null) {
    leftNode=leftEntry.getValue();
    if (leftNode.contains(procId)) {
      return leftNode;
    }
    leftCanGrow=leftNode.canGrow(procId);
  }
  BitSetNode rightNode=null;
  boolean rightCanGrow=false;
  Map.Entry<Long,BitSetNode> rightEntry=map.ceilingEntry(procId);
  if (rightEntry != null) {
    rightNode=rightEntry.getValue();
    rightCanGrow=rightNode.canGrow(procId);
    if (leftNode != null) {
      if (leftNode.canMerge(rightNode)) {
        return mergeNodes(leftNode,rightNode);
      }
      if (leftCanGrow && rightCanGrow) {
        if ((procId - leftNode.getEnd()) <= (rightNode.getStart() - procId)) {
          return growNode(leftNode,procId);
        }
        return growNode(rightNode,procId);
      }
    }
  }
  if (leftCanGrow) {
    return growNode(leftNode,procId);
  }
  if (rightCanGrow) {
    return growNode(rightNode,procId);
  }
  BitSetNode node=new BitSetNode(procId,partial);
  map.put(node.getStart(),node);
  return node;
}
