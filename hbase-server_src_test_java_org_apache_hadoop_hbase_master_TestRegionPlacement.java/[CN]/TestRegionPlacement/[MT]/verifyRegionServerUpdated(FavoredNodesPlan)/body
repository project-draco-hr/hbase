{
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  for (int i=0; i < SLAVES; i++) {
    HRegionServer rs=cluster.getRegionServer(i);
    for (    HRegion region : rs.getOnlineRegions(TableName.valueOf("testRegionAssignment"))) {
      InetSocketAddress[] favoredSocketAddress=rs.getFavoredNodesForRegion(region.getRegionInfo().getEncodedName());
      List<ServerName> favoredServerList=plan.getAssignmentMap().get(region.getRegionInfo());
      if (favoredServerList == null) {
        HTableDescriptor desc=region.getTableDesc();
        assertNull(favoredSocketAddress);
        assertTrue("User region " + region.getTableDesc().getTableName() + " should have favored nodes",(desc.isRootRegion() || desc.isMetaRegion()));
      }
 else {
        assertTrue(favoredSocketAddress.length == favoredServerList.size());
        assertTrue(favoredServerList.size() > 0);
        for (int j=0; j < favoredServerList.size(); j++) {
          InetSocketAddress addrFromRS=favoredSocketAddress[j];
          InetSocketAddress addrFromPlan=InetSocketAddress.createUnresolved(favoredServerList.get(j).getHostname(),favoredServerList.get(j).getPort());
          assertNotNull(addrFromRS);
          assertNotNull(addrFromPlan);
          assertTrue("Region server " + rs.getServerName().getHostAndPort() + " has the "+ positions[j]+ " for region "+ region.getRegionNameAsString()+ " is "+ addrFromRS+ " which is inconsistent with the plan "+ addrFromPlan,addrFromRS.equals(addrFromPlan));
        }
      }
    }
  }
}
