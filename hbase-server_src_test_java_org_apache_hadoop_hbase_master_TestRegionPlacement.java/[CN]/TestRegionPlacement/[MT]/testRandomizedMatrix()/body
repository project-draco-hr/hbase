{
  int rows=100;
  int cols=100;
  float[][] matrix=new float[rows][cols];
  Random random=new Random();
  for (int i=0; i < rows; i++) {
    for (int j=0; j < cols; j++) {
      matrix[i][j]=random.nextFloat();
    }
  }
  RegionPlacementMaintainer.RandomizedMatrix rm=new RegionPlacementMaintainer.RandomizedMatrix(rows,cols);
  float[][] transformed=rm.transform(matrix);
  float[][] invertedTransformed=rm.invert(transformed);
  for (int i=0; i < rows; i++) {
    for (int j=0; j < cols; j++) {
      if (matrix[i][j] != invertedTransformed[i][j]) {
        throw new RuntimeException();
      }
    }
  }
  int[] transformedIndices=new int[rows];
  for (int i=0; i < rows; i++) {
    transformedIndices[i]=random.nextInt(cols);
  }
  int[] invertedTransformedIndices=rm.invertIndices(transformedIndices);
  float[] transformedValues=new float[rows];
  float[] invertedTransformedValues=new float[rows];
  for (int i=0; i < rows; i++) {
    transformedValues[i]=transformed[i][transformedIndices[i]];
    invertedTransformedValues[i]=matrix[i][invertedTransformedIndices[i]];
  }
  Arrays.sort(transformedValues);
  Arrays.sort(invertedTransformedValues);
  if (!Arrays.equals(transformedValues,invertedTransformedValues)) {
    throw new RuntimeException();
  }
}
