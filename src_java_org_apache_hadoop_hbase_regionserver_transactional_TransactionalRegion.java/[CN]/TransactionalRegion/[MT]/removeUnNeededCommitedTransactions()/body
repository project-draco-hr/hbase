{
  Integer minStartSeqNumber=getMinStartSequenceNumber();
  if (minStartSeqNumber == null) {
    minStartSeqNumber=Integer.MAX_VALUE;
  }
  int numRemoved=0;
  for (  Entry<Integer,TransactionState> entry : new LinkedList<Entry<Integer,TransactionState>>(commitedTransactionsBySequenceNumber.entrySet())) {
    if (entry.getKey() >= minStartSeqNumber) {
      break;
    }
    numRemoved=numRemoved + (commitedTransactionsBySequenceNumber.remove(entry.getKey()) == null ? 0 : 1);
    numRemoved++;
  }
  if (LOG.isDebugEnabled()) {
    StringBuilder debugMessage=new StringBuilder();
    if (numRemoved > 0) {
      debugMessage.append("Removed ").append(numRemoved).append(" commited transactions");
      if (minStartSeqNumber == Integer.MAX_VALUE) {
        debugMessage.append("with any sequence number");
      }
 else {
        debugMessage.append("with sequence lower than ").append(minStartSeqNumber).append(".");
      }
      if (!commitedTransactionsBySequenceNumber.isEmpty()) {
        debugMessage.append(" Still have ").append(commitedTransactionsBySequenceNumber.size()).append(" left.");
      }
 else {
        debugMessage.append("None left.");
      }
      LOG.debug(debugMessage.toString());
    }
 else     if (commitedTransactionsBySequenceNumber.size() > 0) {
      debugMessage.append("Could not remove any transactions, and still have ").append(commitedTransactionsBySequenceNumber.size()).append(" left");
      LOG.debug(debugMessage.toString());
    }
  }
}
