{
  AssignmentManager am;
  Configuration conf=TEST_UTIL.getConfiguration();
  final HMaster master=Mockito.mock(HMaster.class);
  final Server server=Mockito.mock(Server.class);
  final ServerManager serverManager=Mockito.mock(ServerManager.class);
  final ServerName SERVERNAME_A=ServerName.valueOf("mockserver_a.org",1000,8000);
  final ServerName SERVERNAME_B=ServerName.valueOf("mockserver_b.org",1001,8000);
  LoadBalancer balancer=LoadBalancerFactory.getLoadBalancer(conf);
  CatalogTracker catalogTracker=Mockito.mock(CatalogTracker.class);
  final HRegionInfo REGIONINFO=new HRegionInfo(TableName.valueOf("table_test"),HConstants.EMPTY_START_ROW,HConstants.EMPTY_START_ROW);
  ZooKeeperWatcher zkWatcher=new ZooKeeperWatcher(TEST_UTIL.getConfiguration(),"zkWatcher-Test",abortable,true);
  Map<ServerName,ServerLoad> onlineServers=new HashMap<ServerName,ServerLoad>();
  onlineServers.put(SERVERNAME_A,ServerLoad.EMPTY_SERVERLOAD);
  onlineServers.put(SERVERNAME_B,ServerLoad.EMPTY_SERVERLOAD);
  Mockito.when(server.getConfiguration()).thenReturn(conf);
  Mockito.when(server.getServerName()).thenReturn(ServerName.valueOf("masterMock,1,1"));
  Mockito.when(server.getZooKeeper()).thenReturn(zkWatcher);
  CoordinatedStateManager cp=new ZkCoordinatedStateManager();
  cp.initialize(server);
  cp.start();
  Mockito.when(server.getCoordinatedStateManager()).thenReturn(cp);
  Mockito.when(serverManager.getOnlineServers()).thenReturn(onlineServers);
  Mockito.when(serverManager.getOnlineServersList()).thenReturn(new ArrayList<ServerName>(onlineServers.keySet()));
  Mockito.when(serverManager.createDestinationServersList()).thenReturn(new ArrayList<ServerName>(onlineServers.keySet()));
  Mockito.when(serverManager.createDestinationServersList(null)).thenReturn(new ArrayList<ServerName>(onlineServers.keySet()));
  for (  ServerName sn : onlineServers.keySet()) {
    Mockito.when(serverManager.isServerOnline(sn)).thenReturn(true);
    Mockito.when(serverManager.sendRegionClose(sn,REGIONINFO,-1)).thenReturn(true);
    Mockito.when(serverManager.sendRegionClose(sn,REGIONINFO,-1,null,false)).thenReturn(true);
    Mockito.when(serverManager.sendRegionOpen(sn,REGIONINFO,-1,new ArrayList<ServerName>())).thenReturn(RegionOpeningState.OPENED);
    Mockito.when(serverManager.sendRegionOpen(sn,REGIONINFO,-1,null)).thenReturn(RegionOpeningState.OPENED);
    Mockito.when(serverManager.addServerToDrainList(sn)).thenReturn(true);
  }
  Mockito.when(master.getServerManager()).thenReturn(serverManager);
  am=new AssignmentManager(server,serverManager,catalogTracker,balancer,startupMasterExecutor("mockExecutorService"),null,null);
  Mockito.when(master.getAssignmentManager()).thenReturn(am);
  Mockito.when(master.getZooKeeper()).thenReturn(zkWatcher);
  am.addPlan(REGIONINFO.getEncodedName(),new RegionPlan(REGIONINFO,null,SERVERNAME_A));
  zkWatcher.registerListenerFirst(am);
  addServerToDrainedList(SERVERNAME_A,onlineServers,serverManager);
  am.assign(REGIONINFO,true);
  setRegionOpenedOnZK(zkWatcher,SERVERNAME_A,REGIONINFO);
  setRegionOpenedOnZK(zkWatcher,SERVERNAME_B,REGIONINFO);
  am.waitForAssignment(REGIONINFO);
  assertTrue(am.getRegionStates().isRegionOnline(REGIONINFO));
  assertNotEquals(am.getRegionStates().getRegionServerOfRegion(REGIONINFO),SERVERNAME_A);
}
