{
  currentState.prevOffset=in.position();
  int keyLength=in.getInt();
  int valueOffset=currentState.prevOffset + keyLength + KeyValue.ROW_OFFSET;
  int valueLength=in.getInt();
  byte flag=0;
  if (previousState.isFirst()) {
    out.write(flag);
    ByteBufferUtils.putCompressedInt(out,keyLength);
    ByteBufferUtils.putCompressedInt(out,valueLength);
    ByteBufferUtils.putCompressedInt(out,0);
    currentState.readKey(in,keyLength,valueLength);
    ByteBufferUtils.moveBufferToStream(out,in,keyLength + valueLength);
  }
 else {
    int commonPrefix=ByteBufferUtils.findCommonPrefix(in,in.position(),previousState.prevOffset + KeyValue.ROW_OFFSET,Math.min(keyLength,previousState.keyLength) - KeyValue.TIMESTAMP_TYPE_SIZE);
    currentState.readKey(in,keyLength,valueLength,commonPrefix,previousState);
    if (keyLength == previousState.keyLength) {
      flag|=FLAG_SAME_KEY_LENGTH;
    }
    if (valueLength == previousState.valueLength) {
      flag|=FLAG_SAME_VALUE_LENGTH;
    }
    if (currentState.type == previousState.type) {
      flag|=FLAG_SAME_TYPE;
    }
    int commonTimestampPrefix=findCommonTimestampPrefix(currentState,previousState);
    flag|=commonTimestampPrefix << SHIFT_TIMESTAMP_LENGTH;
    if (valueLength == previousState.valueLength) {
      int previousValueOffset=previousState.prevOffset + previousState.keyLength + KeyValue.ROW_OFFSET;
      if (ByteBufferUtils.arePartsEqual(in,previousValueOffset,previousState.valueLength,valueOffset,valueLength)) {
        flag|=FLAG_SAME_VALUE;
      }
    }
    out.write(flag);
    if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
      ByteBufferUtils.putCompressedInt(out,keyLength);
    }
    if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
      ByteBufferUtils.putCompressedInt(out,valueLength);
    }
    ByteBufferUtils.putCompressedInt(out,commonPrefix);
    ByteBufferUtils.skip(in,commonPrefix);
    if (commonPrefix < currentState.rowLength + KeyValue.ROW_LENGTH_SIZE) {
      ByteBufferUtils.moveBufferToStream(out,in,currentState.rowLength + KeyValue.ROW_LENGTH_SIZE - commonPrefix);
      ByteBufferUtils.skip(in,currentState.familyLength + KeyValue.FAMILY_LENGTH_SIZE);
      ByteBufferUtils.moveBufferToStream(out,in,currentState.qualifierLength);
    }
 else {
      int restKeyLength=keyLength - commonPrefix - KeyValue.TIMESTAMP_TYPE_SIZE;
      ByteBufferUtils.moveBufferToStream(out,in,restKeyLength);
    }
    ByteBufferUtils.skip(in,commonTimestampPrefix);
    ByteBufferUtils.moveBufferToStream(out,in,KeyValue.TIMESTAMP_SIZE - commonTimestampPrefix);
    if ((flag & FLAG_SAME_TYPE) == 0) {
      out.write(currentState.type);
    }
    if ((flag & FLAG_SAME_VALUE) == 0) {
      ByteBufferUtils.copyBufferToStream(out,in,valueOffset,valueLength);
    }
    ByteBufferUtils.skip(in,KeyValue.TYPE_SIZE + currentState.valueLength);
  }
}
