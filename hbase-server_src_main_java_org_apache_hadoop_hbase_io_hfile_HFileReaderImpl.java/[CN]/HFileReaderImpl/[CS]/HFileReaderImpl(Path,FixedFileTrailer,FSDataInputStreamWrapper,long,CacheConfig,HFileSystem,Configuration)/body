{
  this.trailer=trailer;
  this.compressAlgo=trailer.getCompressionCodec();
  this.cacheConf=cacheConf;
  this.fileSize=fileSize;
  this.path=path;
  this.name=path.getName();
  this.conf=conf;
  checkFileVersion();
  this.hfileContext=createHFileContext(fsdis,fileSize,hfs,path,trailer);
  this.fsBlockReader=new HFileBlock.FSReaderImpl(fsdis,fileSize,hfs,path,hfileContext);
  comparator=trailer.createComparator();
  dataBlockIndexReader=new HFileBlockIndex.CellBasedKeyBlockIndexReader(comparator,trailer.getNumDataIndexLevels(),this);
  metaBlockIndexReader=new HFileBlockIndex.ByteArrayKeyBlockIndexReader(1);
  HFileBlock.BlockIterator blockIter=fsBlockReader.blockRange(trailer.getLoadOnOpenDataOffset(),fileSize - trailer.getTrailerSize());
  dataBlockIndexReader.readMultiLevelIndexRoot(blockIter.nextBlockWithBlockType(BlockType.ROOT_INDEX),trailer.getDataIndexCount());
  metaBlockIndexReader.readRootIndex(blockIter.nextBlockWithBlockType(BlockType.ROOT_INDEX),trailer.getMetaIndexCount());
  fileInfo=new FileInfo();
  fileInfo.read(blockIter.nextBlockWithBlockType(BlockType.FILE_INFO).getByteStream());
  byte[] creationTimeBytes=fileInfo.get(FileInfo.CREATE_TIME_TS);
  this.hfileContext.setFileCreateTime(creationTimeBytes == null ? 0 : Bytes.toLong(creationTimeBytes));
  if (fileInfo.get(FileInfo.LASTKEY) != null) {
    lastKeyCell=new KeyValue.KeyOnlyKeyValue(fileInfo.get(FileInfo.LASTKEY));
  }
  avgKeyLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_KEY_LEN));
  avgValueLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_VALUE_LEN));
  byte[] keyValueFormatVersion=fileInfo.get(HFileWriterImpl.KEY_VALUE_VERSION);
  includesMemstoreTS=keyValueFormatVersion != null && Bytes.toInt(keyValueFormatVersion) == HFileWriterImpl.KEY_VALUE_VER_WITH_MEMSTORE;
  fsBlockReader.setIncludesMemstoreTS(includesMemstoreTS);
  if (includesMemstoreTS) {
    decodeMemstoreTS=Bytes.toLong(fileInfo.get(HFileWriterImpl.MAX_MEMSTORE_TS_KEY)) > 0;
  }
  dataBlockEncoder=HFileDataBlockEncoderImpl.createFromFileInfo(fileInfo);
  fsBlockReader.setDataBlockEncoder(dataBlockEncoder);
  HFileBlock b;
  while ((b=blockIter.nextBlock()) != null) {
    loadOnOpenBlocks.add(b);
  }
  if (cacheConf.shouldPrefetchOnOpen()) {
    PrefetchExecutor.request(path,new Runnable(){
      public void run(){
        long offset=0;
        long end=0;
        try {
          end=getTrailer().getLoadOnOpenDataOffset();
          if (LOG.isTraceEnabled()) {
            LOG.trace("Prefetch=" + path.toString() + ", offset="+ offset+ ", end="+ end);
          }
          HFileBlock prevBlock=null;
          while (offset < end) {
            if (Thread.interrupted()) {
              break;
            }
            long onDiskSize=prevBlock != null ? prevBlock.getNextBlockOnDiskSize() : -1;
            HFileBlock block=readBlock(offset,onDiskSize,true,false,false,false,null,null);
            returnBlock(block);
            prevBlock=block;
            offset+=block.getOnDiskSizeWithHeader();
          }
        }
 catch (        IOException e) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Prefetch=" + path.toString() + ", offset="+ offset+ ", end="+ end,e);
          }
        }
catch (        Exception e) {
          LOG.warn("Prefetch=" + path.toString() + ", offset="+ offset+ ", end="+ end,e);
        }
 finally {
          PrefetchExecutor.complete(path);
        }
      }
    }
);
  }
  byte[] tmp=fileInfo.get(FileInfo.MAX_TAGS_LEN);
  if (tmp != null) {
    hfileContext.setIncludesTags(true);
    tmp=fileInfo.get(FileInfo.TAGS_COMPRESSED);
    if (tmp != null && Bytes.toBoolean(tmp)) {
      hfileContext.setCompressTags(true);
    }
  }
}
