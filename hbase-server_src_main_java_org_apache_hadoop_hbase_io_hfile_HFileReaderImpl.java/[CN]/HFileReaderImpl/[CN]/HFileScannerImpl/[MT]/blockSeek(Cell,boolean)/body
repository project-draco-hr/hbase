{
  int klen, vlen, tlen=0;
  int lastKeyValueSize=-1;
  int offsetFromPos;
  do {
    offsetFromPos=0;
    long ll=blockBuffer.getLongAfterPosition(offsetFromPos);
    klen=(int)(ll >> Integer.SIZE);
    vlen=(int)(Bytes.MASK_FOR_LOWER_INT_IN_LONG ^ ll);
    if (checkKeyLen(klen) || checkLen(vlen)) {
      throw new IllegalStateException("Invalid klen " + klen + " or vlen "+ vlen+ ". Block offset: "+ curBlock.getOffset()+ ", block length: "+ blockBuffer.limit()+ ", position: "+ blockBuffer.position()+ " (without header).");
    }
    offsetFromPos+=Bytes.SIZEOF_LONG;
    blockBuffer.asSubByteBuffer(blockBuffer.position() + offsetFromPos,klen,pair);
    bufBackedKeyOnlyKv.setKey(pair.getFirst(),pair.getSecond(),klen);
    int comp=reader.getComparator().compareKeyIgnoresMvcc(key,bufBackedKeyOnlyKv);
    offsetFromPos+=klen + vlen;
    if (this.reader.getFileContext().isIncludesTags()) {
      tlen=((blockBuffer.getByteAfterPosition(offsetFromPos) & 0xff) << 8) ^ (blockBuffer.getByteAfterPosition(offsetFromPos + 1) & 0xff);
      if (checkLen(tlen)) {
        throw new IllegalStateException("Invalid tlen " + tlen + ". Block offset: "+ curBlock.getOffset()+ ", block length: "+ blockBuffer.limit()+ ", position: "+ blockBuffer.position()+ " (without header).");
      }
      offsetFromPos+=tlen + (Bytes.SIZEOF_SHORT);
    }
    if (this.reader.shouldIncludeMemstoreTS()) {
      readMvccVersion(offsetFromPos);
    }
    if (comp == 0) {
      if (seekBefore) {
        if (lastKeyValueSize < 0) {
          throw new IllegalStateException("blockSeek with seekBefore " + "at the first key of the block: key=" + CellUtil.getCellKeyAsString(key) + ", blockOffset="+ curBlock.getOffset()+ ", onDiskSize="+ curBlock.getOnDiskSizeWithHeader());
        }
        blockBuffer.moveBack(lastKeyValueSize);
        readKeyValueLen();
        return 1;
      }
      currKeyLen=klen;
      currValueLen=vlen;
      currTagsLen=tlen;
      return 0;
    }
 else     if (comp < 0) {
      if (lastKeyValueSize > 0) {
        blockBuffer.moveBack(lastKeyValueSize);
      }
      readKeyValueLen();
      if (lastKeyValueSize == -1 && blockBuffer.position() == 0) {
        return HConstants.INDEX_KEY_MAGIC;
      }
      return 1;
    }
    lastKeyValueSize=klen + vlen + currMemstoreTSLen+ KEY_VALUE_LEN_SIZE;
    if (reader.getFileContext().isIncludesTags()) {
      lastKeyValueSize+=tlen + Bytes.SIZEOF_SHORT;
    }
    blockBuffer.skip(lastKeyValueSize);
  }
 while (blockBuffer.hasRemaining());
  blockBuffer.moveBack(lastKeyValueSize);
  readKeyValueLen();
  return 1;
}
