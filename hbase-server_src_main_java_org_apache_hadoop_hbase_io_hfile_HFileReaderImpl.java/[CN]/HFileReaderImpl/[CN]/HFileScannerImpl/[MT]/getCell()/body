{
  if (!isSeeked())   return null;
  Cell ret;
  int cellBufSize=getCellBufSize();
  long seqId=0l;
  if (this.reader.shouldIncludeMemstoreTS()) {
    seqId=currMemstoreTS;
  }
  if (blockBuffer.hasArray()) {
    if (currTagsLen > 0) {
      if (this.curBlock.getMemoryType() == MemoryType.SHARED) {
        ret=new ShareableMemoryKeyValue(blockBuffer.array(),blockBuffer.arrayOffset() + blockBuffer.position(),getCellBufSize(),seqId);
      }
 else {
        ret=new SizeCachedKeyValue(blockBuffer.array(),blockBuffer.arrayOffset() + blockBuffer.position(),cellBufSize,seqId);
      }
    }
 else {
      if (this.curBlock.getMemoryType() == MemoryType.SHARED) {
        ret=new ShareableMemoryNoTagsKeyValue(blockBuffer.array(),blockBuffer.arrayOffset() + blockBuffer.position(),getCellBufSize(),seqId);
      }
 else {
        ret=new SizeCachedNoTagsKeyValue(blockBuffer.array(),blockBuffer.arrayOffset() + blockBuffer.position(),cellBufSize,seqId);
      }
    }
  }
 else {
    ByteBuffer buf=blockBuffer.asSubByteBuffer(cellBufSize);
    if (this.curBlock.getMemoryType() == MemoryType.SHARED) {
      ret=new ShareableMemoryOffheapKeyValue(buf,buf.position(),cellBufSize,currTagsLen > 0,seqId);
    }
 else {
      ret=new OffheapKeyValue(buf,buf.position(),cellBufSize,currTagsLen > 0,seqId);
    }
  }
  return ret;
}
