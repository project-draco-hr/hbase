{
  if (matchesToken(bytes) && CollectionUtils.notEmpty(children)) {
    TokenizerNode lastChild=CollectionUtils.getLast(children);
    if (lastChild.partiallyMatchesToken(bytes)) {
      lastChild.addSorted(bytes);
      return;
    }
  }
  int numIdenticalTokenBytes=numIdenticalBytes(bytes);
  int tailOffset=tokenStartOffset + numIdenticalTokenBytes;
  int tailLength=bytes.getLength() - tailOffset;
  if (numIdenticalTokenBytes == token.getLength()) {
    if (tailLength == 0) {
      incrementNumOccurrences(1);
    }
 else {
      int childNodeDepth=nodeDepth + 1;
      int childTokenStartOffset=tokenStartOffset + numIdenticalTokenBytes;
      TokenizerNode newChildNode=builder.addNode(this,childNodeDepth,childTokenStartOffset,bytes,tailOffset);
      addChild(newChildNode);
    }
  }
 else {
    split(numIdenticalTokenBytes,bytes);
  }
}
