{
  short lrowlength=Bytes.toShort(left,loffset);
  short rrowlength=Bytes.toShort(right,roffset);
  int compare=compareRows(left,loffset + Bytes.SIZEOF_SHORT,lrowlength,right,roffset + Bytes.SIZEOF_SHORT,rrowlength);
  if (compare != 0) {
    return compare;
  }
  int lcolumnoffset=Bytes.SIZEOF_SHORT + lrowlength + 1+ loffset;
  int rcolumnoffset=Bytes.SIZEOF_SHORT + rrowlength + 1+ roffset;
  int lcolumnlength=llength - TIMESTAMP_TYPE_SIZE - (lcolumnoffset - loffset);
  int rcolumnlength=rlength - TIMESTAMP_TYPE_SIZE - (rcolumnoffset - roffset);
  compare=Bytes.compareTo(left,lcolumnoffset,lcolumnlength,right,rcolumnoffset,rcolumnlength);
  if (compare != 0) {
    return compare;
  }
  if (!this.ignoreTimestamp) {
    long ltimestamp=Bytes.toLong(left,loffset + (llength - TIMESTAMP_TYPE_SIZE));
    long rtimestamp=Bytes.toLong(right,roffset + (rlength - TIMESTAMP_TYPE_SIZE));
    compare=compareTimestamps(ltimestamp,rtimestamp);
    if (compare != 0) {
      return compare;
    }
  }
  if (!this.ignoreType) {
    byte ltype=left[loffset + (llength - 1)];
    byte rtype=right[roffset + (rlength - 1)];
    return (0xff & rtype) - (0xff & ltype);
  }
  return 0;
}
