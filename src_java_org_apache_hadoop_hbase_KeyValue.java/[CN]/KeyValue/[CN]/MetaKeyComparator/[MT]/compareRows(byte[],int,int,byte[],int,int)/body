{
  int leftDelimiter=getDelimiter(left,loffset,llength,HRegionInfo.DELIMITER);
  int rightDelimiter=getDelimiter(right,roffset,rlength,HRegionInfo.DELIMITER);
  if (leftDelimiter < 0 && rightDelimiter >= 0) {
    return -1;
  }
 else   if (rightDelimiter < 0 && leftDelimiter >= 0) {
    return 1;
  }
 else   if (leftDelimiter < 0 && rightDelimiter < 0) {
    return 0;
  }
  int result=Bytes.compareTo(left,loffset,leftDelimiter - loffset,right,roffset,rightDelimiter - roffset);
  if (result != 0) {
    return result;
  }
  leftDelimiter++;
  rightDelimiter++;
  int leftFarDelimiter=getRequiredDelimiterInReverse(left,leftDelimiter,llength - (leftDelimiter - loffset),HRegionInfo.DELIMITER);
  int rightFarDelimiter=getRequiredDelimiterInReverse(right,rightDelimiter,rlength - (rightDelimiter - roffset),HRegionInfo.DELIMITER);
  result=super.compareRows(left,leftDelimiter,leftFarDelimiter - leftDelimiter,right,rightDelimiter,rightFarDelimiter - rightDelimiter);
  if (result != 0) {
    return result;
  }
  leftFarDelimiter++;
  rightFarDelimiter++;
  result=compareRowid(left,leftFarDelimiter,llength - (leftFarDelimiter - loffset),right,rightFarDelimiter,rlength - (rightFarDelimiter - roffset));
  return result;
}
