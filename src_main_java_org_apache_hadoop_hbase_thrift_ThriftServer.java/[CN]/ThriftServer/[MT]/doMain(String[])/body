{
  Log LOG=LogFactory.getLog("ThriftServer");
  Options options=new Options();
  options.addOption("b","bind",true,"Address to bind the Thrift server to. Not supported by the Nonblocking and HsHa server [default: 0.0.0.0]");
  options.addOption("p","port",true,"Port to bind to [default: 9090]");
  options.addOption("f","framed",false,"Use framed transport");
  options.addOption("c","compact",false,"Use the compact protocol");
  options.addOption("h","help",false,"Print help information");
  OptionGroup servers=new OptionGroup();
  servers.addOption(new Option("nonblocking",false,"Use the TNonblockingServer. This implies the framed transport."));
  servers.addOption(new Option("hsha",false,"Use the THsHaServer. This implies the framed transport."));
  servers.addOption(new Option("threadpool",false,"Use the TThreadPoolServer. This is the default."));
  options.addOptionGroup(servers);
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=parser.parse(options,args);
  List<String> commandLine=Arrays.asList(args);
  boolean stop=commandLine.contains("stop");
  boolean start=commandLine.contains("start");
  if (cmd.hasOption("help") || !start || stop) {
    printUsageAndExit(options,1);
  }
  int listenPort=0;
  try {
    listenPort=Integer.parseInt(cmd.getOptionValue("port",DEFAULT_LISTEN_PORT));
  }
 catch (  NumberFormatException e) {
    LOG.error("Could not parse the value provided for the port option",e);
    printUsageAndExit(options,-1);
  }
  TProtocolFactory protocolFactory;
  if (cmd.hasOption("compact")) {
    LOG.debug("Using compact protocol");
    protocolFactory=new TCompactProtocol.Factory();
  }
 else {
    LOG.debug("Using binary protocol");
    protocolFactory=new TBinaryProtocol.Factory();
  }
  HBaseHandler handler=new HBaseHandler();
  Hbase.Processor processor=new Hbase.Processor(handler);
  TServer server;
  if (cmd.hasOption("nonblocking") || cmd.hasOption("hsha")) {
    if (cmd.hasOption("bind")) {
      LOG.error("The Nonblocking and HsHa servers don't support IP address binding at the moment." + " See https://issues.apache.org/jira/browse/HBASE-2155 for details.");
      printUsageAndExit(options,-1);
    }
    TNonblockingServerTransport serverTransport=new TNonblockingServerSocket(listenPort);
    TFramedTransport.Factory transportFactory=new TFramedTransport.Factory();
    if (cmd.hasOption("nonblocking")) {
      TNonblockingServer.Args serverArgs=new TNonblockingServer.Args(serverTransport);
      serverArgs.processor(processor);
      serverArgs.transportFactory(transportFactory);
      serverArgs.protocolFactory(protocolFactory);
      LOG.info("starting HBase Nonblocking Thrift server on " + Integer.toString(listenPort));
      server=new TNonblockingServer(serverArgs);
    }
 else {
      THsHaServer.Args serverArgs=new THsHaServer.Args(serverTransport);
      serverArgs.processor(processor);
      serverArgs.transportFactory(transportFactory);
      serverArgs.protocolFactory(protocolFactory);
      LOG.info("starting HBase HsHA Thrift server on " + Integer.toString(listenPort));
      server=new THsHaServer(serverArgs);
    }
  }
 else {
    InetAddress listenAddress=null;
    if (cmd.hasOption("bind")) {
      try {
        listenAddress=InetAddress.getByName(cmd.getOptionValue("bind"));
      }
 catch (      UnknownHostException e) {
        LOG.error("Could not bind to provided ip address",e);
        printUsageAndExit(options,-1);
      }
    }
 else {
      listenAddress=InetAddress.getLocalHost();
    }
    TServerTransport serverTransport=new TServerSocket(new InetSocketAddress(listenAddress,listenPort));
    TTransportFactory transportFactory;
    if (cmd.hasOption("framed")) {
      transportFactory=new TFramedTransport.Factory();
      LOG.debug("Using framed transport");
    }
 else {
      transportFactory=new TTransportFactory();
    }
    TThreadPoolServer.Args serverArgs=new TThreadPoolServer.Args(serverTransport);
    serverArgs.processor(processor);
    serverArgs.protocolFactory(protocolFactory);
    serverArgs.transportFactory(transportFactory);
    LOG.info("starting HBase ThreadPool Thrift server on " + listenAddress + ":"+ Integer.toString(listenPort));
    server=new TThreadPoolServer(serverArgs);
  }
  server.serve();
}
