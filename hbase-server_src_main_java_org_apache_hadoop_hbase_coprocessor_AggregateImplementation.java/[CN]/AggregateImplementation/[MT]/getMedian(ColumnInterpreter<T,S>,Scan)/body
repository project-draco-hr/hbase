{
  S sumVal=null, sumWeights=null, tempVal=null, tempWeight=null;
  InternalScanner scanner=((RegionCoprocessorEnvironment)getEnvironment()).getRegion().getScanner(scan);
  byte[] colFamily=scan.getFamilies()[0];
  NavigableSet<byte[]> quals=scan.getFamilyMap().get(colFamily);
  byte[] valQualifier=quals.pollFirst();
  byte[] weightQualifier=quals.size() > 1 ? quals.pollLast() : null;
  List<KeyValue> results=new ArrayList<KeyValue>();
  boolean hasMoreRows=false;
  try {
    do {
      tempVal=null;
      tempWeight=null;
      hasMoreRows=scanner.next(results);
      for (      KeyValue kv : results) {
        tempVal=ci.add(tempVal,ci.castToReturnType(ci.getValue(colFamily,valQualifier,kv)));
        if (weightQualifier != null) {
          tempWeight=ci.add(tempWeight,ci.castToReturnType(ci.getValue(colFamily,weightQualifier,kv)));
        }
      }
      results.clear();
      sumVal=ci.add(sumVal,tempVal);
      sumWeights=ci.add(sumWeights,tempWeight);
    }
 while (hasMoreRows);
  }
  finally {
    scanner.close();
  }
  List<S> l=new ArrayList<S>();
  l.add(sumVal);
  l.add(sumWeights == null ? ci.castToReturnType(ci.getMinValue()) : sumWeights);
  return l;
}
