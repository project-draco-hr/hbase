{
  byte[] TABLE=Bytes.toBytes("testTimestampsFilter");
  byte[] FAMILY=Bytes.toBytes("event_log");
  byte[][] FAMILIES=new byte[][]{FAMILY};
  KeyValue kvs[];
  HTable ht=TEST_UTIL.createTable(TABLE,FAMILIES,Integer.MAX_VALUE);
  for (int rowIdx=0; rowIdx < 5; rowIdx++) {
    for (int colIdx=0; colIdx < 5; colIdx++) {
      putNVersions(ht,FAMILY,rowIdx,colIdx,201,300);
      putNVersions(ht,FAMILY,rowIdx,colIdx,1,100);
    }
  }
  verifyInsertedValues(ht,FAMILY);
  TEST_UTIL.flush();
  verifyInsertedValues(ht,FAMILY);
  for (int rowIdx=0; rowIdx < 5; rowIdx++) {
    for (int colIdx=0; colIdx < 5; colIdx++) {
      putNVersions(ht,FAMILY,rowIdx,colIdx,301,400);
      putNVersions(ht,FAMILY,rowIdx,colIdx,101,200);
    }
  }
  for (int rowIdx=0; rowIdx < 5; rowIdx++) {
    for (int colIdx=0; colIdx < 5; colIdx++) {
      kvs=getNVersions(ht,FAMILY,rowIdx,colIdx,Arrays.asList(505L,5L,105L,305L,205L));
      assertEquals(4,kvs.length);
      checkOneCell(kvs[0],FAMILY,rowIdx,colIdx,305);
      checkOneCell(kvs[1],FAMILY,rowIdx,colIdx,205);
      checkOneCell(kvs[2],FAMILY,rowIdx,colIdx,105);
      checkOneCell(kvs[3],FAMILY,rowIdx,colIdx,5);
    }
  }
  kvs=getNVersions(ht,FAMILY,2,2,new ArrayList<Long>());
  assertEquals(0,kvs == null ? 0 : kvs.length);
  Result[] results=scanNVersions(ht,FAMILY,0,4,Arrays.asList(6L,106L,306L));
  assertEquals("# of rows returned from scan",5,results.length);
  for (int rowIdx=0; rowIdx < 5; rowIdx++) {
    kvs=results[rowIdx].raw();
    assertEquals("Number of KeyValues in result for row:" + rowIdx,3 * 5,kvs.length);
    for (int colIdx=0; colIdx < 5; colIdx++) {
      int offset=colIdx * 3;
      checkOneCell(kvs[offset + 0],FAMILY,rowIdx,colIdx,306);
      checkOneCell(kvs[offset + 1],FAMILY,rowIdx,colIdx,106);
      checkOneCell(kvs[offset + 2],FAMILY,rowIdx,colIdx,6);
    }
  }
  ht.close();
}
