{
  if (!doCommandLine(args)) {
    return null;
  }
  Job job=new Job(conf,NAME + "_" + tableName);
  job.setJarByClass(CopyTable.class);
  Scan scan=new Scan();
  scan.setCacheBlocks(false);
  if (startTime != 0) {
    scan.setTimeRange(startTime,endTime == 0 ? HConstants.LATEST_TIMESTAMP : endTime);
  }
  if (allCells) {
    scan.setRaw(true);
  }
  if (versions >= 0) {
    scan.setMaxVersions(versions);
  }
  if (startRow != null) {
    scan.setStartRow(Bytes.toBytes(startRow));
  }
  if (stopRow != null) {
    scan.setStopRow(Bytes.toBytes(stopRow));
  }
  if (families != null) {
    String[] fams=families.split(",");
    Map<String,String> cfRenameMap=new HashMap<String,String>();
    for (    String fam : fams) {
      String sourceCf;
      if (fam.contains(":")) {
        String[] srcAndDest=fam.split(":",2);
        sourceCf=srcAndDest[0];
        String destCf=srcAndDest[1];
        cfRenameMap.put(sourceCf,destCf);
      }
 else {
        sourceCf=fam;
      }
      scan.addFamily(Bytes.toBytes(sourceCf));
    }
    Import.configureCfRenaming(job.getConfiguration(),cfRenameMap);
  }
  TableMapReduceUtil.initTableMapperJob(tableName,scan,Import.Importer.class,null,null,job);
  TableMapReduceUtil.initTableReducerJob(newTableName == null ? tableName : newTableName,null,job,null,peerAddress,null,null);
  job.setNumReduceTasks(0);
  return job;
}
