{
  ThriftHBaseServiceHandler handler=createHandler();
  byte[] rowName="testAppend".getBytes();
  ByteBuffer table=wrap(tableAname);
  byte[] v1=Bytes.toBytes(1L);
  byte[] v2=Bytes.toBytes(5L);
  List<TColumnValue> columnValues=new ArrayList<TColumnValue>();
  columnValues.add(new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(Bytes.toBytes(1L))));
  TPut put=new TPut(wrap(rowName),columnValues);
  put.setColumnValues(columnValues);
  put.setCellVisibility(new TCellVisibility().setExpression(PRIVATE));
  handler.put(table,put);
  List<TColumnValue> appendColumns=new ArrayList<TColumnValue>();
  appendColumns.add(new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(v2)));
  TAppend append=new TAppend(wrap(rowName),appendColumns);
  append.setCellVisibility(new TCellVisibility().setExpression(SECRET));
  handler.append(table,append);
  TGet get=new TGet(wrap(rowName));
  TAuthorization tauth=new TAuthorization();
  List<String> labels=new ArrayList<String>();
  labels.add(SECRET);
  tauth.setLabels(labels);
  get.setAuthorizations(tauth);
  TResult result=handler.get(table,get);
  assertArrayEquals(rowName,result.getRow());
  assertEquals(1,result.getColumnValuesSize());
  TColumnValue columnValue=result.getColumnValues().get(0);
  assertArrayEquals(Bytes.add(v1,v2),columnValue.getValue());
}
