{
  final int depth=prefix.length;
  if (depth >= maxDepth || lower >= upper - 1) {
    if (lower == upper && ref.content != null) {
      return ref.content;
    }
    TrieNode result=LeafTrieNodeFactory(depth,splits,lower,upper);
    ref.content=lower == upper ? result : null;
    return result;
  }
  InnerTrieNode result=new InnerTrieNode(depth);
  byte[] trial=Arrays.copyOf(prefix,prefix.length + 1);
  int currentBound=lower;
  for (int ch=0; ch < 0xFF; ++ch) {
    trial[depth]=(byte)(ch + 1);
    lower=currentBound;
    while (currentBound < upper) {
      if (splits[currentBound].compareTo(trial,0,trial.length) >= 0) {
        break;
      }
      currentBound+=1;
    }
    trial[depth]=(byte)ch;
    result.child[0xFF & ch]=buildTrieRec(splits,lower,currentBound,trial,maxDepth,ref);
  }
  trial[depth]=(byte)0xFF;
  result.child[0xFF]=buildTrieRec(splits,lower,currentBound,trial,maxDepth,ref);
  return result;
}
