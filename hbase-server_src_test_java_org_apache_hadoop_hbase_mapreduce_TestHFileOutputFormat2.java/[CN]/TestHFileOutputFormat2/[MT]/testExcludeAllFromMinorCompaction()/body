{
  Configuration conf=util.getConfiguration();
  conf.setInt("hbase.hstore.compaction.min",2);
  generateRandomStartKeys(5);
  util.startMiniCluster();
  try (Connection conn=ConnectionFactory.createConnection();Admin admin=conn.getAdmin();Table table=util.createTable(TABLE_NAME,FAMILIES);RegionLocator locator=conn.getRegionLocator(TABLE_NAME)){
    final FileSystem fs=util.getDFSCluster().getFileSystem();
    assertEquals("Should start with empty table",0,util.countRows(table));
    final Path storePath=new Path(FSUtils.getTableDir(FSUtils.getRootDir(conf),TABLE_NAME),new Path(admin.getTableRegions(TABLE_NAME).get(0).getEncodedName(),Bytes.toString(FAMILIES[0])));
    assertEquals(0,fs.listStatus(storePath).length);
    conf.setBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",true);
    for (int i=0; i < 2; i++) {
      Path testDir=util.getDataTestDirOnTestFS("testExcludeAllFromMinorCompaction_" + i);
      runIncrementalPELoad(conf,table.getTableDescriptor(),conn.getRegionLocator(TABLE_NAME),testDir);
      new LoadIncrementalHFiles(conf).doBulkLoad(testDir,admin,table,locator);
    }
    int expectedRows=2 * NMapInputFormat.getNumMapTasks(conf) * ROWSPERSPLIT;
    assertEquals("LoadIncrementalHFiles should put expected data in table",expectedRows,util.countRows(table));
    assertEquals(2,fs.listStatus(storePath).length);
    admin.compact(TABLE_NAME);
    try {
      quickPoll(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          return fs.listStatus(storePath).length == 1;
        }
      }
,5000);
      throw new IOException("SF# = " + fs.listStatus(storePath).length);
    }
 catch (    AssertionError ae) {
    }
    admin.majorCompact(TABLE_NAME);
    quickPoll(new Callable<Boolean>(){
      @Override public Boolean call() throws Exception {
        return fs.listStatus(storePath).length == 1;
      }
    }
,5000);
  }
  finally {
    util.shutdownMiniCluster();
  }
}
