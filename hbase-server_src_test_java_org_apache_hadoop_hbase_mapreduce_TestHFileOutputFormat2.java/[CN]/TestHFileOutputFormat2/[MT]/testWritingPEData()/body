{
  Configuration conf=util.getConfiguration();
  Path testDir=util.getDataTestDirOnTestFS("testWritingPEData");
  FileSystem fs=testDir.getFileSystem(conf);
  conf.setInt("mapreduce.task.io.sort.mb",20);
  conf.setLong(HConstants.HREGION_MAX_FILESIZE,64 * 1024);
  Job job=new Job(conf,"testWritingPEData");
  setupRandomGeneratorMapper(job);
  byte[] startKey=new byte[RandomKVGeneratingMapper.KEYLEN_DEFAULT];
  byte[] endKey=new byte[RandomKVGeneratingMapper.KEYLEN_DEFAULT];
  Arrays.fill(startKey,(byte)0);
  Arrays.fill(endKey,(byte)0xff);
  job.setPartitionerClass(SimpleTotalOrderPartitioner.class);
  SimpleTotalOrderPartitioner.setStartKey(job.getConfiguration(),startKey);
  SimpleTotalOrderPartitioner.setEndKey(job.getConfiguration(),endKey);
  job.setReducerClass(KeyValueSortReducer.class);
  job.setOutputFormatClass(HFileOutputFormat2.class);
  job.setNumReduceTasks(4);
  job.getConfiguration().setStrings("io.serializations",conf.get("io.serializations"),MutationSerialization.class.getName(),ResultSerialization.class.getName(),KeyValueSerialization.class.getName());
  FileOutputFormat.setOutputPath(job,testDir);
  assertTrue(job.waitForCompletion(false));
  FileStatus[] files=fs.listStatus(testDir);
  assertTrue(files.length > 0);
}
