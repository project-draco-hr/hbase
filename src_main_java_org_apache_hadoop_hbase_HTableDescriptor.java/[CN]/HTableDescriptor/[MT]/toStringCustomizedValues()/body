{
  StringBuilder s=new StringBuilder();
  s.append('{');
  s.append(HConstants.NAME);
  s.append(" => '");
  s.append(Bytes.toString(name));
  s.append("'");
  for (  Map.Entry<ImmutableBytesWritable,ImmutableBytesWritable> e : values.entrySet()) {
    String key=Bytes.toString(e.getKey().get());
    String value=Bytes.toString(e.getValue().get());
    if (key == null) {
      continue;
    }
    String upperCase=key.toUpperCase();
    if (upperCase.equals(IS_ROOT) || upperCase.equals(IS_META)) {
      if (value.toLowerCase().equals(Boolean.FALSE.toString())) {
        continue;
      }
    }
    s.append(", ");
    s.append(Bytes.toString(e.getKey().get()));
    s.append(" => '");
    s.append(Bytes.toString(e.getValue().get()));
    s.append("'");
  }
  s.append(", ");
  s.append(FAMILIES);
  s.append(" => [");
  int size=families.values().size();
  int i=0;
  for (  HColumnDescriptor hcd : families.values()) {
    s.append(hcd.toStringCustomizedValues());
    i++;
    if (i != size)     s.append(", ");
  }
  s.append("]}");
  return s.toString();
}
