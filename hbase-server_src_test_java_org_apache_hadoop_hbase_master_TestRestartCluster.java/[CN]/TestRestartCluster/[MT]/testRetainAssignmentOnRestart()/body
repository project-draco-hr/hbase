{
  UTIL.startMiniCluster(2);
  while (!UTIL.getMiniHBaseCluster().getMaster().isInitialized()) {
    Threads.sleep(1);
  }
  UTIL.getMiniHBaseCluster().getMaster().getMasterRpcServices().synchronousBalanceSwitch(false);
  LOG.info("\n\nCreating tables");
  for (  byte[] TABLE : TABLES) {
    UTIL.createTable(TABLE,FAMILY);
  }
  for (  byte[] TABLE : TABLES) {
    UTIL.waitTableEnabled(TABLE);
  }
  HMaster master=UTIL.getMiniHBaseCluster().getMaster();
  AssignmentManager am=master.getAssignmentManager();
  am.waitUntilNoRegionsInTransition(120000);
  CatalogTracker ct=new CatalogTracker(UTIL.getConfiguration());
  SnapshotOfRegionAssignmentFromMeta snapshot=new SnapshotOfRegionAssignmentFromMeta(ct);
  snapshot.initialize();
  Map<HRegionInfo,ServerName> regionToRegionServerMap=snapshot.getRegionToRegionServerMap();
  MiniHBaseCluster cluster=UTIL.getHBaseCluster();
  List<JVMClusterUtil.RegionServerThread> threads=cluster.getLiveRegionServerThreads();
  assertEquals(2,threads.size());
  int[] rsPorts=new int[3];
  for (int i=0; i < 2; i++) {
    rsPorts[i]=threads.get(i).getRegionServer().getServerName().getPort();
  }
  rsPorts[2]=cluster.getMaster().getServerName().getPort();
  for (  ServerName serverName : regionToRegionServerMap.values()) {
    boolean found=false;
    for (int k=0; k < 3 && !found; k++) {
      found=serverName.getPort() == rsPorts[k];
    }
    assertTrue(found);
  }
  LOG.info("\n\nShutting down HBase cluster");
  cluster.shutdown();
  cluster.waitUntilShutDown();
  LOG.info("\n\nSleeping a bit");
  Thread.sleep(2000);
  LOG.info("\n\nStarting cluster the second time with the same ports");
  try {
    cluster.getConf().setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,4);
    master=cluster.startMaster().getMaster();
    for (int i=0; i < 3; i++) {
      cluster.getConf().setInt(HConstants.REGIONSERVER_PORT,rsPorts[i]);
      cluster.startRegionServer();
    }
  }
  finally {
    cluster.getConf().setInt(HConstants.REGIONSERVER_PORT,0);
    cluster.getConf().setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,2);
  }
  List<ServerName> localServers=master.getServerManager().getOnlineServersList();
  assertEquals(4,localServers.size());
  for (int i=0; i < 3; i++) {
    boolean found=false;
    for (    ServerName serverName : localServers) {
      if (serverName.getPort() == rsPorts[i]) {
        found=true;
        break;
      }
    }
    assertTrue(found);
  }
  RegionStates regionStates=master.getAssignmentManager().getRegionStates();
  int expectedRegions=regionToRegionServerMap.size() + 1;
  while (!master.isInitialized() || regionStates.getRegionAssignments().size() != expectedRegions) {
    Threads.sleep(100);
  }
  ct=new CatalogTracker(UTIL.getConfiguration());
  snapshot=new SnapshotOfRegionAssignmentFromMeta(ct);
  snapshot.initialize();
  Map<HRegionInfo,ServerName> newRegionToRegionServerMap=snapshot.getRegionToRegionServerMap();
  assertEquals(regionToRegionServerMap.size(),newRegionToRegionServerMap.size());
  for (  Map.Entry<HRegionInfo,ServerName> entry : newRegionToRegionServerMap.entrySet()) {
    if (TableName.NAMESPACE_TABLE_NAME.equals(entry.getKey().getTable()))     continue;
    ServerName oldServer=regionToRegionServerMap.get(entry.getKey());
    ServerName currentServer=entry.getValue();
    assertEquals(oldServer.getHostAndPort(),currentServer.getHostAndPort());
    assertNotEquals(oldServer.getStartcode(),currentServer.getStartcode());
  }
}
