{
  super.init(context);
  this.conf=HBaseConfiguration.create(ctx.getConfiguration());
  decorateConf();
  this.maxRetriesMultiplier=this.conf.getInt("replication.source.maxretriesmultiplier",300);
  this.socketTimeoutMultiplier=this.conf.getInt("replication.source.socketTimeoutMultiplier",maxRetriesMultiplier);
  this.conn=(ClusterConnection)ConnectionFactory.createConnection(this.conf);
  this.sleepForRetries=this.conf.getLong("replication.source.sleepforretries",1000);
  this.metrics=context.getMetrics();
  this.replicationSinkMgr=new ReplicationSinkManager(conn,ctx.getPeerId(),this,this.conf);
  this.maxThreads=this.conf.getInt(HConstants.REPLICATION_SOURCE_MAXTHREADS_KEY,HConstants.REPLICATION_SOURCE_MAXTHREADS_DEFAULT);
  this.exec=new ThreadPoolExecutor(maxThreads,maxThreads,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
  this.exec.allowCoreThreadTimeOut(true);
  this.replicationBulkLoadDataEnabled=conf.getBoolean(HConstants.REPLICATION_BULKLOAD_ENABLE_KEY,HConstants.REPLICATION_BULKLOAD_ENABLE_DEFAULT);
  if (this.replicationBulkLoadDataEnabled) {
    replicationClusterId=this.conf.get(HConstants.REPLICATION_CLUSTER_ID);
  }
  Path rootDir=FSUtils.getRootDir(conf);
  Path baseNSDir=new Path(HConstants.BASE_NAMESPACE_DIR);
  baseNamespaceDir=new Path(rootDir,baseNSDir);
  hfileArchiveDir=new Path(rootDir,new Path(HConstants.HFILE_ARCHIVE_DIRECTORY,baseNSDir));
}
