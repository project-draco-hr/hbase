{
  if (entries.size() == 0) {
    return;
  }
  int batchSize=entries.size();
  Map<HRegionInfo,List<Entry>> entriesByRegion=new HashMap<HRegionInfo,List<Entry>>();
  HRegionLocation loc=null;
  Entry entry=null;
  List<Entry> regionEntries=null;
  for (int i=0; i < batchSize; i++) {
    loc=entries.get(i).getFirst();
    entry=entries.get(i).getSecond();
    if (entriesByRegion.containsKey(loc.getRegionInfo())) {
      regionEntries=entriesByRegion.get(loc.getRegionInfo());
    }
 else {
      regionEntries=new ArrayList<Entry>();
      entriesByRegion.put(loc.getRegionInfo(),regionEntries);
    }
    regionEntries.add(entry);
  }
  long startTime=EnvironmentEdgeManager.currentTime();
  for (  Map.Entry<HRegionInfo,List<Entry>> _entry : entriesByRegion.entrySet()) {
    HRegionInfo curRegion=_entry.getKey();
    List<Entry> allActions=_entry.getValue();
    int totalActions=allActions.size();
    int replayedActions=0;
    int curBatchSize=0;
    for (; replayedActions < totalActions; ) {
      curBatchSize=(totalActions > (MAX_BATCH_SIZE + replayedActions)) ? MAX_BATCH_SIZE : (totalActions - replayedActions);
      replayEdits(loc,curRegion,allActions.subList(replayedActions,replayedActions + curBatchSize));
      replayedActions+=curBatchSize;
    }
  }
  long endTime=EnvironmentEdgeManager.currentTime() - startTime;
  LOG.debug("number of rows:" + entries.size() + " are sent by batch! spent "+ endTime+ "(ms)!");
  metrics.updateReplayTime(endTime);
  metrics.updateReplayBatchSize(batchSize);
  this.totalReplayedEdits.addAndGet(batchSize);
}
