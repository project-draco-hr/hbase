{
  for (int i=0; i < regions.length; i++) {
    for (int j=0; j < rows[i].length; j++) {
      byte[] bytes=regions[i].get(rows[i][j],COLUMN_NAME).getValue();
      assertNotNull(bytes);
      Text value=new Text(bytes);
      assertTrue(value.equals(rows[i][j]));
    }
    regions[i].close();
    regions[i].getLog().closeAndDelete();
  }
  HLog log=new HLog(this.fs,new Path("/tmp",HConstants.HREGION_LOGDIR_NAME + "_" + System.currentTimeMillis()),this.conf,null);
  try {
    LOG.info("merging regions 0 and 1");
    Merge merger=new Merge(this.conf);
    ToolRunner.run(merger,new String[]{this.desc.getName().toString(),this.sourceRegions[0].getRegionName().toString(),this.sourceRegions[1].getRegionName().toString()});
    HRegionInfo mergedInfo=merger.getMergedHRegionInfo();
    HRegion merged=HRegion.openHRegion(mergedInfo,this.rootdir,log,this.conf);
    for (int i=0; i < 2; i++) {
      for (int j=0; j < rows[i].length; j++) {
        byte[] bytes=merged.get(rows[i][j],COLUMN_NAME).getValue();
        assertNotNull(rows[i][j].toString(),bytes);
        Text value=new Text(bytes);
        assertTrue(value.equals(rows[i][j]));
      }
    }
    merged.close();
    LOG.info("verified merge of regions 0 and 1");
    LOG.info("merging regions 0+1 and 2");
    merger=new Merge(this.conf);
    ToolRunner.run(merger,new String[]{this.desc.getName().toString(),mergedInfo.getRegionName().toString(),this.sourceRegions[2].getRegionName().toString()});
    mergedInfo=merger.getMergedHRegionInfo();
    merged=HRegion.openHRegion(mergedInfo,this.rootdir,log,this.conf);
    for (int i=0; i < 3; i++) {
      for (int j=0; j < rows[i].length; j++) {
        Cell cell=merged.get(rows[i][j],COLUMN_NAME);
        assertNotNull(cell);
        byte[] bytes=cell.getValue();
        assertNotNull(bytes);
        Text value=new Text(bytes);
        assertTrue(value.equals(rows[i][j]));
      }
    }
    merged.close();
    LOG.info("verified merge of regions 0+1 and 2");
    LOG.info("merging regions 0+1+2 and 3");
    merger=new Merge(this.conf);
    ToolRunner.run(merger,new String[]{this.desc.getName().toString(),mergedInfo.getRegionName().toString(),this.sourceRegions[3].getRegionName().toString()});
    mergedInfo=merger.getMergedHRegionInfo();
    merged=HRegion.openHRegion(mergedInfo,this.rootdir,log,this.conf);
    for (int i=0; i < 4; i++) {
      for (int j=0; j < rows[i].length; j++) {
        byte[] bytes=merged.get(rows[i][j],COLUMN_NAME).getValue();
        assertNotNull(bytes);
        Text value=new Text(bytes);
        assertTrue(value.equals(rows[i][j]));
      }
    }
    merged.close();
    LOG.info("verified merge of regions 0+1+2 and 3");
    LOG.info("merging regions 0+1+2+3 and 4");
    merger=new Merge(this.conf);
    ToolRunner.run(merger,new String[]{this.desc.getName().toString(),mergedInfo.getRegionName().toString(),this.sourceRegions[4].getRegionName().toString()});
    mergedInfo=merger.getMergedHRegionInfo();
    merged=HRegion.openHRegion(mergedInfo,this.rootdir,log,this.conf);
    for (int i=0; i < rows.length; i++) {
      for (int j=0; j < rows[i].length; j++) {
        byte[] bytes=merged.get(rows[i][j],COLUMN_NAME).getValue();
        assertNotNull(bytes);
        Text value=new Text(bytes);
        assertTrue(value.equals(rows[i][j]));
      }
    }
    merged.close();
    LOG.info("verified merge of regions 0+1+2+3 and 4");
  }
  finally {
    log.closeAndDelete();
  }
}
