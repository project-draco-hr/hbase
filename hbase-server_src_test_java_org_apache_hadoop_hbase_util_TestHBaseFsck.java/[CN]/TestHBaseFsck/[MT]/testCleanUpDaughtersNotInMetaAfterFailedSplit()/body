{
  TableName table=TableName.valueOf("testCleanUpDaughtersNotInMetaAfterFailedSplit");
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  try {
    HTableDescriptor desc=new HTableDescriptor(table);
    desc.addFamily(new HColumnDescriptor(Bytes.toBytes("f")));
    admin.createTable(desc);
    tbl=new HTable(cluster.getConfiguration(),desc.getTableName());
    for (int i=0; i < 5; i++) {
      Put p1=new Put(("r" + i).getBytes());
      p1.add(Bytes.toBytes("f"),"q1".getBytes(),"v".getBytes());
      tbl.put(p1);
    }
    admin.flush(desc.getTableName());
    List<HRegion> regions=cluster.getRegions(desc.getTableName());
    int serverWith=cluster.getServerWith(regions.get(0).getRegionName());
    HRegionServer regionServer=cluster.getRegionServer(serverWith);
    cluster.getServerWith(regions.get(0).getRegionName());
    SplitTransaction st=new SplitTransaction(regions.get(0),Bytes.toBytes("r3"));
    st.prepare();
    st.stepsBeforePONR(regionServer,regionServer,false);
    AssignmentManager am=cluster.getMaster().getAssignmentManager();
    Map<String,RegionState> regionsInTransition=am.getRegionStates().getRegionsInTransition();
    for (    RegionState state : regionsInTransition.values()) {
      am.regionOffline(state.getRegion());
    }
    Map<HRegionInfo,ServerName> regionsMap=new HashMap<HRegionInfo,ServerName>();
    regionsMap.put(regions.get(0).getRegionInfo(),regionServer.getServerName());
    am.assign(regionsMap);
    am.waitForAssignment(regions.get(0).getRegionInfo());
    HBaseFsck hbck=doFsck(conf,false);
    assertErrors(hbck,new ERROR_CODE[]{ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED});
    assertEquals(0,hbck.getOverlapGroups(table).size());
    assertErrors(doFsck(conf,false,true,false,false,false,false,false,false,false,false,null),new ERROR_CODE[]{ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED});
    assertNoErrors(doFsck(conf,false));
    assertEquals(5,countRows());
  }
  finally {
    if (tbl != null) {
      tbl.close();
      tbl=null;
    }
    cleanupTable(table);
  }
}
