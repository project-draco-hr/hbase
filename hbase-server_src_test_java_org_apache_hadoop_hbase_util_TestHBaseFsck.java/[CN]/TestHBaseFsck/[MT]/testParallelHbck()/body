{
  final ExecutorService service;
  final Future<HBaseFsck> hbck1, hbck2;
class RunHbck implements Callable<HBaseFsck> {
    boolean fail=true;
    @Override public HBaseFsck call(){
      Configuration c=new Configuration(conf);
      c.setInt("hbase.hbck.lockfile.attempts",1);
      c.setInt("hbase.hbck.lockfile.maxwaittime",3);
      try {
        return doFsck(c,false);
      }
 catch (      Exception e) {
        if (e.getMessage().contains("Duplicate hbck")) {
          fail=false;
        }
      }
      if (fail)       fail();
      return null;
    }
  }
  service=Executors.newFixedThreadPool(2);
  hbck1=service.submit(new RunHbck());
  hbck2=service.submit(new RunHbck());
  service.shutdown();
  service.awaitTermination(15,TimeUnit.SECONDS);
  HBaseFsck h1=hbck1.get();
  HBaseFsck h2=hbck2.get();
  assert(h1 == null || h2 == null);
  if (h1 != null) {
    assert(h1.getRetCode() >= 0);
  }
  if (h2 != null) {
    assert(h2.getRetCode() >= 0);
  }
}
