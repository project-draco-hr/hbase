{
  TableName table=TableName.valueOf("testFixHdfsHolesNotWorkingWithNoHdfsChecking");
  try {
    setupTable(table);
    assertEquals(ROWKEYS.length,countRows());
    admin.disableTable(table);
    deleteRegion(conf,tbl.getTableDescriptor(),Bytes.toBytes("A"),Bytes.toBytes("B"),true,true,false,true,HRegionInfo.DEFAULT_REPLICA_ID);
    admin.enableTable(table);
    HRegionInfo hriOverlap=createRegion(tbl.getTableDescriptor(),Bytes.toBytes("A2"),Bytes.toBytes("B"));
    TEST_UTIL.getHBaseCluster().getMaster().assignRegion(hriOverlap);
    TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager().waitForAssignment(hriOverlap);
    ServerName server=regionStates.getRegionServerOfRegion(hriOverlap);
    TEST_UTIL.assertRegionOnServer(hriOverlap,server,REGION_ONLINE_TIMEOUT);
    HBaseFsck hbck=doFsck(conf,false);
    assertErrors(hbck,new ERROR_CODE[]{ERROR_CODE.ORPHAN_HDFS_REGION,ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.HOLE_IN_REGION_CHAIN});
    HBaseFsck fsck=new HBaseFsck(conf,hbfsckExecutorService);
    fsck.connect();
    fsck.setDisplayFullReport();
    fsck.setTimeLag(0);
    fsck.setCheckHdfs(false);
    fsck.onlineHbck();
    assertErrors(fsck,new ERROR_CODE[]{ERROR_CODE.HOLE_IN_REGION_CHAIN});
    fsck.close();
    fsck=new HBaseFsck(conf,hbfsckExecutorService);
    fsck.connect();
    fsck.setDisplayFullReport();
    fsck.setTimeLag(0);
    fsck.setCheckHdfs(false);
    fsck.setFixHdfsHoles(true);
    fsck.setFixHdfsOverlaps(true);
    fsck.setFixHdfsOrphans(true);
    fsck.onlineHbck();
    assertFalse(fsck.shouldRerun());
    assertErrors(fsck,new ERROR_CODE[]{ERROR_CODE.HOLE_IN_REGION_CHAIN});
    fsck.close();
  }
  finally {
    if (admin.isTableDisabled(table)) {
      admin.enableTable(table);
    }
    cleanupTable(table);
  }
}
