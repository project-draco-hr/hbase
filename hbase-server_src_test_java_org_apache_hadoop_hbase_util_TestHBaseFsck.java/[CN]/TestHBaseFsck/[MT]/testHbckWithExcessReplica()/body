{
  TableName table=TableName.valueOf("testHbckWithExcessReplica");
  try {
    setupTableWithRegionReplica(table,2);
    TEST_UTIL.getHBaseAdmin().flush(table.getName());
    assertNoErrors(doFsck(conf,false));
    assertEquals(ROWKEYS.length,countRows());
    HTable meta=new HTable(conf,TableName.META_TABLE_NAME);
    List<HRegionInfo> regions=TEST_UTIL.getHBaseAdmin().getTableRegions(table);
    byte[] startKey=Bytes.toBytes("B");
    byte[] endKey=Bytes.toBytes("C");
    byte[] metaKey=null;
    HRegionInfo newHri=null;
    for (    HRegionInfo h : regions) {
      if (Bytes.compareTo(h.getStartKey(),startKey) == 0 && Bytes.compareTo(h.getEndKey(),endKey) == 0 && h.getReplicaId() == HRegionInfo.DEFAULT_REPLICA_ID) {
        metaKey=h.getRegionName();
        newHri=RegionReplicaUtil.getRegionInfoForReplica(h,2);
        break;
      }
    }
    Put put=new Put(metaKey);
    ServerName sn=TEST_UTIL.getHBaseAdmin().getClusterStatus().getServers().toArray(new ServerName[0])[0];
    MetaTableAccessor.addLocation(put,sn,sn.getStartcode(),2);
    meta.put(put);
    meta.flushCommits();
    HBaseFsckRepair.fixUnassigned(TEST_UTIL.getHBaseAdmin(),newHri);
    HBaseFsckRepair.waitUntilAssigned(TEST_UTIL.getHBaseAdmin(),newHri);
    Delete delete=new Delete(metaKey);
    delete.deleteColumns(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(2));
    delete.deleteColumns(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(2));
    delete.deleteColumns(HConstants.CATALOG_FAMILY,MetaTableAccessor.getSeqNumColumn(2));
    meta.delete(delete);
    meta.flushCommits();
    meta.close();
    HBaseFsck hbck=doFsck(conf,false);
    assertErrors(hbck,new ERROR_CODE[]{ERROR_CODE.NOT_IN_META});
    hbck=doFsck(conf,true);
    hbck=doFsck(conf,false);
    assertErrors(hbck,new ERROR_CODE[]{});
  }
  finally {
    deleteTable(table);
  }
}
