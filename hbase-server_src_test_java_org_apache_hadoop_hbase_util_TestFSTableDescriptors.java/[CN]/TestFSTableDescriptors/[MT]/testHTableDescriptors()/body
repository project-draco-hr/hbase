{
  final String name="testHTableDescriptors";
  FileSystem fs=FileSystem.get(UTIL.getConfiguration());
  Path rootdir=new Path(UTIL.getDataTestDir(),name);
  FSTableDescriptors htds=new FSTableDescriptors(UTIL.getConfiguration(),fs,rootdir){
    @Override public HTableDescriptor get(    TableName tablename) throws TableExistsException, FileNotFoundException, IOException {
      LOG.info(tablename + ", cachehits=" + this.cachehits);
      return super.get(tablename);
    }
  }
;
  final int count=10;
  for (int i=0; i < count; i++) {
    HTableDescriptor htd=new HTableDescriptor(new HTableDescriptor(TableName.valueOf(name + i)));
    htds.createTableDescriptor(htd);
  }
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(TableName.valueOf(name + i)) != null);
  }
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(TableName.valueOf(name + i)) != null);
  }
  for (int i=0; i < count; i++) {
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name + i));
    htd.addFamily(new HColumnDescriptor("" + i));
    htds.updateTableDescriptor(htd);
  }
  Thread.sleep(100);
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(TableName.valueOf(name + i)) != null);
  }
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(TableName.valueOf(name + i)) != null);
  }
  assertEquals(count * 4,htds.invocations);
  assertTrue("expected=" + (count * 2) + ", actual="+ htds.cachehits,htds.cachehits >= (count * 2));
}
