{
  final String name="testHTableDescriptors";
  FileSystem fs=FileSystem.get(UTIL.getConfiguration());
  Path rootdir=new Path(UTIL.getDataTestDir(),name);
  FSTableDescriptors htds=new FSTableDescriptors(fs,rootdir){
    @Override public HTableDescriptor get(    byte[] tablename) throws TableExistsException, FileNotFoundException, IOException {
      LOG.info(Bytes.toString(tablename) + ", cachehits=" + this.cachehits);
      return super.get(tablename);
    }
  }
;
  final int count=10;
  for (int i=0; i < count; i++) {
    HTableDescriptor htd=new HTableDescriptor(name + i);
    htds.createTableDescriptor(htd);
  }
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(Bytes.toBytes(name + i)) != null);
  }
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(Bytes.toBytes(name + i)) != null);
  }
  for (int i=0; i < count; i++) {
    HTableDescriptor htd=new HTableDescriptor(name + i);
    htd.addFamily(new HColumnDescriptor("" + i));
    htds.updateTableDescriptor(htd);
  }
  Thread.sleep(100);
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(Bytes.toBytes(name + i)) != null);
  }
  for (int i=0; i < count; i++) {
    assertTrue(htds.get(Bytes.toBytes(name + i)) != null);
  }
  assertEquals(count * 4,htds.invocations);
  assertTrue("expected=" + (count * 2) + ", actual="+ htds.cachehits,htds.cachehits >= (count * 2));
  assertTrue(htds.get(HConstants.ROOT_TABLE_NAME) != null);
  assertEquals(htds.invocations,count * 4 + 1);
  assertTrue("expected=" + ((count * 2) + 1) + ", actual="+ htds.cachehits,htds.cachehits >= ((count * 2) + 1));
}
