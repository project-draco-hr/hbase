{
  long runtime=30 * 1000;
  final int refreshPeriod=100;
  HTU.getConfiguration().setInt("hbase.hstore.compactionThreshold",3);
  HTU.getConfiguration().setInt(StorefileRefresherChore.REGIONSERVER_STOREFILE_REFRESH_PERIOD,refreshPeriod);
  restartRegionServer();
  final int startKey=0, endKey=1000;
  try {
    openRegion(HTU,getRS(),hriSecondary);
    HTU.loadNumericRows(table,f,startKey,endKey);
    TestRegionServerNoMaster.flushRegion(HTU,hriPrimary);
    Threads.sleep(2 * refreshPeriod);
    final AtomicBoolean running=new AtomicBoolean(true);
    @SuppressWarnings("unchecked") final AtomicReference<Exception>[] exceptions=new AtomicReference[3];
    for (int i=0; i < exceptions.length; i++) {
      exceptions[i]=new AtomicReference<Exception>();
    }
    Runnable writer=new Runnable(){
      int key=startKey;
      @Override public void run(){
        try {
          while (running.get()) {
            byte[] data=Bytes.toBytes(String.valueOf(key));
            Put put=new Put(data);
            put.add(f,null,data);
            table.put(put);
            key++;
            if (key == endKey)             key=startKey;
          }
        }
 catch (        Exception ex) {
          LOG.warn(ex);
          exceptions[0].compareAndSet(null,ex);
        }
      }
    }
;
    Runnable flusherCompactor=new Runnable(){
      Random random=new Random();
      @Override public void run(){
        try {
          while (running.get()) {
            if (random.nextBoolean()) {
              TestRegionServerNoMaster.flushRegion(HTU,hriPrimary);
            }
 else {
              HTU.compact(table.getName(),random.nextBoolean());
            }
          }
        }
 catch (        Exception ex) {
          LOG.warn(ex);
          exceptions[1].compareAndSet(null,ex);
        }
      }
    }
;
    Runnable reader=new Runnable(){
      Random random=new Random();
      @Override public void run(){
        try {
          while (running.get()) {
            if (random.nextInt(10) == 0) {
              try {
                closeRegion(HTU,getRS(),hriSecondary);
              }
 catch (              Exception ex) {
                LOG.warn("Failed closing the region " + hriSecondary + " "+ StringUtils.stringifyException(ex));
                exceptions[2].compareAndSet(null,ex);
              }
              try {
                openRegion(HTU,getRS(),hriSecondary);
              }
 catch (              Exception ex) {
                LOG.warn("Failed opening the region " + hriSecondary + " "+ StringUtils.stringifyException(ex));
                exceptions[2].compareAndSet(null,ex);
              }
            }
            int key=random.nextInt(endKey - startKey) + startKey;
            assertGetRpc(hriSecondary,key,true);
          }
        }
 catch (        Exception ex) {
          LOG.warn("Failed getting the value in the region " + hriSecondary + " "+ StringUtils.stringifyException(ex));
          exceptions[2].compareAndSet(null,ex);
        }
      }
    }
;
    LOG.info("Starting writer and reader");
    ExecutorService executor=Executors.newFixedThreadPool(3);
    executor.submit(writer);
    executor.submit(flusherCompactor);
    executor.submit(reader);
    Threads.sleep(runtime);
    running.set(false);
    executor.shutdown();
    executor.awaitTermination(30,TimeUnit.SECONDS);
    for (    AtomicReference<Exception> exRef : exceptions) {
      Assert.assertNull(exRef.get());
    }
  }
  finally {
    HTU.deleteNumericRows(table,HConstants.CATALOG_FAMILY,startKey,endKey);
    closeRegion(HTU,getRS(),hriSecondary);
  }
}
