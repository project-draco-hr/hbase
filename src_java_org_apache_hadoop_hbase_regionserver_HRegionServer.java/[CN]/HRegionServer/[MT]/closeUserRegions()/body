{
  ArrayList<HRegion> regionsToClose=new ArrayList<HRegion>();
  this.lock.writeLock().lock();
  try {
synchronized (onlineRegions) {
      for (Iterator<Map.Entry<Integer,HRegion>> i=onlineRegions.entrySet().iterator(); i.hasNext(); ) {
        Map.Entry<Integer,HRegion> e=i.next();
        HRegion r=e.getValue();
        if (!r.getRegionInfo().isMetaRegion()) {
          regionsToClose.add(r);
          i.remove();
        }
      }
    }
  }
  finally {
    this.lock.writeLock().unlock();
  }
  Set<Thread> threads=new HashSet<Thread>();
  try {
    for (    final HRegion r : regionsToClose) {
      RegionCloserThread t=new RegionCloserThread(r);
      t.start();
      threads.add(t);
    }
  }
  finally {
    for (    Thread t : threads) {
      while (t.isAlive()) {
        try {
          t.join();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
  }
  this.quiesced.set(true);
  if (onlineRegions.size() == 0) {
    outboundMsgs.add(HMsg.REPORT_EXITING);
  }
 else {
    outboundMsgs.add(HMsg.REPORT_QUIESCED);
  }
}
