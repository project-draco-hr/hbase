{
  HServerAddress masterAddress=null;
  while (masterAddress == null) {
    if (stopRequested.get()) {
      return null;
    }
    try {
      masterAddress=zooKeeperWrapper.readMasterAddressOrThrow();
    }
 catch (    IOException e) {
      LOG.warn("Unable to read master address from ZooKeeper. Retrying." + " Error was:",e);
      sleeper.sleep();
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Telling master at " + masterAddress + " that we are up");
  }
  HMasterRegionInterface master=null;
  while (!stopRequested.get() && master == null) {
    try {
      master=(HMasterRegionInterface)HBaseRPC.waitForProxy(HMasterRegionInterface.class,HBaseRPCProtocolVersion.versionID,masterAddress.getInetSocketAddress(),this.conf,-1);
    }
 catch (    IOException e) {
      LOG.warn("Unable to connect to master. Retrying. Error was:",e);
      sleeper.sleep();
    }
  }
  this.hbaseMaster=master;
  MapWritable result=null;
  long lastMsg=0;
  while (!stopRequested.get()) {
    try {
      this.requestCount.set(0);
      MemoryUsage memory=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
      HServerLoad hsl=new HServerLoad(0,(int)memory.getUsed() / 1024 / 1024,(int)memory.getMax() / 1024 / 1024);
      this.serverInfo.setLoad(hsl);
      if (LOG.isDebugEnabled())       LOG.debug("sending initial server load: " + hsl);
      lastMsg=System.currentTimeMillis();
      result=this.hbaseMaster.regionServerStartup(serverInfo);
      break;
    }
 catch (    Leases.LeaseStillHeldException e) {
      LOG.info("Lease " + e.getName() + " already held on master. Check "+ "DNS configuration so that all region servers are"+ "reporting their true IPs and not 127.0.0.1. Otherwise, this"+ "problem should resolve itself after the lease period of "+ this.conf.get("hbase.master.lease.period")+ " seconds expires over on the master");
    }
catch (    IOException e) {
      LOG.warn("error telling master we are up",e);
    }
    sleeper.sleep(lastMsg);
  }
  return result;
}
