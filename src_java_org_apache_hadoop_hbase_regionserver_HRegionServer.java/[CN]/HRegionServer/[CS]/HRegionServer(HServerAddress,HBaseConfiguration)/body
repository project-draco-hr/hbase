{
  this.abortRequested=false;
  this.fsOk=true;
  this.conf=conf;
  this.connection=ServerConnectionManager.getConnection(conf);
  this.isOnline=false;
  this.numRetries=conf.getInt("hbase.client.retries.number",2);
  this.threadWakeFrequency=conf.getInt(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.msgInterval=conf.getInt("hbase.regionserver.msginterval",3 * 1000);
  this.serverLeaseTimeout=conf.getInt("hbase.master.lease.period",120 * 1000);
  this.cacheFlusher=new MemcacheFlusher(conf,this);
  this.compactSplitThread=new CompactSplitThread(this);
  this.logRoller=new LogRoller(this);
  this.logFlusher=new LogFlusher(this.threadWakeFrequency,this.stopRequested);
  int multiplier=this.conf.getInt(THREAD_WAKE_FREQUENCY + ".multiplier",1000);
  this.majorCompactionChecker=new MajorCompactionChecker(this,this.threadWakeFrequency * multiplier,this.stopRequested);
  this.worker=new Worker();
  this.workerThread=new Thread(worker);
  this.server=HBaseRPC.getServer(this,address.getBindAddress(),address.getPort(),conf.getInt("hbase.regionserver.handler.count",10),false,conf);
  this.serverInfo=new HServerInfo(new HServerAddress(new InetSocketAddress(DEFAULT_HOST,this.server.getListenerAddress().getPort())),System.currentTimeMillis(),this.conf.getInt("hbase.regionserver.info.port",60030));
  if (this.serverInfo.getServerAddress() == null) {
    throw new NullPointerException("Server address cannot be null; " + "hbase-958 debugging");
  }
  this.zooKeeperWrapper=new ZooKeeperWrapper(conf);
  boolean startCodeOk=false;
  while (!startCodeOk) {
    serverInfo.setStartCode(System.currentTimeMillis());
    startCodeOk=zooKeeperWrapper.writeRSLocation(serverInfo);
    if (!startCodeOk) {
      LOG.debug("Start code already taken, trying another one");
    }
  }
  this.numRegionsToReport=conf.getInt("hbase.regionserver.numregionstoreport",10);
  this.leases=new Leases(conf.getInt("hbase.regionserver.lease.period",60 * 1000),this.threadWakeFrequency);
  int nbBlocks=conf.getInt("hbase.regionserver.nbreservationblocks",4);
  for (int i=0; i < nbBlocks; i++) {
    reservedSpace.add(new byte[DEFAULT_SIZE_RESERVATION_BLOCK]);
  }
}
