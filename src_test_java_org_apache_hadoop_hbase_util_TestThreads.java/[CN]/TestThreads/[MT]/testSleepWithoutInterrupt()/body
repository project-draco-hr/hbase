{
  Thread sleeper=new Thread(new Runnable(){
    @Override public void run(){
      LOG.debug("Sleeper thread: sleeping for " + SLEEP_TIME_MS);
      Threads.sleepWithoutInterrupt(SLEEP_TIME_MS);
      LOG.debug("Sleeper thread: finished sleeping");
      wasInterrupted=Thread.currentThread().isInterrupted();
    }
  }
);
  LOG.debug("Starting sleeper thread (" + SLEEP_TIME_MS + " ms)");
  sleeper.start();
  long startTime=System.currentTimeMillis();
  LOG.debug("Main thread: sleeping for 500 ms");
  Threads.sleep(500);
  LOG.debug("Interrupting the sleeper thread and sleeping for 2000 ms");
  sleeper.interrupt();
  Threads.sleep(2000);
  LOG.debug("Interrupting the sleeper thread and sleeping for 1000 ms");
  sleeper.interrupt();
  Threads.sleep(1000);
  LOG.debug("Interrupting the sleeper thread again");
  sleeper.interrupt();
  sleeper.join();
  assertTrue("sleepWithoutInterrupt did not preserve the thread's " + "interrupted status",wasInterrupted);
  long timeElapsed=System.currentTimeMillis() - startTime;
  assertTrue("Elapsed time " + timeElapsed + " ms is out of the expected "+ "range of the sleep time "+ SLEEP_TIME_MS,Math.abs(timeElapsed - SLEEP_TIME_MS) < TOLERANCE_MS);
  LOG.debug("Target sleep time: " + SLEEP_TIME_MS + ", time elapsed: "+ timeElapsed);
}
