{
  if (Thread.interrupted()) {
    throw new InterruptedIOException();
  }
  if (controller == null) {
    controller=controllerFactory.newController();
    controller.setPriority(getTableName());
    controller.setCallTimeout(callTimeout);
  }
  if (closed) {
    if (scannerId != -1) {
      close();
    }
  }
 else {
    if (scannerId == -1L) {
      this.scannerId=openScanner();
    }
 else {
      Result[] rrs=null;
      ScanRequest request=null;
      setHeartbeatMessage(false);
      try {
        incRPCcallsMetrics();
        request=RequestConverter.buildScanRequest(scannerId,caching,false,nextCallSeq,this.scanMetrics != null,renew);
        ScanResponse response=null;
        try {
          response=getStub().scan(controller,request);
          nextCallSeq++;
          long timestamp=System.currentTimeMillis();
          setHeartbeatMessage(response.hasHeartbeatMessage() && response.getHeartbeatMessage());
          CellScanner cellScanner=controller.cellScanner();
          rrs=ResponseConverter.getResults(cellScanner,response);
          if (logScannerActivity) {
            long now=System.currentTimeMillis();
            if (now - timestamp > logCutOffLatency) {
              int rows=rrs == null ? 0 : rrs.length;
              LOG.info("Took " + (now - timestamp) + "ms to fetch "+ rows+ " rows from scanner="+ scannerId);
            }
          }
          updateServerSideMetrics(response);
          if (response.hasMoreResults() && !response.getMoreResults()) {
            scannerId=-1L;
            closed=true;
            return null;
          }
          if (response.hasMoreResultsInRegion()) {
            setHasMoreResultsContext(true);
            setServerHasMoreResults(response.getMoreResultsInRegion());
          }
 else {
            setHasMoreResultsContext(false);
          }
        }
 catch (        ServiceException se) {
          throw ProtobufUtil.getRemoteException(se);
        }
        updateResultsMetrics(rrs);
      }
 catch (      IOException e) {
        if (logScannerActivity) {
          LOG.info("Got exception making request " + TextFormat.shortDebugString(request) + " to "+ getLocation(),e);
        }
        IOException ioe=e;
        if (e instanceof RemoteException) {
          ioe=((RemoteException)e).unwrapRemoteException();
        }
        if (logScannerActivity && (ioe instanceof UnknownScannerException)) {
          try {
            HRegionLocation location=getConnection().relocateRegion(getTableName(),scan.getStartRow());
            LOG.info("Scanner=" + scannerId + " expired, current region location is "+ location.toString());
          }
 catch (          Throwable t) {
            LOG.info("Failed to relocate region",t);
          }
        }
        if (ioe instanceof NotServingRegionException) {
          if (this.scanMetrics != null) {
            this.scanMetrics.countOfNSRE.incrementAndGet();
          }
          throw new DoNotRetryIOException("Resetting the scanner -- see exception cause",ioe);
        }
 else         if (ioe instanceof RegionServerStoppedException) {
          throw new DoNotRetryIOException("Resetting the scanner -- see exception cause",ioe);
        }
 else {
          throw ioe;
        }
      }
      return rrs;
    }
  }
  return null;
}
