{
  final int startrow=((PEInputSplit)split).getIndex() * ROWSPERSPLIT;
  return new RecordReader<ImmutableBytesWritable,ImmutableBytesWritable>(){
    private int counter=startrow;
    private ImmutableBytesWritable key;
    private ImmutableBytesWritable value;
    private final Random random=new Random(System.currentTimeMillis());
    public void close() throws IOException {
    }
    public ImmutableBytesWritable getCurrentKey() throws IOException, InterruptedException {
      return this.key;
    }
    public ImmutableBytesWritable getCurrentValue() throws IOException, InterruptedException {
      return this.value;
    }
    public float getProgress() throws IOException, InterruptedException {
      return (ROWSPERSPLIT - this.counter) / this.counter;
    }
    public void initialize(    InputSplit arg0,    TaskAttemptContext arg1) throws IOException, InterruptedException {
    }
    public boolean nextKeyValue() throws IOException, InterruptedException {
      if (this.counter - startrow > ROWSPERSPLIT)       return false;
      this.counter++;
      this.key=new ImmutableBytesWritable(PerformanceEvaluation.format(this.counter));
      this.value=new ImmutableBytesWritable(PerformanceEvaluation.generateValue(this.random));
      return true;
    }
  }
;
}
