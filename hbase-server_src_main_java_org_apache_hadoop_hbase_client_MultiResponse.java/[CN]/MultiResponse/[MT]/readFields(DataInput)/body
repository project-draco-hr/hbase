{
  results.clear();
  int mapSize=in.readInt();
  for (int i=0; i < mapSize; i++) {
    byte[] key=Bytes.readByteArray(in);
    int listSize=in.readInt();
    List<Pair<Integer,Object>> lst=new ArrayList<Pair<Integer,Object>>(listSize);
    for (int j=0; j < listSize; j++) {
      Integer idx=in.readInt();
      if (idx == -1) {
        lst.add(null);
      }
 else {
        boolean isException=in.readBoolean();
        Object o=null;
        if (isException) {
          String klass=WritableUtils.readString(in);
          String desc=WritableUtils.readString(in);
          try {
            Class<? extends Throwable> c=(Class<? extends Throwable>)Class.forName(klass);
            Constructor<? extends Throwable> cn=c.getDeclaredConstructor(String.class);
            o=cn.newInstance(desc);
          }
 catch (          ClassNotFoundException ignored) {
          }
catch (          NoSuchMethodException ignored) {
          }
catch (          InvocationTargetException ignored) {
          }
catch (          InstantiationException ignored) {
          }
catch (          IllegalAccessException ignored) {
          }
        }
 else {
          o=HbaseObjectWritable.readObject(in,null);
        }
        lst.add(new Pair<Integer,Object>(idx,o));
      }
    }
    results.put(key,lst);
  }
}
