{
  this.startRow=Bytes.readByteArray(in);
  this.stopRow=Bytes.readByteArray(in);
  this.maxVersions=in.readInt();
  boolean hasFilter=in.readBoolean();
  if (hasFilter) {
    this.filter=(Filter)HbaseObjectWritable.readObject(in,new Configuration());
  }
  boolean hasOldFilter=in.readBoolean();
  if (hasOldFilter) {
    this.oldFilter=(RowFilterInterface)HbaseObjectWritable.readObject(in,new Configuration());
  }
  this.tr=new TimeRange();
  tr.readFields(in);
  int numFamilies=in.readInt();
  this.familyMap=new TreeMap<byte[],NavigableSet<byte[]>>(Bytes.BYTES_COMPARATOR);
  for (int i=0; i < numFamilies; i++) {
    byte[] family=Bytes.readByteArray(in);
    int numColumns=in.readInt();
    TreeSet<byte[]> set=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
    for (int j=0; j < numColumns; j++) {
      byte[] qualifier=Bytes.readByteArray(in);
      set.add(qualifier);
    }
    this.familyMap.put(family,set);
  }
}
