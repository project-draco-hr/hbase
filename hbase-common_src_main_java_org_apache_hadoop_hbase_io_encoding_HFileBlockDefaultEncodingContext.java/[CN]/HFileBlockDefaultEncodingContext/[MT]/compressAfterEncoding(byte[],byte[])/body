{
  Encryption.Context cryptoContext=fileContext.getEncryptionContext();
  if (cryptoContext != Encryption.Context.NONE) {
    cryptoByteStream.reset();
    cryptoByteStream.write(headerBytes);
    InputStream in;
    int plaintextLength;
    if (fileContext.getCompression() != Compression.Algorithm.NONE) {
      compressedByteStream.reset();
      compressionStream.resetState();
      compressionStream.write(uncompressedBytesWithHeader,headerBytes.length,uncompressedBytesWithHeader.length - headerBytes.length);
      compressionStream.flush();
      compressionStream.finish();
      byte[] plaintext=compressedByteStream.toByteArray();
      plaintextLength=plaintext.length;
      in=new ByteArrayInputStream(plaintext);
    }
 else {
      plaintextLength=uncompressedBytesWithHeader.length - headerBytes.length;
      in=new ByteArrayInputStream(uncompressedBytesWithHeader,headerBytes.length,plaintextLength);
    }
    if (plaintextLength > 0) {
      Cipher cipher=cryptoContext.getCipher();
      Encryptor encryptor=cipher.getEncryptor();
      encryptor.setKey(cryptoContext.getKey());
      int ivLength=iv.length;
      Preconditions.checkState(ivLength <= Byte.MAX_VALUE,"IV length out of range");
      cryptoByteStream.write(ivLength);
      if (ivLength > 0) {
        Encryption.incrementIv(iv);
        encryptor.setIv(iv);
        cryptoByteStream.write(iv);
      }
      Encryption.encrypt(cryptoByteStream,in,encryptor);
      onDiskBytesWithHeader=cryptoByteStream.toByteArray();
    }
 else {
      cryptoByteStream.write(0);
      onDiskBytesWithHeader=cryptoByteStream.toByteArray();
    }
  }
 else {
    if (this.fileContext.getCompression() != NONE) {
      compressedByteStream.reset();
      compressedByteStream.write(headerBytes);
      compressionStream.resetState();
      compressionStream.write(uncompressedBytesWithHeader,headerBytes.length,uncompressedBytesWithHeader.length - headerBytes.length);
      compressionStream.flush();
      compressionStream.finish();
      onDiskBytesWithHeader=compressedByteStream.toByteArray();
    }
 else {
      onDiskBytesWithHeader=uncompressedBytesWithHeader;
    }
  }
}
