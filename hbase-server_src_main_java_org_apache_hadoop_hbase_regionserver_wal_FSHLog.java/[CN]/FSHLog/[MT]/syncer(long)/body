{
  if (txid <= this.syncedTillHere) {
    return;
  }
  Writer tempWriter;
synchronized (this.updateLock) {
    if (this.closed)     return;
    tempWriter=this.writer;
  }
  try {
    long doneUpto;
    long now=EnvironmentEdgeManager.currentTimeMillis();
    IOException ioe=null;
    List<Entry> pending=null;
synchronized (flushLock) {
      if (txid <= this.syncedTillHere) {
        return;
      }
      doneUpto=this.unflushedEntries.get();
      pending=logSyncer.getPendingWrites();
      try {
        logSyncer.hlogFlush(tempWriter,pending);
      }
 catch (      IOException io) {
        ioe=io;
        LOG.error("syncer encountered error, will retry. txid=" + txid,ioe);
      }
    }
    if (ioe != null && pending != null) {
synchronized (this.updateLock) {
synchronized (flushLock) {
          tempWriter=this.writer;
          logSyncer.hlogFlush(tempWriter,pending);
        }
      }
    }
    if (txid <= this.syncedTillHere) {
      return;
    }
    try {
      if (tempWriter != null)       tempWriter.sync();
    }
 catch (    IOException ex) {
synchronized (this.updateLock) {
        tempWriter=this.writer;
        if (tempWriter != null)         tempWriter.sync();
      }
    }
    this.syncedTillHere=Math.max(this.syncedTillHere,doneUpto);
    this.metrics.finishSync(EnvironmentEdgeManager.currentTimeMillis() - now);
    if (!this.logRollRunning) {
      checkLowReplication();
      try {
        if (tempWriter.getLength() > this.logrollsize) {
          requestLogRoll();
        }
      }
 catch (      IOException x) {
        LOG.debug("Log roll failed and will be retried. (This is not an error)");
      }
    }
  }
 catch (  IOException e) {
    LOG.fatal("Could not sync. Requesting close of hlog",e);
    requestLogRoll();
    throw e;
  }
}
