{
  long currentSequence;
  while (!isInterrupted()) {
    int syncCount=0;
    try {
      while (true) {
        takeSyncFuture=null;
        takeSyncFuture=this.syncFutures.take();
        currentSequence=this.sequence;
        long syncFutureSequence=takeSyncFuture.getTxid();
        if (syncFutureSequence > currentSequence) {
          throw new IllegalStateException("currentSequence=" + currentSequence + ", syncFutureSequence="+ syncFutureSequence);
        }
        long currentHighestSyncedSequence=highestSyncedTxid.get();
        if (currentSequence < currentHighestSyncedSequence) {
          syncCount+=releaseSyncFuture(takeSyncFuture,currentHighestSyncedSequence,null);
          continue;
        }
        break;
      }
      TraceScope scope=Trace.continueSpan(takeSyncFuture.getSpan());
      long start=System.nanoTime();
      Throwable lastException=null;
      try {
        Trace.addTimelineAnnotation("syncing writer");
        writer.sync();
        Trace.addTimelineAnnotation("writer synced");
        currentSequence=updateHighestSyncedSequence(currentSequence);
      }
 catch (      IOException e) {
        LOG.error("Error syncing, request close of WAL",e);
        lastException=e;
      }
catch (      Exception e) {
        LOG.warn("UNEXPECTED",e);
        lastException=e;
      }
 finally {
        takeSyncFuture.setSpan(scope.detach());
        syncCount+=releaseSyncFuture(takeSyncFuture,currentSequence,lastException);
        syncCount+=releaseSyncFutures(currentSequence,lastException);
        if (lastException != null) {
          requestLogRoll();
        }
 else {
          checkLogRoll();
        }
      }
      postSync(System.nanoTime() - start,syncCount);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
catch (    Throwable t) {
      LOG.warn("UNEXPECTED, continuing",t);
    }
  }
}
