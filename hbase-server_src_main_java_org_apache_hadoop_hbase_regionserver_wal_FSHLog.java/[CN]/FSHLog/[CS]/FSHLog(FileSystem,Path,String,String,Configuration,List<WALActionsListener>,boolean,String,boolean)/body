{
  super();
  this.fs=fs;
  this.rootDir=root;
  this.dir=new Path(this.rootDir,logDir);
  this.oldLogDir=new Path(this.rootDir,oldLogDir);
  this.forMeta=forMeta;
  this.conf=conf;
  if (listeners != null) {
    for (    WALActionsListener i : listeners) {
      registerWALActionsListener(i);
    }
  }
  this.blocksize=this.conf.getLong("hbase.regionserver.hlog.blocksize",FSUtils.getDefaultBlockSize(this.fs,this.dir));
  float multi=conf.getFloat("hbase.regionserver.logroll.multiplier",0.95f);
  this.logrollsize=(long)(this.blocksize * multi);
  this.optionalFlushInterval=conf.getLong("hbase.regionserver.optionallogflushinterval",1 * 1000);
  this.maxLogs=conf.getInt("hbase.regionserver.maxlogs",32);
  this.minTolerableReplication=conf.getInt("hbase.regionserver.hlog.tolerable.lowreplication",FSUtils.getDefaultReplication(fs,this.dir));
  this.lowReplicationRollLimit=conf.getInt("hbase.regionserver.hlog.lowreplication.rolllimit",5);
  this.enabled=conf.getBoolean("hbase.regionserver.hlog.enabled",true);
  this.closeErrorsTolerated=conf.getInt("hbase.regionserver.logroll.errors.tolerated",0);
  this.logSyncer=new LogSyncer(this.optionalFlushInterval);
  LOG.info("WAL/HLog configuration: blocksize=" + StringUtils.byteDesc(this.blocksize) + ", rollsize="+ StringUtils.byteDesc(this.logrollsize)+ ", enabled="+ this.enabled+ ", optionallogflushinternal="+ this.optionalFlushInterval+ "ms");
  this.prefix=prefix == null || prefix.isEmpty() ? "hlog" : URLEncoder.encode(prefix,"UTF8");
  boolean dirExists=false;
  if (failIfLogDirExists && (dirExists=this.fs.exists(dir))) {
    throw new IOException("Target HLog directory already exists: " + dir);
  }
  if (!dirExists && !fs.mkdirs(dir)) {
    throw new IOException("Unable to mkdir " + dir);
  }
  if (!fs.exists(this.oldLogDir)) {
    if (!fs.mkdirs(this.oldLogDir)) {
      throw new IOException("Unable to mkdir " + this.oldLogDir);
    }
  }
  rollWriter();
  this.getNumCurrentReplicas=getGetNumCurrentReplicas(this.hdfs_out);
  if (this.optionalFlushInterval > 0) {
    Threads.setDaemonThreadRunning(logSyncer.getThread(),Thread.currentThread().getName() + ".logSyncer");
  }
 else {
    LOG.info("hbase.regionserver.optionallogflushinterval is set as " + this.optionalFlushInterval + ". Deferred log syncing won't work. "+ "Any Mutation, marked to be deferred synced, will be flushed immediately.");
  }
  coprocessorHost=new WALCoprocessorHost(this,conf);
  this.metrics=new MetricsWAL();
}
