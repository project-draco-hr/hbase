{
  this.fs=fs;
  this.fullPathLogDir=new Path(rootDir,logDir);
  this.fullPathArchiveDir=new Path(rootDir,archiveDir);
  this.conf=conf;
  if (!fs.exists(fullPathLogDir) && !fs.mkdirs(fullPathLogDir)) {
    throw new IOException("Unable to mkdir " + fullPathLogDir);
  }
  if (!fs.exists(this.fullPathArchiveDir)) {
    if (!fs.mkdirs(this.fullPathArchiveDir)) {
      throw new IOException("Unable to mkdir " + this.fullPathArchiveDir);
    }
  }
  this.logFilePrefix=prefix == null || prefix.isEmpty() ? "wal" : URLEncoder.encode(prefix,"UTF8");
  if (suffix != null && !(suffix.isEmpty()) && !(suffix.startsWith(WAL_FILE_NAME_DELIMITER))) {
    throw new IllegalArgumentException("WAL suffix must start with '" + WAL_FILE_NAME_DELIMITER + "' but instead was '"+ suffix+ "'");
  }
  FSUtils.setStoragePolicy(fs,conf,this.fullPathLogDir,HConstants.WAL_STORAGE_POLICY,HConstants.DEFAULT_WAL_STORAGE_POLICY);
  this.logFileSuffix=(suffix == null) ? "" : URLEncoder.encode(suffix,"UTF8");
  this.prefixPathStr=new Path(fullPathLogDir,logFilePrefix + WAL_FILE_NAME_DELIMITER).toString();
  this.ourFiles=new PathFilter(){
    @Override public boolean accept(    final Path fileName){
      final String fileNameString=fileName.toString();
      if (!fileNameString.startsWith(prefixPathStr)) {
        return false;
      }
      if (logFileSuffix.isEmpty()) {
        return org.apache.commons.lang.StringUtils.isNumeric(fileNameString.substring(prefixPathStr.length()));
      }
 else       if (!fileNameString.endsWith(logFileSuffix)) {
        return false;
      }
      return true;
    }
  }
;
  if (failIfWALExists) {
    final FileStatus[] walFiles=FSUtils.listStatus(fs,fullPathLogDir,ourFiles);
    if (null != walFiles && 0 != walFiles.length) {
      throw new IOException("Target WAL already exists within directory " + fullPathLogDir);
    }
  }
  if (listeners != null) {
    for (    WALActionsListener i : listeners) {
      registerWALActionsListener(i);
    }
  }
  this.coprocessorHost=new WALCoprocessorHost(this,conf);
  final long blocksize=this.conf.getLong("hbase.regionserver.hlog.blocksize",FSUtils.getDefaultBlockSize(this.fs,this.fullPathLogDir));
  this.logrollsize=(long)(blocksize * conf.getFloat("hbase.regionserver.logroll.multiplier",0.95f));
  this.maxLogs=conf.getInt("hbase.regionserver.maxlogs",32);
  this.minTolerableReplication=conf.getInt("hbase.regionserver.hlog.tolerable.lowreplication",FSUtils.getDefaultReplication(fs,this.fullPathLogDir));
  this.lowReplicationRollLimit=conf.getInt("hbase.regionserver.hlog.lowreplication.rolllimit",5);
  this.closeErrorsTolerated=conf.getInt("hbase.regionserver.logroll.errors.tolerated",0);
  int maxHandlersCount=conf.getInt(HConstants.REGION_SERVER_HANDLER_COUNT,200);
  LOG.info("WAL configuration: blocksize=" + StringUtils.byteDesc(blocksize) + ", rollsize="+ StringUtils.byteDesc(this.logrollsize)+ ", prefix="+ this.logFilePrefix+ ", suffix="+ logFileSuffix+ ", logDir="+ this.fullPathLogDir+ ", archiveDir="+ this.fullPathArchiveDir);
  rollWriter();
  this.slowSyncNs=1000000 * conf.getInt("hbase.regionserver.hlog.slowsync.ms",DEFAULT_SLOW_SYNC_TIME_MS);
  String hostingThreadName=Thread.currentThread().getName();
  this.appendExecutor=Executors.newSingleThreadExecutor(Threads.getNamedThreadFactory(hostingThreadName + ".append"));
  final int preallocatedEventCount=this.conf.getInt("hbase.regionserver.wal.disruptor.event.count",1024 * 16);
  this.disruptor=new Disruptor<RingBufferTruck>(RingBufferTruck.EVENT_FACTORY,preallocatedEventCount,this.appendExecutor,ProducerType.MULTI,new BlockingWaitStrategy());
  this.disruptor.getRingBuffer().next();
  this.ringBufferEventHandler=new RingBufferEventHandler(conf.getInt("hbase.regionserver.hlog.syncer.count",5),maxHandlersCount);
  this.disruptor.handleExceptionsWith(new RingBufferExceptionHandler());
  this.disruptor.handleEventsWith(new RingBufferEventHandler[]{this.ringBufferEventHandler});
  this.syncFuturesByHandler=new ConcurrentHashMap<Thread,SyncFuture>(maxHandlersCount);
  this.disruptor.start();
}
