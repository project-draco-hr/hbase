{
  super(fs,rootDir,logDir,archiveDir,conf,listeners,failIfWALExists,prefix,suffix);
  this.minTolerableReplication=conf.getInt("hbase.regionserver.hlog.tolerable.lowreplication",FSUtils.getDefaultReplication(fs,this.walDir));
  this.lowReplicationRollLimit=conf.getInt("hbase.regionserver.hlog.lowreplication.rolllimit",5);
  this.closeErrorsTolerated=conf.getInt("hbase.regionserver.logroll.errors.tolerated",0);
  rollWriter();
  String hostingThreadName=Thread.currentThread().getName();
  this.appendExecutor=Executors.newSingleThreadExecutor(Threads.getNamedThreadFactory(hostingThreadName + ".append"));
  final int preallocatedEventCount=this.conf.getInt("hbase.regionserver.wal.disruptor.event.count",1024 * 16);
  this.disruptor=new Disruptor<RingBufferTruck>(RingBufferTruck.EVENT_FACTORY,preallocatedEventCount,this.appendExecutor,ProducerType.MULTI,new BlockingWaitStrategy());
  this.disruptor.getRingBuffer().next();
  int maxHandlersCount=conf.getInt(HConstants.REGION_SERVER_HANDLER_COUNT,200);
  this.ringBufferEventHandler=new RingBufferEventHandler(conf.getInt("hbase.regionserver.hlog.syncer.count",5),maxHandlersCount);
  this.disruptor.handleExceptionsWith(new RingBufferExceptionHandler());
  this.disruptor.handleEventsWith(new RingBufferEventHandler[]{this.ringBufferEventHandler});
  this.disruptor.start();
}
