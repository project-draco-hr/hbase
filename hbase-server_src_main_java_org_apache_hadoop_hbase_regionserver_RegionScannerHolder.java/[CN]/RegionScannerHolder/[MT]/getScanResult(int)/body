{
  Preconditions.checkArgument(rows > 0,"Number of rows requested must be positive");
  ScanResult scanResult=null;
  this.rows=rows;
  if (prefetchScanFuture == null) {
    scanResult=prefetcher.call();
  }
 else {
    try {
      scanResult=prefetchScanFuture.get();
      if (scanResult.moreResults) {
        int prefetchedRows=scanResult.results.size();
        if (prefetchedRows != 0 && this.rows > prefetchedRows) {
          this.rows-=prefetchedRows;
          ScanResult tmp=prefetcher.call();
          if (tmp.isException) {
            return tmp;
          }
          if (tmp.results != null && !tmp.results.isEmpty()) {
            scanResult.results.addAll(tmp.results);
          }
          this.rows=rows;
        }
      }
      prefetchScanFuture=null;
      if (prefetchedResultSize > 0) {
        globalPrefetchedResultSize.addAndGet(-prefetchedResultSize);
        prefetchedResultSize=0L;
      }
    }
 catch (    ExecutionException ee) {
      throw new IOException("failed to run prefetching task",ee.getCause());
    }
catch (    InterruptedException ie) {
      Thread.currentThread().interrupt();
      IOException iie=new InterruptedIOException("scan was interrupted");
      iie.initCause(ie);
      throw iie;
    }
  }
  if (prefetching && scanResult.moreResults && !scanResult.results.isEmpty()) {
    long totalPrefetchedResultSize=globalPrefetchedResultSize.get();
    if (totalPrefetchedResultSize < maxGlobalPrefetchedResultSize) {
      prefetchScanFuture=scanPrefetchThreadPool.submit(prefetcher);
    }
 else     if (LOG.isTraceEnabled()) {
      LOG.trace("One prefetching is skipped for scanner " + scannerName + " since total prefetched result size "+ totalPrefetchedResultSize+ " is more than the maximum configured "+ maxGlobalPrefetchedResultSize);
    }
  }
  return scanResult;
}
