{
  if (this.server.isStopped() || this.rsServices.isStopping()) {
    return false;
  }
  final AtomicBoolean signaller=new AtomicBoolean(false);
  PostOpenDeployTasksThread t=new PostOpenDeployTasksThread(r,this.server,this.rsServices,signaller);
  t.start();
  int assignmentTimeout=this.server.getConfiguration().getInt("hbase.master.assignment.timeoutmonitor.period",10000);
  long timeout=assignmentTimeout * 10;
  long now=EnvironmentEdgeManager.currentTimeMillis();
  long endTime=now + timeout;
  long period=Math.max(1,assignmentTimeout / 3);
  long lastUpdate=now;
  boolean tickleOpening=true;
  while (!signaller.get() && t.isAlive() && !this.server.isStopped()&& !this.rsServices.isStopping()&& (endTime > now)) {
    long elapsed=now - lastUpdate;
    if (elapsed > period) {
      lastUpdate=now;
      tickleOpening=tickleOpening("post_open_deploy");
    }
synchronized (signaller) {
      try {
        signaller.wait(period);
      }
 catch (      InterruptedException e) {
      }
    }
    now=EnvironmentEdgeManager.currentTimeMillis();
  }
  if (t.isAlive()) {
    if (!signaller.get()) {
      LOG.debug("Interrupting thread " + t);
      t.interrupt();
    }
    try {
      t.join();
    }
 catch (    InterruptedException ie) {
      LOG.warn("Interrupted joining " + r.getRegionInfo().getRegionNameAsString(),ie);
      Thread.currentThread().interrupt();
    }
  }
  return ((!Thread.interrupted() && t.getException() == null) && tickleOpening);
}
