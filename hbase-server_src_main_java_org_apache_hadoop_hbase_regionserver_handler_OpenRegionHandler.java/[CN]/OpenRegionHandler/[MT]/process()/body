{
  boolean openSuccessful=false;
  boolean transitionedToOpening=false;
  final String regionName=regionInfo.getRegionNameAsString();
  HRegion region=null;
  try {
    if (this.server.isStopped() || this.rsServices.isStopping()) {
      return;
    }
    final String encodedName=regionInfo.getEncodedName();
    if (this.rsServices.getFromOnlineRegions(encodedName) != null) {
      LOG.error("Region " + encodedName + " was already online when we started processing the opening. "+ "Marking this new attempt as failed");
      return;
    }
    if (!isRegionStillOpening()) {
      LOG.error("Region " + encodedName + " opening cancelled");
      return;
    }
    if (!coordination.transitionFromOfflineToOpening(regionInfo,ord)) {
      LOG.warn("Region was hijacked? Opening cancelled for encodedName=" + encodedName);
      return;
    }
    transitionedToOpening=true;
    region=openRegion();
    if (region == null) {
      return;
    }
    boolean failed=true;
    if (coordination.tickleOpening(ord,regionInfo,rsServices,"post_region_open")) {
      if (updateMeta(region)) {
        failed=false;
      }
    }
    if (failed || this.server.isStopped() || this.rsServices.isStopping()) {
      return;
    }
    if (!isRegionStillOpening() || !coordination.transitionToOpened(region,ord)) {
      return;
    }
    this.rsServices.addToOnlineRegions(region);
    openSuccessful=true;
    LOG.debug("Opened " + regionName + " on "+ this.server.getServerName());
  }
  finally {
    if (!openSuccessful) {
      doCleanUpOnFailedOpen(region,transitionedToOpening,ord);
    }
    final Boolean current=this.rsServices.getRegionsInTransitionInRS().remove(this.regionInfo.getEncodedNameAsBytes());
    if (openSuccessful) {
      if (current == null) {
        LOG.error("Bad state: we've just opened a region that was NOT in transition. Region=" + regionName);
      }
 else       if (Boolean.FALSE.equals(current)) {
        LOG.error("Race condition: we've finished to open a region, while a close was requested " + " on region=" + regionName + ". It can be a critical error, as a region that"+ " should be closed is now opened. Closing it now");
        cleanupFailedOpen(region);
      }
    }
  }
}
