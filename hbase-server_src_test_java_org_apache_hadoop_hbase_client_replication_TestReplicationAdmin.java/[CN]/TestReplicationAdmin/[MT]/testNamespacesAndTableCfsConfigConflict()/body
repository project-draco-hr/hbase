{
  String ns1="ns1";
  String ns2="ns2";
  TableName tab1=TableName.valueOf("ns1:tabl");
  TableName tab2=TableName.valueOf("ns2:tab2");
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(KEY_ONE);
  admin.addPeer(ID_ONE,rpc);
  admin.peerAdded(ID_ONE);
  rpc=admin.getPeerConfig(ID_ONE);
  Set<String> namespaces=new HashSet<String>();
  namespaces.add(ns1);
  rpc.setNamespaces(namespaces);
  admin.updatePeerConfig(ID_ONE,rpc);
  rpc=admin.getPeerConfig(ID_ONE);
  Map<TableName,List<String>> tableCfs=new HashMap<>();
  tableCfs.put(tab1,new ArrayList<String>());
  rpc.setTableCFsMap(tableCfs);
  try {
    admin.updatePeerConfig(ID_ONE,rpc);
    fail("Should throw ReplicationException, because table " + tab1 + " conflict with namespace "+ ns1);
  }
 catch (  ReplicationException e) {
  }
  rpc=admin.getPeerConfig(ID_ONE);
  tableCfs.clear();
  tableCfs.put(tab2,new ArrayList<String>());
  rpc.setTableCFsMap(tableCfs);
  admin.updatePeerConfig(ID_ONE,rpc);
  rpc=admin.getPeerConfig(ID_ONE);
  namespaces.clear();
  namespaces.add(ns2);
  rpc.setNamespaces(namespaces);
  try {
    admin.updatePeerConfig(ID_ONE,rpc);
    fail("Should throw ReplicationException, because namespace " + ns2 + " conflict with table "+ tab2);
  }
 catch (  ReplicationException e) {
  }
  admin.removePeer(ID_ONE);
}
