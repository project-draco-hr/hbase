{
  List<Row> actions=Arrays.asList(new Row[]{new Increment(ROW_A).addColumn(TEST_FAMILY,qualifierCol1,2L),new Increment(ROW_A).addColumn(TEST_FAMILY,qualifierCol1,2L)});
  Object[] results3=new Object[actions.size()];
  Object[] results1=results3;
  hTableInterface.batch(actions,results1);
  assertEquals(2,results1.length);
  for (  Object r2 : results1) {
    assertTrue(r2 instanceof Result);
  }
  checkRowValue(ROW_A,Bytes.toBytes(0L));
  Object[] results2=new Result[2];
  hTableInterface.batch(actions,results2);
  for (  Object r2 : results2) {
    assertTrue(r2 instanceof Result);
  }
  checkRowValue(ROW_A,Bytes.toBytes(4L));
  final long[] updateCounter=new long[]{0L};
  hTableInterface.batchCallback(actions,results3,new Batch.Callback<Result>(){
    @Override public void update(    byte[] region,    byte[] row,    Result result){
      updateCounter[0]++;
    }
  }
);
  assertEquals(2,updateCounter[0]);
  assertEquals(2,results3.length);
  for (  Object r3 : results3) {
    assertTrue(r3 instanceof Result);
  }
  checkRowValue(ROW_A,Bytes.toBytes(8L));
  Object[] results4=new Result[2];
  updateCounter[0]=0L;
  hTableInterface.batchCallback(actions,results4,new Batch.Callback<Result>(){
    @Override public void update(    byte[] region,    byte[] row,    Result result){
      updateCounter[0]++;
    }
  }
);
  assertEquals(2,updateCounter[0]);
  for (  Object r2 : results4) {
    assertTrue(r2 instanceof Result);
  }
  checkRowValue(ROW_A,Bytes.toBytes(12L));
}
