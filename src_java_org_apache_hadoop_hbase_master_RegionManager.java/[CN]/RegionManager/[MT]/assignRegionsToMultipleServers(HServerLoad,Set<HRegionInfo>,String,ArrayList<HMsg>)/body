{
  int nRegionsToAssign=regionsToAssign.size();
  int nregions=regionsPerServer(nRegionsToAssign,thisServersLoad);
  nRegionsToAssign-=nregions;
  if (nRegionsToAssign > 0) {
    HServerLoad heavierLoad=new HServerLoad();
    int nservers=computeNextHeaviestLoad(thisServersLoad,heavierLoad);
    nregions=0;
    for (HServerLoad load=new HServerLoad(thisServersLoad.getNumberOfRequests(),thisServersLoad.getNumberOfRegions()); load.compareTo(heavierLoad) <= 0 && nregions < nRegionsToAssign; load.setNumberOfRegions(load.getNumberOfRegions() + 1), nregions++) {
    }
    if (nregions < nRegionsToAssign) {
      if (nservers > 0) {
        nregions=(int)Math.ceil((1.0 * nRegionsToAssign) / (1.0 * nservers));
      }
 else {
        nregions=(int)Math.ceil((1.0 * nRegionsToAssign) / (1.0 * master.serverManager.numServers()));
      }
    }
 else {
      nregions=nRegionsToAssign;
    }
    if (nregions > this.maxAssignInOneGo) {
      nregions=this.maxAssignInOneGo;
    }
    long now=System.currentTimeMillis();
    for (    HRegionInfo regionInfo : regionsToAssign) {
      LOG.info("assigning region " + Bytes.toString(regionInfo.getRegionName()) + " to server "+ serverName);
      unassignedRegions.put(regionInfo,Long.valueOf(now));
      RegionHistorian.addRegionAssignment(regionInfo,serverName);
      returnMsgs.add(new HMsg(HMsg.Type.MSG_REGION_OPEN,regionInfo));
      if (--nregions <= 0) {
        break;
      }
    }
  }
}
