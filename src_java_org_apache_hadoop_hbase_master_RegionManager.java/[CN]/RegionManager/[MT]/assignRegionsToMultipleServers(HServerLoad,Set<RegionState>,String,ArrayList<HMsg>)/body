{
  int nRegionsToAssign=regionsToAssign.size();
  int nregions=regionsPerServer(nRegionsToAssign,thisServersLoad);
  nRegionsToAssign-=nregions;
  if (nRegionsToAssign > 0) {
    HServerLoad heavierLoad=new HServerLoad();
    int nservers=computeNextHeaviestLoad(thisServersLoad,heavierLoad);
    nregions=0;
    for (HServerLoad load=new HServerLoad(thisServersLoad); load.compareTo(heavierLoad) <= 0 && nregions < nRegionsToAssign; load.setNumberOfRegions(load.getNumberOfRegions() + 1), nregions++) {
    }
    if (nregions < nRegionsToAssign) {
      if (nservers > 0) {
        nregions=(int)Math.ceil((1.0 * nRegionsToAssign) / (1.0 * nservers));
      }
 else {
        nregions=(int)Math.ceil((1.0 * nRegionsToAssign) / (1.0 * master.serverManager.numServers()));
      }
    }
 else {
      nregions=nRegionsToAssign;
    }
    if (nregions > this.maxAssignInOneGo) {
      nregions=this.maxAssignInOneGo;
    }
    for (    RegionState s : regionsToAssign) {
      LOG.info("assigning region " + Bytes.toString(s.getRegionName()) + " to server "+ serverName);
      s.setAssigned(serverName);
      this.historian.addRegionAssignment(s.getRegionInfo(),serverName);
      returnMsgs.add(new HMsg(HMsg.Type.MSG_REGION_OPEN,s.getRegionInfo()));
      if (--nregions <= 0) {
        break;
      }
    }
  }
}
