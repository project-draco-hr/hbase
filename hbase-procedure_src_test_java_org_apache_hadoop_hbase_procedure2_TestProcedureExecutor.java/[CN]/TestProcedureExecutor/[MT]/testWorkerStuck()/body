{
  final Configuration conf=new Configuration(htu.getConfiguration());
  conf.setFloat("hbase.procedure.worker.add.stuck.percentage",0.5f);
  conf.setInt("hbase.procedure.worker.monitor.interval.msec",500);
  conf.setInt("hbase.procedure.worker.stuck.threshold.msec",750);
  final int NUM_THREADS=2;
  createNewExecutor(conf,NUM_THREADS);
  Semaphore latch1=new Semaphore(2);
  latch1.acquire(2);
  BusyWaitProcedure busyProc1=new BusyWaitProcedure(latch1);
  Semaphore latch2=new Semaphore(2);
  latch2.acquire(2);
  BusyWaitProcedure busyProc2=new BusyWaitProcedure(latch2);
  long busyProcId1=procExecutor.submitProcedure(busyProc1);
  long busyProcId2=procExecutor.submitProcedure(busyProc2);
  long otherProcId=procExecutor.submitProcedure(new NoopProcedure());
  int threads1=waitThreadCount(NUM_THREADS + 1);
  LOG.info("new threads got created: " + (threads1 - NUM_THREADS));
  assertEquals(NUM_THREADS + 1,threads1);
  ProcedureTestingUtility.waitProcedure(procExecutor,otherProcId);
  assertEquals(true,procExecutor.isFinished(otherProcId));
  ProcedureTestingUtility.assertProcNotFailed(procExecutor,otherProcId);
  assertEquals(true,procExecutor.isRunning());
  assertEquals(false,procExecutor.isFinished(busyProcId1));
  assertEquals(false,procExecutor.isFinished(busyProcId2));
  latch1.release();
  latch2.release();
  LOG.info("set keep alive and wait threads being removed");
  procExecutor.setKeepAliveTime(500L,TimeUnit.MILLISECONDS);
  int threads2=waitThreadCount(NUM_THREADS);
  LOG.info("threads got removed: " + (threads1 - threads2));
  assertEquals(NUM_THREADS,threads2);
  latch1.release();
  latch2.release();
  ProcedureTestingUtility.waitProcedure(procExecutor,busyProcId1);
  ProcedureTestingUtility.waitProcedure(procExecutor,busyProcId2);
  ProcedureTestingUtility.assertProcNotFailed(procExecutor,busyProcId1);
  ProcedureTestingUtility.assertProcNotFailed(procExecutor,busyProcId2);
}
