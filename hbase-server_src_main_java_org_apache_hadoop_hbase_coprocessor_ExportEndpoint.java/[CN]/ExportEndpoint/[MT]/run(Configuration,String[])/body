{
  String[] otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();
  if (!Export.checkArguments(otherArgs)) {
    Export.usage("Wrong number of arguments: " + otherArgs.length);
    System.exit(-1);
  }
  TableName tableName=TableName.valueOf(otherArgs[0]);
  FileSystem fs=FileSystem.get(conf);
  String dir=otherArgs[1];
  checkDir(fs,dir);
  Scan scan=Export.getConfiguredScanForJob(conf,otherArgs);
  final ExportProtos.ExportRequest request=getConfiguredRequestForJob(conf,otherArgs,scan);
  try (Connection con=ConnectionFactory.createConnection(conf);Table table=con.getTable(tableName)){
    return table.coprocessorService(ExportProtos.ExportService.class,scan.getStartRow(),scan.getStopRow(),new Batch.Call<ExportProtos.ExportService,ExportProtos.ExportResponse>(){
      @Override public ExportProtos.ExportResponse call(      ExportProtos.ExportService service) throws IOException {
        ServerRpcController controller=new ServerRpcController();
        BlockingRpcCallback<ExportProtos.ExportResponse> rpcCallback=new BlockingRpcCallback<>();
        service.export(controller,request,rpcCallback);
        if (controller.failedOnException()) {
          throw controller.getFailedOn();
        }
        return rpcCallback.get();
      }
    }
);
  }
 catch (  Throwable e) {
    fs.delete(new Path(dir),true);
    throw e;
  }
}
