{
  List<HRegionInfo> regions=assignmentSnapshot.getTableToRegionMap().get(tableName);
  int numRegions=regions.size();
  Map<HRegionInfo,ServerName> currentAssignmentMap=assignmentSnapshot.getRegionToRegionServerMap();
  List<ServerName> servers=new ArrayList<ServerName>();
  servers.addAll(getHBaseAdmin().getClusterStatus().getServers());
  LOG.info("Start to generate assignment plan for " + numRegions + " regions from table "+ tableName+ " with "+ servers.size()+ " region servers");
  int slotsPerServer=(int)Math.ceil((float)numRegions / servers.size());
  int regionSlots=slotsPerServer * servers.size();
  float[][] primaryCost=new float[numRegions][regionSlots];
  float[][] secondaryCost=new float[numRegions][regionSlots];
  float[][] tertiaryCost=new float[numRegions][regionSlots];
  if (this.enforceLocality && regionLocalityMap != null) {
    float[][] localityPerServer=new float[numRegions][regionSlots];
    for (int i=0; i < numRegions; i++) {
      Map<String,Float> serverLocalityMap=regionLocalityMap.get(regions.get(i).getEncodedName());
      if (serverLocalityMap == null) {
        continue;
      }
      for (int j=0; j < servers.size(); j++) {
        String serverName=servers.get(j).getHostname();
        if (serverName == null) {
          continue;
        }
        Float locality=serverLocalityMap.get(serverName);
        if (locality == null) {
          continue;
        }
        for (int k=0; k < slotsPerServer; k++) {
          localityPerServer[i][j * slotsPerServer + k]=locality.floatValue();
        }
      }
    }
    Map<String,Map<HRegionInfo,Float>> rackRegionLocality=new HashMap<String,Map<HRegionInfo,Float>>();
    for (int i=0; i < numRegions; i++) {
      HRegionInfo region=regions.get(i);
      for (int j=0; j < regionSlots; j+=slotsPerServer) {
        String rack=rackManager.getRack(servers.get(j / slotsPerServer));
        Map<HRegionInfo,Float> rackLocality=rackRegionLocality.get(rack);
        if (rackLocality == null) {
          rackLocality=new HashMap<HRegionInfo,Float>();
          rackRegionLocality.put(rack,rackLocality);
        }
        Float localityObj=rackLocality.get(region);
        float locality=localityObj == null ? 0 : localityObj.floatValue();
        locality+=localityPerServer[i][j];
        rackLocality.put(region,locality);
      }
    }
    for (int i=0; i < numRegions; i++) {
      for (int j=0; j < regionSlots; j++) {
        String rack=rackManager.getRack(servers.get(j / slotsPerServer));
        Float totalRackLocalityObj=rackRegionLocality.get(rack).get(regions.get(i));
        float totalRackLocality=totalRackLocalityObj == null ? 0 : totalRackLocalityObj.floatValue();
        primaryCost[i][j]=1 - (2 * localityPerServer[i][j] - totalRackLocality);
        secondaryCost[i][j]=2 - (localityPerServer[i][j] + totalRackLocality);
        tertiaryCost[i][j]=1 - localityPerServer[i][j];
      }
    }
  }
  if (this.enforceMinAssignmentMove && currentAssignmentMap != null) {
    for (int i=0; i < numRegions; i++) {
      for (int j=0; j < servers.size(); j++) {
        ServerName currentAddress=currentAssignmentMap.get(regions.get(i));
        if (currentAddress != null && !currentAddress.equals(servers.get(j))) {
          for (int k=0; k < slotsPerServer; k++) {
            primaryCost[i][j * slotsPerServer + k]+=NOT_CURRENT_HOST_PENALTY;
          }
        }
      }
    }
  }
  for (int i=0; i < numRegions; i++) {
    for (int j=0; j < regionSlots; j+=slotsPerServer) {
      primaryCost[i][j]+=LAST_SLOT_COST_PENALTY;
      secondaryCost[i][j]+=LAST_SLOT_COST_PENALTY;
      tertiaryCost[i][j]+=LAST_SLOT_COST_PENALTY;
    }
  }
  RandomizedMatrix randomizedMatrix=new RandomizedMatrix(numRegions,regionSlots);
  primaryCost=randomizedMatrix.transform(primaryCost);
  int[] primaryAssignment=new MunkresAssignment(primaryCost).solve();
  primaryAssignment=randomizedMatrix.invertIndices(primaryAssignment);
  for (int i=0; i < numRegions; i++) {
    int slot=primaryAssignment[i];
    String rack=rackManager.getRack(servers.get(slot / slotsPerServer));
    for (int k=0; k < servers.size(); k++) {
      if (!rackManager.getRack(servers.get(k)).equals(rack)) {
        continue;
      }
      if (k == slot / slotsPerServer) {
        for (int m=0; m < slotsPerServer; m++) {
          secondaryCost[i][k * slotsPerServer + m]=MAX_COST;
          tertiaryCost[i][k * slotsPerServer + m]=MAX_COST;
        }
      }
 else {
        for (int m=0; m < slotsPerServer; m++) {
          secondaryCost[i][k * slotsPerServer + m]=AVOID_COST;
          tertiaryCost[i][k * slotsPerServer + m]=AVOID_COST;
        }
      }
    }
  }
  if (munkresForSecondaryAndTertiary) {
    randomizedMatrix=new RandomizedMatrix(numRegions,regionSlots);
    secondaryCost=randomizedMatrix.transform(secondaryCost);
    int[] secondaryAssignment=new MunkresAssignment(secondaryCost).solve();
    secondaryAssignment=randomizedMatrix.invertIndices(secondaryAssignment);
    for (int i=0; i < numRegions; i++) {
      int slot=secondaryAssignment[i];
      String rack=rackManager.getRack(servers.get(slot / slotsPerServer));
      for (int k=0; k < servers.size(); k++) {
        if (k == slot / slotsPerServer) {
          for (int m=0; m < slotsPerServer; m++) {
            tertiaryCost[i][k * slotsPerServer + m]=MAX_COST;
          }
        }
 else {
          if (rackManager.getRack(servers.get(k)).equals(rack)) {
            continue;
          }
          for (int m=0; m < slotsPerServer; m++) {
            tertiaryCost[i][k * slotsPerServer + m]=AVOID_COST;
          }
        }
      }
    }
    randomizedMatrix=new RandomizedMatrix(numRegions,regionSlots);
    tertiaryCost=randomizedMatrix.transform(tertiaryCost);
    int[] tertiaryAssignment=new MunkresAssignment(tertiaryCost).solve();
    tertiaryAssignment=randomizedMatrix.invertIndices(tertiaryAssignment);
    for (int i=0; i < numRegions; i++) {
      List<ServerName> favoredServers=new ArrayList<ServerName>(FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
      ServerName s=servers.get(primaryAssignment[i] / slotsPerServer);
      favoredServers.add(ServerName.valueOf(s.getHostname(),s.getPort(),ServerName.NON_STARTCODE));
      s=servers.get(secondaryAssignment[i] / slotsPerServer);
      favoredServers.add(ServerName.valueOf(s.getHostname(),s.getPort(),ServerName.NON_STARTCODE));
      s=servers.get(tertiaryAssignment[i] / slotsPerServer);
      favoredServers.add(ServerName.valueOf(s.getHostname(),s.getPort(),ServerName.NON_STARTCODE));
      plan.updateAssignmentPlan(regions.get(i),favoredServers);
    }
    LOG.info("Generated the assignment plan for " + numRegions + " regions from table "+ tableName+ " with "+ servers.size()+ " region servers");
    LOG.info("Assignment plan for secondary and tertiary generated " + "using MunkresAssignment");
  }
 else {
    Map<HRegionInfo,ServerName> primaryRSMap=new HashMap<HRegionInfo,ServerName>();
    for (int i=0; i < numRegions; i++) {
      primaryRSMap.put(regions.get(i),servers.get(primaryAssignment[i] / slotsPerServer));
    }
    FavoredNodeAssignmentHelper favoredNodeHelper=new FavoredNodeAssignmentHelper(servers,conf);
    favoredNodeHelper.initialize();
    Map<HRegionInfo,ServerName[]> secondaryAndTertiaryMap=favoredNodeHelper.placeSecondaryAndTertiaryWithRestrictions(primaryRSMap);
    for (int i=0; i < numRegions; i++) {
      List<ServerName> favoredServers=new ArrayList<ServerName>(FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
      HRegionInfo currentRegion=regions.get(i);
      ServerName s=primaryRSMap.get(currentRegion);
      favoredServers.add(ServerName.valueOf(s.getHostname(),s.getPort(),ServerName.NON_STARTCODE));
      ServerName[] secondaryAndTertiary=secondaryAndTertiaryMap.get(currentRegion);
      s=secondaryAndTertiary[0];
      favoredServers.add(ServerName.valueOf(s.getHostname(),s.getPort(),ServerName.NON_STARTCODE));
      s=secondaryAndTertiary[1];
      favoredServers.add(ServerName.valueOf(s.getHostname(),s.getPort(),ServerName.NON_STARTCODE));
      plan.updateAssignmentPlan(regions.get(i),favoredServers);
    }
    LOG.info("Generated the assignment plan for " + numRegions + " regions from table "+ tableName+ " with "+ servers.size()+ " region servers");
    LOG.info("Assignment plan for secondary and tertiary generated " + "using placeSecondaryAndTertiaryWithRestrictions method");
  }
}
