{
  Path editsdir=HLogUtil.getRegionDirRecoveredEditsDir(regiondir);
  long maxSeqId=0;
  FileStatus[] files=null;
  if (fs.exists(editsdir)) {
    files=FSUtils.listStatus(fs,editsdir,new PathFilter(){
      @Override public boolean accept(      Path p){
        if (p.getName().endsWith(HLog.SEQUENCE_ID_FILE_SUFFIX)) {
          return true;
        }
        return false;
      }
    }
);
    if (files != null) {
      for (      FileStatus status : files) {
        String fileName=status.getPath().getName();
        try {
          Long tmpSeqId=Long.parseLong(fileName.substring(0,fileName.length() - HLog.SEQUENCE_ID_FILE_SUFFIX.length()));
          maxSeqId=Math.max(tmpSeqId,maxSeqId);
        }
 catch (        NumberFormatException ex) {
          LOG.warn("Invalid SeqId File Name=" + fileName);
        }
      }
    }
  }
  if (maxSeqId > newSeqId) {
    newSeqId=maxSeqId;
  }
  newSeqId+=saftyBumper;
  Path newSeqIdFile=new Path(editsdir,newSeqId + HLog.SEQUENCE_ID_FILE_SUFFIX);
  if (!fs.createNewFile(newSeqIdFile)) {
    throw new IOException("Failed to create SeqId file:" + newSeqIdFile);
  }
  if (files != null) {
    for (    FileStatus status : files) {
      fs.delete(status.getPath(),false);
    }
  }
  return newSeqId;
}
