{
  this.conf=conf;
  this.storeConfigInfo=storeConfigInfo;
  maxCompactSize=conf.getLong(HBASE_HSTORE_COMPACTION_MAX_SIZE_KEY,Long.MAX_VALUE);
  offPeakMaxCompactSize=conf.getLong(HBASE_HSTORE_COMPACTION_MAX_SIZE_OFFPEAK_KEY,maxCompactSize);
  minCompactSize=conf.getLong(HBASE_HSTORE_COMPACTION_MIN_SIZE_KEY,storeConfigInfo.getMemstoreFlushSize());
  minFilesToCompact=Math.max(2,conf.getInt(HBASE_HSTORE_COMPACTION_MIN_KEY,conf.getInt("hbase.hstore.compactionThreshold",3)));
  maxFilesToCompact=conf.getInt(HBASE_HSTORE_COMPACTION_MAX_KEY,10);
  compactionRatio=conf.getFloat(HBASE_HSTORE_COMPACTION_RATIO_KEY,1.2F);
  offPeakCompactionRatio=conf.getFloat(HBASE_HSTORE_COMPACTION_RATIO_OFFPEAK_KEY,5.0F);
  throttlePoint=conf.getLong("hbase.regionserver.thread.compaction.throttle",2 * maxFilesToCompact * storeConfigInfo.getMemstoreFlushSize());
  majorCompactionPeriod=conf.getLong(HConstants.MAJOR_COMPACTION_PERIOD,1000 * 60 * 60* 24* 7);
  majorCompactionJitter=conf.getFloat("hbase.hregion.majorcompaction.jitter",0.50F);
  minLocalityToForceCompact=conf.getFloat(HBASE_HSTORE_MIN_LOCALITY_TO_SKIP_MAJOR_COMPACT,0f);
  LOG.info(this);
}
