{
  Cell left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  Cell right=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  Cell mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) <= 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) <= 0);
  left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("b"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) <= 0);
  left=CellUtil.createCell(Bytes.toBytes("g"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("i"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) <= 0);
  left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("bbbbbbb"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) < 0);
  assertEquals(1,(int)mid.getRowLength());
  left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("a"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) <= 0);
  left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("aaaaaaaa"),Bytes.toBytes("b"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) < 0);
  assertEquals(2,(int)mid.getFamilyLength());
  left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("aaaaaaaaa"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) < 0);
  assertEquals(2,(int)mid.getQualifierLength());
  left=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("a"),Bytes.toBytes("a"),Bytes.toBytes("b"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.COMPARATOR,left,right);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.COMPARATOR.compareKeyIgnoresMvcc(mid,right) <= 0);
  assertEquals(1,(int)mid.getQualifierLength());
  left=CellUtil.createCell(Bytes.toBytes("g"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  right=CellUtil.createCell(Bytes.toBytes("i"),Bytes.toBytes("a"),Bytes.toBytes("a"));
  mid=HFileWriterImpl.getMidpoint(CellComparator.META_COMPARATOR,left,right);
  assertTrue(CellComparator.META_COMPARATOR.compareKeyIgnoresMvcc(left,mid) < 0);
  assertTrue(CellComparator.META_COMPARATOR.compareKeyIgnoresMvcc(mid,right) == 0);
  byte[] rowA=Bytes.toBytes("rowA");
  byte[] rowB=Bytes.toBytes("rowB");
  byte[] family=Bytes.toBytes("family");
  byte[] qualA=Bytes.toBytes("qfA");
  byte[] qualB=Bytes.toBytes("qfB");
  final CellComparator keyComparator=CellComparator.COMPARATOR;
  long ts=5;
  KeyValue kv1=new KeyValue(Bytes.toBytes("the quick brown fox"),family,qualA,ts,Type.Put);
  KeyValue kv2=new KeyValue(Bytes.toBytes("the who test text"),family,qualA,ts,Type.Put);
  Cell newKey=HFileWriterImpl.getMidpoint(keyComparator,kv1,kv2);
  assertTrue(keyComparator.compare(kv1,newKey) < 0);
  assertTrue((keyComparator.compare(kv2,newKey)) > 0);
  byte[] expectedArray=Bytes.toBytes("the r");
  Bytes.equals(newKey.getRowArray(),newKey.getRowOffset(),newKey.getRowLength(),expectedArray,0,expectedArray.length);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,0,Type.Put);
  assertTrue(keyComparator.compare(kv1,kv2) < 0);
  newKey=HFileWriterImpl.getMidpoint(keyComparator,kv1,kv2);
  assertTrue(keyComparator.compare(kv1,newKey) < 0);
  assertTrue((keyComparator.compare(kv2,newKey)) == 0);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,-5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,-10,Type.Put);
  assertTrue(keyComparator.compare(kv1,kv2) < 0);
  newKey=HFileWriterImpl.getMidpoint(keyComparator,kv1,kv2);
  assertTrue(keyComparator.compare(kv1,newKey) < 0);
  assertTrue((keyComparator.compare(kv2,newKey)) == 0);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualB,5,Type.Put);
  assertTrue(keyComparator.compare(kv1,kv2) < 0);
  newKey=HFileWriterImpl.getMidpoint(keyComparator,kv1,kv2);
  assertTrue(keyComparator.compare(kv1,newKey) < 0);
  assertTrue((keyComparator.compare(kv2,newKey)) > 0);
  assertTrue(Arrays.equals(CellUtil.cloneFamily(newKey),family));
  assertTrue(Arrays.equals(CellUtil.cloneQualifier(newKey),qualB));
  assertTrue(newKey.getTimestamp() == HConstants.LATEST_TIMESTAMP);
  assertTrue(newKey.getTypeByte() == Type.Maximum.getCode());
  final CellComparator metaKeyComparator=CellComparator.META_COMPARATOR;
  kv1=new KeyValue(Bytes.toBytes("ilovehbase123"),family,qualA,5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase234"),family,qualA,0,Type.Put);
  newKey=HFileWriterImpl.getMidpoint(metaKeyComparator,kv1,kv2);
  assertTrue(metaKeyComparator.compare(kv1,newKey) < 0);
  assertTrue((metaKeyComparator.compare(kv2,newKey) == 0));
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,ts,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbaseandhdfs"),family,qualA,ts,Type.Put);
  assertTrue(keyComparator.compare(kv1,kv2) < 0);
  newKey=HFileWriterImpl.getMidpoint(keyComparator,kv1,kv2);
  assertTrue(keyComparator.compare(kv1,newKey) < 0);
  assertTrue((keyComparator.compare(kv2,newKey)) > 0);
  expectedArray=Bytes.toBytes("ilovehbasea");
  Bytes.equals(newKey.getRowArray(),newKey.getRowOffset(),newKey.getRowLength(),expectedArray,0,expectedArray.length);
  kv1=new KeyValue(Bytes.toBytes("100abcdefg"),family,qualA,ts,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("101abcdefg"),family,qualA,ts,Type.Put);
  assertTrue(keyComparator.compare(kv1,kv2) < 0);
  newKey=HFileWriterImpl.getMidpoint(keyComparator,kv1,kv2);
  assertTrue(keyComparator.compare(kv1,newKey) < 0);
  assertTrue((keyComparator.compare(kv2,newKey)) > 0);
  expectedArray=Bytes.toBytes("101");
  Bytes.equals(newKey.getRowArray(),newKey.getRowOffset(),newKey.getRowLength(),expectedArray,0,expectedArray.length);
}
