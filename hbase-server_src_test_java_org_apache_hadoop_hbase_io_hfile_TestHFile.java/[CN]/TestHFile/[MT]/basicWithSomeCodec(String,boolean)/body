{
  if (useTags) {
    conf.setInt("hfile.format.version",3);
  }
  if (cacheConf == null)   cacheConf=new CacheConfig(conf);
  Path ncHFile=new Path(ROOT_DIR,"basic.hfile." + codec.toString() + useTags);
  FSDataOutputStream fout=createFSOutput(ncHFile);
  HFileContext meta=new HFileContextBuilder().withBlockSize(minBlockSize).withCompression(HFileWriterImpl.compressionByName(codec)).build();
  Writer writer=HFile.getWriterFactory(conf,cacheConf).withOutputStream(fout).withFileContext(meta).withComparator(CellComparator.COMPARATOR).create();
  LOG.info(writer);
  writeRecords(writer,useTags);
  fout.close();
  FSDataInputStream fin=fs.open(ncHFile);
  Reader reader=HFile.createReaderFromStream(ncHFile,fs.open(ncHFile),fs.getFileStatus(ncHFile).getLen(),cacheConf,conf);
  System.out.println(cacheConf.toString());
  reader.loadFileInfo();
  HFileScanner scanner=reader.getScanner(true,false);
  scanner.seekTo();
  readAllRecords(scanner);
  int seekTo=scanner.seekTo(KeyValueUtil.createKeyValueFromKey(getSomeKey(50)));
  System.out.println(seekTo);
  assertTrue("location lookup failed",scanner.seekTo(KeyValueUtil.createKeyValueFromKey(getSomeKey(50))) == 0);
  ByteBuffer readKey=ByteBuffer.wrap(((KeyValue)scanner.getKey()).getKey());
  assertTrue("seeked key does not match",Arrays.equals(getSomeKey(50),Bytes.toBytes(readKey)));
  scanner.seekTo(KeyValueUtil.createKeyValueFromKey(getSomeKey(0)));
  ByteBuffer val1=scanner.getValue();
  scanner.seekTo(KeyValueUtil.createKeyValueFromKey(getSomeKey(0)));
  ByteBuffer val2=scanner.getValue();
  assertTrue(Arrays.equals(Bytes.toBytes(val1),Bytes.toBytes(val2)));
  reader.close();
  fin.close();
  fs.delete(ncHFile,true);
}
