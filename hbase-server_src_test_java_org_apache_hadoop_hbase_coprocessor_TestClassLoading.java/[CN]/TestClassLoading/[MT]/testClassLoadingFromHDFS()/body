{
  FileSystem fs=cluster.getFileSystem();
  File jarFile1=buildCoprocessorJar(cpName1);
  File jarFile2=buildCoprocessorJar(cpName2);
  fs.copyFromLocalFile(new Path(jarFile1.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
  String jarFileOnHDFS1=fs.getUri().toString() + Path.SEPARATOR + jarFile1.getName();
  Path pathOnHDFS1=new Path(jarFileOnHDFS1);
  assertTrue("Copy jar file to HDFS failed.",fs.exists(pathOnHDFS1));
  LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS1);
  fs.copyFromLocalFile(new Path(jarFile2.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
  String jarFileOnHDFS2=fs.getUri().toString() + Path.SEPARATOR + jarFile2.getName();
  Path pathOnHDFS2=new Path(jarFileOnHDFS2);
  assertTrue("Copy jar file to HDFS failed.",fs.exists(pathOnHDFS2));
  LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS2);
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor("test"));
  htd.setValue("COPROCESSOR$1",jarFileOnHDFS1.toString() + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER);
  htd.setValue("COPROCESSOR$2",jarFileOnHDFS2.toString() + "|" + cpName2+ "|"+ Coprocessor.PRIORITY_USER+ "|k1=v1,k2=v2,k3=v3");
  Admin admin=TEST_UTIL.getHBaseAdmin();
  if (admin.tableExists(tableName)) {
    if (admin.isTableEnabled(tableName)) {
      admin.disableTable(tableName);
    }
    admin.deleteTable(tableName);
  }
  CoprocessorClassLoader.clearCache();
  byte[] startKey={10,63};
  byte[] endKey={12,43};
  admin.createTable(htd,startKey,endKey,4);
  waitForTable(htd.getTableName());
  boolean foundTableRegion=false;
  boolean found1=true, found2=true, found2_k1=true, found2_k2=true, found2_k3=true;
  Map<HRegion,Set<ClassLoader>> regionsActiveClassLoaders=new HashMap<HRegion,Set<ClassLoader>>();
  MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
  for (  HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
    if (region.getRegionNameAsString().startsWith(tableName.getNameAsString())) {
      foundTableRegion=true;
      CoprocessorEnvironment env;
      env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName1);
      found1=found1 && (env != null);
      env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName2);
      found2=found2 && (env != null);
      if (env != null) {
        Configuration conf=env.getConfiguration();
        found2_k1=found2_k1 && (conf.get("k1") != null);
        found2_k2=found2_k2 && (conf.get("k2") != null);
        found2_k3=found2_k3 && (conf.get("k3") != null);
      }
 else {
        found2_k1=found2_k2=found2_k3=false;
      }
      regionsActiveClassLoaders.put(region,((CoprocessorHost)region.getCoprocessorHost()).getExternalClassLoaders());
    }
  }
  assertTrue("No region was found for table " + tableName,foundTableRegion);
  assertTrue("Class " + cpName1 + " was missing on a region",found1);
  assertTrue("Class " + cpName2 + " was missing on a region",found2);
  assertTrue("Configuration key 'k1' was missing on a region",found2_k1);
  assertTrue("Configuration key 'k2' was missing on a region",found2_k2);
  assertTrue("Configuration key 'k3' was missing on a region",found2_k3);
  assertNotNull(jarFileOnHDFS1 + " was not cached",CoprocessorClassLoader.getIfCached(pathOnHDFS1));
  assertNotNull(jarFileOnHDFS2 + " was not cached",CoprocessorClassLoader.getIfCached(pathOnHDFS2));
  assertEquals("The number of cached classloaders should be equal to the number" + " of external jar files",2,CoprocessorClassLoader.getAllCached().size());
  Set<ClassLoader> externalClassLoaders=new HashSet<ClassLoader>(CoprocessorClassLoader.getAllCached());
  for (  Map.Entry<HRegion,Set<ClassLoader>> regionCP : regionsActiveClassLoaders.entrySet()) {
    assertTrue("Some CP classloaders for region " + regionCP.getKey() + " are not cached."+ " ClassLoader Cache:"+ externalClassLoaders+ " Region ClassLoaders:"+ regionCP.getValue(),externalClassLoaders.containsAll(regionCP.getValue()));
  }
}
