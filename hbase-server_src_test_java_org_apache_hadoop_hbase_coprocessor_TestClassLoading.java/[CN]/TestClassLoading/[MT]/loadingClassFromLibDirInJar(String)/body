{
  FileSystem fs=cluster.getFileSystem();
  File innerJarFile1=buildCoprocessorJar(cpName1);
  File innerJarFile2=buildCoprocessorJar(cpName2);
  File outerJarFile=new File(TEST_UTIL.getDataTestDir().toString(),"outer.jar");
  ClassLoaderTestHelper.addJarFilesToJar(outerJarFile,libPrefix,innerJarFile1,innerJarFile2);
  fs.copyFromLocalFile(new Path(outerJarFile.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
  String jarFileOnHDFS=fs.getUri().toString() + Path.SEPARATOR + outerJarFile.getName();
  assertTrue("Copy jar file to HDFS failed.",fs.exists(new Path(jarFileOnHDFS)));
  LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS);
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(tableName));
  htd.addFamily(new HColumnDescriptor("test"));
  htd.setValue("COPROCESSOR$1",jarFileOnHDFS.toString() + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER);
  htd.setValue("COPROCESSOR$2",jarFileOnHDFS.toString() + "|" + cpName2+ "|"+ Coprocessor.PRIORITY_USER+ "|k1=v1,k2=v2,k3=v3");
  HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
  if (admin.tableExists(tableName)) {
    if (admin.isTableEnabled(tableName)) {
      admin.disableTable(tableName);
    }
    admin.deleteTable(tableName);
  }
  admin.createTable(htd);
  waitForTable(htd.getTableName());
  boolean found1=false, found2=false, found2_k1=false, found2_k2=false, found2_k3=false;
  MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
  for (  HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
    if (region.getRegionNameAsString().startsWith(tableName)) {
      CoprocessorEnvironment env;
      env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName1);
      if (env != null) {
        found1=true;
      }
      env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName2);
      if (env != null) {
        found2=true;
        Configuration conf=env.getConfiguration();
        found2_k1=conf.get("k1") != null;
        found2_k2=conf.get("k2") != null;
        found2_k3=conf.get("k3") != null;
      }
    }
  }
  assertTrue("Class " + cpName1 + " was missing on a region",found1);
  assertTrue("Class " + cpName2 + " was missing on a region",found2);
  assertTrue("Configuration key 'k1' was missing on a region",found2_k1);
  assertTrue("Configuration key 'k2' was missing on a region",found2_k2);
  assertTrue("Configuration key 'k3' was missing on a region",found2_k3);
}
