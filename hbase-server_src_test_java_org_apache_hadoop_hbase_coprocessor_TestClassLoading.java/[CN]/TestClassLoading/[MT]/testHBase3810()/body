{
  File jarFile1=buildCoprocessorJar(cpName1);
  File jarFile2=buildCoprocessorJar(cpName2);
  File jarFile5=buildCoprocessorJar(cpName5);
  File jarFile6=buildCoprocessorJar(cpName6);
  String cpKey1="COPROCESSOR$1";
  String cpKey2=" Coprocessor$2 ";
  String cpKey3=" coprocessor$03 ";
  String cpValue1=getLocalPath(jarFile1) + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER;
  String cpValue2=getLocalPath(jarFile2) + " | " + cpName2+ " | ";
  String cpValue3=" | org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver | | k=v ";
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(tableName));
  htd.addFamily(new HColumnDescriptor("test"));
  htd.setValue(cpKey1,cpValue1);
  htd.setValue(cpKey2,cpValue2);
  htd.setValue(cpKey3,cpValue3);
  htd.addCoprocessor(cpName5,new Path(getLocalPath(jarFile5)),Coprocessor.PRIORITY_USER,null);
  Map<String,String> kvs=new HashMap<String,String>();
  kvs.put("k1","v1");
  kvs.put("k2","v2");
  kvs.put("k3","v3");
  htd.addCoprocessor(cpName6,new Path(getLocalPath(jarFile6)),Coprocessor.PRIORITY_USER,kvs);
  HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
  if (admin.tableExists(tableName)) {
    if (admin.isTableEnabled(tableName)) {
      admin.disableTable(tableName);
    }
    admin.deleteTable(tableName);
  }
  admin.createTable(htd);
  waitForTable(htd.getTableName());
  boolean found_2=false, found_1=false, found_3=false, found_5=false, found_6=false;
  boolean found6_k1=false, found6_k2=false, found6_k3=false, found6_k4=false;
  MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
  for (  HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
    if (region.getRegionNameAsString().startsWith(tableName)) {
      found_1=found_1 || (region.getCoprocessorHost().findCoprocessor(cpName1) != null);
      found_2=found_2 || (region.getCoprocessorHost().findCoprocessor(cpName2) != null);
      found_3=found_3 || (region.getCoprocessorHost().findCoprocessor("SimpleRegionObserver") != null);
      found_5=found_5 || (region.getCoprocessorHost().findCoprocessor(cpName5) != null);
      CoprocessorEnvironment env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName6);
      if (env != null) {
        found_6=true;
        Configuration conf=env.getConfiguration();
        found6_k1=conf.get("k1") != null;
        found6_k2=conf.get("k2") != null;
        found6_k3=conf.get("k3") != null;
      }
    }
  }
  assertTrue("Class " + cpName1 + " was missing on a region",found_1);
  assertTrue("Class " + cpName2 + " was missing on a region",found_2);
  assertTrue("Class SimpleRegionObserver was missing on a region",found_3);
  assertTrue("Class " + cpName5 + " was missing on a region",found_5);
  assertTrue("Class " + cpName6 + " was missing on a region",found_6);
  assertTrue("Configuration key 'k1' was missing on a region",found6_k1);
  assertTrue("Configuration key 'k2' was missing on a region",found6_k2);
  assertTrue("Configuration key 'k3' was missing on a region",found6_k3);
  assertFalse("Configuration key 'k4' wasn't configured",found6_k4);
}
