{
  final TableName tableName=TableName.valueOf("testMergeWithReplicas");
  createTableAndLoadData(MASTER,tableName,5,2);
  List<Pair<HRegionInfo,ServerName>> initialRegionToServers=MetaTableAccessor.getTableRegionsAndLocations(TEST_UTIL.getConnection(),tableName);
  PairOfSameType<HRegionInfo> mergedRegions=mergeRegionsAndVerifyRegionNum(MASTER,tableName,0,2,5 * 2 - 2);
  List<Pair<HRegionInfo,ServerName>> currentRegionToServers=MetaTableAccessor.getTableRegionsAndLocations(TEST_UTIL.getConnection(),tableName);
  List<HRegionInfo> initialRegions=new ArrayList<HRegionInfo>();
  for (  Pair<HRegionInfo,ServerName> p : initialRegionToServers) {
    initialRegions.add(p.getFirst());
  }
  List<HRegionInfo> currentRegions=new ArrayList<HRegionInfo>();
  for (  Pair<HRegionInfo,ServerName> p : currentRegionToServers) {
    currentRegions.add(p.getFirst());
  }
  assertTrue(initialRegions.contains(mergedRegions.getFirst()));
  assertTrue(initialRegions.contains(RegionReplicaUtil.getRegionInfoForReplica(mergedRegions.getFirst(),1)));
  assertTrue(initialRegions.contains(mergedRegions.getSecond()));
  assertTrue(initialRegions.contains(RegionReplicaUtil.getRegionInfoForReplica(mergedRegions.getSecond(),1)));
  assertTrue(!initialRegions.contains(currentRegions.get(0)));
  assertTrue(!initialRegions.contains(RegionReplicaUtil.getRegionInfoForReplica(currentRegions.get(0),1)));
  assertTrue(currentRegions.contains(RegionReplicaUtil.getRegionInfoForReplica(currentRegions.get(0),1)));
  assertTrue(!currentRegions.contains(RegionReplicaUtil.getRegionInfoForReplica(mergedRegions.getFirst(),1)));
  assertTrue(!currentRegions.contains(RegionReplicaUtil.getRegionInfoForReplica(mergedRegions.getSecond(),1)));
}
