{
  LOG.info("Starting testMerge");
  final TableName tableName=TableName.valueOf("testMerge");
  final HBaseAdmin hbaseAdmin=TEST_UTIL.getHBaseAdmin();
  try {
    Table table=createTableAndLoadData(MASTER,tableName);
    RegionStates regionStates=MASTER.getAssignmentManager().getRegionStates();
    List<HRegionInfo> regions=regionStates.getRegionsOfTable(tableName);
    HRegionInfo a=regions.get(0);
    HRegionInfo b=regions.get(1);
    regionStates.regionOffline(a);
    try {
      hbaseAdmin.mergeRegionsSync(a.getEncodedNameAsBytes(),b.getEncodedNameAsBytes(),false);
      fail("Offline regions should not be able to merge");
    }
 catch (    IOException ie) {
      System.out.println(ie);
      assertTrue("Exception should mention regions not online",StringUtils.stringifyException(ie).contains("regions not online") && ie instanceof MergeRegionException);
    }
    try {
      hbaseAdmin.mergeRegionsSync(b.getEncodedNameAsBytes(),b.getEncodedNameAsBytes(),true);
      fail("A region should not be able to merge with itself, even forcifully");
    }
 catch (    IOException ie) {
      assertTrue("Exception should mention regions not online",StringUtils.stringifyException(ie).contains("region to itself") && ie instanceof MergeRegionException);
    }
    try {
      hbaseAdmin.mergeRegionsSync(Bytes.toBytes("-f1"),Bytes.toBytes("-f2"),true);
      fail("Unknown region could not be merged");
    }
 catch (    IOException ie) {
      assertTrue("UnknownRegionException should be thrown",ie instanceof UnknownRegionException);
    }
    table.close();
  }
  finally {
    TEST_UTIL.deleteTable(tableName);
  }
}
