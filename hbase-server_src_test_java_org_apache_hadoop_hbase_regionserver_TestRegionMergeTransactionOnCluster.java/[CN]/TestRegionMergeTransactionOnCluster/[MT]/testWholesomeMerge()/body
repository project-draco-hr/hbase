{
  LOG.info("Starting testWholesomeMerge");
  final TableName tableName=TableName.valueOf("testWholesomeMerge");
  HTable table=createTableAndLoadData(master,tableName);
  mergeRegionsAndVerifyRegionNum(master,tableName,0,1,INITIAL_REGION_NUM - 1);
  PairOfSameType<HRegionInfo> mergedRegions=mergeRegionsAndVerifyRegionNum(master,tableName,1,2,INITIAL_REGION_NUM - 2);
  verifyRowCount(table,ROWSIZE);
  HRegionInfo hri=RandomUtils.nextBoolean() ? mergedRegions.getFirst() : mergedRegions.getSecond();
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  AssignmentManager am=cluster.getMaster().getAssignmentManager();
  RegionStates regionStates=am.getRegionStates();
  long start=EnvironmentEdgeManager.currentTime();
  while (!regionStates.isRegionInState(hri,State.MERGED)) {
    assertFalse("Timed out in waiting one merged region to be in state MERGED",EnvironmentEdgeManager.currentTime() - start > 60000);
    Thread.sleep(500);
  }
  am.assign(hri,true);
  assertFalse("Merged region can't be assigned",regionStates.isRegionInTransition(hri));
  assertTrue(regionStates.isRegionInState(hri,State.MERGED));
  am.unassign(hri,null);
  assertFalse("Merged region can't be unassigned",regionStates.isRegionInTransition(hri));
  assertTrue(regionStates.isRegionInState(hri,State.MERGED));
  table.close();
}
