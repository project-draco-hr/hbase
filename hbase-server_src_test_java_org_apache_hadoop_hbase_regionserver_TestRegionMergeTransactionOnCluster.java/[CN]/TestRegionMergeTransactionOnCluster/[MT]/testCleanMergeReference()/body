{
  LOG.info("Starting testCleanMergeReference");
  admin.enableCatalogJanitor(false);
  try {
    final TableName tableName=TableName.valueOf("testCleanMergeReference");
    Table table=createTableAndLoadData(master,tableName);
    mergeRegionsAndVerifyRegionNum(master,tableName,0,1,INITIAL_REGION_NUM - 1);
    verifyRowCount(table,ROWSIZE);
    table.close();
    List<Pair<HRegionInfo,ServerName>> tableRegions=MetaTableAccessor.getTableRegionsAndLocations(master.getConnection(),tableName);
    HRegionInfo mergedRegionInfo=tableRegions.get(0).getFirst();
    HTableDescriptor tableDescriptor=master.getTableDescriptors().get(tableName);
    Result mergedRegionResult=MetaTableAccessor.getRegionResult(master.getConnection(),mergedRegionInfo.getRegionName());
    assertTrue(mergedRegionResult.getValue(HConstants.CATALOG_FAMILY,HConstants.MERGEA_QUALIFIER) != null);
    assertTrue(mergedRegionResult.getValue(HConstants.CATALOG_FAMILY,HConstants.MERGEB_QUALIFIER) != null);
    PairOfSameType<HRegionInfo> p=MetaTableAccessor.getMergeRegions(mergedRegionResult);
    HRegionInfo regionA=p.getFirst();
    HRegionInfo regionB=p.getSecond();
    FileSystem fs=master.getMasterFileSystem().getFileSystem();
    Path rootDir=master.getMasterFileSystem().getRootDir();
    Path tabledir=FSUtils.getTableDir(rootDir,mergedRegionInfo.getTable());
    Path regionAdir=new Path(tabledir,regionA.getEncodedName());
    Path regionBdir=new Path(tabledir,regionB.getEncodedName());
    assertTrue(fs.exists(regionAdir));
    assertTrue(fs.exists(regionBdir));
    HColumnDescriptor[] columnFamilies=tableDescriptor.getColumnFamilies();
    HRegionFileSystem hrfs=new HRegionFileSystem(TEST_UTIL.getConfiguration(),fs,tabledir,mergedRegionInfo);
    int count=0;
    for (    HColumnDescriptor colFamily : columnFamilies) {
      count+=hrfs.getStoreFiles(colFamily.getName()).size();
    }
    admin.compactRegion(mergedRegionInfo.getRegionName());
    long timeout=System.currentTimeMillis() + waitTime;
    int newcount=0;
    while (System.currentTimeMillis() < timeout) {
      for (      HColumnDescriptor colFamily : columnFamilies) {
        newcount+=hrfs.getStoreFiles(colFamily.getName()).size();
      }
      if (newcount > count) {
        break;
      }
      Thread.sleep(50);
    }
    assertTrue(newcount > count);
    List<RegionServerThread> regionServerThreads=TEST_UTIL.getHBaseCluster().getRegionServerThreads();
    for (    RegionServerThread rs : regionServerThreads) {
      CompactedHFilesDischarger cleaner=new CompactedHFilesDischarger(100,null,rs.getRegionServer(),false);
      cleaner.chore();
      Thread.sleep(1000);
    }
    while (System.currentTimeMillis() < timeout) {
      int newcount1=0;
      for (      HColumnDescriptor colFamily : columnFamilies) {
        newcount1+=hrfs.getStoreFiles(colFamily.getName()).size();
      }
      if (newcount1 <= 1) {
        break;
      }
      Thread.sleep(50);
    }
    int cleaned=0;
    while (cleaned == 0) {
      cleaned=admin.runCatalogScan();
      LOG.debug("catalog janitor returned " + cleaned);
      Thread.sleep(50);
    }
    assertFalse(regionAdir.toString(),fs.exists(regionAdir));
    assertFalse(regionBdir.toString(),fs.exists(regionBdir));
    assertTrue(cleaned > 0);
    mergedRegionResult=MetaTableAccessor.getRegionResult(master.getConnection(),mergedRegionInfo.getRegionName());
    assertFalse(mergedRegionResult.getValue(HConstants.CATALOG_FAMILY,HConstants.MERGEA_QUALIFIER) != null);
    assertFalse(mergedRegionResult.getValue(HConstants.CATALOG_FAMILY,HConstants.MERGEB_QUALIFIER) != null);
  }
  finally {
    admin.enableCatalogJanitor(true);
  }
}
