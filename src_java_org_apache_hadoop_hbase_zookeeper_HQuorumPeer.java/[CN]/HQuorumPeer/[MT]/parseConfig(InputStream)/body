{
  HBaseConfiguration conf=new HBaseConfiguration();
  Properties properties=new Properties();
  try {
    properties.load(inputStream);
  }
 catch (  IOException e) {
    String msg="fail to read properties from " + ZOOKEEPER_CONFIG_NAME;
    LOG.fatal(msg);
    throw new IOException(msg);
  }
  for (  Entry<Object,Object> entry : properties.entrySet()) {
    String value=entry.getValue().toString().trim();
    String key=entry.getKey().toString().trim();
    StringBuilder newValue=new StringBuilder();
    int varStart=value.indexOf(VARIABLE_START);
    int varEnd=0;
    while (varStart != -1) {
      varEnd=value.indexOf(VARIABLE_END,varStart);
      if (varEnd == -1) {
        String msg="variable at " + varStart + " has no end marker";
        LOG.fatal(msg);
        throw new IOException(msg);
      }
      String variable=value.substring(varStart + VARIABLE_START_LENGTH,varEnd);
      String substituteValue=System.getProperty(variable);
      if (substituteValue == null) {
        substituteValue=conf.get(variable);
      }
      if (substituteValue == null) {
        String msg="variable " + variable + " not set in system property "+ "or hbase configs";
        LOG.fatal(msg);
        throw new IOException(msg);
      }
      newValue.append(substituteValue);
      varEnd+=VARIABLE_END_LENGTH;
      varStart=value.indexOf(VARIABLE_START,varEnd);
    }
    if (key.startsWith("server.")) {
      if (conf.get(CLUSTER_DISTRIBUTED).equals(CLUSTER_IS_DISTRIBUTED) && value.startsWith("localhost")) {
        String msg="The server in zoo.cfg cannot be set to localhost " + "in a fully-distributed setup because it won't be reachable. " + "See \"Getting Started\" for more information.";
        LOG.fatal(msg);
        throw new IOException(msg);
      }
    }
    newValue.append(value.substring(varEnd));
    properties.setProperty(key,newValue.toString());
  }
  return properties;
}
