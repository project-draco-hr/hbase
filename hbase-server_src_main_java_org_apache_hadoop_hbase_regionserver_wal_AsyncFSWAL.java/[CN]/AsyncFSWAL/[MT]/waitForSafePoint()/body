{
  Future<Void> roll;
  boolean scheduleTask;
synchronized (waitingConsumePayloads) {
    if (!writerBroken && this.writer != null) {
      Promise<Void> promise=eventLoop.newPromise();
      if (consumerScheduled) {
        scheduleTask=false;
      }
 else {
        scheduleTask=consumerScheduled=true;
      }
      waitingConsumePayloads.addLast(new Payload(promise));
      roll=promise;
    }
 else {
      roll=eventLoop.newSucceededFuture(null);
      scheduleTask=false;
    }
  }
  if (scheduleTask) {
    eventLoop.execute(consumer);
  }
  roll.awaitUninterruptibly();
}
