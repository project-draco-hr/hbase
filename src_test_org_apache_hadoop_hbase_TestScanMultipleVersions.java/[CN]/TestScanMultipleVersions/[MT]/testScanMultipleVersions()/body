{
  HTable t=new HTable(conf,TABLE_NAME);
  for (int i=0; i < ROWS.length; i++) {
    for (int j=0; j < TIMESTAMPS.length; j++) {
      Cell[] cells=t.get(ROWS[i],HConstants.COLUMN_FAMILY,TIMESTAMPS[j],1);
      assertTrue(cells != null && cells.length == 1);
      System.out.println("Row=" + Bytes.toString(ROWS[i]) + ", cell="+ cells[0]);
    }
  }
  int count=0;
  Scanner s=t.getScanner(HConstants.COLUMN_FAMILY_ARRAY);
  try {
    for (RowResult rr=null; (rr=s.next()) != null; ) {
      System.out.println(rr.toString());
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  s=t.getScanner(HConstants.COLUMN_FAMILY_ARRAY,HConstants.EMPTY_START_ROW,10000L);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  s=t.getScanner(HConstants.COLUMN_FAMILY_ARRAY,HConstants.EMPTY_START_ROW,1000L);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  s=t.getScanner(HConstants.COLUMN_FAMILY_ARRAY,HConstants.EMPTY_START_ROW,500L);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
  count=0;
  s=t.getScanner(HConstants.COLUMN_FAMILY_ARRAY,HConstants.EMPTY_START_ROW,100L);
  try {
    while (s.next() != null) {
      count+=1;
    }
    assertEquals("Number of rows should be 2",2,count);
  }
  finally {
    s.close();
  }
}
