{
  LOG.info("Starting up minicluster with " + numMasters + " master(s) and "+ numSlaves+ " regionserver(s) and datanode(s)");
  String testBuildPath=conf.get(TEST_DIRECTORY_KEY,null);
  isRunningCluster(testBuildPath);
  if (testBuildPath != null) {
    LOG.info("Using passed path: " + testBuildPath);
  }
  this.clusterTestBuildDir=testBuildPath == null ? setupClusterTestBuildDir() : new File(testBuildPath);
  System.setProperty(TEST_DIRECTORY_KEY,this.clusterTestBuildDir.getPath());
  startMiniDFSCluster(numSlaves,this.clusterTestBuildDir);
  FileSystem fs=this.dfsCluster.getFileSystem();
  this.conf.set("fs.defaultFS",fs.getUri().toString());
  this.conf.set("fs.default.name",fs.getUri().toString());
  this.dfsCluster.waitClusterUp();
  if (this.zkCluster == null) {
    startMiniZKCluster(this.clusterTestBuildDir);
  }
  Path hbaseRootdir=fs.makeQualified(fs.getHomeDirectory());
  this.conf.set(HConstants.HBASE_DIR,hbaseRootdir.toString());
  fs.mkdirs(hbaseRootdir);
  FSUtils.setVersion(fs,hbaseRootdir);
  this.hbaseCluster=new MiniHBaseCluster(this.conf,numMasters,numSlaves);
  HTable t=new HTable(this.conf,HConstants.META_TABLE_NAME);
  ResultScanner s=t.getScanner(new Scan());
  while (s.next() != null) {
    continue;
  }
  LOG.info("Minicluster is up");
  return this.hbaseCluster;
}
