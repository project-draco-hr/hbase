{
  final long ANY_PAUSE=1000;
  HRegionInfo ri=new HRegionInfo(TABLE_NAME);
  HRegionLocation location=new HRegionLocation(ri,new ServerName("127.0.0.1",1,0));
  HRegionLocation diffLocation=new HRegionLocation(ri,new ServerName("127.0.0.1",2,0));
  ManualEnvironmentEdge timeMachine=new ManualEnvironmentEdge();
  EnvironmentEdgeManager.injectEdge(timeMachine);
  try {
    long timeBase=timeMachine.currentTimeMillis();
    long largeAmountOfTime=ANY_PAUSE * 1000;
    HConnectionImplementation.ServerErrorTracker tracker=new HConnectionImplementation.ServerErrorTracker(largeAmountOfTime);
    assertEquals(0,tracker.calculateBackoffTime(location,ANY_PAUSE));
    tracker.reportServerError(location);
    assertEqualsWithJitter(ANY_PAUSE,tracker.calculateBackoffTime(location,ANY_PAUSE));
    tracker.reportServerError(location);
    tracker.reportServerError(location);
    tracker.reportServerError(location);
    assertEqualsWithJitter(ANY_PAUSE * 2,tracker.calculateBackoffTime(location,ANY_PAUSE));
    assertEquals(0,tracker.calculateBackoffTime(diffLocation,ANY_PAUSE));
    tracker.reportServerError(diffLocation);
    assertEqualsWithJitter(ANY_PAUSE,tracker.calculateBackoffTime(diffLocation,ANY_PAUSE));
    HRegionInfo ri2=new HRegionInfo(TABLE_NAME2);
    HRegionLocation diffRegion=new HRegionLocation(ri2,location.getServerName());
    assertEqualsWithJitter(ANY_PAUSE * 2,tracker.calculateBackoffTime(diffRegion,ANY_PAUSE));
    assertEqualsWithJitter(ANY_PAUSE * 4,tracker.calculateBackoffTime(location,ANY_PAUSE * 2));
    long timeShift=(long)(ANY_PAUSE * 0.5);
    timeMachine.setValue(timeBase + timeShift);
    assertEqualsWithJitter(ANY_PAUSE * 2 - timeShift,tracker.calculateBackoffTime(location,ANY_PAUSE),ANY_PAUSE * 2);
    timeMachine.setValue(timeBase + ANY_PAUSE * 100);
    assertEquals(0,tracker.calculateBackoffTime(location,ANY_PAUSE));
    long timeLeft=(long)(ANY_PAUSE * 0.5);
    timeMachine.setValue(timeBase + largeAmountOfTime - timeLeft);
    assertTrue(tracker.canRetryMore());
    tracker.reportServerError(location);
    assertEquals(timeLeft,tracker.calculateBackoffTime(location,ANY_PAUSE));
    timeMachine.setValue(timeBase + largeAmountOfTime);
    assertFalse(tracker.canRetryMore());
  }
  finally {
    EnvironmentEdgeManager.reset();
  }
}
