{
  final long ANY_PAUSE=100;
  ServerName location=ServerName.valueOf("127.0.0.1",1,0);
  ServerName diffLocation=ServerName.valueOf("127.0.0.1",2,0);
  ManualEnvironmentEdge timeMachine=new ManualEnvironmentEdge();
  EnvironmentEdgeManager.injectEdge(timeMachine);
  try {
    long timeBase=timeMachine.currentTime();
    long largeAmountOfTime=ANY_PAUSE * 1000;
    ConnectionImplementation.ServerErrorTracker tracker=new ConnectionImplementation.ServerErrorTracker(largeAmountOfTime,100);
    assertEquals(0,tracker.calculateBackoffTime(location,ANY_PAUSE));
    tracker.reportServerError(location);
    assertEqualsWithJitter(ANY_PAUSE,tracker.calculateBackoffTime(location,ANY_PAUSE));
    tracker.reportServerError(location);
    tracker.reportServerError(location);
    tracker.reportServerError(location);
    assertEqualsWithJitter(ANY_PAUSE * 5,tracker.calculateBackoffTime(location,ANY_PAUSE));
    assertEquals(0,tracker.calculateBackoffTime(diffLocation,ANY_PAUSE));
    tracker.reportServerError(diffLocation);
    assertEqualsWithJitter(ANY_PAUSE,tracker.calculateBackoffTime(diffLocation,ANY_PAUSE));
    assertEqualsWithJitter(ANY_PAUSE * 10,tracker.calculateBackoffTime(location,ANY_PAUSE * 2));
    long timeShift=(long)(ANY_PAUSE * 0.5);
    timeMachine.setValue(timeBase + timeShift);
    assertEqualsWithJitter((ANY_PAUSE * 5) - timeShift,tracker.calculateBackoffTime(location,ANY_PAUSE),ANY_PAUSE * 2);
    timeMachine.setValue(timeBase + ANY_PAUSE * 100);
    assertEquals(0,tracker.calculateBackoffTime(location,ANY_PAUSE));
    long timeLeft=(long)(ANY_PAUSE * 0.5);
    timeMachine.setValue(timeBase + largeAmountOfTime - timeLeft);
    assertTrue(tracker.canRetryMore(1));
    tracker.reportServerError(location);
    assertEquals(timeLeft,tracker.calculateBackoffTime(location,ANY_PAUSE));
    timeMachine.setValue(timeBase + largeAmountOfTime);
    assertFalse(tracker.canRetryMore(1));
  }
  finally {
    EnvironmentEdgeManager.reset();
  }
}
