{
  HTable table=TEST_UTIL.createTable(TABLE_NAME,FAM_NAM);
  TEST_UTIL.createMultiRegions(table,FAM_NAM);
  Put put=new Put(ROW);
  put.add(FAM_NAM,ROW,ROW);
  table.put(put);
  HConnectionManager.HConnectionImplementation conn=(HConnectionManager.HConnectionImplementation)table.getConnection();
  assertNotNull(conn.getCachedLocation(TABLE_NAME,ROW));
  assertNotNull(conn.getCachedLocation(TABLE_NAME.clone(),ROW.clone()));
  assertNotNull(conn.getCachedLocation(Bytes.toString(TABLE_NAME).getBytes(),Bytes.toString(ROW).getBytes()));
  final int nextPort=conn.getCachedLocation(TABLE_NAME,ROW).getPort() + 1;
  HRegionLocation loc=conn.getCachedLocation(TABLE_NAME,ROW);
  conn.updateCachedLocation(loc.getRegionInfo(),loc,"127.0.0.1",nextPort,HConstants.LATEST_TIMESTAMP);
  Assert.assertEquals(conn.getCachedLocation(TABLE_NAME,ROW).getPort(),nextPort);
  conn.deleteCachedLocation(TABLE_NAME.clone(),ROW.clone());
  HRegionLocation rl=conn.getCachedLocation(TABLE_NAME,ROW);
  assertNull("What is this location?? " + rl,rl);
  conn.clearRegionCache(TABLE_NAME);
  Assert.assertEquals(0,conn.getNumberOfCachedRegionLocations(TABLE_NAME));
  Put put2=new Put(ROW);
  put2.add(FAM_NAM,ROW,ROW);
  table.put(put2);
  assertNotNull(conn.getCachedLocation(TABLE_NAME,ROW));
  TEST_UTIL.getHBaseAdmin().setBalancerRunning(false,false);
  HMaster master=TEST_UTIL.getMiniHBaseCluster().getMaster();
  while (master.getAssignmentManager().getRegionStates().isRegionsInTransition()) {
    Thread.sleep(1);
  }
  HRegionLocation toMove=conn.getCachedLocation(TABLE_NAME,ROW);
  byte[] regionName=toMove.getRegionInfo().getRegionName();
  byte[] encodedRegionNameBytes=toMove.getRegionInfo().getEncodedNameAsBytes();
  int curServerId=TEST_UTIL.getHBaseCluster().getServerWith(regionName);
  int destServerId=(curServerId == 0 ? 1 : 0);
  HRegionServer curServer=TEST_UTIL.getHBaseCluster().getRegionServer(curServerId);
  HRegionServer destServer=TEST_UTIL.getHBaseCluster().getRegionServer(destServerId);
  ServerName destServerName=destServer.getServerName();
  Assert.assertTrue(curServer != destServer);
  Assert.assertFalse(curServer.getServerName().equals(destServer.getServerName()));
  Assert.assertFalse(toMove.getPort() == destServerName.getPort());
  Assert.assertNotNull(curServer.getOnlineRegion(regionName));
  Assert.assertNull(destServer.getOnlineRegion(regionName));
  Assert.assertFalse(TEST_UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionStates().isRegionsInTransition());
  LOG.info("Move starting region=" + toMove.getRegionInfo().getRegionNameAsString());
  TEST_UTIL.getHBaseAdmin().move(toMove.getRegionInfo().getEncodedNameAsBytes(),destServerName.getServerName().getBytes());
  while (destServer.getOnlineRegion(regionName) == null || destServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes) || curServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes) || master.getAssignmentManager().getRegionStates().isRegionsInTransition()) {
    Thread.sleep(1);
  }
  LOG.info("Move finished for region=" + toMove.getRegionInfo().getRegionNameAsString());
  Assert.assertNull(curServer.getOnlineRegion(regionName));
  Assert.assertNotNull(destServer.getOnlineRegion(regionName));
  Assert.assertFalse(destServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes));
  Assert.assertFalse(curServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes));
  Assert.assertFalse(conn.getCachedLocation(TABLE_NAME,ROW).getPort() == destServerName.getPort());
  Field numRetries=conn.getClass().getDeclaredField("numRetries");
  numRetries.setAccessible(true);
  Field modifiersField=Field.class.getDeclaredField("modifiers");
  modifiersField.setAccessible(true);
  modifiersField.setInt(numRetries,numRetries.getModifiers() & ~Modifier.FINAL);
  final int prevNumRetriesVal=(Integer)numRetries.get(conn);
  numRetries.set(conn,1);
  LOG.info("Put starting");
  Put put3=new Put(ROW);
  put3.add(FAM_NAM,ROW,ROW);
  try {
    table.put(put3);
    Assert.assertFalse("Unreachable point",true);
  }
 catch (  Throwable e) {
    LOG.info("Put done, exception caught: " + e.getClass());
    Assert.assertTrue(e instanceof RetriesExhaustedWithDetailsException);
    RetriesExhaustedWithDetailsException re=(RetriesExhaustedWithDetailsException)e;
    Assert.assertTrue(re.getNumExceptions() == 1);
    Assert.assertTrue(Arrays.equals(re.getRow(0).getRow(),ROW));
  }
  Assert.assertNotNull(conn.getCachedLocation(TABLE_NAME,ROW));
  Assert.assertEquals("Previous server was " + curServer.getServerName().getHostAndPort(),destServerName.getPort(),conn.getCachedLocation(TABLE_NAME,ROW).getPort());
  Assert.assertFalse(destServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes));
  Assert.assertFalse(curServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes));
  LOG.info("Move starting region=" + toMove.getRegionInfo().getRegionNameAsString());
  TEST_UTIL.getHBaseAdmin().move(toMove.getRegionInfo().getEncodedNameAsBytes(),curServer.getServerName().getServerName().getBytes());
  while (curServer.getOnlineRegion(regionName) == null || destServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes) || curServer.getRegionsInTransitionInRS().containsKey(encodedRegionNameBytes) || master.getAssignmentManager().getRegionStates().isRegionsInTransition()) {
    Thread.sleep(1);
  }
  Assert.assertNotNull(curServer.getOnlineRegion(regionName));
  Assert.assertNull(destServer.getOnlineRegion(regionName));
  LOG.info("Move finished for region=" + toMove.getRegionInfo().getRegionNameAsString());
  Assert.assertFalse(conn.getCachedLocation(TABLE_NAME,ROW).getPort() == curServer.getServerName().getPort());
  Scan sc=new Scan();
  sc.setStopRow(ROW);
  sc.setStopRow(ROW);
  try {
    ResultScanner rs=table.getScanner(sc);
    while (rs.next() != null) {
    }
    Assert.assertFalse("Unreachable point",true);
  }
 catch (  Throwable e) {
    LOG.info("Scan done, expected exception caught: " + e.getClass());
  }
  Assert.assertNotNull(conn.getCachedLocation(TABLE_NAME,ROW));
  Assert.assertEquals("Previous server was " + destServer.getServerName().getHostAndPort(),curServer.getServerName().getPort(),conn.getCachedLocation(TABLE_NAME,ROW).getPort());
  numRetries.set(conn,prevNumRetriesVal);
  table.close();
}
