{
  if (!isJavaOk) {
    return;
  }
  String tableName="HCM-testConnectionCut";
  TEST_UTIL.createTable(tableName.getBytes(),FAM_NAM).close();
  boolean previousBalance=TEST_UTIL.getHBaseAdmin().setBalancerRunning(false,true);
  Configuration c2=new Configuration(TEST_UTIL.getConfiguration());
  c2.set(HConstants.HBASE_CLIENT_INSTANCE_ID,String.valueOf(-1));
  c2.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,1);
  c2.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY,30 * 1000);
  HTable table=new HTable(c2,tableName);
  Put p=new Put(FAM_NAM);
  p.add(FAM_NAM,FAM_NAM,FAM_NAM);
  table.put(p);
  final HConnectionImplementation hci=(HConnectionImplementation)table.getConnection();
  final HRegionLocation loc=table.getRegionLocation(FAM_NAM);
  Get get=new Get(FAM_NAM);
  Assert.assertNotNull(table.get(get));
  get=new Get(FAM_NAM);
  get.setFilter(new BlockingFilter());
  Thread t=new Thread(){
    @Override public void run(){
synchronized (syncBlockingFilter) {
        try {
          syncBlockingFilter.wait();
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
      hci.clusterStatusListener.deadServerHandler.newDead(loc.getServerName());
    }
  }
;
  t.start();
  try {
    table.get(get);
    Assert.fail();
  }
 catch (  IOException expected) {
    LOG.debug("Received: " + expected);
    Assert.assertFalse(expected instanceof SocketTimeoutException);
    Assert.assertFalse(syncBlockingFilter.get());
  }
 finally {
    syncBlockingFilter.set(true);
    t.join();
    HConnectionManager.getConnection(c2).close();
    TEST_UTIL.getHBaseAdmin().setBalancerRunning(previousBalance,true);
  }
  table.close();
}
