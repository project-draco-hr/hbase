{
  TEST_UTIL.createTable(TABLE_NAME4,FAM_NAM);
  final Configuration config=TEST_UTIL.getConfiguration();
  ThreadPoolExecutor pool=new ThreadPoolExecutor(1,10,5,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),Threads.newDaemonThreadFactory("test-hcm-delete"));
  pool.submit(new Runnable(){
    @Override public void run(){
      while (!Thread.interrupted()) {
        try {
          HConnection conn=HConnectionManager.getConnection(config);
          HConnectionManager.deleteStaleConnection(conn);
        }
 catch (        Exception e) {
        }
      }
    }
  }
);
  for (int i=0; i < 50; i++) {
    HConnection c1=null;
    try {
      c1=HConnectionManager.getConnection(config);
      HTable table=new HTable(TABLE_NAME4,c1,pool);
      table.close();
    }
 catch (    Exception e) {
    }
 finally {
      if (c1 != null) {
        if (c1.isClosed()) {
          Field zkwField=c1.getClass().getDeclaredField("keepAliveZookeeper");
          zkwField.setAccessible(true);
          Object watcher=zkwField.get(c1);
          if (watcher != null) {
            if (((ZooKeeperWatcher)watcher).getRecoverableZooKeeper().getState().isAlive()) {
              pool.shutdownNow();
              fail("Live zookeeper in closed connection");
            }
          }
        }
        c1.close();
      }
    }
  }
  pool.shutdownNow();
}
