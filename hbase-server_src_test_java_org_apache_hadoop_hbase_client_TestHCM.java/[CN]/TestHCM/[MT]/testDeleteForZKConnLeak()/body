{
  TEST_UTIL.createTable(TABLE_NAME4,FAM_NAM);
  final Configuration config=HBaseConfiguration.create(TEST_UTIL.getConfiguration());
  config.setInt("zookeeper.recovery.retry",1);
  config.setInt("zookeeper.recovery.retry.intervalmill",1000);
  config.setInt("hbase.rpc.timeout",2000);
  config.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,1);
  ThreadPoolExecutor pool=new ThreadPoolExecutor(1,10,5,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),Threads.newDaemonThreadFactory("test-hcm-delete"));
  pool.submit(new Runnable(){
    @Override public void run(){
      while (!Thread.interrupted()) {
        try {
          HConnection conn=HConnectionManager.getConnection(config);
          LOG.info("Connection " + conn);
          HConnectionManager.deleteStaleConnection(conn);
          LOG.info("Connection closed " + conn);
          Threads.sleep(10);
        }
 catch (        Exception e) {
        }
      }
    }
  }
);
  for (int i=0; i < 30; i++) {
    Connection c1=null;
    try {
      c1=ConnectionManager.getConnectionInternal(config);
      LOG.info("HTable connection " + i + " "+ c1);
      Table table=new HTable(config,TABLE_NAME4,pool);
      table.close();
      LOG.info("HTable connection " + i + " closed "+ c1);
    }
 catch (    Exception e) {
      LOG.info("We actually want this to happen!!!!  So we can see if we are leaking zk",e);
    }
 finally {
      if (c1 != null) {
        if (c1.isClosed()) {
          Field zkwField=c1.getClass().getDeclaredField("keepAliveZookeeper");
          zkwField.setAccessible(true);
          Object watcher=zkwField.get(c1);
          if (watcher != null) {
            if (((ZooKeeperWatcher)watcher).getRecoverableZooKeeper().getState().isAlive()) {
              Thread.sleep(1000);
              if (((ZooKeeperWatcher)watcher).getRecoverableZooKeeper().getState().isAlive()) {
                pool.shutdownNow();
                fail("Live zookeeper in closed connection");
              }
            }
          }
        }
        c1.close();
      }
    }
  }
  pool.shutdownNow();
}
