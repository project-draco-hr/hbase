{
  Configuration conf=UTIL.getConfiguration();
  User george=User.createUserForTesting(conf,"george",new String[]{});
  User hubert=User.createUserForTesting(conf,"hubert",new String[]{});
  assertFalse(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertFalse(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
  List<TablePermission> acl=new ArrayList<TablePermission>();
  acl.add(new TablePermission(TEST_TABLE,null,TablePermission.Action.READ,TablePermission.Action.WRITE));
  final long mtimeB=AUTH_B.getMTime();
  AUTH_A.setTableUserPermissions(george.getShortName(),TEST_TABLE,acl);
  UTIL.waitFor(10000,100,new Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return AUTH_B.getMTime() > mtimeB;
    }
  }
);
  Thread.sleep(1000);
  assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
  assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
  assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
  acl=new ArrayList<TablePermission>();
  acl.add(new TablePermission(TEST_TABLE,null,TablePermission.Action.READ));
  final long mtimeA=AUTH_A.getMTime();
  AUTH_B.setTableUserPermissions("hubert",TEST_TABLE,acl);
  UTIL.waitFor(10000,100,new Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return AUTH_A.getMTime() > mtimeA;
    }
  }
);
  Thread.sleep(1000);
  assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
  assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
  assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertTrue(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
  assertTrue(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
  assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
}
