{
  List<String> list=new ArrayList<>();
  list.add("1," + columnFamilyStr + ",a,1");
  list.add("2," + columnFamilyStr + ",a,2");
  list.add("3," + columnFamilyStr + ",a,3");
  list.add("4," + columnFamilyStr + ",a,4");
  list.add("5," + columnFamilyStr + ",a,5");
  JavaRDD<String> rdd=jsc.parallelize(list);
  Configuration conf=htu.getConfiguration();
  JavaHBaseContext hbaseContext=new JavaHBaseContext(jsc,conf);
  Connection conn=ConnectionFactory.createConnection(conf);
  Table table=conn.getTable(TableName.valueOf(tableName));
  try {
    List<Delete> deletes=new ArrayList<>();
    for (int i=1; i < 6; i++) {
      deletes.add(new Delete(Bytes.toBytes(Integer.toString(i))));
    }
    table.delete(deletes);
  }
  finally {
    table.close();
  }
  hbaseContext.bulkPut(rdd,TableName.valueOf(tableName),new PutFunction());
  table=conn.getTable(TableName.valueOf(tableName));
  try {
    Result result1=table.get(new Get(Bytes.toBytes("1")));
    Assert.assertNotNull("Row 1 should had been deleted",result1.getRow());
    Result result2=table.get(new Get(Bytes.toBytes("2")));
    Assert.assertNotNull("Row 2 should had been deleted",result2.getRow());
    Result result3=table.get(new Get(Bytes.toBytes("3")));
    Assert.assertNotNull("Row 3 should had been deleted",result3.getRow());
    Result result4=table.get(new Get(Bytes.toBytes("4")));
    Assert.assertNotNull("Row 4 should had been deleted",result4.getRow());
    Result result5=table.get(new Get(Bytes.toBytes("5")));
    Assert.assertNotNull("Row 5 should had been deleted",result5.getRow());
  }
  finally {
    table.close();
    conn.close();
  }
}
