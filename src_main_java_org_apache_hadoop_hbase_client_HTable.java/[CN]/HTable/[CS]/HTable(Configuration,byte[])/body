{
  this.tableName=tableName;
  if (conf == null) {
    this.scannerTimeout=0;
    this.connection=null;
    return;
  }
  this.connection=HConnectionManager.getConnection(conf);
  this.scannerTimeout=(int)conf.getLong(HConstants.HBASE_REGIONSERVER_LEASE_PERIOD_KEY,HConstants.DEFAULT_HBASE_REGIONSERVER_LEASE_PERIOD);
  this.configuration=conf;
  this.connection.locateRegion(tableName,HConstants.EMPTY_START_ROW);
  this.writeBufferSize=conf.getLong("hbase.client.write.buffer",2097152);
  this.autoFlush=true;
  this.currentWriteBufferSize=0;
  this.scannerCaching=conf.getInt("hbase.client.scanner.caching",1);
  this.maxScannerResultSize=conf.getLong(HConstants.HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY,HConstants.DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE);
  this.maxKeyValueSize=conf.getInt("hbase.client.keyvalue.maxsize",-1);
  int nrThreads=conf.getInt("hbase.htable.threads.max",getCurrentNrHRS());
  if (nrThreads == 0) {
    nrThreads=1;
  }
  this.pool=new ThreadPoolExecutor(nrThreads,nrThreads,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new DaemonThreadFactory());
  ((ThreadPoolExecutor)this.pool).allowCoreThreadTimeOut(true);
}
