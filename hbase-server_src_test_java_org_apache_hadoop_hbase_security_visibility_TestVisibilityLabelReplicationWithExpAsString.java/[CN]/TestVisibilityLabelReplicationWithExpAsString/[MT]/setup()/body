{
  expected[0]=4;
  expected[1]=6;
  expected[2]=4;
  expected[3]=0;
  expected[3]=3;
  expectedVisString[0]="(\"public\"&\"secret\"&\"topsecret\")|(\"confidential\"&\"topsecret\")";
  expectedVisString[1]="(\"private\"&\"public\")|(\"private\"&\"topsecret\")|" + "(\"confidential\"&\"public\")|(\"confidential\"&\"topsecret\")";
  expectedVisString[2]="(!\"topsecret\"&\"secret\")|(!\"topsecret\"&\"confidential\")";
  expectedVisString[3]="(\"secret\"&\"" + COPYRIGHT + "\\\""+ ACCENT+ "\\\\"+ SECRET+ "\\\""+ "\u0027&\\\\"+ "\")";
  conf=HBaseConfiguration.create();
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,false);
  conf.setBoolean("hbase.online.schema.update.enable",true);
  conf.setInt("hfile.format.version",3);
  conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/1");
  conf.setInt("replication.source.size.capacity",10240);
  conf.setLong("replication.source.sleepforretries",100);
  conf.setInt("hbase.regionserver.maxlogs",10);
  conf.setLong("hbase.master.logcleaner.ttl",10);
  conf.setInt("zookeeper.recovery.retry",1);
  conf.setInt("zookeeper.recovery.retry.intervalmill",10);
  conf.setBoolean("dfs.support.append",true);
  conf.setLong(HConstants.THREAD_WAKE_FREQUENCY,100);
  conf.setInt("replication.stats.thread.period.seconds",5);
  conf.setBoolean("hbase.tests.use.shortcircuit.reads",false);
  setVisibilityLabelServiceImpl(conf,ExpAsStringVisibilityLabelServiceImpl.class);
  conf.setBoolean(HConstants.REPLICATION_ENABLE_KEY,HConstants.REPLICATION_ENABLE_DEFAULT);
  conf.setStrings(HConstants.REPLICATION_CODEC_CONF_KEY,KeyValueCodecWithTags.class.getName());
  VisibilityTestUtil.enableVisiblityLabels(conf);
  conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,VisibilityReplication.class.getName());
  conf.setStrings(CoprocessorHost.USER_REGION_COPROCESSOR_CONF_KEY,SimpleCP.class.getName());
  conf.setClass(VisibilityUtils.VISIBILITY_LABEL_GENERATOR_CLASS,SimpleScanLabelGenerator.class,ScanLabelGenerator.class);
  conf.set("hbase.superuser","admin");
  conf.set("hbase.superuser",User.getCurrent().getShortName());
  SUPERUSER=User.createUserForTesting(conf,User.getCurrent().getShortName(),new String[]{"supergroup"});
  User.createUserForTesting(conf,User.getCurrent().getShortName(),new String[]{"supergroup"});
  USER1=User.createUserForTesting(conf,"user1",new String[]{});
  TEST_UTIL=new HBaseTestingUtility(conf);
  TEST_UTIL.startMiniZKCluster();
  MiniZooKeeperCluster miniZK=TEST_UTIL.getZkCluster();
  zkw1=new ZooKeeperWatcher(conf,"cluster1",null,true);
  replicationAdmin=new ReplicationAdmin(conf);
  conf1=HBaseConfiguration.create(conf);
  conf1.setInt("hfile.format.version",3);
  conf1.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/2");
  conf1.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,6);
  conf1.setBoolean("dfs.support.append",true);
  conf1.setBoolean("hbase.tests.use.shortcircuit.reads",false);
  conf.setBoolean(HConstants.REPLICATION_ENABLE_KEY,HConstants.REPLICATION_ENABLE_DEFAULT);
  conf1.setStrings(HConstants.REPLICATION_CODEC_CONF_KEY,KeyValueCodecWithTags.class.getName());
  conf1.setStrings(CoprocessorHost.USER_REGION_COPROCESSOR_CONF_KEY,TestCoprocessorForTagsAtSink.class.getName());
  setVisibilityLabelServiceImpl(conf1,ExpAsStringVisibilityLabelServiceImpl.class);
  TEST_UTIL1=new HBaseTestingUtility(conf1);
  TEST_UTIL1.setZkCluster(miniZK);
  zkw2=new ZooKeeperWatcher(conf1,"cluster2",null,true);
  replicationAdmin.addPeer("2",TEST_UTIL1.getClusterKey());
  TEST_UTIL.startMiniCluster(1);
  TEST_UTIL.waitTableEnabled(LABELS_TABLE_NAME.getName(),50000);
  TEST_UTIL1.startMiniCluster(1);
  HBaseAdmin hBaseAdmin=TEST_UTIL.getHBaseAdmin();
  HTableDescriptor table=new HTableDescriptor(TableName.valueOf(TABLE_NAME));
  HColumnDescriptor desc=new HColumnDescriptor(fam);
  desc.setScope(HConstants.REPLICATION_SCOPE_GLOBAL);
  table.addFamily(desc);
  try {
    hBaseAdmin.createTable(table);
  }
  finally {
    if (hBaseAdmin != null) {
      hBaseAdmin.close();
    }
  }
  HBaseAdmin hBaseAdmin1=TEST_UTIL1.getHBaseAdmin();
  try {
    hBaseAdmin1.createTable(table);
  }
  finally {
    if (hBaseAdmin1 != null) {
      hBaseAdmin1.close();
    }
  }
  addLabels();
  setAuths(conf);
  setAuths(conf1);
}
