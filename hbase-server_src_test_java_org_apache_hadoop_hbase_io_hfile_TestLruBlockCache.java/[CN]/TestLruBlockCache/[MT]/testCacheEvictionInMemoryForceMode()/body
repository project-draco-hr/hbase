{
  long maxSize=100000;
  long blockSize=calculateBlockSize(maxSize,10);
  LruBlockCache cache=new LruBlockCache(maxSize,blockSize,false,(int)Math.ceil(1.2 * maxSize / blockSize),LruBlockCache.DEFAULT_LOAD_FACTOR,LruBlockCache.DEFAULT_CONCURRENCY_LEVEL,0.98f,0.99f,0.2f,0.3f,0.5f,true);
  CachedItem[] singleBlocks=generateFixedBlocks(10,blockSize,"single");
  CachedItem[] multiBlocks=generateFixedBlocks(10,blockSize,"multi");
  CachedItem[] memoryBlocks=generateFixedBlocks(10,blockSize,"memory");
  long expectedCacheSize=cache.heapSize();
  for (int i=0; i < 4; i++) {
    cache.cacheBlock(singleBlocks[i].cacheKey,singleBlocks[i]);
    expectedCacheSize+=singleBlocks[i].cacheBlockHeapSize();
    cache.cacheBlock(multiBlocks[i].cacheKey,multiBlocks[i]);
    expectedCacheSize+=multiBlocks[i].cacheBlockHeapSize();
    cache.getBlock(multiBlocks[i].cacheKey,true,false,true);
  }
  cache.cacheBlock(singleBlocks[4].cacheKey,singleBlocks[4]);
  expectedCacheSize+=singleBlocks[4].cacheBlockHeapSize();
  assertEquals(0,cache.getStats().getEvictionCount());
  assertEquals(expectedCacheSize,cache.heapSize());
  cache.cacheBlock(memoryBlocks[0].cacheKey,memoryBlocks[0],true);
  assertEquals(1,cache.getStats().getEvictionCount());
  assertEquals(1,cache.getStats().getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[0].cacheKey,true,false,true));
  cache.cacheBlock(memoryBlocks[1].cacheKey,memoryBlocks[1],true);
  assertEquals(2,cache.getStats().getEvictionCount());
  assertEquals(2,cache.getStats().getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[1].cacheKey,true,false,true));
  cache.cacheBlock(memoryBlocks[2].cacheKey,memoryBlocks[2],true);
  cache.cacheBlock(memoryBlocks[3].cacheKey,memoryBlocks[3],true);
  cache.cacheBlock(memoryBlocks[4].cacheKey,memoryBlocks[4],true);
  cache.cacheBlock(memoryBlocks[5].cacheKey,memoryBlocks[5],true);
  assertEquals(6,cache.getStats().getEvictionCount());
  assertEquals(6,cache.getStats().getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[2].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(singleBlocks[3].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(multiBlocks[0].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(multiBlocks[1].cacheKey,true,false,true));
  cache.cacheBlock(memoryBlocks[6].cacheKey,memoryBlocks[6],true);
  cache.cacheBlock(memoryBlocks[7].cacheKey,memoryBlocks[7],true);
  cache.cacheBlock(memoryBlocks[8].cacheKey,memoryBlocks[8],true);
  assertEquals(9,cache.getStats().getEvictionCount());
  assertEquals(9,cache.getStats().getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[4].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(multiBlocks[2].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(multiBlocks[3].cacheKey,true,false,true));
  cache.cacheBlock(memoryBlocks[9].cacheKey,memoryBlocks[9],true);
  assertEquals(10,cache.getStats().getEvictionCount());
  assertEquals(10,cache.getStats().getEvictedCount());
  assertEquals(null,cache.getBlock(memoryBlocks[0].cacheKey,true,false,true));
  cache.cacheBlock(singleBlocks[9].cacheKey,singleBlocks[9]);
  assertEquals(11,cache.getStats().getEvictionCount());
  assertEquals(11,cache.getStats().getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[9].cacheKey,true,false,true));
}
