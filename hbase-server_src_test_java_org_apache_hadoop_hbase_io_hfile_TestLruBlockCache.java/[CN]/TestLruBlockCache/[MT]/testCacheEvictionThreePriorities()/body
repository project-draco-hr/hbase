{
  long maxSize=100000;
  long blockSize=calculateBlockSize(maxSize,10);
  LruBlockCache cache=new LruBlockCache(maxSize,blockSize,false,(int)Math.ceil(1.2 * maxSize / blockSize),LruBlockCache.DEFAULT_LOAD_FACTOR,LruBlockCache.DEFAULT_CONCURRENCY_LEVEL,0.98f,0.99f,0.33f,0.33f,0.34f,false);
  CachedItem[] singleBlocks=generateFixedBlocks(5,blockSize,"single");
  CachedItem[] multiBlocks=generateFixedBlocks(5,blockSize,"multi");
  CachedItem[] memoryBlocks=generateFixedBlocks(5,blockSize,"memory");
  long expectedCacheSize=cache.heapSize();
  for (int i=0; i < 3; i++) {
    cache.cacheBlock(singleBlocks[i].cacheKey,singleBlocks[i]);
    expectedCacheSize+=singleBlocks[i].cacheBlockHeapSize();
    cache.cacheBlock(multiBlocks[i].cacheKey,multiBlocks[i]);
    expectedCacheSize+=multiBlocks[i].cacheBlockHeapSize();
    cache.getBlock(multiBlocks[i].cacheKey,true,false,true);
    cache.cacheBlock(memoryBlocks[i].cacheKey,memoryBlocks[i],true);
    expectedCacheSize+=memoryBlocks[i].cacheBlockHeapSize();
  }
  assertEquals(0,cache.getEvictionCount());
  assertEquals(expectedCacheSize,cache.heapSize());
  cache.cacheBlock(singleBlocks[3].cacheKey,singleBlocks[3]);
  assertEquals(1,cache.getEvictionCount());
  assertEquals(1,cache.getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[0].cacheKey,true,false,true));
  cache.getBlock(singleBlocks[1].cacheKey,true,false,true);
  cache.cacheBlock(singleBlocks[4].cacheKey,singleBlocks[4]);
  assertEquals(2,cache.getEvictionCount());
  assertEquals(2,cache.getEvictedCount());
  assertEquals(null,cache.getBlock(multiBlocks[0].cacheKey,true,false,true));
  cache.cacheBlock(memoryBlocks[3].cacheKey,memoryBlocks[3],true);
  assertEquals(3,cache.getEvictionCount());
  assertEquals(3,cache.getEvictedCount());
  assertEquals(null,cache.getBlock(memoryBlocks[0].cacheKey,true,false,true));
  CachedItem[] bigBlocks=generateFixedBlocks(3,blockSize * 3,"big");
  cache.cacheBlock(bigBlocks[0].cacheKey,bigBlocks[0]);
  assertEquals(4,cache.getEvictionCount());
  assertEquals(6,cache.getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[2].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(singleBlocks[3].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(singleBlocks[4].cacheKey,true,false,true));
  cache.getBlock(bigBlocks[0].cacheKey,true,false,true);
  cache.cacheBlock(bigBlocks[1].cacheKey,bigBlocks[1]);
  assertEquals(5,cache.getEvictionCount());
  assertEquals(9,cache.getEvictedCount());
  assertEquals(null,cache.getBlock(singleBlocks[1].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(multiBlocks[1].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(multiBlocks[2].cacheKey,true,false,true));
  cache.cacheBlock(bigBlocks[2].cacheKey,bigBlocks[2],true);
  assertEquals(6,cache.getEvictionCount());
  assertEquals(12,cache.getEvictedCount());
  assertEquals(null,cache.getBlock(memoryBlocks[1].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(memoryBlocks[2].cacheKey,true,false,true));
  assertEquals(null,cache.getBlock(memoryBlocks[3].cacheKey,true,false,true));
}
