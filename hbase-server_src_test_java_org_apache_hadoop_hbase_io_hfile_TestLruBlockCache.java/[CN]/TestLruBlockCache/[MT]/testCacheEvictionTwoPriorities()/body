{
  long maxSize=100000;
  long blockSize=calculateBlockSizeDefault(maxSize,10);
  LruBlockCache cache=new LruBlockCache(maxSize,blockSize,false);
  CachedItem[] singleBlocks=generateFixedBlocks(5,10000,"single");
  CachedItem[] multiBlocks=generateFixedBlocks(5,10000,"multi");
  long expectedCacheSize=cache.heapSize();
  for (  CachedItem block : multiBlocks) {
    cache.cacheBlock(block.cacheKey,block);
    expectedCacheSize+=block.cacheBlockHeapSize();
    assertEquals(cache.getBlock(block.cacheKey,true,false,true),block);
  }
  for (  CachedItem block : singleBlocks) {
    cache.cacheBlock(block.cacheKey,block);
    expectedCacheSize+=block.heapSize();
  }
  assertEquals(cache.getEvictionCount(),1);
  assertEquals(cache.getEvictedCount(),2);
  assertTrue(expectedCacheSize > (maxSize * LruBlockCache.DEFAULT_ACCEPTABLE_FACTOR));
  assertTrue(cache.heapSize() <= maxSize);
  assertTrue(cache.heapSize() <= (maxSize * LruBlockCache.DEFAULT_ACCEPTABLE_FACTOR));
  assertTrue(cache.getBlock(singleBlocks[0].cacheKey,true,false,true) == null);
  assertTrue(cache.getBlock(multiBlocks[0].cacheKey,true,false,true) == null);
  for (int i=1; i < 4; i++) {
    assertEquals(cache.getBlock(singleBlocks[i].cacheKey,true,false,true),singleBlocks[i]);
    assertEquals(cache.getBlock(multiBlocks[i].cacheKey,true,false,true),multiBlocks[i]);
  }
}
