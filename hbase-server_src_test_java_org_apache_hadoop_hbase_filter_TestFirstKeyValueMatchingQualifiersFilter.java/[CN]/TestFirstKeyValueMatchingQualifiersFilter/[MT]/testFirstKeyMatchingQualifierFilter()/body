{
  Set<byte[]> quals=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
  quals.add(COLUMN_QUALIFIER_1);
  quals.add(COLUMN_QUALIFIER_2);
  Filter filter=new FirstKeyValueMatchingQualifiersFilter(quals);
  KeyValue kv;
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_1,VAL_1);
  assertTrue("includeAndSetFlag",filter.filterKeyValue(kv) == Filter.ReturnCode.INCLUDE);
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("flagIsSetSkipToNextRow",filter.filterKeyValue(kv) == Filter.ReturnCode.NEXT_ROW);
  filter.reset();
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_3,VAL_1);
  System.out.println(filter.filterKeyValue(kv));
  assertTrue("includeFlagIsUnset",filter.filterKeyValue(kv) == Filter.ReturnCode.INCLUDE);
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("includeAndSetFlag",filter.filterKeyValue(kv) == Filter.ReturnCode.INCLUDE);
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_1,VAL_1);
  assertTrue("flagIsSetSkipToNextRow",filter.filterKeyValue(kv) == Filter.ReturnCode.NEXT_ROW);
}
