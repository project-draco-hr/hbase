{
  final TableName tableName=TableName.valueOf("testRegionMadeOfBulkLoadedFilesOnly");
  final HRegionInfo hri=createBasic3FamilyHRegionInfo(tableName);
  final Path basedir=new Path(this.hbaseRootDir,tableName.getNameAsString());
  deleteDir(basedir);
  final HTableDescriptor htd=createBasic3FamilyHTD(tableName);
  Region region2=HBaseTestingUtility.createRegionAndWAL(hri,hbaseRootDir,this.conf,htd);
  HBaseTestingUtility.closeRegionAndWAL(region2);
  WAL wal=createWAL(this.conf);
  Region region=HRegion.openHRegion(hri,htd,wal,this.conf);
  byte[] family=htd.getFamilies().iterator().next().getName();
  Path f=new Path(basedir,"hfile");
  HFileTestUtil.createHFile(this.conf,fs,f,family,family,Bytes.toBytes(""),Bytes.toBytes("z"),10);
  List<Pair<byte[],String>> hfs=new ArrayList<Pair<byte[],String>>(1);
  hfs.add(Pair.newPair(family,f.toString()));
  region.bulkLoadHFiles(hfs,true,null);
  byte[] row=tableName.getName();
  region.put((new Put(row)).addColumn(family,family,family));
  wal.sync();
  final int rowsInsertedCount=11;
  assertEquals(rowsInsertedCount,getScannedCount(region.getScanner(new Scan())));
  final Configuration newConf=HBaseConfiguration.create(this.conf);
  User user=HBaseTestingUtility.getDifferentUser(newConf,tableName.getNameAsString());
  user.runAs(new PrivilegedExceptionAction(){
    @Override public Object run() throws Exception {
      runWALSplit(newConf);
      WAL wal2=createWAL(newConf);
      HRegion region2=HRegion.openHRegion(newConf,FileSystem.get(newConf),hbaseRootDir,hri,htd,wal2);
      long seqid2=region2.getOpenSeqNum();
      assertTrue(seqid2 > -1);
      assertEquals(rowsInsertedCount,getScannedCount(region2.getScanner(new Scan())));
      region2.close();
      wal2.close();
      return null;
    }
  }
);
}
