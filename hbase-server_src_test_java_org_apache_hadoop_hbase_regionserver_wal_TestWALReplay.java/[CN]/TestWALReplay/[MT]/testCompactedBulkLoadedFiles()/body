{
  final TableName tableName=TableName.valueOf("testCompactedBulkLoadedFiles");
  final HRegionInfo hri=createBasic3FamilyHRegionInfo(tableName);
  final Path basedir=new Path(this.hbaseRootDir,tableName.getNameAsString());
  deleteDir(basedir);
  final HTableDescriptor htd=createBasic3FamilyHTD(tableName);
  HRegion region2=HRegion.createHRegion(hri,hbaseRootDir,this.conf,htd);
  HRegion.closeHRegion(region2);
  WAL wal=createWAL(this.conf);
  HRegion region=HRegion.openHRegion(hri,htd,wal,this.conf);
  byte[] row=tableName.getName();
  byte[] family=htd.getFamilies().iterator().next().getName();
  region.put((new Put(row)).add(family,family,family));
  wal.sync();
  List<Pair<byte[],String>> hfs=new ArrayList<Pair<byte[],String>>(1);
  for (int i=0; i < 3; i++) {
    Path f=new Path(basedir,"hfile" + i);
    HFileTestUtil.createHFile(this.conf,fs,f,family,family,Bytes.toBytes(i + "00"),Bytes.toBytes(i + "50"),10);
    hfs.add(Pair.newPair(family,f.toString()));
  }
  region.bulkLoadHFiles(hfs,true);
  final int rowsInsertedCount=31;
  assertEquals(rowsInsertedCount,getScannedCount(region.getScanner(new Scan())));
  region.compactStores(true);
  assertEquals(rowsInsertedCount,getScannedCount(region.getScanner(new Scan())));
  final Configuration newConf=HBaseConfiguration.create(this.conf);
  User user=HBaseTestingUtility.getDifferentUser(newConf,tableName.getNameAsString());
  user.runAs(new PrivilegedExceptionAction(){
    @Override public Object run() throws Exception {
      runWALSplit(newConf);
      WAL wal2=createWAL(newConf);
      HRegion region2=HRegion.openHRegion(newConf,FileSystem.get(newConf),hbaseRootDir,hri,htd,wal2);
      long seqid2=region2.getOpenSeqNum();
      assertTrue(seqid2 > -1);
      assertEquals(rowsInsertedCount,getScannedCount(region2.getScanner(new Scan())));
      region2.close();
      wal2.close();
      return null;
    }
  }
);
}
