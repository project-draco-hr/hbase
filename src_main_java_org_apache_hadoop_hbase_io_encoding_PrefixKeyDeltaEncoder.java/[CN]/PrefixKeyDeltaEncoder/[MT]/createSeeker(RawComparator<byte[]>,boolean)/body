{
  return new BufferedEncodedSeeker(comparator){
    @Override protected void decodeNext(){
      current.keyLength=ByteBufferUtils.readCompressedInt(currentBuffer);
      current.valueLength=ByteBufferUtils.readCompressedInt(currentBuffer);
      current.lastCommonPrefix=ByteBufferUtils.readCompressedInt(currentBuffer);
      current.keyLength+=current.lastCommonPrefix;
      current.ensureSpaceForKey();
      currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.keyLength - current.lastCommonPrefix);
      current.valueOffset=currentBuffer.position();
      ByteBufferUtils.skip(currentBuffer,current.valueLength);
      if (includesMemstoreTS) {
        current.memstoreTS=ByteBufferUtils.readVLong(currentBuffer);
      }
 else {
        current.memstoreTS=0;
      }
      current.nextKvOffset=currentBuffer.position();
    }
    @Override protected void decodeFirst(){
      ByteBufferUtils.skip(currentBuffer,Bytes.SIZEOF_INT);
      decodeNext();
    }
  }
;
}
