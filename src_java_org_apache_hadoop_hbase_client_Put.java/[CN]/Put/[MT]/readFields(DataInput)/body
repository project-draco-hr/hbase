{
  int version=in.readByte();
  if (version > PUT_VERSION) {
    throw new IOException("version not supported");
  }
  this.row=Bytes.readByteArray(in);
  this.timestamp=in.readLong();
  this.lockId=in.readLong();
  this.writeToWAL=in.readBoolean();
  int numFamilies=in.readInt();
  if (!this.familyMap.isEmpty())   this.familyMap.clear();
  for (int i=0; i < numFamilies; i++) {
    byte[] family=Bytes.readByteArray(in);
    int numKeys=in.readInt();
    List<KeyValue> keys=new ArrayList<KeyValue>(numKeys);
    int totalLen=in.readInt();
    byte[] buf=new byte[totalLen];
    int offset=0;
    for (int j=0; j < numKeys; j++) {
      int keyLength=in.readInt();
      in.readFully(buf,offset,keyLength);
      keys.add(new KeyValue(buf,offset,keyLength));
      offset+=keyLength;
    }
    this.familyMap.put(family,keys);
  }
}
