{
  ThriftHBaseServiceHandler handler=createHandler();
  ByteBuffer table=wrap(tableAname);
  TColumnValue columnValue=new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(valueAname));
  List<TColumnValue> columnValues=new ArrayList<TColumnValue>();
  columnValues.add(columnValue);
  for (int i=0; i < 20; i++) {
    TPut put=new TPut(wrap(("testGetScannerResults" + pad(i,(byte)2)).getBytes()),columnValues);
    handler.put(table,put);
  }
  TScan scan=new TScan();
  List<TColumn> columns=new ArrayList<TColumn>();
  TColumn column=new TColumn();
  column.setFamily(familyAname);
  column.setQualifier(qualifierAname);
  columns.add(column);
  scan.setColumns(columns);
  scan.setStartRow("testGetScannerResults".getBytes());
  scan.setStopRow("testGetScannerResults05".getBytes());
  List<TResult> results=handler.getScannerResults(table,scan,5);
  assertEquals(5,results.size());
  for (int i=0; i < 5; i++) {
    assertArrayEquals(("testGetScannerResults" + pad(i,(byte)2)).getBytes(),results.get(i).getRow());
  }
  scan.setStopRow("testGetScannerResults10".getBytes());
  results=handler.getScannerResults(table,scan,10);
  assertEquals(10,results.size());
  for (int i=0; i < 10; i++) {
    assertArrayEquals(("testGetScannerResults" + pad(i,(byte)2)).getBytes(),results.get(i).getRow());
  }
  scan.setStopRow("testGetScannerResults20".getBytes());
  results=handler.getScannerResults(table,scan,20);
  assertEquals(20,results.size());
  for (int i=0; i < 20; i++) {
    assertArrayEquals(("testGetScannerResults" + pad(i,(byte)2)).getBytes(),results.get(i).getRow());
  }
}
