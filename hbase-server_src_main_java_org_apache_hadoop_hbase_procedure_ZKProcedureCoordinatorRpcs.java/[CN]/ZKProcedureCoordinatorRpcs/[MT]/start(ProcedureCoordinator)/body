{
  if (this.coordinator != null) {
    throw new IllegalStateException("ZKProcedureCoordinator already started and already has listener installed");
  }
  this.coordinator=coordinator;
  try {
    this.zkProc=new ZKProcedureUtil(watcher,procedureType){
      @Override public void nodeCreated(      String path){
        if (!isInProcedurePath(path))         return;
        LOG.debug("Node created: " + path);
        logZKTree(this.baseZNode);
        if (isAcquiredPathNode(path)) {
          coordinator.memberAcquiredBarrier(ZKUtil.getNodeName(ZKUtil.getParent(path)),ZKUtil.getNodeName(path));
        }
 else         if (isReachedPathNode(path)) {
          String procName=ZKUtil.getNodeName(ZKUtil.getParent(path));
          String member=ZKUtil.getNodeName(path);
          try {
            byte[] dataFromMember=ZKUtil.getData(watcher,path);
            if (!ProtobufUtil.isPBMagicPrefix(dataFromMember)) {
              ForeignException ee=new ForeignException(coordName,"Failed to get data from finished node or data is illegally formatted:" + path);
              coordinator.abortProcedure(procName,ee);
            }
 else {
              dataFromMember=Arrays.copyOfRange(dataFromMember,ProtobufUtil.lengthOfPBMagic(),dataFromMember.length);
              LOG.debug("Finished data from procedure '" + procName + "' member '"+ member+ "': "+ new String(dataFromMember));
              coordinator.memberFinishedBarrier(procName,member,dataFromMember);
            }
          }
 catch (          KeeperException e) {
            ForeignException ee=new ForeignException(coordName,e);
            coordinator.abortProcedure(procName,ee);
          }
catch (          InterruptedException e) {
            ForeignException ee=new ForeignException(coordName,e);
            coordinator.abortProcedure(procName,ee);
          }
        }
 else         if (isAbortPathNode(path)) {
          abort(path);
        }
 else {
          LOG.debug("Ignoring created notification for node:" + path);
        }
      }
    }
;
    zkProc.clearChildZNodes();
  }
 catch (  KeeperException e) {
    LOG.error("Unable to start the ZK-based Procedure Coordinator rpcs.",e);
    return false;
  }
  LOG.debug("Starting the controller for procedure member:" + coordName);
  return true;
}
