{
  byte[] TABLE=Bytes.toBytes("testNull");
  try {
    HTable htFail=createTable(null,FAMILY);
    assertTrue("Creating a table with null name passed, should have failed",false);
  }
 catch (  Exception e) {
  }
  try {
    HTable htFail=createTable(TABLE,(byte[])null);
    assertTrue("Creating a table with a null family passed, should fail",false);
  }
 catch (  Exception e) {
  }
  HTable ht=createTable(TABLE,FAMILY);
  try {
    Put put=new Put((byte[])null);
    put.add(FAMILY,QUALIFIER,VALUE);
    ht.put(put);
    assertTrue("Inserting a null row worked, should throw exception",false);
  }
 catch (  Exception e) {
  }
  try {
    Put put=new Put(ROW);
    put.add(FAMILY,null,VALUE);
    ht.put(put);
    getTestNull(ht,ROW,FAMILY,VALUE);
    scanTestNull(ht,ROW,FAMILY,VALUE);
    Delete delete=new Delete(ROW);
    delete.deleteColumns(FAMILY,null);
    ht.delete(delete);
    Get get=new Get(ROW);
    Result result=ht.get(get);
    assertEmptyResult(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue("Using a row with null qualifier threw exception, should " + "pass",false);
  }
  byte[] TABLE2=Bytes.toBytes("testNull2");
  ht=createTable(TABLE2,FAMILY);
  try {
    Put put=new Put(ROW);
    put.add(FAMILY,EMPTY,VALUE);
    ht.put(put);
    getTestNull(ht,ROW,FAMILY,VALUE);
    scanTestNull(ht,ROW,FAMILY,VALUE);
    flushMemStore(TABLE2);
    getTestNull(ht,ROW,FAMILY,VALUE);
    scanTestNull(ht,ROW,FAMILY,VALUE);
    Delete delete=new Delete(ROW);
    delete.deleteColumns(FAMILY,EMPTY);
    ht.delete(delete);
    Get get=new Get(ROW);
    Result result=ht.get(get);
    assertEmptyResult(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue("Using a row with null qualifier threw exception, should " + "pass",false);
  }
  try {
    Put put=new Put(ROW);
    put.add(FAMILY,QUALIFIER,null);
    ht.put(put);
    Get get=new Get(ROW);
    get.addColumn(FAMILY,QUALIFIER);
    Result result=ht.get(get);
    assertSingleResult(result,ROW,FAMILY,QUALIFIER,null);
    Scan scan=new Scan();
    scan.addColumn(FAMILY,QUALIFIER);
    result=getSingleScanResult(ht,scan);
    assertSingleResult(result,ROW,FAMILY,QUALIFIER,null);
    Delete delete=new Delete(ROW);
    delete.deleteColumns(FAMILY,QUALIFIER);
    ht.delete(delete);
    get=new Get(ROW);
    result=ht.get(get);
    assertEmptyResult(result);
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue("Null values should be allowed, but threw exception",false);
  }
}
