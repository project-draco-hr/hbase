{
  Configuration c=TEST_UTIL.getConfiguration();
  Path oldLogDir=new Path(TEST_UTIL.getTestDir(),HConstants.HREGION_OLDLOGDIR_NAME);
  String fakeMachineName=URLEncoder.encode("regionserver:60020","UTF8");
  FileSystem fs=FileSystem.get(c);
  AtomicBoolean stop=new AtomicBoolean(false);
  LogsCleaner cleaner=new LogsCleaner(1000,stop,c,fs,oldLogDir);
  long now=System.currentTimeMillis();
  fs.delete(oldLogDir,true);
  fs.mkdirs(oldLogDir);
  fs.createNewFile(new Path(oldLogDir,"a"));
  fs.createNewFile(new Path(oldLogDir,fakeMachineName + "." + "a"));
  fs.createNewFile(new Path(oldLogDir,fakeMachineName + "." + now));
  System.out.println("Now is: " + now);
  for (int i=0; i < 30; i++) {
    Path fileName=new Path(oldLogDir,fakeMachineName + "." + (now - 6000000 - i));
    fs.createNewFile(fileName);
    if (i % (30 / 3) == 0) {
      zkHelper.addLogToList(fileName.getName(),fakeMachineName);
      System.out.println("Replication log file: " + fileName);
    }
  }
  for (  FileStatus stat : fs.listStatus(oldLogDir)) {
    System.out.println(stat.getPath().toString());
  }
  fs.createNewFile(new Path(oldLogDir,fakeMachineName + "." + (now + 10000)));
  assertEquals(34,fs.listStatus(oldLogDir).length);
  cleaner.chore();
  assertEquals(14,fs.listStatus(oldLogDir).length);
  cleaner.chore();
  assertEquals(5,fs.listStatus(oldLogDir).length);
  for (  FileStatus file : fs.listStatus(oldLogDir)) {
    System.out.println("Keeped log files: " + file.getPath().getName());
  }
}
