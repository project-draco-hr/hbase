{
  this.level0CompactMinFiles=config.getInt(MIN_FILES_L0_KEY,4);
  this.flushIntoL0=config.getBoolean(FLUSH_TO_L0_KEY,false);
  int minMinFiles=flushIntoL0 ? 3 : 4;
  int minFiles=config.getInt(CompactionConfiguration.MIN_KEY,-1);
  this.stripeCompactMinFiles=config.getInt(MIN_FILES_KEY,Math.max(minMinFiles,minFiles));
  this.stripeCompactMaxFiles=config.getInt(MAX_FILES_KEY,config.getInt(CompactionConfiguration.MAX_KEY,10));
  this.maxRegionSplitImbalance=getFloat(config,MAX_REGION_SPLIT_IMBALANCE_KEY,1.5f,true);
  float splitPartCount=getFloat(config,SPLIT_PARTS_KEY,2f,true);
  if (Math.abs(splitPartCount - 1.0) < EPSILON) {
    LOG.error("Split part count cannot be 1 (" + splitPartCount + "), using the default");
    splitPartCount=2f;
  }
  this.splitPartCount=splitPartCount;
  double flushSize=sci.getMemstoreFlushSize();
  if (flushSize == 0) {
    flushSize=128 * 1024 * 1024;
  }
  long defaultSplitSize=(long)(flushSize * getLevel0MinFiles() * 4* splitPartCount);
  this.sizeToSplitAt=config.getLong(SIZE_TO_SPLIT_KEY,defaultSplitSize);
  int initialCount=config.getInt(INITIAL_STRIPE_COUNT_KEY,1);
  if (initialCount == 0) {
    LOG.error("Initial stripe count is 0, using the default");
    initialCount=1;
  }
  this.initialCount=initialCount;
  this.splitPartSize=(long)(this.sizeToSplitAt / this.splitPartCount);
}
