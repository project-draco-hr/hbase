{
  IOException lastException;
  if (cluster.nodes.size() < 1) {
    throw new IOException("Cluster is empty");
  }
  int start=(int)Math.round((cluster.nodes.size() - 1) * Math.random());
  int i=start;
  do {
    cluster.lastHost=cluster.nodes.get(i);
    try {
      StringBuilder sb=new StringBuilder();
      if (sslEnabled) {
        sb.append("https://");
      }
 else {
        sb.append("http://");
      }
      sb.append(cluster.lastHost);
      sb.append(path);
      URI uri=new URI(sb.toString());
      if (method instanceof HttpPut) {
        HttpPut put=new HttpPut(uri);
        put.setEntity(((HttpPut)method).getEntity());
        put.setHeaders(method.getAllHeaders());
        method=put;
      }
 else       if (method instanceof HttpGet) {
        method=new HttpGet(uri);
      }
 else       if (method instanceof HttpHead) {
        method=new HttpHead(uri);
      }
 else       if (method instanceof HttpDelete) {
        method=new HttpDelete(uri);
      }
 else       if (method instanceof HttpPost) {
        HttpPost post=new HttpPost(uri);
        post.setEntity(((HttpPost)method).getEntity());
        post.setHeaders(method.getAllHeaders());
        method=post;
      }
      return executeURI(method,headers,uri.toString());
    }
 catch (    IOException e) {
      lastException=e;
    }
catch (    URISyntaxException use) {
      lastException=new IOException(use);
    }
  }
 while (++i != start && i < cluster.nodes.size());
  throw lastException;
}
