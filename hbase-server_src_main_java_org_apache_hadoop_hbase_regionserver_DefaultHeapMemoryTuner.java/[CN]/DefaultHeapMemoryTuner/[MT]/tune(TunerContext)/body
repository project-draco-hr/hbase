{
  long blockedFlushCount=context.getBlockedFlushCount();
  long unblockedFlushCount=context.getUnblockedFlushCount();
  long evictCount=context.getEvictCount();
  long cacheMissCount=context.getCacheMissCount();
  long totalFlushCount=blockedFlushCount + unblockedFlushCount;
  rollingStatsForCacheMisses.insertDataValue(cacheMissCount);
  rollingStatsForFlushes.insertDataValue(totalFlushCount);
  rollingStatsForEvictions.insertDataValue(evictCount);
  StepDirection newTuneDirection=StepDirection.NEUTRAL;
  if (ignoreInitialPeriods < numPeriodsToIgnore) {
    ignoreInitialPeriods++;
    return NO_OP_TUNER_RESULT;
  }
  String tunerLog="";
  boolean earlyMemstoreSufficientCheck=totalFlushCount == 0 || context.getCurMemStoreUsed() < context.getCurMemStoreSize() * sufficientMemoryLevel;
  boolean earlyBlockCacheSufficientCheck=evictCount == 0 || context.getCurBlockCacheUsed() < context.getCurBlockCacheSize() * sufficientMemoryLevel;
  float newMemstoreSize;
  float newBlockCacheSize;
  if (earlyMemstoreSufficientCheck && earlyBlockCacheSufficientCheck) {
    newTuneDirection=StepDirection.NEUTRAL;
  }
 else   if (earlyMemstoreSufficientCheck) {
    newTuneDirection=StepDirection.INCREASE_BLOCK_CACHE_SIZE;
  }
 else   if (earlyBlockCacheSufficientCheck) {
    newTuneDirection=StepDirection.INCREASE_MEMSTORE_SIZE;
  }
 else {
    boolean isReverting=false;
switch (prevTuneDirection) {
case INCREASE_BLOCK_CACHE_SIZE:
      if ((double)evictCount > rollingStatsForEvictions.getMean() || (double)totalFlushCount > rollingStatsForFlushes.getMean() + rollingStatsForFlushes.getDeviation() / 2.00) {
        newTuneDirection=StepDirection.INCREASE_MEMSTORE_SIZE;
        tunerLog+="Reverting previous tuning.";
        if ((double)evictCount > rollingStatsForEvictions.getMean()) {
          tunerLog+=" As could not decrease evctions sufficiently.";
        }
 else {
          tunerLog+=" As number of flushes rose significantly.";
        }
        isReverting=true;
      }
    break;
case INCREASE_MEMSTORE_SIZE:
  if ((double)totalFlushCount > rollingStatsForFlushes.getMean() || (double)evictCount > rollingStatsForEvictions.getMean() + rollingStatsForEvictions.getDeviation() / 2.00) {
    newTuneDirection=StepDirection.INCREASE_BLOCK_CACHE_SIZE;
    tunerLog+="Reverting previous tuning.";
    if ((double)totalFlushCount > rollingStatsForFlushes.getMean()) {
      tunerLog+=" As could not decrease flushes sufficiently.";
    }
 else {
      tunerLog+=" As number of evictions rose significantly.";
    }
    isReverting=true;
  }
break;
default :
break;
}
if (!isReverting) {
if ((double)cacheMissCount < rollingStatsForCacheMisses.getMean() - rollingStatsForCacheMisses.getDeviation() / 2.00 && (double)totalFlushCount < rollingStatsForFlushes.getMean() - rollingStatsForFlushes.getDeviation() / 2.00) {
newTuneDirection=StepDirection.NEUTRAL;
}
 else if ((double)cacheMissCount > rollingStatsForCacheMisses.getMean() + rollingStatsForCacheMisses.getDeviation() / 2.00 && (double)totalFlushCount < rollingStatsForFlushes.getMean() - rollingStatsForFlushes.getDeviation() / 2.00) {
newTuneDirection=StepDirection.INCREASE_BLOCK_CACHE_SIZE;
tunerLog+="Increasing block cache size as observed increase in number of cache misses.";
}
 else if ((double)cacheMissCount < rollingStatsForCacheMisses.getMean() - rollingStatsForCacheMisses.getDeviation() / 2.00 && (double)totalFlushCount > rollingStatsForFlushes.getMean() + rollingStatsForFlushes.getDeviation() / 2.00) {
newTuneDirection=StepDirection.INCREASE_MEMSTORE_SIZE;
tunerLog+="Increasing memstore size as observed increase in number of flushes.";
}
 else {
newTuneDirection=StepDirection.NEUTRAL;
}
}
}
if (prevTuneDirection == StepDirection.NEUTRAL && newTuneDirection != StepDirection.NEUTRAL) {
step=maximumStepSize;
}
 else if (prevTuneDirection != newTuneDirection) {
step=step / 2.00f;
if (step < minimumStepSize) {
step=minimumStepSize;
}
}
switch (newTuneDirection) {
case INCREASE_BLOCK_CACHE_SIZE:
newBlockCacheSize=context.getCurBlockCacheSize() + step;
newMemstoreSize=context.getCurMemStoreSize() - step;
break;
case INCREASE_MEMSTORE_SIZE:
newBlockCacheSize=context.getCurBlockCacheSize() - step;
newMemstoreSize=context.getCurMemStoreSize() + step;
break;
default :
prevTuneDirection=StepDirection.NEUTRAL;
return NO_OP_TUNER_RESULT;
}
if (newMemstoreSize > globalMemStorePercentMaxRange) {
newMemstoreSize=globalMemStorePercentMaxRange;
}
 else if (newMemstoreSize < globalMemStorePercentMinRange) {
newMemstoreSize=globalMemStorePercentMinRange;
}
if (newBlockCacheSize > blockCachePercentMaxRange) {
newBlockCacheSize=blockCachePercentMaxRange;
}
 else if (newBlockCacheSize < blockCachePercentMinRange) {
newBlockCacheSize=blockCachePercentMinRange;
}
TUNER_RESULT.setBlockCacheSize(newBlockCacheSize);
TUNER_RESULT.setMemstoreSize(newMemstoreSize);
if (LOG.isDebugEnabled()) {
LOG.debug(tunerLog);
}
prevTuneDirection=newTuneDirection;
return TUNER_RESULT;
}
