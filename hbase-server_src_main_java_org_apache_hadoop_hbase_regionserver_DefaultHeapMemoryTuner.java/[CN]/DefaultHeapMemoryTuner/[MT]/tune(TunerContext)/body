{
  float curMemstoreSize=context.getCurMemStoreSize();
  float curBlockCacheSize=context.getCurBlockCacheSize();
  addToRollingStats(context);
  if (ignoreInitialPeriods < numPeriodsToIgnore) {
    ignoreInitialPeriods++;
    rollingStatsForTunerSteps.insertDataValue(0);
    return NO_OP_TUNER_RESULT;
  }
  StepDirection newTuneDirection=getTuneDirection(context);
  float newMemstoreSize;
  float newBlockCacheSize;
  if (prevTuneDirection == StepDirection.NEUTRAL && newTuneDirection != StepDirection.NEUTRAL && rollingStatsForTunerSteps.getDeviation() < TUNER_STEP_EPS) {
    step=maximumStepSize;
  }
 else   if ((newTuneDirection == StepDirection.INCREASE_MEMSTORE_SIZE && decayingTunerStepSizeSum < 0) || (newTuneDirection == StepDirection.INCREASE_BLOCK_CACHE_SIZE && decayingTunerStepSizeSum > 0)) {
    step=step / 2.00f;
  }
  if (step < minimumStepSize) {
    LOG.debug("Tuner step size is too low; we will not perform any tuning this time.");
    step=0.0f;
    newTuneDirection=StepDirection.NEUTRAL;
  }
  float globalMemstoreLowerMark=HeapMemorySizeUtil.getGlobalMemStoreLowerMark(conf,curMemstoreSize);
  float minMemstoreSize=((globalMemstoreLowerMark + 1) * curMemstoreSize) / 2.00f;
switch (newTuneDirection) {
case INCREASE_BLOCK_CACHE_SIZE:
    if (curMemstoreSize - step < minMemstoreSize) {
      step=curMemstoreSize - minMemstoreSize;
    }
  newMemstoreSize=curMemstoreSize - step;
newBlockCacheSize=curBlockCacheSize + step;
rollingStatsForTunerSteps.insertDataValue(-(int)(step * 100000));
decayingTunerStepSizeSum=(decayingTunerStepSizeSum - step) / 2.00f;
break;
case INCREASE_MEMSTORE_SIZE:
newBlockCacheSize=curBlockCacheSize - step;
newMemstoreSize=curMemstoreSize + step;
rollingStatsForTunerSteps.insertDataValue((int)(step * 100000));
decayingTunerStepSizeSum=(decayingTunerStepSizeSum + step) / 2.00f;
break;
default :
prevTuneDirection=StepDirection.NEUTRAL;
rollingStatsForTunerSteps.insertDataValue(0);
decayingTunerStepSizeSum=(decayingTunerStepSizeSum) / 2.00f;
return NO_OP_TUNER_RESULT;
}
if (newMemstoreSize > globalMemStorePercentMaxRange) {
newMemstoreSize=globalMemStorePercentMaxRange;
}
 else if (newMemstoreSize < globalMemStorePercentMinRange) {
newMemstoreSize=globalMemStorePercentMinRange;
}
if (newBlockCacheSize > blockCachePercentMaxRange) {
newBlockCacheSize=blockCachePercentMaxRange;
}
 else if (newBlockCacheSize < blockCachePercentMinRange) {
newBlockCacheSize=blockCachePercentMinRange;
}
TUNER_RESULT.setBlockCacheSize(newBlockCacheSize);
TUNER_RESULT.setMemstoreSize(newMemstoreSize);
prevTuneDirection=newTuneDirection;
return TUNER_RESULT;
}
