{
  final FilterList flist=new FilterList(Operator.MUST_PASS_ONE,Lists.<Filter>newArrayList(new FilterList(Operator.MUST_PASS_ALL,Lists.<Filter>newArrayList(new FamilyFilter(CompareOp.EQUAL,new BinaryComparator(Bytes.toBytes("fam"))),new QualifierFilter(CompareOp.EQUAL,new BinaryComparator(Bytes.toBytes("qual1"))),new KeyOnlyFilter())),new FilterList(Operator.MUST_PASS_ALL,Lists.<Filter>newArrayList(new FamilyFilter(CompareOp.EQUAL,new BinaryComparator(Bytes.toBytes("fam"))),new QualifierFilter(CompareOp.EQUAL,new BinaryComparator(Bytes.toBytes("qual2")))))));
  final KeyValue kvQual1=new KeyValue(Bytes.toBytes("row"),Bytes.toBytes("fam"),Bytes.toBytes("qual1"),Bytes.toBytes("value"));
  final KeyValue kvQual2=new KeyValue(Bytes.toBytes("row"),Bytes.toBytes("fam"),Bytes.toBytes("qual2"),Bytes.toBytes("value"));
  final KeyValue kvQual3=new KeyValue(Bytes.toBytes("row"),Bytes.toBytes("fam"),Bytes.toBytes("qual3"),Bytes.toBytes("value"));
  assertEquals(Filter.ReturnCode.INCLUDE,flist.filterKeyValue(kvQual1));
  final KeyValue transformedQual1=flist.transform(kvQual1);
  assertEquals(0,transformedQual1.getValue().length);
  assertEquals(Filter.ReturnCode.INCLUDE,flist.filterKeyValue(kvQual2));
  final KeyValue transformedQual2=flist.transform(kvQual2);
  assertEquals("value",Bytes.toString(transformedQual2.getValue()));
  assertEquals(Filter.ReturnCode.SKIP,flist.filterKeyValue(kvQual3));
}
