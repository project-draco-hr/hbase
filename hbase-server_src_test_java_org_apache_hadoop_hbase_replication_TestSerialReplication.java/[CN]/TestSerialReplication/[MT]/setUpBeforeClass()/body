{
  conf1=HBaseConfiguration.create();
  conf1.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/1");
  conf1.setInt("hbase.regionserver.hlog.blocksize",1024 * 20);
  conf1.setInt("replication.source.size.capacity",1024);
  conf1.setLong("replication.source.sleepforretries",100);
  conf1.setInt("hbase.regionserver.maxlogs",10);
  conf1.setLong("hbase.master.logcleaner.ttl",10);
  conf1.setBoolean("dfs.support.append",true);
  conf1.setLong(HConstants.THREAD_WAKE_FREQUENCY,100);
  conf1.setStrings(CoprocessorHost.USER_REGION_COPROCESSOR_CONF_KEY,"org.apache.hadoop.hbase.replication.TestMasterReplication$CoprocessorCounter");
  conf1.setLong("replication.source.per.peer.node.bandwidth",100L);
  conf1.setLong("replication.source.size.capacity",1L);
  conf1.setLong(HConstants.REPLICATION_SERIALLY_WAITING_KEY,1000L);
  utility1=new HBaseTestingUtility(conf1);
  utility1.startMiniZKCluster();
  MiniZooKeeperCluster miniZK=utility1.getZkCluster();
  new ZooKeeperWatcher(conf1,"cluster1",null,true);
  conf2=new Configuration(conf1);
  conf2.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/2");
  utility2=new HBaseTestingUtility(conf2);
  utility2.setZkCluster(miniZK);
  new ZooKeeperWatcher(conf2,"cluster2",null,true);
  ReplicationAdmin admin1=new ReplicationAdmin(conf1);
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(utility2.getClusterKey());
  admin1.addPeer("1",rpc,null);
  utility1.startMiniCluster(1,3);
  utility2.startMiniCluster(1,1);
  utility1.getHBaseAdmin().setBalancerRunning(false,true);
}
