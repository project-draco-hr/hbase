{
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
  while (true) {
    int tag=input.readTag();
switch (tag) {
case 0:
      this.setUnknownFields(unknownFields.build());
    onChanged();
  return this;
default :
{
  if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
    this.setUnknownFields(unknownFields.build());
    onChanged();
    return this;
  }
  break;
}
case 10:
{
org.apache.hadoop.hbase.protobuf.generated.FSProtos.HBaseVersionFileContent.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.FSProtos.HBaseVersionFileContent.newBuilder();
if (hasHbaseVersion()) {
  subBuilder.mergeFrom(getHbaseVersion());
}
input.readMessage(subBuilder,extensionRegistry);
setHbaseVersion(subBuilder.buildPartial());
break;
}
case 18:
{
org.apache.hadoop.hbase.protobuf.generated.ClusterStatusProtos.LiveServerInfo.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.ClusterStatusProtos.LiveServerInfo.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addLiveServers(subBuilder.buildPartial());
break;
}
case 26:
{
org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addDeadServers(subBuilder.buildPartial());
break;
}
case 34:
{
org.apache.hadoop.hbase.protobuf.generated.ClusterStatusProtos.RegionInTransition.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.ClusterStatusProtos.RegionInTransition.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addRegionsInTransition(subBuilder.buildPartial());
break;
}
case 42:
{
org.apache.hadoop.hbase.protobuf.generated.ClusterIdProtos.ClusterId.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.ClusterIdProtos.ClusterId.newBuilder();
if (hasClusterId()) {
subBuilder.mergeFrom(getClusterId());
}
input.readMessage(subBuilder,extensionRegistry);
setClusterId(subBuilder.buildPartial());
break;
}
case 50:
{
org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.Coprocessor.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.Coprocessor.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addMasterCoprocessors(subBuilder.buildPartial());
break;
}
case 58:
{
org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.newBuilder();
if (hasMaster()) {
subBuilder.mergeFrom(getMaster());
}
input.readMessage(subBuilder,extensionRegistry);
setMaster(subBuilder.buildPartial());
break;
}
case 66:
{
org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.Builder subBuilder=org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addBackupMasters(subBuilder.buildPartial());
break;
}
case 72:
{
bitField0_|=0x00000100;
balancerOn_=input.readBool();
break;
}
}
}
}
