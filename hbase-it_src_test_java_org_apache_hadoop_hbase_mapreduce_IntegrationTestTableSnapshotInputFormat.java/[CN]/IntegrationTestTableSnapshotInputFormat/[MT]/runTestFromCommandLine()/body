{
  Configuration conf=getConf();
  TableName tableName=TableName.valueOf(conf.get(TABLE_NAME_KEY,DEFAULT_TABLE_NAME));
  String snapshotName=conf.get(SNAPSHOT_NAME_KEY,tableName.getQualifierAsString() + "_snapshot_" + System.currentTimeMillis());
  int numRegions=conf.getInt(NUM_REGIONS_KEY,DEFAULT_NUM_REGIONS);
  String tableDirStr=conf.get(TABLE_DIR_KEY);
  Path tableDir;
  if (tableDirStr == null) {
    tableDir=util.getDataTestDirOnTestFS(tableName.getQualifierAsString());
  }
 else {
    tableDir=new Path(tableDirStr);
  }
  final String mr=conf.get(MR_IMPLEMENTATION_KEY,MAPREDUCE_IMPLEMENTATION);
  if (mr.equalsIgnoreCase(MAPREDUCE_IMPLEMENTATION)) {
    LOG.debug("Running job with mapreduce API.");
    int expectedNumSplits=numRegions > 2 ? numRegions - 2 : numRegions;
    org.apache.hadoop.hbase.mapreduce.TestTableSnapshotInputFormat.doTestWithMapReduce(util,tableName,snapshotName,START_ROW,END_ROW,tableDir,numRegions,expectedNumSplits,false);
  }
 else   if (mr.equalsIgnoreCase(MAPRED_IMPLEMENTATION)) {
    LOG.debug("Running job with mapred API.");
    int expectedNumSplits=numRegions;
    org.apache.hadoop.hbase.mapred.TestTableSnapshotInputFormat.doTestWithMapReduce(util,tableName,snapshotName,MAPRED_START_ROW,MAPRED_END_ROW,tableDir,numRegions,expectedNumSplits,false);
  }
 else {
    throw new IllegalArgumentException("Unrecognized mapreduce implementation: " + mr + ".");
  }
  return 0;
}
