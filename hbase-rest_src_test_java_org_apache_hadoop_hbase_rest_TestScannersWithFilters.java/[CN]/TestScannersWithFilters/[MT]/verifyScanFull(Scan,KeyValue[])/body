{
  ScannerModel model=ScannerModel.fromScan(s);
  model.setBatch(Integer.MAX_VALUE);
  StringWriter writer=new StringWriter();
  marshaller.marshal(model,writer);
  LOG.debug(writer.toString());
  byte[] body=Bytes.toBytes(writer.toString());
  Response response=client.put("/" + TABLE + "/scanner",Constants.MIMETYPE_XML,body);
  assertEquals(response.getCode(),201);
  String scannerURI=response.getLocation();
  assertNotNull(scannerURI);
  response=client.get(scannerURI,Constants.MIMETYPE_XML);
  assertEquals(response.getCode(),200);
  assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
  CellSetModel cellSet=(CellSetModel)unmarshaller.unmarshal(new ByteArrayInputStream(response.getBody()));
  response=client.delete(scannerURI);
  assertEquals(response.getCode(),200);
  int row=0;
  int idx=0;
  Iterator<RowModel> i=cellSet.getRows().iterator();
  for (boolean done=true; done; row++) {
    done=i.hasNext();
    if (!done)     break;
    RowModel rowModel=i.next();
    List<CellModel> cells=rowModel.getCells();
    if (cells.isEmpty())     break;
    assertTrue("Scanned too many keys! Only expected " + kvs.length + " total but already scanned "+ (cells.size() + idx),kvs.length >= idx + cells.size());
    for (    CellModel cell : cells) {
      assertTrue("Row mismatch",Bytes.equals(rowModel.getKey(),CellUtil.cloneRow(kvs[idx])));
      byte[][] split=KeyValue.parseColumn(cell.getColumn());
      assertTrue("Family mismatch",Bytes.equals(split[0],CellUtil.cloneFamily(kvs[idx])));
      assertTrue("Qualifier mismatch",Bytes.equals(split[1],CellUtil.cloneQualifier(kvs[idx])));
      assertTrue("Value mismatch",Bytes.equals(cell.getValue(),CellUtil.cloneValue(kvs[idx])));
      idx++;
    }
  }
  assertEquals("Expected " + kvs.length + " total keys but scanned "+ idx,kvs.length,idx);
}
