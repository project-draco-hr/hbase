{
  long lastPurgeTime=0;
  while (running) {
    try {
      waitPending();
      writeSelector.select(purgeTimeout);
      Iterator<SelectionKey> iter=writeSelector.selectedKeys().iterator();
      while (iter.hasNext()) {
        SelectionKey key=iter.next();
        iter.remove();
        try {
          if (key.isValid() && key.isWritable()) {
            doAsyncWrite(key);
          }
        }
 catch (        IOException e) {
          LOG.info(getName() + ": asyncWrite",e);
        }
      }
      long now=System.currentTimeMillis();
      if (now < lastPurgeTime + purgeTimeout) {
        continue;
      }
      lastPurgeTime=now;
      if (LOG.isDebugEnabled())       LOG.debug(getName() + ": checking for old call responses.");
      ArrayList<Call> calls;
synchronized (writeSelector.keys()) {
        calls=new ArrayList<Call>(writeSelector.keys().size());
        iter=writeSelector.keys().iterator();
        while (iter.hasNext()) {
          SelectionKey key=iter.next();
          Call call=(Call)key.attachment();
          if (call != null && key.channel() == call.connection.channel) {
            calls.add(call);
          }
        }
      }
      for (      Call call : calls) {
        try {
          doPurge(call,now);
        }
 catch (        IOException e) {
          LOG.warn(getName() + ": error in purging old calls " + e);
        }
      }
    }
 catch (    OutOfMemoryError e) {
      if (errorHandler != null) {
        if (errorHandler.checkOOME(e)) {
          LOG.info(getName() + ": exiting on OutOfMemoryError");
          return;
        }
      }
 else {
        LOG.warn(getName() + ": OutOfMemoryError in server select",e);
        try {
          Thread.sleep(60000);
        }
 catch (        InterruptedException ex) {
          LOG.debug("Interrupted while sleeping");
          return;
        }
      }
    }
catch (    Exception e) {
      LOG.warn(getName() + ": exception in Responder " + StringUtils.stringifyException(e));
    }
  }
  LOG.info(getName() + ": stopped");
}
