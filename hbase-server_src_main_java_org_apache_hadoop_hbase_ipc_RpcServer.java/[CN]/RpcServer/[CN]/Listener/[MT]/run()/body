{
  LOG.info(getName() + ": starting");
  while (running) {
    SelectionKey key=null;
    try {
      selector.select();
      Iterator<SelectionKey> iter=selector.selectedKeys().iterator();
      while (iter.hasNext()) {
        key=iter.next();
        iter.remove();
        try {
          if (key.isValid()) {
            if (key.isAcceptable())             doAccept(key);
          }
        }
 catch (        IOException ignored) {
        }
        key=null;
      }
    }
 catch (    OutOfMemoryError e) {
      if (errorHandler != null) {
        if (errorHandler.checkOOME(e)) {
          LOG.info(getName() + ": exiting on OutOfMemoryError");
          closeCurrentConnection(key,e);
          cleanupConnections(true);
          return;
        }
      }
 else {
        LOG.warn(getName() + ": OutOfMemoryError in server select",e);
        closeCurrentConnection(key,e);
        cleanupConnections(true);
        try {
          Thread.sleep(60000);
        }
 catch (        Exception ignored) {
        }
      }
    }
catch (    Exception e) {
      closeCurrentConnection(key,e);
    }
    cleanupConnections(false);
  }
  LOG.info(getName() + ": stopping");
synchronized (this) {
    try {
      acceptChannel.close();
      selector.close();
    }
 catch (    IOException ignored) {
    }
    selector=null;
    acceptChannel=null;
    while (!connectionList.isEmpty()) {
      closeConnection(connectionList.remove(0));
    }
  }
}
