{
  long totalRequestSize=buf.limit();
  int offset=0;
  CodedInputStream cis=CodedInputStream.newInstance(buf.array(),offset,buf.limit());
  int headerSize=cis.readRawVarint32();
  offset=cis.getTotalBytesRead();
  Message.Builder builder=RequestHeader.newBuilder();
  ProtobufUtil.mergeFrom(builder,cis,headerSize);
  RequestHeader header=(RequestHeader)builder.build();
  offset+=headerSize;
  int id=header.getCallId();
  if (LOG.isTraceEnabled()) {
    LOG.trace("RequestHeader " + TextFormat.shortDebugString(header) + " totalRequestSize: "+ totalRequestSize+ " bytes");
  }
  if ((totalRequestSize + callQueueSize.get()) > maxQueueSize) {
    final Call callTooBig=new Call(id,this.service,null,null,null,null,this,responder,totalRequestSize,null,null);
    ByteArrayOutputStream responseBuffer=new ByteArrayOutputStream();
    metrics.exception(CALL_QUEUE_TOO_BIG_EXCEPTION);
    InetSocketAddress address=getListenerAddress();
    setupResponse(responseBuffer,callTooBig,CALL_QUEUE_TOO_BIG_EXCEPTION,"Call queue is full on " + (address != null ? address : "(channel closed)") + ", is hbase.ipc.server.max.callqueue.size too small?");
    responder.doRespond(callTooBig);
    return;
  }
  MethodDescriptor md=null;
  Message param=null;
  CellScanner cellScanner=null;
  try {
    if (header.hasRequestParam() && header.getRequestParam()) {
      md=this.service.getDescriptorForType().findMethodByName(header.getMethodName());
      if (md == null)       throw new UnsupportedOperationException(header.getMethodName());
      builder=this.service.getRequestPrototype(md).newBuilderForType();
      cis.resetSizeCounter();
      int paramSize=cis.readRawVarint32();
      offset+=cis.getTotalBytesRead();
      if (builder != null) {
        ProtobufUtil.mergeFrom(builder,cis,paramSize);
        param=builder.build();
      }
      offset+=paramSize;
    }
    if (header.hasCellBlockMeta()) {
      buf.position(offset);
      cellScanner=ipcUtil.createCellScannerReusingBuffers(this.codec,this.compressionCodec,buf);
    }
  }
 catch (  Throwable t) {
    InetSocketAddress address=getListenerAddress();
    String msg=(address != null ? address : "(channel closed)") + " is unable to read call parameter from client " + getHostAddress();
    LOG.warn(msg,t);
    metrics.exception(t);
    if (t instanceof LinkageError) {
      t=new DoNotRetryIOException(t);
    }
    if (t instanceof UnsupportedOperationException) {
      t=new DoNotRetryIOException(t);
    }
    final Call readParamsFailedCall=new Call(id,this.service,null,null,null,null,this,responder,totalRequestSize,null,null);
    ByteArrayOutputStream responseBuffer=new ByteArrayOutputStream();
    setupResponse(responseBuffer,readParamsFailedCall,t,msg + "; " + t.getMessage());
    responder.doRespond(readParamsFailedCall);
    return;
  }
  TraceInfo traceInfo=header.hasTraceInfo() ? new TraceInfo(header.getTraceInfo().getTraceId(),header.getTraceInfo().getParentId()) : null;
  Call call=new Call(id,this.service,md,header,param,cellScanner,this,responder,totalRequestSize,traceInfo,this.addr);
  if (!scheduler.dispatch(new CallRunner(RpcServer.this,call))) {
    callQueueSize.add(-1 * call.getSize());
    ByteArrayOutputStream responseBuffer=new ByteArrayOutputStream();
    metrics.exception(CALL_QUEUE_TOO_BIG_EXCEPTION);
    InetSocketAddress address=getListenerAddress();
    setupResponse(responseBuffer,call,CALL_QUEUE_TOO_BIG_EXCEPTION,"Call queue is full on " + (address != null ? address : "(channel closed)") + ", too many items queued ?");
    responder.doRespond(call);
  }
}
