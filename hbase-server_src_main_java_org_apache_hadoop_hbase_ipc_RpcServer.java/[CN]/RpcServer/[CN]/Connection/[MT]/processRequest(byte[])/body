{
  long totalRequestSize=buf.length;
  int offset=0;
  CodedInputStream cis=CodedInputStream.newInstance(buf,offset,buf.length);
  int headerSize=cis.readRawVarint32();
  offset=cis.getTotalBytesRead();
  RequestHeader header=RequestHeader.newBuilder().mergeFrom(buf,offset,headerSize).build();
  offset+=headerSize;
  int id=header.getCallId();
  if (LOG.isTraceEnabled()) {
    LOG.trace("RequestHeader " + TextFormat.shortDebugString(header) + " totalRequestSize: "+ totalRequestSize+ " bytes");
  }
  if ((totalRequestSize + callQueueSize.get()) > maxQueueSize) {
    final Call callTooBig=new Call(id,this.service,null,null,null,null,this,responder,totalRequestSize,null,null);
    ByteArrayOutputStream responseBuffer=new ByteArrayOutputStream();
    metrics.exception(CALL_QUEUE_TOO_BIG_EXCEPTION);
    setupResponse(responseBuffer,callTooBig,CALL_QUEUE_TOO_BIG_EXCEPTION,"Call queue is full on " + getListenerAddress() + ", is hbase.ipc.server.max.callqueue.size too small?");
    responder.doRespond(callTooBig);
    return;
  }
  MethodDescriptor md=null;
  Message param=null;
  CellScanner cellScanner=null;
  try {
    if (header.hasRequestParam() && header.getRequestParam()) {
      md=this.service.getDescriptorForType().findMethodByName(header.getMethodName());
      if (md == null)       throw new UnsupportedOperationException(header.getMethodName());
      Builder builder=this.service.getRequestPrototype(md).newBuilderForType();
      cis=CodedInputStream.newInstance(buf,offset,buf.length);
      int paramSize=cis.readRawVarint32();
      offset+=cis.getTotalBytesRead();
      if (builder != null) {
        param=builder.mergeFrom(buf,offset,paramSize).build();
      }
      offset+=paramSize;
    }
    if (header.hasCellBlockMeta()) {
      cellScanner=ipcUtil.createCellScanner(this.codec,this.compressionCodec,buf,offset,buf.length);
    }
  }
 catch (  Throwable t) {
    String msg=getListenerAddress() + " is unable to read call parameter from client " + getHostAddress();
    LOG.warn(msg,t);
    metrics.exception(t);
    if (t instanceof LinkageError) {
      t=new DoNotRetryIOException(t);
    }
    if (t instanceof UnsupportedOperationException) {
      t=new DoNotRetryIOException(t);
    }
    final Call readParamsFailedCall=new Call(id,this.service,null,null,null,null,this,responder,totalRequestSize,null,null);
    ByteArrayOutputStream responseBuffer=new ByteArrayOutputStream();
    setupResponse(responseBuffer,readParamsFailedCall,t,msg + "; " + t.getMessage());
    responder.doRespond(readParamsFailedCall);
    return;
  }
  TraceInfo traceInfo=header.hasTraceInfo() ? new TraceInfo(header.getTraceInfo().getTraceId(),header.getTraceInfo().getParentId()) : null;
  Call call=new Call(id,this.service,md,header,param,cellScanner,this,responder,totalRequestSize,traceInfo,RpcServer.getRemoteIp());
  scheduler.dispatch(new CallRunner(RpcServer.this,call));
}
