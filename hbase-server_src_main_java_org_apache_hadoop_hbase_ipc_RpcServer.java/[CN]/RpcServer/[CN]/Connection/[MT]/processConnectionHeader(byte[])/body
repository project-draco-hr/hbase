{
  this.connectionHeader=ConnectionHeader.parseFrom(buf);
  String serviceName=connectionHeader.getServiceName();
  if (serviceName == null)   throw new EmptyServiceNameException();
  this.service=getService(services,serviceName);
  if (this.service == null)   throw new UnknownServiceException(serviceName);
  setupCellBlockCodecs(this.connectionHeader);
  UserGroupInformation protocolUser=createUser(connectionHeader);
  if (!useSasl) {
    ugi=protocolUser;
    if (ugi != null) {
      ugi.setAuthenticationMethod(AuthMethod.SIMPLE.authenticationMethod);
    }
    if (authenticatedWithFallback) {
      LOG.warn("Allowed fallback to SIMPLE auth for " + ugi + " connecting from "+ getHostAddress());
    }
    AUDITLOG.info(AUTH_SUCCESSFUL_FOR + ugi);
  }
 else {
    ugi.setAuthenticationMethod(authMethod.authenticationMethod);
    if ((protocolUser != null) && (!protocolUser.getUserName().equals(ugi.getUserName()))) {
      if (authMethod == AuthMethod.DIGEST) {
        throw new AccessDeniedException("Authenticated user (" + ugi + ") doesn't match what the client claims to be ("+ protocolUser+ ")");
      }
 else {
        UserGroupInformation realUser=ugi;
        ugi=UserGroupInformation.createProxyUser(protocolUser.getUserName(),realUser);
        ugi.setAuthenticationMethod(AuthenticationMethod.PROXY);
      }
    }
  }
  if (connectionHeader.hasVersionInfo()) {
    retryImmediatelySupported=VersionInfoUtil.hasMinimumVersion(getVersionInfo(),1,2);
    AUDITLOG.info("Connection from " + this.hostAddress + " port: "+ this.remotePort+ " with version info: "+ TextFormat.shortDebugString(connectionHeader.getVersionInfo()));
  }
 else {
    AUDITLOG.info("Connection from " + this.hostAddress + " port: "+ this.remotePort+ " with unknown version info");
  }
}
