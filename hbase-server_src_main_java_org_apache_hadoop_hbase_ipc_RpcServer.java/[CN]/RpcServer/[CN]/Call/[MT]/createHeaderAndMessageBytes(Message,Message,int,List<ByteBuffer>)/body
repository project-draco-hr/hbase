{
  ByteBuffer possiblePBBuf=(cellBlockSize > 0) ? cellBlock.get(cellBlock.size() - 1) : null;
  int headerSerializedSize=0, resultSerializedSize=0, headerVintSize=0, resultVintSize=0;
  if (header != null) {
    headerSerializedSize=header.getSerializedSize();
    headerVintSize=CodedOutputStream.computeRawVarint32Size(headerSerializedSize);
  }
  if (result != null) {
    resultSerializedSize=result.getSerializedSize();
    resultVintSize=CodedOutputStream.computeRawVarint32Size(resultSerializedSize);
  }
  int totalSize=headerSerializedSize + headerVintSize + (resultSerializedSize + resultVintSize)+ cellBlockSize;
  int totalPBSize=headerSerializedSize + headerVintSize + resultSerializedSize+ resultVintSize+ Bytes.SIZEOF_INT;
  if (possiblePBBuf != null && possiblePBBuf.limit() + totalPBSize <= possiblePBBuf.capacity()) {
    ByteBuffer pbBuf=possiblePBBuf.duplicate();
    int limit=pbBuf.limit();
    pbBuf.position(limit);
    pbBuf.limit(totalPBSize + limit);
    pbBuf.mark();
    writeToCOS(result,header,totalSize,pbBuf);
    pbBuf.reset();
    return pbBuf;
  }
 else {
    return createHeaderAndMessageBytes(result,header,totalSize,totalPBSize);
  }
}
