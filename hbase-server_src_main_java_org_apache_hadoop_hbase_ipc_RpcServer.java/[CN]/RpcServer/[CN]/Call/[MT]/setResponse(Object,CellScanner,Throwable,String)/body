{
  if (this.isError)   return;
  if (t != null)   this.isError=true;
  BufferChain bc=null;
  try {
    ResponseHeader.Builder headerBuilder=ResponseHeader.newBuilder();
    Message result=(Message)m;
    headerBuilder.setCallId(this.id);
    if (t != null) {
      setExceptionResponse(t,errorMsg,headerBuilder);
    }
    List<ByteBuffer> cellBlock=null;
    int cellBlockSize=0;
    if (reservoir != null) {
      this.cellBlockStream=cellBlockBuilder.buildCellBlockStream(this.connection.codec,this.connection.compressionCodec,cells,reservoir);
      if (this.cellBlockStream != null) {
        cellBlock=this.cellBlockStream.getByteBuffers();
        cellBlockSize=this.cellBlockStream.size();
      }
    }
 else {
      ByteBuffer b=cellBlockBuilder.buildCellBlock(this.connection.codec,this.connection.compressionCodec,cells);
      if (b != null) {
        cellBlockSize=b.remaining();
        cellBlock=new ArrayList<ByteBuffer>(1);
        cellBlock.add(b);
      }
    }
    if (cellBlockSize > 0) {
      CellBlockMeta.Builder cellBlockBuilder=CellBlockMeta.newBuilder();
      cellBlockBuilder.setLength(cellBlockSize);
      headerBuilder.setCellBlockMeta(cellBlockBuilder.build());
    }
    Message header=headerBuilder.build();
    byte[] b=createHeaderAndMessageBytes(result,header,cellBlockSize);
    ByteBuffer[] responseBufs=null;
    int cellBlockBufferSize=0;
    if (cellBlock != null) {
      cellBlockBufferSize=cellBlock.size();
      responseBufs=new ByteBuffer[1 + cellBlockBufferSize];
    }
 else {
      responseBufs=new ByteBuffer[1];
    }
    responseBufs[0]=ByteBuffer.wrap(b);
    if (cellBlock != null) {
      for (int i=0; i < cellBlockBufferSize; i++) {
        responseBufs[i + 1]=cellBlock.get(i);
      }
    }
    bc=new BufferChain(responseBufs);
    if (connection.useWrap) {
      bc=wrapWithSasl(bc);
    }
  }
 catch (  IOException e) {
    LOG.warn("Exception while creating response " + e);
  }
  this.response=bc;
  if (this.callback != null) {
    try {
      this.callback.run();
    }
 catch (    Exception e) {
      LOG.warn("Exception while running the Rpc Callback.",e);
    }
  }
}
