{
  MonitoredRPCHandler status=getStatus();
  SERVER.set(RpcServer.this);
  try {
    status.setStatus("Setting up call");
    status.setConnection(call.connection.getHostAddress(),call.connection.getRemotePort());
    if (LOG.isDebugEnabled()) {
      UserGroupInformation remoteUser=call.connection.user;
      LOG.debug(call.toShortString() + " executing as " + ((remoteUser == null) ? "NULL principal" : remoteUser.getUserName()));
    }
    Throwable errorThrowable=null;
    String error=null;
    Pair<Message,CellScanner> resultPair=null;
    CurCall.set(call);
    TraceScope traceScope=null;
    try {
      if (!started) {
        throw new ServerNotRunningYetException("Server is not running yet");
      }
      if (call.tinfo != null) {
        traceScope=Trace.startSpan(call.toTraceString(),call.tinfo);
      }
      RequestContext.set(User.create(call.connection.user),getRemoteIp(),call.connection.service);
      resultPair=call(call.service,call.md,call.param,call.cellScanner,call.timestamp,status);
    }
 catch (    Throwable e) {
      LOG.debug(Thread.currentThread().getName() + ": " + call.toShortString(),e);
      errorThrowable=e;
      error=StringUtils.stringifyException(e);
    }
 finally {
      if (traceScope != null) {
        traceScope.close();
      }
      RequestContext.clear();
    }
    CurCall.set(null);
    callQueueSize.add(call.getSize() * -1);
    if (!call.isDelayed() || !call.isReturnValueDelayed()) {
      Message param=resultPair != null ? resultPair.getFirst() : null;
      CellScanner cells=resultPair != null ? resultPair.getSecond() : null;
      call.setResponse(param,cells,errorThrowable,error);
    }
    call.sendResponseIfReady();
    status.markComplete("Sent response");
    status.pause("Waiting for a call");
  }
 catch (  OutOfMemoryError e) {
    if (errorHandler != null) {
      if (errorHandler.checkOOME(e)) {
        LOG.info(Thread.currentThread().getName() + ": exiting on OutOfMemoryError");
        return;
      }
    }
 else {
      throw e;
    }
  }
catch (  ClosedChannelException cce) {
    LOG.warn(Thread.currentThread().getName() + ": caught a ClosedChannelException, " + "this means that the server was processing a "+ "request but the client went away. The error message was: "+ cce.getMessage());
  }
catch (  Exception e) {
    LOG.warn(Thread.currentThread().getName() + ": caught: " + StringUtils.stringifyException(e));
  }
}
