{
  this.server=server;
  this.services=services;
  this.isa=isa;
  this.conf=conf;
  this.socketSendBufferSize=0;
  this.maxQueueSize=this.conf.getInt("hbase.ipc.server.max.callqueue.size",DEFAULT_MAX_CALLQUEUE_SIZE);
  this.readThreads=conf.getInt("hbase.ipc.server.read.threadpool.size",10);
  this.maxIdleTime=2 * conf.getInt("hbase.ipc.client.connection.maxidletime",1000);
  this.maxConnectionsToNuke=conf.getInt("hbase.ipc.client.kill.max",10);
  this.thresholdIdleConnections=conf.getInt("hbase.ipc.client.idlethreshold",4000);
  this.purgeTimeout=conf.getLong("hbase.ipc.client.call.purge.timeout",2 * HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  this.warnResponseTime=conf.getInt(WARN_RESPONSE_TIME,DEFAULT_WARN_RESPONSE_TIME);
  this.warnResponseSize=conf.getInt(WARN_RESPONSE_SIZE,DEFAULT_WARN_RESPONSE_SIZE);
  listener=new Listener(name);
  this.port=listener.getAddress().getPort();
  this.metrics=new MetricsHBaseServer(name,new MetricsHBaseServerWrapperImpl(this));
  this.tcpNoDelay=conf.getBoolean("hbase.ipc.server.tcpnodelay",true);
  this.tcpKeepAlive=conf.getBoolean("hbase.ipc.server.tcpkeepalive",true);
  this.warnDelayedCalls=conf.getInt(WARN_DELAYED_CALLS,DEFAULT_WARN_DELAYED_CALLS);
  this.delayedCalls=new AtomicInteger(0);
  this.ipcUtil=new IPCUtil(conf);
  responder=new Responder();
  this.authorize=conf.getBoolean(HADOOP_SECURITY_AUTHORIZATION,false);
  this.userProvider=UserProvider.instantiate(conf);
  this.isSecurityEnabled=userProvider.isHBaseSecurityEnabled();
  if (isSecurityEnabled) {
    HBaseSaslRpcServer.init(conf);
  }
  this.scheduler=scheduler;
  this.scheduler.init(new RpcSchedulerContext(this));
}
