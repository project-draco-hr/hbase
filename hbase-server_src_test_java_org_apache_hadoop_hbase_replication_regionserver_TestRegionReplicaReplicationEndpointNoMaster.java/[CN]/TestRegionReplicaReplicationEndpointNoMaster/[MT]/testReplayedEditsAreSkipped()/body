{
  openRegion(HTU,rs0,hriSecondary);
  ClusterConnection connection=(ClusterConnection)ConnectionFactory.createConnection(HTU.getConfiguration());
  RegionReplicaReplicationEndpoint replicator=new RegionReplicaReplicationEndpoint();
  ReplicationEndpoint.Context context=mock(ReplicationEndpoint.Context.class);
  when(context.getConfiguration()).thenReturn(HTU.getConfiguration());
  when(context.getMetrics()).thenReturn(mock(MetricsSource.class));
  ReplicationPeer mockPeer=mock(ReplicationPeer.class);
  when(mockPeer.getTableCFs()).thenReturn(null);
  when(context.getReplicationPeer()).thenReturn(mockPeer);
  replicator.init(context);
  replicator.start();
  WALEntryFilter filter=replicator.getWALEntryfilter();
  HTU.loadNumericRows(table,f,0,1000);
  Assert.assertEquals(1000,entries.size());
  for (  Entry e : entries) {
    Cell _c=e.getEdit().getCells().get(0);
    if (Integer.parseInt(Bytes.toString(_c.getValueArray(),_c.getValueOffset(),_c.getValueLength())) % 2 == 0) {
      e.getKey().setOrigLogSeqNum(1);
    }
  }
  long skipped=0, replayed=0;
  for (  Entry e : entries) {
    if (filter.filter(e) == null) {
      skipped++;
    }
 else {
      replayed++;
    }
  }
  assertEquals(500,skipped);
  assertEquals(500,replayed);
  HTU.deleteNumericRows(table,f,0,1000);
  closeRegion(HTU,rs0,hriSecondary);
  connection.close();
}
