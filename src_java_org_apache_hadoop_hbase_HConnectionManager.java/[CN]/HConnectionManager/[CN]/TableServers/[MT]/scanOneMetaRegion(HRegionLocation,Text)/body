{
  HRegionInterface server=getHRegionConnection(t.getServerAddress());
  TreeMap<Text,HRegionLocation> servers=new TreeMap<Text,HRegionLocation>();
  for (int tries=0; servers.size() == 0 && tries < numRetries; tries++) {
    long scannerId=-1L;
    try {
      scannerId=server.openScanner(t.getRegionInfo().getRegionName(),COLUMN_FAMILY_ARRAY,tableName,System.currentTimeMillis(),null);
      while (true) {
        HRegionInfo regionInfo=null;
        String serverAddress=null;
        KeyedData[] values=server.next(scannerId);
        if (values.length == 0) {
          if (servers.size() == 0) {
            throw new TableNotFoundException("table '" + tableName + "' does not exist in "+ t);
          }
          if (LOG.isDebugEnabled()) {
            LOG.debug("Found " + servers.size() + " server(s) for "+ "location: "+ t+ " for tablename "+ tableName);
          }
          break;
        }
        byte[] bytes=null;
        TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
        for (int i=0; i < values.length; i++) {
          results.put(values[i].getKey().getColumn(),values[i].getData());
        }
        regionInfo=new HRegionInfo();
        regionInfo=(HRegionInfo)Writables.getWritable(results.get(COL_REGIONINFO),regionInfo);
        if (!regionInfo.tableDesc.getName().equals(tableName)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Found " + servers.size() + " servers for table "+ tableName);
          }
          break;
        }
        if (regionInfo.isOffline() && !regionInfo.isSplit()) {
          throw new IllegalStateException("table offline: " + tableName);
        }
        bytes=results.get(COL_SERVER);
        if (bytes == null || bytes.length == 0) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("no server address for " + regionInfo.toString());
          }
          servers.clear();
          break;
        }
        serverAddress=Writables.bytesToString(bytes);
        servers.put(regionInfo.startKey,new HRegionLocation(regionInfo,new HServerAddress(serverAddress)));
      }
    }
 catch (    IOException e) {
      if (tries == numRetries - 1) {
        if (e instanceof RemoteException) {
          e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
        }
        throw e;
      }
    }
 finally {
      if (scannerId != -1L) {
        try {
          server.close(scannerId);
        }
 catch (        Exception ex) {
          LOG.warn(ex);
        }
      }
    }
    if (servers.size() == 0 && tries == numRetries - 1) {
      throw new NoServerForRegionException("failed to find server for " + tableName + " after "+ numRetries+ " retries");
    }
    if (servers.size() <= 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Sleeping. Table " + tableName + " not currently being served.");
      }
      try {
        Thread.sleep(pause);
      }
 catch (      InterruptedException ie) {
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Wake. Retry finding table " + tableName);
      }
    }
  }
  return servers;
}
