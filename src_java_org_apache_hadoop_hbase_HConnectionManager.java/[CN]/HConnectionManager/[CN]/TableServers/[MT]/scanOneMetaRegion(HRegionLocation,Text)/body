{
  HRegionInterface server=getHRegionConnection(t.getServerAddress());
  TreeMap<Text,HRegionLocation> servers=new TreeMap<Text,HRegionLocation>();
  long scannerId=-1L;
  try {
    scannerId=server.openScanner(t.getRegionInfo().getRegionName(),COLUMN_FAMILY_ARRAY,tableName,System.currentTimeMillis(),null);
    while (true) {
      HbaseMapWritable values=server.next(scannerId);
      if (values == null || values.size() == 0) {
        if (servers.size() == 0) {
          throw new TableNotFoundException("table '" + tableName + "' does not exist in "+ t);
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug("Found " + servers.size() + " region(s) for "+ tableName+ " at "+ t);
        }
        break;
      }
      SortedMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
      for (      Map.Entry<Writable,Writable> e : values.entrySet()) {
        HStoreKey key=(HStoreKey)e.getKey();
        results.put(key.getColumn(),((ImmutableBytesWritable)e.getValue()).get());
      }
      byte[] bytes=results.get(COL_REGIONINFO);
      if (bytes == null || bytes.length == 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(COL_REGIONINFO.toString() + " came back empty: " + results.toString());
        }
        servers.clear();
        break;
      }
      HRegionInfo regionInfo=(HRegionInfo)Writables.getWritable(results.get(COL_REGIONINFO),new HRegionInfo());
      if (!regionInfo.getTableDesc().getName().equals(tableName)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Found " + servers.size() + " servers for table "+ tableName);
        }
        break;
      }
      if (regionInfo.isSplit()) {
        continue;
      }
      if (regionInfo.isOffline()) {
        throw new IllegalStateException("table offline: " + tableName);
      }
      bytes=results.get(COL_SERVER);
      if (bytes == null || bytes.length == 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("no server address for " + regionInfo.toString());
        }
        servers.clear();
        break;
      }
      String serverAddress=Writables.bytesToString(bytes);
      servers.put(regionInfo.getStartKey(),new HRegionLocation(regionInfo,new HServerAddress(serverAddress)));
    }
  }
 catch (  IOException e) {
    if (e instanceof RemoteException) {
      e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
    }
    throw e;
  }
 finally {
    if (scannerId != -1L) {
      try {
        server.close(scannerId);
      }
 catch (      Exception ex) {
        LOG.warn(ex);
      }
    }
  }
  return servers;
}
