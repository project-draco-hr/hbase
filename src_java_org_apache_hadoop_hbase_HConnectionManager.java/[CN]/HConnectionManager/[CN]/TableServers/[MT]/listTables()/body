{
  HashSet<HTableDescriptor> uniqueTables=new HashSet<HTableDescriptor>();
  long scannerId=-1L;
  HRegionInterface server=null;
  Text startRow=EMPTY_START_ROW;
  HRegionLocation metaLocation=null;
  do {
    try {
      metaLocation=locateRegion(META_TABLE_NAME,startRow);
      server=getHRegionConnection(metaLocation.getServerAddress());
      scannerId=server.openScanner(metaLocation.getRegionInfo().getRegionName(),COLUMN_FAMILY_ARRAY,EMPTY_START_ROW,LATEST_TIMESTAMP,null);
      while (true) {
        HbaseMapWritable values=server.next(scannerId);
        if (values == null || values.size() == 0) {
          break;
        }
        for (        Map.Entry<Writable,Writable> e : values.entrySet()) {
          HStoreKey key=(HStoreKey)e.getKey();
          if (key.getColumn().equals(COL_REGIONINFO)) {
            HRegionInfo info=new HRegionInfo();
            info=(HRegionInfo)Writables.getWritable(((ImmutableBytesWritable)e.getValue()).get(),info);
            if (info.getStartKey().getLength() == 0) {
              uniqueTables.add(info.getTableDesc());
            }
          }
        }
      }
      server.close(scannerId);
      scannerId=-1L;
      startRow=metaLocation.getRegionInfo().getEndKey();
    }
 catch (    IOException e) {
      throw e;
    }
 finally {
      if (scannerId != -1L) {
        server.close(scannerId);
      }
    }
  }
 while (startRow.compareTo(EMPTY_START_ROW) != 0);
  return uniqueTables.toArray(new HTableDescriptor[uniqueTables.size()]);
}
