{
  HTableDescriptor.isLegalTableName(desc.getName());
  try {
    createTableAsync(desc,splitKeys);
  }
 catch (  SocketTimeoutException ste) {
    LOG.warn("Creating " + desc.getNameAsString() + " took too long",ste);
  }
  int numRegs=splitKeys == null ? 1 : splitKeys.length + 1;
  int prevRegCount=0;
  boolean doneWithMetaScan=false;
  for (int tries=0; tries < this.numRetries * this.retryLongerMultiplier; ++tries) {
    if (!doneWithMetaScan) {
      final AtomicInteger actualRegCount=new AtomicInteger(0);
      MetaScannerVisitor visitor=new MetaScannerVisitorBase(){
        @Override public boolean processRow(        Result rowResult) throws IOException {
          if (rowResult == null || rowResult.size() <= 0) {
            return true;
          }
          HRegionInfo info=MetaReader.parseHRegionInfoFromCatalogResult(rowResult,HConstants.REGIONINFO_QUALIFIER);
          if (info == null) {
            LOG.warn("No serialized HRegionInfo in " + rowResult);
            return true;
          }
          if (!(Bytes.equals(info.getTableName(),desc.getName()))) {
            return false;
          }
          String hostAndPort=null;
          byte[] value=rowResult.getValue(HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER);
          if (value != null && value.length > 0) {
            hostAndPort=Bytes.toString(value);
          }
          if (!(info.isOffline() || info.isSplit()) && hostAndPort != null) {
            actualRegCount.incrementAndGet();
          }
          return true;
        }
      }
;
      MetaScanner.metaScan(conf,visitor,desc.getName());
      if (actualRegCount.get() != numRegs) {
        if (tries == this.numRetries * this.retryLongerMultiplier - 1) {
          throw new RegionOfflineException("Only " + actualRegCount.get() + " of "+ numRegs+ " regions are online; retries exhausted.");
        }
        try {
          Thread.sleep(getPauseTime(tries));
        }
 catch (        InterruptedException e) {
          throw new InterruptedIOException("Interrupted when opening" + " regions; " + actualRegCount.get() + " of "+ numRegs+ " regions processed so far");
        }
        if (actualRegCount.get() > prevRegCount) {
          prevRegCount=actualRegCount.get();
          tries=-1;
        }
      }
 else {
        doneWithMetaScan=true;
        tries=-1;
      }
    }
 else     if (isTableEnabled(desc.getName())) {
      return;
    }
 else {
      try {
        Thread.sleep(getPauseTime(tries));
      }
 catch (      InterruptedException e) {
        throw new InterruptedIOException("Interrupted when waiting" + " for table to be enabled; meta scan was done");
      }
    }
  }
  throw new TableNotEnabledException("Retries exhausted while still waiting for table: " + desc.getNameAsString() + " to be enabled");
}
