{
  TableName TABLE=TableName.valueOf("testHTableMultiplexer");
  final int NUM_REGIONS=10;
  final int VERSION=3;
  List<Put> failedPuts;
  boolean success;
  HTableMultiplexer multiplexer=new HTableMultiplexer(TEST_UTIL.getConfiguration(),PER_REGIONSERVER_QUEUE_SIZE);
  HTable ht=TEST_UTIL.createTable(TABLE,new byte[][]{FAMILY},VERSION,Bytes.toBytes("aaaaa"),Bytes.toBytes("zzzzz"),NUM_REGIONS);
  TEST_UTIL.waitUntilAllRegionsAssigned(TABLE);
  byte[][] startRows=ht.getStartKeys();
  byte[][] endRows=ht.getEndKeys();
  for (int i=0; i < NUM_REGIONS; i++) {
    byte[] row=startRows[i];
    if (row == null || row.length <= 0)     continue;
    Put put=new Put(row);
    put.add(FAMILY,QUALIFIER,VALUE1);
    success=multiplexer.put(TABLE,put);
    assertTrue(success);
    LOG.info("Put for " + Bytes.toString(startRows[i]) + " @ iteration "+ (i + 1));
    Get get=new Get(startRows[i]);
    get.addColumn(FAMILY,QUALIFIER);
    Result r;
    int nbTry=0;
    do {
      assertTrue(nbTry++ < 50);
      Thread.sleep(100);
      r=ht.get(get);
    }
 while (r == null || r.getValue(FAMILY,QUALIFIER) == null);
    assertEquals(0,Bytes.compareTo(VALUE1,r.getValue(FAMILY,QUALIFIER)));
  }
  List<Put> multiput=new ArrayList<Put>();
  for (int i=0; i < NUM_REGIONS; i++) {
    byte[] row=endRows[i];
    if (row == null || row.length <= 0)     continue;
    Put put=new Put(row);
    put.add(FAMILY,QUALIFIER,VALUE2);
    multiput.add(put);
  }
  failedPuts=multiplexer.put(TABLE,multiput);
  assertTrue(failedPuts == null);
  for (int i=0; i < NUM_REGIONS; i++) {
    byte[] row=endRows[i];
    if (row == null || row.length <= 0)     continue;
    Get get=new Get(row);
    get.addColumn(FAMILY,QUALIFIER);
    Result r;
    int nbTry=0;
    do {
      assertTrue(nbTry++ < 50);
      Thread.sleep(100);
      r=ht.get(get);
    }
 while (r == null || r.getValue(FAMILY,QUALIFIER) == null || Bytes.compareTo(VALUE2,r.getValue(FAMILY,QUALIFIER)) != 0);
  }
}
