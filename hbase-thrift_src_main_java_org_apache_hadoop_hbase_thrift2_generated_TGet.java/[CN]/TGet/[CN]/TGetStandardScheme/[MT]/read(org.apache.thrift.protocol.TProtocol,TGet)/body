{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.row=iprot.readBinary();
        struct.setRowIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list16=iprot.readListBegin();
      struct.columns=new ArrayList<TColumn>(_list16.size);
      TColumn _elem17;
      for (int _i18=0; _i18 < _list16.size; ++_i18) {
        _elem17=new TColumn();
        _elem17.read(iprot);
        struct.columns.add(_elem17);
      }
      iprot.readListEnd();
    }
    struct.setColumnsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.timestamp=iprot.readI64();
struct.setTimestampIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.timeRange=new TTimeRange();
struct.timeRange.read(iprot);
struct.setTimeRangeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.maxVersions=iprot.readI32();
struct.setMaxVersionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.filterString=iprot.readBinary();
struct.setFilterStringIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map19=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map19.size);
ByteBuffer _key20;
ByteBuffer _val21;
for (int _i22=0; _i22 < _map19.size; ++_i22) {
_key20=iprot.readBinary();
_val21=iprot.readBinary();
struct.attributes.put(_key20,_val21);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.authorizations=new TAuthorization();
struct.authorizations.read(iprot);
struct.setAuthorizationsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
