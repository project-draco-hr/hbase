{
  int numTrials=6;
  int trialPause=1000;
  int cleanUpInterval=100;
  Configuration conf=new Configuration(UTIL.getConfiguration());
  conf.setInt(ThriftHBaseServiceHandler.MAX_IDLETIME,(numTrials / 2) * trialPause);
  conf.setInt(ThriftHBaseServiceHandler.CLEANUP_INTERVAL,cleanUpInterval);
  ThriftHBaseServiceHandler handler=new ThriftHBaseServiceHandler(conf,UserProvider.instantiate(conf));
  ByteBuffer table=wrap(tableAname);
  TColumnValue columnValue=new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(valueAname));
  List<TColumnValue> columnValues=new ArrayList<TColumnValue>();
  columnValues.add(columnValue);
  for (int i=0; i < numTrials; i++) {
    TPut put=new TPut(wrap(("testScan" + i).getBytes()),columnValues);
    handler.put(table,put);
  }
  TScan scan=new TScan();
  List<TColumn> columns=new ArrayList<TColumn>();
  TColumn column=new TColumn();
  column.setFamily(familyAname);
  column.setQualifier(qualifierAname);
  columns.add(column);
  scan.setColumns(columns);
  scan.setStartRow("testScan".getBytes());
  scan.setStopRow("testScan\uffff".getBytes());
  scan.setCaching(1);
  int scanId=handler.openScanner(table,scan);
  for (int i=0; i < numTrials; i++) {
    List<TResult> results=handler.getScannerRows(scanId,1);
    assertArrayEquals(("testScan" + i).getBytes(),results.get(0).getRow());
    Thread.sleep(trialPause);
  }
}
