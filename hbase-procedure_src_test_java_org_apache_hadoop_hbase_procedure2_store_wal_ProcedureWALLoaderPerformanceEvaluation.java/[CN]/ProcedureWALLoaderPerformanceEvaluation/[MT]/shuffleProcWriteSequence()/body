{
  Random rand=new Random();
  List<Integer> procStatesSequence=new ArrayList<>();
  Set<Integer> toBeDeletedProcs=new HashSet<>();
  for (int procId=1; procId <= numProcs; ++procId) {
    procStatesSequence.addAll(Collections.nCopies(updatesPerProc + 1,procId));
    if (rand.nextFloat() < deleteProcsFraction) {
      procStatesSequence.add(procId);
      toBeDeletedProcs.add(procId);
    }
  }
  Collections.shuffle(procStatesSequence);
  for (int i=procStatesSequence.size() - 1; i >= 0; --i) {
    int procId=procStatesSequence.get(i);
    if (toBeDeletedProcs.contains(procId)) {
      procStatesSequence.set(i,-1 * procId);
      toBeDeletedProcs.remove(procId);
    }
  }
  return procStatesSequence;
}
