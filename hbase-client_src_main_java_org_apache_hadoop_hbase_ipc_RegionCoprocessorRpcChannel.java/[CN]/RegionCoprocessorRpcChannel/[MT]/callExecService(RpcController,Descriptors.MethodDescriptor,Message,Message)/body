{
  if (LOG.isTraceEnabled()) {
    LOG.trace("Call: " + method.getName() + ", "+ request.toString());
  }
  if (row == null) {
    throw new IllegalArgumentException("Missing row property for remote region location");
  }
  final RpcController rpcController=controller == null ? rpcControllerFactory.newController() : controller;
  final ClientProtos.CoprocessorServiceCall call=CoprocessorRpcUtils.buildServiceCall(row,method,request);
  RegionServerCallable<CoprocessorServiceResponse> callable=new RegionServerCallable<CoprocessorServiceResponse>(connection,table,row){
    @Override public CoprocessorServiceResponse call(    int callTimeout) throws Exception {
      if (rpcController instanceof PayloadCarryingRpcController) {
        ((PayloadCarryingRpcController)rpcController).setPriority(tableName);
      }
      if (rpcController instanceof TimeLimitedRpcController) {
        ((TimeLimitedRpcController)rpcController).setCallTimeout(callTimeout);
      }
      byte[] regionName=getLocation().getRegionInfo().getRegionName();
      return ProtobufUtil.execService(rpcController,getStub(),call,regionName);
    }
  }
;
  CoprocessorServiceResponse result=rpcCallerFactory.<CoprocessorServiceResponse>newCaller().callWithRetries(callable,operationTimeout);
  Message response=null;
  if (result.getValue().hasValue()) {
    Message.Builder builder=responsePrototype.newBuilderForType();
    ProtobufUtil.mergeFrom(builder,result.getValue().getValue());
    response=builder.build();
  }
 else {
    response=responsePrototype.getDefaultInstanceForType();
  }
  lastRegion=result.getRegion().getValue().toByteArray();
  if (LOG.isTraceEnabled()) {
    LOG.trace("Result is region=" + Bytes.toStringBinary(lastRegion) + ", value="+ response);
  }
  return response;
}
