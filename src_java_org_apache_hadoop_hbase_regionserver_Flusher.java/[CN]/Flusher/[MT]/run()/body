{
  long lastOptionalCheck=System.currentTimeMillis();
  while (!server.isStopRequested()) {
    HRegion r=null;
    try {
      long now=System.currentTimeMillis();
      if (now - threadWakeFrequency > lastOptionalCheck) {
        lastOptionalCheck=now;
        Set<HRegion> regions=server.getRegionsToCheck();
        for (        HRegion region : regions) {
synchronized (regionsInQueue) {
            if (!regionsInQueue.contains(region) && (now - optionalFlushPeriod) > region.getLastFlushTime()) {
              regionsInQueue.add(region);
              flushQueue.add(region);
              region.setLastFlushTime(now);
            }
          }
        }
      }
      r=flushQueue.poll(threadWakeFrequency,TimeUnit.MILLISECONDS);
      if (r != null) {
synchronized (regionsInQueue) {
          regionsInQueue.remove(r);
        }
synchronized (lock) {
          if (r.flushcache()) {
            server.compactSplitThread.compactionRequested(r);
          }
        }
      }
    }
 catch (    InterruptedException ex) {
      continue;
    }
catch (    ConcurrentModificationException ex) {
      continue;
    }
catch (    DroppedSnapshotException ex) {
      LOG.fatal("Replay of hlog required. Forcing server restart",ex);
      if (!server.checkFileSystem()) {
        break;
      }
      server.stop();
    }
catch (    IOException ex) {
      LOG.error("Cache flush failed" + (r != null ? (" for region " + r.getRegionName()) : ""),RemoteExceptionHandler.checkIOException(ex));
      if (!server.checkFileSystem()) {
        break;
      }
    }
catch (    Exception ex) {
      LOG.error("Cache flush failed" + (r != null ? (" for region " + r.getRegionName()) : ""),ex);
      if (!server.checkFileSystem()) {
        break;
      }
    }
  }
  regionsInQueue.clear();
  flushQueue.clear();
  LOG.info(getName() + " exiting");
}
