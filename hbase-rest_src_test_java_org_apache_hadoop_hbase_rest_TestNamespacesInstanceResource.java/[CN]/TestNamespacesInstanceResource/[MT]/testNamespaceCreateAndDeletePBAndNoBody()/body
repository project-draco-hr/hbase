{
  String namespacePath3="/namespaces/" + NAMESPACE3;
  String namespacePath4="/namespaces/" + NAMESPACE4;
  NamespacesInstanceModel model3;
  NamespacesInstanceModel model4;
  Response response;
  Admin admin=TEST_UTIL.getHBaseAdmin();
  assertNull(findNamespace(admin,NAMESPACE3));
  assertNull(findNamespace(admin,NAMESPACE4));
  model3=testNamespacesInstanceModel.buildTestModel(NAMESPACE3,NAMESPACE3_PROPS);
  testNamespacesInstanceModel.checkModel(model3,NAMESPACE3,NAMESPACE3_PROPS);
  model4=testNamespacesInstanceModel.buildTestModel(NAMESPACE4,NAMESPACE4_PROPS);
  testNamespacesInstanceModel.checkModel(model4,NAMESPACE4,NAMESPACE4_PROPS);
  response=client.put(namespacePath3,Constants.MIMETYPE_BINARY,new byte[]{});
  assertEquals(403,response.getCode());
  response=client.put(namespacePath4,Constants.MIMETYPE_PROTOBUF,model4.createProtobufOutput());
  assertEquals(403,response.getCode());
  conf.set("hbase.rest.readonly","true");
  response=client.post(namespacePath3,Constants.MIMETYPE_BINARY,new byte[]{});
  assertEquals(403,response.getCode());
  response=client.put(namespacePath4,Constants.MIMETYPE_PROTOBUF,model4.createProtobufOutput());
  assertEquals(403,response.getCode());
  NamespaceDescriptor nd3=findNamespace(admin,NAMESPACE3);
  NamespaceDescriptor nd4=findNamespace(admin,NAMESPACE4);
  assertNull(nd3);
  assertNull(nd4);
  conf.set("hbase.rest.readonly","false");
  response=client.post(namespacePath3,Constants.MIMETYPE_BINARY,new byte[]{});
  assertEquals(201,response.getCode());
  response=client.post(namespacePath4,Constants.MIMETYPE_PROTOBUF,model4.createProtobufOutput());
  assertEquals(201,response.getCode());
  nd3=findNamespace(admin,NAMESPACE3);
  nd4=findNamespace(admin,NAMESPACE4);
  assertNotNull(nd3);
  assertNotNull(nd4);
  checkNamespaceProperties(nd3,new HashMap<String,String>());
  checkNamespaceProperties(nd4,NAMESPACE4_PROPS);
  response=client.post(namespacePath3,Constants.MIMETYPE_BINARY,new byte[]{});
  assertEquals(403,response.getCode());
  response=client.post(namespacePath4,Constants.MIMETYPE_PROTOBUF,model4.createProtobufOutput());
  assertEquals(403,response.getCode());
  conf.set("hbase.rest.readonly","true");
  response=client.delete(namespacePath3);
  assertEquals(403,response.getCode());
  response=client.delete(namespacePath4);
  assertEquals(403,response.getCode());
  nd3=findNamespace(admin,NAMESPACE3);
  nd4=findNamespace(admin,NAMESPACE4);
  assertNotNull(nd3);
  assertNotNull(nd4);
  conf.set("hbase.rest.readonly","false");
  response=client.delete(namespacePath3);
  assertEquals(200,response.getCode());
  response=client.delete(namespacePath4);
  assertEquals(200,response.getCode());
  nd3=findNamespace(admin,NAMESPACE3);
  nd4=findNamespace(admin,NAMESPACE4);
  assertNull(nd3);
  assertNull(nd4);
}
