{
  String namespacePath1="/namespaces/" + NAMESPACE1;
  String namespacePath2="/namespaces/" + NAMESPACE2;
  String namespacePath3="/namespaces/" + NAMESPACE3;
  NamespacesInstanceModel model1;
  NamespacesInstanceModel model2;
  NamespacesInstanceModel model3;
  Response response;
  Admin admin=TEST_UTIL.getHBaseAdmin();
  assertNull(findNamespace(admin,NAMESPACE1));
  assertNull(findNamespace(admin,NAMESPACE2));
  assertNull(findNamespace(admin,NAMESPACE3));
  model1=testNamespacesInstanceModel.buildTestModel(NAMESPACE1,NAMESPACE1_PROPS);
  testNamespacesInstanceModel.checkModel(model1,NAMESPACE1,NAMESPACE1_PROPS);
  model2=testNamespacesInstanceModel.buildTestModel(NAMESPACE2,NAMESPACE2_PROPS);
  testNamespacesInstanceModel.checkModel(model2,NAMESPACE2,NAMESPACE2_PROPS);
  model3=testNamespacesInstanceModel.buildTestModel(NAMESPACE3,NAMESPACE3_PROPS);
  testNamespacesInstanceModel.checkModel(model3,NAMESPACE3,NAMESPACE3_PROPS);
  response=client.post(namespacePath1,Constants.MIMETYPE_JSON,toXML(model1));
  assertEquals(500,response.getCode());
  String jsonString=jsonMapper.writeValueAsString(model2);
  response=client.put(namespacePath2,Constants.MIMETYPE_XML,Bytes.toBytes(jsonString));
  assertEquals(400,response.getCode());
  response=client.post(namespacePath3,Constants.MIMETYPE_PROTOBUF,toXML(model1));
  assertEquals(500,response.getCode());
  NamespaceDescriptor nd1=findNamespace(admin,NAMESPACE1);
  NamespaceDescriptor nd2=findNamespace(admin,NAMESPACE2);
  NamespaceDescriptor nd3=findNamespace(admin,NAMESPACE3);
  assertNull(nd1);
  assertNull(nd2);
  assertNull(nd3);
}
