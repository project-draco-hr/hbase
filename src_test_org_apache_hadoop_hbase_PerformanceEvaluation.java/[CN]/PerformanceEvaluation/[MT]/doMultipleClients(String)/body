{
  final List<Thread> threads=new ArrayList<Thread>(this.N);
  final int perClientRows=R / N;
  for (int i=0; i < this.N; i++) {
    Thread t=new Thread(Integer.toString(i)){
      @Override public void run(){
        super.run();
        PerformanceEvaluation pe=new PerformanceEvaluation(conf);
        int index=Integer.parseInt(getName());
        try {
          long elapsedTime=pe.runOneClient(cmd,index * perClientRows,perClientRows,perClientRows,new Status(){
            public void setStatus(            final String msg) throws IOException {
              LOG.info("client-" + getName() + " "+ msg);
            }
          }
);
          LOG.info("Finished " + getName() + " in "+ elapsedTime+ "ms writing "+ perClientRows+ " rows");
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    threads.add(t);
  }
  for (  Thread t : threads) {
    t.start();
  }
  for (  Thread t : threads) {
    while (t.isAlive()) {
      try {
        t.join();
      }
 catch (      InterruptedException e) {
        LOG.debug("Interrupted, continuing" + e.toString());
      }
    }
  }
}
