{
  status.setStatus("Start " + cmd + " at offset "+ startRow+ " for "+ perClientRunRows+ " rows");
  long totalElapsedTime=0;
  if (cmd.equals(RANDOM_READ)) {
    Test t=new RandomReadTest(this.client,startRow,perClientRunRows,totalRows,status);
    totalElapsedTime=t.test();
  }
 else   if (cmd.equals(RANDOM_READ_MEM)) {
    throw new UnsupportedOperationException("Not yet implemented");
  }
 else   if (cmd.equals(RANDOM_WRITE)) {
    Test t=new RandomWriteTest(this.client,startRow,perClientRunRows,totalRows,status);
    totalElapsedTime=t.test();
  }
 else   if (cmd.equals(SCAN)) {
    Test t=new ScanTest(this.client,startRow,perClientRunRows,totalRows,status);
    totalElapsedTime=t.test();
  }
 else   if (cmd.equals(SEQUENTIAL_READ)) {
    Test t=new SequentialReadTest(this.client,startRow,perClientRunRows,totalRows,status);
    totalElapsedTime=t.test();
  }
 else   if (cmd.equals(SEQUENTIAL_WRITE)) {
    Test t=new SequentialWriteTest(this.client,startRow,perClientRunRows,totalRows,status);
    totalElapsedTime=t.test();
  }
 else {
    new IllegalArgumentException("Invalid command value: " + cmd);
  }
  status.setStatus("Finished " + cmd + " in "+ totalElapsedTime+ "ms at offset "+ startRow+ " for "+ perClientRunRows+ " rows");
  return totalElapsedTime;
}
