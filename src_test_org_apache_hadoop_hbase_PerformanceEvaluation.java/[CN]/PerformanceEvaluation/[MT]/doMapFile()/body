{
  final int ROW_COUNT=1000000;
  Random random=new Random();
  Configuration c=new Configuration();
  FileSystem fs=FileSystem.get(c);
  Path mf=new Path("performanceevaluation.mapfile");
  if (fs.exists(mf)) {
    fs.delete(mf);
  }
  Writer writer=new MapFile.Writer(c,fs,mf.toString(),Text.class,Text.class);
  LOG.info("Writing " + ROW_COUNT + " rows to "+ mf.toString());
  long startTime=System.currentTimeMillis();
  for (int i=0; i < ROW_COUNT; i++) {
    writer.append(PerformanceEvaluation.format(i),new Text(PerformanceEvaluation.generateValue(random)));
  }
  writer.close();
  LOG.info("Writing " + ROW_COUNT + " records took "+ (System.currentTimeMillis() - startTime)+ "ms");
  LOG.info("Reading " + ROW_COUNT + " random rows");
  MapFile.Reader reader=new MapFile.Reader(fs,mf.toString(),c);
  startTime=System.currentTimeMillis();
  for (int i=0; i < ROW_COUNT; i++) {
    if (i > 0 && i % (ROW_COUNT / 10) == 0) {
      LOG.info("Read " + i);
    }
    reader.get(PerformanceEvaluation.getRandomRow(random,ROW_COUNT),new Text());
  }
  reader.close();
  LOG.info("Reading " + ROW_COUNT + " random records took "+ (System.currentTimeMillis() - startTime)+ "ms");
  LOG.info("Reading " + ROW_COUNT + " rows sequentially");
  reader=new MapFile.Reader(fs,mf.toString(),c);
  startTime=System.currentTimeMillis();
  Text key=new Text();
  Text val=new Text();
  for (int i=0; reader.next(key,val); i++) {
    continue;
  }
  reader.close();
  LOG.info("Reading " + ROW_COUNT + " records serially took "+ (System.currentTimeMillis() - startTime)+ "ms");
}
