{
  init(UTIL.getConfiguration(),100);
  byte[] dummyData=makeDummyData(200);
  Table loader=new RegionAsTable(region);
  int numHfiles=compactionThreshold - 1;
  byte[] deleteRow=Bytes.add(STARTROW,Bytes.toBytes(0));
  for (int i=0; i < numHfiles; i++) {
    Put p=createPut(i,dummyData);
    loader.put(p);
    region.flush(true);
  }
  assertEquals("Before compaction: store files",numHfiles,countStoreFiles());
  assertEquals("Before compaction: mob file count",numHfiles,countMobFiles());
  assertEquals("Before compaction: rows",numHfiles,countRows());
  assertEquals("Before compaction: mob rows",numHfiles,countMobRows());
  assertEquals("Before compaction: number of mob cells",numHfiles,countMobCellsInMetadata());
  Delete delete=new Delete(deleteRow);
  delete.addFamily(COLUMN_FAMILY);
  region.delete(delete);
  region.flush(true);
  assertEquals("Before compaction: store files",numHfiles + 1,countStoreFiles());
  assertEquals("Before compaction: mob files",numHfiles,countMobFiles());
  region.compact(true);
  assertEquals("After compaction: store files",1,countStoreFiles());
  assertEquals("After compaction: mob files",numHfiles + 1,countMobFiles());
  Scan scan=new Scan();
  scan.setRaw(true);
  InternalScanner scanner=region.getScanner(scan);
  List<Cell> results=new ArrayList<>();
  scanner.next(results);
  int deleteCount=0;
  while (!results.isEmpty()) {
    for (    Cell c : results) {
      if (c.getTypeByte() == KeyValue.Type.DeleteFamily.getCode()) {
        deleteCount++;
        assertTrue(Bytes.equals(CellUtil.cloneRow(c),deleteRow));
      }
    }
    results.clear();
    scanner.next(results);
  }
  assertEquals(0,deleteCount);
  scanner.close();
  assertEquals("The cells in mob files",numHfiles - 1,countMobCellsInMobFiles(1));
}
