{
  final TreeMap<FieldDescriptor,Object> result=new TreeMap<FieldDescriptor,Object>();
  final Descriptor descriptor=internalGetFieldAccessorTable().descriptor;
  final List<FieldDescriptor> fields=descriptor.getFields();
  for (int i=0; i < fields.size(); i++) {
    FieldDescriptor field=fields.get(i);
    final OneofDescriptor oneofDescriptor=field.getContainingOneof();
    if (oneofDescriptor != null) {
      i+=oneofDescriptor.getFieldCount() - 1;
      if (!hasOneof(oneofDescriptor)) {
        continue;
      }
      field=getOneofFieldDescriptor(oneofDescriptor);
    }
 else {
      if (field.isRepeated()) {
        final List<?> value=(List<?>)getField(field);
        if (!value.isEmpty()) {
          result.put(field,value);
        }
        continue;
      }
      if (!hasField(field)) {
        continue;
      }
    }
    if (getBytesForString && field.getJavaType() == FieldDescriptor.JavaType.STRING) {
      result.put(field,getFieldRaw(field));
    }
 else {
      result.put(field,getField(field));
    }
  }
  return result;
}
