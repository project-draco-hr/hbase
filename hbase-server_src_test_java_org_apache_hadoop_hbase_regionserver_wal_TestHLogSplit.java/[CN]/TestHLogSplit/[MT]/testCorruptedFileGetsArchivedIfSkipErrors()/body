{
  conf.setBoolean(HBASE_SKIP_ERRORS,true);
  Class<?> backupClass=conf.getClass("hbase.regionserver.hlog.reader.impl",Reader.class);
  InstrumentedSequenceFileLogWriter.activateFailure=false;
  HLogFactory.resetLogReaderClass();
  try {
    Path c1=new Path(HLOGDIR,HLOG_FILE_PREFIX + "0");
    conf.setClass("hbase.regionserver.hlog.reader.impl",FaultySequenceFileLogReader.class,HLog.Reader.class);
    for (    FaultySequenceFileLogReader.FailureType failureType : FaultySequenceFileLogReader.FailureType.values()) {
      conf.set("faultysequencefilelogreader.failuretype",failureType.name());
      generateHLogs(1,ENTRIES,-1);
      fs.initialize(fs.getUri(),conf);
      HLogSplitter logSplitter=HLogSplitter.createLogSplitter(conf,HBASEDIR,HLOGDIR,OLDLOGDIR,fs);
      logSplitter.splitLog();
      FileStatus[] archivedLogs=fs.listStatus(CORRUPTDIR);
      assertEquals("expected a different file",c1.getName(),archivedLogs[0].getPath().getName());
      assertEquals(archivedLogs.length,1);
      fs.delete(new Path(OLDLOGDIR,HLOG_FILE_PREFIX + "0"),false);
    }
  }
  finally {
    conf.setClass("hbase.regionserver.hlog.reader.impl",backupClass,Reader.class);
    HLogFactory.resetLogReaderClass();
  }
}
