{
  conf.setBoolean(HBASE_SKIP_ERRORS,false);
  Class<?> backupClass=conf.getClass("hbase.regionserver.hlog.reader.impl",Reader.class);
  InstrumentedSequenceFileLogWriter.activateFailure=false;
  HLogFactory.resetLogReaderClass();
  try {
    conf.setClass("hbase.regionserver.hlog.reader.impl",FaultySequenceFileLogReader.class,HLog.Reader.class);
    conf.set("faultysequencefilelogreader.failuretype",FaultySequenceFileLogReader.FailureType.BEGINNING.name());
    generateHLogs(-1);
    fs.initialize(fs.getUri(),conf);
    HLogSplitter logSplitter=HLogSplitter.createLogSplitter(conf,HBASEDIR,HLOGDIR,OLDLOGDIR,fs);
    try {
      logSplitter.splitLog();
    }
 catch (    IOException e) {
      assertEquals("if skip.errors is false all files should remain in place",NUM_WRITERS,fs.listStatus(HLOGDIR).length);
    }
  }
  finally {
    conf.setClass("hbase.regionserver.hlog.reader.impl",backupClass,Reader.class);
    HLogFactory.resetLogReaderClass();
  }
}
