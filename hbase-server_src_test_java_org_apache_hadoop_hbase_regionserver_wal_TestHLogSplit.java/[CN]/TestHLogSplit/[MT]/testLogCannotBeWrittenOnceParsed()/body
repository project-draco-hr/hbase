{
  final AtomicLong counter=new AtomicLong(0);
  AtomicBoolean stop=new AtomicBoolean(false);
  final String region=REGIONS.get(0);
  Thread zombie=new ZombieLastLogWriterRegionServer(this.conf,counter,stop,region);
  try {
    long startCount=counter.get();
    zombie.start();
    while (startCount == counter.get())     Threads.sleep(1);
    Threads.sleep(1000);
    final Configuration conf2=HBaseConfiguration.create(this.conf);
    final User robber=User.createUserForTesting(conf2,ROBBER,GROUP);
    int count=robber.runAs(new PrivilegedExceptionAction<Integer>(){
      @Override public Integer run() throws Exception {
        FileSystem fs=FileSystem.get(conf2);
        int expectedFiles=fs.listStatus(HLOGDIR).length;
        HLogSplitter.split(HBASEDIR,HLOGDIR,OLDLOGDIR,fs,conf2);
        Path[] logfiles=getLogForRegion(HBASEDIR,TABLE_NAME,region);
        assertEquals(expectedFiles,logfiles.length);
        int count=0;
        for (        Path logfile : logfiles) {
          count+=countHLog(logfile,fs,conf2);
        }
        return count;
      }
    }
);
    LOG.info("zombie=" + counter.get() + ", robber="+ count);
    assertTrue("The log file could have at most 1 extra log entry, but can't have less. Zombie could write " + counter.get() + " and logfile had only "+ count,counter.get() == count || counter.get() + 1 == count);
  }
  finally {
    stop.set(true);
    zombie.interrupt();
    Threads.threadDumpingIsAlive(zombie);
  }
}
