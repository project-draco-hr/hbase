{
  this.user.runAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      int walToKeepOpen=2;
      final int numOfWriters=walToKeepOpen + 1;
      HLog.Writer[] writers=null;
      try {
        DistributedFileSystem dfs=(DistributedFileSystem)FileSystem.get(conf);
        writers=generateHLogs(dfs,numOfWriters,ENTRIES,walToKeepOpen);
      }
 catch (      IOException e1) {
        throw new RuntimeException("Failed",e1);
      }
      editsCount.addAndGet(numOfWriters * NUM_WRITERS);
      HLog.Writer writer=writers[walToKeepOpen];
      loop(writer);
      return null;
    }
  }
);
}
