{
  long iteration=numBulkLoads.getAndIncrement();
  Path dir=UTIL.getDataTestDir(String.format("bulkLoad_%08d",iteration));
  FileSystem fs=UTIL.getTestFileSystem();
  byte[] val=Bytes.toBytes(String.format("%010d",iteration));
  final List<Pair<byte[],String>> famPaths=new ArrayList<Pair<byte[],String>>(NUM_CFS);
  for (int i=0; i < NUM_CFS; i++) {
    Path hfile=new Path(dir,family(i));
    byte[] fam=Bytes.toBytes(family(i));
    createHFile(fs,hfile,fam,QUAL,val,1000);
    famPaths.add(new Pair<byte[],String>(fam,hfile.toString()));
  }
  HConnection conn=UTIL.getHBaseAdmin().getConnection();
  byte[] tbl=Bytes.toBytes(tableName);
  new ServerCallable<Void>(conn,tbl,Bytes.toBytes("aaa")){
    @Override public Void call() throws Exception {
      LOG.debug("Going to connect to server " + location + " for row "+ Bytes.toStringBinary(row));
      byte[] regionName=location.getRegionInfo().getRegionName();
      BulkLoadHFileRequest request=RequestConverter.buildBulkLoadHFileRequest(famPaths,regionName,true);
      server.bulkLoadHFile(null,request);
      return null;
    }
  }
.withRetries();
  if (numBulkLoads.get() % 10 == 0) {
    new ServerCallable<Void>(conn,tbl,Bytes.toBytes("aaa")){
      @Override public Void call() throws Exception {
        LOG.debug("compacting " + location + " for row "+ Bytes.toStringBinary(row));
        AdminProtocol server=connection.getAdmin(location.getHostname(),location.getPort());
        CompactRegionRequest request=RequestConverter.buildCompactRegionRequest(location.getRegionInfo().getRegionName(),true);
        server.compactRegion(null,request);
        numCompactions.incrementAndGet();
        return null;
      }
    }
.withRetries();
  }
}
