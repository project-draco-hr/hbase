{
  if (entries.isEmpty()) {
    return;
  }
  final int size=entries.size();
  BucketEntry[] bucketEntries=new BucketEntry[size];
  int index=0;
  while (cacheEnabled && index < size) {
    RAMQueueEntry re=null;
    try {
      re=entries.get(index);
      if (re == null) {
        LOG.warn("Couldn't get entry or changed on us; who else is messing with it?");
        index++;
        continue;
      }
      BucketEntry bucketEntry=re.writeToCache(ioEngine,bucketAllocator,deserialiserMap,realCacheSize);
      bucketEntries[index]=bucketEntry;
      if (ioErrorStartTime > 0) {
        ioErrorStartTime=-1;
      }
      index++;
    }
 catch (    BucketAllocatorException fle) {
      LOG.warn("Failed allocation for " + (re == null ? "" : re.getKey()) + "; "+ fle);
      bucketEntries[index]=null;
      index++;
    }
catch (    CacheFullException cfe) {
      if (!freeInProgress) {
        freeSpace("Full!");
      }
 else {
        Thread.sleep(50);
      }
    }
catch (    IOException ioex) {
      LOG.error("Failed writing to bucket cache",ioex);
      checkIOErrorIsTolerated();
    }
  }
  try {
    ioEngine.sync();
  }
 catch (  IOException ioex) {
    LOG.error("Failed syncing IO engine",ioex);
    checkIOErrorIsTolerated();
    for (int i=0; i < entries.size(); ++i) {
      if (bucketEntries[i] != null) {
        bucketAllocator.freeBlock(bucketEntries[i].offset());
        bucketEntries[i]=null;
      }
    }
  }
  for (int i=0; i < size; ++i) {
    BlockCacheKey key=entries.get(i).getKey();
    if (bucketEntries[i] != null) {
      backingMap.put(key,bucketEntries[i]);
    }
    RAMQueueEntry ramCacheEntry=ramCache.remove(key);
    if (ramCacheEntry != null) {
      heapSize.addAndGet(-1 * entries.get(i).getData().heapSize());
    }
 else     if (bucketEntries[i] != null) {
      IdLock.Entry lockEntry=null;
      try {
        lockEntry=offsetLock.getLockEntry(bucketEntries[i].offset());
        if (backingMap.remove(key,bucketEntries[i])) {
          blockEvicted(key,bucketEntries[i],false);
        }
      }
 catch (      IOException e) {
        LOG.warn("failed to free space for " + key,e);
      }
 finally {
        if (lockEntry != null) {
          offsetLock.releaseLockEntry(lockEntry);
        }
      }
    }
  }
  long used=bucketAllocator.getUsedSize();
  if (used > acceptableSize()) {
    freeSpace("Used=" + used + " > acceptable="+ acceptableSize());
  }
  return;
}
