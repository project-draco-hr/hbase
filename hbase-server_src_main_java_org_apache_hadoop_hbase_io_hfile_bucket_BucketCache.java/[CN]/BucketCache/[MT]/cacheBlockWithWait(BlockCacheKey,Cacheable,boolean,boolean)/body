{
  if (LOG.isTraceEnabled())   LOG.trace("Caching key=" + cacheKey + ", item="+ cachedItem);
  if (!cacheEnabled) {
    return;
  }
  if (backingMap.containsKey(cacheKey)) {
    return;
  }
  RAMQueueEntry re=new RAMQueueEntry(cacheKey,cachedItem,accessCount.incrementAndGet(),inMemory);
  if (ramCache.putIfAbsent(cacheKey,re) != null) {
    return;
  }
  int queueNum=(cacheKey.hashCode() & 0x7FFFFFFF) % writerQueues.size();
  BlockingQueue<RAMQueueEntry> bq=writerQueues.get(queueNum);
  boolean successfulAddition=false;
  if (wait) {
    try {
      successfulAddition=bq.offer(re,DEFAULT_CACHE_WAIT_TIME,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
 else {
    successfulAddition=bq.offer(re);
  }
  if (!successfulAddition) {
    ramCache.remove(cacheKey);
    cacheStats.failInsert();
  }
 else {
    this.blockNumber.incrementAndGet();
    this.heapSize.addAndGet(cachedItem.heapSize());
    blocksByHFile.put(cacheKey.getHfileName(),cacheKey);
  }
}
