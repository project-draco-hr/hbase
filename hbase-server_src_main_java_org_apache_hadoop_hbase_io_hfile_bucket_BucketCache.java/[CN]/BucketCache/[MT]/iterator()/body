{
  final Iterator<Map.Entry<BlockCacheKey,BucketEntry>> i=this.backingMap.entrySet().iterator();
  return new Iterator<CachedBlock>(){
    private final long now=System.nanoTime();
    @Override public boolean hasNext(){
      return i.hasNext();
    }
    @Override public CachedBlock next(){
      final Map.Entry<BlockCacheKey,BucketEntry> e=i.next();
      return new CachedBlock(){
        @Override public String toString(){
          return BlockCacheUtil.toString(this,now);
        }
        @Override public BlockPriority getBlockPriority(){
          return e.getValue().getPriority();
        }
        @Override public BlockType getBlockType(){
          return null;
        }
        @Override public long getOffset(){
          return e.getKey().getOffset();
        }
        @Override public long getSize(){
          return e.getValue().getLength();
        }
        @Override public long getCachedTime(){
          return e.getValue().getCachedTime();
        }
        @Override public String getFilename(){
          return e.getKey().getHfileName();
        }
        @Override public int compareTo(        CachedBlock other){
          int diff=this.getFilename().compareTo(other.getFilename());
          if (diff != 0)           return diff;
          diff=Long.compare(this.getOffset(),other.getOffset());
          if (diff != 0)           return diff;
          if (other.getCachedTime() < 0 || this.getCachedTime() < 0) {
            throw new IllegalStateException("" + this.getCachedTime() + ", "+ other.getCachedTime());
          }
          return Long.compare(other.getCachedTime(),this.getCachedTime());
        }
        @Override public int hashCode(){
          return e.getKey().hashCode();
        }
        @Override public boolean equals(        Object obj){
          if (obj instanceof CachedBlock) {
            CachedBlock cb=(CachedBlock)obj;
            return compareTo(cb) == 0;
          }
 else {
            return false;
          }
        }
      }
;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
