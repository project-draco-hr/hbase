{
  if (!cacheEnabled) {
    return null;
  }
  RAMQueueEntry re=ramCache.get(key);
  if (re != null) {
    if (updateCacheMetrics) {
      cacheStats.hit(caching,key.isPrimary());
    }
    re.access(accessCount.incrementAndGet());
    return re.getData();
  }
  BucketEntry bucketEntry=backingMap.get(key);
  if (bucketEntry != null) {
    long start=System.nanoTime();
    ReentrantReadWriteLock lock=offsetLock.getLock(bucketEntry.offset());
    try {
      lock.readLock().lock();
      if (bucketEntry.equals(backingMap.get(key))) {
        int len=bucketEntry.getLength();
        if (LOG.isTraceEnabled()) {
          LOG.trace("Read offset=" + bucketEntry.offset() + ", len="+ len);
        }
        Cacheable cachedBlock=ioEngine.read(bucketEntry.offset(),len,bucketEntry.deserializerReference(this.deserialiserMap));
        long timeTaken=System.nanoTime() - start;
        if (updateCacheMetrics) {
          cacheStats.hit(caching,key.isPrimary());
          cacheStats.ioHit(timeTaken);
        }
        if (cachedBlock.getMemoryType() == MemoryType.SHARED) {
          bucketEntry.refCount.incrementAndGet();
        }
        bucketEntry.access(accessCount.incrementAndGet());
        if (this.ioErrorStartTime > 0) {
          ioErrorStartTime=-1;
        }
        return cachedBlock;
      }
    }
 catch (    IOException ioex) {
      LOG.error("Failed reading block " + key + " from bucket cache",ioex);
      checkIOErrorIsTolerated();
    }
 finally {
      lock.readLock().unlock();
    }
  }
  if (!repeat && updateCacheMetrics) {
    cacheStats.miss(caching,key.isPrimary());
  }
  return null;
}
