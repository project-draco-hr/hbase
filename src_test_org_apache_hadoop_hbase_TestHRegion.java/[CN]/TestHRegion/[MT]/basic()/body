{
  long startTime=System.currentTimeMillis();
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    long writeid=region.startUpdate(new Text("row_" + k));
    region.put(writeid,CONTENTS_BASIC,new BytesWritable((CONTENTSTR + k).getBytes()));
    region.put(writeid,new Text(ANCHORNUM + k),new BytesWritable((ANCHORSTR + k).getBytes()));
    region.commit(writeid);
  }
  System.out.println("Write " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  startTime=System.currentTimeMillis();
  region.flushcache(false);
  System.out.println("Cache flush elapsed time: " + ((System.currentTimeMillis() - startTime) / 1000.0));
  startTime=System.currentTimeMillis();
  Text collabel=null;
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    Text rowlabel=new Text("row_" + k);
    BytesWritable bodydata=region.get(rowlabel,CONTENTS_BASIC);
    assertNotNull(bodydata);
    byte[] bytes=new byte[bodydata.getSize()];
    System.arraycopy(bodydata.get(),0,bytes,0,bytes.length);
    String bodystr=new String(bytes).toString().trim();
    String teststr=CONTENTSTR + k;
    assertEquals("Incorrect value for key: (" + rowlabel + ","+ CONTENTS_BASIC+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",bodystr,teststr);
    collabel=new Text(ANCHORNUM + k);
    bodydata=region.get(rowlabel,collabel);
    bytes=new byte[bodydata.getSize()];
    System.arraycopy(bodydata.get(),0,bytes,0,bytes.length);
    bodystr=new String(bytes).toString().trim();
    teststr=ANCHORSTR + k;
    assertEquals("Incorrect value for key: (" + rowlabel + ","+ collabel+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",bodystr,teststr);
  }
  System.out.println("Read " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
}
