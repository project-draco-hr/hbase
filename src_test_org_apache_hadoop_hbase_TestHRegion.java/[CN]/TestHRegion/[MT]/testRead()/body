{
  if (!initialized || failures) {
    throw new IllegalStateException();
  }
  Text[] cols=new Text[]{new Text(ANCHORNUM + "[0-9]+"),new Text(CONTENTS_BASIC)};
  HScannerInterface s=region.getScanner(cols,new Text());
  try {
    int contentsFetched=0;
    int anchorFetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<Text,byte[]> curVals=new TreeMap<Text,byte[]>();
    int k=0;
    while (s.next(curKey,curVals)) {
      for (Iterator<Text> it=curVals.keySet().iterator(); it.hasNext(); ) {
        Text col=it.next();
        byte val[]=curVals.get(col);
        String curval=new String(val).trim();
        if (col.compareTo(CONTENTS_BASIC) == 0) {
          assertTrue("Error at:" + curKey.getRow() + "/"+ curKey.getTimestamp()+ ", Value for "+ col+ " should start with: "+ CONTENTSTR+ ", but was fetched as: "+ curval,curval.startsWith(CONTENTSTR));
          contentsFetched++;
        }
 else         if (col.toString().startsWith(ANCHORNUM)) {
          assertTrue("Error at:" + curKey.getRow() + "/"+ curKey.getTimestamp()+ ", Value for "+ col+ " should start with: "+ ANCHORSTR+ ", but was fetched as: "+ curval,curval.startsWith(ANCHORSTR));
          anchorFetched++;
        }
 else {
          System.out.println(col);
        }
      }
      curVals.clear();
      k++;
    }
    assertEquals("Expected " + NUM_VALS + " "+ CONTENTS_BASIC+ " values, but fetched "+ contentsFetched,NUM_VALS,contentsFetched);
    assertEquals("Expected " + NUM_VALS + " "+ ANCHORNUM+ " values, but fetched "+ anchorFetched,NUM_VALS,anchorFetched);
  }
  finally {
    s.close();
  }
  cols=new Text[]{CONTENTS_FIRSTCOL,ANCHOR_SECONDCOL};
  s=region.getScanner(cols,new Text());
  try {
    int numFetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<Text,byte[]> curVals=new TreeMap<Text,byte[]>();
    int k=0;
    while (s.next(curKey,curVals)) {
      for (Iterator<Text> it=curVals.keySet().iterator(); it.hasNext(); ) {
        Text col=it.next();
        byte val[]=curVals.get(col);
        int curval=Integer.parseInt(new String(val).trim());
        for (int j=0; j < cols.length; j++) {
          if (col.compareTo(cols[j]) == 0) {
            assertEquals("Value for " + col + " should be: "+ k+ ", but was fetched as: "+ curval,curval,k);
            numFetched++;
          }
        }
      }
      curVals.clear();
      k++;
    }
    assertEquals("Inserted " + numInserted + " values, but fetched "+ numFetched,numInserted,numFetched);
  }
  finally {
    s.close();
  }
  if (Environment.debugging) {
    s=region.getScanner(new Text[]{CONTENTS_BODY},new Text());
    try {
      int numFetched=0;
      HStoreKey curKey=new HStoreKey();
      TreeMap<Text,byte[]> curVals=new TreeMap<Text,byte[]>();
      int k=0;
      while (s.next(curKey,curVals)) {
        for (Iterator<Text> it=curVals.keySet().iterator(); it.hasNext(); ) {
          Text col=it.next();
          byte val[]=curVals.get(col);
          assertTrue(col.compareTo(CONTENTS_BODY) == 0);
          assertNotNull(val);
          numFetched++;
        }
        curVals.clear();
        k++;
      }
      assertEquals("Inserted " + N_ROWS + " values, but fetched "+ numFetched,N_ROWS,numFetched);
    }
  finally {
      s.close();
    }
  }
  cols=new Text[]{new Text("anchor:")};
  s=region.getScanner(cols,new Text());
  try {
    int fetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<Text,byte[]> curVals=new TreeMap<Text,byte[]>();
    while (s.next(curKey,curVals)) {
      for (Iterator<Text> it=curVals.keySet().iterator(); it.hasNext(); ) {
        it.next();
        fetched++;
      }
      curVals.clear();
    }
    assertEquals("Inserted " + (NUM_VALS + numInserted / 2) + " values, but fetched "+ fetched,(NUM_VALS + numInserted / 2),fetched);
  }
  finally {
    s.close();
  }
}
