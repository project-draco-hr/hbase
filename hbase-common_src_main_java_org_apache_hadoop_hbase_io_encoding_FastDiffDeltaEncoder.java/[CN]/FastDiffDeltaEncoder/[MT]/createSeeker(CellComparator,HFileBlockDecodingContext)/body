{
  return new BufferedEncodedSeeker<FastDiffSeekerState>(comparator,decodingCtx){
    private void decode(    boolean isFirst){
      byte flag=currentBuffer.get();
      if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        if (!isFirst) {
          System.arraycopy(current.keyBuffer,current.keyLength - current.prevTimestampAndType.length,current.prevTimestampAndType,0,current.prevTimestampAndType.length);
        }
        current.keyLength=ByteBuff.readCompressedInt(currentBuffer);
      }
      if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
        current.valueLength=ByteBuff.readCompressedInt(currentBuffer);
      }
      current.lastCommonPrefix=ByteBuff.readCompressedInt(currentBuffer);
      current.ensureSpaceForKey();
      if (isFirst) {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.keyLength - current.prevTimestampAndType.length);
        current.rowLengthWithSize=Bytes.toShort(current.keyBuffer,0) + Bytes.SIZEOF_SHORT;
        current.familyLengthWithSize=current.keyBuffer[current.rowLengthWithSize] + Bytes.SIZEOF_BYTE;
      }
 else       if (current.lastCommonPrefix < Bytes.SIZEOF_SHORT) {
        int oldRowLengthWithSize=current.rowLengthWithSize;
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,Bytes.SIZEOF_SHORT - current.lastCommonPrefix);
        current.rowLengthWithSize=Bytes.toShort(current.keyBuffer,0) + Bytes.SIZEOF_SHORT;
        System.arraycopy(current.keyBuffer,oldRowLengthWithSize,current.keyBuffer,current.rowLengthWithSize,current.familyLengthWithSize);
        currentBuffer.get(current.keyBuffer,Bytes.SIZEOF_SHORT,current.rowLengthWithSize - Bytes.SIZEOF_SHORT);
        currentBuffer.get(current.keyBuffer,current.rowLengthWithSize + current.familyLengthWithSize,current.keyLength - current.rowLengthWithSize - current.familyLengthWithSize- current.prevTimestampAndType.length);
      }
 else       if (current.lastCommonPrefix < current.rowLengthWithSize) {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.rowLengthWithSize - current.lastCommonPrefix);
        currentBuffer.get(current.keyBuffer,current.rowLengthWithSize + current.familyLengthWithSize,current.keyLength - current.rowLengthWithSize - current.familyLengthWithSize- current.prevTimestampAndType.length);
      }
 else {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.keyLength - current.prevTimestampAndType.length - current.lastCommonPrefix);
      }
      int pos=current.keyLength - current.prevTimestampAndType.length;
      int commonTimestampPrefix=(flag & MASK_TIMESTAMP_LENGTH) >>> SHIFT_TIMESTAMP_LENGTH;
      if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        System.arraycopy(current.prevTimestampAndType,0,current.keyBuffer,pos,commonTimestampPrefix);
      }
      pos+=commonTimestampPrefix;
      currentBuffer.get(current.keyBuffer,pos,Bytes.SIZEOF_LONG - commonTimestampPrefix);
      pos+=Bytes.SIZEOF_LONG - commonTimestampPrefix;
      if ((flag & FLAG_SAME_TYPE) == 0) {
        currentBuffer.get(current.keyBuffer,pos,Bytes.SIZEOF_BYTE);
      }
 else       if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        current.keyBuffer[pos]=current.prevTimestampAndType[Bytes.SIZEOF_LONG];
      }
      if ((flag & FLAG_SAME_VALUE) == 0) {
        current.valueOffset=currentBuffer.position();
        currentBuffer.skip(current.valueLength);
      }
      if (includesTags()) {
        decodeTags();
      }
      if (includesMvcc()) {
        current.memstoreTS=ByteBuff.readVLong(currentBuffer);
      }
 else {
        current.memstoreTS=0;
      }
      current.nextKvOffset=currentBuffer.position();
    }
    @Override protected void decodeFirst(){
      currentBuffer.skip(Bytes.SIZEOF_INT);
      decode(true);
    }
    @Override protected void decodeNext(){
      decode(false);
    }
    @Override protected FastDiffSeekerState createSeekerState(){
      return new FastDiffSeekerState(this.tmpPair,this.includesTags());
    }
  }
;
}
