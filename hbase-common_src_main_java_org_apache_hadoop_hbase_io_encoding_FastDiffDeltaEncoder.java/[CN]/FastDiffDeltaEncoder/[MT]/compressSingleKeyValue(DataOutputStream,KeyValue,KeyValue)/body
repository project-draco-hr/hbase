{
  byte flag=0;
  int kLength=kv.getKeyLength();
  int vLength=kv.getValueLength();
  byte[] curKvBuf=kv.getBuffer();
  if (prevKv == null) {
    out.write(flag);
    ByteBufferUtils.putCompressedInt(out,kLength);
    ByteBufferUtils.putCompressedInt(out,vLength);
    ByteBufferUtils.putCompressedInt(out,0);
    out.write(curKvBuf,kv.getKeyOffset(),kLength + vLength);
  }
 else {
    byte[] preKvBuf=prevKv.getBuffer();
    int preKeyLength=prevKv.getKeyLength();
    int preValLength=prevKv.getValueLength();
    int commonPrefix=ByteBufferUtils.findCommonPrefix(curKvBuf,kv.getKeyOffset(),kLength - KeyValue.TIMESTAMP_TYPE_SIZE,preKvBuf,prevKv.getKeyOffset(),preKeyLength - KeyValue.TIMESTAMP_TYPE_SIZE);
    if (kLength == prevKv.getKeyLength()) {
      flag|=FLAG_SAME_KEY_LENGTH;
    }
    if (vLength == prevKv.getValueLength()) {
      flag|=FLAG_SAME_VALUE_LENGTH;
    }
    if (kv.getTypeByte() == prevKv.getTypeByte()) {
      flag|=FLAG_SAME_TYPE;
    }
    int commonTimestampPrefix=findCommonTimestampPrefix(curKvBuf,kv.getKeyOffset() + kLength - KeyValue.TIMESTAMP_TYPE_SIZE,preKvBuf,prevKv.getKeyOffset() + preKeyLength - KeyValue.TIMESTAMP_TYPE_SIZE);
    flag|=commonTimestampPrefix << SHIFT_TIMESTAMP_LENGTH;
    if (vLength == preValLength && Bytes.equals(kv.getValueArray(),kv.getValueOffset(),vLength,prevKv.getValueArray(),prevKv.getValueOffset(),preValLength)) {
      flag|=FLAG_SAME_VALUE;
    }
    out.write(flag);
    if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
      ByteBufferUtils.putCompressedInt(out,kLength);
    }
    if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
      ByteBufferUtils.putCompressedInt(out,vLength);
    }
    ByteBufferUtils.putCompressedInt(out,commonPrefix);
    if (commonPrefix < kv.getRowLength() + KeyValue.ROW_LENGTH_SIZE) {
      out.write(curKvBuf,kv.getKeyOffset() + commonPrefix,kv.getRowLength() + KeyValue.ROW_LENGTH_SIZE - commonPrefix);
      out.write(curKvBuf,kv.getQualifierOffset(),kv.getQualifierLength());
    }
 else {
      int restKeyLength=kLength - commonPrefix - KeyValue.TIMESTAMP_TYPE_SIZE;
      out.write(curKvBuf,kv.getKeyOffset() + commonPrefix,restKeyLength);
    }
    out.write(curKvBuf,kv.getKeyOffset() + kLength - KeyValue.TIMESTAMP_TYPE_SIZE + commonTimestampPrefix,KeyValue.TIMESTAMP_SIZE - commonTimestampPrefix);
    if ((flag & FLAG_SAME_TYPE) == 0) {
      out.write(kv.getTypeByte());
    }
    if ((flag & FLAG_SAME_VALUE) == 0) {
      out.write(kv.getValueArray(),kv.getValueOffset(),vLength);
    }
  }
  return kLength + vLength + KeyValue.KEYVALUE_INFRASTRUCTURE_SIZE;
}
