{
  final HRegionInfo hri=HRegionInfo.FIRST_META_REGIONINFO;
  CatalogTracker ct=Mockito.mock(CatalogTracker.class);
  LoadBalancer balancer=LoadBalancerFactory.getLoadBalancer(server.getConfiguration());
  final AtomicBoolean zkEventProcessed=new AtomicBoolean(false);
  AssignmentManager am=new AssignmentManager(this.server,this.serverManager,ct,balancer,null,null,master.getTableLockManager()){
    @Override void handleRegion(    final RegionTransition rt,    OpenRegionCoordination coordination,    OpenRegionCoordination.OpenRegionDetails ord){
      super.handleRegion(rt,coordination,ord);
      if (rt != null && Bytes.equals(hri.getRegionName(),rt.getRegionName()) && rt.getEventType() == EventType.RS_ZK_REGION_OPENING) {
        zkEventProcessed.set(true);
      }
    }
  }
;
  try {
    am.getRegionStates().regionOffline(hri);
    zkEventProcessed.set(false);
    this.watcher.registerListenerFirst(am);
    assertFalse("The region should not be in transition",am.getRegionStates().isRegionInTransition(hri));
    ZKAssign.createNodeOffline(this.watcher,hri,SERVERNAME_A);
    ZKAssign.transitionNodeOpening(this.watcher,hri,SERVERNAME_A);
    long startTime=EnvironmentEdgeManager.currentTimeMillis();
    while (!zkEventProcessed.get()) {
      assertTrue("Timed out in waiting for ZK event to be processed",EnvironmentEdgeManager.currentTimeMillis() - startTime < 30000);
      Threads.sleepWithoutInterrupt(100);
    }
    assertFalse(am.getRegionStates().isRegionInTransition(hri));
  }
  finally {
    am.shutdown();
  }
}
