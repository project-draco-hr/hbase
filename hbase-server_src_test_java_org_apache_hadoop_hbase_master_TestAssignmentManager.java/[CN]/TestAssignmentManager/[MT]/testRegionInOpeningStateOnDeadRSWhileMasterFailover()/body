{
  AssignmentManagerWithExtrasForTesting am=setUpMockedAssignmentManager(this.server,this.serverManager);
  ZKAssign.createNodeOffline(this.watcher,REGIONINFO,SERVERNAME_A);
  int version=ZKAssign.getVersion(this.watcher,REGIONINFO);
  ZKAssign.transitionNode(this.watcher,REGIONINFO,SERVERNAME_A,EventType.M_ZK_REGION_OFFLINE,EventType.RS_ZK_REGION_OPENING,version);
  RegionTransition rt=RegionTransition.createRegionTransition(EventType.RS_ZK_REGION_OPENING,REGIONINFO.getRegionName(),SERVERNAME_A,HConstants.EMPTY_BYTE_ARRAY);
  version=ZKAssign.getVersion(this.watcher,REGIONINFO);
  Mockito.when(this.serverManager.isServerOnline(SERVERNAME_A)).thenReturn(false);
  am.getRegionStates().logSplit(SERVERNAME_A);
  am.getRegionStates().createRegionState(REGIONINFO);
  am.gate.set(false);
  BaseCoordinatedStateManager cp=new ZkCoordinatedStateManager();
  cp.initialize(server);
  cp.start();
  OpenRegionCoordination orc=cp.getOpenRegionCoordination();
  ZkOpenRegionCoordination.ZkOpenRegionDetails zkOrd=new ZkOpenRegionCoordination.ZkOpenRegionDetails();
  zkOrd.setServerName(server.getServerName());
  zkOrd.setVersion(version);
  assertFalse(am.processRegionsInTransition(rt,REGIONINFO,orc,zkOrd));
  am.getTableStateManager().setTableState(REGIONINFO.getTable(),Table.State.ENABLED);
  processServerShutdownHandler(am,false);
  while (!am.gate.get()) {
    Thread.sleep(10);
  }
  assertTrue("The region should be assigned immediately.",null != am.regionPlans.get(REGIONINFO.getEncodedName()));
}
