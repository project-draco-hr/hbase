{
  CatalogTracker ct=Mockito.mock(CatalogTracker.class);
  ClientProtocol ri=Mockito.mock(ClientProtocol.class);
  Result r=Mocking.getMetaTableRowResult(REGIONINFO,SERVERNAME_A);
  ScanResponse.Builder builder=ScanResponse.newBuilder();
  builder.setMoreResults(true);
  builder.addResult(ProtobufUtil.toResult(r));
  Mockito.when(ri.scan((RpcController)Mockito.any(),(ScanRequest)Mockito.any())).thenReturn(builder.build());
  GetResponse.Builder getBuilder=GetResponse.newBuilder();
  getBuilder.setResult(ProtobufUtil.toResult(r));
  Mockito.when(ri.get((RpcController)Mockito.any(),(GetRequest)Mockito.any())).thenReturn(getBuilder.build());
  HConnection connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(HTU.getConfiguration(),null,ri,SERVERNAME_B,REGIONINFO);
  Mockito.when(ct.getConnection()).thenReturn(connection);
  ExecutorService executor=startupMasterExecutor("mockedAMExecutor");
  this.balancer=LoadBalancerFactory.getLoadBalancer(server.getConfiguration());
  AssignmentManagerWithExtrasForTesting am=new AssignmentManagerWithExtrasForTesting(server,manager,ct,this.balancer,executor);
  return am;
}
