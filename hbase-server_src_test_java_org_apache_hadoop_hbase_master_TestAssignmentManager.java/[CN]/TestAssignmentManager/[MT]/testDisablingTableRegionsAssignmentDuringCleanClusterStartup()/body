{
  this.server.getConfiguration().setClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,MockedLoadBalancer.class,LoadBalancer.class);
  Mockito.when(this.serverManager.getOnlineServers()).thenReturn(new HashMap<ServerName,ServerLoad>(0));
  List<ServerName> destServers=new ArrayList<ServerName>(1);
  destServers.add(SERVERNAME_A);
  Mockito.when(this.serverManager.createDestinationServersList()).thenReturn(destServers);
  HTU.getConfiguration().setInt(HConstants.MASTER_PORT,0);
  Server server=new HMaster(HTU.getConfiguration());
  AssignmentManagerWithExtrasForTesting am=setUpMockedAssignmentManager(server,this.serverManager);
  AtomicBoolean gate=new AtomicBoolean(false);
  if (balancer instanceof MockedLoadBalancer) {
    ((MockedLoadBalancer)balancer).setGateVariable(gate);
  }
  try {
    am.getZKTable().setDisablingTable(REGIONINFO.getTable());
    am.joinCluster();
    assertFalse("Assign should not be invoked for disabling table regions during clean cluster startup.",gate.get());
    assertTrue("Table should be disabled.",am.getZKTable().isDisabledTable(REGIONINFO.getTable()));
  }
  finally {
    this.server.getConfiguration().setClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,SimpleLoadBalancer.class,LoadBalancer.class);
    am.getZKTable().setEnabledTable(REGIONINFO.getTable());
    am.shutdown();
  }
}
