{
  this.watcher.registerListenerFirst(am);
  ClientProtocol implementation=Mockito.mock(ClientProtocol.class);
  Result r=null;
  if (splitRegion) {
    r=Mocking.getMetaTableRowResultAsSplitRegion(REGIONINFO,SERVERNAME_A);
  }
 else {
    r=Mocking.getMetaTableRowResult(REGIONINFO,SERVERNAME_A);
  }
  ScanResponse.Builder builder=ScanResponse.newBuilder();
  builder.setMoreResults(true);
  builder.addResult(ProtobufUtil.toResult(r));
  Mockito.when(implementation.scan((RpcController)Mockito.any(),(ScanRequest)Mockito.any())).thenReturn(builder.build());
  HConnection connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(HTU.getConfiguration(),null,implementation,SERVERNAME_B,REGIONINFO);
  Mockito.when(ct.getConnection()).thenReturn(connection);
  Mockito.when(this.server.getCatalogTracker()).thenReturn(ct);
  DeadServer deadServers=new DeadServer();
  deadServers.add(SERVERNAME_A);
  MasterServices services=Mockito.mock(MasterServices.class);
  Mockito.when(services.getAssignmentManager()).thenReturn(am);
  Mockito.when(services.getServerManager()).thenReturn(this.serverManager);
  Mockito.when(services.getZooKeeper()).thenReturn(this.watcher);
  ServerShutdownHandler handler=new ServerShutdownHandler(this.server,services,deadServers,SERVERNAME_A,false);
  handler.process();
}
