{
  this.watcher.registerListenerFirst(am);
  ClientProtos.ClientService.BlockingInterface implementation=Mockito.mock(ClientProtos.ClientService.BlockingInterface.class);
  Result r;
  if (splitRegion) {
    r=MetaMockingUtil.getMetaTableRowResultAsSplitRegion(REGIONINFO,SERVERNAME_A);
  }
 else {
    r=MetaMockingUtil.getMetaTableRowResult(REGIONINFO,SERVERNAME_A);
  }
  final ScanResponse.Builder builder=ScanResponse.newBuilder();
  builder.setMoreResults(true);
  builder.addCellsPerResult(r.size());
  final List<CellScannable> cellScannables=new ArrayList<CellScannable>(1);
  cellScannables.add(r);
  Mockito.when(implementation.scan((RpcController)Mockito.any(),(ScanRequest)Mockito.any())).thenAnswer(new Answer<ScanResponse>(){
    @Override public ScanResponse answer(    InvocationOnMock invocation) throws Throwable {
      PayloadCarryingRpcController controller=(PayloadCarryingRpcController)invocation.getArguments()[0];
      if (controller != null) {
        controller.setCellScanner(CellUtil.createCellScanner(cellScannables));
      }
      return builder.build();
    }
  }
);
  HConnection connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(HTU.getConfiguration(),null,implementation,SERVERNAME_B,REGIONINFO);
  Mockito.when(ct.getConnection()).thenReturn(connection);
  Mockito.when(this.server.getCatalogTracker()).thenReturn(ct);
  DeadServer deadServers=new DeadServer();
  deadServers.add(SERVERNAME_A);
  MasterFileSystem fs=Mockito.mock(MasterFileSystem.class);
  Mockito.doNothing().when(fs).setLogRecoveryMode();
  Mockito.when(fs.getLogRecoveryMode()).thenReturn(RecoveryMode.LOG_REPLAY);
  MasterServices services=Mockito.mock(MasterServices.class);
  Mockito.when(services.getAssignmentManager()).thenReturn(am);
  Mockito.when(services.getServerManager()).thenReturn(this.serverManager);
  Mockito.when(services.getZooKeeper()).thenReturn(this.watcher);
  Mockito.when(services.getMasterFileSystem()).thenReturn(fs);
  ServerShutdownHandler handler=new ServerShutdownHandler(this.server,services,deadServers,SERVERNAME_A,false);
  am.failoverCleanupDone.set(true);
  handler.process();
}
