{
  ExecutorService executor=startupMasterExecutor("testBalanceExecutor");
  LoadBalancer balancer=LoadBalancerFactory.getLoadBalancer(server.getConfiguration());
  AssignmentManager am=new AssignmentManager(this.server,this.serverManager,balancer,executor,null,master.getTableLockManager());
  am.failoverCleanupDone.set(true);
  try {
    this.watcher.registerListenerFirst(am);
    am.regionOnline(REGIONINFO,SERVERNAME_A);
    RegionPlan plan=new RegionPlan(REGIONINFO,SERVERNAME_A,SERVERNAME_B);
    am.balance(plan);
    RegionStates regionStates=am.getRegionStates();
    assertTrue(regionStates.isRegionInTransition(REGIONINFO) && regionStates.isRegionInState(REGIONINFO,State.FAILED_CLOSE));
    regionStates.updateRegionState(REGIONINFO,State.PENDING_CLOSE);
    int versionid=ZKAssign.transitionNodeClosed(this.watcher,REGIONINFO,SERVERNAME_A,-1);
    assertNotSame(versionid,-1);
    Mocking.waitForRegionPendingOpenInRIT(am,REGIONINFO.getEncodedName());
    versionid=ZKAssign.getVersion(this.watcher,REGIONINFO);
    assertNotSame(-1,versionid);
    versionid=ZKAssign.transitionNode(server.getZooKeeper(),REGIONINFO,SERVERNAME_B,EventType.M_ZK_REGION_OFFLINE,EventType.RS_ZK_REGION_OPENING,versionid);
    assertNotSame(-1,versionid);
    versionid=ZKAssign.transitionNodeOpened(this.watcher,REGIONINFO,SERVERNAME_B,versionid);
    assertNotSame(-1,versionid);
    while (regionStates.isRegionInTransition(REGIONINFO))     Threads.sleep(1);
  }
  finally {
    executor.shutdown();
    am.shutdown();
    ZKAssign.deleteAllNodes(this.watcher);
  }
}
