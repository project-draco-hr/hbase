{
  final String tableNameStr="testReplayEditsWrittenIntoWAL";
  HRegionInfo hri=createBasic3FamilyHRegionInfo(tableNameStr);
  Path basedir=new Path(hbaseRootDir,tableNameStr);
  deleteDir(basedir);
  HLog wal=createWAL(this.conf);
  final byte[] tableName=Bytes.toBytes(tableNameStr);
  final byte[] rowName=tableName;
  final byte[] regionName=hri.getRegionName();
  final int countPerFamily=1000;
  for (  HColumnDescriptor hcd : hri.getTableDesc().getFamilies()) {
    addWALEdits(tableName,hri,rowName,hcd.getName(),countPerFamily,ee,wal);
  }
  long logSeqId=wal.startCacheFlush();
  wal.completeCacheFlush(regionName,tableName,logSeqId,hri.isMetaRegion());
  WALEdit edit=new WALEdit();
  long now=ee.currentTimeMillis();
  edit.add(new KeyValue(rowName,Bytes.toBytes("another family"),rowName,now,rowName));
  wal.append(hri,tableName,edit,now);
  edit=new WALEdit();
  now=ee.currentTimeMillis();
  edit.add(new KeyValue(rowName,Bytes.toBytes("c"),null,now,KeyValue.Type.DeleteFamily));
  wal.append(hri,tableName,edit,now);
  wal.sync();
  HBaseTestingUtility.setMaxRecoveryErrorCount(wal.getOutputStream(),1);
  Configuration newConf=HBaseTestingUtility.setDifferentUser(this.conf,".replay.wal.secondtime");
  runWALSplit(newConf);
  FileSystem newFS=FileSystem.get(newConf);
  newConf.setInt("hbase.hregion.memstore.flush.size",1024 * 100);
  HLog newWal=createWAL(newConf);
  try {
    TestFlusher flusher=new TestFlusher();
    final HRegion region=new HRegion(basedir,newWal,newFS,newConf,hri,flusher);
    flusher.r=region;
    long seqid=region.initialize();
    assertTrue(flusher.count > 0);
    assertTrue(seqid > wal.getSequenceNumber());
    Get get=new Get(rowName);
    Result result=region.get(get,-1);
    assertEquals(countPerFamily * (hri.getTableDesc().getFamilies().size() - 1),result.size());
    region.close();
  }
  finally {
    newWal.closeAndDelete();
  }
}
