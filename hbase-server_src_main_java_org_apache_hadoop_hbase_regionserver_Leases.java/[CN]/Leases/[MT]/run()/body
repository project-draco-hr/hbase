{
  long toWait=leaseCheckFrequency;
  Lease nextLease=null;
  long nextLeaseDelay=Long.MAX_VALUE;
  while (!stopRequested || (stopRequested && !leases.isEmpty())) {
    try {
      if (nextLease != null) {
        toWait=nextLease.getDelay(TimeUnit.MILLISECONDS);
      }
      toWait=Math.min(leaseCheckFrequency,toWait);
      toWait=Math.max(MIN_WAIT_TIME,toWait);
      Thread.sleep(toWait);
    }
 catch (    InterruptedException e) {
      continue;
    }
catch (    ConcurrentModificationException e) {
      continue;
    }
catch (    Throwable e) {
      LOG.fatal("Unexpected exception killed leases thread",e);
      break;
    }
    nextLease=null;
    nextLeaseDelay=Long.MAX_VALUE;
    for (Iterator<Map.Entry<String,Lease>> it=leases.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<String,Lease> entry=it.next();
      Lease lease=entry.getValue();
      long thisLeaseDelay=lease.getDelay(TimeUnit.MILLISECONDS);
      if (thisLeaseDelay > 0) {
        if (nextLease == null || thisLeaseDelay < nextLeaseDelay) {
          nextLease=lease;
          nextLeaseDelay=thisLeaseDelay;
        }
      }
 else {
        if (lease.getListener() == null) {
          LOG.error("lease listener is null for lease " + lease.getLeaseName());
        }
 else {
          lease.getListener().leaseExpired();
        }
        it.remove();
      }
    }
  }
  close();
}
