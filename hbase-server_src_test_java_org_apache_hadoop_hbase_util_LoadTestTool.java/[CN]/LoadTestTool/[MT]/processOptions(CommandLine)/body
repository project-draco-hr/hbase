{
  this.cmd=cmd;
  tableName=TableName.valueOf(cmd.getOptionValue(OPT_TABLE_NAME,DEFAULT_TABLE_NAME));
  isWrite=cmd.hasOption(OPT_WRITE);
  isRead=cmd.hasOption(OPT_READ);
  isUpdate=cmd.hasOption(OPT_UPDATE);
  isInitOnly=cmd.hasOption(OPT_INIT_ONLY);
  deferredLogFlush=cmd.hasOption(OPT_DEFERRED_LOG_FLUSH);
  if (!isWrite && !isRead && !isUpdate&& !isInitOnly) {
    throw new IllegalArgumentException("Either -" + OPT_WRITE + " or "+ "-"+ OPT_UPDATE+ " or -"+ OPT_READ+ " has to be specified");
  }
  if (isInitOnly && (isRead || isWrite || isUpdate)) {
    throw new IllegalArgumentException(OPT_INIT_ONLY + " cannot be specified with" + " either -"+ OPT_WRITE+ " or -"+ OPT_UPDATE+ " or -"+ OPT_READ);
  }
  if (!isInitOnly) {
    if (!cmd.hasOption(OPT_NUM_KEYS)) {
      throw new IllegalArgumentException(OPT_NUM_KEYS + " must be specified in " + "read or write mode");
    }
    startKey=parseLong(cmd.getOptionValue(OPT_START_KEY,String.valueOf(DEFAULT_START_KEY)),0,Long.MAX_VALUE);
    long numKeys=parseLong(cmd.getOptionValue(OPT_NUM_KEYS),1,Long.MAX_VALUE - startKey);
    endKey=startKey + numKeys;
    isSkipInit=cmd.hasOption(OPT_SKIP_INIT);
    System.out.println("Key range: [" + startKey + ".."+ (endKey - 1)+ "]");
  }
  parseColumnFamilyOptions(cmd);
  if (isWrite) {
    String[] writeOpts=splitColonSeparated(OPT_WRITE,2,3);
    int colIndex=0;
    minColsPerKey=1;
    maxColsPerKey=2 * Integer.parseInt(writeOpts[colIndex++]);
    int avgColDataSize=parseInt(writeOpts[colIndex++],1,Integer.MAX_VALUE);
    minColDataSize=avgColDataSize / 2;
    maxColDataSize=avgColDataSize * 3 / 2;
    if (colIndex < writeOpts.length) {
      numWriterThreads=getNumThreads(writeOpts[colIndex++]);
    }
    isMultiPut=cmd.hasOption(OPT_MULTIPUT);
    System.out.println("Multi-puts: " + isMultiPut);
    System.out.println("Columns per key: " + minColsPerKey + ".."+ maxColsPerKey);
    System.out.println("Data size per column: " + minColDataSize + ".."+ maxColDataSize);
  }
  if (isUpdate) {
    String[] mutateOpts=splitColonSeparated(OPT_UPDATE,1,3);
    int colIndex=0;
    updatePercent=parseInt(mutateOpts[colIndex++],0,100);
    if (colIndex < mutateOpts.length) {
      numUpdaterThreads=getNumThreads(mutateOpts[colIndex++]);
    }
    if (colIndex < mutateOpts.length) {
      ignoreConflicts=parseInt(mutateOpts[colIndex++],0,1) == 1;
    }
    isBatchUpdate=cmd.hasOption(OPT_BATCHUPDATE);
    System.out.println("Batch updates: " + isBatchUpdate);
    System.out.println("Percent of keys to update: " + updatePercent);
    System.out.println("Updater threads: " + numUpdaterThreads);
    System.out.println("Ignore nonce conflicts: " + ignoreConflicts);
  }
  if (isRead) {
    String[] readOpts=splitColonSeparated(OPT_READ,1,2);
    int colIndex=0;
    verifyPercent=parseInt(readOpts[colIndex++],0,100);
    if (colIndex < readOpts.length) {
      numReaderThreads=getNumThreads(readOpts[colIndex++]);
    }
    if (cmd.hasOption(OPT_MAX_READ_ERRORS)) {
      maxReadErrors=parseInt(cmd.getOptionValue(OPT_MAX_READ_ERRORS),0,Integer.MAX_VALUE);
    }
    if (cmd.hasOption(OPT_KEY_WINDOW)) {
      keyWindow=parseInt(cmd.getOptionValue(OPT_KEY_WINDOW),0,Integer.MAX_VALUE);
    }
    if (cmd.hasOption(OPT_MULTIGET)) {
      multiGetBatchSize=parseInt(cmd.getOptionValue(OPT_MULTIGET),0,Integer.MAX_VALUE);
    }
    System.out.println("Multi-gets (value of 1 means no multigets): " + multiGetBatchSize);
    System.out.println("Percent of keys to verify: " + verifyPercent);
    System.out.println("Reader threads: " + numReaderThreads);
  }
  numTables=1;
  if (cmd.hasOption(NUM_TABLES)) {
    numTables=parseInt(cmd.getOptionValue(NUM_TABLES),1,Short.MAX_VALUE);
  }
  numRegionsPerServer=DEFAULT_NUM_REGIONS_PER_SERVER;
  if (cmd.hasOption(OPT_NUM_REGIONS_PER_SERVER)) {
    numRegionsPerServer=Integer.parseInt(cmd.getOptionValue(OPT_NUM_REGIONS_PER_SERVER));
  }
  regionReplication=1;
  if (cmd.hasOption(OPT_REGION_REPLICATION)) {
    regionReplication=Integer.parseInt(cmd.getOptionValue(OPT_REGION_REPLICATION));
  }
  regionReplicaId=-1;
  if (cmd.hasOption(OPT_REGION_REPLICA_ID)) {
    regionReplicaId=Integer.parseInt(cmd.getOptionValue(OPT_REGION_REPLICA_ID));
  }
}
