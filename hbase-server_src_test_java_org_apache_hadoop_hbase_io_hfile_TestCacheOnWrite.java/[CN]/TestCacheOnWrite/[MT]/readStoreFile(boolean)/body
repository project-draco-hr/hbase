{
  HFile.Reader reader=HFile.createReader(fs,storeFilePath,cacheConf,conf);
  LOG.info("HFile information: " + reader);
  HFileContext meta=new HFileContextBuilder().withCompression(compress).withBytesPerCheckSum(CKBYTES).withChecksumType(ChecksumType.NULL).withBlockSize(DATA_BLOCK_SIZE).withDataBlockEncoding(NoOpDataBlockEncoder.INSTANCE.getDataBlockEncoding()).withIncludesTags(useTags).build();
  final boolean cacheBlocks=false;
  final boolean pread=false;
  HFileScanner scanner=reader.getScanner(cacheBlocks,pread);
  assertTrue(testDescription,scanner.seekTo());
  long offset=0;
  EnumMap<BlockType,Integer> blockCountByType=new EnumMap<BlockType,Integer>(BlockType.class);
  DataBlockEncoding encodingInCache=NoOpDataBlockEncoder.INSTANCE.getDataBlockEncoding();
  List<Long> cachedBlocksOffset=new ArrayList<Long>();
  Map<Long,HFileBlock> cachedBlocks=new HashMap<Long,HFileBlock>();
  while (offset < reader.getTrailer().getLoadOnOpenDataOffset()) {
    HFileBlock block=reader.readBlock(offset,-1,false,true,false,true,null,encodingInCache);
    BlockCacheKey blockCacheKey=new BlockCacheKey(reader.getName(),offset);
    HFileBlock fromCache=(HFileBlock)blockCache.getBlock(blockCacheKey,true,false,true);
    boolean isCached=fromCache != null;
    cachedBlocksOffset.add(offset);
    cachedBlocks.put(offset,fromCache);
    boolean shouldBeCached=cowType.shouldBeCached(block.getBlockType());
    assertTrue("shouldBeCached: " + shouldBeCached + "\n"+ "isCached: "+ isCached+ "\n"+ "Test description: "+ testDescription+ "\n"+ "block: "+ block+ "\n"+ "encodingInCache: "+ encodingInCache+ "\n"+ "blockCacheKey: "+ blockCacheKey,shouldBeCached == isCached);
    if (isCached) {
      if (cacheConf.shouldCacheCompressed(fromCache.getBlockType().getCategory())) {
        if (compress != Compression.Algorithm.NONE) {
          assertFalse(fromCache.isUnpacked());
        }
        fromCache=fromCache.unpack(meta,reader.getUncachedBlockReader());
      }
 else {
        assertTrue(fromCache.isUnpacked());
      }
      assertEquals(block.getChecksumType(),fromCache.getChecksumType());
      assertEquals(block.getBlockType(),fromCache.getBlockType());
      assertNotEquals(block.getBlockType(),BlockType.ENCODED_DATA);
      assertEquals(block.getOnDiskSizeWithHeader(),fromCache.getOnDiskSizeWithHeader());
      assertEquals(block.getOnDiskSizeWithoutHeader(),fromCache.getOnDiskSizeWithoutHeader());
      assertEquals(block.getUncompressedSizeWithoutHeader(),fromCache.getUncompressedSizeWithoutHeader());
    }
    offset+=block.getOnDiskSizeWithHeader();
    BlockType bt=block.getBlockType();
    Integer count=blockCountByType.get(bt);
    blockCountByType.put(bt,(count == null ? 0 : count) + 1);
  }
  LOG.info("Block count by type: " + blockCountByType);
  String countByType=blockCountByType.toString();
  if (useTags) {
    assertEquals("{" + BlockType.DATA + "=2663, LEAF_INDEX=297, BLOOM_CHUNK=9, INTERMEDIATE_INDEX=34}",countByType);
  }
 else {
    assertEquals("{" + BlockType.DATA + "=2498, LEAF_INDEX=278, BLOOM_CHUNK=9, INTERMEDIATE_INDEX=31}",countByType);
  }
  while (scanner.next()) {
    scanner.getCell();
  }
  Iterator<Long> iterator=cachedBlocksOffset.iterator();
  while (iterator.hasNext()) {
    Long entry=iterator.next();
    BlockCacheKey blockCacheKey=new BlockCacheKey(reader.getName(),entry);
    HFileBlock hFileBlock=cachedBlocks.get(entry);
    if (hFileBlock != null) {
      blockCache.returnBlock(blockCacheKey,hFileBlock);
      if (cacheCompressedData) {
        if (this.compress == Compression.Algorithm.NONE || cowType == CacheOnWriteType.INDEX_BLOCKS || cowType == CacheOnWriteType.BLOOM_BLOCKS) {
          blockCache.returnBlock(blockCacheKey,hFileBlock);
        }
      }
 else {
        blockCache.returnBlock(blockCacheKey,hFileBlock);
      }
    }
  }
  scanner.shipped();
  reader.close();
}
