{
  final String table="CompactionCacheOnWrite";
  final String cf="myCF";
  final byte[] cfBytes=Bytes.toBytes(cf);
  final int maxVersions=3;
  Region region=TEST_UTIL.createTestRegion(table,new HColumnDescriptor(cf).setCompressionType(compress).setBloomFilterType(BLOOM_TYPE).setMaxVersions(maxVersions).setDataBlockEncoding(NoOpDataBlockEncoder.INSTANCE.getDataBlockEncoding()));
  int rowIdx=0;
  long ts=EnvironmentEdgeManager.currentTime();
  for (int iFile=0; iFile < 5; ++iFile) {
    for (int iRow=0; iRow < 500; ++iRow) {
      String rowStr="" + (rowIdx * rowIdx * rowIdx) + "row"+ iFile+ "_"+ iRow;
      Put p=new Put(Bytes.toBytes(rowStr));
      ++rowIdx;
      for (int iCol=0; iCol < 10; ++iCol) {
        String qualStr="col" + iCol;
        String valueStr="value_" + rowStr + "_"+ qualStr;
        for (int iTS=0; iTS < 5; ++iTS) {
          if (useTags) {
            Tag t=new ArrayBackedTag((byte)1,"visibility");
            Tag[] tags=new Tag[1];
            tags[0]=t;
            KeyValue kv=new KeyValue(Bytes.toBytes(rowStr),cfBytes,Bytes.toBytes(qualStr),HConstants.LATEST_TIMESTAMP,Bytes.toBytes(valueStr),tags);
            p.add(kv);
          }
 else {
            p.addColumn(cfBytes,Bytes.toBytes(qualStr),ts++,Bytes.toBytes(valueStr));
          }
        }
      }
      p.setDurability(Durability.ASYNC_WAL);
      region.put(p);
    }
    region.flush(true);
  }
  clearBlockCache(blockCache);
  assertEquals(0,blockCache.getBlockCount());
  region.compact(false);
  LOG.debug("compactStores() returned");
  for (  CachedBlock block : blockCache) {
    assertNotEquals(BlockType.ENCODED_DATA,block.getBlockType());
    assertNotEquals(BlockType.DATA,block.getBlockType());
  }
  ((HRegion)region).close();
}
