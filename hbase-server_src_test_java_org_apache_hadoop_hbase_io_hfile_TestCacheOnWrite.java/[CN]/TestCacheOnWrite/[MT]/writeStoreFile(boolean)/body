{
  if (useTags) {
    TEST_UTIL.getConfiguration().setInt("hfile.format.version",3);
  }
 else {
    TEST_UTIL.getConfiguration().setInt("hfile.format.version",2);
  }
  Path storeFileParentDir=new Path(TEST_UTIL.getDataTestDir(),"test_cache_on_write");
  HFileContext meta=new HFileContextBuilder().withCompressionAlgo(compress).withBytesPerCheckSum(CKBYTES).withChecksumType(ChecksumType.NULL).withBlockSize(DATA_BLOCK_SIZE).withDataBlockEncodingInCache(encoder.getEncodingInCache()).withDataBlockEncodingOnDisk(encoder.getEncodingOnDisk()).withIncludesTags(useTags).build();
  StoreFile.Writer sfw=new StoreFile.WriterBuilder(conf,cacheConf,fs).withOutputDir(storeFileParentDir).withComparator(KeyValue.COMPARATOR).withFileContext(meta).withBloomType(BLOOM_TYPE).withMaxKeyCount(NUM_KV).build();
  final int rowLen=32;
  for (int i=0; i < NUM_KV; ++i) {
    byte[] k=TestHFileWriterV2.randomOrderedKey(rand,i);
    byte[] v=TestHFileWriterV2.randomValue(rand);
    int cfLen=rand.nextInt(k.length - rowLen + 1);
    KeyValue kv;
    if (useTags) {
      Tag t=new Tag((byte)1,"visibility");
      List<Tag> tagList=new ArrayList<Tag>();
      tagList.add(t);
      Tag[] tags=new Tag[1];
      tags[0]=t;
      kv=new KeyValue(k,0,rowLen,k,rowLen,cfLen,k,rowLen + cfLen,k.length - rowLen - cfLen,rand.nextLong(),generateKeyType(rand),v,0,v.length,tagList);
    }
 else {
      kv=new KeyValue(k,0,rowLen,k,rowLen,cfLen,k,rowLen + cfLen,k.length - rowLen - cfLen,rand.nextLong(),generateKeyType(rand),v,0,v.length);
    }
    sfw.append(kv);
  }
  sfw.close();
  storeFilePath=sfw.getPath();
}
