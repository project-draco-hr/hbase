{
  String rsName=Addressing.createHostAndPortStr(hostname,port);
  Map<String,IpcProtocol> protocols=this.servers.get(rsName);
  if (protocols == null) {
    protocols=new HashMap<String,IpcProtocol>();
    Map<String,IpcProtocol> existingProtocols=this.servers.putIfAbsent(rsName,protocols);
    if (existingProtocols != null) {
      protocols=existingProtocols;
    }
  }
  String protocol=protocolClass.getName();
  IpcProtocol server=protocols.get(protocol);
  if (server == null) {
    String lockKey=protocol + "@" + rsName;
    this.connectionLock.putIfAbsent(lockKey,lockKey);
synchronized (this.connectionLock.get(lockKey)) {
      server=protocols.get(protocol);
      if (server == null) {
        try {
          InetSocketAddress address=new InetSocketAddress(hostname,port);
          server=HBaseClientRPC.waitForProxy(rpcEngine,protocolClass,address,this.conf,this.maxRPCAttempts,this.rpcTimeout,this.rpcTimeout);
          protocols.put(protocol,server);
        }
 catch (        RemoteException e) {
          LOG.warn("RemoteException connecting to RS",e);
          throw e.unwrapRemoteException();
        }
      }
    }
  }
  return server;
}
