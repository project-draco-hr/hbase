{
  testUtil.getHBaseAdmin().createNamespace(NamespaceDescriptor.create(tableName.getNamespaceAsString()).build());
  HTable table=testUtil.createTable(tableName,families);
  table.put(new Put(Bytes.toBytes("k")).add(family,Bytes.toBytes("q"),Bytes.toBytes("v")));
  table.flushCommits();
  MiniHBaseCluster cluster=testUtil.getMiniHBaseCluster();
  List<JVMClusterUtil.RegionServerThread> rsts=cluster.getRegionServerThreads();
  HRegion region=null;
  for (int i=0; i < cluster.getRegionServerThreads().size(); i++) {
    HRegionServer hrs=rsts.get(i).getRegionServer();
    for (    HRegion r : hrs.getOnlineRegions(tableName)) {
      region=r;
      break;
    }
  }
  assertNotNull(region);
  Thread.sleep(2000);
  RegionStoreSequenceIds ids=testUtil.getHBaseCluster().getMaster().getLastSequenceId(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(HConstants.NO_SEQNUM,ids.getLastFlushedSequenceId());
  long storeSequenceId=ids.getStoreSequenceId(0).getSequenceId();
  assertTrue(storeSequenceId > 0);
  testUtil.getHBaseAdmin().flush(tableName);
  Thread.sleep(2000);
  ids=testUtil.getHBaseCluster().getMaster().getLastSequenceId(region.getRegionInfo().getEncodedNameAsBytes());
  assertTrue(ids.getLastFlushedSequenceId() + " > " + storeSequenceId,ids.getLastFlushedSequenceId() > storeSequenceId);
  assertEquals(ids.getLastFlushedSequenceId(),ids.getStoreSequenceId(0).getSequenceId());
  table.close();
}
