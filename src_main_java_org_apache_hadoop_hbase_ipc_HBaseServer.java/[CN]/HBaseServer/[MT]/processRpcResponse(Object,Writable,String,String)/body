{
  Call call=(Call)callobj;
  int size=Handler.BUFFER_INITIAL_SIZE;
  if (value instanceof WritableWithSize) {
    WritableWithSize ohint=(WritableWithSize)value;
    long hint=ohint.getWritableSize() + Bytes.SIZEOF_BYTE + Bytes.SIZEOF_INT;
    if (hint > 0) {
      if ((hint) > Integer.MAX_VALUE) {
        IOException ioe=new IOException("Result buffer size too large: " + hint);
        errorClass=ioe.getClass().getName();
        error=StringUtils.stringifyException(ioe);
      }
 else {
        size=(int)hint;
      }
    }
  }
  ByteBufferOutputStream buf=new ByteBufferOutputStream(size);
  DataOutputStream out=new DataOutputStream(buf);
  out.writeInt(call.id);
  out.writeBoolean(error != null);
  if (error == null) {
    value.write(out);
  }
 else {
    WritableUtils.writeString(out,errorClass);
    WritableUtils.writeString(out,error);
  }
  if (buf.size() > warnResponseSize) {
    LOG.warn("responseTooLarge for: " + call + ": Size: "+ StringUtils.humanReadableInt(buf.size()));
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Served: " + ((Invocation)call.param).getMethodName());
  }
  call.setResponse(buf.getByteBuffer());
  call.sendResponseIfReady();
}
