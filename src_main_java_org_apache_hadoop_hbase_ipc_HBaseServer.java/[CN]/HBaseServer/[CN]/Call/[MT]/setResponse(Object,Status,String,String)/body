{
  if (this.isError)   return;
  if (errorClass != null) {
    this.isError=true;
  }
  Writable result=null;
  if (value instanceof Writable) {
    result=(Writable)value;
  }
 else {
    if (value != null) {
      result=new HbaseObjectWritable(value);
    }
  }
  int size=BUFFER_INITIAL_SIZE;
  if (result instanceof WritableWithSize) {
    WritableWithSize ohint=(WritableWithSize)result;
    long hint=ohint.getWritableSize() + 2 * Bytes.SIZEOF_INT;
    if (hint > Integer.MAX_VALUE) {
      IOException ioe=new IOException("Result buffer size too large: " + hint);
      errorClass=ioe.getClass().getName();
      error=StringUtils.stringifyException(ioe);
    }
 else {
      size=(int)hint;
    }
  }
  ByteBufferOutputStream buf=new ByteBufferOutputStream(size);
  try {
    RpcResponse.Builder builder=RpcResponse.newBuilder();
    builder.setCallId(this.id);
    builder.setStatus(status);
    if (error != null) {
      RpcException.Builder b=RpcException.newBuilder();
      b.setExceptionName(errorClass);
      b.setStackTrace(error);
      builder.setException(b.build());
    }
 else {
      DataOutputBuffer d=new DataOutputBuffer(size);
      result.write(d);
      byte[] response=d.getData();
      builder.setResponse(ByteString.copyFrom(response));
    }
    builder.build().writeDelimitedTo(buf);
    if (connection.useWrap) {
      wrapWithSasl(buf);
    }
  }
 catch (  IOException e) {
    LOG.warn("Exception while creating response " + e);
  }
  ByteBuffer bb=buf.getByteBuffer();
  bb.position(0);
  this.response=bb;
}
