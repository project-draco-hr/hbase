{
  LOG.info(getName() + ": starting");
  SERVER.set(HBaseServer.this);
  while (running) {
    try {
      Call call=myCallQueue.take();
      if (LOG.isDebugEnabled())       LOG.debug(getName() + ": has #" + call.id+ " from "+ call.connection);
      String errorClass=null;
      String error=null;
      Writable value=null;
      CurCall.set(call);
      try {
        if (!started)         throw new ServerNotRunningYetException("Server is not running yet");
        value=call(call.connection.protocol,call.param,call.timestamp);
      }
 catch (      Throwable e) {
        LOG.debug(getName() + ", call " + call+ ": error: "+ e,e);
        errorClass=e.getClass().getName();
        error=StringUtils.stringifyException(e);
      }
      CurCall.set(null);
      if (!call.isDelayed() || !call.isReturnValueDelayed()) {
        call.setResponse(value,errorClass,error);
      }
      call.sendResponseIfReady();
    }
 catch (    InterruptedException e) {
      if (running) {
        LOG.info(getName() + " caught: " + StringUtils.stringifyException(e));
      }
    }
catch (    OutOfMemoryError e) {
      if (errorHandler != null) {
        if (errorHandler.checkOOME(e)) {
          LOG.info(getName() + ": exiting on OOME");
          return;
        }
      }
 else {
        throw e;
      }
    }
catch (    Exception e) {
      LOG.warn(getName() + " caught: " + StringUtils.stringifyException(e));
    }
  }
  LOG.info(getName() + ": exiting");
}
