{
  if (!this.hasData.get()) {
    return new long[quantiles.length];
  }
  long[] counts=new long[this.counts.length];
  long total=0L;
  for (int i=0; i < this.counts.length; i++) {
    counts[i]=this.counts[i].get();
    total+=counts[i];
  }
  int rIndex=0;
  double qCount=total * quantiles[0];
  long cum=0L;
  long[] res=new long[quantiles.length];
  countsLoop:   for (int i=0; i < counts.length; i++) {
    long mn, mx;
    if (i == 0) {
      mn=this.min.get();
      mx=this.binsMin;
    }
 else     if (i == counts.length - 1) {
      mn=this.bins10XMax;
      mx=this.max.get();
    }
 else     if (i == counts.length - 2) {
      mn=this.binsMax;
      mx=this.bins10XMax;
    }
 else {
      mn=this.binsMin + (i - 1) * (this.binsMax - this.binsMin) / (this.counts.length - 3);
      mx=this.binsMin + i * (this.binsMax - this.binsMin) / (this.counts.length - 3);
    }
    if (mx < this.min.get()) {
      continue;
    }
    if (mn > this.max.get()) {
      break;
    }
    mn=Math.max(mn,this.min.get());
    mx=Math.min(mx,this.max.get());
    double lastCum=cum;
    cum+=counts[i];
    while (qCount <= cum) {
      if (cum == lastCum) {
        res[rIndex]=mn;
      }
 else {
        res[rIndex]=(long)((qCount - lastCum) * (mx - mn) / (cum - lastCum) + mn);
      }
      rIndex++;
      if (rIndex >= quantiles.length) {
        break countsLoop;
      }
      qCount=total * quantiles[rIndex];
    }
  }
  for (; rIndex < quantiles.length; rIndex++) {
    res[rIndex]=this.max.get();
  }
  return res;
}
