{
  TreeMap<byte[],List<Cell>> map=new TreeMap<byte[],List<Cell>>(Bytes.BYTES_COMPARATOR);
  for (  Put put : puts) {
    byte[] row=put.getRow();
    List<Cell> cells=map.get(row);
    if (cells == null) {
      cells=new ArrayList<Cell>();
      map.put(row,cells);
    }
    for (    List<? extends Cell> l : put.getFamilyMap().values()) {
      cells.addAll(l);
    }
  }
  CellSetModel model=new CellSetModel();
  for (  Map.Entry<byte[],List<Cell>> e : map.entrySet()) {
    RowModel row=new RowModel(e.getKey());
    for (    Cell cell : e.getValue()) {
      KeyValue kv=KeyValueUtil.ensureKeyValue(cell);
      row.addCell(new CellModel(kv));
    }
    model.addRow(row);
  }
  StringBuilder sb=new StringBuilder();
  sb.append('/');
  sb.append(Bytes.toStringBinary(name));
  sb.append("/$multiput");
  for (int i=0; i < maxRetries; i++) {
    Response response=client.put(sb.toString(),Constants.MIMETYPE_PROTOBUF,model.createProtobufOutput());
    int code=response.getCode();
switch (code) {
case 200:
      return;
case 509:
    try {
      Thread.sleep(sleepTime);
    }
 catch (    InterruptedException e) {
    }
  break;
default :
throw new IOException("multiput request failed with " + code);
}
}
throw new IOException("multiput request timed out");
}
