def build(args):
    'This function will be executed when ./bin/build_cluster apache_hbase is invoked.'
    container_build_dir = join(CLUSTERDOCK_VOLUME, str(uuid4()))
    makedirs(container_build_dir)
    if args.hbase_git_commit:
        build_hbase_commands = ['git clone https://github.com/apache/hbase.git {0}'.format(container_build_dir), 'git -C {0} checkout {1}'.format(container_build_dir, args.hbase_git_commit), 'mvn --batch-mode clean install -DskipTests assembly:single -f {0}/pom.xml'.format(container_build_dir)]
        maven_image = Constants.docker_images.maven
        if (not is_image_available_locally(maven_image)):
            pull_image(maven_image)
        container_configs = {'command': 'bash -c "{0}"'.format(' && '.join(build_hbase_commands)), 'image': maven_image, 'host_config': client.create_host_config(volumes_from=get_clusterdock_container_id()), }
        maven_container_id = client.create_container(**container_configs)['Id']
        client.start(container=maven_container_id)
        for line in client.logs(container=maven_container_id, stream=True):
            stdout.write(line)
            stdout.flush()
        if (client.wait(container=maven_container_id) == EX_OK):
            client.remove_container(container=maven_container_id, force=True)
        else:
            raise Exception('Error encountered while building HBase.')
        assembly_target_dir = join(container_build_dir, 'hbase-assembly', 'target')
        for a_file in listdir(assembly_target_dir):
            if a_file.endswith('bin.tar.gz'):
                args.hbase_tarball = join(assembly_target_dir, a_file)
                break
    filenames = []
    for tarball_location in [args.java_tarball, args.hadoop_tarball, args.hbase_tarball]:
        tarball_filename = tarball_location.rsplit('/', 1)[(-1)]
        filenames.append(tarball_filename)
        if (container_build_dir not in tarball_location):
            get_request = requests.get(tarball_location, stream=True, cookies=({'oraclelicense': 'accept-securebackup-cookie', } if (tarball_location == args.java_tarball) else None))
            get_request.raise_for_status()
            logger.info('Downloading %s...', tarball_filename)
            with open(join(container_build_dir, tarball_filename), 'wb') as file_descriptor:
                for chunk in get_request.iter_content(1024):
                    file_descriptor.write(chunk)
        else:
            move(tarball_location, container_build_dir)
    dockerfile_contents = '\n    FROM {nodebase_image}\n    COPY {java_tarball} /tarballs/\n    RUN mkdir /java && tar -xf /tarballs/{java_tarball} -C /java --strip-components=1\n    RUN echo "JAVA_HOME=/java" >> /etc/environment\n\n    COPY {hadoop_tarball} /tarballs/\n    RUN mkdir /hadoop && tar -xf /tarballs/{hadoop_tarball} -C /hadoop --strip-components=1\n    COPY {hbase_tarball} /tarballs/\n    RUN mkdir /hbase && tar -xf /tarballs/{hbase_tarball} -C /hbase --strip-components=1\n\n    # Remove tarballs folder.\n    RUN rm -rf /tarballs\n\n    # Set PATH explicitly.\n    RUN echo "PATH=/java/bin:/hadoop/bin:/hbase/bin/:$(echo $PATH)" >> /etc/environment\n\n    # Add hbase user and group before copying root\'s SSH keys over.\n    RUN groupadd hbase \\\n        && useradd -g hbase hbase \\\n        && cp -R /root/.ssh ~hbase \\\n        && chown -R hbase:hbase ~hbase/.ssh\n\n    # Disable requiretty in /etc/sudoers as required by HBase chaos monkey.\n    RUN sed -i \'s/Defaults\\s*requiretty/#&/\' /etc/sudoers\n    '.format(nodebase_image='/'.join([item for item in [args.registry_url, (args.namespace or DEFAULT_APACHE_NAMESPACE), 'clusterdock:{os}_nodebase'.format(os=args.operating_system)] if item]), java_tarball=filenames[0], hadoop_tarball=filenames[1], hbase_tarball=filenames[2])
    logger.info('Created Dockerfile: %s', dockerfile_contents)
    with open(join(container_build_dir, 'Dockerfile'), 'w') as dockerfile:
        dockerfile.write(dockerfile_contents)
    image = '/'.join([item for item in [args.registry_url, (args.namespace or DEFAULT_APACHE_NAMESPACE), 'clusterdock:{os}_java-{java}_hadoop-{hadoop}_hbase-{hbase}'.format(os=args.operating_system, java=args.java_version, hadoop=args.hadoop_version, hbase=args.hbase_version)] if item])
    logger.info('Building image %s...', image)
    build_image(dockerfile=join(container_build_dir, 'Dockerfile'), tag=image)
    logger.info('Removing build temporary directory...')
    return [image]
