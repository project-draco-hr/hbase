{
  SplitKeyValue split=new SplitKeyValue();
  int splitOffset=this.offset;
  int keyLen=Bytes.toInt(bytes,splitOffset);
  splitOffset+=Bytes.SIZEOF_INT;
  int valLen=Bytes.toInt(bytes,splitOffset);
  splitOffset+=Bytes.SIZEOF_INT;
  short rowLen=Bytes.toShort(bytes,splitOffset);
  splitOffset+=Bytes.SIZEOF_SHORT;
  byte[] row=new byte[rowLen];
  System.arraycopy(bytes,splitOffset,row,0,rowLen);
  splitOffset+=rowLen;
  split.setRow(row);
  byte famLen=bytes[splitOffset];
  splitOffset+=Bytes.SIZEOF_BYTE;
  byte[] family=new byte[famLen];
  System.arraycopy(bytes,splitOffset,family,0,famLen);
  splitOffset+=famLen;
  split.setFamily(family);
  int colLen=keyLen - (rowLen + famLen + Bytes.SIZEOF_SHORT+ Bytes.SIZEOF_BYTE+ Bytes.SIZEOF_LONG+ Bytes.SIZEOF_BYTE);
  byte[] qualifier=new byte[colLen];
  System.arraycopy(bytes,splitOffset,qualifier,0,colLen);
  splitOffset+=colLen;
  split.setQualifier(qualifier);
  byte[] timestamp=new byte[Bytes.SIZEOF_LONG];
  System.arraycopy(bytes,splitOffset,timestamp,0,Bytes.SIZEOF_LONG);
  splitOffset+=Bytes.SIZEOF_LONG;
  split.setTimestamp(timestamp);
  byte[] type=new byte[1];
  type[0]=bytes[splitOffset];
  splitOffset+=Bytes.SIZEOF_BYTE;
  split.setType(type);
  byte[] value=new byte[valLen];
  System.arraycopy(bytes,splitOffset,value,0,valLen);
  split.setValue(value);
  return split;
}
