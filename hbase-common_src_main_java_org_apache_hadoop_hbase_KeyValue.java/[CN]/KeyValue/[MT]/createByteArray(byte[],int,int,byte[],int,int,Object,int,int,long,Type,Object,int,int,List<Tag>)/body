{
  checkParameters(row,rlength,family,flength,qlength,vlength);
  int tagsLength=0;
  if (tags != null && !tags.isEmpty()) {
    for (    Tag t : tags) {
      tagsLength+=t.getLength();
    }
  }
  checkForTagsLength(tagsLength);
  int keyLength=(int)getKeyDataStructureSize(rlength,flength,qlength);
  byte[] bytes=new byte[(int)getKeyValueDataStructureSize(rlength,flength,qlength,vlength,tagsLength)];
  int pos=0;
  pos=Bytes.putInt(bytes,pos,keyLength);
  pos=Bytes.putInt(bytes,pos,vlength);
  pos=Bytes.putShort(bytes,pos,(short)(rlength & 0x0000ffff));
  pos=Bytes.putBytes(bytes,pos,row,roffset,rlength);
  pos=Bytes.putByte(bytes,pos,(byte)(flength & 0x0000ff));
  if (flength != 0) {
    pos=Bytes.putBytes(bytes,pos,family,foffset,flength);
  }
  if (qlength > 0) {
    if (qualifier instanceof ByteBuffer) {
      pos=Bytes.putByteBuffer(bytes,pos,(ByteBuffer)qualifier);
    }
 else {
      pos=Bytes.putBytes(bytes,pos,(byte[])qualifier,qoffset,qlength);
    }
  }
  pos=Bytes.putLong(bytes,pos,timestamp);
  pos=Bytes.putByte(bytes,pos,type.getCode());
  if (vlength > 0) {
    if (value instanceof ByteBuffer) {
      pos=Bytes.putByteBuffer(bytes,pos,(ByteBuffer)value);
    }
 else {
      pos=Bytes.putBytes(bytes,pos,(byte[])value,voffset,vlength);
    }
  }
  if (tagsLength > 0) {
    pos=Bytes.putShort(bytes,pos,(short)(tagsLength));
    for (    Tag t : tags) {
      pos=Bytes.putBytes(bytes,pos,t.getBuffer(),t.getOffset(),t.getLength());
    }
  }
  return bytes;
}
