{
  int lcolumnoffset=ROW_LENGTH_SIZE + FAMILY_LENGTH_SIZE + rowlength+ loffset;
  int rcolumnoffset=ROW_LENGTH_SIZE + FAMILY_LENGTH_SIZE + rowlength+ roffset;
  int lcolumnlength=llength - TIMESTAMP_TYPE_SIZE - (lcolumnoffset - loffset);
  int rcolumnlength=rlength - TIMESTAMP_TYPE_SIZE - (rcolumnoffset - roffset);
  byte ltype=left[loffset + (llength - 1)];
  byte rtype=right[roffset + (rlength - 1)];
  if (lcolumnlength == 0 && ltype == Type.Minimum.getCode()) {
    return 1;
  }
  if (rcolumnlength == 0 && rtype == Type.Minimum.getCode()) {
    return -1;
  }
  int common=0;
  if (commonPrefix > 0) {
    common=Math.max(0,commonPrefix - rowlength - ROW_LENGTH_SIZE- FAMILY_LENGTH_SIZE);
    common=Math.min(common,Math.min(lcolumnlength,rcolumnlength));
  }
  final int comparisonResult=Bytes.compareTo(left,lcolumnoffset + common,lcolumnlength - common,right,rcolumnoffset + common,rcolumnlength - common);
  if (comparisonResult != 0) {
    return comparisonResult;
  }
  return compareTimestampAndType(left,loffset,llength,right,roffset,rlength,ltype,rtype);
}
