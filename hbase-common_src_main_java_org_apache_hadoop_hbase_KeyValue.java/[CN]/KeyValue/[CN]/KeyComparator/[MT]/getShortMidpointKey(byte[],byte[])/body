{
  if (rightKey == null) {
    throw new IllegalArgumentException("rightKey can not be null");
  }
  if (leftKey == null) {
    return Arrays.copyOf(rightKey,rightKey.length);
  }
  if (compare(leftKey,rightKey) >= 0) {
    throw new IllegalArgumentException("Unexpected input, leftKey:" + Bytes.toString(leftKey) + ", rightKey:"+ Bytes.toString(rightKey));
  }
  short leftRowLength=Bytes.toShort(leftKey,0);
  short rightRowLength=Bytes.toShort(rightKey,0);
  int leftCommonLength=ROW_LENGTH_SIZE + FAMILY_LENGTH_SIZE + leftRowLength;
  int rightCommonLength=ROW_LENGTH_SIZE + FAMILY_LENGTH_SIZE + rightRowLength;
  int leftCommonLengthWithTSAndType=TIMESTAMP_TYPE_SIZE + leftCommonLength;
  int rightCommonLengthWithTSAndType=TIMESTAMP_TYPE_SIZE + rightCommonLength;
  int leftColumnLength=leftKey.length - leftCommonLengthWithTSAndType;
  int rightColumnLength=rightKey.length - rightCommonLengthWithTSAndType;
  if (leftRowLength == rightRowLength && compareRows(leftKey,ROW_LENGTH_SIZE,leftRowLength,rightKey,ROW_LENGTH_SIZE,rightRowLength) == 0) {
    int comparison=Bytes.compareTo(leftKey,leftCommonLength,leftColumnLength,rightKey,rightCommonLength,rightColumnLength);
    if (comparison == 0) {
      return Arrays.copyOf(rightKey,rightKey.length);
    }
    byte[] newKey=Arrays.copyOf(rightKey,rightKey.length);
    Bytes.putLong(newKey,rightKey.length - TIMESTAMP_TYPE_SIZE,HConstants.LATEST_TIMESTAMP);
    Bytes.putByte(newKey,rightKey.length - TYPE_SIZE,Type.Maximum.getCode());
    return newKey;
  }
  short minLength=leftRowLength < rightRowLength ? leftRowLength : rightRowLength;
  short diffIdx=0;
  while (diffIdx < minLength && leftKey[ROW_LENGTH_SIZE + diffIdx] == rightKey[ROW_LENGTH_SIZE + diffIdx]) {
    diffIdx++;
  }
  if (diffIdx >= minLength) {
    return Arrays.copyOf(rightKey,rightKey.length);
  }
  int diffByte=leftKey[ROW_LENGTH_SIZE + diffIdx];
  if ((0xff & diffByte) < 0xff && (diffByte + 1) < (rightKey[ROW_LENGTH_SIZE + diffIdx] & 0xff)) {
    byte[] newRowKey=new byte[diffIdx + 1];
    System.arraycopy(leftKey,ROW_LENGTH_SIZE,newRowKey,0,diffIdx);
    newRowKey[diffIdx]=(byte)(diffByte + 1);
    int rightFamilyLength=rightKey[rightCommonLength - 1];
    byte[] family=null;
    if (rightFamilyLength > 0) {
      family=new byte[rightFamilyLength];
      System.arraycopy(rightKey,rightCommonLength,family,0,rightFamilyLength);
    }
    int rightQualifierLength=rightColumnLength - rightFamilyLength;
    byte[] qualifier=null;
    if (rightQualifierLength > 0) {
      qualifier=new byte[rightQualifierLength];
      System.arraycopy(rightKey,rightCommonLength + rightFamilyLength,qualifier,0,rightQualifierLength);
    }
    return new KeyValue(newRowKey,null,null,HConstants.LATEST_TIMESTAMP,Type.Maximum).getKey();
  }
  return Arrays.copyOf(rightKey,rightKey.length);
}
