{
  int compare=compareRowKey(left,right);
  if (compare != 0) {
    return compare;
  }
  byte ltype=left.getTypeByte();
  byte rtype=right.getTypeByte();
  int lcfqLen=left.getFamilyLength() + left.getQualifierLength();
  int rcfqLen=right.getFamilyLength() + right.getQualifierLength();
  if (lcfqLen == 0 && ltype == Type.Minimum.getCode()) {
    return 1;
  }
  if (rcfqLen == 0 && rtype == Type.Minimum.getCode()) {
    return -1;
  }
  compare=Bytes.compareTo(left.getFamilyArray(),left.getFamilyOffset(),left.getFamilyLength(),right.getFamilyArray(),right.getFamilyOffset(),right.getFamilyLength());
  if (compare != 0) {
    return compare;
  }
  compare=Bytes.compareTo(left.getQualifierArray(),left.getQualifierOffset(),left.getQualifierLength(),right.getQualifierArray(),right.getQualifierOffset(),right.getQualifierLength());
  if (compare != 0) {
    return compare;
  }
  long ltimestamp=left.getTimestamp();
  long rtimestamp=right.getTimestamp();
  compare=KeyComparator.compareTimestamps(ltimestamp,rtimestamp);
  if (compare != 0) {
    return compare;
  }
  compare=(0xff & rtype) - (0xff & ltype);
  if (compare != 0) {
    return compare;
  }
  return -Longs.compare(left.getMvccVersion(),right.getMvccVersion());
}
