{
  List<RegionPlan> regionsToReturn=balanceMasterRegions(clusterMap);
  if (regionsToReturn != null || clusterMap == null || clusterMap.size() <= 1) {
    return regionsToReturn;
  }
  if (masterServerName != null && clusterMap.containsKey(masterServerName)) {
    if (clusterMap.size() <= 2) {
      return null;
    }
    clusterMap=new HashMap<ServerName,List<HRegionInfo>>(clusterMap);
    clusterMap.remove(masterServerName);
  }
  long startTime=System.currentTimeMillis();
  Cluster c=new Cluster(clusterMap,null,this.regionFinder,this.rackManager);
  if (!this.needsBalance(c))   return null;
  ClusterLoadState cs=new ClusterLoadState(clusterMap);
  int numServers=cs.getNumServers();
  NavigableMap<ServerAndLoad,List<HRegionInfo>> serversByLoad=cs.getServersByLoad();
  int numRegions=cs.getNumRegions();
  float average=cs.getLoadAverage();
  int max=(int)Math.ceil(average);
  int min=(int)average;
  StringBuilder strBalanceParam=new StringBuilder();
  strBalanceParam.append("Balance parameter: numRegions=").append(numRegions).append(", numServers=").append(numServers).append(", max=").append(max).append(", min=").append(min);
  LOG.debug(strBalanceParam.toString());
  MinMaxPriorityQueue<RegionPlan> regionsToMove=MinMaxPriorityQueue.orderedBy(rpComparator).create();
  regionsToReturn=new ArrayList<RegionPlan>();
  int serversOverloaded=0;
  boolean fetchFromTail=false;
  Map<ServerName,BalanceInfo> serverBalanceInfo=new TreeMap<ServerName,BalanceInfo>();
  for (  Map.Entry<ServerAndLoad,List<HRegionInfo>> server : serversByLoad.descendingMap().entrySet()) {
    ServerAndLoad sal=server.getKey();
    int load=sal.getLoad();
    if (load <= max) {
      serverBalanceInfo.put(sal.getServerName(),new BalanceInfo(0,0));
      break;
    }
    serversOverloaded++;
    List<HRegionInfo> regions=server.getValue();
    int numToOffload=Math.min(load - max,regions.size());
    Collections.sort(regions,riComparator);
    int numTaken=0;
    for (int i=0; i <= numToOffload; ) {
      HRegionInfo hri=regions.get(i);
      if (fetchFromTail) {
        hri=regions.get(regions.size() - 1 - i);
      }
      i++;
      if (shouldBeOnMaster(hri) && masterServerName.equals(sal.getServerName()))       continue;
      regionsToMove.add(new RegionPlan(hri,sal.getServerName(),null));
      numTaken++;
      if (numTaken >= numToOffload)       break;
    }
    serverBalanceInfo.put(sal.getServerName(),new BalanceInfo(numToOffload,(-1) * numTaken));
  }
  int totalNumMoved=regionsToMove.size();
  int neededRegions=0;
  fetchFromTail=false;
  Map<ServerName,Integer> underloadedServers=new HashMap<ServerName,Integer>();
  int maxToTake=numRegions - min;
  for (  Map.Entry<ServerAndLoad,List<HRegionInfo>> server : serversByLoad.entrySet()) {
    if (maxToTake == 0)     break;
    int load=server.getKey().getLoad();
    if (load >= min && load > 0) {
      continue;
    }
    int regionsToPut=min - load;
    if (regionsToPut == 0) {
      regionsToPut=1;
    }
    maxToTake-=regionsToPut;
    underloadedServers.put(server.getKey().getServerName(),regionsToPut);
  }
  int serversUnderloaded=underloadedServers.size();
  int incr=1;
  List<ServerName> sns=Arrays.asList(underloadedServers.keySet().toArray(new ServerName[serversUnderloaded]));
  Collections.shuffle(sns,RANDOM);
  while (regionsToMove.size() > 0) {
    int cnt=0;
    int i=incr > 0 ? 0 : underloadedServers.size() - 1;
    for (; i >= 0 && i < underloadedServers.size(); i+=incr) {
      if (regionsToMove.isEmpty())       break;
      ServerName si=sns.get(i);
      int numToTake=underloadedServers.get(si);
      if (numToTake == 0)       continue;
      addRegionPlan(regionsToMove,fetchFromTail,si,regionsToReturn);
      underloadedServers.put(si,numToTake - 1);
      cnt++;
      BalanceInfo bi=serverBalanceInfo.get(si);
      if (bi == null) {
        bi=new BalanceInfo(0,0);
        serverBalanceInfo.put(si,bi);
      }
      bi.setNumRegionsAdded(bi.getNumRegionsAdded() + 1);
    }
    if (cnt == 0)     break;
    incr=-incr;
  }
  for (  Integer i : underloadedServers.values()) {
    neededRegions+=i;
  }
  if (neededRegions == 0 && regionsToMove.isEmpty()) {
    long endTime=System.currentTimeMillis();
    LOG.info("Calculated a load balance in " + (endTime - startTime) + "ms. "+ "Moving "+ totalNumMoved+ " regions off of "+ serversOverloaded+ " overloaded servers onto "+ serversUnderloaded+ " less loaded servers");
    return regionsToReturn;
  }
  if (neededRegions != 0) {
    for (    Map.Entry<ServerAndLoad,List<HRegionInfo>> server : serversByLoad.descendingMap().entrySet()) {
      BalanceInfo balanceInfo=serverBalanceInfo.get(server.getKey().getServerName());
      int idx=balanceInfo == null ? 0 : balanceInfo.getNextRegionForUnload();
      if (idx >= server.getValue().size())       break;
      HRegionInfo region=server.getValue().get(idx);
      if (region.isMetaRegion())       continue;
      regionsToMove.add(new RegionPlan(region,server.getKey().getServerName(),null));
      totalNumMoved++;
      if (--neededRegions == 0) {
        break;
      }
    }
  }
  for (  Map.Entry<ServerAndLoad,List<HRegionInfo>> server : serversByLoad.entrySet()) {
    int regionCount=server.getKey().getLoad();
    if (regionCount >= min)     break;
    BalanceInfo balanceInfo=serverBalanceInfo.get(server.getKey().getServerName());
    if (balanceInfo != null) {
      regionCount+=balanceInfo.getNumRegionsAdded();
    }
    if (regionCount >= min) {
      continue;
    }
    int numToTake=min - regionCount;
    int numTaken=0;
    while (numTaken < numToTake && 0 < regionsToMove.size()) {
      addRegionPlan(regionsToMove,fetchFromTail,server.getKey().getServerName(),regionsToReturn);
      numTaken++;
    }
  }
  if (0 < regionsToMove.size()) {
    for (    Map.Entry<ServerAndLoad,List<HRegionInfo>> server : serversByLoad.entrySet()) {
      int regionCount=server.getKey().getLoad();
      BalanceInfo balanceInfo=serverBalanceInfo.get(server.getKey().getServerName());
      if (balanceInfo != null) {
        regionCount+=balanceInfo.getNumRegionsAdded();
      }
      if (regionCount >= max) {
        break;
      }
      addRegionPlan(regionsToMove,fetchFromTail,server.getKey().getServerName(),regionsToReturn);
      if (regionsToMove.isEmpty()) {
        break;
      }
    }
  }
  long endTime=System.currentTimeMillis();
  if (!regionsToMove.isEmpty() || neededRegions != 0) {
    LOG.warn("regionsToMove=" + totalNumMoved + ", numServers="+ numServers+ ", serversOverloaded="+ serversOverloaded+ ", serversUnderloaded="+ serversUnderloaded);
    StringBuilder sb=new StringBuilder();
    for (    Map.Entry<ServerName,List<HRegionInfo>> e : clusterMap.entrySet()) {
      if (sb.length() > 0)       sb.append(", ");
      sb.append(e.getKey().toString());
      sb.append(" ");
      sb.append(e.getValue().size());
    }
    LOG.warn("Input " + sb.toString());
  }
  LOG.info("Done. Calculated a load balance in " + (endTime - startTime) + "ms. "+ "Moving "+ totalNumMoved+ " regions off of "+ serversOverloaded+ " overloaded servers onto "+ serversUnderloaded+ " less loaded servers");
  return regionsToReturn;
}
