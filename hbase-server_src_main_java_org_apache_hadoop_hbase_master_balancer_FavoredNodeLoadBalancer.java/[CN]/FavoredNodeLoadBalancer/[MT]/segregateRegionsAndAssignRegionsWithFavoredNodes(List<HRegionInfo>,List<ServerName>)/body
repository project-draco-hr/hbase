{
  Map<ServerName,List<HRegionInfo>> assignmentMapForFavoredNodes=new HashMap<ServerName,List<HRegionInfo>>(regions.size() / 2);
  List<HRegionInfo> regionsWithNoFavoredNodes=new ArrayList<HRegionInfo>(regions.size() / 2);
  for (  HRegionInfo region : regions) {
    List<ServerName> favoredNodes=globalFavoredNodesAssignmentPlan.getFavoredNodes(region);
    ServerName primaryHost=null;
    ServerName secondaryHost=null;
    ServerName tertiaryHost=null;
    if (favoredNodes != null) {
      for (      ServerName s : favoredNodes) {
        ServerName serverWithLegitStartCode=availableServersContains(availableServers,s);
        if (serverWithLegitStartCode != null) {
          FavoredNodesPlan.Position position=FavoredNodesPlan.getFavoredServerPosition(favoredNodes,s);
          if (Position.PRIMARY.equals(position)) {
            primaryHost=serverWithLegitStartCode;
          }
 else           if (Position.SECONDARY.equals(position)) {
            secondaryHost=serverWithLegitStartCode;
          }
 else           if (Position.TERTIARY.equals(position)) {
            tertiaryHost=serverWithLegitStartCode;
          }
        }
      }
      assignRegionToAvailableFavoredNode(assignmentMapForFavoredNodes,region,primaryHost,secondaryHost,tertiaryHost);
    }
    if (primaryHost == null && secondaryHost == null && tertiaryHost == null) {
      regionsWithNoFavoredNodes.add(region);
    }
  }
  return new Pair<Map<ServerName,List<HRegionInfo>>,List<HRegionInfo>>(assignmentMapForFavoredNodes,regionsWithNoFavoredNodes);
}
