{
  try {
    FavoredNodeAssignmentHelper assignmentHelper=new FavoredNodeAssignmentHelper(servers,rackManager);
    assignmentHelper.initialize();
    ServerName primary=super.randomAssignment(regionInfo,servers);
    if (!assignmentHelper.canPlaceFavoredNodes()) {
      return primary;
    }
    List<ServerName> favoredNodes=globalFavoredNodesAssignmentPlan.getFavoredNodes(regionInfo);
    if (favoredNodes != null) {
      for (      ServerName s : favoredNodes) {
        ServerName serverWithLegitStartCode=availableServersContains(servers,s);
        if (serverWithLegitStartCode != null) {
          return serverWithLegitStartCode;
        }
      }
    }
    List<HRegionInfo> regions=new ArrayList<HRegionInfo>(1);
    regions.add(regionInfo);
    Map<HRegionInfo,ServerName> primaryRSMap=new HashMap<HRegionInfo,ServerName>(1);
    primaryRSMap.put(regionInfo,primary);
    assignSecondaryAndTertiaryNodesForRegion(assignmentHelper,regions,primaryRSMap);
    return primary;
  }
 catch (  Exception ex) {
    LOG.warn("Encountered exception while doing favored-nodes (random)assignment " + ex + " Falling back to regular assignment");
    return super.randomAssignment(regionInfo,servers);
  }
}
