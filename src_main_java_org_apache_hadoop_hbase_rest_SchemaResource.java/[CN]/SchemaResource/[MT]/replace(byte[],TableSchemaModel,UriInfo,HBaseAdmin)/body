{
  if (servlet.isReadOnly()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  try {
    HTableDescriptor htd=new HTableDescriptor(name);
    for (    Map.Entry<QName,Object> e : model.getAny().entrySet()) {
      htd.setValue(e.getKey().getLocalPart(),e.getValue().toString());
    }
    for (    ColumnSchemaModel family : model.getColumns()) {
      HColumnDescriptor hcd=new HColumnDescriptor(family.getName());
      for (      Map.Entry<QName,Object> e : family.getAny().entrySet()) {
        hcd.setValue(e.getKey().getLocalPart(),e.getValue().toString());
      }
      htd.addFamily(hcd);
    }
    if (admin.tableExists(name)) {
      admin.disableTable(name);
      admin.modifyTable(name,htd);
      admin.enableTable(name);
    }
 else     try {
      admin.createTable(htd);
    }
 catch (    TableExistsException e) {
      throw new WebApplicationException(e,Response.Status.NOT_MODIFIED);
    }
    return Response.created(uriInfo.getAbsolutePath()).build();
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.SERVICE_UNAVAILABLE);
  }
}
