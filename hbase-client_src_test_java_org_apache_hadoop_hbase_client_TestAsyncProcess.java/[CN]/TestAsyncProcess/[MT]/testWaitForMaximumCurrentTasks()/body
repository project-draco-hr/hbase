{
  final AtomicLong tasks=new AtomicLong(0);
  final AtomicInteger max=new AtomicInteger(0);
  final CyclicBarrier barrier=new CyclicBarrier(2);
  Runnable runnable=new Runnable(){
    @Override public void run(){
      try {
        barrier.await();
        AsyncProcess.waitForMaximumCurrentTasks(max.get(),tasks,1);
      }
 catch (      InterruptedIOException e) {
        Assert.fail(e.getMessage());
      }
catch (      InterruptedException e) {
        e.printStackTrace();
      }
catch (      BrokenBarrierException e) {
        e.printStackTrace();
      }
    }
  }
;
  Thread t=new Thread(runnable);
  t.start();
  barrier.await();
  t.join();
  barrier.reset();
  tasks.set(1000000);
  t=new Thread(runnable);
  t.start();
  barrier.await();
  while (tasks.get() > 0) {
    assertTrue(t.isAlive());
    tasks.set(tasks.get() - 1);
  }
  t.join();
}
