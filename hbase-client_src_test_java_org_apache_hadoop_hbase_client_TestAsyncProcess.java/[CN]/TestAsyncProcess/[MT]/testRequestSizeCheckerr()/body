{
  final long maxHeapSizePerRequest=2 * 1024 * 1024;
  final ClusterConnection conn=createHConnection();
  RequestSizeChecker checker=new RequestSizeChecker(maxHeapSizePerRequest);
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(loc1,maxHeapSizePerRequest);
    assertEquals(RowChecker.ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(loc2,maxHeapSizePerRequest);
    assertEquals(RowChecker.ReturnCode.INCLUDE,code);
  }
  ReturnCode acceptCode=checker.canTakeOperation(loc1,maxHeapSizePerRequest);
  assertEquals(RowChecker.ReturnCode.INCLUDE,acceptCode);
  checker.notifyFinal(acceptCode,loc1,maxHeapSizePerRequest);
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(loc1,maxHeapSizePerRequest);
    assertNotEquals(RowChecker.ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(loc2,maxHeapSizePerRequest);
    assertNotEquals(RowChecker.ReturnCode.INCLUDE,code);
  }
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(loc3,maxHeapSizePerRequest);
    assertEquals(RowChecker.ReturnCode.INCLUDE,code);
  }
  checker.reset();
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(loc1,maxHeapSizePerRequest);
    assertEquals(RowChecker.ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(loc2,maxHeapSizePerRequest);
    assertEquals(RowChecker.ReturnCode.INCLUDE,code);
  }
}
