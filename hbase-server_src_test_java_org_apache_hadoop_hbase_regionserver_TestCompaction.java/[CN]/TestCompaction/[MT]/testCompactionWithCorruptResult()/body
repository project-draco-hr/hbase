{
  int nfiles=10;
  for (int i=0; i < nfiles; i++) {
    createStoreFile(r);
  }
  HStore store=(HStore)r.getStore(COLUMN_FAMILY);
  List<StoreFile> storeFiles=store.getStorefiles();
  long maxId=StoreFile.getMaxSequenceIdInList(storeFiles,true);
  Compactor tool=new Compactor(this.conf);
  StoreFile.Writer compactedFile=tool.compact(store,storeFiles,false,maxId);
  FileSystem fs=FileSystem.get(conf);
  Path origPath=compactedFile.getPath();
  Path homedir=store.getHomedir();
  Path dstPath=new Path(homedir,origPath.getName());
  FSDataOutputStream stream=fs.create(origPath,null,true,512,(short)3,(long)1024,null);
  stream.writeChars("CORRUPT FILE!!!!");
  stream.close();
  try {
    store.completeCompaction(storeFiles,compactedFile);
  }
 catch (  Exception e) {
    assert(fs.exists(origPath));
    assert(!fs.exists(dstPath));
    System.out.println("testCompactionWithCorruptResult Passed");
    return;
  }
  fail("testCompactionWithCorruptResult failed since no exception was" + "thrown while completing a corrupt file");
}
