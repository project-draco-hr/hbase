{
  assertEquals(0,count());
  int origWI=HStore.closeCheckInterval;
  HStore.closeCheckInterval=10 * 1000;
  try {
    int jmax=(int)Math.ceil(15.0 / compactionThreshold);
    byte[] pad=new byte[1000];
    for (int i=0; i < compactionThreshold; i++) {
      HRegionIncommon loader=new HRegionIncommon(r);
      Put p=new Put(Bytes.add(STARTROW,Bytes.toBytes(i)));
      p.setDurability(Durability.SKIP_WAL);
      for (int j=0; j < jmax; j++) {
        p.add(COLUMN_FAMILY,Bytes.toBytes(j),pad);
      }
      HBaseTestCase.addContent(loader,Bytes.toString(COLUMN_FAMILY));
      loader.put(p);
      loader.flushcache();
    }
    HRegion spyR=spy(r);
    doAnswer(new Answer(){
      public Object answer(      InvocationOnMock invocation) throws Throwable {
        r.writestate.writesEnabled=false;
        return invocation.callRealMethod();
      }
    }
).when(spyR).doRegionCompactionPrep();
    spyR.compactStores();
    Store s=r.stores.get(COLUMN_FAMILY);
    assertEquals(compactionThreshold,s.getStorefilesCount());
    assertTrue(s.getStorefilesSize() > 15 * 1000);
    FileStatus[] ls=r.getFilesystem().listStatus(r.getRegionFileSystem().getTempDir());
    assertEquals(0,ls.length);
  }
  finally {
    r.writestate.writesEnabled=true;
    HStore.closeCheckInterval=origWI;
    for (int i=0; i < compactionThreshold; i++) {
      Delete delete=new Delete(Bytes.add(STARTROW,Bytes.toBytes(i)));
      byte[][] famAndQf={COLUMN_FAMILY,null};
      delete.deleteFamily(famAndQf[0]);
      r.delete(delete);
    }
    r.flushcache();
    final int ttl=1000;
    for (    Store hstore : this.r.stores.values()) {
      HStore store=(HStore)hstore;
      ScanInfo old=store.getScanInfo();
      ScanInfo si=new ScanInfo(old.getFamily(),old.getMinVersions(),old.getMaxVersions(),ttl,old.getKeepDeletedCells(),0,old.getComparator());
      store.setScanInfo(si);
    }
    Thread.sleep(ttl);
    r.compactStores(true);
    assertEquals(0,count());
  }
}
