{
  context=taContext;
  if (out == null) {
    outputPath=FileOutputFormat.getOutputPath(context);
    outputDir=new FileOutputCommitter(outputPath,context).getWorkPath();
  }
 else {
    outputPath=out;
    outputDir=outputPath;
  }
  conf=context.getConfiguration();
  fs=outputDir.getFileSystem(conf);
  maxsize=conf.getLong(HConstants.HREGION_MAX_FILESIZE,HConstants.DEFAULT_MAX_FILE_SIZE);
  String defaultCompressionStr=conf.get("hfile.compression",Compression.Algorithm.NONE.getName());
  defaultCompression=HFileWriterImpl.compressionByName(defaultCompressionStr);
  compactionExclude=conf.getBoolean("hbase.mapreduce.hfileoutputformat.compaction.exclude",false);
  compressionMap=createFamilyCompressionMap(conf);
  bloomTypeMap=createFamilyBloomTypeMap(conf);
  blockSizeMap=createFamilyBlockSizeMap(conf);
  String dataBlockEncodingStr=conf.get(DATABLOCK_ENCODING_OVERRIDE_CONF_KEY);
  datablockEncodingMap=createFamilyDataBlockEncodingMap(conf);
  if (dataBlockEncodingStr != null) {
    overriddenEncoding=DataBlockEncoding.valueOf(dataBlockEncodingStr);
  }
 else {
    overriddenEncoding=null;
  }
  writers=new TreeMap<byte[],WriterLength>(Bytes.BYTES_COMPARATOR);
  previousRow=HConstants.EMPTY_BYTE_ARRAY;
  now=Bytes.toBytes(EnvironmentEdgeManager.currentTime());
  rollRequested=false;
}
