{
  try {
    if (peerExists(id)) {
      throw new IllegalArgumentException("Cannot add a peer with id=" + id + " because that id already exists.");
    }
    if (id.contains("-")) {
      throw new IllegalArgumentException("Found invalid peer name:" + id);
    }
    checkQueuesDeleted(id);
    ZKUtil.createWithParents(this.zookeeper,this.peersZNode);
    try {
      String peerId=ZKUtil.joinZNode(this.hfileRefsZNode,id);
      LOG.info("Adding peer " + peerId + " to hfile reference queue.");
      ZKUtil.createWithParents(this.zookeeper,peerId);
    }
 catch (    KeeperException e) {
      throw new ReplicationException("Failed to add peer with id=" + id + ", node under hfile references node.",e);
    }
    List<ZKUtilOp> listOfOps=new ArrayList<ZKUtil.ZKUtilOp>();
    ZKUtilOp op1=ZKUtilOp.createAndFailSilent(ZKUtil.joinZNode(this.peersZNode,id),toByteArray(peerConfig));
    ZKUtilOp op2=ZKUtilOp.createAndFailSilent(getPeerStateNode(id),ENABLED_ZNODE_BYTES);
    String tableCFsStr=(tableCFs == null) ? "" : tableCFs;
    ZKUtilOp op3=ZKUtilOp.createAndFailSilent(getTableCFsNode(id),Bytes.toBytes(tableCFsStr));
    listOfOps.add(op1);
    listOfOps.add(op2);
    listOfOps.add(op3);
    ZKUtil.multiOrSequential(this.zookeeper,listOfOps,false);
  }
 catch (  KeeperException e) {
    throw new ReplicationException("Could not add peer with id=" + id + ", peerConfif=>"+ peerConfig,e);
  }
}
