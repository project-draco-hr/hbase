{
  ReplicationPeer peer=getConnectedPeer(id);
  if (peer == null) {
    throw new ReplicationException("Could not find peer Id " + id + " in connected peers");
  }
  ReplicationPeerConfig existingConfig=peer.getPeerConfig();
  if (newConfig.getClusterKey() != null && !newConfig.getClusterKey().isEmpty() && !newConfig.getClusterKey().equals(existingConfig.getClusterKey())) {
    throw new ReplicationException("Changing the cluster key on an existing peer is not allowed." + " Existing key '" + existingConfig.getClusterKey() + "' does not match new key '"+ newConfig.getClusterKey()+ "'");
  }
  String existingEndpointImpl=existingConfig.getReplicationEndpointImpl();
  if (newConfig.getReplicationEndpointImpl() != null && !newConfig.getReplicationEndpointImpl().isEmpty() && !newConfig.getReplicationEndpointImpl().equals(existingEndpointImpl)) {
    throw new ReplicationException("Changing the replication endpoint implementation class " + "on an existing peer is not allowed. Existing class '" + existingConfig.getReplicationEndpointImpl() + "' does not match new class '"+ newConfig.getReplicationEndpointImpl()+ "'");
  }
  existingConfig.getConfiguration().putAll(newConfig.getConfiguration());
  existingConfig.getPeerData().putAll(newConfig.getPeerData());
  existingConfig.setTableCFsMap(newConfig.getTableCFsMap());
  existingConfig.setNamespaces(newConfig.getNamespaces());
  try {
    ZKUtil.setData(this.zookeeper,getPeerNode(id),ReplicationSerDeHelper.toByteArray(existingConfig));
  }
 catch (  KeeperException ke) {
    throw new ReplicationException("There was a problem trying to save changes to the " + "replication peer " + id,ke);
  }
}
