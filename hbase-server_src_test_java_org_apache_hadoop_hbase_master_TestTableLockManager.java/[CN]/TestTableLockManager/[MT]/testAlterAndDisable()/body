{
  prepareMiniCluster();
  HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
  master.getCoprocessorHost().load(TestAlterAndDisableMasterObserver.class,0,TEST_UTIL.getConfiguration());
  ExecutorService executor=Executors.newFixedThreadPool(2);
  Future<Object> alterTableFuture=executor.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
      admin.addColumn(TABLE_NAME,new HColumnDescriptor(NEW_FAMILY));
      LOG.info("Added new column family");
      HTableDescriptor tableDesc=admin.getTableDescriptor(TABLE_NAME);
      assertTrue(tableDesc.getFamiliesKeys().contains(NEW_FAMILY));
      return null;
    }
  }
);
  Future<Object> disableTableFuture=executor.submit(new Callable<Object>(){
    @Override public Object call() throws Exception {
      HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
      admin.disableTable(TABLE_NAME);
      assertTrue(admin.isTableDisabled(TABLE_NAME));
      admin.deleteTable(TABLE_NAME);
      assertFalse(admin.tableExists(TABLE_NAME));
      return null;
    }
  }
);
  try {
    disableTableFuture.get();
    alterTableFuture.get();
  }
 catch (  ExecutionException e) {
    if (e.getCause() instanceof AssertionError) {
      throw (AssertionError)e.getCause();
    }
    throw e;
  }
}
