{
  mapper=ReflectionUtils.newInstance(mapClass,context.getConfiguration());
  try {
    Constructor c=context.getClass().getConstructor(Mapper.class,Configuration.class,TaskAttemptID.class,RecordReader.class,RecordWriter.class,OutputCommitter.class,StatusReporter.class,InputSplit.class);
    c.setAccessible(true);
    subcontext=(Context)c.newInstance(mapper,outer.getConfiguration(),outer.getTaskAttemptID(),new SubMapRecordReader(),new SubMapRecordWriter(),context.getOutputCommitter(),new SubMapStatusReporter(),outer.getInputSplit());
  }
 catch (  Exception e) {
    try {
      Constructor c=Class.forName("org.apache.hadoop.mapreduce.task.MapContextImpl").getConstructor(Configuration.class,TaskAttemptID.class,RecordReader.class,RecordWriter.class,OutputCommitter.class,StatusReporter.class,InputSplit.class);
      c.setAccessible(true);
      MapContext mc=(MapContext)c.newInstance(outer.getConfiguration(),outer.getTaskAttemptID(),new SubMapRecordReader(),new SubMapRecordWriter(),context.getOutputCommitter(),new SubMapStatusReporter(),outer.getInputSplit());
      Class<?> wrappedMapperClass=Class.forName("org.apache.hadoop.mapreduce.lib.map.WrappedMapper");
      Method getMapContext=wrappedMapperClass.getMethod("getMapContext",MapContext.class);
      subcontext=(Context)getMapContext.invoke(wrappedMapperClass.newInstance(),mc);
    }
 catch (    Exception ee) {
      throw new IOException(e);
    }
  }
}
