{
  String threadName=Thread.currentThread().getName();
  workerThread.setName(threadName + ".worker");
  workerThread.start();
  cacheFlusherThread.setName(threadName + ".cacheFlusher");
  cacheFlusherThread.start();
  splitOrCompactCheckerThread.setName(threadName + ".splitOrCompactChecker");
  splitOrCompactCheckerThread.start();
  logRollerThread.setName(threadName + ".logRoller");
  logRollerThread.start();
  leases=new Leases(conf.getLong("hbase.regionserver.lease.period",3 * 60 * 1000),threadWakeFrequency);
  leases.start();
  boolean masterRequestedStop=false;
  try {
    this.server.start();
    LOG.info("HRegionServer started at: " + serverInfo.getServerAddress().toString());
  }
 catch (  IOException e) {
    stopRequested=true;
    if (e instanceof RemoteException) {
      try {
        e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
      }
 catch (      IOException ex) {
        e=ex;
      }
    }
    LOG.error("",e);
  }
  while (!stopRequested) {
    long lastMsg=0;
    long waitTime;
    try {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Telling master we are up");
      }
      requestCount.set(0);
      serverInfo.setLoad(new HServerLoad(0,onlineRegions.size()));
      hbaseMaster.regionServerStartup(serverInfo);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Done telling master we are up");
      }
    }
 catch (    IOException e) {
      waitTime=stopRequested ? 0 : msgInterval - (System.currentTimeMillis() - lastMsg);
      if (waitTime > 0) {
synchronized (this) {
          try {
            wait(waitTime);
          }
 catch (          InterruptedException e1) {
          }
        }
      }
      continue;
    }
    while (!stopRequested) {
      if ((System.currentTimeMillis() - lastMsg) >= msgInterval) {
        HMsg outboundArray[]=null;
synchronized (outboundMsgs) {
          outboundArray=outboundMsgs.toArray(new HMsg[outboundMsgs.size()]);
          outboundMsgs.clear();
        }
        try {
          serverInfo.setLoad(new HServerLoad(requestCount.get(),onlineRegions.size()));
          requestCount.set(0);
          HMsg msgs[]=hbaseMaster.regionServerReport(serverInfo,outboundArray);
          lastMsg=System.currentTimeMillis();
          boolean restart=false;
          for (int i=0; i < msgs.length && !stopRequested && !restart; i++) {
switch (msgs[i].getMsg()) {
case HMsg.MSG_CALL_SERVER_STARTUP:
              if (LOG.isDebugEnabled()) {
                LOG.debug("Got call server startup message");
              }
            if (fsOk) {
              closeAllRegions();
              restart=true;
            }
          break;
case HMsg.MSG_REGIONSERVER_STOP:
        if (LOG.isDebugEnabled()) {
          LOG.debug("Got regionserver stop message");
        }
      masterRequestedStop=true;
    stopRequested=true;
  break;
default :
if (fsOk) {
  try {
    toDo.put(new ToDoEntry(msgs[i]));
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Putting into msgQueue was interrupted.",e);
  }
}
}
}
if (restart || stopRequested) {
toDo.clear();
break;
}
}
 catch (IOException e) {
if (e instanceof RemoteException) {
try {
e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
}
 catch (IOException ex) {
e=ex;
}
}
LOG.error("",e);
}
}
waitTime=stopRequested ? 0 : msgInterval - (System.currentTimeMillis() - lastMsg);
if (waitTime > 0) {
synchronized (this) {
try {
wait(waitTime);
}
 catch (InterruptedException iex) {
}
}
}
}
}
leases.closeAfterLeasesExpire();
this.worker.stop();
this.server.stop();
synchronized (logRollerLock) {
this.logRollerThread.interrupt();
}
synchronized (cacheFlusherLock) {
this.cacheFlusherThread.interrupt();
}
synchronized (splitOrCompactLock) {
this.splitOrCompactCheckerThread.interrupt();
}
if (abortRequested) {
if (fsOk) {
try {
log.close();
LOG.info("On abort, closed hlog");
}
 catch (IOException e) {
if (e instanceof RemoteException) {
try {
e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
}
 catch (IOException ex) {
e=ex;
}
}
LOG.error("Unable to close log in abort",e);
}
closeAllRegions();
}
LOG.info("aborting server at: " + serverInfo.getServerAddress().toString());
}
 else {
ArrayList<HRegion> closedRegions=closeAllRegions();
try {
log.closeAndDelete();
}
 catch (IOException e) {
if (e instanceof RemoteException) {
try {
e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
}
 catch (IOException ex) {
e=ex;
}
}
LOG.error("",e);
}
try {
if (!masterRequestedStop) {
HMsg[] exitMsg=new HMsg[closedRegions.size() + 1];
exitMsg[0]=new HMsg(HMsg.MSG_REPORT_EXITING);
int i=1;
for (HRegion region : closedRegions) {
exitMsg[i++]=new HMsg(HMsg.MSG_REPORT_CLOSE,region.getRegionInfo());
}
LOG.info("telling master that region server is shutting down at: " + serverInfo.getServerAddress().toString());
hbaseMaster.regionServerReport(serverInfo,exitMsg);
}
}
 catch (IOException e) {
if (e instanceof RemoteException) {
try {
e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
}
 catch (IOException ex) {
e=ex;
}
}
LOG.warn("",e);
}
LOG.info("stopping server at: " + serverInfo.getServerAddress().toString());
}
join();
LOG.info("main thread exiting");
}
