{
  while (!stopRequested) {
    HServerInfo info=new HServerInfo(address,rand.nextLong());
    long lastMsg=0;
    long waitTime;
    try {
      hbaseMaster.regionServerStartup(info);
    }
 catch (    IOException e) {
      waitTime=msgInterval - (System.currentTimeMillis() - lastMsg);
      if (waitTime > 0) {
        try {
          Thread.sleep(waitTime);
        }
 catch (        InterruptedException iex) {
        }
      }
      continue;
    }
    while (!stopRequested) {
      if ((System.currentTimeMillis() - lastMsg) >= msgInterval) {
        HMsg outboundArray[]=null;
synchronized (outboundMsgs) {
          outboundArray=outboundMsgs.toArray(new HMsg[outboundMsgs.size()]);
          outboundMsgs.clear();
        }
        try {
          HMsg msgs[]=hbaseMaster.regionServerReport(info,outboundArray);
          lastMsg=System.currentTimeMillis();
synchronized (toDo) {
            boolean restartOrStop=false;
            for (int i=0; i < msgs.length; i++) {
switch (msgs[i].getMsg()) {
case HMsg.MSG_CALL_SERVER_STARTUP:
                closeAllRegions();
              restartOrStop=true;
            break;
case HMsg.MSG_REGIONSERVER_ALREADY_RUNNING:
          stop();
        restartOrStop=true;
      break;
default :
    toDo.add(msgs[i]);
}
}
if (toDo.size() > 0) {
toDo.notifyAll();
}
if (restartOrStop) {
break;
}
}
}
 catch (IOException e) {
e.printStackTrace();
}
}
waitTime=msgInterval - (System.currentTimeMillis() - lastMsg);
if (waitTime > 0) {
try {
Thread.sleep(waitTime);
}
 catch (InterruptedException iex) {
}
}
}
}
}
