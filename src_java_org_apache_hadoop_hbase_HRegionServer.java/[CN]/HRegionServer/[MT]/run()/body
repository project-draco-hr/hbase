{
  while (!stopRequested) {
    long lastMsg=0;
    long waitTime;
    try {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Telling master we are up");
      }
      hbaseMaster.regionServerStartup(info);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Done telling master we are up");
      }
    }
 catch (    IOException e) {
      waitTime=stopRequested ? 0 : msgInterval - (System.currentTimeMillis() - lastMsg);
      if (waitTime > 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Sleep");
        }
synchronized (this) {
          try {
            Thread.sleep(waitTime);
          }
 catch (          InterruptedException iex) {
          }
        }
      }
      continue;
    }
    while (!stopRequested) {
      if ((System.currentTimeMillis() - lastMsg) >= msgInterval) {
        HMsg outboundArray[]=null;
synchronized (outboundMsgs) {
          outboundArray=outboundMsgs.toArray(new HMsg[outboundMsgs.size()]);
          outboundMsgs.clear();
        }
        try {
          HMsg msgs[]=hbaseMaster.regionServerReport(info,outboundArray);
          lastMsg=System.currentTimeMillis();
synchronized (toDo) {
            boolean restart=false;
            for (int i=0; i < msgs.length && !stopRequested && !restart; i++) {
switch (msgs[i].getMsg()) {
case HMsg.MSG_CALL_SERVER_STARTUP:
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Got call server startup message");
                }
              toDo.clear();
            closeAllRegions();
          restart=true;
        break;
case HMsg.MSG_REGIONSERVER_STOP:
      if (LOG.isDebugEnabled()) {
        LOG.debug("Got regionserver stop message");
      }
    toDo.clear();
  closeAllRegions();
stopRequested=true;
break;
default :
if (LOG.isDebugEnabled()) {
LOG.debug("Got default message");
}
toDo.add(msgs[i]);
}
}
if (toDo.size() > 0) {
if (LOG.isDebugEnabled()) {
LOG.debug("notify on todo");
}
toDo.notifyAll();
}
if (restart || stopRequested) {
break;
}
}
}
 catch (IOException e) {
LOG.error(e);
}
}
waitTime=stopRequested ? 0 : msgInterval - (System.currentTimeMillis() - lastMsg);
if (waitTime > 0) {
if (LOG.isDebugEnabled()) {
LOG.debug("Sleep");
}
synchronized (this) {
try {
Thread.sleep(waitTime);
}
 catch (InterruptedException iex) {
}
}
if (LOG.isDebugEnabled()) {
LOG.debug("Wake");
}
}
}
}
try {
LOG.info("stopping server at: " + info.getServerAddress().toString());
synchronized (logRollerLock) {
this.logRollerThread.interrupt();
}
synchronized (cacheFlusherLock) {
this.cacheFlusherThread.interrupt();
}
synchronized (splitOrCompactLock) {
this.splitOrCompactCheckerThread.interrupt();
}
this.worker.stop();
this.server.stop();
closeAllRegions();
log.close();
leases.close();
join();
}
 catch (IOException e) {
LOG.error(e);
}
if (LOG.isDebugEnabled()) {
LOG.debug("main thread exiting");
}
}
