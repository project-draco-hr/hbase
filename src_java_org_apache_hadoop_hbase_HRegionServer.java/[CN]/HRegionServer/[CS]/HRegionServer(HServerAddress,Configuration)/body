{
  this.abortRequested=false;
  this.fsOk=true;
  this.conf=conf;
  this.numRetries=conf.getInt("hbase.client.retries.number",2);
  this.threadWakeFrequency=conf.getInt(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.msgInterval=conf.getInt("hbase.regionserver.msginterval",3 * 1000);
  this.cacheFlusherThread=new Flusher(this.threadWakeFrequency,stopRequested);
  this.splitOrCompactCheckerThread=new SplitOrCompactChecker(this.stopRequested);
  this.worker=new Worker();
  this.workerThread=new Thread(worker);
  this.sleeper=new Sleeper(this.msgInterval,this.stopRequested);
  this.logRollerThread=new LogRoller(this.threadWakeFrequency,stopRequested);
  this.server=RPC.getServer(this,address.getBindAddress(),address.getPort(),conf.getInt("hbase.regionserver.handler.count",10),false,conf);
  this.serverInfo=new HServerInfo(new HServerAddress(new InetSocketAddress(getThisIP(),this.server.getListenerAddress().getPort())),this.rand.nextLong());
  this.leases=new Leases(conf.getInt("hbase.regionserver.lease.period",3 * 60 * 1000),this.threadWakeFrequency);
  this.hbaseMaster=(HMasterRegionInterface)RPC.waitForProxy(HMasterRegionInterface.class,HMasterRegionInterface.versionID,new HServerAddress(conf.get(MASTER_ADDRESS)).getInetSocketAddress(),conf);
}
