{
  this.stopRequested=false;
  this.regionDir=regionDir;
  this.conf=conf;
  this.rand=new Random();
  this.regions=new TreeMap<Text,HRegion>();
  this.lock=new HLocking();
  this.outboundMsgs=new Vector<HMsg>();
  this.scanners=Collections.synchronizedMap(new TreeMap<Text,HInternalScannerInterface>());
  this.threadWakeFrequency=conf.getLong(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.maxLogEntries=conf.getInt("hbase.regionserver.maxlogentries",30 * 1000);
  this.msgInterval=conf.getLong("hbase.regionserver.msginterval",15 * 1000);
  this.splitOrCompactCheckFrequency=conf.getLong("hbase.regionserver.thread.splitcompactcheckfrequency",60 * 1000);
  this.cacheFlusher=new Flusher();
  this.cacheFlusherThread=new Thread(cacheFlusher,"HRegionServer.cacheFlusher");
  this.splitOrCompactChecker=new SplitOrCompactChecker();
  this.splitOrCompactCheckerThread=new Thread(splitOrCompactChecker,"HRegionServer.splitOrCompactChecker");
  this.toDo=new Vector<HMsg>();
  this.worker=new Worker();
  this.workerThread=new Thread(worker,"HRegionServer.worker");
  try {
    this.server=RPC.getServer(this,address.getBindAddress().toString(),address.getPort(),conf.getInt("hbase.regionserver.handler.count",10),false,conf);
    this.address=new HServerAddress(server.getListenerAddress());
    String serverName=this.address.getBindAddress() + "_" + this.address.getPort();
    Path newlogdir=new Path(regionDir,"log" + "_" + serverName);
    this.oldlogfile=new Path(regionDir,"oldlogfile" + "_" + serverName);
    this.fs=FileSystem.get(conf);
    HLog.consolidateOldLog(newlogdir,oldlogfile,fs,conf);
    this.log=new HLog(fs,newlogdir,conf);
    this.logRoller=new LogRoller();
    this.logRollerThread=new Thread(logRoller,"HRegionServer.logRoller");
    this.hbaseMaster=(HMasterRegionInterface)RPC.waitForProxy(HMasterRegionInterface.class,HMasterRegionInterface.versionID,new HServerAddress(conf.get(MASTER_ADDRESS)).getInetSocketAddress(),conf);
    this.workerThread.start();
    this.cacheFlusherThread.start();
    this.splitOrCompactCheckerThread.start();
    this.logRollerThread.start();
    this.leases=new Leases(conf.getLong("hbase.regionserver.lease.period",3 * 60 * 1000),threadWakeFrequency);
    this.server.start();
  }
 catch (  IOException e) {
    this.stopRequested=true;
    throw e;
  }
  LOG.info("HRegionServer started at: " + address.toString());
}
