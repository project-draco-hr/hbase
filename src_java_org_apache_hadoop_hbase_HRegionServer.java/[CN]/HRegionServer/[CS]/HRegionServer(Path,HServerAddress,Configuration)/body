{
  this.stopRequested=false;
  this.abortRequested=false;
  this.rootDir=rootDir;
  this.conf=conf;
  this.rand=new Random();
  this.onlineRegions=Collections.synchronizedSortedMap(new TreeMap<Text,HRegion>());
  this.outboundMsgs=new Vector<HMsg>();
  this.numRetries=conf.getInt("hbase.client.retries.number",2);
  this.threadWakeFrequency=conf.getLong(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.msgInterval=conf.getLong("hbase.regionserver.msginterval",15 * 1000);
  this.splitOrCompactCheckFrequency=conf.getLong("hbase.regionserver.thread.splitcompactcheckfrequency",60 * 1000);
  this.cacheFlusher=new Flusher();
  this.cacheFlusherThread=new Thread(cacheFlusher);
  this.splitOrCompactChecker=new SplitOrCompactChecker();
  this.splitOrCompactCheckerThread=new Thread(splitOrCompactChecker);
  this.toDo=new LinkedList<ToDoEntry>();
  this.worker=new Worker();
  this.workerThread=new Thread(worker);
  try {
    this.server=RPC.getServer(this,address.getBindAddress(),address.getPort(),conf.getInt("hbase.regionserver.handler.count",10),false,conf);
    String localHostname=DNS.getDefaultHost(conf.get("dfs.datanode.dns.interface","default"),conf.get("dfs.datanode.dns.nameserver","default"));
    InetSocketAddress hostnameAddress=new InetSocketAddress(localHostname,server.getListenerAddress().getPort());
    this.serverInfo=new HServerInfo(new HServerAddress(hostnameAddress),this.rand.nextLong());
    String serverName=localHostname + "_" + this.serverInfo.getServerAddress().getPort();
    Path logdir=new Path(rootDir,"log" + "_" + serverName);
    this.fs=FileSystem.get(conf);
    if (fs.exists(logdir)) {
      throw new RegionServerRunningException("region server already running at " + this.serverInfo.getServerAddress().toString() + " because logdir "+ " exists");
    }
    this.log=new HLog(fs,logdir,conf);
    this.logRoller=new LogRoller();
    this.logRollerThread=new Thread(logRoller);
    this.hbaseMaster=(HMasterRegionInterface)RPC.waitForProxy(HMasterRegionInterface.class,HMasterRegionInterface.versionID,new HServerAddress(conf.get(MASTER_ADDRESS)).getInetSocketAddress(),conf);
  }
 catch (  IOException e) {
    this.stopRequested=true;
    throw e;
  }
}
