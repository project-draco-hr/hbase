{
  final HRegionInfo oldRegionInfo=region.getRegionInfo();
  final HRegion[] newRegions=region.closeAndSplit(midKey,this);
  final Text tableToUpdate=region.getRegionInfo().tableDesc.getName().equals(META_TABLE_NAME) ? ROOT_TABLE_NAME : META_TABLE_NAME;
  LOG.info("Updating " + tableToUpdate + " with region split info");
  for (int tries=0; tries < numRetries; tries++) {
    try {
      HRegion.removeRegionFromMETA(conf,tableToUpdate,region.getRegionName());
      break;
    }
 catch (    IOException e) {
      if (tries == numRetries - 1) {
        if (e instanceof RemoteException) {
          e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
        }
        throw e;
      }
    }
  }
  for (int i=0; i < newRegions.length; i++) {
    for (int tries=0; tries < numRetries; tries++) {
      try {
        HRegion.addRegionToMETA(conf,tableToUpdate,newRegions[i],serverInfo.getServerAddress(),serverInfo.getStartCode());
        break;
      }
 catch (      IOException e) {
        if (tries == numRetries - 1) {
          if (e instanceof RemoteException) {
            e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
          }
          throw e;
        }
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Reporting region split to master");
  }
  reportSplit(oldRegionInfo,newRegions[0].getRegionInfo(),newRegions[1].getRegionInfo());
  LOG.info("region split, META update, and report to master all" + " successful. Old region=" + oldRegionInfo.getRegionName() + ", new regions: "+ newRegions[0].getRegionName()+ ", "+ newRegions[1].getRegionName());
  lock.writeLock().lock();
  try {
    onlineRegions.put(newRegions[0].getRegionName(),newRegions[0]);
    onlineRegions.put(newRegions[1].getRegionName(),newRegions[1]);
  }
  finally {
    lock.writeLock().unlock();
  }
}
