{
  final HRegionInfo oldRegionInfo=region.getRegionInfo();
  final HRegion[] newRegions=region.closeAndSplit(midKey,this);
  HTable t=null;
  if (region.getRegionInfo().tableDesc.getName().equals(META_TABLE_NAME)) {
    if (root == null) {
      root=new HTable(conf,ROOT_TABLE_NAME);
    }
    t=root;
  }
 else {
    if (meta == null) {
      meta=new HTable(conf,META_TABLE_NAME);
    }
    t=meta;
  }
  LOG.info("Updating " + t.getTableName() + " with region split info");
  long lockid=t.startBatchUpdate(oldRegionInfo.getRegionName());
  oldRegionInfo.offLine=true;
  oldRegionInfo.split=true;
  t.put(lockid,COL_REGIONINFO,Writables.getBytes(oldRegionInfo));
  t.put(lockid,COL_SPLITA,Writables.getBytes(newRegions[0].getRegionInfo()));
  t.put(lockid,COL_SPLITB,Writables.getBytes(newRegions[1].getRegionInfo()));
  t.commitBatch(lockid);
  for (int i=0; i < newRegions.length; i++) {
    lockid=t.startBatchUpdate(newRegions[i].getRegionName());
    t.put(lockid,COL_REGIONINFO,Writables.getBytes(newRegions[i].getRegionInfo()));
    t.commitBatch(lockid);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Reporting region split to master");
  }
  reportSplit(oldRegionInfo,newRegions[0].getRegionInfo(),newRegions[1].getRegionInfo());
  LOG.info("region split, META update, and report to master all" + " successful. Old region=" + oldRegionInfo.getRegionName() + ", new regions: "+ newRegions[0].getRegionName()+ ", "+ newRegions[1].getRegionName());
}
