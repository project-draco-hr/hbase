{
  try {
    for (ToDoEntry e=null; !stopRequested.get(); ) {
      try {
        e=toDo.poll(threadWakeFrequency,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException ex) {
      }
      if (e == null || stopRequested.get()) {
        continue;
      }
      try {
        LOG.info(e.msg.toString());
switch (e.msg.getMsg()) {
case HMsg.MSG_REGION_OPEN:
          openRegion(e.msg.getRegionInfo());
        break;
case HMsg.MSG_REGION_CLOSE:
      closeRegion(e.msg.getRegionInfo(),true);
    break;
case HMsg.MSG_REGION_CLOSE_WITHOUT_REPORT:
  closeRegion(e.msg.getRegionInfo(),false);
break;
default :
throw new AssertionError("Impossible state during msg processing.  Instruction: " + e.msg.toString());
}
}
 catch (IOException ie) {
ie=RemoteExceptionHandler.checkIOException(ie);
if (e.tries < numRetries) {
LOG.warn(ie);
e.tries++;
try {
toDo.put(e);
}
 catch (InterruptedException ex) {
throw new RuntimeException("Putting into msgQueue was interrupted.",ex);
}
}
 else {
LOG.error("unable to process message: " + e.msg.toString(),ie);
if (!checkFileSystem()) {
break;
}
}
}
}
}
 catch (Throwable t) {
LOG.fatal("Unhandled exception",t);
}
 finally {
LOG.info("worker thread exiting");
}
}
