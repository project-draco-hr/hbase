{
  Map<String,String> params=new HashMap<String,String>();
  String principalInConf=getOrEmptyString(conf,usernameConfKey);
  if (!principalInConf.isEmpty()) {
    params.put(HTTP_SPNEGO_AUTHENTICATION_PRINCIPAL_SUFFIX,SecurityUtil.getServerPrincipal(principalInConf,hostName));
  }
  String httpKeytab=getOrEmptyString(conf,keytabConfKey);
  if (!httpKeytab.isEmpty()) {
    params.put(HTTP_SPNEGO_AUTHENTICATION_KEYTAB_SUFFIX,httpKeytab);
  }
  String kerberosNameRule=getOrEmptyString(conf,kerberosNameRuleKey);
  if (!kerberosNameRule.isEmpty()) {
    params.put(HTTP_SPNEGO_AUTHENTICATION_KRB_NAME_SUFFIX,kerberosNameRule);
  }
  String signatureSecretKeyFile=getOrEmptyString(conf,signatureSecretKeyFileKey);
  if (!signatureSecretKeyFile.isEmpty()) {
    params.put(HTTP_AUTHENTICATION_SIGNATURE_SECRET_FILE_SUFFIX,signatureSecretKeyFile);
  }
  params.put(AuthenticationFilter.AUTH_TYPE,"kerberos");
  if (isMissing(params.get(HTTP_SPNEGO_AUTHENTICATION_PRINCIPAL_SUFFIX)) || isMissing(params.get(HTTP_SPNEGO_AUTHENTICATION_KEYTAB_SUFFIX))) {
    throw new IllegalArgumentException(usernameConfKey + " and " + keytabConfKey+ " are both required in the configuration "+ "to enable SPNEGO/Kerberos authentication for the Web UI");
  }
  addGlobalFilter(SPNEGO_FILTER,AuthenticationFilter.class.getName(),params);
}
