{
  Configuration c=TEST_UTIL.getConfiguration();
  String aclZnode="/aclRoot";
  String quorumServers=ZKConfig.getZKQuorumServersString(c);
  int sessionTimeout=5 * 1000;
  ZooKeeper zk=new ZooKeeper(quorumServers,sessionTimeout,EmptyWatcher.instance);
  zk.addAuthInfo("digest","hbase:rox".getBytes());
  ZooKeeperWatcher zk2=new ZooKeeperWatcher(TEST_UTIL.getConfiguration(),"testMasterAddressManagerFromZK",null);
  Stat s=null;
  List<ACL> oldACL=null;
  while (true) {
    try {
      s=new Stat();
      oldACL=zk.getACL("/",s);
      break;
    }
 catch (    KeeperException e) {
switch (e.code()) {
case CONNECTIONLOSS:
case SESSIONEXPIRED:
case OPERATIONTIMEOUT:
        LOG.warn("Possibly transient ZooKeeper exception",e);
      Threads.sleep(100);
    break;
default :
  throw e;
}
}
}
while (true) {
try {
zk.setACL("/",ZooDefs.Ids.CREATOR_ALL_ACL,-1);
break;
}
 catch (KeeperException e) {
switch (e.code()) {
case CONNECTIONLOSS:
case SESSIONEXPIRED:
case OPERATIONTIMEOUT:
LOG.warn("Possibly transient ZooKeeper exception: " + e);
Threads.sleep(100);
break;
default :
throw e;
}
}
}
while (true) {
try {
zk.create(aclZnode,null,ZooDefs.Ids.CREATOR_ALL_ACL,CreateMode.PERSISTENT);
break;
}
 catch (KeeperException e) {
switch (e.code()) {
case CONNECTIONLOSS:
case SESSIONEXPIRED:
case OPERATIONTIMEOUT:
LOG.warn("Possibly transient ZooKeeper exception: " + e);
Threads.sleep(100);
break;
default :
throw e;
}
}
}
zk.close();
ZKUtil.createAndFailSilent(zk2,aclZnode);
ZooKeeper zk3=new ZooKeeper(quorumServers,sessionTimeout,EmptyWatcher.instance);
zk3.addAuthInfo("digest","hbase:rox".getBytes());
zk3.setACL("/",oldACL,-1);
zk3.close();
}
