{
  for (int i=0; i < LRUDictionary.BidirectionalLRUMap.MAX_SIZE; i++) {
    testee.findEntry((BigInteger.valueOf(i)).toByteArray(),0,(BigInteger.valueOf(i)).toByteArray().length);
  }
  assertTrue(testee.findEntry(BigInteger.ZERO.toByteArray(),0,BigInteger.ZERO.toByteArray().length) != -1);
  assertTrue(testee.findEntry(BigInteger.valueOf(Integer.MAX_VALUE).toByteArray(),0,BigInteger.valueOf(Integer.MAX_VALUE).toByteArray().length) == -1);
  assertTrue(testee.findEntry(BigInteger.valueOf(Integer.MAX_VALUE).toByteArray(),0,BigInteger.valueOf(Integer.MAX_VALUE).toByteArray().length) != -1);
  assertTrue(testee.findEntry(BigInteger.ZERO.toByteArray(),0,BigInteger.ZERO.toByteArray().length) != -1);
  for (int i=1; i < LRUDictionary.BidirectionalLRUMap.MAX_SIZE; i++) {
    assertTrue(testee.findEntry(BigInteger.valueOf(i).toByteArray(),0,BigInteger.valueOf(i).toByteArray().length) == -1);
  }
  for (int i=0; i < LRUDictionary.BidirectionalLRUMap.MAX_SIZE; i++) {
    assertTrue(testee.findEntry(BigInteger.valueOf(i).toByteArray(),0,BigInteger.valueOf(i).toByteArray().length) != -1);
  }
}
