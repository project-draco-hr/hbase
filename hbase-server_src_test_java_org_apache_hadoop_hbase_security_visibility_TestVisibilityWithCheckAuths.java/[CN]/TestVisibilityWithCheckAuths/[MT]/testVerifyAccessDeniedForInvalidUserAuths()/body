{
  PrivilegedExceptionAction<VisibilityLabelsResponse> action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
    @Override public VisibilityLabelsResponse run() throws Exception {
      try {
        return VisibilityClient.setAuths(conf,new String[]{TOPSECRET},USER.getShortName());
      }
 catch (      Throwable e) {
      }
      return null;
    }
  }
;
  SUPERUSER.runAs(action);
  final TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
  Admin hBaseAdmin=TEST_UTIL.getHBaseAdmin();
  HColumnDescriptor colDesc=new HColumnDescriptor(fam);
  colDesc.setMaxVersions(5);
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(colDesc);
  hBaseAdmin.createTable(desc);
  Table table=null;
  try {
    TEST_UTIL.getHBaseAdmin().flush(tableName);
    PrivilegedExceptionAction<Void> actiona=new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        Table table=null;
        try {
          table=TEST_UTIL.getConnection().getTable(tableName);
          Put p=new Put(row1);
          p.setCellVisibility(new CellVisibility(PUBLIC + "&" + TOPSECRET));
          p.add(fam,qual,125l,value);
          table.put(p);
          Assert.fail("Testcase should fail with AccesDeniedException");
        }
 catch (        Throwable t) {
          assertTrue(t.getMessage().contains("AccessDeniedException"));
        }
 finally {
          table.close();
        }
        return null;
      }
    }
;
    USER.runAs(actiona);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
