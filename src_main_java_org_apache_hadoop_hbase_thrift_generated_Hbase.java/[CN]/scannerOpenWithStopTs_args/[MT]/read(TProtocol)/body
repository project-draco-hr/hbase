{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case TABLE_NAME:
        if (field.type == TType.STRING) {
          this.tableName=iprot.readBinary();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case START_ROW:
    if (field.type == TType.STRING) {
      this.startRow=iprot.readBinary();
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case STOP_ROW:
if (field.type == TType.STRING) {
  this.stopRow=iprot.readBinary();
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case COLUMNS:
if (field.type == TType.LIST) {
{
TList _list134=iprot.readListBegin();
this.columns=new ArrayList<byte[]>(_list134.size);
for (int _i135=0; _i135 < _list134.size; ++_i135) {
  byte[] _elem136;
  _elem136=iprot.readBinary();
  this.columns.add(_elem136);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case TIMESTAMP:
if (field.type == TType.I64) {
this.timestamp=iprot.readI64();
setTimestampIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
