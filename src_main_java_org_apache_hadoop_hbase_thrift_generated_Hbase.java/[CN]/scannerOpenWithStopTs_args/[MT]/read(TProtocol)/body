{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.STRING) {
        this.tableName=iprot.readBinary();
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.startRow=iprot.readBinary();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.STRING) {
this.stopRow=iprot.readBinary();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.LIST) {
{
TList _list138=iprot.readListBegin();
this.columns=new ArrayList<ByteBuffer>(_list138.size);
for (int _i139=0; _i139 < _list138.size; ++_i139) {
ByteBuffer _elem140;
_elem140=iprot.readBinary();
this.columns.add(_elem140);
}
iprot.readListEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.I64) {
this.timestamp=iprot.readI64();
setTimestampIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
