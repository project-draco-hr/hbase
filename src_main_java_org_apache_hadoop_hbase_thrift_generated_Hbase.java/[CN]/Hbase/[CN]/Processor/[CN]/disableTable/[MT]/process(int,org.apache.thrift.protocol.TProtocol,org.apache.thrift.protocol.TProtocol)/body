{
  disableTable_args args=new disableTable_args();
  try {
    args.read(iprot);
  }
 catch (  org.apache.thrift.protocol.TProtocolException e) {
    iprot.readMessageEnd();
    org.apache.thrift.TApplicationException x=new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR,e.getMessage());
    oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disableTable",org.apache.thrift.protocol.TMessageType.EXCEPTION,seqid));
    x.write(oprot);
    oprot.writeMessageEnd();
    oprot.getTransport().flush();
    return;
  }
  iprot.readMessageEnd();
  disableTable_result result=new disableTable_result();
  try {
    iface_.disableTable(args.tableName);
  }
 catch (  IOError io) {
    result.io=io;
  }
catch (  Throwable th) {
    LOGGER.error("Internal error processing disableTable",th);
    org.apache.thrift.TApplicationException x=new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR,"Internal error processing disableTable");
    oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disableTable",org.apache.thrift.protocol.TMessageType.EXCEPTION,seqid));
    x.write(oprot);
    oprot.writeMessageEnd();
    oprot.getTransport().flush();
    return;
  }
  oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disableTable",org.apache.thrift.protocol.TMessageType.REPLY,seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}
