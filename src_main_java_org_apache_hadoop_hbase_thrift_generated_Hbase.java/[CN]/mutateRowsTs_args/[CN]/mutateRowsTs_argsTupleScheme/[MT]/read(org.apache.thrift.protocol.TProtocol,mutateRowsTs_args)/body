{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
{
      org.apache.thrift.protocol.TList _list387=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.rowBatches=new ArrayList<BatchMutation>(_list387.size);
      for (int _i388=0; _i388 < _list387.size; ++_i388) {
        BatchMutation _elem389;
        _elem389=new BatchMutation();
        _elem389.read(iprot);
        struct.rowBatches.add(_elem389);
      }
    }
    struct.setRowBatchesIsSet(true);
  }
  if (incoming.get(2)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map390=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map390.size);
      for (int _i391=0; _i391 < _map390.size; ++_i391) {
        ByteBuffer _key392;
        ByteBuffer _val393;
        _key392=iprot.readBinary();
        _val393=iprot.readBinary();
        struct.attributes.put(_key392,_val393);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
