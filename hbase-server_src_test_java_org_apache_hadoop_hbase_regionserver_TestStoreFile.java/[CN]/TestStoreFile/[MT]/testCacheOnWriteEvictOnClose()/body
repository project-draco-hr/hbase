{
  Configuration conf=this.conf;
  Path baseDir=new Path(new Path(testDir,"7e0102"),"twoCOWEOC");
  BlockCache bc=new CacheConfig(conf).getBlockCache();
  assertNotNull(bc);
  CacheStats cs=bc.getStats();
  long startHit=cs.getHitCount();
  long startMiss=cs.getMissCount();
  long startEvicted=cs.getEvictedCount();
  conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY,false);
  CacheConfig cacheConf=new CacheConfig(conf);
  Path pathCowOff=new Path(baseDir,"123456789");
  StoreFileWriter writer=writeStoreFile(conf,cacheConf,pathCowOff,3);
  StoreFile hsf=new StoreFile(this.fs,writer.getPath(),conf,cacheConf,BloomType.NONE);
  LOG.debug(hsf.getPath().toString());
  StoreFileReader reader=hsf.createReader();
  reader.loadFileInfo();
  StoreFileScanner scanner=getStoreFileScanner(reader,true,true);
  scanner.seek(KeyValue.LOWESTKEY);
  while (scanner.next() != null)   ;
  assertEquals(startHit,cs.getHitCount());
  assertEquals(startMiss + 3,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
  startMiss+=3;
  scanner.close();
  reader.close(cacheConf.shouldEvictOnClose());
  conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY,true);
  cacheConf=new CacheConfig(conf);
  Path pathCowOn=new Path(baseDir,"123456788");
  writer=writeStoreFile(conf,cacheConf,pathCowOn,3);
  hsf=new StoreFile(this.fs,writer.getPath(),conf,cacheConf,BloomType.NONE);
  reader=hsf.createReader();
  scanner=getStoreFileScanner(reader,true,true);
  scanner.seek(KeyValue.LOWESTKEY);
  while (scanner.next() != null)   ;
  assertEquals(startHit + 3,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
  startHit+=3;
  scanner.close();
  reader.close(cacheConf.shouldEvictOnClose());
  hsf=new StoreFile(this.fs,pathCowOff,conf,cacheConf,BloomType.NONE);
  StoreFileReader readerOne=hsf.createReader();
  readerOne.loadFileInfo();
  StoreFileScanner scannerOne=getStoreFileScanner(readerOne,true,true);
  scannerOne.seek(KeyValue.LOWESTKEY);
  hsf=new StoreFile(this.fs,pathCowOn,conf,cacheConf,BloomType.NONE);
  StoreFileReader readerTwo=hsf.createReader();
  readerTwo.loadFileInfo();
  StoreFileScanner scannerTwo=getStoreFileScanner(readerTwo,true,true);
  scannerTwo.seek(KeyValue.LOWESTKEY);
  Cell kv1=null;
  Cell kv2=null;
  while ((kv1=scannerOne.next()) != null) {
    kv2=scannerTwo.next();
    assertTrue(kv1.equals(kv2));
    KeyValue keyv1=KeyValueUtil.ensureKeyValue(kv1);
    KeyValue keyv2=KeyValueUtil.ensureKeyValue(kv2);
    assertTrue(Bytes.compareTo(keyv1.getBuffer(),keyv1.getKeyOffset(),keyv1.getKeyLength(),keyv2.getBuffer(),keyv2.getKeyOffset(),keyv2.getKeyLength()) == 0);
    assertTrue(Bytes.compareTo(kv1.getValueArray(),kv1.getValueOffset(),kv1.getValueLength(),kv2.getValueArray(),kv2.getValueOffset(),kv2.getValueLength()) == 0);
  }
  assertNull(scannerTwo.next());
  assertEquals(startHit + 6,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
  startHit+=6;
  scannerOne.close();
  readerOne.close(cacheConf.shouldEvictOnClose());
  scannerTwo.close();
  readerTwo.close(cacheConf.shouldEvictOnClose());
  conf.setBoolean("hbase.rs.evictblocksonclose",true);
  cacheConf=new CacheConfig(conf);
  hsf=new StoreFile(this.fs,pathCowOff,conf,cacheConf,BloomType.NONE);
  reader=hsf.createReader();
  reader.close(cacheConf.shouldEvictOnClose());
  assertEquals(startHit,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted + 3,cs.getEvictedCount());
  startEvicted+=3;
  conf.setBoolean("hbase.rs.evictblocksonclose",false);
  cacheConf=new CacheConfig(conf);
  hsf=new StoreFile(this.fs,pathCowOn,conf,cacheConf,BloomType.NONE);
  reader=hsf.createReader();
  reader.close(cacheConf.shouldEvictOnClose());
  assertEquals(startHit,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
}
