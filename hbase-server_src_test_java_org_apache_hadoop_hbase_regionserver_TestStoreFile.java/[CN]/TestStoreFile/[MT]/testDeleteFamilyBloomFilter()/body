{
  FileSystem fs=FileSystem.getLocal(conf);
  conf.setFloat(BloomFilterFactory.IO_STOREFILE_BLOOM_ERROR_RATE,(float)0.01);
  conf.setBoolean(BloomFilterFactory.IO_STOREFILE_BLOOM_ENABLED,true);
  float err=conf.getFloat(BloomFilterFactory.IO_STOREFILE_BLOOM_ERROR_RATE,0);
  Path f=new Path(ROOT_DIR,getName());
  HFileContext meta=new HFileContextBuilder().withBlockSize(BLOCKSIZE_SMALL).withChecksumType(CKTYPE).withBytesPerCheckSum(CKBYTES).build();
  StoreFileWriter writer=new StoreFileWriter.Builder(conf,cacheConf,this.fs).withFilePath(f).withMaxKeyCount(2000).withFileContext(meta).build();
  long now=System.currentTimeMillis();
  for (int i=0; i < 2000; i+=2) {
    String row=String.format(localFormatter,i);
    KeyValue kv=new KeyValue(row.getBytes(),"family".getBytes(),"col".getBytes(),now,KeyValue.Type.DeleteFamily,"value".getBytes());
    writer.append(kv);
  }
  writer.close();
  StoreFileReader reader=new StoreFileReader(fs,f,cacheConf,conf);
  reader.loadFileInfo();
  reader.loadBloomfilter();
  int falsePos=0;
  int falseNeg=0;
  for (int i=0; i < 2000; i++) {
    String row=String.format(localFormatter,i);
    byte[] rowKey=Bytes.toBytes(row);
    boolean exists=reader.passesDeleteFamilyBloomFilter(rowKey,0,rowKey.length);
    if (i % 2 == 0) {
      if (!exists)       falseNeg++;
    }
 else {
      if (exists)       falsePos++;
    }
  }
  assertEquals(1000,reader.getDeleteFamilyCnt());
  reader.close(true);
  fs.delete(f,true);
  assertEquals("False negatives: " + falseNeg,0,falseNeg);
  int maxFalsePos=(int)(2 * 2000 * err);
  assertTrue("Too many false positives: " + falsePos + " (err="+ err+ ", expected no more than "+ maxFalsePos,falsePos <= maxFalsePos);
}
