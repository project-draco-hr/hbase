{
  byte[] family=Bytes.toBytes("familyname");
  byte[] qualifier=Bytes.toBytes("qualifier");
  int numRows=10;
  long[] timestamps=new long[]{20,10,5,1};
  Scan scan=new Scan();
  Path storedir=new Path(new Path(this.testDir,"7e0102"),"familyname");
  Path dir=new Path(storedir,"1234567890");
  StoreFile.Writer writer=new StoreFile.WriterBuilder(conf,cacheConf,this.fs,8 * 1024).withOutputDir(dir).build();
  List<KeyValue> kvList=getKeyValueSet(timestamps,numRows,family,qualifier);
  for (  KeyValue kv : kvList) {
    writer.append(kv);
  }
  writer.appendMetadata(0,false);
  writer.close();
  StoreFile hsf=new StoreFile(this.fs,writer.getPath(),conf,cacheConf,StoreFile.BloomType.NONE,NoOpDataBlockEncoder.INSTANCE);
  StoreFile.Reader reader=hsf.createReader();
  StoreFileScanner scanner=reader.getStoreFileScanner(false,false);
  TreeSet<byte[]> columns=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
  columns.add(qualifier);
  scan.setTimeRange(20,100);
  assertTrue(scanner.shouldUseScanner(scan,columns,Long.MIN_VALUE));
  scan.setTimeRange(1,2);
  assertTrue(scanner.shouldUseScanner(scan,columns,Long.MIN_VALUE));
  scan.setTimeRange(8,10);
  assertTrue(scanner.shouldUseScanner(scan,columns,Long.MIN_VALUE));
  scan.setTimeRange(7,50);
  assertTrue(scanner.shouldUseScanner(scan,columns,Long.MIN_VALUE));
  scan.setTimeRange(27,50);
  assertTrue(!scanner.shouldUseScanner(scan,columns,Long.MIN_VALUE));
}
