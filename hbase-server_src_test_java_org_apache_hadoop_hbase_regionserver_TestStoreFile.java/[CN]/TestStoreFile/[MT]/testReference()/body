{
  final HRegionInfo hri=new HRegionInfo(TableName.valueOf("testReferenceTb"));
  HRegionFileSystem regionFs=HRegionFileSystem.createRegionOnFileSystem(conf,fs,new Path(testDir,hri.getTable().getNameAsString()),hri);
  HFileContext meta=new HFileContextBuilder().withBlockSize(8 * 1024).build();
  StoreFile.Writer writer=new StoreFile.WriterBuilder(conf,cacheConf,this.fs).withFilePath(regionFs.createTempName()).withFileContext(meta).build();
  writeStoreFile(writer);
  Path hsfPath=regionFs.commitStoreFile(TEST_FAMILY,writer.getPath());
  StoreFile hsf=new StoreFile(this.fs,hsfPath,conf,cacheConf,BloomType.NONE);
  StoreFile.Reader reader=hsf.createReader();
  Cell kv=reader.midkey();
  byte[] midRow=CellUtil.cloneRow(kv);
  kv=reader.getLastKey();
  byte[] finalRow=CellUtil.cloneRow(kv);
  hsf.closeReader(true);
  HRegionInfo splitHri=new HRegionInfo(hri.getTable(),null,midRow);
  Path refPath=splitStoreFile(regionFs,splitHri,TEST_FAMILY,hsf,midRow,true);
  StoreFile refHsf=new StoreFile(this.fs,refPath,conf,cacheConf,BloomType.NONE);
  HFileScanner s=refHsf.createReader().getScanner(false,false);
  for (boolean first=true; (!s.isSeeked() && s.seekTo()) || s.next(); ) {
    ByteBuffer bb=ByteBuffer.wrap(((KeyValue)s.getKey()).getKey());
    kv=KeyValueUtil.createKeyValueFromKey(bb);
    if (first) {
      assertTrue(Bytes.equals(kv.getRowArray(),kv.getRowOffset(),kv.getRowLength(),midRow,0,midRow.length));
      first=false;
    }
  }
  assertTrue(Bytes.equals(kv.getRowArray(),kv.getRowOffset(),kv.getRowLength(),finalRow,0,finalRow.length));
}
