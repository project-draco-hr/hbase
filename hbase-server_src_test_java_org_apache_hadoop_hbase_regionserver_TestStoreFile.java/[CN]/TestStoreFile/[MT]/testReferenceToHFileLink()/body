{
  Configuration testConf=new Configuration(this.conf);
  FSUtils.setRootDir(testConf,testDir);
  HRegionInfo hri=new HRegionInfo(TableName.valueOf("_original-evil-name"));
  HRegionFileSystem regionFs=HRegionFileSystem.createRegionOnFileSystem(testConf,fs,FSUtils.getTableDir(testDir,hri.getTable()),hri);
  HFileContext meta=new HFileContextBuilder().withBlockSize(8 * 1024).build();
  StoreFile.Writer writer=new StoreFile.WriterBuilder(testConf,cacheConf,this.fs).withFilePath(regionFs.createTempName()).withFileContext(meta).build();
  writeStoreFile(writer);
  Path storeFilePath=regionFs.commitStoreFile(TEST_FAMILY,writer.getPath());
  HRegionInfo hriClone=new HRegionInfo(TableName.valueOf("clone"));
  HRegionFileSystem cloneRegionFs=HRegionFileSystem.createRegionOnFileSystem(testConf,fs,FSUtils.getTableDir(testDir,hri.getTable()),hriClone);
  Path dstPath=cloneRegionFs.getStoreDir(TEST_FAMILY);
  HFileLink.create(testConf,this.fs,dstPath,hri,storeFilePath.getName());
  Path linkFilePath=new Path(dstPath,HFileLink.createHFileLinkName(hri,storeFilePath.getName()));
  HRegionInfo splitHriA=new HRegionInfo(hri.getTable(),null,SPLITKEY);
  HRegionInfo splitHriB=new HRegionInfo(hri.getTable(),SPLITKEY,null);
  StoreFile f=new StoreFile(fs,linkFilePath,testConf,cacheConf,BloomType.NONE);
  f.createReader();
  Path pathA=splitStoreFile(cloneRegionFs,splitHriA,TEST_FAMILY,f,SPLITKEY,true);
  Path pathB=splitStoreFile(cloneRegionFs,splitHriB,TEST_FAMILY,f,SPLITKEY,false);
  f.closeReader(true);
  FSUtils.logFileSystemState(fs,testDir,LOG);
  StoreFile hsfA=new StoreFile(this.fs,pathA,testConf,cacheConf,BloomType.NONE);
  int count=1;
  HFileScanner s=hsfA.createReader().getScanner(false,false);
  s.seekTo();
  while (s.next()) {
    count++;
  }
  assertTrue(count > 0);
  StoreFile hsfB=new StoreFile(this.fs,pathB,testConf,cacheConf,BloomType.NONE);
  HFileScanner sB=hsfB.createReader().getScanner(false,false);
  sB.seekTo();
  count++;
  while (sB.next()) {
    count++;
  }
  assertEquals((LAST_CHAR - FIRST_CHAR + 1) * (LAST_CHAR - FIRST_CHAR + 1),count);
}
