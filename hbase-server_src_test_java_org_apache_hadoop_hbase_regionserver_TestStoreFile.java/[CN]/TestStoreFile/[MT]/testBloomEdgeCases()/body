{
  float err=(float)0.005;
  FileSystem fs=FileSystem.getLocal(conf);
  Path f=new Path(ROOT_DIR,getName());
  conf.setFloat(BloomFilterFactory.IO_STOREFILE_BLOOM_ERROR_RATE,err);
  conf.setBoolean(BloomFilterFactory.IO_STOREFILE_BLOOM_ENABLED,true);
  conf.setInt(BloomFilterFactory.IO_STOREFILE_BLOOM_MAX_KEYS,1000);
  conf.setInt(HFile.FORMAT_VERSION_KEY,1);
  StoreFile.Writer writer=new StoreFile.WriterBuilder(conf,cacheConf,fs,StoreFile.DEFAULT_BLOCKSIZE_SMALL).withFilePath(f).withBloomType(StoreFile.BloomType.ROW).withMaxKeyCount(2000).withChecksumType(CKTYPE).withBytesPerChecksum(CKBYTES).build();
  assertFalse(writer.hasGeneralBloom());
  writer.close();
  fs.delete(f,true);
  conf.setInt(BloomFilterFactory.IO_STOREFILE_BLOOM_MAX_KEYS,Integer.MAX_VALUE);
  writer=new StoreFile.WriterBuilder(conf,cacheConf,fs,StoreFile.DEFAULT_BLOCKSIZE_SMALL).withFilePath(f).withBloomType(StoreFile.BloomType.ROW).withMaxKeyCount(27244696).build();
  assertTrue(writer.hasGeneralBloom());
  bloomWriteRead(writer,fs);
  writer=new StoreFile.WriterBuilder(conf,cacheConf,fs,StoreFile.DEFAULT_BLOCKSIZE_SMALL).withFilePath(f).withBloomType(StoreFile.BloomType.ROW).withMaxKeyCount(Integer.MAX_VALUE).withChecksumType(CKTYPE).withBytesPerChecksum(CKBYTES).build();
  assertFalse(writer.hasGeneralBloom());
  writer.close();
  fs.delete(f,true);
}
