{
  final TableName tableName=TableName.valueOf("testMergeTwoRegions");
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(FAMILY));
  byte[][] splitRows=new byte[3][];
  splitRows[0]=new byte[]{(byte)'2'};
  splitRows[1]=new byte[]{(byte)'4'};
  splitRows[2]=new byte[]{(byte)'6'};
  admin.createTable(desc,splitRows);
  List<HRegionInfo> tableRegions;
  HRegionInfo[] regionsToMerge1=new HRegionInfo[2];
  HRegionInfo[] regionsToMerge2=new HRegionInfo[2];
  tableRegions=admin.getTableRegions(tableName);
  assertEquals(4,admin.getTableRegions(tableName).size());
  regionsToMerge1[0]=tableRegions.get(0);
  regionsToMerge1[1]=tableRegions.get(1);
  regionsToMerge2[0]=tableRegions.get(2);
  regionsToMerge2[1]=tableRegions.get(3);
  long procId1=procExec.submitProcedure(new DispatchMergingRegionsProcedure(procExec.getEnvironment(),tableName,regionsToMerge1,true));
  long procId2=procExec.submitProcedure(new DispatchMergingRegionsProcedure(procExec.getEnvironment(),tableName,regionsToMerge2,true));
  ProcedureTestingUtility.waitProcedure(procExec,procId1);
  ProcedureTestingUtility.waitProcedure(procExec,procId2);
  ProcedureTestingUtility.assertProcNotFailed(procExec,procId1);
  ProcedureTestingUtility.assertProcNotFailed(procExec,procId2);
  assertEquals(2,admin.getTableRegions(tableName).size());
}
