{
  try {
    String deadRSZnodePath=ZKUtil.joinZNode(this.queuesZNode,znode);
    List<ZKUtilOp> listOfOps=new ArrayList<>();
    ReplicationQueueInfo replicationQueueInfo=new ReplicationQueueInfo(peerId);
    if (!peerExists(replicationQueueInfo.getPeerId())) {
      LOG.warn("Peer " + peerId + " didn't exist, will move its queue to avoid the failure of multi op");
    }
    String newPeerId=peerId + "-" + znode;
    String newPeerZnode=ZKUtil.joinZNode(this.myQueuesZnode,newPeerId);
    String oldClusterZnode=ZKUtil.joinZNode(deadRSZnodePath,peerId);
    List<String> wals=ZKUtil.listChildrenNoWatch(this.zookeeper,oldClusterZnode);
    SortedSet<String> logQueue=new TreeSet<>();
    if (wals == null || wals.size() == 0) {
      listOfOps.add(ZKUtilOp.deleteNodeFailSilent(oldClusterZnode));
    }
 else {
      ZKUtilOp op=ZKUtilOp.createAndFailSilent(newPeerZnode,HConstants.EMPTY_BYTE_ARRAY);
      listOfOps.add(op);
      for (      String wal : wals) {
        String oldWalZnode=ZKUtil.joinZNode(oldClusterZnode,wal);
        byte[] logOffset=ZKUtil.getData(this.zookeeper,oldWalZnode);
        LOG.debug("Creating " + wal + " with data "+ Bytes.toString(logOffset));
        String newLogZnode=ZKUtil.joinZNode(newPeerZnode,wal);
        listOfOps.add(ZKUtilOp.createAndFailSilent(newLogZnode,logOffset));
        listOfOps.add(ZKUtilOp.deleteNodeFailSilent(oldWalZnode));
        logQueue.add(wal);
      }
      listOfOps.add(ZKUtilOp.deleteNodeFailSilent(oldClusterZnode));
      if (LOG.isTraceEnabled())       LOG.trace(" The multi list size is: " + listOfOps.size());
    }
    ZKUtil.multiOrSequential(this.zookeeper,listOfOps,false);
    if (LOG.isTraceEnabled())     LOG.trace("Atomically moved the dead regionserver logs. ");
    return new Pair<>(newPeerId,logQueue);
  }
 catch (  KeeperException e) {
    LOG.warn("Got exception in copyQueuesFromRSUsingMulti: ",e);
  }
catch (  InterruptedException e) {
    LOG.warn("Got exception in copyQueuesFromRSUsingMulti: ",e);
    Thread.currentThread().interrupt();
  }
  return null;
}
