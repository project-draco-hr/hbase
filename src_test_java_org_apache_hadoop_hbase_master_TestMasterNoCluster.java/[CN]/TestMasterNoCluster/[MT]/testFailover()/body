{
  final long now=System.currentTimeMillis();
  final ServerName sn0=new ServerName("0.example.org",0,now);
  final ServerName sn1=new ServerName("1.example.org",1,now);
  final ServerName sn2=new ServerName("2.example.org",2,now);
  final ServerName[] sns=new ServerName[]{sn0,sn1,sn2};
  final Configuration conf=TESTUTIL.getConfiguration();
  final MockRegionServer rs0=new MockRegionServer(conf,sn0);
  final MockRegionServer rs1=new MockRegionServer(conf,sn1);
  final MockRegionServer rs2=new MockRegionServer(conf,sn2);
  RootLocationEditor.setRootLocation(rs0.getZooKeeper(),rs0.getServerName());
  byte[] rootregion=Bytes.toBytes("-ROOT-,,0");
  rs0.setGetResult(rootregion,HRegionInfo.FIRST_META_REGIONINFO.getRegionName(),Mocking.getMetaTableRowResult(HRegionInfo.FIRST_META_REGIONINFO,rs1.getServerName()));
  final byte[] tableName=Bytes.toBytes("t");
  Result[] results=new Result[]{Mocking.getMetaTableRowResult(new HRegionInfo(tableName,HConstants.EMPTY_START_ROW,HBaseTestingUtility.KEYS[1]),rs2.getServerName()),Mocking.getMetaTableRowResult(new HRegionInfo(tableName,HBaseTestingUtility.KEYS[1],HBaseTestingUtility.KEYS[2]),rs2.getServerName()),Mocking.getMetaTableRowResult(new HRegionInfo(tableName,HBaseTestingUtility.KEYS[2],HConstants.EMPTY_END_ROW),rs2.getServerName())};
  rs1.setNextResults(HRegionInfo.FIRST_META_REGIONINFO.getRegionName(),results);
  HMaster master=new HMaster(conf){
    InetAddress getRemoteInetAddress(    final int port,    final long serverStartCode) throws UnknownHostException {
      ServerName sn=sns[port];
      return InetAddress.getByAddress(sn.getHostname(),new byte[]{10,0,0,(byte)sn.getPort()});
    }
    @Override ServerManager createServerManager(    Server master,    MasterServices services) throws IOException {
      ServerManager sm=super.createServerManager(master,services);
      ServerManager spy=Mockito.spy(sm);
      Mockito.doReturn(RegionOpeningState.OPENED).when(spy).sendRegionOpen((ServerName)Mockito.any(),(HRegionInfo)Mockito.any(),Mockito.anyInt());
      return spy;
    }
    @Override CatalogTracker createCatalogTracker(    ZooKeeperWatcher zk,    Configuration conf,    Abortable abortable,    int defaultTimeout) throws IOException {
      HConnection connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(TESTUTIL.getConfiguration(),rs0,rs0.getServerName(),HRegionInfo.ROOT_REGIONINFO);
      return new CatalogTracker(zk,conf,connection,abortable,defaultTimeout);
    }
  }
;
  master.start();
  try {
    while (!master.isRpcServerOpen())     Threads.sleep(10);
    for (int i=0; i < sns.length; i++) {
      master.regionServerReport(sns[i].getVersionedBytes(),new HServerLoad());
    }
    while (!master.isInitialized()) {
      Threads.sleep(10);
    }
    assertTrue(master.isInitialized());
  }
  finally {
    rs0.stop("Test is done");
    rs1.stop("Test is done");
    rs2.stop("Test is done");
    master.stopMaster();
    master.join();
  }
}
