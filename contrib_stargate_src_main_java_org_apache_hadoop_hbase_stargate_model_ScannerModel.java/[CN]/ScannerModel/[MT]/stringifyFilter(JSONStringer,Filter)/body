{
  String typeName=filter.getClass().getSimpleName();
  FilterType type;
  try {
    type=FilterType.valueOf(typeName);
  }
 catch (  IllegalArgumentException e) {
    throw new RuntimeException("filter type " + typeName + " not supported");
  }
  s.object();
  s.key("type").value(typeName);
switch (type) {
case ColumnCountGetFilter:
    s.key("limit").value(((ColumnCountGetFilter)filter).getLimit());
  break;
case FilterList:
s.key("op").value(((FilterList)filter).getOperator().toString());
s.key("filters").array();
for (Filter child : ((FilterList)filter).getFilters()) {
stringifyFilter(s,child);
}
s.endArray();
break;
case FirstKeyOnlyFilter:
break;
case InclusiveStopFilter:
s.key("value").value(Base64.encodeBytes(((InclusiveStopFilter)filter).getStopRowKey()));
break;
case PageFilter:
s.key("value").value(((PageFilter)filter).getPageSize());
break;
case PrefixFilter:
s.key("value").value(Base64.encodeBytes(((PrefixFilter)filter).getPrefix()));
break;
case QualifierFilter:
case RowFilter:
case ValueFilter:
s.key("op").value(((CompareFilter)filter).getOperator().toString());
s.key("comparator");
stringifyComparator(s,((CompareFilter)filter).getComparator());
break;
case SingleColumnValueFilter:
{
SingleColumnValueFilter scvf=(SingleColumnValueFilter)filter;
s.key("family").value(scvf.getFamily());
byte[] qualifier=scvf.getQualifier();
if (qualifier != null) {
s.key("qualifier").value(qualifier);
}
s.key("op").value(scvf.getOperator().toString());
s.key("comparator");
stringifyComparator(s,scvf.getComparator());
if (scvf.getFilterIfMissing()) {
s.key("ifMissing").value(true);
}
if (scvf.getLatestVersionOnly()) {
s.key("latestVersion").value(true);
}
}
break;
case SkipFilter:
s.key("filter");
stringifyFilter(s,((SkipFilter)filter).getFilter());
break;
case WhileMatchFilter:
s.key("filter");
stringifyFilter(s,((WhileMatchFilter)filter).getFilter());
break;
}
s.endObject();
return s;
}
