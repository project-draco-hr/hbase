{
  String type=o.getString("type");
  Filter filter;
switch (FilterType.valueOf(type)) {
case ColumnCountGetFilter:
{
      filter=new ColumnCountGetFilter(o.getInt("limit"));
    }
  break;
case FilterList:
{
  JSONArray arr=o.getJSONArray("filters");
  List<Filter> filters=new ArrayList<Filter>(arr.length());
  for (int i=0; i < arr.length(); i++) {
    filters.add(buildFilter(arr.getJSONObject(i)));
  }
  filter=new FilterList(FilterList.Operator.valueOf(o.getString("op")),filters);
}
break;
case FirstKeyOnlyFilter:
{
filter=new FirstKeyOnlyFilter();
}
break;
case InclusiveStopFilter:
{
filter=new InclusiveStopFilter(Base64.decode(o.getString("value")));
}
break;
case PageFilter:
{
filter=new PageFilter(o.getLong("value"));
}
break;
case PrefixFilter:
{
filter=new PrefixFilter(Base64.decode(o.getString("value")));
}
break;
case QualifierFilter:
{
filter=new QualifierFilter(CompareOp.valueOf(o.getString("op")),buildWritableByteArrayComparable(o.getJSONObject("comparator")));
}
break;
case RowFilter:
{
filter=new RowFilter(CompareOp.valueOf(o.getString("op")),buildWritableByteArrayComparable(o.getJSONObject("comparator")));
}
break;
case SingleColumnValueFilter:
{
filter=new SingleColumnValueFilter(Base64.decode(o.getString("family")),o.has("qualifier") ? Base64.decode(o.getString("qualifier")) : null,CompareOp.valueOf(o.getString("op")),buildWritableByteArrayComparable(o.getJSONObject("comparator")));
if (o.has("ifMissing")) {
((SingleColumnValueFilter)filter).setFilterIfMissing(o.getBoolean("ifMissing"));
}
if (o.has("latestVersion")) {
((SingleColumnValueFilter)filter).setLatestVersionOnly(o.getBoolean("latestVersion"));
}
}
break;
case SkipFilter:
{
filter=new SkipFilter(buildFilter(o.getJSONObject("filter")));
}
break;
case ValueFilter:
{
filter=new ValueFilter(CompareOp.valueOf(o.getString("op")),buildWritableByteArrayComparable(o.getJSONObject("comparator")));
}
break;
case WhileMatchFilter:
{
filter=new WhileMatchFilter(buildFilter(o.getJSONObject("filter")));
}
break;
default :
{
throw new RuntimeException("unhandled filter type: " + type);
}
}
return filter;
}
