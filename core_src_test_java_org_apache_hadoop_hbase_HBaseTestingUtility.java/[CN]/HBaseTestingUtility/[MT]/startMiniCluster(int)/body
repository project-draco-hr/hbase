{
  LOG.info("Starting up minicluster");
  if (this.clusterTestBuildDir != null) {
    throw new IOException("Cluster already running at " + this.clusterTestBuildDir);
  }
  String oldTestBuildDir=System.getProperty(TEST_DIRECTORY_KEY,"build/test/data");
  String randomStr=UUID.randomUUID().toString();
  String clusterTestBuildDirStr=oldTestBuildDir + "." + randomStr;
  this.clusterTestBuildDir=new File(clusterTestBuildDirStr).getAbsoluteFile();
  this.clusterTestBuildDir.deleteOnExit();
  System.setProperty(TEST_DIRECTORY_KEY,clusterTestBuildDirStr);
  this.dfsCluster=new MiniDFSCluster(0,this.conf,servers,true,true,true,null,null,null,null);
  System.setProperty(TEST_DIRECTORY_KEY,oldTestBuildDir);
  FileSystem fs=this.dfsCluster.getFileSystem();
  this.conf.set("fs.defaultFS",fs.getUri().toString());
  this.dfsCluster.waitClusterUp();
  if (this.zkCluster == null) {
    startMiniZKCluster();
  }
  Path hbaseRootdir=fs.makeQualified(fs.getHomeDirectory());
  this.conf.set(HConstants.HBASE_DIR,hbaseRootdir.toString());
  fs.mkdirs(hbaseRootdir);
  FSUtils.setVersion(fs,hbaseRootdir);
  this.hbaseCluster=new MiniHBaseCluster(this.conf,servers);
  HTable t=new HTable(this.conf,HConstants.META_TABLE_NAME);
  ResultScanner s=t.getScanner(new Scan());
  while (s.next() != null)   continue;
  LOG.info("Minicluster is up");
}
