{
  final AggregateRequest requestArg=validateArgAndGetPB(scan,ci,false);
class SumCallBack implements Batch.Callback<S> {
    S sumVal=null;
    public S getSumResult(){
      return sumVal;
    }
    @Override public synchronized void update(    byte[] region,    byte[] row,    S result){
      sumVal=ci.add(sumVal,result);
    }
  }
  SumCallBack sumCallBack=new SumCallBack();
  table.coprocessorService(AggregateService.class,scan.getStartRow(),scan.getStopRow(),new Batch.Call<AggregateService,S>(){
    @Override public S call(    AggregateService instance) throws IOException {
      ServerRpcController controller=new ServerRpcController();
      CoprocessorRpcUtils.BlockingRpcCallback<AggregateResponse> rpcCallback=new CoprocessorRpcUtils.BlockingRpcCallback<AggregateResponse>();
      instance.getSum(controller,requestArg,rpcCallback);
      AggregateResponse response=rpcCallback.get();
      if (controller.failedOnException()) {
        throw controller.getFailedOn();
      }
      if (response.getFirstPartCount() == 0) {
        return null;
      }
      ByteString b=response.getFirstPart(0);
      T t=getParsedGenericInstance(ci.getClass(),4,b);
      S s=ci.getPromotedValueFromProto(t);
      return s;
    }
  }
,sumCallBack);
  return sumCallBack.getSumResult();
}
