{
  this.basedir=basedir;
  this.comparator=regionInfo.getComparator();
  this.log=log;
  this.fs=fs;
  this.conf=conf;
  this.regionInfo=regionInfo;
  this.flushListener=flushListener;
  this.threadWakeFrequency=conf.getLong(THREAD_WAKE_FREQUENCY,10 * 1000);
  String encodedNameStr=Integer.toString(this.regionInfo.getEncodedName());
  this.regiondir=new Path(basedir,encodedNameStr);
  this.historian=RegionHistorian.getInstance();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Opening region " + this + ", encoded="+ this.regionInfo.getEncodedName());
  }
  this.regionCompactionDir=new Path(getCompactionDir(basedir),encodedNameStr);
  int flushSize=regionInfo.getTableDesc().getMemcacheFlushSize();
  if (flushSize == HTableDescriptor.DEFAULT_MEMCACHE_FLUSH_SIZE) {
    flushSize=conf.getInt("hbase.hregion.memcache.flush.size",HTableDescriptor.DEFAULT_MEMCACHE_FLUSH_SIZE);
  }
  this.memcacheFlushSize=flushSize;
  this.blockingMemcacheSize=this.memcacheFlushSize * conf.getInt("hbase.hregion.memcache.block.multiplier",1);
}
