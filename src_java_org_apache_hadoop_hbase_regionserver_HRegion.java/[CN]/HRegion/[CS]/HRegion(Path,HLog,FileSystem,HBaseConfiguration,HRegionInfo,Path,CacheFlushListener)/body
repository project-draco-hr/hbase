{
  this.basedir=basedir;
  this.log=log;
  this.fs=fs;
  this.conf=conf;
  this.regionInfo=regionInfo;
  this.threadWakeFrequency=conf.getLong(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.regiondir=new Path(basedir,this.regionInfo.getEncodedName());
  Path oldLogFile=new Path(regiondir,HREGION_OLDLOGFILE_NAME);
  this.regionCompactionDir=new Path(getCompactionDir(basedir),this.regionInfo.getEncodedName());
  if (initialFiles != null && fs.exists(initialFiles)) {
    fs.rename(initialFiles,this.regiondir);
  }
  long maxSeqId=-1;
  for (  HColumnDescriptor c : this.regionInfo.getTableDesc().families().values()) {
    HStore store=new HStore(this.basedir,this.regionInfo,c,this.fs,oldLogFile,this.conf);
    stores.put(c.getFamilyName(),store);
    long storeSeqId=store.getMaxSequenceId();
    if (storeSeqId > maxSeqId) {
      maxSeqId=storeSeqId;
    }
  }
  this.minSequenceId=maxSeqId;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Next sequence id for region " + regionInfo.getRegionName() + " is "+ this.minSequenceId);
  }
  Path splits=new Path(regiondir,SPLITDIR);
  if (fs.exists(splits)) {
    fs.delete(splits);
  }
  Path merges=new Path(regiondir,MERGEDIR);
  if (fs.exists(merges)) {
    fs.delete(merges);
  }
  this.memcacheFlushSize=conf.getInt("hbase.hregion.memcache.flush.size",1024 * 1024 * 64);
  this.flushListener=listener;
  this.blockingMemcacheSize=this.memcacheFlushSize * conf.getInt("hbase.hregion.memcache.block.multiplier",1);
  this.desiredMaxFileSize=conf.getLong("hbase.hregion.max.filesize",DEFAULT_MAX_FILE_SIZE);
  this.writestate.compacting=false;
  this.lastFlushTime=System.currentTimeMillis();
  LOG.info("region " + this.regionInfo.getRegionName() + " available");
}
