{
  final long startTime=System.currentTimeMillis();
  this.flushRequested=false;
  this.lastFlushTime=startTime;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Started memcache flush for region " + this + ". Current region memcache size "+ StringUtils.humanReadableInt(this.memcacheSize.get()));
  }
  long sequenceId=-1L;
  this.updatesLock.writeLock().lock();
  try {
    for (    HStore s : stores.values()) {
      s.snapshot();
    }
    sequenceId=log.startCacheFlush();
    this.memcacheSize.set(0);
  }
  finally {
    this.updatesLock.writeLock().unlock();
  }
  long flushed=0;
  try {
    for (    HStore hstore : stores.values()) {
      flushed+=hstore.flushCache(sequenceId);
    }
  }
 catch (  Throwable t) {
    this.log.abortCacheFlush();
    DroppedSnapshotException dse=new DroppedSnapshotException();
    dse.initCause(t);
    throw dse;
  }
  this.log.completeCacheFlush(getRegionName(),regionInfo.getTableDesc().getName(),sequenceId);
synchronized (this) {
    notifyAll();
  }
  if (LOG.isDebugEnabled()) {
    String timeTaken=StringUtils.formatTimeDiff(System.currentTimeMillis(),startTime);
    LOG.debug("Finished memcache flush for region " + this + " in "+ (System.currentTimeMillis() - startTime)+ "ms, sequence id="+ sequenceId+ ", "+ StringUtils.humanReadableInt(flushed));
    if (!regionInfo.isMetaRegion()) {
      this.historian.addRegionFlush(regionInfo,timeTaken);
    }
  }
  return true;
}
