{
  if (!a.getRegionInfo().getTableDesc().getNameAsString().equals(b.getRegionInfo().getTableDesc().getNameAsString())) {
    throw new IOException("Regions do not belong to the same table");
  }
  FileSystem fs=a.getFilesystem();
  a.flushcache();
  b.flushcache();
  a.compactStores(true);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Files for region: " + a);
    listPaths(fs,a.getRegionDir());
  }
  b.compactStores(true);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Files for region: " + b);
    listPaths(fs,b.getRegionDir());
  }
  HBaseConfiguration conf=a.getConf();
  HTableDescriptor tabledesc=a.getTableDesc();
  HLog log=a.getLog();
  Path basedir=a.getBaseDir();
  final byte[] startKey=Bytes.equals(a.getStartKey(),EMPTY_BYTE_ARRAY) || Bytes.equals(b.getStartKey(),EMPTY_BYTE_ARRAY) ? EMPTY_BYTE_ARRAY : Bytes.compareTo(a.getStartKey(),b.getStartKey()) <= 0 ? a.getStartKey() : b.getStartKey();
  final byte[] endKey=Bytes.equals(a.getEndKey(),EMPTY_BYTE_ARRAY) || Bytes.equals(b.getEndKey(),EMPTY_BYTE_ARRAY) ? EMPTY_BYTE_ARRAY : Bytes.compareTo(a.getEndKey(),b.getEndKey()) <= 0 ? b.getEndKey() : a.getEndKey();
  HRegionInfo newRegionInfo=new HRegionInfo(tabledesc,startKey,endKey);
  LOG.info("Creating new region " + newRegionInfo.toString());
  int encodedName=newRegionInfo.getEncodedName();
  Path newRegionDir=HRegion.getRegionDir(a.getBaseDir(),encodedName);
  if (fs.exists(newRegionDir)) {
    throw new IOException("Cannot merge; target file collision at " + newRegionDir);
  }
  fs.mkdirs(newRegionDir);
  LOG.info("starting merge of regions: " + a + " and "+ b+ " into new region "+ newRegionInfo.toString()+ " with start key <"+ startKey+ "> and end key <"+ endKey+ ">");
  Map<byte[],List<HStoreFile>> byFamily=new TreeMap<byte[],List<HStoreFile>>(Bytes.BYTES_COMPARATOR);
  byFamily=filesByFamily(byFamily,a.close());
  byFamily=filesByFamily(byFamily,b.close());
  for (  Map.Entry<byte[],List<HStoreFile>> es : byFamily.entrySet()) {
    byte[] colFamily=es.getKey();
    makeColumnFamilyDirs(fs,basedir,encodedName,colFamily,tabledesc);
    List<HStoreFile> srcFiles=es.getValue();
    if (srcFiles.size() == 2) {
      long seqA=srcFiles.get(0).loadInfo(fs);
      long seqB=srcFiles.get(1).loadInfo(fs);
      if (seqA == seqB) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Adjusting sequence id of storeFile " + srcFiles.get(1) + " down by one; sequence id A="+ seqA+ ", sequence id B="+ seqB);
        }
        srcFiles.get(1).writeInfo(fs,seqB - 1);
      }
    }
    for (    HStoreFile hsf : srcFiles) {
      HStoreFile dst=new HStoreFile(conf,fs,basedir,newRegionInfo.getEncodedName(),colFamily,-1,null);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Renaming " + hsf + " to "+ dst);
      }
      hsf.rename(fs,dst);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Files for new region");
    listPaths(fs,newRegionDir);
  }
  HRegion dstRegion=new HRegion(basedir,log,fs,conf,newRegionInfo,null,null);
  dstRegion.compactStores();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Files for new region");
    listPaths(fs,dstRegion.getRegionDir());
  }
  deleteRegion(fs,a.getRegionDir());
  deleteRegion(fs,b.getRegionDir());
  LOG.info("merge completed. New region is " + dstRegion);
  return dstRegion;
}
