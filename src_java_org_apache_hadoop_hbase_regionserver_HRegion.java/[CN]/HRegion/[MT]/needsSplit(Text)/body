{
  HStoreSize biggest=largestHStore(midKey);
  if (biggest == null || midKey.getLength() == 0 || (midKey.equals(getStartKey()) && midKey.equals(getEndKey()))) {
    return false;
  }
  boolean split=(biggest.getAggregate() >= this.desiredMaxFileSize);
  if (split) {
    if (!biggest.isSplitable()) {
      LOG.warn("Region " + getRegionName().toString() + " is NOT splitable though its aggregate size is "+ StringUtils.humanReadableInt(biggest.getAggregate())+ " and desired size is "+ StringUtils.humanReadableInt(this.desiredMaxFileSize));
      split=false;
    }
 else {
      LOG.info("Splitting " + getRegionName().toString() + " because largest aggregate size is "+ StringUtils.humanReadableInt(biggest.getAggregate())+ " and desired size is "+ StringUtils.humanReadableInt(this.desiredMaxFileSize));
    }
  }
  return split;
}
