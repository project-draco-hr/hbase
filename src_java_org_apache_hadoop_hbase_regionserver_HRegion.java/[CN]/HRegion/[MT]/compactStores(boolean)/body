{
  splitsAndClosesLock.readLock().lock();
  try {
    byte[] midKey=null;
    if (this.closed.get()) {
      return midKey;
    }
    try {
synchronized (writestate) {
        if (!writestate.compacting && writestate.writesEnabled) {
          writestate.compacting=true;
        }
 else {
          LOG.info("NOT compacting region " + this + ": compacting="+ writestate.compacting+ ", writesEnabled="+ writestate.writesEnabled);
          return midKey;
        }
      }
      LOG.info("starting compaction on region " + this);
      long startTime=System.currentTimeMillis();
      doRegionCompactionPrep();
      long maxSize=-1;
      for (      HStore store : stores.values()) {
        final HStore.StoreSize size=store.compact(force);
        if (size != null && size.getSize() > maxSize) {
          maxSize=size.getSize();
          midKey=size.getKey();
        }
      }
      doRegionCompactionCleanup();
      String timeTaken=StringUtils.formatTimeDiff(System.currentTimeMillis(),startTime);
      LOG.info("compaction completed on region " + this + " in "+ timeTaken);
      this.historian.addRegionCompaction(regionInfo,timeTaken);
    }
  finally {
synchronized (writestate) {
        writestate.compacting=false;
        writestate.notifyAll();
      }
    }
    return midKey;
  }
  finally {
    splitsAndClosesLock.readLock().unlock();
  }
}
