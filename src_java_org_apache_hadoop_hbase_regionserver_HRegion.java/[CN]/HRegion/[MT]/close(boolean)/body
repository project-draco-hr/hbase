{
  if (isClosed()) {
    LOG.warn("region " + this + " already closed");
    return null;
  }
synchronized (splitLock) {
synchronized (writestate) {
      writestate.writesEnabled=false;
      LOG.debug("Compactions and cache flushes disabled for region " + this);
      while (writestate.compacting || writestate.flushing) {
        LOG.debug("waiting for" + (writestate.compacting ? " compaction" : "") + (writestate.flushing ? (writestate.compacting ? "," : "") + " cache flush" : "")+ " to complete for region "+ this);
        try {
          writestate.wait();
        }
 catch (        InterruptedException iex) {
        }
      }
    }
    splitsAndClosesLock.writeLock().lock();
    LOG.debug("Updates and scanners disabled for region " + this);
    try {
synchronized (activeScannerCount) {
        while (activeScannerCount.get() != 0) {
          LOG.debug("waiting for " + activeScannerCount.get() + " scanners to finish");
          try {
            activeScannerCount.wait();
          }
 catch (          InterruptedException e) {
          }
        }
      }
      LOG.debug("No more active scanners for region " + this);
      waitOnRowLocks();
      LOG.debug("No more row locks outstanding on region " + this);
      if (!abort) {
        internalFlushcache();
      }
      List<HStoreFile> result=new ArrayList<HStoreFile>();
      for (      HStore store : stores.values()) {
        result.addAll(store.close());
      }
      this.closed.set(true);
      LOG.info("closed " + this);
      return result;
    }
  finally {
      splitsAndClosesLock.writeLock().unlock();
    }
  }
}
