{
  boolean moreToFollow=false;
  boolean filtered=false;
  do {
    byte[] chosenRow=null;
    long chosenTimestamp=-1;
    for (int i=0; i < this.keys.length; i++) {
      if (scanners[i] != null && (chosenRow == null || (Bytes.compareTo(keys[i].getRow(),chosenRow) < 0) || ((Bytes.compareTo(keys[i].getRow(),chosenRow) == 0) && (keys[i].getTimestamp() > chosenTimestamp)))) {
        chosenRow=keys[i].getRow();
        chosenTimestamp=keys[i].getTimestamp();
      }
    }
    if (chosenTimestamp >= 0) {
      key.setRow(chosenRow);
      key.setVersion(chosenTimestamp);
      key.setColumn(HConstants.EMPTY_BYTE_ARRAY);
      for (int i=0; i < scanners.length; i++) {
        if (scanners[i] != null && Bytes.compareTo(keys[i].getRow(),chosenRow) == 0) {
          for (          Map.Entry<byte[],byte[]> e : resultSets[i].entrySet()) {
            if (!results.containsKey(e.getKey())) {
              results.put(e.getKey(),e.getValue());
            }
          }
          resultSets[i].clear();
          if (!scanners[i].next(keys[i],resultSets[i])) {
            closeScanner(i);
          }
        }
      }
    }
    for (int i=0; i < scanners.length; i++) {
      while ((scanners[i] != null) && (Bytes.compareTo(keys[i].getRow(),chosenRow) <= 0)) {
        resultSets[i].clear();
        if (!scanners[i].next(keys[i],resultSets[i])) {
          closeScanner(i);
        }
      }
    }
    moreToFollow=chosenTimestamp >= 0;
    if (results == null || results.size() <= 0) {
      moreToFollow=false;
    }
    filtered=filter == null ? false : filter.filterRow(results);
    if (moreToFollow) {
      if (filter != null) {
        filter.rowProcessed(filtered,key.getRow());
      }
      if (filtered) {
        results.clear();
      }
    }
  }
 while (filtered && moreToFollow);
  if (!moreToFollow) {
    for (int i=0; i < scanners.length; i++) {
      if (null != scanners[i]) {
        closeScanner(i);
      }
    }
  }
  return moreToFollow;
}
