{
  TableName tableName=TableName.valueOf("testCreateTableWithRegions");
  byte[][] splitKeys={new byte[]{1,1,1},new byte[]{2,2,2},new byte[]{3,3,3},new byte[]{4,4,4},new byte[]{5,5,5},new byte[]{6,6,6},new byte[]{7,7,7},new byte[]{8,8,8},new byte[]{9,9,9}};
  int expectedRegions=splitKeys.length + 1;
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc,splitKeys);
  boolean tableAvailable=admin.isTableAvailable(tableName,splitKeys);
  assertTrue("Table should be created with splitKyes + 1 rows in META",tableAvailable);
  List<HRegionLocation> regions;
  Iterator<HRegionLocation> hris;
  HRegionInfo hri;
  ClusterConnection conn=(ClusterConnection)TEST_UTIL.getConnection();
  try (RegionLocator l=TEST_UTIL.getConnection().getRegionLocator(tableName)){
    regions=l.getAllRegionLocations();
    assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
    System.err.println("Found " + regions.size() + " regions");
    hris=regions.iterator();
    hri=hris.next().getRegionInfo();
    assertTrue(hri.getStartKey() == null || hri.getStartKey().length == 0);
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[0]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[0]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[1]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[1]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[2]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[2]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[3]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[3]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[4]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[4]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[5]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[5]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[6]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[6]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[7]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[7]));
    assertTrue(Bytes.equals(hri.getEndKey(),splitKeys[8]));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),splitKeys[8]));
    assertTrue(hri.getEndKey() == null || hri.getEndKey().length == 0);
    verifyRoundRobinDistribution(conn,l,expectedRegions);
  }
   byte[] startKey={1,1,1,1,1,1,1,1,1,1};
  byte[] endKey={9,9,9,9,9,9,9,9,9,9};
  expectedRegions=10;
  TableName TABLE_2=TableName.valueOf(tableName.getNameAsString() + "_2");
  desc=new HTableDescriptor(TABLE_2);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin=TEST_UTIL.getHBaseAdmin();
  admin.createTable(desc,startKey,endKey,expectedRegions);
  try (RegionLocator l=TEST_UTIL.getConnection().getRegionLocator(TABLE_2)){
    regions=l.getAllRegionLocations();
    assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
    System.err.println("Found " + regions.size() + " regions");
    hris=regions.iterator();
    hri=hris.next().getRegionInfo();
    assertTrue(hri.getStartKey() == null || hri.getStartKey().length == 0);
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{1,1,1,1,1,1,1,1,1,1}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{1,1,1,1,1,1,1,1,1,1}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{2,2,2,2,2,2,2,2,2,2}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{2,2,2,2,2,2,2,2,2,2}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{3,3,3,3,3,3,3,3,3,3}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{3,3,3,3,3,3,3,3,3,3}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{4,4,4,4,4,4,4,4,4,4}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{4,4,4,4,4,4,4,4,4,4}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{5,5,5,5,5,5,5,5,5,5}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{5,5,5,5,5,5,5,5,5,5}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{6,6,6,6,6,6,6,6,6,6}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{6,6,6,6,6,6,6,6,6,6}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{7,7,7,7,7,7,7,7,7,7}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{7,7,7,7,7,7,7,7,7,7}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{8,8,8,8,8,8,8,8,8,8}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{8,8,8,8,8,8,8,8,8,8}));
    assertTrue(Bytes.equals(hri.getEndKey(),new byte[]{9,9,9,9,9,9,9,9,9,9}));
    hri=hris.next().getRegionInfo();
    assertTrue(Bytes.equals(hri.getStartKey(),new byte[]{9,9,9,9,9,9,9,9,9,9}));
    assertTrue(hri.getEndKey() == null || hri.getEndKey().length == 0);
    verifyRoundRobinDistribution(conn,l,expectedRegions);
  }
   startKey=new byte[]{0,0,0,0,0,0};
  endKey=new byte[]{1,0,0,0,0,0};
  expectedRegions=5;
  TableName TABLE_3=TableName.valueOf(tableName.getNameAsString() + "_3");
  desc=new HTableDescriptor(TABLE_3);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin=TEST_UTIL.getHBaseAdmin();
  admin.createTable(desc,startKey,endKey,expectedRegions);
  try (RegionLocator l=TEST_UTIL.getConnection().getRegionLocator(TABLE_3)){
    regions=l.getAllRegionLocations();
    assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
    System.err.println("Found " + regions.size() + " regions");
    verifyRoundRobinDistribution(conn,l,expectedRegions);
  }
   splitKeys=new byte[][]{new byte[]{1,1,1},new byte[]{2,2,2},new byte[]{3,3,3},new byte[]{2,2,2}};
  TableName TABLE_4=TableName.valueOf(tableName.getNameAsString() + "_4");
  desc=new HTableDescriptor(TABLE_4);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  try {
    admin.createTable(desc,splitKeys);
    assertTrue("Should not be able to create this table because of " + "duplicate split keys",false);
  }
 catch (  IllegalArgumentException iae) {
  }
}
