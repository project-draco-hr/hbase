{
  final byte[] row=Bytes.toBytes("row");
  final byte[] qualifier=Bytes.toBytes("qualifier");
  final byte[] value=Bytes.toBytes("value");
  final TableName table=TableName.valueOf("testDisableAndEnableTable");
  Table ht=TEST_UTIL.createTable(table,HConstants.CATALOG_FAMILY);
  Put put=new Put(row);
  put.add(HConstants.CATALOG_FAMILY,qualifier,value);
  ht.put(put);
  Get get=new Get(row);
  get.addColumn(HConstants.CATALOG_FAMILY,qualifier);
  ht.get(get);
  this.admin.disableTable(ht.getName());
  assertTrue("Table must be disabled.",TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager().getTableStateManager().isTableState(ht.getName(),TableState.State.DISABLED));
  assertEquals(TableState.State.DISABLED,getStateFromMeta(table));
  get=new Get(row);
  get.addColumn(HConstants.CATALOG_FAMILY,qualifier);
  boolean ok=false;
  try {
    ht.get(get);
  }
 catch (  TableNotEnabledException e) {
    ok=true;
  }
  ok=false;
  Scan scan=new Scan();
  try {
    ResultScanner scanner=ht.getScanner(scan);
    Result res=null;
    do {
      res=scanner.next();
    }
 while (res != null);
  }
 catch (  TableNotEnabledException e) {
    ok=true;
  }
  assertTrue(ok);
  this.admin.enableTable(table);
  assertTrue("Table must be enabled.",TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager().getTableStateManager().isTableState(ht.getName(),TableState.State.ENABLED));
  assertEquals(TableState.State.ENABLED,getStateFromMeta(table));
  try {
    ht.get(get);
  }
 catch (  RetriesExhaustedException e) {
    ok=false;
  }
  assertTrue(ok);
  ht.close();
}
