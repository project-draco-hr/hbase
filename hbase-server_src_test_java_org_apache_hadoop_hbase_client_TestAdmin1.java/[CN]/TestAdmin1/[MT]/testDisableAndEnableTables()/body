{
  final byte[] row=Bytes.toBytes("row");
  final byte[] qualifier=Bytes.toBytes("qualifier");
  final byte[] value=Bytes.toBytes("value");
  final TableName table1=TableName.valueOf("testDisableAndEnableTable1");
  final TableName table2=TableName.valueOf("testDisableAndEnableTable2");
  Table ht1=TEST_UTIL.createTable(table1,HConstants.CATALOG_FAMILY);
  Table ht2=TEST_UTIL.createTable(table2,HConstants.CATALOG_FAMILY);
  Put put=new Put(row);
  put.add(HConstants.CATALOG_FAMILY,qualifier,value);
  ht1.put(put);
  ht2.put(put);
  Get get=new Get(row);
  get.addColumn(HConstants.CATALOG_FAMILY,qualifier);
  ht1.get(get);
  ht2.get(get);
  this.admin.disableTables("testDisableAndEnableTable.*");
  get=new Get(row);
  get.addColumn(HConstants.CATALOG_FAMILY,qualifier);
  boolean ok=false;
  try {
    ht1.get(get);
    ht2.get(get);
  }
 catch (  org.apache.hadoop.hbase.DoNotRetryIOException e) {
    ok=true;
  }
  assertEquals(TableState.State.DISABLED,getStateFromMeta(table1));
  assertEquals(TableState.State.DISABLED,getStateFromMeta(table2));
  assertTrue(ok);
  this.admin.enableTables("testDisableAndEnableTable.*");
  try {
    ht1.get(get);
  }
 catch (  IOException e) {
    ok=false;
  }
  try {
    ht2.get(get);
  }
 catch (  IOException e) {
    ok=false;
  }
  assertTrue(ok);
  ht1.close();
  ht2.close();
  assertEquals(TableState.State.ENABLED,getStateFromMeta(table1));
  assertEquals(TableState.State.ENABLED,getStateFromMeta(table2));
}
