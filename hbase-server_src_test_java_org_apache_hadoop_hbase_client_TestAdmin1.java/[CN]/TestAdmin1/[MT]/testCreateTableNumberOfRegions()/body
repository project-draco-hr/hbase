{
  TableName tableName=TableName.valueOf("testCreateTableNumberOfRegions");
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc);
  HTable ht=(HTable)TEST_UTIL.getConnection().getTable(tableName);
  Map<HRegionInfo,ServerName> regions=ht.getRegionLocations();
  assertEquals("Table should have only 1 region",1,regions.size());
  ht.close();
  TableName TABLE_2=TableName.valueOf(tableName.getNameAsString() + "_2");
  desc=new HTableDescriptor(TABLE_2);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc,new byte[][]{new byte[]{42}});
  HTable ht2=(HTable)TEST_UTIL.getConnection().getTable(TABLE_2);
  regions=ht2.getRegionLocations();
  assertEquals("Table should have only 2 region",2,regions.size());
  ht2.close();
  TableName TABLE_3=TableName.valueOf(tableName.getNameAsString() + "_3");
  desc=new HTableDescriptor(TABLE_3);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc,"a".getBytes(),"z".getBytes(),3);
  HTable ht3=(HTable)TEST_UTIL.getConnection().getTable(TABLE_3);
  regions=ht3.getRegionLocations();
  assertEquals("Table should have only 3 region",3,regions.size());
  ht3.close();
  TableName TABLE_4=TableName.valueOf(tableName.getNameAsString() + "_4");
  desc=new HTableDescriptor(TABLE_4);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  try {
    admin.createTable(desc,"a".getBytes(),"z".getBytes(),2);
    fail("Should not be able to create a table with only 2 regions using this API.");
  }
 catch (  IllegalArgumentException eae) {
  }
  TableName TABLE_5=TableName.valueOf(tableName.getNameAsString() + "_5");
  desc=new HTableDescriptor(TABLE_5);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc,new byte[]{1},new byte[]{127},16);
  HTable ht5=(HTable)TEST_UTIL.getConnection().getTable(TABLE_5);
  regions=ht5.getRegionLocations();
  assertEquals("Table should have 16 region",16,regions.size());
  ht5.close();
}
