{
  TableName tableName=TableName.valueOf("testSplitAndMergeWithReplicaTable");
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.setRegionReplication(3);
  byte[] cf="f".getBytes();
  HColumnDescriptor hcd=new HColumnDescriptor(cf);
  desc.addFamily(hcd);
  byte[][] splitRows=new byte[2][];
  splitRows[0]=new byte[]{(byte)'4'};
  splitRows[1]=new byte[]{(byte)'7'};
  TEST_UTIL.getAdmin().createTable(desc,splitRows);
  List<HRegion> oldRegions;
  do {
    oldRegions=TEST_UTIL.getHBaseCluster().getRegions(tableName);
    Thread.sleep(10);
  }
 while (oldRegions.size() != 9);
  Table ht=TEST_UTIL.getConnection().getTable(tableName);
  List<Put> puts=new ArrayList<Put>();
  byte[] qualifier="c".getBytes();
  Put put=new Put(new byte[]{(byte)'1'});
  put.addColumn(cf,qualifier,"100".getBytes());
  puts.add(put);
  put=new Put(new byte[]{(byte)'6'});
  put.addColumn(cf,qualifier,"100".getBytes());
  puts.add(put);
  put=new Put(new byte[]{(byte)'8'});
  put.addColumn(cf,qualifier,"100".getBytes());
  puts.add(put);
  ht.put(puts);
  ht.close();
  List<Pair<HRegionInfo,ServerName>> regions=MetaTableAccessor.getTableRegionsAndLocations(TEST_UTIL.getConnection(),tableName);
  boolean gotException=false;
  try {
    TEST_UTIL.getAdmin().splitRegion(regions.get(1).getFirst().getRegionName());
  }
 catch (  IllegalArgumentException ex) {
    gotException=true;
  }
  assertTrue(gotException);
  gotException=false;
  try {
    TEST_UTIL.getHBaseAdmin().split(regions.get(1).getSecond(),regions.get(1).getFirst(),new byte[]{(byte)'1'});
  }
 catch (  IOException ex) {
    gotException=true;
  }
  assertTrue(gotException);
  gotException=false;
  try {
    TEST_UTIL.getAdmin().mergeRegions(regions.get(1).getFirst().getEncodedNameAsBytes(),regions.get(2).getFirst().getEncodedNameAsBytes(),true);
  }
 catch (  IllegalArgumentException m) {
    gotException=true;
  }
  assertTrue(gotException);
  try {
    DispatchMergingRegionsRequest request=RequestConverter.buildDispatchMergingRegionsRequest(regions.get(1).getFirst().getEncodedNameAsBytes(),regions.get(2).getFirst().getEncodedNameAsBytes(),true);
    ((ClusterConnection)TEST_UTIL.getAdmin().getConnection()).getMaster().dispatchMergingRegions(null,request);
  }
 catch (  ServiceException m) {
    Throwable t=m.getCause();
    do {
      if (t instanceof MergeRegionException) {
        gotException=true;
        break;
      }
      t=t.getCause();
    }
 while (t != null);
  }
  assertTrue(gotException);
  gotException=false;
  if (!regions.get(2).getSecond().equals(regions.get(1).getSecond())) {
    moveRegionAndWait(regions.get(2).getFirst(),regions.get(1).getSecond());
  }
  try {
    AdminService.BlockingInterface admin=((ClusterConnection)TEST_UTIL.getAdmin().getConnection()).getAdmin(regions.get(1).getSecond());
    ProtobufUtil.mergeRegions(null,admin,regions.get(1).getFirst(),regions.get(2).getFirst(),true,null);
  }
 catch (  MergeRegionException mm) {
    gotException=true;
  }
  assertTrue(gotException);
}
