{
  final TableName nonexistentTable=TableName.valueOf("nonexistent");
  final byte[] nonexistentColumn=Bytes.toBytes("nonexistent");
  HColumnDescriptor nonexistentHcd=new HColumnDescriptor(nonexistentColumn);
  Exception exception=null;
  try {
    this.admin.addColumnFamily(nonexistentTable,nonexistentHcd);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  exception=null;
  try {
    this.admin.deleteTable(nonexistentTable);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  exception=null;
  try {
    this.admin.deleteColumnFamily(nonexistentTable,nonexistentColumn);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  exception=null;
  try {
    this.admin.disableTable(nonexistentTable);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  exception=null;
  try {
    this.admin.enableTable(nonexistentTable);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  exception=null;
  try {
    this.admin.modifyColumnFamily(nonexistentTable,nonexistentHcd);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  exception=null;
  try {
    HTableDescriptor htd=new HTableDescriptor(nonexistentTable);
    htd.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
    this.admin.modifyTable(htd.getTableName(),htd);
  }
 catch (  IOException e) {
    exception=e;
  }
  assertTrue(exception instanceof TableNotFoundException);
  final TableName tableName=TableName.valueOf("testDeleteEditUnknownColumnFamilyAndOrTable" + System.currentTimeMillis());
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor("cf"));
  this.admin.createTable(htd);
  try {
    exception=null;
    try {
      this.admin.deleteColumnFamily(htd.getTableName(),nonexistentHcd.getName());
    }
 catch (    IOException e) {
      exception=e;
    }
    assertTrue("found=" + exception.getClass().getName(),exception instanceof InvalidFamilyOperationException);
    exception=null;
    try {
      this.admin.modifyColumnFamily(htd.getTableName(),nonexistentHcd);
    }
 catch (    IOException e) {
      exception=e;
    }
    assertTrue("found=" + exception.getClass().getName(),exception instanceof InvalidFamilyOperationException);
  }
  finally {
    this.admin.disableTable(tableName);
    this.admin.deleteTable(tableName);
  }
}
