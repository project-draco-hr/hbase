{
  byte[] row1=Bytes.toBytes("row1");
  byte[] fam1=Bytes.toBytes("fam1");
  byte[] fam2=Bytes.toBytes("fam2");
  byte[] qf1=Bytes.toBytes("qualifier1");
  byte[] qf2=Bytes.toBytes("qualifier2");
  byte[] qf3=Bytes.toBytes("qualifier3");
  byte[] val1=Bytes.toBytes("value1");
  byte[] val2=Bytes.toBytes("value2");
  byte[] val3=Bytes.toBytes("value3");
  byte[] emptyVal=new byte[]{};
  byte[][] families={fam1,fam2};
  String method=this.getName();
  this.region=initHRegion(tableName,method,conf,families);
  try {
    Put put=new Put(row1);
    put.add(fam1,qf1,val1);
    region.put(put);
    Threads.sleep(2);
    put=new Put(row1);
    put.add(fam1,qf1,val2);
    put.add(fam2,qf1,val3);
    put.add(fam2,qf2,val2);
    put.add(fam2,qf3,val1);
    put.add(fam1,qf3,val1);
    region.put(put);
    Delete delete=new Delete(row1);
    delete.deleteColumn(fam1,qf1);
    delete.deleteColumn(fam2,qf1);
    delete.deleteColumn(fam1,qf3);
    boolean res=region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val2),delete,true);
    assertEquals(true,res);
    Get get=new Get(row1);
    get.addColumn(fam1,qf1);
    get.addColumn(fam1,qf3);
    get.addColumn(fam2,qf2);
    Result r=region.get(get);
    assertEquals(2,r.size());
    assertArrayEquals(val1,r.getValue(fam1,qf1));
    assertArrayEquals(val2,r.getValue(fam2,qf2));
    delete=new Delete(row1);
    delete.deleteFamily(fam2);
    res=region.checkAndMutate(row1,fam2,qf1,CompareOp.EQUAL,new BinaryComparator(emptyVal),delete,true);
    assertEquals(true,res);
    get=new Get(row1);
    r=region.get(get);
    assertEquals(1,r.size());
    assertArrayEquals(val1,r.getValue(fam1,qf1));
    delete=new Delete(row1);
    res=region.checkAndMutate(row1,fam1,qf1,CompareOp.EQUAL,new BinaryComparator(val1),delete,true);
    assertEquals(true,res);
    get=new Get(row1);
    r=region.get(get);
    assertEquals(0,r.size());
  }
  finally {
    HRegion.closeHRegion(this.region);
    this.region=null;
  }
}
