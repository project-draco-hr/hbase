{
  Configuration conf=HBaseConfiguration.create(CONF);
  method=method + "_" + tableDurability.name()+ "_"+ mutationDurability.name();
  TableName tableName=TableName.valueOf(method);
  byte[] family=Bytes.toBytes("family");
  Path logDir=new Path(new Path(dir + method),"log");
  final Configuration walConf=new Configuration(conf);
  FSUtils.setRootDir(walConf,logDir);
  final WALFactory wals=new WALFactory(walConf,null,UUID.randomUUID().toString());
  final WAL wal=spy(wals.getWAL(tableName.getName()));
  this.region=initHRegion(tableName.getName(),HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,method,conf,false,tableDurability,wal,new byte[][]{family});
  Put put=new Put(Bytes.toBytes("r1"));
  put.add(family,Bytes.toBytes("q1"),Bytes.toBytes("v1"));
  put.setDurability(mutationDurability);
  region.put(put);
  verify(wal,expectAppend ? times(1) : never()).append((HTableDescriptor)any(),(HRegionInfo)any(),(WALKey)any(),(WALEdit)any(),(AtomicLong)any(),Mockito.anyBoolean(),(List<Cell>)any());
  if (expectSync || expectSyncFromLogSyncer) {
    TEST_UTIL.waitFor(timeout,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        try {
          if (expectSync) {
            verify(wal,times(1)).sync(anyLong());
          }
 else           if (expectSyncFromLogSyncer) {
            verify(wal,times(1)).sync();
          }
        }
 catch (        Throwable ignore) {
        }
        return true;
      }
    }
);
  }
 else {
    verify(wal,never()).sync();
  }
  HBaseTestingUtility.closeRegionAndWAL(this.region);
  this.region=null;
}
