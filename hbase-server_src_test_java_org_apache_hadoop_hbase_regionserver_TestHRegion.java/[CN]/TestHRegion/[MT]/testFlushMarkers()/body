{
  String method=name.getMethodName();
  TableName tableName=TableName.valueOf(method);
  byte[] family=Bytes.toBytes("family");
  Path logDir=TEST_UTIL.getDataTestDirOnTestFS(method + ".log");
  HLog hlog=HLogFactory.createHLog(FILESYSTEM,logDir,"logs",TEST_UTIL.getConfiguration());
  this.region=initHRegion(tableName.getName(),HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,method,CONF,false,Durability.USE_DEFAULT,hlog,family);
  try {
    Path regiondir=region.getRegionFileSystem().getRegionDir();
    FileSystem fs=region.getRegionFileSystem().getFileSystem();
    byte[] regionName=region.getRegionInfo().getEncodedNameAsBytes();
    long maxSeqId=3;
    long minSeqId=0;
    for (long i=minSeqId; i < maxSeqId; i++) {
      Put put=new Put(Bytes.toBytes(i));
      put.add(family,Bytes.toBytes(i),Bytes.toBytes(i));
      region.put(put);
      region.flushcache();
    }
    assertEquals(3,region.getStore(family).getStorefilesCount());
    List<String> storeFiles=new ArrayList<String>(3);
    for (    StoreFile sf : region.getStore(family).getStorefiles()) {
      storeFiles.add(sf.getPath().getName());
    }
    hlog.close();
    HLog.Reader reader=HLogFactory.createReader(fs,fs.listStatus(new Path(logDir,"logs"))[0].getPath(),TEST_UTIL.getConfiguration());
    List<HLog.Entry> flushDescriptors=new ArrayList<HLog.Entry>();
    long lastFlushSeqId=-1;
    while (true) {
      HLog.Entry entry=reader.next();
      if (entry == null) {
        break;
      }
      Cell cell=entry.getEdit().getCells().get(0);
      if (WALEdit.isMetaEditFamily(cell)) {
        FlushDescriptor flushDesc=WALEdit.getFlushDescriptor(cell);
        assertNotNull(flushDesc);
        assertArrayEquals(tableName.getName(),flushDesc.getTableName().toByteArray());
        if (flushDesc.getAction() == FlushAction.START_FLUSH) {
          assertTrue(flushDesc.getFlushSequenceNumber() > lastFlushSeqId);
        }
 else         if (flushDesc.getAction() == FlushAction.COMMIT_FLUSH) {
          assertTrue(flushDesc.getFlushSequenceNumber() == lastFlushSeqId);
        }
        lastFlushSeqId=flushDesc.getFlushSequenceNumber();
        assertArrayEquals(regionName,flushDesc.getEncodedRegionName().toByteArray());
        assertEquals(1,flushDesc.getStoreFlushesCount());
        StoreFlushDescriptor storeFlushDesc=flushDesc.getStoreFlushes(0);
        assertArrayEquals(family,storeFlushDesc.getFamilyName().toByteArray());
        assertEquals("family",storeFlushDesc.getStoreHomeDir());
        if (flushDesc.getAction() == FlushAction.START_FLUSH) {
          assertEquals(0,storeFlushDesc.getFlushOutputCount());
        }
 else {
          assertEquals(1,storeFlushDesc.getFlushOutputCount());
          assertTrue(storeFiles.contains(storeFlushDesc.getFlushOutput(0)));
        }
        flushDescriptors.add(entry);
      }
    }
    assertEquals(3 * 2,flushDescriptors.size());
    Path recoveredEditsDir=HLogUtil.getRegionDirRecoveredEditsDir(regiondir);
    Path recoveredEdits=new Path(recoveredEditsDir,String.format("%019d",1000));
    fs.create(recoveredEdits);
    HLog.Writer writer=HLogFactory.createRecoveredEditsWriter(fs,recoveredEdits,CONF);
    for (    HLog.Entry entry : flushDescriptors) {
      writer.append(entry);
    }
    writer.close();
    region.close();
    region=HRegion.openHRegion(region,null);
    for (long i=minSeqId; i < maxSeqId; i++) {
      Get get=new Get(Bytes.toBytes(i));
      Result result=region.get(get);
      byte[] value=result.getValue(family,Bytes.toBytes(i));
      assertArrayEquals(Bytes.toBytes(i),value);
    }
  }
  finally {
    HRegion.closeHRegion(this.region);
    this.region=null;
  }
}
