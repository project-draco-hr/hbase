{
  HBaseTestingUtility htu=new HBaseTestingUtility();
  htu.getConfiguration().setInt("dfs.replication",2);
  MiniHBaseCluster cluster=null;
  String dataNodeHosts[]=new String[]{"host1","host2","host3"};
  int regionServersCount=3;
  try {
    cluster=htu.startMiniCluster(1,regionServersCount,dataNodeHosts);
    byte[][] families={fam1,fam2};
    Table ht=htu.createTable(TableName.valueOf(this.getName()),families);
    byte row[]=Bytes.toBytes("row1");
    byte col[]=Bytes.toBytes("col1");
    Put put=new Put(row);
    put.addColumn(fam1,col,(long)1,Bytes.toBytes("test1"));
    put.addColumn(fam2,col,(long)1,Bytes.toBytes("test2"));
    ht.put(put);
    HRegion firstRegion=htu.getHBaseCluster().getRegions(TableName.valueOf(this.getName())).get(0);
    firstRegion.flush(true);
    HDFSBlocksDistribution blocksDistribution1=firstRegion.getHDFSBlocksDistribution();
    long uniqueBlocksWeight1=blocksDistribution1.getUniqueBlocksTotalWeight();
    StringBuilder sb=new StringBuilder();
    for (    String host : blocksDistribution1.getTopHosts()) {
      if (sb.length() > 0)       sb.append(", ");
      sb.append(host);
      sb.append("=");
      sb.append(blocksDistribution1.getWeight(host));
    }
    String topHost=blocksDistribution1.getTopHosts().get(0);
    long topHostWeight=blocksDistribution1.getWeight(topHost);
    String msg="uniqueBlocksWeight=" + uniqueBlocksWeight1 + ", topHostWeight="+ topHostWeight+ ", topHost="+ topHost+ "; "+ sb.toString();
    LOG.info(msg);
    assertTrue(msg,uniqueBlocksWeight1 == topHostWeight);
    HDFSBlocksDistribution blocksDistribution2=HRegion.computeHDFSBlocksDistribution(htu.getConfiguration(),firstRegion.getTableDesc(),firstRegion.getRegionInfo());
    long uniqueBlocksWeight2=blocksDistribution2.getUniqueBlocksTotalWeight();
    assertTrue(uniqueBlocksWeight1 == uniqueBlocksWeight2);
    ht.close();
  }
  finally {
    if (cluster != null) {
      htu.shutdownMiniCluster();
    }
  }
}
