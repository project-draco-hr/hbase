{
  final byte[] cf_first=Bytes.toBytes("first");
  final byte[] cf_second=Bytes.toBytes("second");
  this.region=initHRegion(tableName,getName(),CONF,cf_first,cf_second);
  try {
    final byte[] col_a=Bytes.toBytes("a");
    final byte[] col_b=Bytes.toBytes("b");
    Put put;
    for (int i=0; i < 10; i++) {
      put=new Put(Bytes.toBytes("r" + Integer.toString(i)));
      put.addColumn(cf_first,col_a,Bytes.toBytes(i));
      if (i < 5) {
        put.addColumn(cf_first,col_b,Bytes.toBytes(i));
        put.addColumn(cf_second,col_a,Bytes.toBytes(i));
        put.addColumn(cf_second,col_b,Bytes.toBytes(i));
      }
      region.put(put);
    }
    Scan scan=new Scan();
    scan.setLoadColumnFamiliesOnDemand(true);
    Filter bogusFilter=new FilterBase(){
      @Override public ReturnCode filterKeyValue(      Cell ignored) throws IOException {
        return ReturnCode.INCLUDE;
      }
      @Override public boolean isFamilyEssential(      byte[] name){
        return Bytes.equals(name,cf_first);
      }
    }
;
    scan.setFilter(bogusFilter);
    InternalScanner s=region.getScanner(scan);
    List<Cell> results=new ArrayList<Cell>();
    int index=0;
    ScannerContext scannerContext=ScannerContext.newBuilder().setBatchLimit(3).build();
    while (true) {
      boolean more=s.next(results,scannerContext);
      if ((index >> 1) < 5) {
        if (index % 2 == 0)         assertEquals(results.size(),3);
 else         assertEquals(results.size(),1);
      }
 else       assertEquals(results.size(),1);
      results.clear();
      index++;
      if (!more)       break;
    }
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
  }
}
