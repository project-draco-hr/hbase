{
  String method=name.getMethodName();
  TableName tableName=TableName.valueOf(method);
  byte[] family=Bytes.toBytes("family");
  Path logDir=TEST_UTIL.getDataTestDirOnTestFS(method + "log");
  final Configuration walConf=new Configuration(TEST_UTIL.getConfiguration());
  FSUtils.setRootDir(walConf,logDir);
  final WALFactory wals=new WALFactory(walConf,null,method);
  WAL wal=spy(wals.getWAL(tableName.getName()));
  this.region=initHRegion(tableName.getName(),HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,method,CONF,false,Durability.USE_DEFAULT,wal,family);
  try {
    int i=0;
    Put put=new Put(Bytes.toBytes(i));
    put.setDurability(Durability.SKIP_WAL);
    put.add(family,Bytes.toBytes(i),Bytes.toBytes(i));
    region.put(put);
    IsFlushWALMarker isFlushWALMarker=new IsFlushWALMarker(FlushAction.START_FLUSH);
    when(wal.append((HTableDescriptor)any(),(HRegionInfo)any(),(WALKey)any(),(WALEdit)argThat(isFlushWALMarker),(AtomicLong)any(),Mockito.anyBoolean(),(List<Cell>)any())).thenThrow(new IOException("Fail to append flush marker"));
    try {
      region.flushcache();
      fail("This should have thrown exception");
    }
 catch (    DroppedSnapshotException unexpected) {
      throw unexpected;
    }
catch (    IOException expected) {
    }
    isFlushWALMarker.set(FlushAction.COMMIT_FLUSH);
    try {
      region.flushcache();
      fail("This should have thrown exception");
    }
 catch (    DroppedSnapshotException expected) {
    }
catch (    IOException unexpected) {
      throw unexpected;
    }
    region.close();
    this.region=initHRegion(tableName.getName(),HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,method,CONF,false,Durability.USE_DEFAULT,wal,family);
    region.put(put);
    isFlushWALMarker.set(FlushAction.COMMIT_FLUSH,FlushAction.ABORT_FLUSH);
    try {
      region.flushcache();
      fail("This should have thrown exception");
    }
 catch (    DroppedSnapshotException expected) {
    }
catch (    IOException unexpected) {
      throw unexpected;
    }
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
  }
}
