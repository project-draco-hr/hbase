{
  byte[] cf_essential=Bytes.toBytes("essential");
  byte[] cf_joined=Bytes.toBytes("joined");
  byte[] cf_alpha=Bytes.toBytes("alpha");
  this.region=initHRegion(tableName,getName(),conf,cf_essential,cf_joined,cf_alpha);
  try {
    byte[] row1=Bytes.toBytes("row1");
    byte[] row2=Bytes.toBytes("row2");
    byte[] row3=Bytes.toBytes("row3");
    byte[] col_normal=Bytes.toBytes("d");
    byte[] col_alpha=Bytes.toBytes("a");
    byte[] filtered_val=Bytes.toBytes(3);
    Put put=new Put(row1);
    put.add(cf_essential,col_normal,Bytes.toBytes(1));
    put.add(cf_joined,col_alpha,Bytes.toBytes(1));
    region.put(put);
    put=new Put(row2);
    put.add(cf_essential,col_alpha,Bytes.toBytes(2));
    put.add(cf_joined,col_normal,Bytes.toBytes(2));
    put.add(cf_alpha,col_alpha,Bytes.toBytes(2));
    region.put(put);
    put=new Put(row3);
    put.add(cf_essential,col_normal,filtered_val);
    put.add(cf_joined,col_normal,filtered_val);
    region.put(put);
    Scan scan=new Scan();
    Filter filter=new SingleColumnValueExcludeFilter(cf_essential,col_normal,CompareOp.NOT_EQUAL,filtered_val);
    scan.setFilter(filter);
    scan.setLoadColumnFamiliesOnDemand(true);
    InternalScanner s=region.getScanner(scan);
    List<Cell> results=new ArrayList<Cell>();
    assertTrue(s.next(results));
    assertEquals(results.size(),1);
    results.clear();
    assertTrue(s.next(results));
    assertEquals(results.size(),3);
    assertTrue("orderCheck",CellUtil.matchingFamily(results.get(0),cf_alpha));
    assertTrue("orderCheck",CellUtil.matchingFamily(results.get(1),cf_essential));
    assertTrue("orderCheck",CellUtil.matchingFamily(results.get(2),cf_joined));
    results.clear();
    assertFalse(s.next(results));
    assertEquals(results.size(),0);
  }
  finally {
    HRegion.closeHRegion(this.region);
    this.region=null;
  }
}
