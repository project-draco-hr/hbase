{
  byte[] tableName=Bytes.toBytes("testWritesWhileScanning");
  int testCount=100;
  int numRows=1;
  int numFamilies=10;
  int numQualifiers=100;
  int flushInterval=7;
  int compactInterval=5 * flushInterval;
  byte[][] families=new byte[numFamilies][];
  for (int i=0; i < numFamilies; i++) {
    families[i]=Bytes.toBytes("family" + i);
  }
  byte[][] qualifiers=new byte[numQualifiers][];
  for (int i=0; i < numQualifiers; i++) {
    qualifiers[i]=Bytes.toBytes("qual" + i);
  }
  String method="testWritesWhileScanning";
  this.region=initHRegion(tableName,method,conf,families);
  try {
    PutThread putThread=new PutThread(numRows,families,qualifiers);
    putThread.start();
    putThread.waitForFirstPut();
    FlushThread flushThread=new FlushThread();
    flushThread.start();
    Scan scan=new Scan(Bytes.toBytes("row0"),Bytes.toBytes("row1"));
    int expectedCount=numFamilies * numQualifiers;
    List<Cell> res=new ArrayList<Cell>();
    long prevTimestamp=0L;
    for (int i=0; i < testCount; i++) {
      if (i != 0 && i % compactInterval == 0) {
        region.compactStores(true);
      }
      if (i != 0 && i % flushInterval == 0) {
        flushThread.flush();
      }
      boolean previousEmpty=res.isEmpty();
      res.clear();
      InternalScanner scanner=region.getScanner(scan);
      while (scanner.next(res))       ;
      if (!res.isEmpty() || !previousEmpty || i > compactInterval) {
        assertEquals("i=" + i,expectedCount,res.size());
        long timestamp=res.get(0).getTimestamp();
        assertTrue("Timestamps were broke: " + timestamp + " prev: "+ prevTimestamp,timestamp >= prevTimestamp);
        prevTimestamp=timestamp;
      }
    }
    putThread.done();
    region.flushcache();
    putThread.join();
    putThread.checkNoError();
    flushThread.done();
    flushThread.join();
    flushThread.checkNoError();
  }
  finally {
    HRegion.closeHRegion(this.region);
    this.region=null;
  }
}
