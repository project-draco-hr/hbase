{
  String method=name.getMethodName();
  TableName tableName=TableName.valueOf(method);
  byte[] family=Bytes.toBytes("family");
  this.region=initHRegion(tableName,method,CONF,family);
  final WALFactory wals=new WALFactory(CONF,null,method);
  try {
    Path regiondir=region.getRegionFileSystem().getRegionDir();
    FileSystem fs=region.getRegionFileSystem().getFileSystem();
    byte[] regionName=region.getRegionInfo().getEncodedNameAsBytes();
    long maxSeqId=3;
    long minSeqId=0;
    for (long i=minSeqId; i < maxSeqId; i++) {
      Put put=new Put(Bytes.toBytes(i));
      put.addColumn(family,Bytes.toBytes(i),Bytes.toBytes(i));
      region.put(put);
      region.flush(true);
    }
    assertEquals(3,region.getStore(family).getStorefilesCount());
    List<Path> storeFiles=new ArrayList<Path>(3);
    for (    StoreFile sf : region.getStore(family).getStorefiles()) {
      storeFiles.add(sf.getPath());
    }
    CONF.setBoolean("hbase.hstore.compaction.complete",false);
    region.compactStores();
    assertEquals(3,region.getStore(family).getStorefilesCount());
    Path tmpDir=region.getRegionFileSystem().getTempDir();
    FileStatus[] files=FSUtils.listStatus(fs,tmpDir);
    String errorMsg="Expected to find 1 file in the region temp directory " + "from the compaction, could not find any";
    assertNotNull(errorMsg,files);
    assertEquals(errorMsg,1,files.length);
    Path newFile=region.getRegionFileSystem().commitStoreFile(Bytes.toString(family),files[0].getPath());
    byte[] encodedNameAsBytes=this.region.getRegionInfo().getEncodedNameAsBytes();
    byte[] fakeEncodedNameAsBytes=new byte[encodedNameAsBytes.length];
    for (int i=0; i < encodedNameAsBytes.length; i++) {
      fakeEncodedNameAsBytes[i]=(byte)(encodedNameAsBytes[i] + 1);
    }
    CompactionDescriptor compactionDescriptor=ProtobufUtil.toCompactionDescriptor(this.region.getRegionInfo(),mismatchedRegionName ? fakeEncodedNameAsBytes : null,family,storeFiles,Lists.newArrayList(newFile),region.getRegionFileSystem().getStoreDir(Bytes.toString(family)));
    WALUtil.writeCompactionMarker(region.getWAL(),this.region.getReplicationScope(),this.region.getRegionInfo(),compactionDescriptor,region.getMVCC());
    Path recoveredEditsDir=WALSplitter.getRegionDirRecoveredEditsDir(regiondir);
    Path recoveredEdits=new Path(recoveredEditsDir,String.format("%019d",1000));
    fs.create(recoveredEdits);
    WALProvider.Writer writer=wals.createRecoveredEditsWriter(fs,recoveredEdits);
    long time=System.nanoTime();
    writer.append(new WAL.Entry(new HLogKey(regionName,tableName,10,time,HConstants.DEFAULT_CLUSTER_ID),WALEdit.createCompaction(region.getRegionInfo(),compactionDescriptor)));
    writer.close();
    region.getTableDesc();
    region.getRegionInfo();
    region.close();
    try {
      region=HRegion.openHRegion(region,null);
    }
 catch (    WrongRegionException wre) {
      fail("Matching encoded region name should not have produced WrongRegionException");
    }
    Collection<StoreFile> sfs=region.getStore(family).getStorefiles();
    for (    StoreFile sf : sfs) {
      LOG.info(sf.getPath());
    }
    if (!mismatchedRegionName) {
      assertEquals(1,region.getStore(family).getStorefilesCount());
    }
    files=FSUtils.listStatus(fs,tmpDir);
    assertTrue("Expected to find 0 files inside " + tmpDir,files == null || files.length == 0);
    for (long i=minSeqId; i < maxSeqId; i++) {
      Get get=new Get(Bytes.toBytes(i));
      Result result=region.get(get);
      byte[] value=result.getValue(family,Bytes.toBytes(i));
      assertArrayEquals(Bytes.toBytes(i),value);
    }
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
    wals.close();
  }
}
