{
  byte[] rowC=Bytes.toBytes("rowC");
  byte[] rowA=Bytes.toBytes("rowA");
  byte[] rowB=Bytes.toBytes("rowB");
  byte[] rowD=Bytes.toBytes("rowD");
  byte[] cf=Bytes.toBytes("CF");
  byte[][] families={cf};
  byte[] col=Bytes.toBytes("C");
  long ts=1;
  String method=this.getName();
  this.region=initHRegion(tableName,method,families);
  try {
    KeyValue kv1=new KeyValue(rowC,cf,col,ts,KeyValue.Type.Put,null);
    KeyValue kv11=new KeyValue(rowC,cf,col,ts + 1,KeyValue.Type.Put,null);
    KeyValue kv2=new KeyValue(rowA,cf,col,ts,KeyValue.Type.Put,null);
    KeyValue kv3=new KeyValue(rowB,cf,col,ts,KeyValue.Type.Put,null);
    Put put=null;
    put=new Put(rowC);
    put.add(kv1);
    put.add(kv11);
    region.put(put);
    put=new Put(rowA);
    put.add(kv2);
    region.put(put);
    put=new Put(rowB);
    put.add(kv3);
    region.put(put);
    Scan scan=new Scan(rowD);
    List<Cell> currRow=new ArrayList<Cell>();
    scan.setReversed(true);
    scan.setMaxVersions(5);
    InternalScanner scanner=region.getScanner(scan);
    boolean hasNext=scanner.next(currRow);
    assertEquals(2,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRowArray(),currRow.get(0).getRowOffset(),currRow.get(0).getRowLength(),rowC,0,rowC.length));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(1,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRowArray(),currRow.get(0).getRowOffset(),currRow.get(0).getRowLength(),rowB,0,rowB.length));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(1,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRowArray(),currRow.get(0).getRowOffset(),currRow.get(0).getRowLength(),rowA,0,rowA.length));
    assertFalse(hasNext);
    scanner.close();
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
  }
}
