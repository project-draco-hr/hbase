{
  final byte[] a=Bytes.toBytes("a");
  final byte[] b=Bytes.toBytes("b");
  final byte[] c=Bytes.toBytes("c");
  int prevLockTimeout=CONF.getInt("hbase.rowlock.wait.duration",30000);
  CONF.setInt("hbase.rowlock.wait.duration",1000);
  final HRegion region=initHRegion(tableName,a,c,name.getMethodName(),CONF,false,fam1);
  Mutation[] mutations=new Mutation[]{new Put(a).addImmutable(fam1,null,null),new Put(c).addImmutable(fam1,null,null),new Put(b).addImmutable(fam1,null,null)};
  OperationStatus[] status=region.batchMutate(mutations);
  assertEquals(status[0].getOperationStatusCode(),OperationStatusCode.SUCCESS);
  assertEquals(status[1].getOperationStatusCode(),OperationStatusCode.SANITY_CHECK_FAILURE);
  assertEquals(status[2].getOperationStatusCode(),OperationStatusCode.SUCCESS);
  final CountDownLatch obtainedRowLock=new CountDownLatch(1);
  ExecutorService exec=Executors.newFixedThreadPool(2);
  Future<Void> f1=exec.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      LOG.info("Acquiring row lock");
      RowLock rl=region.getRowLock(b);
      obtainedRowLock.countDown();
      LOG.info("Waiting for 5 seconds before releasing lock");
      Threads.sleep(5000);
      LOG.info("Releasing row lock");
      rl.release();
      return null;
    }
  }
);
  obtainedRowLock.await(30,TimeUnit.SECONDS);
  Future<Void> f2=exec.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      Mutation[] mutations=new Mutation[]{new Put(a).addImmutable(fam1,null,null),new Put(b).addImmutable(fam1,null,null)};
      OperationStatus[] status=region.batchMutate(mutations);
      assertEquals(status[0].getOperationStatusCode(),OperationStatusCode.SUCCESS);
      assertEquals(status[1].getOperationStatusCode(),OperationStatusCode.SUCCESS);
      return null;
    }
  }
);
  f1.get();
  f2.get();
  CONF.setInt("hbase.rowlock.wait.duration",prevLockTimeout);
}
