{
  final byte[] a=Bytes.toBytes("a");
  final byte[] b=Bytes.toBytes("b");
  final byte[] c=Bytes.toBytes("c");
  int prevLockTimeout=CONF.getInt("hbase.rowlock.wait.duration",30000);
  CONF.setInt("hbase.rowlock.wait.duration",3000);
  final HRegion region=initHRegion(tableName,a,c,name.getMethodName(),CONF,false,fam1);
  Mutation[] mutations=new Mutation[]{new Put(a).addImmutable(fam1,null,null),new Put(c).addImmutable(fam1,null,null),new Put(b).addImmutable(fam1,null,null)};
  OperationStatus[] status=region.batchMutate(mutations);
  assertEquals(status[0].getOperationStatusCode(),OperationStatusCode.SUCCESS);
  assertEquals(status[1].getOperationStatusCode(),OperationStatusCode.SANITY_CHECK_FAILURE);
  assertEquals(status[2].getOperationStatusCode(),OperationStatusCode.SUCCESS);
  ExecutorService exec=Executors.newSingleThreadExecutor();
  exec.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      region.getRowLock(b);
      return null;
    }
  }
);
  exec.shutdown();
  exec.awaitTermination(30,TimeUnit.SECONDS);
  mutations=new Mutation[]{new Put(a).addImmutable(fam1,null,null),new Put(b).addImmutable(fam1,null,null)};
  try {
    status=region.batchMutate(mutations);
    fail("Failed to throw exception");
  }
 catch (  IOException expected) {
  }
  CONF.setInt("hbase.rowlock.wait.duration",prevLockTimeout);
}
