{
  byte[] row0=Bytes.toBytes("row0");
  byte[] row1=Bytes.toBytes("row1");
  byte[] row2=Bytes.toBytes("row2");
  byte[] row3=Bytes.toBytes("row3");
  byte[] row4=Bytes.toBytes("row4");
  byte[] row5=Bytes.toBytes("row5");
  byte[] cf1=Bytes.toBytes("CF1");
  byte[] cf2=Bytes.toBytes("CF2");
  byte[] cf3=Bytes.toBytes("CF3");
  byte[][] families={cf1,cf2,cf3};
  byte[] col=Bytes.toBytes("C");
  long ts=1;
  String method=this.getName();
  HBaseConfiguration conf=new HBaseConfiguration();
  conf.setInt("hbase.hstore.compactionThreshold",10000);
  this.region=initHRegion(tableName,method,conf,families);
  try {
    KeyValue kv0_1_1=new KeyValue(row0,cf1,col,ts,KeyValue.Type.Put,null);
    KeyValue kv1_2_1=new KeyValue(row1,cf2,col,ts,KeyValue.Type.Put,null);
    KeyValue kv1_2_2=new KeyValue(row1,cf1,col,ts + 1,KeyValue.Type.Put,null);
    KeyValue kv2_4_1=new KeyValue(row2,cf2,col,ts,KeyValue.Type.Put,null);
    KeyValue kv2_4_2=new KeyValue(row2,cf1,col,ts,KeyValue.Type.Put,null);
    KeyValue kv2_4_3=new KeyValue(row2,cf3,col,ts,KeyValue.Type.Put,null);
    KeyValue kv2_4_4=new KeyValue(row2,cf1,col,ts + 4,KeyValue.Type.Put,null);
    KeyValue kv3_2_1=new KeyValue(row3,cf2,col,ts,KeyValue.Type.Put,null);
    KeyValue kv3_2_2=new KeyValue(row3,cf1,col,ts + 4,KeyValue.Type.Put,null);
    KeyValue kv4_5_1=new KeyValue(row4,cf1,col,ts,KeyValue.Type.Put,null);
    KeyValue kv4_5_2=new KeyValue(row4,cf3,col,ts,KeyValue.Type.Put,null);
    KeyValue kv4_5_3=new KeyValue(row4,cf3,col,ts + 5,KeyValue.Type.Put,null);
    KeyValue kv4_5_4=new KeyValue(row4,cf2,col,ts,KeyValue.Type.Put,null);
    KeyValue kv4_5_5=new KeyValue(row4,cf1,col,ts + 3,KeyValue.Type.Put,null);
    KeyValue kv5_2_1=new KeyValue(row5,cf2,col,ts,KeyValue.Type.Put,null);
    KeyValue kv5_2_2=new KeyValue(row5,cf3,col,ts,KeyValue.Type.Put,null);
    Put put=null;
    put=new Put(row1);
    put.add(kv1_2_1);
    region.put(put);
    put=new Put(row2);
    put.add(kv2_4_1);
    region.put(put);
    put=new Put(row4);
    put.add(kv4_5_4);
    put.add(kv4_5_5);
    region.put(put);
    region.flushcache();
    put=new Put(row4);
    put.add(kv4_5_1);
    put.add(kv4_5_3);
    region.put(put);
    put=new Put(row1);
    put.add(kv1_2_2);
    region.put(put);
    put=new Put(row2);
    put.add(kv2_4_4);
    region.put(put);
    region.flushcache();
    put=new Put(row4);
    put.add(kv4_5_2);
    region.put(put);
    put=new Put(row2);
    put.add(kv2_4_2);
    put.add(kv2_4_3);
    region.put(put);
    put=new Put(row3);
    put.add(kv3_2_2);
    region.put(put);
    region.flushcache();
    put=new Put(row0);
    put.add(kv0_1_1);
    region.put(put);
    put=new Put(row3);
    put.add(kv3_2_1);
    region.put(put);
    put=new Put(row5);
    put.add(kv5_2_1);
    put.add(kv5_2_2);
    region.put(put);
    Scan scan=new Scan(row4);
    scan.setMaxVersions(5);
    scan.setBatch(3);
    scan.setReversed(true);
    InternalScanner scanner=region.getScanner(scan);
    List<Cell> currRow=new ArrayList<Cell>();
    boolean hasNext=false;
    hasNext=scanner.next(currRow);
    assertEquals(3,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row4));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(2,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row4));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(2,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row3));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(3,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row2));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(1,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row2));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(2,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row1));
    assertTrue(hasNext);
    currRow.clear();
    hasNext=scanner.next(currRow);
    assertEquals(1,currRow.size());
    assertTrue(Bytes.equals(currRow.get(0).getRow(),row0));
    assertFalse(hasNext);
    scanner.close();
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
  }
}
