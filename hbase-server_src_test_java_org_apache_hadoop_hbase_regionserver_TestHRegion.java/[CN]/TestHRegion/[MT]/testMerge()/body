{
  byte[][] families={fam1,fam2,fam3};
  Configuration hc=initSplit();
  String method=this.getName();
  this.region=initHRegion(tableName,method,hc,families);
  try {
    LOG.info("" + HBaseTestCase.addContent(region,fam3));
    region.flushcache();
    region.compactStores();
    byte[] splitRow=region.checkSplit();
    assertNotNull(splitRow);
    LOG.info("SplitRow: " + Bytes.toString(splitRow));
    HRegion[] subregions=splitRegion(region,splitRow);
    try {
      for (int i=0; i < subregions.length; i++) {
        HRegion.openHRegion(subregions[i],null);
        subregions[i].compactStores();
      }
      Path oldRegionPath=region.getRegionFileSystem().getRegionDir();
      Path oldRegion1=subregions[0].getRegionFileSystem().getRegionDir();
      Path oldRegion2=subregions[1].getRegionFileSystem().getRegionDir();
      long startTime=System.currentTimeMillis();
      region=HRegion.mergeAdjacent(subregions[0],subregions[1]);
      LOG.info("Merge regions elapsed time: " + ((System.currentTimeMillis() - startTime) / 1000.0));
      fs.delete(oldRegion1,true);
      fs.delete(oldRegion2,true);
      fs.delete(oldRegionPath,true);
      LOG.info("splitAndMerge completed.");
    }
  finally {
      for (int i=0; i < subregions.length; i++) {
        try {
          HRegion.closeHRegion(subregions[i]);
        }
 catch (        IOException e) {
        }
      }
    }
  }
  finally {
    HRegion.closeHRegion(this.region);
    this.region=null;
  }
}
