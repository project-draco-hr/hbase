{
class MyFaultyFSLog extends FaultyFSLog {
    StoreFlushContext storeFlushCtx;
    public MyFaultyFSLog(    FileSystem fs,    Path rootDir,    String logName,    Configuration conf) throws IOException {
      super(fs,rootDir,logName,conf);
    }
    void setStoreFlushCtx(    StoreFlushContext storeFlushCtx){
      this.storeFlushCtx=storeFlushCtx;
    }
    @Override public void sync(    long txid) throws IOException {
      storeFlushCtx.prepare();
      super.sync(txid);
    }
  }
  FileSystem fs=FileSystem.get(CONF);
  Path rootDir=new Path(dir + "testMemstoreSnapshotSize");
  MyFaultyFSLog faultyLog=new MyFaultyFSLog(fs,rootDir,"testMemstoreSnapshotSize",CONF);
  HRegion region=initHRegion(tableName,null,null,name.getMethodName(),CONF,false,Durability.SYNC_WAL,faultyLog,COLUMN_FAMILY_BYTES);
  Store store=region.getStore(COLUMN_FAMILY_BYTES);
  byte[] value=Bytes.toBytes(name.getMethodName());
  faultyLog.setStoreFlushCtx(store.createFlushContext(12345));
  Put put=new Put(value);
  put.add(COLUMN_FAMILY_BYTES,Bytes.toBytes("abc"),value);
  faultyLog.setFailureType(FaultyFSLog.FailureType.SYNC);
  boolean threwIOE=false;
  try {
    region.put(put);
  }
 catch (  IOException ioe) {
    threwIOE=true;
  }
 finally {
    assertTrue("The regionserver should have thrown an exception",threwIOE);
  }
  long sz=store.getFlushableSize();
  assertTrue("flushable size should be zero, but it is " + sz,sz == 0);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
