{
  final Configuration conf=HBaseConfiguration.create(CONF);
  final String callingMethod=name.getMethodName();
  final WAL wal=createWALCompatibleWithFaultyFileSystem(callingMethod,conf,tableName);
  conf.setInt("hbase.hstore.flush.retries.number",1);
  final User user=User.createUserForTesting(conf,this.name.getMethodName(),new String[]{"foo"});
  conf.setClass("fs.file.impl",FaultyFileSystem.class,FileSystem.class);
  user.runAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      FileSystem fs=FileSystem.get(conf);
      Assert.assertEquals(FaultyFileSystem.class,fs.getClass());
      FaultyFileSystem ffs=(FaultyFileSystem)fs;
      HRegion region=null;
      try {
        region=initHRegion(tableName,null,null,callingMethod,conf,false,Durability.SYNC_WAL,wal,COLUMN_FAMILY_BYTES);
        long size=region.getMemstoreSize();
        Assert.assertEquals(0,size);
        Put p1=new Put(row);
        p1.add(new KeyValue(row,COLUMN_FAMILY_BYTES,qual1,1,(byte[])null));
        region.put(p1);
        final long sizeOfOnePut=region.getMemstoreSize();
        try {
          LOG.info("Flushing");
          region.flush(true);
          Assert.fail("Didn't bubble up IOE!");
        }
 catch (        DroppedSnapshotException dse) {
          region.closing.set(false);
        }
        ffs.fault.set(false);
        Assert.assertEquals(sizeOfOnePut,region.getMemstoreSize());
        Put p2=new Put(row);
        p2.add(new KeyValue(row,COLUMN_FAMILY_BYTES,qual2,2,(byte[])null));
        p2.add(new KeyValue(row,COLUMN_FAMILY_BYTES,qual3,3,(byte[])null));
        region.put(p2);
        Assert.assertEquals(sizeOfOnePut * 3,region.getMemstoreSize());
        region.flush(true);
        Assert.assertEquals(sizeOfOnePut * 2,region.getMemstoreSize());
      }
  finally {
        HBaseTestingUtility.closeRegionAndWAL(region);
      }
      return null;
    }
  }
);
  FileSystem.closeAllForUGI(user.getUGI());
}
