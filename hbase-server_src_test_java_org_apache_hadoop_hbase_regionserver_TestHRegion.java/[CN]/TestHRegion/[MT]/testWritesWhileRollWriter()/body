{
  int testCount=10;
  int numRows=1024;
  int numFamilies=2;
  int numQualifiers=2;
  final byte[][] families=new byte[numFamilies][];
  for (int i=0; i < numFamilies; i++) {
    families[i]=Bytes.toBytes("family" + i);
  }
  final byte[][] qualifiers=new byte[numQualifiers][];
  for (int i=0; i < numQualifiers; i++) {
    qualifiers[i]=Bytes.toBytes("qual" + i);
  }
  String method="testWritesWhileRollWriter";
  CONF.setInt("hbase.regionserver.wal.disruptor.event.count",2);
  this.region=initHRegion(tableName,method,CONF,families);
  try {
    List<Thread> threads=new ArrayList<Thread>();
    for (int i=0; i < numRows; i++) {
      final int count=i;
      Thread t=new Thread(new Runnable(){
        @Override public void run(){
          byte[] row=Bytes.toBytes("row" + count);
          Put put=new Put(row);
          put.setDurability(Durability.SYNC_WAL);
          byte[] value=Bytes.toBytes(String.valueOf(count));
          for (          byte[] family : families) {
            for (            byte[] qualifier : qualifiers) {
              put.addColumn(family,qualifier,(long)count,value);
            }
          }
          try {
            region.put(put);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      threads.add(t);
    }
    for (    Thread t : threads) {
      t.start();
    }
    for (int i=0; i < testCount; i++) {
      region.getWAL().rollWriter();
      Thread.yield();
    }
  }
  finally {
    try {
      HBaseTestingUtility.closeRegionAndWAL(this.region);
      CONF.setInt("hbase.regionserver.wal.disruptor.event.count",16 * 1024);
    }
 catch (    DroppedSnapshotException dse) {
    }
    this.region=null;
  }
}
