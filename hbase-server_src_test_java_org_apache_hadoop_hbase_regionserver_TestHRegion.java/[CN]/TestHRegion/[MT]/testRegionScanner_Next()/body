{
  byte[] row1=Bytes.toBytes("row1");
  byte[] row2=Bytes.toBytes("row2");
  byte[] fam1=Bytes.toBytes("fam1");
  byte[] fam2=Bytes.toBytes("fam2");
  byte[] fam3=Bytes.toBytes("fam3");
  byte[] fam4=Bytes.toBytes("fam4");
  byte[][] families={fam1,fam2,fam3,fam4};
  long ts=System.currentTimeMillis();
  String method=this.getName();
  this.region=initHRegion(tableName,method,CONF,families);
  try {
    Put put=null;
    put=new Put(row1);
    put.add(fam1,(byte[])null,ts,null);
    put.add(fam2,(byte[])null,ts,null);
    put.add(fam3,(byte[])null,ts,null);
    put.add(fam4,(byte[])null,ts,null);
    region.put(put);
    put=new Put(row2);
    put.add(fam1,(byte[])null,ts,null);
    put.add(fam2,(byte[])null,ts,null);
    put.add(fam3,(byte[])null,ts,null);
    put.add(fam4,(byte[])null,ts,null);
    region.put(put);
    Scan scan=new Scan();
    scan.addFamily(fam2);
    scan.addFamily(fam4);
    InternalScanner is=region.getScanner(scan);
    List<Cell> res=null;
    List<Cell> expected1=new ArrayList<Cell>();
    expected1.add(new KeyValue(row1,fam2,null,ts,KeyValue.Type.Put,null));
    expected1.add(new KeyValue(row1,fam4,null,ts,KeyValue.Type.Put,null));
    res=new ArrayList<Cell>();
    is.next(res);
    for (int i=0; i < res.size(); i++) {
      assertTrue(CellComparator.equalsIgnoreMvccVersion(expected1.get(i),res.get(i)));
    }
    List<Cell> expected2=new ArrayList<Cell>();
    expected2.add(new KeyValue(row2,fam2,null,ts,KeyValue.Type.Put,null));
    expected2.add(new KeyValue(row2,fam4,null,ts,KeyValue.Type.Put,null));
    res=new ArrayList<Cell>();
    is.next(res);
    for (int i=0; i < res.size(); i++) {
      assertTrue(CellComparator.equalsIgnoreMvccVersion(expected2.get(i),res.get(i)));
    }
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
  }
}
