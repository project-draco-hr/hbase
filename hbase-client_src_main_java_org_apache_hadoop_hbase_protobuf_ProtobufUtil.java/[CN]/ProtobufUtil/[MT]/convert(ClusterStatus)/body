{
  ClusterStatusProtos.ClusterStatus.Builder builder=ClusterStatusProtos.ClusterStatus.newBuilder();
  builder.setHbaseVersion(HBaseVersionFileContent.newBuilder().setVersion(status.getHBaseVersion()));
  if (status.getServers() != null) {
    for (    ServerName serverName : status.getServers()) {
      LiveServerInfo.Builder lsi=LiveServerInfo.newBuilder().setServer(ProtobufUtil.toServerName(serverName));
      status.getLoad(serverName);
      lsi.setServerLoad(status.getLoad(serverName).obtainServerLoadPB());
      builder.addLiveServers(lsi.build());
    }
  }
  if (status.getDeadServerNames() != null) {
    for (    ServerName deadServer : status.getDeadServerNames()) {
      builder.addDeadServers(ProtobufUtil.toServerName(deadServer));
    }
  }
  if (status.getRegionsInTransition() != null) {
    for (    RegionState rit : status.getRegionsInTransition()) {
      ClusterStatusProtos.RegionState rs=rit.convert();
      RegionSpecifier.Builder spec=RegionSpecifier.newBuilder().setType(RegionSpecifierType.REGION_NAME);
      spec.setValue(ByteStringer.wrap(rit.getRegion().getRegionName()));
      RegionInTransition pbRIT=RegionInTransition.newBuilder().setSpec(spec.build()).setRegionState(rs).build();
      builder.addRegionsInTransition(pbRIT);
    }
  }
  if (status.getClusterId() != null) {
    builder.setClusterId(new ClusterId(status.getClusterId()).convert());
  }
  if (status.getMasterCoprocessors() != null) {
    for (    String coprocessor : status.getMasterCoprocessors()) {
      builder.addMasterCoprocessors(HBaseProtos.Coprocessor.newBuilder().setName(coprocessor));
    }
  }
  if (status.getMaster() != null) {
    builder.setMaster(ProtobufUtil.toServerName(status.getMaster()));
  }
  if (status.getBackupMasters() != null) {
    for (    ServerName backup : status.getBackupMasters()) {
      builder.addBackupMasters(ProtobufUtil.toServerName(backup));
    }
  }
  if (status.getBalancerOn() != null) {
    builder.setBalancerOn(status.getBalancerOn());
  }
  return builder.build();
}
