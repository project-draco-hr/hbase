{
  Mutate.Builder builder=Mutate.newBuilder();
  builder.setRow(ByteString.copyFrom(increment.getRow()));
  builder.setMutateType(MutateType.INCREMENT);
  builder.setWriteToWAL(increment.getWriteToWAL());
  TimeRange timeRange=increment.getTimeRange();
  if (!timeRange.isAllTime()) {
    HBaseProtos.TimeRange.Builder timeRangeBuilder=HBaseProtos.TimeRange.newBuilder();
    timeRangeBuilder.setFrom(timeRange.getMin());
    timeRangeBuilder.setTo(timeRange.getMax());
    builder.setTimeRange(timeRangeBuilder.build());
  }
  ColumnValue.Builder columnBuilder=ColumnValue.newBuilder();
  QualifierValue.Builder valueBuilder=QualifierValue.newBuilder();
  for (  Map.Entry<byte[],List<? extends Cell>> family : increment.getFamilyMap().entrySet()) {
    columnBuilder.setFamily(ByteString.copyFrom(family.getKey()));
    columnBuilder.clearQualifierValue();
    List<? extends Cell> values=family.getValue();
    if (values != null && values.size() > 0) {
      for (      Cell cell : values) {
        KeyValue kv=KeyValueUtil.ensureKeyValue(cell);
        valueBuilder.setQualifier(ByteString.copyFrom(kv.getQualifier()));
        valueBuilder.setValue(ByteString.copyFrom(kv.getValue()));
        columnBuilder.addQualifierValue(valueBuilder.build());
      }
    }
    builder.addColumnValue(columnBuilder.build());
  }
  return builder.build();
}
