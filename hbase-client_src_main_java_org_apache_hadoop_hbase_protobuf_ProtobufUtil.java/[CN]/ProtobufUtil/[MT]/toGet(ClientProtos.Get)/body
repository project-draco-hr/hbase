{
  if (proto == null)   return null;
  byte[] row=proto.getRow().toByteArray();
  Get get=new Get(row);
  if (proto.hasCacheBlocks()) {
    get.setCacheBlocks(proto.getCacheBlocks());
  }
  if (proto.hasMaxVersions()) {
    get.setMaxVersions(proto.getMaxVersions());
  }
  if (proto.hasStoreLimit()) {
    get.setMaxResultsPerColumnFamily(proto.getStoreLimit());
  }
  if (proto.hasStoreOffset()) {
    get.setRowOffsetPerColumnFamily(proto.getStoreOffset());
  }
  if (proto.getCfTimeRangeCount() > 0) {
    for (    HBaseProtos.ColumnFamilyTimeRange cftr : proto.getCfTimeRangeList()) {
      TimeRange timeRange=protoToTimeRange(cftr.getTimeRange());
      get.setColumnFamilyTimeRange(cftr.getColumnFamily().toByteArray(),timeRange.getMin(),timeRange.getMax());
    }
  }
  if (proto.hasTimeRange()) {
    TimeRange timeRange=protoToTimeRange(proto.getTimeRange());
    get.setTimeRange(timeRange.getMin(),timeRange.getMax());
  }
  if (proto.hasFilter()) {
    FilterProtos.Filter filter=proto.getFilter();
    get.setFilter(ProtobufUtil.toFilter(filter));
  }
  for (  NameBytesPair attribute : proto.getAttributeList()) {
    get.setAttribute(attribute.getName(),attribute.getValue().toByteArray());
  }
  if (proto.getColumnCount() > 0) {
    for (    Column column : proto.getColumnList()) {
      byte[] family=column.getFamily().toByteArray();
      if (column.getQualifierCount() > 0) {
        for (        ByteString qualifier : column.getQualifierList()) {
          get.addColumn(family,qualifier.toByteArray());
        }
      }
 else {
        get.addFamily(family);
      }
    }
  }
  if (proto.hasExistenceOnly() && proto.getExistenceOnly()) {
    get.setCheckExistenceOnly(true);
  }
  if (proto.hasConsistency()) {
    get.setConsistency(toConsistency(proto.getConsistency()));
  }
  return get;
}
