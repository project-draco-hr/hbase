{
  Configuration conf=getConf();
  BackupManager backupManager=null;
  BackupContext backupContext=null;
  if (snapshot != null) {
    LOG.warn("Snapshot option specified, backup type and table option will be ignored,\n" + "full backup will be taken based on the given snapshot.");
    throw new IOException("backup using existing Snapshot will be implemented in future jira");
  }
  HBaseAdmin hbadmin=null;
  Connection conn=null;
  try {
    backupManager=new BackupManager(conf);
    String tables=tableList;
    if (backupType.equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
      Set<String> incrTableSet=backupManager.getIncrementalBackupTableSet();
      if (incrTableSet.isEmpty()) {
        LOG.warn("Incremental backup table set contains no table.\n" + "Use 'backup create full' or 'backup stop' to \n " + "change the tables covered by incremental backup.");
        throw new RuntimeException("No table covered by incremental backup.");
      }
      StringBuilder sb=new StringBuilder();
      for (      String tableName : incrTableSet) {
        sb.append(tableName + " ");
      }
      LOG.info("Incremental backup for the following table set: " + sb.toString());
      tables=sb.toString().trim().replaceAll(" ",BackupRestoreConstants.TABLENAME_DELIMITER_IN_COMMAND);
    }
    if (tables != null) {
      String[] tableNames=tables.split(BackupRestoreConstants.TABLENAME_DELIMITER_IN_COMMAND);
      ArrayList<String> noneExistingTableList=null;
      conn=ConnectionFactory.createConnection(conf);
      hbadmin=(HBaseAdmin)conn.getAdmin();
      for (      String tableName : tableNames) {
        if (!hbadmin.tableExists(TableName.valueOf(tableName))) {
          if (noneExistingTableList == null) {
            noneExistingTableList=new ArrayList<String>();
          }
          noneExistingTableList.add(tableName);
        }
      }
      if (noneExistingTableList != null) {
        if (backupType.equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
          LOG.warn("Incremental backup table set contains no-exising table: " + noneExistingTableList);
        }
 else {
          throw new RuntimeException("Non-existing tables found in the table list: " + noneExistingTableList);
        }
      }
    }
    String[] tableNames=null;
    if (tables != null && !tables.equals("")) {
      tableNames=tables.split(BackupRestoreConstants.TABLENAME_DELIMITER_IN_COMMAND);
    }
    if (tableNames != null && tableNames.length > 0) {
      for (      String table : tableNames) {
        String targetTableBackupDir=HBackupFileSystem.getTableBackupDir(targetRootDir,backupId,table);
        Path targetTableBackupDirPath=new Path(targetTableBackupDir);
        FileSystem outputFs=FileSystem.get(targetTableBackupDirPath.toUri(),conf);
        if (outputFs.exists(targetTableBackupDirPath)) {
          throw new IOException("Target backup directory " + targetTableBackupDir + " exists already.");
        }
      }
    }
    backupContext=backupManager.createBackupContext(backupId,backupType,tables,targetRootDir,snapshot);
    backupManager.initialize();
    backupManager.dispatchRequest(backupContext);
  }
 catch (  BackupException e) {
    StackTraceElement[] stes=e.getStackTrace();
    for (    StackTraceElement ste : stes) {
      LOG.info(ste);
    }
    LOG.error("Backup Exception " + e.getMessage());
  }
 finally {
    if (hbadmin != null) {
      hbadmin.close();
    }
    if (conn != null) {
      conn.close();
    }
  }
}
