{
  ByteBuffer argumentOnTopOfStack=operatorStack.peek();
  if (argumentOnTopOfStack.equals(ParseConstants.OR_BUFFER)) {
    try {
      ArrayList<Filter> listOfFilters=new ArrayList<Filter>();
      while (!operatorStack.empty() && operatorStack.peek().equals(ParseConstants.OR_BUFFER)) {
        Filter filter=filterStack.pop();
        listOfFilters.add(0,filter);
        operatorStack.pop();
      }
      Filter filter=filterStack.pop();
      listOfFilters.add(0,filter);
      Filter orFilter=new FilterList(FilterList.Operator.MUST_PASS_ONE,listOfFilters);
      return orFilter;
    }
 catch (    EmptyStackException e) {
      throw new IllegalArgumentException("Incorrect input string - an OR needs two filters");
    }
  }
 else   if (argumentOnTopOfStack.equals(ParseConstants.AND_BUFFER)) {
    try {
      ArrayList<Filter> listOfFilters=new ArrayList<Filter>();
      while (!operatorStack.empty() && operatorStack.peek().equals(ParseConstants.AND_BUFFER)) {
        Filter filter=filterStack.pop();
        listOfFilters.add(0,filter);
        operatorStack.pop();
      }
      Filter filter=filterStack.pop();
      listOfFilters.add(0,filter);
      Filter andFilter=new FilterList(FilterList.Operator.MUST_PASS_ALL,listOfFilters);
      return andFilter;
    }
 catch (    EmptyStackException e) {
      throw new IllegalArgumentException("Incorrect input string - an AND needs two filters");
    }
  }
 else   if (argumentOnTopOfStack.equals(ParseConstants.SKIP_BUFFER)) {
    try {
      Filter wrappedFilter=filterStack.pop();
      Filter skipFilter=new SkipFilter(wrappedFilter);
      operatorStack.pop();
      return skipFilter;
    }
 catch (    EmptyStackException e) {
      throw new IllegalArgumentException("Incorrect input string - a SKIP wraps a filter");
    }
  }
 else   if (argumentOnTopOfStack.equals(ParseConstants.WHILE_BUFFER)) {
    try {
      Filter wrappedFilter=filterStack.pop();
      Filter whileMatchFilter=new WhileMatchFilter(wrappedFilter);
      operatorStack.pop();
      return whileMatchFilter;
    }
 catch (    EmptyStackException e) {
      throw new IllegalArgumentException("Incorrect input string - a WHILE wraps a filter");
    }
  }
 else   if (argumentOnTopOfStack.equals(ParseConstants.LPAREN_BUFFER)) {
    try {
      Filter filter=filterStack.pop();
      operatorStack.pop();
      return filter;
    }
 catch (    EmptyStackException e) {
      throw new IllegalArgumentException("Incorrect Filter String");
    }
  }
 else {
    throw new IllegalArgumentException("Incorrect arguments on operatorStack");
  }
}
