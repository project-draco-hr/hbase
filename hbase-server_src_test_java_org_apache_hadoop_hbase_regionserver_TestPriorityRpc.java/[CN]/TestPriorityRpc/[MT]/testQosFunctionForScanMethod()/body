{
  RpcRequestBody.Builder rpcRequestBuilder=RpcRequestBody.newBuilder();
  rpcRequestBuilder.setMethodName("scan");
  ScanRequest.Builder scanBuilder=ScanRequest.newBuilder();
  ByteString requestBody=scanBuilder.build().toByteString();
  rpcRequestBuilder.setRequest(requestBody);
  RpcRequestBody rpcRequest=rpcRequestBuilder.build();
  assertTrue(qosFunction.apply(rpcRequest) == HRegionServer.NORMAL_QOS);
  scanBuilder=ScanRequest.newBuilder();
  scanBuilder.setScannerId(12345);
  requestBody=scanBuilder.build().toByteString();
  rpcRequestBuilder.setRequest(requestBody);
  rpcRequestBuilder.setRequestClassName(ScanRequest.class.getCanonicalName());
  rpcRequest=rpcRequestBuilder.build();
  HRegionServer mockRS=Mockito.mock(HRegionServer.class);
  RegionScanner mockRegionScanner=Mockito.mock(RegionScanner.class);
  HRegionInfo mockRegionInfo=Mockito.mock(HRegionInfo.class);
  HRegion mockRegion=Mockito.mock(HRegion.class);
  Mockito.when(mockRS.getScanner(12345)).thenReturn(mockRegionScanner);
  Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);
  Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);
  qosFunction.setRegionServer(mockRS);
  assertTrue(qosFunction.apply(rpcRequest) == HRegionServer.HIGH_QOS);
  Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);
  assertTrue(qosFunction.apply(rpcRequest) == HRegionServer.NORMAL_QOS);
}
