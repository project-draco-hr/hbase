{
  RequestHeader.Builder headerBuilder=RequestHeader.newBuilder();
  headerBuilder.setMethodName("scan");
  RequestHeader header=headerBuilder.build();
  ScanRequest.Builder scanBuilder=ScanRequest.newBuilder();
  ScanRequest scanRequest=scanBuilder.build();
  HRegion mockRegion=Mockito.mock(HRegion.class);
  HRegionServer mockRS=Mockito.mock(HRegionServer.class);
  HRegionInfo mockRegionInfo=Mockito.mock(HRegionInfo.class);
  Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);
  Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);
  qosFunction.setRegionServer(mockRS);
  int qos=qosFunction.apply(new Pair<RequestHeader,Message>(header,scanRequest));
  assertTrue("" + qos,qos == HConstants.NORMAL_QOS);
  scanBuilder=ScanRequest.newBuilder();
  scanBuilder.setScannerId(12345);
  scanRequest=scanBuilder.build();
  RegionScanner mockRegionScanner=Mockito.mock(RegionScanner.class);
  Mockito.when(mockRS.getScanner(12345)).thenReturn(mockRegionScanner);
  Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);
  Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(true);
  qosFunction.setRegionServer(mockRS);
  assertTrue(qosFunction.apply(new Pair<RequestHeader,Message>(header,scanRequest)) == HConstants.HIGH_QOS);
  Mockito.when(mockRegionInfo.isMetaRegion()).thenReturn(false);
  assertTrue(qosFunction.apply(new Pair<RequestHeader,Message>(header,scanRequest)) == HConstants.NORMAL_QOS);
}
