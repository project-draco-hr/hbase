{
  qosFunction=regionServer.getQosFunction();
  RpcRequestBody.Builder rpcRequestBuilder=RpcRequestBody.newBuilder();
  rpcRequestBuilder=RpcRequestBody.newBuilder();
  rpcRequestBuilder.setMethodName("foo");
  GetRequest.Builder getRequestBuilder=GetRequest.newBuilder();
  RegionSpecifier.Builder regionSpecifierBuilder=RegionSpecifier.newBuilder();
  regionSpecifierBuilder.setType(RegionSpecifierType.REGION_NAME);
  ByteString name=ByteString.copyFrom(HRegionInfo.FIRST_META_REGIONINFO.getRegionName());
  regionSpecifierBuilder.setValue(name);
  RegionSpecifier regionSpecifier=regionSpecifierBuilder.build();
  getRequestBuilder.setRegion(regionSpecifier);
  Get.Builder getBuilder=Get.newBuilder();
  getBuilder.setRow(ByteString.copyFrom("somerow".getBytes()));
  getRequestBuilder.setGet(getBuilder.build());
  rpcRequestBuilder.setRequest(getRequestBuilder.build().toByteString());
  rpcRequestBuilder.setRequestClassName(GetRequest.class.getCanonicalName());
  RpcRequestBody rpcRequest=rpcRequestBuilder.build();
  HRegion mockRegion=Mockito.mock(HRegion.class);
  HRegionServer mockRS=Mockito.mock(HRegionServer.class);
  HRegionInfo mockRegionInfo=Mockito.mock(HRegionInfo.class);
  Mockito.when(mockRS.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);
  Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRegionInfo.isMetaTable()).thenReturn(true);
  qosFunction.setRegionServer(mockRS);
  assertTrue(qosFunction.apply(rpcRequest) == HConstants.HIGH_QOS);
}
