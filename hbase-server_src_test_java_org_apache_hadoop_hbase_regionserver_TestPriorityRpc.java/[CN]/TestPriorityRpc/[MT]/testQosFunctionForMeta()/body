{
  priority=regionServer.rpcServices.getPriority();
  RequestHeader.Builder headerBuilder=RequestHeader.newBuilder();
  headerBuilder.setMethodName("foo");
  GetRequest.Builder getRequestBuilder=GetRequest.newBuilder();
  RegionSpecifier.Builder regionSpecifierBuilder=RegionSpecifier.newBuilder();
  regionSpecifierBuilder.setType(RegionSpecifierType.REGION_NAME);
  ByteString name=ByteStringer.wrap(HRegionInfo.FIRST_META_REGIONINFO.getRegionName());
  regionSpecifierBuilder.setValue(name);
  RegionSpecifier regionSpecifier=regionSpecifierBuilder.build();
  getRequestBuilder.setRegion(regionSpecifier);
  Get.Builder getBuilder=Get.newBuilder();
  getBuilder.setRow(ByteStringer.wrap("somerow".getBytes()));
  getRequestBuilder.setGet(getBuilder.build());
  GetRequest getRequest=getRequestBuilder.build();
  RequestHeader header=headerBuilder.build();
  HRegion mockRegion=Mockito.mock(HRegion.class);
  HRegionServer mockRS=Mockito.mock(HRegionServer.class);
  RSRpcServices mockRpc=Mockito.mock(RSRpcServices.class);
  Mockito.when(mockRS.getRSRpcServices()).thenReturn(mockRpc);
  HRegionInfo mockRegionInfo=Mockito.mock(HRegionInfo.class);
  Mockito.when(mockRpc.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);
  Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
  Mockito.when(mockRegionInfo.isSystemTable()).thenReturn(true);
  ((AnnotationReadingPriorityFunction)priority).setRegionServer(mockRS);
  assertEquals(HConstants.SYSTEMTABLE_QOS,priority.getPriority(header,getRequest,User.createUserForTesting(regionServer.conf,"someuser",new String[]{"somegroup"})));
}
