{
  Configuration conf=getConf();
  setupTime(conf,HLogInputFormat.START_TIME_KEY);
  setupTime(conf,HLogInputFormat.END_TIME_KEY);
  Path inputDir=new Path(args[0]);
  String[] tables=args[1].split(",");
  String[] tableMap;
  if (args.length > 2) {
    tableMap=args[2].split(",");
    if (tableMap.length != tables.length) {
      throw new IOException("The same number of tables and mapping must be provided.");
    }
  }
 else {
    tableMap=tables;
  }
  conf.setStrings(TABLES_KEY,tables);
  conf.setStrings(TABLE_MAP_KEY,tableMap);
  Job job=new Job(conf,NAME + "_" + inputDir);
  job.setJarByClass(WALPlayer.class);
  FileInputFormat.setInputPaths(job,inputDir);
  job.setInputFormatClass(HLogInputFormat.class);
  job.setMapOutputKeyClass(ImmutableBytesWritable.class);
  String hfileOutPath=conf.get(BULK_OUTPUT_CONF_KEY);
  if (hfileOutPath != null) {
    if (tables.length != 1) {
      throw new IOException("Exactly one table must be specified for the bulk export option");
    }
    HTable table=new HTable(conf,tables[0]);
    job.setMapperClass(HLogKeyValueMapper.class);
    job.setReducerClass(KeyValueSortReducer.class);
    Path outputDir=new Path(hfileOutPath);
    FileOutputFormat.setOutputPath(job,outputDir);
    job.setMapOutputValueClass(KeyValue.class);
    HFileOutputFormat.configureIncrementalLoad(job,table);
    TableMapReduceUtil.addDependencyJars(job.getConfiguration(),com.google.common.base.Preconditions.class);
  }
 else {
    job.setMapperClass(HLogMapper.class);
    job.setOutputFormatClass(MultiTableOutputFormat.class);
    TableMapReduceUtil.addDependencyJars(job);
    job.setNumReduceTasks(0);
  }
  return job;
}
