{
  final Random r=new Random();
  final MetricsHistogram h=new MetricsHistogram("testHistogram",null);
  final long[] data=new long[1000];
  for (int i=0; i < data.length; i++) {
    data[i]=(long)(r.nextGaussian() * 10000.0);
    h.update(data[i]);
  }
  final Snapshot s=h.getSnapshot();
  Arrays.sort(data);
  final int slop=20;
  final int medianIndex=data.length / 2;
  final long minAcceptableMedian=data[safeIndex(medianIndex - slop,data.length)];
  final long maxAcceptableMedian=data[safeIndex(medianIndex + slop,data.length)];
  Assert.assertTrue(s.getMedian() >= minAcceptableMedian && s.getMedian() <= maxAcceptableMedian);
  final int seventyFifthIndex=(int)(data.length * 0.75);
  final long minAcceptableseventyFifth=data[safeIndex(seventyFifthIndex - slop,data.length)];
  final long maxAcceptableseventyFifth=data[safeIndex(seventyFifthIndex + slop,data.length)];
  Assert.assertTrue(s.get75thPercentile() >= minAcceptableseventyFifth && s.get75thPercentile() <= maxAcceptableseventyFifth);
  final int ninetyFifthIndex=(int)(data.length * 0.95);
  final long minAcceptableninetyFifth=data[safeIndex(ninetyFifthIndex - slop,data.length)];
  final long maxAcceptableninetyFifth=data[safeIndex(ninetyFifthIndex + slop,data.length)];
  Assert.assertTrue(s.get95thPercentile() >= minAcceptableninetyFifth && s.get95thPercentile() <= maxAcceptableninetyFifth);
}
