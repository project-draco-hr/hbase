def bootstrap_table(self, table_name):
    try:
        self.log.info(('Bootstrapping table %s' % table_name))
        hbase = HBaseConnection(self.hbase_hostname, self.hbase_port)
        try:
            table_mapping = self.table_mappings[table_name]
            self.log.debug('Connecting to HBase')
            hbase.connect()
            self.log.debug('Getting postgresql cursor')
            db = self.get_database('postgresql_db')
            curs = db.cursor()
            hbase.validate_table_name(table_mapping.hbase_table_name)
            hbase.validate_column_descriptors(table_mapping.hbase_table_name, table_mapping.hbase_column_descriptors)
            try:
                dump_file = self.cf.get('bootstrap_tmpfile')
            except:
                dump_file = None
            if (dump_file != None):
                row_source = CopiedRows(self.log, curs, dump_file)
            else:
                row_source = SelectedRows(self.log, curs)
            table_name = ((table_mapping.psql_schema + '.') + table_mapping.psql_table_name)
            column_list = ([table_mapping.psql_key_column] + table_mapping.psql_columns)
            row_source.load_rows(table_name, column_list)
            batch_size = self.max_batch_size
            total_rows = 0L
            self.log.debug('Starting puts to hbase')
            rows = row_source.get_rows(batch_size)
            while (rows != []):
                batches = []
                for row in rows:
                    batches.append(self.createRowBatch(table_mapping, row))
                hbase.client.mutateRows(table_mapping.hbase_table_name, batches)
                total_rows = (total_rows + len(batches))
                self.log.debug(('total rows put = %d' % total_rows))
                rows = row_source.get_rows(batch_size)
            self.log.info(('total rows put = %d' % total_rows))
            self.log.info(('Bootstrapping table %s complete' % table_name))
        except Exception as e:
            sys.exit(e)
    finally:
        hbase.disconnect()
