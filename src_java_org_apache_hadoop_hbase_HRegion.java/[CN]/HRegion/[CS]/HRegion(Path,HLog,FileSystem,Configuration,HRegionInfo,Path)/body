{
  this.rootDir=rootDir;
  this.log=log;
  this.fs=fs;
  this.conf=conf;
  this.regionInfo=regionInfo;
  this.memcache=new HMemcache();
  this.writestate.writesOngoing=true;
  this.writestate.writesEnabled=true;
  this.regiondir=HStoreFile.getHRegionDir(rootDir,this.regionInfo.regionName);
  Path oldLogFile=new Path(regiondir,HREGION_OLDLOGFILE_NAME);
  if (initialFiles != null && fs.exists(initialFiles)) {
    fs.rename(initialFiles,regiondir);
  }
  for (  Map.Entry<Text,HColumnDescriptor> e : this.regionInfo.tableDesc.families().entrySet()) {
    Text colFamily=HStoreKey.extractFamily(e.getKey());
    stores.put(colFamily,new HStore(rootDir,this.regionInfo.regionName,e.getValue(),fs,oldLogFile,conf));
  }
  Path splits=new Path(regiondir,SPLITDIR);
  if (fs.exists(splits)) {
    fs.delete(splits);
  }
  Path merges=new Path(regiondir,MERGEDIR);
  if (fs.exists(merges)) {
    fs.delete(merges);
  }
  this.memcacheFlushSize=conf.getInt("hbase.hregion.memcache.flush.size",1024 * 1024 * 16);
  this.blockingMemcacheSize=this.memcacheFlushSize * conf.getInt("hbase.hregion.memcache.block.multiplier",2);
  this.compactionThreshold=conf.getInt("hbase.hregion.compactionThreshold",3);
  this.desiredMaxFileSize=conf.getLong("hbase.hregion.max.filesize",DEFAULT_MAX_FILE_SIZE);
  this.writestate.writesOngoing=false;
  LOG.info("region " + this.regionInfo.regionName + " available");
}
