{
  Text chosenRow=null;
  long chosenTimestamp=-1;
  for (int i=0; i < this.keys.length; i++) {
    if (scanners[i] != null && (chosenRow == null || (keys[i].getRow().compareTo(chosenRow) < 0) || ((keys[i].getRow().compareTo(chosenRow) == 0) && (keys[i].getTimestamp() > chosenTimestamp)))) {
      chosenRow=new Text(keys[i].getRow());
      chosenTimestamp=keys[i].getTimestamp();
    }
  }
  boolean insertedItem=false;
  if (chosenTimestamp > 0) {
    key.setRow(chosenRow);
    key.setVersion(chosenTimestamp);
    key.setColumn(new Text(""));
    for (int i=0; i < scanners.length; i++) {
      while ((scanners[i] != null) && (keys[i].getRow().compareTo(chosenRow) == 0)) {
        if (!wildcardMatch && !multipleMatchers && (keys[i].getTimestamp() != chosenTimestamp)) {
          break;
        }
        for (        Map.Entry<Text,byte[]> e : resultSets[i].entrySet()) {
          if (!results.containsKey(e.getKey())) {
            results.put(e.getKey(),e.getValue());
            insertedItem=true;
          }
        }
        resultSets[i].clear();
        if (!scanners[i].next(keys[i],resultSets[i])) {
          closeScanner(i);
        }
      }
      while ((scanners[i] != null) && (keys[i].getRow().compareTo(chosenRow) <= 0)) {
        resultSets[i].clear();
        if (!scanners[i].next(keys[i],resultSets[i])) {
          closeScanner(i);
        }
      }
    }
  }
  return insertedItem;
}
