{
  if (((regionInfo.startKey.getLength() != 0) && (regionInfo.startKey.compareTo(midKey) > 0)) || ((regionInfo.endKey.getLength() != 0) && (regionInfo.endKey.compareTo(midKey) < 0))) {
    throw new IOException("Region splitkey must lie within region " + "boundaries.");
  }
  long startTime=System.currentTimeMillis();
  Path splits=new Path(regiondir,SPLITDIR);
  if (!fs.exists(splits)) {
    fs.mkdirs(splits);
  }
  long regionAId=Math.abs(rand.nextLong());
  HRegionInfo regionAInfo=new HRegionInfo(regionAId,regionInfo.tableDesc,regionInfo.startKey,midKey);
  long regionBId=Math.abs(rand.nextLong());
  HRegionInfo regionBInfo=new HRegionInfo(regionBId,regionInfo.tableDesc,midKey,null);
  Path dirA=HStoreFile.getHRegionDir(splits,regionAInfo.regionName);
  Path dirB=HStoreFile.getHRegionDir(splits,regionBInfo.regionName);
  if (fs.exists(dirA) || fs.exists(dirB)) {
    throw new IOException("Cannot split; target file collision at " + dirA + " or "+ dirB);
  }
  listener.closing(this.getRegionName());
  LOG.debug("Starting wait on row locks.");
  waitOnRowLocks();
  LOG.debug("Calling flushcache inside closeAndSplit");
  Vector<HStoreFile> hstoreFilesToSplit=flushcache(true);
  if (hstoreFilesToSplit == null) {
    throw new NullPointerException("Flushcache did not return any files");
  }
  TreeSet<HStoreFile> alreadySplit=new TreeSet<HStoreFile>();
  for (  HStoreFile hsf : hstoreFilesToSplit) {
    alreadySplit.add(splitStoreFile(hsf,splits,regionAInfo,regionBInfo,midKey));
  }
  hstoreFilesToSplit=close();
  listener.closed(this.getRegionName());
  for (  HStoreFile hsf : hstoreFilesToSplit) {
    if (!alreadySplit.contains(hsf)) {
      splitStoreFile(hsf,splits,regionAInfo,regionBInfo,midKey);
    }
  }
  HRegion regionA=new HRegion(rootDir,log,fs,conf,regionAInfo,dirA);
  HRegion regionB=new HRegion(rootDir,log,fs,conf,regionBInfo,dirB);
  fs.delete(splits);
  fs.delete(regiondir);
  HRegion regions[]=new HRegion[2];
  regions[0]=regionA;
  regions[1]=regionB;
  LOG.info("Region split of " + this.regionInfo.regionName + " complete. "+ "New regions are: "+ regions[0].getRegionName()+ ", "+ regions[1].getRegionName()+ ". Took "+ StringUtils.formatTimeDiff(System.currentTimeMillis(),startTime));
  return regions;
}
