{
  long startTime=-1;
  if (LOG.isDebugEnabled()) {
    startTime=System.currentTimeMillis();
    LOG.debug("Started memcache flush for region " + this.regionInfo.regionName + ". Size "+ StringUtils.humanReadableInt(this.memcache.getSize()));
  }
  HMemcache.Snapshot retval=memcache.snapshotMemcacheForLog(log);
  if (retval == null || retval.memcacheSnapshot == null) {
    return getAllStoreFiles();
  }
  long logCacheFlushId=retval.sequenceId;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Snapshotted memcache for region " + this.regionInfo.regionName + ". Sequence id "+ retval.sequenceId);
  }
  Vector<HStoreFile> allHStoreFiles=new Vector<HStoreFile>();
  for (  HStore hstore : stores.values()) {
    Vector<HStoreFile> hstoreFiles=hstore.flushCache(retval.memcacheSnapshot,retval.sequenceId);
    allHStoreFiles.addAll(0,hstoreFiles);
  }
  log.completeCacheFlush(this.regionInfo.regionName,regionInfo.tableDesc.getName(),logCacheFlushId);
  memcache.deleteSnapshot();
synchronized (this) {
    notifyAll();
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Finished memcache flush for region " + this.regionInfo.regionName + " in "+ (System.currentTimeMillis() - startTime)+ "ms");
  }
  return allHStoreFiles;
}
