{
  MutateRowsResponse response=MutateRowsResponse.getDefaultInstance();
  try {
    SortedSet<byte[]> rowsToLock=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
    List<MutationProto> mutateRequestList=request.getMutationRequestList();
    List<Mutation> mutations=new ArrayList<Mutation>(mutateRequestList.size());
    for (    MutationProto m : mutateRequestList) {
      mutations.add(ProtobufUtil.toMutation(m));
    }
    HRegionInfo regionInfo=env.getRegion().getRegionInfo();
    for (    Mutation m : mutations) {
      if (!HRegion.rowIsInRange(regionInfo,m.getRow())) {
        String msg="Requested row out of range '" + Bytes.toStringBinary(m.getRow()) + "'";
        if (rowsToLock.isEmpty()) {
          throw new WrongRegionException(msg);
        }
 else {
          throw new org.apache.hadoop.hbase.DoNotRetryIOException(msg);
        }
      }
      rowsToLock.add(m.getRow());
    }
    long nonceGroup=request.hasNonceGroup() ? request.getNonceGroup() : HConstants.NO_NONCE;
    long nonce=request.hasNonce() ? request.getNonce() : HConstants.NO_NONCE;
    env.getRegion().mutateRowsWithLocks(mutations,rowsToLock,nonceGroup,nonce);
  }
 catch (  IOException e) {
    ResponseConverter.setControllerException(controller,e);
  }
  done.run(response);
}
