{
  Options options=new Options();
  options.addOption("p","port",true,"Port to bind to [default: " + DEFAULT_LISTEN_PORT + "]");
  options.addOption("ro","readonly",false,"Respond only to GET HTTP " + "method requests [default: false]");
  options.addOption(null,"infoport",true,"Port for web UI");
  CommandLine commandLine=null;
  try {
    commandLine=new PosixParser().parse(options,args);
  }
 catch (  ParseException e) {
    LOG.error("Could not parse: ",e);
    printUsageAndExit(options,-1);
  }
  if (commandLine != null && commandLine.hasOption("port")) {
    String val=commandLine.getOptionValue("port");
    servlet.getConfiguration().setInt("hbase.rest.port",Integer.parseInt(val));
    if (LOG.isDebugEnabled()) {
      LOG.debug("port set to " + val);
    }
  }
  if (commandLine != null && commandLine.hasOption("readonly")) {
    servlet.getConfiguration().setBoolean("hbase.rest.readonly",true);
    if (LOG.isDebugEnabled()) {
      LOG.debug("readonly set to true");
    }
  }
  if (commandLine != null && commandLine.hasOption("infoport")) {
    String val=commandLine.getOptionValue("infoport");
    servlet.getConfiguration().setInt("hbase.rest.info.port",Integer.parseInt(val));
    if (LOG.isDebugEnabled()) {
      LOG.debug("Web UI port set to " + val);
    }
  }
  @SuppressWarnings("unchecked") List<String> remainingArgs=commandLine != null ? commandLine.getArgList() : new ArrayList<String>();
  if (remainingArgs.size() != 1) {
    printUsageAndExit(options,1);
  }
  String command=remainingArgs.get(0);
  if ("start".equals(command)) {
  }
 else   if ("stop".equals(command)) {
    System.exit(1);
  }
 else {
    printUsageAndExit(options,1);
  }
}
