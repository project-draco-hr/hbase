{
  VersionInfo.logVersion();
  Configuration conf=HBaseConfiguration.create();
  UserProvider userProvider=UserProvider.instantiate(conf);
  Pair<FilterHolder,Class<? extends ServletContainer>> pair=loginServerPrincipal(userProvider,conf);
  FilterHolder authFilter=pair.getFirst();
  Class<? extends ServletContainer> containerClass=pair.getSecond();
  RESTServlet servlet=RESTServlet.getInstance(conf,userProvider);
  parseCommandLine(args,servlet);
  ServletHolder sh=new ServletHolder(containerClass);
  sh.setInitParameter("com.sun.jersey.config.property.resourceConfigClass",ResourceConfig.class.getCanonicalName());
  sh.setInitParameter("com.sun.jersey.config.property.packages","jetty");
  ServletHolder shPojoMap=new ServletHolder(containerClass);
  @SuppressWarnings("unchecked") Map<String,String> shInitMap=sh.getInitParameters();
  for (  Entry<String,String> e : shInitMap.entrySet()) {
    shPojoMap.setInitParameter(e.getKey(),e.getValue());
  }
  shPojoMap.setInitParameter(JSONConfiguration.FEATURE_POJO_MAPPING,"true");
  Server server=new Server();
  Connector connector=new SelectChannelConnector();
  if (conf.getBoolean(REST_SSL_ENABLED,false)) {
    SslSelectChannelConnectorSecure sslConnector=new SslSelectChannelConnectorSecure();
    String keystore=conf.get(REST_SSL_KEYSTORE_STORE);
    String password=HBaseConfiguration.getPassword(conf,REST_SSL_KEYSTORE_PASSWORD,null);
    String keyPassword=HBaseConfiguration.getPassword(conf,REST_SSL_KEYSTORE_KEYPASSWORD,password);
    sslConnector.setKeystore(keystore);
    sslConnector.setPassword(password);
    sslConnector.setKeyPassword(keyPassword);
    connector=sslConnector;
  }
  connector.setPort(servlet.getConfiguration().getInt("hbase.rest.port",DEFAULT_LISTEN_PORT));
  connector.setHost(servlet.getConfiguration().get("hbase.rest.host","0.0.0.0"));
  connector.setHeaderBufferSize(65536);
  server.addConnector(connector);
  int maxThreads=servlet.getConfiguration().getInt("hbase.rest.threads.max",100);
  int minThreads=servlet.getConfiguration().getInt("hbase.rest.threads.min",2);
  QueuedThreadPool threadPool=new QueuedThreadPool(maxThreads);
  threadPool.setMinThreads(minThreads);
  server.setThreadPool(threadPool);
  server.setSendServerVersion(false);
  server.setSendDateHeader(false);
  server.setStopAtShutdown(true);
  Context context=new Context(server,"/",Context.SESSIONS);
  context.addServlet(shPojoMap,"/status/cluster");
  context.addServlet(sh,"/*");
  if (authFilter != null) {
    context.addFilter(authFilter,"/*",1);
  }
  String[] filterClasses=servlet.getConfiguration().getStrings(FILTER_CLASSES,ArrayUtils.EMPTY_STRING_ARRAY);
  for (  String filter : filterClasses) {
    filter=filter.trim();
    context.addFilter(Class.forName(filter),"/*",0);
  }
  addCSRFFilter(context,conf);
  HttpServerUtil.constrainHttpMethods(context);
  int port=conf.getInt("hbase.rest.info.port",8085);
  if (port >= 0) {
    conf.setLong("startcode",System.currentTimeMillis());
    String a=conf.get("hbase.rest.info.bindAddress","0.0.0.0");
    InfoServer infoServer=new InfoServer("rest",a,port,false,conf);
    infoServer.setAttribute("hbase.conf",conf);
    infoServer.start();
  }
  server.start();
  server.join();
}
