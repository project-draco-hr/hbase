{
  Path ncTFile=new Path(TEST_UTIL.getDataTestDir(),"basic.hfile");
  FSDataOutputStream fout=TEST_UTIL.getTestFileSystem().create(ncTFile);
  CacheConfig cacheConf=new CacheConfig(TEST_UTIL.getConfiguration());
  HFile.Writer writer=HFile.getWriterFactory(TEST_UTIL.getConfiguration(),cacheConf).withOutputStream(fout).withBlockSize(4000).create();
  int numberOfKeys=1000;
  String valueString="Value";
  List<Integer> keyList=new ArrayList<Integer>();
  List<String> valueList=new ArrayList<String>();
  for (int key=0; key < numberOfKeys; key++) {
    String value=valueString + key;
    keyList.add(key);
    valueList.add(value);
    writer.append(Bytes.toBytes(key),Bytes.toBytes(value));
  }
  writer.close();
  fout.close();
  HFile.Reader reader=HFile.createReader(TEST_UTIL.getTestFileSystem(),ncTFile,cacheConf);
  reader.loadFileInfo();
  HFileScanner scanner=reader.getScanner(false,true);
  scanner.seekTo();
  for (int i=0; i < keyList.size(); i++) {
    Integer key=keyList.get(i);
    String value=valueList.get(i);
    long start=System.nanoTime();
    scanner.seekTo(Bytes.toBytes(key));
    assertEquals(value,scanner.getValueString());
  }
  scanner.seekTo();
  for (int i=0; i < keyList.size(); i+=10) {
    Integer key=keyList.get(i);
    String value=valueList.get(i);
    long start=System.nanoTime();
    scanner.reseekTo(Bytes.toBytes(key));
    assertEquals("i is " + i,value,scanner.getValueString());
  }
  reader.close();
}
