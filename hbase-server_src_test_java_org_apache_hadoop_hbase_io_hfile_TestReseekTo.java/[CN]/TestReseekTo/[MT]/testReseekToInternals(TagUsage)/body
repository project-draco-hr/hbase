{
  Path ncTFile=new Path(TEST_UTIL.getDataTestDir(),"basic.hfile");
  FSDataOutputStream fout=TEST_UTIL.getTestFileSystem().create(ncTFile);
  if (tagUsage != TagUsage.NO_TAG) {
    TEST_UTIL.getConfiguration().setInt("hfile.format.version",3);
  }
  CacheConfig cacheConf=new CacheConfig(TEST_UTIL.getConfiguration());
  HFileContext context=new HFileContextBuilder().withBlockSize(4000).build();
  HFile.Writer writer=HFile.getWriterFactory(TEST_UTIL.getConfiguration(),cacheConf).withOutputStream(fout).withFileContext(context).withComparator(KeyValue.COMPARATOR).create();
  int numberOfKeys=1000;
  String valueString="Value";
  List<Integer> keyList=new ArrayList<Integer>();
  List<String> valueList=new ArrayList<String>();
  for (int key=0; key < numberOfKeys; key++) {
    String value=valueString + key;
    KeyValue kv;
    keyList.add(key);
    valueList.add(value);
    if (tagUsage == TagUsage.NO_TAG) {
      kv=new KeyValue(Bytes.toBytes(key),Bytes.toBytes("family"),Bytes.toBytes("qual"),Bytes.toBytes(value));
      writer.append(kv);
    }
 else     if (tagUsage == TagUsage.ONLY_TAG) {
      Tag t=new Tag((byte)1,"myTag1");
      Tag[] tags=new Tag[1];
      tags[0]=t;
      kv=new KeyValue(Bytes.toBytes(key),Bytes.toBytes("family"),Bytes.toBytes("qual"),HConstants.LATEST_TIMESTAMP,Bytes.toBytes(value),tags);
      writer.append(kv);
    }
 else {
      if (key % 4 == 0) {
        Tag t=new Tag((byte)1,"myTag1");
        Tag[] tags=new Tag[1];
        tags[0]=t;
        kv=new KeyValue(Bytes.toBytes(key),Bytes.toBytes("family"),Bytes.toBytes("qual"),HConstants.LATEST_TIMESTAMP,Bytes.toBytes(value),tags);
        writer.append(kv);
      }
 else {
        kv=new KeyValue(Bytes.toBytes(key),Bytes.toBytes("family"),Bytes.toBytes("qual"),HConstants.LATEST_TIMESTAMP,Bytes.toBytes(value));
        writer.append(kv);
      }
    }
  }
  writer.close();
  fout.close();
  HFile.Reader reader=HFile.createReader(TEST_UTIL.getTestFileSystem(),ncTFile,cacheConf,TEST_UTIL.getConfiguration());
  reader.loadFileInfo();
  HFileScanner scanner=reader.getScanner(false,true);
  scanner.seekTo();
  for (int i=0; i < keyList.size(); i++) {
    Integer key=keyList.get(i);
    String value=valueList.get(i);
    long start=System.nanoTime();
    scanner.seekTo(new KeyValue(Bytes.toBytes(key),Bytes.toBytes("family"),Bytes.toBytes("qual"),Bytes.toBytes(value)));
    assertEquals(value,scanner.getValueString());
  }
  scanner.seekTo();
  for (int i=0; i < keyList.size(); i+=10) {
    Integer key=keyList.get(i);
    String value=valueList.get(i);
    long start=System.nanoTime();
    scanner.reseekTo(new KeyValue(Bytes.toBytes(key),Bytes.toBytes("family"),Bytes.toBytes("qual"),Bytes.toBytes(value)));
    assertEquals("i is " + i,value,scanner.getValueString());
  }
  reader.close();
}
