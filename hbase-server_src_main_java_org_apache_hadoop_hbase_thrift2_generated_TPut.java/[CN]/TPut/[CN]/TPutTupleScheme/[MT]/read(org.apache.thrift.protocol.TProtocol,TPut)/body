{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.row=iprot.readBinary();
  struct.setRowIsSet(true);
{
    org.apache.thrift.protocol.TList _list37=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.columnValues=new ArrayList<TColumnValue>(_list37.size);
    for (int _i38=0; _i38 < _list37.size; ++_i38) {
      TColumnValue _elem39;
      _elem39=new TColumnValue();
      _elem39.read(iprot);
      struct.columnValues.add(_elem39);
    }
  }
  struct.setColumnValuesIsSet(true);
  BitSet incoming=iprot.readBitSet(3);
  if (incoming.get(0)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(1)) {
    struct.writeToWal=iprot.readBool();
    struct.setWriteToWalIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TMap _map40=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map40.size);
      for (int _i41=0; _i41 < _map40.size; ++_i41) {
        ByteBuffer _key42;
        ByteBuffer _val43;
        _key42=iprot.readBinary();
        _val43=iprot.readBinary();
        struct.attributes.put(_key42,_val43);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
