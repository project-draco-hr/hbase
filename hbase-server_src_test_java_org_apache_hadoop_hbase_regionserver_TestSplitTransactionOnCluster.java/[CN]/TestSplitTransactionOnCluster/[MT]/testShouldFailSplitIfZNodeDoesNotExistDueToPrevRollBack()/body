{
  final TableName tableName=TableName.valueOf("testShouldFailSplitIfZNodeDoesNotExistDueToPrevRollBack");
  try {
    HTable t=createTableAndWait(tableName.getName(),Bytes.toBytes("cf"));
    final List<HRegion> regions=cluster.getRegions(tableName);
    HRegionInfo hri=getAndCheckSingleTableRegion(regions);
    int regionServerIndex=cluster.getServerWith(regions.get(0).getRegionName());
    final HRegionServer regionServer=cluster.getRegionServer(regionServerIndex);
    insertData(tableName.getName(),admin,t);
    t.close();
    this.admin.setBalancerRunning(false,true);
    cluster.getMaster().setCatalogJanitorEnabled(false);
    final HRegion region=findSplittableRegion(regions);
    assertTrue("not able to find a splittable region",region != null);
    new Thread(){
      public void run(){
        SplitTransaction st=null;
        st=new MockedSplitTransaction(region,Bytes.toBytes("row2"));
        try {
          st.prepare();
          st.execute(regionServer,regionServer);
        }
 catch (        IOException e) {
        }
      }
    }
.start();
    for (int i=0; !callRollBack && i < 100; i++) {
      Thread.sleep(100);
    }
    assertTrue("Waited too long for rollback",callRollBack);
    SplitTransaction st=new MockedSplitTransaction(region,Bytes.toBytes("row3"));
    try {
      secondSplit=true;
      st.prepare();
      st.execute(regionServer,regionServer);
    }
 catch (    IOException e) {
      LOG.debug("Rollback started :" + e.getMessage());
      st.rollback(regionServer,regionServer);
    }
    for (int i=0; !firstSplitCompleted && i < 100; i++) {
      Thread.sleep(100);
    }
    assertTrue("fist split did not complete",firstSplitCompleted);
    RegionStates regionStates=cluster.getMaster().getAssignmentManager().getRegionStates();
    Map<String,RegionState> rit=regionStates.getRegionsInTransition();
    for (int i=0; rit.containsKey(hri.getTable()) && i < 100; i++) {
      Thread.sleep(100);
    }
    assertFalse("region still in transition",rit.containsKey(rit.containsKey(hri.getTable())));
    List<HRegion> onlineRegions=regionServer.getOnlineRegions(tableName);
    assertEquals("The parent region should be splitted",2,onlineRegions.size());
    List<HRegionInfo> regionsOfTable=cluster.getMaster().getAssignmentManager().getRegionStates().getRegionsOfTable(tableName);
    assertEquals("No of regions in master",2,regionsOfTable.size());
  }
  finally {
    admin.setBalancerRunning(true,false);
    secondSplit=false;
    firstSplitCompleted=false;
    callRollBack=false;
    cluster.getMaster().setCatalogJanitorEnabled(true);
    TESTING_UTIL.deleteTable(tableName);
  }
}
