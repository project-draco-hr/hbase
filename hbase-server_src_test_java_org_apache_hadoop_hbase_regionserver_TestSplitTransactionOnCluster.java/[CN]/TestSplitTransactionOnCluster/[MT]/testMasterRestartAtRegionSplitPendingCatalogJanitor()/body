{
  final TableName tableName=TableName.valueOf("testMasterRestartAtRegionSplitPendingCatalogJanitor");
  Table t=createTableAndWait(tableName,HConstants.CATALOG_FAMILY);
  List<HRegion> regions=cluster.getRegions(tableName);
  HRegionInfo hri=getAndCheckSingleTableRegion(regions);
  int tableRegionIndex=ensureTableRegionNotOnSameServerAsMeta(admin,hri);
  this.admin.setBalancerRunning(false,true);
  cluster.getMaster().setCatalogJanitorEnabled(false);
  ZooKeeperWatcher zkw=new ZooKeeperWatcher(t.getConfiguration(),"testMasterRestartAtRegionSplitPendingCatalogJanitor",new UselessTestAbortable());
  try {
    TESTING_UTIL.loadTable(t,HConstants.CATALOG_FAMILY,false);
    HRegionServer server=cluster.getRegionServer(tableRegionIndex);
    printOutRegions(server,"Initial regions: ");
    this.admin.split(hri.getRegionNameAsString());
    checkAndGetDaughters(tableName);
    HMaster master=abortAndWaitForMaster();
    this.admin=TESTING_UTIL.getHBaseAdmin();
    hri.setOffline(true);
    hri.setSplit(true);
    RegionStates regionStates=master.getAssignmentManager().getRegionStates();
    assertTrue("Split parent should be in SPLIT state",regionStates.isRegionInState(hri,State.SPLIT));
    ServerName regionServerOfRegion=regionStates.getRegionServerOfRegion(hri);
    assertTrue(regionServerOfRegion == null);
  }
  finally {
    this.admin.setBalancerRunning(true,false);
    cluster.getMaster().setCatalogJanitorEnabled(true);
    t.close();
    zkw.close();
  }
}
