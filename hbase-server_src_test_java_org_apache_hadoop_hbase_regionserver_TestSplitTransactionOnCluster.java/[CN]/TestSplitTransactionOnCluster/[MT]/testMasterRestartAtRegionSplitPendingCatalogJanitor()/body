{
  final byte[] tableName=Bytes.toBytes("testMasterRestartAtRegionSplitPendingCatalogJanitor");
  HTable t=TESTING_UTIL.createTable(tableName,HConstants.CATALOG_FAMILY);
  List<HRegion> regions=cluster.getRegions(tableName);
  HRegionInfo hri=getAndCheckSingleTableRegion(regions);
  int tableRegionIndex=ensureTableRegionNotOnSameServerAsMeta(admin,hri);
  this.admin.setBalancerRunning(false,true);
  cluster.getMaster().setCatalogJanitorEnabled(false);
  try {
    TESTING_UTIL.loadTable(t,HConstants.CATALOG_FAMILY);
    HRegionServer server=cluster.getRegionServer(tableRegionIndex);
    printOutRegions(server,"Initial regions: ");
    this.admin.split(hri.getRegionNameAsString());
    while (!(cluster.getRegions(tableName).size() >= 2)) {
      LOG.debug("Waiting on region to split");
      Thread.sleep(100);
    }
    List<HRegion> daughters=cluster.getRegions(tableName);
    assertTrue(daughters.size() >= 2);
    String path=ZKAssign.getNodeName(t.getConnection().getZooKeeperWatcher(),hri.getEncodedName());
    Stat stats=t.getConnection().getZooKeeperWatcher().getRecoverableZooKeeper().exists(path,false);
    LOG.info("EPHEMERAL NODE BEFORE SERVER ABORT, path=" + path + ", stats="+ stats);
    String node=ZKAssign.getNodeName(t.getConnection().getZooKeeperWatcher(),hri.getEncodedName());
    Stat stat=new Stat();
    byte[] data=ZKUtil.getDataNoWatch(t.getConnection().getZooKeeperWatcher(),node,stat);
    while (data != null) {
      Thread.sleep(1000);
      data=ZKUtil.getDataNoWatch(t.getConnection().getZooKeeperWatcher(),node,stat);
    }
    MockMasterWithoutCatalogJanitor master=abortAndWaitForMaster();
    this.admin=new HBaseAdmin(TESTING_UTIL.getConfiguration());
    hri.setOffline(true);
    hri.setSplit(true);
    ServerName regionServerOfRegion=master.getAssignmentManager().getRegionServerOfRegion(hri);
    assertTrue(regionServerOfRegion == null);
  }
  finally {
    SplitRegionHandler.TEST_SKIP=false;
    this.admin.setBalancerRunning(true,false);
    cluster.getMaster().setCatalogJanitorEnabled(true);
  }
}
