{
  final byte[] tableName=Bytes.toBytes("testSplitBeforeSettingSplittingInZK");
  try {
    createTableAndWait(tableName,Bytes.toBytes("cf"));
    List<HRegion> regions=awaitTableRegions(tableName);
    assertTrue("Table not online",cluster.getRegions(tableName).size() != 0);
    int regionServerIndex=cluster.getServerWith(regions.get(0).getRegionName());
    HRegionServer regionServer=cluster.getRegionServer(regionServerIndex);
    final HRegion region=findSplittableRegion(regions);
    assertTrue("not able to find a splittable region",region != null);
    SplitTransaction st=new MockedSplitTransaction(region,Bytes.toBytes("row2")){
      @Override public PairOfSameType<HRegion> stepsBeforePONR(      final Server server,      final RegionServerServices services,      boolean testing) throws IOException {
        throw new SplittingNodeCreationFailedException();
      }
    }
;
    String node=ZKAssign.getNodeName(regionServer.getZooKeeper(),region.getRegionInfo().getEncodedName());
    regionServer.getZooKeeper().sync(node);
    for (int i=0; i < 100; i++) {
      if (ZKUtil.checkExists(regionServer.getZooKeeper(),node) != -1) {
        Thread.sleep(100);
      }
    }
    try {
      st.prepare();
      st.execute(regionServer,regionServer);
    }
 catch (    IOException e) {
      assertTrue("Should be instance of CreateSplittingNodeFailedException",e instanceof SplittingNodeCreationFailedException);
      node=ZKAssign.getNodeName(regionServer.getZooKeeper(),region.getRegionInfo().getEncodedName());
{
        assertTrue(ZKUtil.checkExists(regionServer.getZooKeeper(),node) == -1);
      }
      assertTrue(st.rollback(regionServer,regionServer));
      assertTrue(ZKUtil.checkExists(regionServer.getZooKeeper(),node) == -1);
    }
  }
  finally {
    TESTING_UTIL.deleteTable(tableName);
  }
}
