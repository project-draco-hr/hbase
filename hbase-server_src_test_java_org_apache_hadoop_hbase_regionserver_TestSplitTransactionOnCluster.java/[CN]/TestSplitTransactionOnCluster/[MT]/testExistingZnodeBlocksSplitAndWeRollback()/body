{
  final byte[] tableName=Bytes.toBytes("testExistingZnodeBlocksSplitAndWeRollback");
  HTable t=createTableAndWait(tableName,HConstants.CATALOG_FAMILY);
  List<HRegion> regions=cluster.getRegions(tableName);
  HRegionInfo hri=getAndCheckSingleTableRegion(regions);
  int tableRegionIndex=ensureTableRegionNotOnSameServerAsMeta(admin,hri);
  this.admin.setBalancerRunning(false,true);
  cluster.getMaster().setCatalogJanitorEnabled(false);
  try {
    TESTING_UTIL.loadTable(t,HConstants.CATALOG_FAMILY,false);
    HRegionServer server=cluster.getRegionServer(tableRegionIndex);
    printOutRegions(server,"Initial regions: ");
    int regionCount=ProtobufUtil.getOnlineRegions(server.getRSRpcServices()).size();
    ServerName fakedServer=ServerName.valueOf("any.old.server",1234,-1);
    ZKAssign.createNodeClosing(TESTING_UTIL.getZooKeeperWatcher(),hri,fakedServer);
    this.admin.split(hri.getRegionNameAsString());
    this.admin.split(hri.getRegionNameAsString());
    this.admin.split(hri.getRegionNameAsString());
    for (int i=0; i < 10; i++) {
      Thread.sleep(100);
      assertEquals(regionCount,ProtobufUtil.getOnlineRegions(server.getRSRpcServices()).size());
    }
    ZKAssign.deleteClosingNode(TESTING_UTIL.getZooKeeperWatcher(),hri,fakedServer);
    split(hri,server,regionCount);
    checkAndGetDaughters(tableName);
  }
  finally {
    admin.setBalancerRunning(true,false);
    cluster.getMaster().setCatalogJanitorEnabled(true);
    t.close();
  }
}
