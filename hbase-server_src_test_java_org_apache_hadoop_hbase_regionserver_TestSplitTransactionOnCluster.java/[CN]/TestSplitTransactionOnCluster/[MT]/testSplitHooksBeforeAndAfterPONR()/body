{
  String firstTable="testSplitHooksBeforeAndAfterPONR_1";
  String secondTable="testSplitHooksBeforeAndAfterPONR_2";
  HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(firstTable));
  desc.addCoprocessor(MockedRegionObserver.class.getName());
  HColumnDescriptor hcd=new HColumnDescriptor("cf");
  desc.addFamily(hcd);
  admin.createTable(desc);
  desc=new HTableDescriptor(TableName.valueOf(secondTable));
  hcd=new HColumnDescriptor("cf");
  desc.addFamily(hcd);
  admin.createTable(desc);
  List<HRegion> firstTableregions=cluster.getRegions(TableName.valueOf(firstTable));
  List<HRegion> secondTableRegions=cluster.getRegions(TableName.valueOf(secondTable));
  ServerName serverName=cluster.getServerHoldingRegion(firstTableregions.get(0).getRegionName());
  admin.move(secondTableRegions.get(0).getRegionInfo().getEncodedNameAsBytes(),Bytes.toBytes(serverName.getServerName()));
  Table table1=null;
  Table table2=null;
  try {
    table1=new HTable(TESTING_UTIL.getConfiguration(),firstTable);
    table2=new HTable(TESTING_UTIL.getConfiguration(),firstTable);
    insertData(Bytes.toBytes(firstTable),admin,table1);
    insertData(Bytes.toBytes(secondTable),admin,table2);
    admin.split(Bytes.toBytes(firstTable),"row2".getBytes());
    firstTableregions=cluster.getRegions(Bytes.toBytes(firstTable));
    while (firstTableregions.size() != 2) {
      Thread.sleep(1000);
      firstTableregions=cluster.getRegions(Bytes.toBytes(firstTable));
    }
    assertEquals("Number of regions after split should be 2.",2,firstTableregions.size());
    secondTableRegions=cluster.getRegions(Bytes.toBytes(secondTable));
    assertEquals("Number of regions after split should be 2.",2,secondTableRegions.size());
  }
  finally {
    if (table1 != null) {
      table1.close();
    }
    if (table2 != null) {
      table2.close();
    }
    TESTING_UTIL.deleteTable(firstTable);
    TESTING_UTIL.deleteTable(secondTable);
  }
}
