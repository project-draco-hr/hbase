{
  if (timestamp <= familyStamp) {
    return true;
  }
  if (this.delete == null) {
    return false;
  }
  int ret=Bytes.compareTo(buffer,qualifierOffset,qualifierLength,this.delete.buffer,this.delete.qualifierOffset,this.delete.qualifierLength);
  if (ret <= -1) {
    return false;
  }
 else   if (ret >= 1) {
    if (this.iterator.hasNext()) {
      this.delete=this.iterator.next();
    }
 else {
      this.delete=null;
      return false;
    }
    return isDeleted(buffer,qualifierOffset,qualifierLength,timestamp);
  }
  if (timestamp > this.delete.timestamp) {
    return false;
  }
switch (KeyValue.Type.codeToType(this.delete.type)) {
case Delete:
    boolean equal=timestamp == this.delete.timestamp;
  if (this.iterator.hasNext()) {
    this.delete=this.iterator.next();
  }
 else {
    this.delete=null;
  }
if (equal) {
  return true;
}
return isDeleted(buffer,qualifierOffset,qualifierLength,timestamp);
case DeleteColumn:
return true;
}
return false;
}
