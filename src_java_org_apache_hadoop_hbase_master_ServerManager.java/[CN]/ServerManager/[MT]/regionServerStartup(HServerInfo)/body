{
  HServerInfo info=new HServerInfo(serverInfo);
  String serverName=HServerInfo.getServerName(info);
  if (serversToServerInfo.containsKey(serverName) || deadServers.contains(serverName)) {
    LOG.debug("Server start was rejected: " + serverInfo);
    LOG.debug("serversToServerInfo.containsKey: " + serversToServerInfo.containsKey(serverName));
    LOG.debug("deadServers.contains: " + deadServers.contains(serverName));
    throw new Leases.LeaseStillHeldException(serverName);
  }
  LOG.info("Received start message from: " + serverName);
  HServerLoad load=serversToLoad.remove(serverName);
  if (load != null) {
synchronized (loadToServers) {
      Set<String> servers=loadToServers.get(load);
      if (servers != null) {
        servers.remove(serverName);
        if (servers.size() > 0)         loadToServers.put(load,servers);
 else         loadToServers.remove(load);
      }
    }
  }
  HServerInfo storedInfo=serversToServerInfo.remove(serverName);
  if (storedInfo != null && !master.closed.get()) {
    HServerAddress root=master.getRootRegionLocation();
    try {
      master.toDoQueue.put(new ProcessServerShutdown(master,storedInfo));
    }
 catch (    InterruptedException e) {
      LOG.error("Insertion into toDoQueue was interrupted",e);
    }
  }
  recordNewServer(info);
}
