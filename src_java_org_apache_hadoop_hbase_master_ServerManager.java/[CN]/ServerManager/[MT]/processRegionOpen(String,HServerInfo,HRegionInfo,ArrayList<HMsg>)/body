{
  boolean duplicateAssignment=false;
synchronized (master.regionManager) {
    if (!master.regionManager.isUnassigned(region) && !master.regionManager.isAssigned(region.getRegionName())) {
      if (region.isRootRegion()) {
        HServerAddress rootServer=master.getRootRegionLocation();
        if (rootServer != null) {
          if (rootServer.toString().compareTo(serverName) == 0) {
            return;
          }
          duplicateAssignment=true;
        }
      }
 else {
        if (master.regionManager.isPending(region.getRegionName())) {
          return;
        }
        duplicateAssignment=true;
      }
    }
    if (duplicateAssignment) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("region server " + serverInfo.getServerAddress().toString() + " should not have opened region "+ region.getRegionName());
      }
      returnMsgs.add(new HMsg(HMsg.Type.MSG_REGION_CLOSE_WITHOUT_REPORT,region,"Duplicate assignment".getBytes()));
    }
 else {
      if (region.isRootRegion()) {
        master.regionManager.removeRegion(region);
        HServerAddress rootServer=serverInfo.getServerAddress();
        master.connection.setRootRegionLocation(new HRegionLocation(region,rootServer));
        master.regionManager.setRootRegionLocation(rootServer);
      }
 else {
        master.regionManager.setPending(region.getRegionName());
        try {
          master.toDoQueue.put(new ProcessRegionOpen(master,serverInfo,region));
        }
 catch (        InterruptedException e) {
          throw new RuntimeException("Putting into toDoQueue was interrupted.",e);
        }
      }
    }
  }
}
