{
  Set<HStoreKey> set=new TreeSet<HStoreKey>(new HStoreKey.HStoreKeyComparator());
  HStoreKey[] keys={new HStoreKey("aaaaa,\u0000\u0000,2",getName(),2),new HStoreKey("aaaaa,\u0001,3",getName(),3),new HStoreKey("aaaaa,,1",getName(),1),new HStoreKey("aaaaa,\u1000,5",getName(),5),new HStoreKey("aaaaa,a,4",getName(),4),new HStoreKey("a,a,0",getName(),0)};
  for (int i=0; i < keys.length; i++) {
    set.add(keys[i]);
  }
  boolean assertion=false;
  int count=0;
  try {
    for (    HStoreKey k : set) {
      assertTrue(count++ == k.getTimestamp());
    }
  }
 catch (  junit.framework.AssertionFailedError e) {
    assertion=true;
  }
  assertTrue(assertion);
  set=new TreeSet<HStoreKey>(new HStoreKey.HStoreKeyMetaComparator());
  for (int i=0; i < keys.length; i++) {
    set.add(keys[i]);
  }
  count=0;
  for (  HStoreKey k : set) {
    assertTrue(count++ == k.getTimestamp());
  }
  HStoreKey[] rootKeys={new HStoreKey(".META.,aaaaa,\u0000\u0000,0,2",getName(),2),new HStoreKey(".META.,aaaaa,\u0001,0,3",getName(),3),new HStoreKey(".META.,aaaaa,,0,1",getName(),1),new HStoreKey(".META.,aaaaa,\u1000,0,5",getName(),5),new HStoreKey(".META.,aaaaa,a,0,4",getName(),4),new HStoreKey(".META.,,0",getName(),0)};
  set=new TreeSet<HStoreKey>(new HStoreKey.HStoreKeyMetaComparator());
  for (int i=0; i < keys.length; i++) {
    set.add(rootKeys[i]);
  }
  assertion=false;
  count=0;
  try {
    for (    HStoreKey k : set) {
      assertTrue(count++ == k.getTimestamp());
    }
  }
 catch (  junit.framework.AssertionFailedError e) {
    assertion=true;
  }
  set=new TreeSet<HStoreKey>(new HStoreKey.HStoreKeyRootComparator());
  for (int i=0; i < keys.length; i++) {
    set.add(rootKeys[i]);
  }
  count=0;
  for (  HStoreKey k : set) {
    assertTrue(count++ == k.getTimestamp());
  }
}
