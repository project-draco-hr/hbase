{
  final AggregateArgument requestArg=validateArgAndGetPB(scan,ci);
class SumCallBack implements Batch.Callback<S> {
    S sumVal=null;
    public S getSumResult(){
      return sumVal;
    }
    @Override public synchronized void update(    byte[] region,    byte[] row,    S result){
      sumVal=ci.add(sumVal,result);
    }
  }
  SumCallBack sumCallBack=new SumCallBack();
  HTable table=null;
  try {
    table=new HTable(conf,tableName);
    table.coprocessorService(AggregateService.class,scan.getStartRow(),scan.getStopRow(),new Batch.Call<AggregateService,S>(){
      @Override public S call(      AggregateService instance) throws IOException {
        ServerRpcController controller=new ServerRpcController();
        BlockingRpcCallback<AggregateResponse> rpcCallback=new BlockingRpcCallback<AggregateResponse>();
        instance.getSum(controller,requestArg,rpcCallback);
        AggregateResponse response=rpcCallback.get();
        if (controller.failedOnException()) {
          throw controller.getFailedOn();
        }
        if (response.getFirstPartCount() == 0) {
          return null;
        }
        return ci.parseResponseAsPromotedType(getBytesFromResponse(response.getFirstPart(0)));
      }
    }
,sumCallBack);
  }
  finally {
    if (table != null) {
      table.close();
    }
  }
  return sumCallBack.getSumResult();
}
