{
  validateParameters(scan);
class RowNumCallback implements Batch.Callback<Long> {
    private final AtomicLong rowCountL=new AtomicLong(0);
    public long getRowNumCount(){
      return rowCountL.get();
    }
    @Override public void update(    byte[] region,    byte[] row,    Long result){
      rowCountL.addAndGet(result.longValue());
    }
  }
  RowNumCallback rowNum=new RowNumCallback();
  HTable table=null;
  try {
    table=new HTable(conf,tableName);
    table.coprocessorExec(AggregateProtocol.class,scan.getStartRow(),scan.getStopRow(),new Batch.Call<AggregateProtocol,Long>(){
      @Override public Long call(      AggregateProtocol instance) throws IOException {
        return instance.getRowNum(ci,scan);
      }
    }
,rowNum);
  }
  finally {
    if (table != null) {
      table.close();
    }
  }
  return rowNum.getRowNumCount();
}
