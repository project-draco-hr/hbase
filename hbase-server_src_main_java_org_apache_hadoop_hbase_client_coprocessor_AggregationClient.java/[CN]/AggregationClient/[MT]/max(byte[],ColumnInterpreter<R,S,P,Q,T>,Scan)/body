{
  final AggregateArgument requestArg=validateArgAndGetPB(scan,ci);
class MaxCallBack implements Batch.Callback<R> {
    R max=null;
    R getMax(){
      return max;
    }
    @Override public synchronized void update(    byte[] region,    byte[] row,    R result){
      max=(max == null || (result != null && ci.compare(max,result) < 0)) ? result : max;
    }
  }
  MaxCallBack aMaxCallBack=new MaxCallBack();
  HTable table=null;
  try {
    table=new HTable(conf,tableName);
    table.coprocessorService(AggregateService.class,scan.getStartRow(),scan.getStopRow(),new Batch.Call<AggregateService,R>(){
      @Override public R call(      AggregateService instance) throws IOException {
        ServerRpcController controller=new ServerRpcController();
        BlockingRpcCallback<AggregateResponse> rpcCallback=new BlockingRpcCallback<AggregateResponse>();
        instance.getMax(controller,requestArg,rpcCallback);
        AggregateResponse response=rpcCallback.get();
        if (controller.failedOnException()) {
          throw controller.getFailedOn();
        }
        if (response.getFirstPartCount() > 0) {
          ByteString b=response.getFirstPart(0);
          Q q=ProtobufUtil.getParsedGenericInstance(ci.getClass(),3,b);
          return ci.getCellValueFromProto(q);
        }
        return null;
      }
    }
,aMaxCallBack);
  }
  finally {
    if (table != null) {
      table.close();
    }
  }
  return aMaxCallBack.getMax();
}
