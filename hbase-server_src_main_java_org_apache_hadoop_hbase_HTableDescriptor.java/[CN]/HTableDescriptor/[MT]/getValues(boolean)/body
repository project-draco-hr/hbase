{
  StringBuilder s=new StringBuilder();
  Set<ImmutableBytesWritable> reservedKeys=new TreeSet<ImmutableBytesWritable>();
  Set<ImmutableBytesWritable> configKeys=new TreeSet<ImmutableBytesWritable>();
  for (  ImmutableBytesWritable k : values.keySet()) {
    if (k == null || k.get() == null)     continue;
    String key=Bytes.toString(k.get());
    if (!RESERVED_KEYWORDS.contains(k) && !key.startsWith("coprocessor$")) {
      configKeys.add(k);
      continue;
    }
    String value=Bytes.toString(values.get(k).get());
    if (key.equalsIgnoreCase(IS_ROOT) || key.equalsIgnoreCase(IS_META)) {
      if (Boolean.valueOf(value) == false)       continue;
    }
    if (printDefaults || !DEFAULT_VALUES.containsKey(key) || !DEFAULT_VALUES.get(key).equalsIgnoreCase(value)) {
      reservedKeys.add(k);
    }
  }
  if (reservedKeys.isEmpty() && configKeys.isEmpty())   return s;
  s.append(", {TABLE_ATTRIBUTES => {");
  boolean printCommaForAttr=false;
  for (  ImmutableBytesWritable k : reservedKeys) {
    String key=Bytes.toString(k.get());
    String value=Bytes.toString(values.get(k).get());
    if (printCommaForAttr)     s.append(", ");
    printCommaForAttr=true;
    s.append(key);
    s.append(" => ");
    s.append('\'').append(value).append('\'');
  }
  if (!configKeys.isEmpty()) {
    if (printCommaForAttr)     s.append(", ");
    printCommaForAttr=true;
    s.append(HConstants.CONFIG).append(" => ");
    s.append("{");
    boolean printCommaForCfg=false;
    for (    ImmutableBytesWritable k : configKeys) {
      String key=Bytes.toString(k.get());
      String value=Bytes.toString(values.get(k).get());
      if (printCommaForCfg)       s.append(", ");
      printCommaForCfg=true;
      s.append('\'').append(key).append('\'');
      s.append(" => ");
      s.append('\'').append(value).append('\'');
    }
    s.append("}");
  }
  s.append("}}");
  return s;
}
