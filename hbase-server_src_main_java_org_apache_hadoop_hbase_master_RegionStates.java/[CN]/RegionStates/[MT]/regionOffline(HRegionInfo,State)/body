{
  Preconditions.checkArgument(expectedState == null || RegionState.isNotUnassignableNotInTransition(expectedState),"Offlined region should be in state OFFLINE/SPLIT/MERGED/" + "SPLITTING_NEW/MERGING_NEW instead of " + expectedState);
  String regionName=hri.getEncodedName();
  RegionState oldState=regionStates.get(regionName);
  if (oldState == null) {
    LOG.warn("Offline region not in RegionStates: " + hri.getShortNameToLog());
  }
 else   if (LOG.isDebugEnabled()) {
    ServerName sn=oldState.getServerName();
    if (!oldState.isReadyToOffline()) {
      LOG.debug("Offline " + hri.getShortNameToLog() + " with current state="+ oldState.getState()+ ", expected state=OFFLINE/SPLIT/"+ "MERGED/SPLITTING_NEW/MERGING_NEW");
    }
    if (sn != null && oldState.isOffline()) {
      LOG.debug("Offline " + hri.getShortNameToLog() + " with current state=OFFLINE, assigned to server: "+ sn+ ", expected null");
    }
  }
  State newState=expectedState;
  if (newState == null)   newState=State.OFFLINE;
  updateRegionState(hri,newState);
  regionsInTransition.remove(regionName);
  ServerName oldServerName=regionAssignments.remove(hri);
  if (oldServerName != null) {
    LOG.info("Offlined " + hri.getShortNameToLog() + " from "+ oldServerName);
    Set<HRegionInfo> oldRegions=serverHoldings.get(oldServerName);
    oldRegions.remove(hri);
    if (oldRegions.isEmpty()) {
      serverHoldings.remove(oldServerName);
    }
  }
}
