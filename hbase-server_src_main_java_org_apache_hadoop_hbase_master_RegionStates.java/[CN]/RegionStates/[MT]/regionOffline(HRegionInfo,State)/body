{
  Preconditions.checkArgument(expectedState == null || expectedState == State.OFFLINE || expectedState == State.SPLIT || expectedState == State.MERGED,"Offlined region should be in state" + " OFFLINE/SPLIT/MERGED instead of " + expectedState);
  String regionName=hri.getEncodedName();
  RegionState oldState=regionStates.get(regionName);
  if (oldState == null) {
    LOG.warn("Offline region not in RegionStates: " + hri.getShortNameToLog());
  }
 else   if (LOG.isDebugEnabled()) {
    State state=oldState.getState();
    ServerName sn=oldState.getServerName();
    if (state != State.OFFLINE && state != State.SPLITTING && state != State.MERGING) {
      LOG.debug("Offline " + hri.getShortNameToLog() + " with current state="+ state+ ", expected state=OFFLINE/SPLITTING/MERGING");
    }
    if (sn != null && state == State.OFFLINE) {
      LOG.debug("Offline " + hri.getShortNameToLog() + " with current state=OFFLINE, assigned to server: "+ sn+ ", expected null");
    }
  }
  State newState=expectedState;
  if (newState == null)   newState=State.OFFLINE;
  updateRegionState(hri,newState);
  regionsInTransition.remove(regionName);
  ServerName oldServerName=regionAssignments.remove(hri);
  if (oldServerName != null) {
    LOG.info("Offlined " + hri.getShortNameToLog() + " from "+ oldServerName);
    serverHoldings.get(oldServerName).remove(hri);
  }
}
