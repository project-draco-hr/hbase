{
  List<HRegionInfo> rits=new ArrayList<HRegionInfo>();
  Set<HRegionInfo> assignedRegions=serverHoldings.get(sn);
  if (assignedRegions == null) {
    assignedRegions=new HashSet<HRegionInfo>();
  }
  Set<HRegionInfo> regionsToOffline=new HashSet<HRegionInfo>();
  for (  HRegionInfo region : assignedRegions) {
    if (isRegionOnline(region)) {
      regionsToOffline.add(region);
    }
 else {
      RegionState state=getRegionState(region);
      if (state.isSplitting() || state.isMerging()) {
        LOG.debug("Offline splitting/merging region " + state);
        try {
          ZKAssign.deleteNodeFailSilent(watcher,region);
          regionsToOffline.add(region);
        }
 catch (        KeeperException ke) {
          server.abort("Unexpected ZK exception deleting node " + region,ke);
        }
      }
    }
  }
  for (  HRegionInfo hri : regionsToOffline) {
    regionOffline(hri);
  }
  for (  RegionState state : regionsInTransition.values()) {
    HRegionInfo hri=state.getRegion();
    if (assignedRegions.contains(hri)) {
      LOG.info("Transitioning " + state + " will be handled by SSH for "+ sn);
    }
 else     if (sn.equals(state.getServerName())) {
      if (state.isPendingOpenOrOpening() || state.isFailedClose()) {
        LOG.info("Found opening region " + state + " to be reassigned by SSH for "+ sn);
        rits.add(hri);
      }
 else {
        LOG.warn("THIS SHOULD NOT HAPPEN: unexpected " + state);
      }
    }
  }
  this.notifyAll();
  return rits;
}
