{
  List<HRegionInfo> rits=new ArrayList<HRegionInfo>();
  Set<HRegionInfo> regionsToCleanIfNoMetaEntry=new HashSet<HRegionInfo>();
  Set<HRegionInfo> regionsToOffline=new HashSet<HRegionInfo>();
synchronized (this) {
    Set<HRegionInfo> assignedRegions=serverHoldings.get(sn);
    if (assignedRegions == null) {
      assignedRegions=new HashSet<HRegionInfo>();
    }
    for (    HRegionInfo region : assignedRegions) {
      if (isRegionOnline(region)) {
        regionsToOffline.add(region);
      }
 else       if (isRegionInState(region,State.SPLITTING,State.MERGING)) {
        LOG.debug("Offline splitting/merging region " + getRegionState(region));
        regionsToOffline.add(region);
      }
    }
    for (    RegionState state : regionsInTransition.values()) {
      HRegionInfo hri=state.getRegion();
      if (assignedRegions.contains(hri)) {
        LOG.info("Transitioning " + state + " will be handled by ServerCrashProcedure for "+ sn);
      }
 else       if (sn.equals(state.getServerName())) {
        if (isOneOfStates(state,State.OPENING,State.PENDING_OPEN,State.FAILED_OPEN,State.FAILED_CLOSE,State.OFFLINE)) {
          LOG.info("Found region in " + state + " to be reassigned by ServerCrashProcedure for "+ sn);
          rits.add(hri);
        }
 else         if (isOneOfStates(state,State.SPLITTING_NEW)) {
          regionsToCleanIfNoMetaEntry.add(state.getRegion());
        }
 else {
          LOG.warn("THIS SHOULD NOT HAPPEN: unexpected " + state);
        }
      }
    }
    this.notifyAll();
  }
  for (  HRegionInfo hri : regionsToOffline) {
    regionOffline(hri);
  }
  cleanIfNoMetaEntry(regionsToCleanIfNoMetaEntry);
  return rits;
}
