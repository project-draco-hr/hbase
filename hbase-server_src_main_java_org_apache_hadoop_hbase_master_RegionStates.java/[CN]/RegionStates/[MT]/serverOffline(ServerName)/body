{
  List<HRegionInfo> rits=new ArrayList<HRegionInfo>();
  Set<HRegionInfo> assignedRegions=serverHoldings.get(sn);
  if (assignedRegions == null) {
    assignedRegions=new HashSet<HRegionInfo>();
  }
  for (  HRegionInfo region : assignedRegions) {
    regionAssignments.remove(region);
  }
  for (  RegionState state : regionsInTransition.values()) {
    HRegionInfo hri=state.getRegion();
    if (assignedRegions.contains(hri)) {
      LOG.info("Transitioning region " + state + " will be handled by SSH for "+ sn);
    }
 else     if (sn.equals(state.getServerName())) {
      if (state.isPendingOpen() || state.isOpening()) {
        LOG.info("Found opening region " + state + " to be reassigned by SSH for "+ sn);
        rits.add(hri);
      }
 else {
        LOG.warn("THIS SHOULD NOT HAPPEN: unexpected state " + state + " of region in transition on server "+ sn);
      }
    }
  }
  assignedRegions.clear();
  this.notifyAll();
  return rits;
}
