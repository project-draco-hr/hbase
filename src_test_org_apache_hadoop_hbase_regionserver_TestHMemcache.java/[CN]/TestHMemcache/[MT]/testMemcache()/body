{
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    byte[] row=Bytes.toBytes("row_" + k);
    KeyValue key=new KeyValue(row,CONTENTS_BASIC,System.currentTimeMillis(),(CONTENTSTR + k).getBytes(HConstants.UTF8_ENCODING));
    hmemcache.add(key);
    key=new KeyValue(row,Bytes.toBytes(ANCHORNUM + k),System.currentTimeMillis(),(ANCHORSTR + k).getBytes(HConstants.UTF8_ENCODING));
    hmemcache.add(key);
  }
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    List<KeyValue> results;
    byte[] row=Bytes.toBytes("row_" + k);
    KeyValue key=new KeyValue(row,CONTENTS_BASIC,Long.MAX_VALUE);
    results=hmemcache.get(key,1);
    assertNotNull("no data for " + key.toString(),results);
    assertEquals(1,results.size());
    KeyValue kv=results.get(0);
    String bodystr=Bytes.toString(kv.getBuffer(),kv.getValueOffset(),kv.getValueLength());
    String teststr=CONTENTSTR + k;
    assertTrue("Incorrect value for key: (" + key.toString() + "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
    key=new KeyValue(row,Bytes.toBytes(ANCHORNUM + k),Long.MAX_VALUE);
    results=hmemcache.get(key,1);
    assertNotNull("no data for " + key.toString(),results);
    assertEquals(1,results.size());
    kv=results.get(0);
    bodystr=Bytes.toString(kv.getBuffer(),kv.getValueOffset(),kv.getValueLength());
    teststr=ANCHORSTR + k;
    assertTrue("Incorrect value for key: (" + key.toString() + "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
  }
}
