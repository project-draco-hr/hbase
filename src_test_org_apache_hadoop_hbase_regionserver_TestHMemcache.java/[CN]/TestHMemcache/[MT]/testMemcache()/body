{
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    Text row=new Text("row_" + k);
    HStoreKey key=new HStoreKey(row,CONTENTS_BASIC,System.currentTimeMillis());
    hmemcache.add(key,(CONTENTSTR + k).getBytes(HConstants.UTF8_ENCODING));
    key=new HStoreKey(row,new Text(ANCHORNUM + k),System.currentTimeMillis());
    hmemcache.add(key,(ANCHORSTR + k).getBytes(HConstants.UTF8_ENCODING));
  }
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    List<Cell> results;
    Text row=new Text("row_" + k);
    HStoreKey key=new HStoreKey(row,CONTENTS_BASIC,Long.MAX_VALUE);
    results=hmemcache.get(key,1);
    assertNotNull("no data for " + key.toString(),results);
    assertEquals(1,results.size());
    String bodystr=new String(results.get(0).getValue(),HConstants.UTF8_ENCODING);
    String teststr=CONTENTSTR + k;
    assertTrue("Incorrect value for key: (" + key.toString() + "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
    key=new HStoreKey(row,new Text(ANCHORNUM + k),Long.MAX_VALUE);
    results=hmemcache.get(key,1);
    assertNotNull("no data for " + key.toString(),results);
    assertEquals(1,results.size());
    bodystr=new String(results.get(0).getValue(),HConstants.UTF8_ENCODING);
    teststr=ANCHORSTR + k;
    assertTrue("Incorrect value for key: (" + key.toString() + "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",teststr.compareTo(bodystr) == 0);
  }
}
