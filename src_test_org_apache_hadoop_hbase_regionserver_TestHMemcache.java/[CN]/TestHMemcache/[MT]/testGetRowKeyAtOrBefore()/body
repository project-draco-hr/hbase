{
  byte[] t10=Bytes.toBytes("010");
  byte[] t20=Bytes.toBytes("020");
  byte[] t30=Bytes.toBytes("030");
  byte[] t35=Bytes.toBytes("035");
  byte[] t40=Bytes.toBytes("040");
  hmemcache.add(getHSKForRow(t10),"t10 bytes".getBytes());
  hmemcache.add(getHSKForRow(t20),"t20 bytes".getBytes());
  hmemcache.add(getHSKForRow(t30),"t30 bytes".getBytes());
  hmemcache.add(getHSKForRow(t35),HLogEdit.deleteBytes.get());
  hmemcache.add(getHSKForRow(t40),"t40 bytes".getBytes());
  SortedMap<HStoreKey,Long> results=null;
  results=new TreeMap<HStoreKey,Long>();
  byte[] t15=Bytes.toBytes("015");
  hmemcache.getRowKeyAtOrBefore(t15,results);
  assertEquals(t10,results.lastKey().getRow());
  results=new TreeMap<HStoreKey,Long>();
  hmemcache.getRowKeyAtOrBefore(t20,results);
  assertEquals(t20,results.lastKey().getRow());
  results=new TreeMap<HStoreKey,Long>();
  byte[] t38=Bytes.toBytes("038");
  hmemcache.getRowKeyAtOrBefore(t38,results);
  assertEquals(t30,results.lastKey().getRow());
  results=new TreeMap<HStoreKey,Long>();
  byte[] t50=Bytes.toBytes("050");
  hmemcache.getRowKeyAtOrBefore(t50,results);
  assertEquals(t40,results.lastKey().getRow());
}
