{
  if (entry == null) {
    return new ArrayList<MutationReplay>();
  }
  long replaySeqId=(entry.getKey().hasOrigSequenceNumber()) ? entry.getKey().getOrigSequenceNumber() : entry.getKey().getLogSequenceNumber();
  int count=entry.getAssociatedCellCount();
  List<MutationReplay> mutations=new ArrayList<MutationReplay>();
  Cell previousCell=null;
  Mutation m=null;
  HLogKey key=null;
  WALEdit val=null;
  if (logEntry != null)   val=new WALEdit();
  for (int i=0; i < count; i++) {
    if (!cells.advance()) {
      throw new ArrayIndexOutOfBoundsException("Expected=" + count + ", index="+ i);
    }
    Cell cell=cells.current();
    if (val != null)     val.add(cell);
    boolean isNewRowOrType=previousCell == null || previousCell.getTypeByte() != cell.getTypeByte() || !CellUtil.matchingRow(previousCell,cell);
    if (isNewRowOrType) {
      if (CellUtil.isDelete(cell)) {
        m=new Delete(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength());
        mutations.add(new MutationReplay(MutationType.DELETE,m,HConstants.NO_NONCE,HConstants.NO_NONCE));
      }
 else {
        m=new Put(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength());
        long nonceGroup=entry.getKey().hasNonceGroup() ? entry.getKey().getNonceGroup() : HConstants.NO_NONCE;
        long nonce=entry.getKey().hasNonce() ? entry.getKey().getNonce() : HConstants.NO_NONCE;
        mutations.add(new MutationReplay(MutationType.PUT,m,nonceGroup,nonce));
      }
    }
    if (CellUtil.isDelete(cell)) {
      ((Delete)m).addDeleteMarker(cell);
    }
 else {
      Cell tmpNewCell=cell;
      if (addLogReplayTag) {
        tmpNewCell=tagReplayLogSequenceNumber(replaySeqId,cell);
      }
      ((Put)m).add(tmpNewCell);
    }
    m.setDurability(durability);
    previousCell=cell;
  }
  if (logEntry != null) {
    WALKey walKey=entry.getKey();
    List<UUID> clusterIds=new ArrayList<UUID>(walKey.getClusterIdsCount());
    for (    HBaseProtos.UUID uuid : entry.getKey().getClusterIdsList()) {
      clusterIds.add(new UUID(uuid.getMostSigBits(),uuid.getLeastSigBits()));
    }
    key=new HLogKey(walKey.getEncodedRegionName().toByteArray(),TableName.valueOf(walKey.getTableName().toByteArray()),replaySeqId,walKey.getWriteTime(),clusterIds,walKey.getNonceGroup(),walKey.getNonce());
    logEntry.setFirst(key);
    logEntry.setSecond(val);
  }
  return mutations;
}
