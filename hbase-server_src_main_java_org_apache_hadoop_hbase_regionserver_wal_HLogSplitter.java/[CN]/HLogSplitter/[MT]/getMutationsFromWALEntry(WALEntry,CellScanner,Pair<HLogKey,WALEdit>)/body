{
  if (entry == null) {
    return new ArrayList<Pair<MutationType,Mutation>>();
  }
  int count=entry.getAssociatedCellCount();
  List<Pair<MutationType,Mutation>> mutations=new ArrayList<Pair<MutationType,Mutation>>();
  Cell previousCell=null;
  Mutation m=null;
  HLogKey key=null;
  WALEdit val=null;
  if (logEntry != null)   val=new WALEdit();
  for (int i=0; i < count; i++) {
    if (!cells.advance()) {
      throw new ArrayIndexOutOfBoundsException("Expected=" + count + ", index="+ i);
    }
    Cell cell=cells.current();
    if (val != null)     val.add(KeyValueUtil.ensureKeyValue(cell));
    boolean isNewRowOrType=previousCell == null || previousCell.getTypeByte() != cell.getTypeByte() || !CellUtil.matchingRow(previousCell,cell);
    if (isNewRowOrType) {
      if (CellUtil.isDelete(cell)) {
        m=new Delete(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength());
        mutations.add(new Pair<MutationType,Mutation>(MutationType.DELETE,m));
      }
 else {
        m=new Put(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength());
        mutations.add(new Pair<MutationType,Mutation>(MutationType.PUT,m));
      }
    }
    if (CellUtil.isDelete(cell)) {
      ((Delete)m).addDeleteMarker(KeyValueUtil.ensureKeyValue(cell));
    }
 else {
      ((Put)m).add(KeyValueUtil.ensureKeyValue(cell));
    }
    previousCell=cell;
  }
  if (logEntry != null) {
    WALKey walKey=entry.getKey();
    List<UUID> clusterIds=new ArrayList<UUID>(walKey.getClusterIdsCount());
    for (    HBaseProtos.UUID uuid : entry.getKey().getClusterIdsList()) {
      clusterIds.add(new UUID(uuid.getMostSigBits(),uuid.getLeastSigBits()));
    }
    key=new HLogKey(walKey.getEncodedRegionName().toByteArray(),TableName.valueOf(walKey.getTableName().toByteArray()),walKey.getLogSequenceNumber(),walKey.getWriteTime(),clusterIds);
    logEntry.setFirst(key);
    logEntry.setSecond(val);
  }
  return mutations;
}
