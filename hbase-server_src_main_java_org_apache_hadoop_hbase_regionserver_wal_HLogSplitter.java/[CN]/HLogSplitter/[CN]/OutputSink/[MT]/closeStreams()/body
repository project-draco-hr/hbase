{
  Preconditions.checkState(!closeAndCleanCompleted);
  final List<Path> paths=new ArrayList<Path>();
  final List<IOException> thrown=Lists.newArrayList();
  ThreadPoolExecutor closeThreadPool=Threads.getBoundedCachedThreadPool(numThreads,30L,TimeUnit.SECONDS,new ThreadFactory(){
    private int count=1;
    public Thread newThread(    Runnable r){
      Thread t=new Thread(r,"split-log-closeStream-" + count++);
      return t;
    }
  }
);
  CompletionService<Void> completionService=new ExecutorCompletionService<Void>(closeThreadPool);
  for (  final Map.Entry<byte[],WriterAndPath> logWritersEntry : logWriters.entrySet()) {
    completionService.submit(new Callable<Void>(){
      public Void call() throws Exception {
        WriterAndPath wap=logWritersEntry.getValue();
        try {
          wap.w.close();
        }
 catch (        IOException ioe) {
          LOG.error("Couldn't close log at " + wap.p,ioe);
          thrown.add(ioe);
          return null;
        }
        LOG.info("Closed path " + wap.p + " (wrote "+ wap.editsWritten+ " edits in "+ (wap.nanosSpent / 1000 / 1000)+ "ms)");
        Path dst=getCompletedRecoveredEditsFilePath(wap.p,regionMaximumEditLogSeqNum.get(logWritersEntry.getKey()));
        try {
          if (!dst.equals(wap.p) && fs.exists(dst)) {
            LOG.warn("Found existing old edits file. It could be the " + "result of a previous failed split attempt. Deleting " + dst + ", length="+ fs.getFileStatus(dst).getLen());
            if (!fs.delete(dst,false)) {
              LOG.warn("Failed deleting of old " + dst);
              throw new IOException("Failed deleting of old " + dst);
            }
          }
          if (fs.exists(wap.p)) {
            if (!fs.rename(wap.p,dst)) {
              throw new IOException("Failed renaming " + wap.p + " to "+ dst);
            }
            LOG.debug("Rename " + wap.p + " to "+ dst);
          }
        }
 catch (        IOException ioe) {
          LOG.error("Couldn't rename " + wap.p + " to "+ dst,ioe);
          thrown.add(ioe);
          return null;
        }
        paths.add(dst);
        return null;
      }
    }
);
  }
  boolean progress_failed=false;
  try {
    for (int i=0, n=logWriters.size(); i < n; i++) {
      Future<Void> future=completionService.take();
      future.get();
      if (!progress_failed && !reportProgressIfIsDistributedLogSplitting()) {
        progress_failed=true;
      }
    }
  }
 catch (  InterruptedException e) {
    IOException iie=new InterruptedIOException();
    iie.initCause(e);
    throw iie;
  }
catch (  ExecutionException e) {
    throw new IOException(e.getCause());
  }
 finally {
    closeThreadPool.shutdownNow();
  }
  if (!thrown.isEmpty()) {
    throw MultipleIOException.createIOException(thrown);
  }
  logWritersClosed=true;
  closeAndCleanCompleted=true;
  if (progress_failed) {
    return null;
  }
  return paths;
}
