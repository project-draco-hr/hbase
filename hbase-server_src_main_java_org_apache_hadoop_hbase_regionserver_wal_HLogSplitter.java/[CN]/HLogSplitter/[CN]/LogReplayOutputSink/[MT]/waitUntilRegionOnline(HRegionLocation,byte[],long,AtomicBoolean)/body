{
  final long endTime=EnvironmentEdgeManager.currentTime() + timeout;
  final long pause=conf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  boolean reloadLocation=false;
  TableName tableName=loc.getRegionInfo().getTable();
  int tries=0;
  Throwable cause=null;
  while (endTime > EnvironmentEdgeManager.currentTime()) {
    try {
      HConnection hconn=getConnectionByTableName(tableName);
      if (reloadLocation) {
        loc=hconn.getRegionLocation(tableName,row,true);
      }
      BlockingInterface remoteSvr=hconn.getAdmin(loc.getServerName());
      HRegionInfo region=loc.getRegionInfo();
      try {
        GetRegionInfoRequest request=RequestConverter.buildGetRegionInfoRequest(region.getRegionName());
        GetRegionInfoResponse response=remoteSvr.getRegionInfo(null,request);
        if (HRegionInfo.convert(response.getRegionInfo()) != null) {
          isRecovering.set((response.hasIsRecovering()) ? response.getIsRecovering() : true);
          return loc;
        }
      }
 catch (      ServiceException se) {
        throw ProtobufUtil.getRemoteException(se);
      }
    }
 catch (    IOException e) {
      cause=e.getCause();
      if (!(cause instanceof RegionOpeningException)) {
        reloadLocation=true;
      }
    }
    long expectedSleep=ConnectionUtils.getPauseTime(pause,tries);
    try {
      Thread.sleep(expectedSleep);
    }
 catch (    InterruptedException e) {
      throw new IOException("Interrupted when waiting region " + loc.getRegionInfo().getEncodedName() + " online.",e);
    }
    tries++;
  }
  throw new IOException("Timeout when waiting region " + loc.getRegionInfo().getEncodedName() + " online for "+ timeout+ " milliseconds.",cause);
}
