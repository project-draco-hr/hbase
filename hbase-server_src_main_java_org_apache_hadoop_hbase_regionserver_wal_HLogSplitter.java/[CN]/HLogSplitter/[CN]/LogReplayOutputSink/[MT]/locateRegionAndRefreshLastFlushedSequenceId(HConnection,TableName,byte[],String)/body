{
  HRegionLocation loc=onlineRegions.get(originalEncodedRegionName);
  if (loc != null)   return loc;
  loc=hconn.getRegionLocation(table,row,true);
  if (loc == null) {
    throw new IOException("Can't locate location for row:" + Bytes.toString(row) + " of table:"+ table);
  }
  if (!originalEncodedRegionName.equalsIgnoreCase(loc.getRegionInfo().getEncodedName())) {
    lastFlushedSequenceIds.put(originalEncodedRegionName,Long.MAX_VALUE);
    HRegionLocation tmpLoc=onlineRegions.get(loc.getRegionInfo().getEncodedName());
    if (tmpLoc != null)     return tmpLoc;
  }
  Long lastFlushedSequenceId=-1l;
  AtomicBoolean isRecovering=new AtomicBoolean(true);
  loc=waitUntilRegionOnline(loc,row,this.waitRegionOnlineTimeOut,isRecovering);
  if (!isRecovering.get()) {
    lastFlushedSequenceIds.put(loc.getRegionInfo().getEncodedName(),Long.MAX_VALUE);
    LOG.info("logReplay skip region: " + loc.getRegionInfo().getEncodedName() + " because it's not in recovering.");
  }
 else {
    Long cachedLastFlushedSequenceId=lastFlushedSequenceIds.get(loc.getRegionInfo().getEncodedName());
    RegionStoreSequenceIds ids=SplitLogManager.getRegionFlushedSequenceId(watcher,failedServerName,loc.getRegionInfo().getEncodedName());
    if (ids != null) {
      lastFlushedSequenceId=ids.getLastFlushedSequenceId();
      Map<byte[],Long> storeIds=new TreeMap<byte[],Long>(Bytes.BYTES_COMPARATOR);
      List<StoreSequenceId> maxSeqIdInStores=ids.getStoreSequenceIdList();
      for (      StoreSequenceId id : maxSeqIdInStores) {
        storeIds.put(id.getFamilyName().toByteArray(),id.getSequenceId());
      }
      regionMaxSeqIdInStores.put(loc.getRegionInfo().getEncodedName(),storeIds);
    }
    if (cachedLastFlushedSequenceId == null || lastFlushedSequenceId > cachedLastFlushedSequenceId) {
      lastFlushedSequenceIds.put(loc.getRegionInfo().getEncodedName(),lastFlushedSequenceId);
    }
  }
  onlineRegions.put(loc.getRegionInfo().getEncodedName(),loc);
  return loc;
}
