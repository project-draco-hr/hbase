{
  Set<TableName> nonExistentTables=null;
  Long cachedLastFlushedSequenceId=-1l;
  for (  HLog.Entry entry : entries) {
    WALEdit edit=entry.getEdit();
    TableName table=entry.getKey().getTablename();
    entry.getKey().setScopes(null);
    String encodeRegionNameStr=Bytes.toString(entry.getKey().getEncodedRegionName());
    if (nonExistentTables != null && nonExistentTables.contains(table)) {
      this.skippedEdits.incrementAndGet();
      continue;
    }
    Map<byte[],Long> maxStoreSequenceIds=null;
    boolean needSkip=false;
    HRegionLocation loc=null;
    String locKey=null;
    List<KeyValue> kvs=edit.getKeyValues();
    List<KeyValue> skippedKVs=new ArrayList<KeyValue>();
    HConnection hconn=this.getConnectionByTableName(table);
    for (    KeyValue kv : kvs) {
      if (kv.matchingFamily(WALEdit.METAFAMILY)) {
        skippedKVs.add(kv);
        continue;
      }
      try {
        loc=locateRegionAndRefreshLastFlushedSequenceId(hconn,table,kv.getRow(),encodeRegionNameStr);
      }
 catch (      TableNotFoundException ex) {
        LOG.info("Table " + table + " doesn't exist. Skip log replay for region "+ encodeRegionNameStr);
        lastFlushedSequenceIds.put(encodeRegionNameStr,Long.MAX_VALUE);
        if (nonExistentTables == null) {
          nonExistentTables=new TreeSet<TableName>();
        }
        nonExistentTables.add(table);
        this.skippedEdits.incrementAndGet();
        needSkip=true;
        break;
      }
      cachedLastFlushedSequenceId=lastFlushedSequenceIds.get(loc.getRegionInfo().getEncodedName());
      if (cachedLastFlushedSequenceId != null && cachedLastFlushedSequenceId >= entry.getKey().getLogSeqNum()) {
        this.skippedEdits.incrementAndGet();
        needSkip=true;
        break;
      }
 else {
        if (maxStoreSequenceIds == null) {
          maxStoreSequenceIds=regionMaxSeqIdInStores.get(loc.getRegionInfo().getEncodedName());
        }
        if (maxStoreSequenceIds != null) {
          Long maxStoreSeqId=maxStoreSequenceIds.get(kv.getFamily());
          if (maxStoreSeqId == null || maxStoreSeqId >= entry.getKey().getLogSeqNum()) {
            skippedKVs.add(kv);
            continue;
          }
        }
      }
    }
    if (loc == null || needSkip)     continue;
    if (!skippedKVs.isEmpty()) {
      kvs.removeAll(skippedKVs);
    }
synchronized (serverToBufferQueueMap) {
      locKey=loc.getHostnamePort() + KEY_DELIMITER + table;
      List<Pair<HRegionLocation,HLog.Entry>> queue=serverToBufferQueueMap.get(locKey);
      if (queue == null) {
        queue=Collections.synchronizedList(new ArrayList<Pair<HRegionLocation,HLog.Entry>>());
        serverToBufferQueueMap.put(locKey,queue);
      }
      queue.add(new Pair<HRegionLocation,HLog.Entry>(loc,entry));
    }
    addToRecoveredRegions(loc.getRegionInfo().getEncodedName());
  }
}
