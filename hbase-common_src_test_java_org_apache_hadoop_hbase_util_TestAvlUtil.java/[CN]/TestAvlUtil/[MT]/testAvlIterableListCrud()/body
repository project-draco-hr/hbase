{
  final int NITEMS=10;
  TestLinkedAvlNode prependHead=null;
  TestLinkedAvlNode appendHead=null;
  for (int i=0; i <= NITEMS; ++i) {
    TestLinkedAvlNode pNode=new TestLinkedAvlNode(i);
    assertFalse(AvlIterableList.isLinked(pNode));
    prependHead=AvlIterableList.prepend(prependHead,pNode);
    assertTrue(AvlIterableList.isLinked(pNode));
    TestLinkedAvlNode aNode=new TestLinkedAvlNode(i);
    assertFalse(AvlIterableList.isLinked(aNode));
    appendHead=AvlIterableList.append(appendHead,aNode);
    assertTrue(AvlIterableList.isLinked(aNode));
  }
  TestLinkedAvlNode pNode=prependHead;
  TestLinkedAvlNode aNode=appendHead;
  for (int i=0; i <= NITEMS; ++i) {
    assertEquals(NITEMS - i,pNode.getKey());
    pNode=AvlIterableList.readNext(pNode);
    assertEquals(i,aNode.getKey());
    aNode=AvlIterableList.readNext(aNode);
  }
  pNode=AvlIterableList.readPrev(prependHead);
  aNode=AvlIterableList.readPrev(appendHead);
  for (int i=0; i <= NITEMS; ++i) {
    assertEquals(i,pNode.getKey());
    pNode=AvlIterableList.readPrev(pNode);
    assertEquals(NITEMS - i,aNode.getKey());
    aNode=AvlIterableList.readPrev(aNode);
  }
  TestLinkedAvlNode node=AvlIterableList.appendList(prependHead,appendHead);
  for (int i=NITEMS; i >= 0; --i) {
    assertEquals(i,node.getKey());
    node=AvlIterableList.readNext(node);
  }
  for (int i=0; i <= NITEMS; ++i) {
    assertEquals(i,node.getKey());
    node=AvlIterableList.readNext(node);
  }
}
