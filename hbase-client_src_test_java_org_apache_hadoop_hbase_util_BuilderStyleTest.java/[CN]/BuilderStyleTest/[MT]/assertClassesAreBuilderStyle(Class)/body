{
  for (  Class clazz : classes) {
    System.out.println("Checking " + clazz);
    Method[] methods=clazz.getDeclaredMethods();
    Map<String,Set<Method>> methodsBySignature=new HashMap<>();
    for (    Method method : methods) {
      if (!Modifier.isPublic(method.getModifiers())) {
        continue;
      }
      Class<?> ret=method.getReturnType();
      if (method.getName().startsWith("set") || method.getName().startsWith("add")) {
        System.out.println("  " + clazz.getSimpleName() + "."+ method.getName()+ "() : "+ ret.getSimpleName());
        String sig=method.getName();
        for (        Class<?> param : method.getParameterTypes()) {
          sig+=param.getName();
        }
        Set<Method> sigMethods=methodsBySignature.get(sig);
        if (sigMethods == null) {
          sigMethods=new HashSet<Method>();
          methodsBySignature.put(sig,sigMethods);
        }
        sigMethods.add(method);
      }
    }
    for (    Map.Entry<String,Set<Method>> e : methodsBySignature.entrySet()) {
      boolean found=false;
      for (      Method m : e.getValue()) {
        found=clazz.isAssignableFrom(m.getReturnType());
        if (found)         break;
      }
      String errorMsg="All setXXX()|addXX() methods in " + clazz.getSimpleName() + " should return a "+ clazz.getSimpleName()+ " object in builder style. "+ "Offending method:"+ e.getValue().iterator().next().getName();
      assertTrue(errorMsg,found);
    }
  }
}
