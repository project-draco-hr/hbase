{
  readIndex();
  if (seekIndex != -1 && seekIndex + 1 < count && comparator.compare(key,keys[seekIndex + 1]) < 0 && comparator.compare(key,nextKey) >= 0) {
  }
 else {
    seekIndex=binarySearch(key);
    if (seekIndex < 0)     seekIndex=-seekIndex - 2;
    if (seekIndex == -1)     seekPosition=firstPosition;
 else     seekPosition=positions[seekIndex];
  }
  data.seek(seekPosition);
  if (nextKey == null)   nextKey=comparator.newKey();
  long prevPosition=-1;
  long curPosition=seekPosition;
  while (data.next(nextKey)) {
    int c=comparator.compare(key,nextKey);
    if (c <= 0) {
      if (before && c != 0) {
        if (prevPosition == -1) {
          data.seek(curPosition);
        }
 else {
          data.seek(prevPosition);
          data.next(nextKey);
          return 1;
        }
      }
      return c;
    }
    if (before) {
      prevPosition=curPosition;
      curPosition=data.getPosition();
    }
  }
  return 1;
}
