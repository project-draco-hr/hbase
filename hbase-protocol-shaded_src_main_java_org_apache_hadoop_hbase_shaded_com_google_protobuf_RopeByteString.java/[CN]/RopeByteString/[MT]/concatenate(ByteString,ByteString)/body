{
  if (right.size() == 0) {
    return left;
  }
  if (left.size() == 0) {
    return right;
  }
  final int newLength=left.size() + right.size();
  if (newLength < ByteString.CONCATENATE_BY_COPY_SIZE) {
    return concatenateBytes(left,right);
  }
  if (left instanceof RopeByteString) {
    final RopeByteString leftRope=(RopeByteString)left;
    if (leftRope.right.size() + right.size() < CONCATENATE_BY_COPY_SIZE) {
      ByteString newRight=concatenateBytes(leftRope.right,right);
      return new RopeByteString(leftRope.left,newRight);
    }
    if (leftRope.left.getTreeDepth() > leftRope.right.getTreeDepth() && leftRope.getTreeDepth() > right.getTreeDepth()) {
      ByteString newRight=new RopeByteString(leftRope.right,right);
      return new RopeByteString(leftRope.left,newRight);
    }
  }
  int newDepth=Math.max(left.getTreeDepth(),right.getTreeDepth()) + 1;
  if (newLength >= minLengthByDepth[newDepth]) {
    return new RopeByteString(left,right);
  }
  return new Balancer().balance(left,right);
}
