{
  int depthBin=getDepthBinForLength(byteString.size());
  int binEnd=minLengthByDepth[depthBin + 1];
  if (prefixesStack.isEmpty() || prefixesStack.peek().size() >= binEnd) {
    prefixesStack.push(byteString);
  }
 else {
    int binStart=minLengthByDepth[depthBin];
    ByteString newTree=prefixesStack.pop();
    while (!prefixesStack.isEmpty() && prefixesStack.peek().size() < binStart) {
      ByteString left=prefixesStack.pop();
      newTree=new RopeByteString(left,newTree);
    }
    newTree=new RopeByteString(newTree,byteString);
    while (!prefixesStack.isEmpty()) {
      depthBin=getDepthBinForLength(newTree.size());
      binEnd=minLengthByDepth[depthBin + 1];
      if (prefixesStack.peek().size() < binEnd) {
        ByteString left=prefixesStack.pop();
        newTree=new RopeByteString(left,newTree);
      }
 else {
        break;
      }
    }
    prefixesStack.push(newTree);
  }
}
