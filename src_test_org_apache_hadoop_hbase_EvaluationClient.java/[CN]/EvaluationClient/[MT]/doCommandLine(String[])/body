{
  int errCode=-1;
  if (args.length < 1) {
    printUsage();
    return errCode;
  }
  try {
    for (int i=0; i < args.length; i++) {
      String cmd=args[i];
      if (cmd.equals("-h") || cmd.startsWith("--h")) {
        printUsage();
        errCode=0;
        break;
      }
      final String masterArgKey="--master=";
      if (cmd.startsWith(masterArgKey)) {
        this.conf.set(MASTER_ADDRESS,cmd.substring(masterArgKey.length()));
        continue;
      }
      final String miniClusterArgKey="--miniCluster";
      if (cmd.startsWith(miniClusterArgKey)) {
        this.miniCluster=true;
        continue;
      }
      if (cmd.equals("randomRead")) {
        getArgs(i + 1,args);
        runTest(Test.RANDOM_READ);
        errCode=0;
        break;
      }
      if (cmd.equals("randomReadMem")) {
        getArgs(i + 1,args);
        runTest(Test.RANDOM_READ_MEM);
        errCode=0;
        break;
      }
      if (cmd.equals("randomWrite")) {
        getArgs(i + 1,args);
        runTest(Test.RANDOM_WRITE);
        errCode=0;
        break;
      }
      if (cmd.equals("sequentialRead")) {
        getArgs(i + 1,args);
        runTest(Test.SEQUENTIAL_READ);
        errCode=0;
        break;
      }
      if (cmd.equals("sequentialWrite")) {
        getArgs(i + 1,args);
        runTest(Test.SEQUENTIAL_WRITE);
        errCode=0;
        break;
      }
      if (cmd.equals("scan")) {
        getArgs(i + 1,args);
        runTest(Test.SCAN);
        errCode=0;
        break;
      }
      printUsage();
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return errCode;
}
