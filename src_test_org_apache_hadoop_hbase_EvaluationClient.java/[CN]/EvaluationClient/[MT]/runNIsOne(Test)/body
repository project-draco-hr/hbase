{
  try {
    client.createTable(tableDescriptor);
    long totalElapsedTime=0;
    int nRows=R / (10 * N);
    if (test == Test.RANDOM_READ || test == Test.RANDOM_READ_MEM || test == Test.SCAN || test == Test.SEQUENTIAL_READ || test == Test.SEQUENTIAL_WRITE) {
      for (int range=0; range < 10; range++) {
        long elapsedTime=sequentialWrite(range * nRows,nRows);
        if (test == Test.SEQUENTIAL_WRITE) {
          totalElapsedTime+=elapsedTime;
        }
      }
    }
switch (test) {
case RANDOM_READ:
      for (int range=0; range < 10; range++) {
        long elapsedTime=randomRead(range * nRows,nRows);
        totalElapsedTime+=elapsedTime;
      }
    System.out.print("Random read of " + R + " rows completed in: ");
  break;
case RANDOM_READ_MEM:
throw new UnsupportedOperationException("Not yet implemented");
case RANDOM_WRITE:
for (int range=0; range < 10; range++) {
long elapsedTime=randomWrite(range * nRows,nRows);
totalElapsedTime+=elapsedTime;
}
System.out.print("Random write of " + R + " rows completed in: ");
break;
case SCAN:
for (int range=0; range < 10; range++) {
long elapsedTime=scan(range * nRows,nRows);
totalElapsedTime+=elapsedTime;
}
System.out.print("Scan of " + R + " rows completed in: ");
break;
case SEQUENTIAL_READ:
for (int range=0; range < 10; range++) {
long elapsedTime=sequentialRead(range * nRows,nRows);
totalElapsedTime+=elapsedTime;
}
System.out.print("Sequential read of " + R + " rows completed in: ");
break;
case SEQUENTIAL_WRITE:
System.out.print("Sequential write of " + R + " rows completed in: ");
break;
default :
throw new IllegalArgumentException("Invalid command value: " + test);
}
System.out.println((totalElapsedTime / 1000.0));
}
 catch (Exception e) {
e.printStackTrace();
}
 finally {
this.client.deleteTable(tableDescriptor.getName());
}
}
