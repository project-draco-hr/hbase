{
  HLog hlog1=null;
  HLog hlogMeta=null;
  try {
    hlog1=HLogFactory.createHLog(fs,FSUtils.getRootDir(conf),dir.toString(),conf);
    LOG.debug("Log obtained is: " + hlog1);
    Comparator<Path> comp=((FSHLog)hlog1).LOG_NAME_COMPARATOR;
    Path p1=((FSHLog)hlog1).computeFilename(11);
    Path p2=((FSHLog)hlog1).computeFilename(12);
    assertTrue(comp.compare(p1,p1) == 0);
    assertTrue(comp.compare(p1,p2) < 0);
    hlogMeta=HLogFactory.createMetaHLog(fs,FSUtils.getRootDir(conf),dir.toString(),conf,null,null);
    Comparator<Path> compMeta=((FSHLog)hlogMeta).LOG_NAME_COMPARATOR;
    Path p1WithMeta=((FSHLog)hlogMeta).computeFilename(11);
    Path p2WithMeta=((FSHLog)hlogMeta).computeFilename(12);
    assertTrue(compMeta.compare(p1WithMeta,p1WithMeta) == 0);
    assertTrue(compMeta.compare(p1WithMeta,p2WithMeta) < 0);
    boolean ex=false;
    try {
      comp.compare(p1WithMeta,p2);
    }
 catch (    Exception e) {
      ex=true;
    }
    assertTrue("Comparator doesn't complain while checking meta log files",ex);
    boolean exMeta=false;
    try {
      compMeta.compare(p1WithMeta,p2);
    }
 catch (    Exception e) {
      exMeta=true;
    }
    assertTrue("Meta comparator doesn't complain while checking log files",exMeta);
  }
  finally {
    if (hlog1 != null)     hlog1.close();
    if (hlogMeta != null)     hlogMeta.close();
  }
}
