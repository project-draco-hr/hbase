{
  LOG.debug("testWALArchiving");
  TableName table1=TableName.valueOf("t1");
  TableName table2=TableName.valueOf("t2");
  HLog hlog=HLogFactory.createHLog(fs,FSUtils.getRootDir(conf),dir.toString(),conf);
  try {
    assertEquals(0,((FSHLog)hlog).getNumLogFiles());
    HRegionInfo hri1=new HRegionInfo(table1,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW);
    HRegionInfo hri2=new HRegionInfo(table2,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW);
    hri1.setSplit(false);
    hri2.setSplit(false);
    final AtomicLong sequenceId1=new AtomicLong(1);
    final AtomicLong sequenceId2=new AtomicLong(1);
    addEdits(hlog,hri1,table1,1,sequenceId1);
    hlog.rollWriter();
    assertEquals(1,((FSHLog)hlog).getNumLogFiles());
    addEdits(hlog,hri1,table1,1,sequenceId1);
    hlog.rollWriter();
    assertEquals(2,((FSHLog)hlog).getNumLogFiles());
    addEdits(hlog,hri1,table1,3,sequenceId1);
    flushRegion(hlog,hri1.getEncodedNameAsBytes());
    hlog.rollWriter();
    assertEquals(0,((FSHLog)hlog).getNumLogFiles());
    addEdits(hlog,hri2,table2,1,sequenceId2);
    hlog.rollWriter();
    assertEquals(1,((FSHLog)hlog).getNumLogFiles());
    addEdits(hlog,hri1,table1,2,sequenceId1);
    hlog.rollWriter();
    assertEquals(2,((FSHLog)hlog).getNumLogFiles());
    addEdits(hlog,hri2,table2,2,sequenceId2);
    flushRegion(hlog,hri1.getEncodedNameAsBytes());
    hlog.rollWriter();
    assertEquals(2,((FSHLog)hlog).getNumLogFiles());
    addEdits(hlog,hri2,table2,2,sequenceId2);
    flushRegion(hlog,hri2.getEncodedNameAsBytes());
    hlog.rollWriter();
    assertEquals(0,((FSHLog)hlog).getNumLogFiles());
  }
  finally {
    if (hlog != null)     hlog.close();
  }
}
