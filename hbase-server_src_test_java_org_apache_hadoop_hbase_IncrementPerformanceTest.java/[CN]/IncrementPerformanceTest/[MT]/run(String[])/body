{
  Configuration conf=getConf();
  final TableName tableName=TableName.valueOf(conf.get(TABLENAME),TABLENAME);
  final byte[] columnFamilyName=Bytes.toBytes(conf.get(COLUMN_FAMILY,COLUMN_FAMILY));
  int threadCount=conf.getInt(THREAD_COUNT,DEFAULT_THREAD_COUNT);
  final int incrementCount=conf.getInt(INCREMENT_COUNT,DEFAULT_INCREMENT_COUNT);
  LOG.info("Running test with " + HConstants.ZOOKEEPER_QUORUM + "="+ getConf().get(HConstants.ZOOKEEPER_QUORUM)+ ", tableName="+ tableName+ ", columnFamilyName="+ columnFamilyName+ ", threadCount="+ threadCount+ ", incrementCount="+ incrementCount);
  ExecutorService service=Executors.newFixedThreadPool(threadCount);
  Set<Future<?>> futures=new HashSet<Future<?>>();
  final AtomicInteger integer=new AtomicInteger(0);
  while (integer.incrementAndGet() <= threadCount) {
    futures.add(service.submit(new Runnable(){
      @Override public void run(){
        try {
          try (Connection connection=ConnectionFactory.createConnection(getConf())){
            try (Table table=connection.getTable(tableName)){
              Timer timer=metrics.timer("increments");
              for (int i=0; i < incrementCount; i++) {
                byte[] row=Bytes.toBytes(i);
                Timer.Context context=timer.time();
                try {
                  table.incrementColumnValue(row,columnFamilyName,QUALIFIER,1l);
                }
 catch (                IOException e) {
                }
 finally {
                  context.stop();
                }
              }
            }
           }
         }
 catch (        IOException ioe) {
          throw new RuntimeException(ioe);
        }
      }
    }
));
  }
  for (  Future<?> future : futures)   future.get();
  service.shutdown();
  Snapshot s=metrics.timer("increments").getSnapshot();
  LOG.info(String.format("75th=%s, 95th=%s, 99th=%s",s.get75thPercentile(),s.get95thPercentile(),s.get99thPercentile()));
  return 0;
}
