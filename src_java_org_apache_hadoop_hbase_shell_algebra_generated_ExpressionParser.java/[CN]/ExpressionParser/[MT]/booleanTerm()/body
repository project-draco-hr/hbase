{
  Token tSearchName=null;
  Token tComparator=null;
  Token tFirst=null;
  Token tSecond=null;
  Map<String,List<String>> result=new HashMap<String,List<String>>();
  List<String> valueList=new ArrayList<String>();
  String comparand=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ID:
    tSearchName=jj_consume_token(ID);
  break;
case INTEGER_LITERAL:
tSearchName=jj_consume_token(INTEGER_LITERAL);
break;
default :
jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DOT:
jj_consume_token(DOT);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ID:
tFirst=jj_consume_token(ID);
break;
case INTEGER_LITERAL:
tFirst=jj_consume_token(INTEGER_LITERAL);
break;
default :
jj_la1[6]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[7]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case EQUALS:
tComparator=jj_consume_token(EQUALS);
break;
case LCOMP:
tComparator=jj_consume_token(LCOMP);
break;
case LCOMPE:
tComparator=jj_consume_token(LCOMPE);
break;
case RCOMPE:
tComparator=jj_consume_token(RCOMPE);
break;
case RCOMP:
tComparator=jj_consume_token(RCOMP);
break;
case IN:
tComparator=jj_consume_token(IN);
break;
case NOTIN:
tComparator=jj_consume_token(NOTIN);
break;
default :
jj_la1[8]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
comparand=getValueList();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DOT:
jj_consume_token(DOT);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ID:
tSecond=jj_consume_token(ID);
break;
case INTEGER_LITERAL:
tSecond=jj_consume_token(INTEGER_LITERAL);
break;
default :
jj_la1[9]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[10]=jj_gen;
;
}
if (tFirst == null && tSecond == null) {
valueList.add(tComparator.image.toString() + " " + comparand);
result.put(tSearchName.image.toString(),valueList);
}
 else if (tFirst != null && tSecond != null) {
if (tSearchName.image.toString().equals(secondRelation)) {
valueList.add(tComparator.image.toString() + " " + secondValue.get(new Text(tSearchName.image.toString())));
result.put(tFirst.image.toString(),valueList);
}
 else {
valueList.add(tComparator.image.toString() + " " + tSecond.image.toString());
result.put(tFirst.image.toString(),valueList);
}
}
{
if (true) return result;
}
throw new Error("Missing return statement in function");
}
