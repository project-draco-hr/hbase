{
  Map<String,List<String>> temp=new HashMap<String,List<String>>();
  indexJoinCondition();
  jj_consume_token(BOOL);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ID:
case INTEGER_LITERAL:
    temp=booleanTerm();
  label_2:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case AND:
case OR:
      ;
    break;
default :
  jj_la1[2]=jj_gen;
break label_2;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case AND:
jj_consume_token(AND);
if (temp != null) {
for (Map.Entry<String,List<String>> e : temp.entrySet()) {
List<String> newList=intersectionSet.get(e.getKey());
if (newList != null) {
  newList.addAll(e.getValue());
}
 else {
  newList=e.getValue();
}
intersectionSet.put(e.getKey(),newList);
}
}
temp=booleanTerm();
for (Map.Entry<String,List<String>> e : temp.entrySet()) {
List<String> newList=intersectionSet.get(e.getKey());
if (newList != null) {
newList.addAll(e.getValue());
}
 else {
newList=e.getValue();
}
intersectionSet.put(e.getKey(),newList);
}
temp=null;
break;
case OR:
jj_consume_token(OR);
if (temp != null) {
for (Map.Entry<String,List<String>> e : temp.entrySet()) {
List<String> newList=unionSet.get(e.getKey());
if (newList != null) {
newList.addAll(e.getValue());
}
 else {
newList=e.getValue();
}
unionSet.put(e.getKey(),newList);
}
}
temp=booleanTerm();
for (Map.Entry<String,List<String>> e : temp.entrySet()) {
List<String> newList=unionSet.get(e.getKey());
if (newList != null) {
newList.addAll(e.getValue());
}
 else {
newList=e.getValue();
}
unionSet.put(e.getKey(),newList);
}
temp=null;
break;
default :
jj_la1[3]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
if (temp != null) {
for (Map.Entry<String,List<String>> e : temp.entrySet()) {
List<String> newList=unionSet.get(e.getKey());
if (newList != null) {
newList.addAll(e.getValue());
}
 else {
newList=e.getValue();
}
unionSet.put(e.getKey(),newList);
}
}
break;
default :
jj_la1[4]=jj_gen;
;
}
}
