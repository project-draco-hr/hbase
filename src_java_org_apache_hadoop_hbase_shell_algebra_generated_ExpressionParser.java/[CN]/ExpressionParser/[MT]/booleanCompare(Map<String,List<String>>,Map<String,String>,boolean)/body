{
  boolean negative=true;
  boolean positive=false;
  try {
    for (    Map.Entry<String,List<String>> e : expression.entrySet()) {
      String key=e.getKey();
      List<String> valueList=e.getValue();
      String recordValueList=record.get(key);
      for (int i=0; i < valueList.size(); i++) {
        String[] term=valueList.get(i).split(" ");
        String comparator=term[0];
        String comparand=term[1];
switch (comparator.charAt(0)) {
case '>':
          if (isSecond(comparator,"=")) {
            if (Integer.parseInt(comparand) > Integer.parseInt(recordValueList)) {
              negative=false;
            }
 else {
              positive=true;
            }
          }
 else {
            if (Integer.parseInt(comparand) > Integer.parseInt(recordValueList) || comparand.equals(recordValueList)) {
              negative=false;
            }
 else {
              positive=true;
            }
          }
        break;
case '<':
      if (isSecond(comparator,"=")) {
        if (Integer.parseInt(comparand) < Integer.parseInt(recordValueList))         negative=false;
 else         positive=true;
      }
 else {
        if (Integer.parseInt(comparand) < Integer.parseInt(recordValueList) || comparand.equals(recordValueList))         negative=false;
 else         positive=true;
      }
    break;
case '!':
  if (isSecond(comparator,"!")) {
    boolean checkBool=true;
    String[] coms=comparand.split("[|]");
    for (int j=0; j < coms.length; j++) {
      if (URLDecoder.decode(coms[j],"UTF-8").equals(recordValueList)) {
        checkBool=false;
      }
    }
    if (!checkBool) {
      negative=false;
    }
 else {
      positive=true;
    }
  }
 else {
    if (comparand.equals(recordValueList))     negative=false;
 else     positive=true;
  }
break;
case '=':
if (isSecond(comparator,"=")) {
boolean checkBool=true;
String[] coms=comparand.split("[|]");
for (int j=0; j < coms.length; j++) {
  if (URLDecoder.decode(coms[j],"UTF-8").equals(recordValueList)) {
    checkBool=false;
  }
}
if (checkBool) {
  negative=false;
}
 else {
  positive=true;
}
}
 else {
if (!comparand.equals(recordValueList)) negative=false;
 else positive=true;
}
break;
}
}
}
}
 catch (UnsupportedEncodingException e) {
e.printStackTrace();
}
boolean result=false;
if (isIntersection) {
result=negative;
}
 else {
result=positive;
}
{
if (true) return result;
}
throw new Error("Missing return statement in function");
}
