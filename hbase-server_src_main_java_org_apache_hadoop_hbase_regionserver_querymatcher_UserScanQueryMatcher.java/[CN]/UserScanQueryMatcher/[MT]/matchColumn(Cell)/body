{
  long timestamp=cell.getTimestamp();
  int tsCmp=tr.compare(timestamp);
  if (tsCmp > 0) {
    return MatchCode.SKIP;
  }
  if (tsCmp < 0) {
    return columns.getNextRowOrNextColumn(cell);
  }
  byte typeByte=cell.getTypeByte();
  MatchCode colChecker=columns.checkColumn(cell,typeByte);
  if (colChecker != MatchCode.INCLUDE) {
    if (colChecker == MatchCode.SEEK_NEXT_ROW) {
      stickyNextRow=true;
    }
    return colChecker;
  }
  ReturnCode filterResponse=ReturnCode.SKIP;
  if (filter != null) {
    filterResponse=filter.filterKeyValue(cell);
switch (filterResponse) {
case SKIP:
      return MatchCode.SKIP;
case NEXT_COL:
    return columns.getNextRowOrNextColumn(cell);
case NEXT_ROW:
  stickyNextRow=true;
return MatchCode.SEEK_NEXT_ROW;
case SEEK_NEXT_USING_HINT:
return MatchCode.SEEK_NEXT_USING_HINT;
default :
break;
}
}
colChecker=columns.checkVersions(cell,timestamp,typeByte,false);
boolean seekNextRowFromEssential=filterResponse == ReturnCode.INCLUDE_AND_SEEK_NEXT_ROW && filter.isFamilyEssential(cell.getFamilyArray());
if (colChecker == MatchCode.INCLUDE_AND_SEEK_NEXT_ROW || seekNextRowFromEssential) {
stickyNextRow=true;
}
if (filterResponse == ReturnCode.INCLUDE_AND_SEEK_NEXT_ROW) {
if (colChecker != MatchCode.SKIP) {
return MatchCode.INCLUDE_AND_SEEK_NEXT_ROW;
}
return MatchCode.SEEK_NEXT_ROW;
}
return (filterResponse == ReturnCode.INCLUDE_AND_NEXT_COL && colChecker == MatchCode.INCLUDE) ? MatchCode.INCLUDE_AND_SEEK_NEXT_COL : colChecker;
}
