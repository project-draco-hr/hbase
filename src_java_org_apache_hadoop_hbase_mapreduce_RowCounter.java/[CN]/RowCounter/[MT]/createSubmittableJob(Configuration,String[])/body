{
  String tableName=args[0];
  Job job=new Job(conf,NAME + "_" + tableName);
  job.setJarByClass(RowCounter.class);
  StringBuilder sb=new StringBuilder();
  final int columnoffset=1;
  for (int i=columnoffset; i < args.length; i++) {
    if (i > columnoffset) {
      sb.append(" ");
    }
    sb.append(args[i]);
  }
  Scan scan=new Scan();
  scan.setFilter(new FirstKeyOnlyFilter());
  if (sb.length() > 0) {
    for (    String columnName : sb.toString().split(" ")) {
      String[] fields=columnName.split(":");
      if (fields.length == 1) {
        scan.addFamily(Bytes.toBytes(fields[0]));
      }
 else {
        scan.addColumn(Bytes.toBytes(fields[0]),Bytes.toBytes(fields[1]));
      }
    }
  }
  job.setOutputFormatClass(NullOutputFormat.class);
  TableMapReduceUtil.initTableMapperJob(tableName,scan,RowCounterMapper.class,ImmutableBytesWritable.class,Result.class,job);
  job.setNumReduceTasks(0);
  return job;
}
