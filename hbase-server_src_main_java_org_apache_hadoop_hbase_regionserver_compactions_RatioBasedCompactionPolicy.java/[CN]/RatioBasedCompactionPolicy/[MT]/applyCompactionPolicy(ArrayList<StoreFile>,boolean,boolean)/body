{
  if (candidates.isEmpty()) {
    return candidates;
  }
  int start=0;
  double ratio=comConf.getCompactionRatio();
  if (mayUseOffPeak) {
    ratio=comConf.getCompactionRatioOffPeak();
    LOG.info("Running an off-peak compaction, selection ratio = " + ratio);
  }
  final int countOfFiles=candidates.size();
  long[] fileSizes=new long[countOfFiles];
  long[] sumSize=new long[countOfFiles];
  for (int i=countOfFiles - 1; i >= 0; --i) {
    StoreFile file=candidates.get(i);
    fileSizes[i]=file.getReader().length();
    int tooFar=i + comConf.getMaxFilesToCompact() - 1;
    sumSize[i]=fileSizes[i] + ((i + 1 < countOfFiles) ? sumSize[i + 1] : 0) - ((tooFar < countOfFiles) ? fileSizes[tooFar] : 0);
  }
  while (countOfFiles - start >= comConf.getMinFilesToCompact() && fileSizes[start] > Math.max(comConf.getMinCompactSize(),(long)(sumSize[start + 1] * ratio))) {
    ++start;
  }
  if (start < countOfFiles) {
    LOG.info("Default compaction algorithm has selected " + (countOfFiles - start) + " files from "+ countOfFiles+ " candidates");
  }
 else   if (mayBeStuck) {
    int filesToLeave=candidates.size() - comConf.getMinFilesToCompact();
    if (filesToLeave >= 0) {
      start=filesToLeave;
    }
  }
  candidates.subList(0,start).clear();
  return candidates;
}
