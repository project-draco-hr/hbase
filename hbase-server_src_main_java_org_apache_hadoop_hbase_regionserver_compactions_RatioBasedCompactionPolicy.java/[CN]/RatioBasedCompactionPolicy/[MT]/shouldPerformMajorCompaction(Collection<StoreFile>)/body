{
  boolean result=false;
  long mcTime=getNextMajorCompactTime(filesToCompact);
  if (filesToCompact == null || filesToCompact.isEmpty() || mcTime == 0) {
    return result;
  }
  long lowTimestamp=StoreUtils.getLowestTimestamp(filesToCompact);
  long now=EnvironmentEdgeManager.currentTime();
  if (lowTimestamp > 0L && lowTimestamp < (now - mcTime)) {
    long cfTTL=this.storeConfigInfo.getStoreFileTtl();
    if (filesToCompact.size() == 1) {
      StoreFile sf=filesToCompact.iterator().next();
      Long minTimestamp=sf.getMinimumTimestamp();
      long oldest=(minTimestamp == null) ? Long.MIN_VALUE : now - minTimestamp.longValue();
      if (sf.isMajorCompaction() && (cfTTL == Long.MAX_VALUE || oldest < cfTTL)) {
        float blockLocalityIndex=sf.getHDFSBlockDistribution().getBlockLocalityIndex(RSRpcServices.getHostname(comConf.conf,false));
        if (blockLocalityIndex < comConf.getMinLocalityToForceCompact()) {
          LOG.debug("Major compaction triggered on only store " + this + "; to make hdfs blocks local, current blockLocalityIndex is "+ blockLocalityIndex+ " (min "+ comConf.getMinLocalityToForceCompact()+ ")");
          result=true;
        }
 else {
          LOG.debug("Skipping major compaction of " + this + " because one (major) compacted file only, oldestTime "+ oldest+ "ms is < TTL="+ cfTTL+ " and blockLocalityIndex is "+ blockLocalityIndex+ " (min "+ comConf.getMinLocalityToForceCompact()+ ")");
        }
      }
 else       if (cfTTL != HConstants.FOREVER && oldest > cfTTL) {
        LOG.debug("Major compaction triggered on store " + this + ", because keyvalues outdated; time since last major compaction "+ (now - lowTimestamp)+ "ms");
        result=true;
      }
    }
 else {
      LOG.debug("Major compaction triggered on store " + this + "; time since last major compaction "+ (now - lowTimestamp)+ "ms");
    }
    result=true;
  }
  return result;
}
