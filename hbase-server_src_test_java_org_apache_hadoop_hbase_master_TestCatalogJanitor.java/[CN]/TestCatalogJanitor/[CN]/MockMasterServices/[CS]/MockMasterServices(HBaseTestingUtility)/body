{
  super(htu.getConfiguration());
  ClientProtos.ClientService.BlockingInterface ri=Mockito.mock(ClientProtos.ClientService.BlockingInterface.class);
  MutateResponse.Builder builder=MutateResponse.newBuilder();
  builder.setProcessed(true);
  try {
    Mockito.when(ri.mutate((RpcController)Mockito.any(),(MutateRequest)Mockito.any())).thenReturn(builder.build());
  }
 catch (  ServiceException se) {
    throw ProtobufUtil.getRemoteException(se);
  }
  try {
    Mockito.when(ri.multi((RpcController)Mockito.any(),(MultiRequest)Mockito.any())).thenAnswer(new Answer<MultiResponse>(){
      @Override public MultiResponse answer(      InvocationOnMock invocation) throws Throwable {
        return buildMultiResponse((MultiRequest)invocation.getArguments()[1]);
      }
    }
);
  }
 catch (  ServiceException se) {
    throw ProtobufUtil.getRemoteException(se);
  }
  this.connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(getConfiguration(),Mockito.mock(AdminProtos.AdminService.BlockingInterface.class),ri,ServerName.valueOf("example.org,12345,6789"),HRegionInfo.FIRST_META_REGIONINFO);
  FileSystem.get(getConfiguration());
  Path rootdir=FSUtils.getRootDir(getConfiguration());
  FSUtils.setRootDir(getConfiguration(),rootdir);
  Mockito.mock(AdminProtos.AdminService.BlockingInterface.class);
  this.mfs=new MasterFileSystem(this);
  this.asm=Mockito.mock(AssignmentManager.class);
  this.sm=Mockito.mock(ServerManager.class);
}
