{
  this.c=htu.getConfiguration();
  ClientProtos.ClientService.BlockingInterface ri=Mockito.mock(ClientProtos.ClientService.BlockingInterface.class);
  MutateResponse.Builder builder=MutateResponse.newBuilder();
  builder.setProcessed(true);
  try {
    Mockito.when(ri.mutate((RpcController)Mockito.any(),(MutateRequest)Mockito.any())).thenReturn(builder.build());
  }
 catch (  ServiceException se) {
    throw ProtobufUtil.getRemoteException(se);
  }
  try {
    Mockito.when(ri.multi((RpcController)Mockito.any(),(MultiRequest)Mockito.any())).thenAnswer(new Answer<MultiResponse>(){
      @Override public MultiResponse answer(      InvocationOnMock invocation) throws Throwable {
        return buildMultiResponse((MultiRequest)invocation.getArguments()[1]);
      }
    }
);
  }
 catch (  ServiceException se) {
    throw ProtobufUtil.getRemoteException(se);
  }
  this.connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(this.c,Mockito.mock(AdminProtos.AdminService.BlockingInterface.class),ri,ServerName.valueOf("example.org,12345,6789"),HRegionInfo.FIRST_META_REGIONINFO);
  FileSystem fs=FileSystem.get(this.c);
  Path rootdir=FSUtils.getRootDir(this.c);
  FSUtils.setRootDir(this.c,rootdir);
  this.ct=Mockito.mock(CatalogTracker.class);
  AdminProtos.AdminService.BlockingInterface hri=Mockito.mock(AdminProtos.AdminService.BlockingInterface.class);
  Mockito.when(this.ct.getConnection()).thenReturn(this.connection);
  Mockito.when(ct.waitForMetaServerConnection(Mockito.anyLong())).thenReturn(hri);
}
