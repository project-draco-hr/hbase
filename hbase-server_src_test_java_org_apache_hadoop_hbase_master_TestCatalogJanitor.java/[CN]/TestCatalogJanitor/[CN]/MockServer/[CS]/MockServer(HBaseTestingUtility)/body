{
  this.c=htu.getConfiguration();
  ClientProtocol ri=Mockito.mock(ClientProtocol.class);
  MutateResponse.Builder builder=MutateResponse.newBuilder();
  builder.setProcessed(true);
  try {
    Mockito.when(ri.mutate((RpcController)Mockito.any(),(MutateRequest)Mockito.any())).thenReturn(builder.build());
  }
 catch (  ServiceException se) {
    throw ProtobufUtil.getRemoteException(se);
  }
  this.connection=HConnectionTestingUtility.getMockedConnectionAndDecorate(this.c,Mockito.mock(AdminProtocol.class),ri,new ServerName("example.org,12345,6789"),HRegionInfo.FIRST_META_REGIONINFO);
  FileSystem fs=FileSystem.get(this.c);
  Path rootdir=fs.makeQualified(new Path(this.c.get(HConstants.HBASE_DIR)));
  this.c.set(HConstants.HBASE_DIR,rootdir.toString());
  this.ct=Mockito.mock(CatalogTracker.class);
  AdminProtocol hri=Mockito.mock(AdminProtocol.class);
  Mockito.when(this.ct.getConnection()).thenReturn(this.connection);
  Mockito.when(ct.waitForMetaServerConnection(Mockito.anyLong())).thenReturn(hri);
}
