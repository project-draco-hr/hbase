{
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.apache.hadoop.hbase.shaded.protobuf.generated.ProcedureProtos.Procedure)) {
    return super.equals(obj);
  }
  org.apache.hadoop.hbase.shaded.protobuf.generated.ProcedureProtos.Procedure other=(org.apache.hadoop.hbase.shaded.protobuf.generated.ProcedureProtos.Procedure)obj;
  boolean result=true;
  result=result && (hasClassName() == other.hasClassName());
  if (hasClassName()) {
    result=result && getClassName().equals(other.getClassName());
  }
  result=result && (hasParentId() == other.hasParentId());
  if (hasParentId()) {
    result=result && (getParentId() == other.getParentId());
  }
  result=result && (hasProcId() == other.hasProcId());
  if (hasProcId()) {
    result=result && (getProcId() == other.getProcId());
  }
  result=result && (hasStartTime() == other.hasStartTime());
  if (hasStartTime()) {
    result=result && (getStartTime() == other.getStartTime());
  }
  result=result && (hasOwner() == other.hasOwner());
  if (hasOwner()) {
    result=result && getOwner().equals(other.getOwner());
  }
  result=result && (hasState() == other.hasState());
  if (hasState()) {
    result=result && state_ == other.state_;
  }
  result=result && getStackIdList().equals(other.getStackIdList());
  result=result && (hasLastUpdate() == other.hasLastUpdate());
  if (hasLastUpdate()) {
    result=result && (getLastUpdate() == other.getLastUpdate());
  }
  result=result && (hasTimeout() == other.hasTimeout());
  if (hasTimeout()) {
    result=result && (getTimeout() == other.getTimeout());
  }
  result=result && (hasException() == other.hasException());
  if (hasException()) {
    result=result && getException().equals(other.getException());
  }
  result=result && (hasResult() == other.hasResult());
  if (hasResult()) {
    result=result && getResult().equals(other.getResult());
  }
  result=result && (hasStateData() == other.hasStateData());
  if (hasStateData()) {
    result=result && getStateData().equals(other.getStateData());
  }
  result=result && (hasNonceGroup() == other.hasNonceGroup());
  if (hasNonceGroup()) {
    result=result && (getNonceGroup() == other.getNonceGroup());
  }
  result=result && (hasNonce() == other.hasNonce());
  if (hasNonce()) {
    result=result && (getNonce() == other.getNonce());
  }
  result=result && unknownFields.equals(other.unknownFields);
  return result;
}
