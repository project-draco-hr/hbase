{
  Cell nextKv;
  boolean moreCellsInRow=false;
  long accumulatedResultSize=0;
  List<Cell> tmpResults=new ArrayList<Cell>();
  do {
    int remainingBatchLimit=batchLimit - results.size();
    NextState heapState=heap.next(tmpResults,remainingBatchLimit,remainingResultSize - accumulatedResultSize);
    results.addAll(tmpResults);
    accumulatedResultSize+=calculateResultSize(tmpResults,heapState);
    tmpResults.clear();
    if (batchLimit > 0 && results.size() == batchLimit) {
      return NextState.makeState(NextState.State.BATCH_LIMIT_REACHED,accumulatedResultSize);
    }
    nextKv=heap.peek();
    moreCellsInRow=moreCellsInRow(nextKv,currentRow,offset,length);
    boolean sizeLimitReached=remainingResultSize > 0 && accumulatedResultSize >= remainingResultSize;
    if (moreCellsInRow && sizeLimitReached) {
      return NextState.makeState(NextState.State.SIZE_LIMIT_REACHED,accumulatedResultSize);
    }
  }
 while (moreCellsInRow);
  if (nextKv != null) {
    return NextState.makeState(NextState.State.MORE_VALUES,accumulatedResultSize);
  }
 else {
    return NextState.makeState(NextState.State.NO_MORE_VALUES,accumulatedResultSize);
  }
}
