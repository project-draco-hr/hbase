{
  if (!results.isEmpty()) {
    throw new IllegalArgumentException("First parameter should be an empty list");
  }
  long resultSize=0;
  RpcCallContext rpcCall=RpcServer.getCurrentCall();
  while (true) {
    if (rpcCall != null) {
      long afterTime=rpcCall.disconnectSince();
      if (afterTime >= 0) {
        throw new CallerDisconnectedException("Aborting on region " + getRegionNameAsString() + ", call "+ this+ " after "+ afterTime+ " ms, since "+ "caller disconnected");
      }
    }
    Cell current=this.storeHeap.peek();
    byte[] currentRow=null;
    int offset=0;
    short length=0;
    if (current != null) {
      currentRow=current.getRowArray();
      offset=current.getRowOffset();
      length=current.getRowLength();
    }
    boolean stopRow=isStopRow(currentRow,offset,length);
    boolean hasFilterRow=this.filter != null && this.filter.hasFilterRow();
    if (hasFilterRow && remainingResultSize > 0) {
      remainingResultSize=-1;
      if (LOG.isTraceEnabled()) {
        LOG.trace("filter#hasFilterRow is true which prevents partial results from being " + " formed. The remainingResultSize of: " + remainingResultSize + " will not "+ " be considered when fetching the cells for this row.");
      }
    }
    NextState joinedHeapState;
    if (joinedContinuationRow == null) {
      if (stopRow) {
        if (hasFilterRow) {
          filter.filterRowCells(results);
        }
        return NextState.makeState(NextState.State.NO_MORE_VALUES,resultSize);
      }
      if (filterRowKey(currentRow,offset,length)) {
        boolean moreRows=nextRow(currentRow,offset,length);
        if (!moreRows)         return NextState.makeState(NextState.State.NO_MORE_VALUES,resultSize);
        results.clear();
        continue;
      }
      NextState storeHeapState=populateResult(results,this.storeHeap,batchLimit,remainingResultSize,currentRow,offset,length);
      resultSize+=calculateResultSize(results,storeHeapState);
      if (!NextState.isValidState(storeHeapState)) {
        throw new IOException("NextState returned from call storeHeap was invalid");
      }
      if (storeHeapState.batchLimitReached()) {
        if (hasFilterRow) {
          throw new IncompatibleFilterException("Filter whose hasFilterRow() returns true is incompatible with scan with limit!");
        }
        return NextState.makeState(NextState.State.BATCH_LIMIT_REACHED,resultSize);
      }
 else       if (storeHeapState.sizeLimitReached()) {
        if (hasFilterRow) {
          throw new IncompatibleFilterException("Filter whose hasFilterRows() returns true is incompatible with scans that" + " return partial results");
        }
        return NextState.makeState(NextState.State.SIZE_LIMIT_REACHED,resultSize);
      }
      Cell nextKv=this.storeHeap.peek();
      stopRow=nextKv == null || isStopRow(nextKv.getRowArray(),nextKv.getRowOffset(),nextKv.getRowLength());
      final boolean isEmptyRow=results.isEmpty();
      FilterWrapper.FilterRowRetCode ret=FilterWrapper.FilterRowRetCode.NOT_CALLED;
      if (hasFilterRow) {
        ret=filter.filterRowCellsWithRet(results);
      }
      if ((isEmptyRow || ret == FilterWrapper.FilterRowRetCode.EXCLUDE) || filterRow()) {
        results.clear();
        boolean moreRows=nextRow(currentRow,offset,length);
        if (!moreRows)         return NextState.makeState(NextState.State.NO_MORE_VALUES,0);
        if (!stopRow)         continue;
        return NextState.makeState(NextState.State.NO_MORE_VALUES,0);
      }
      if (this.joinedHeap != null) {
        Cell nextJoinedKv=joinedHeap.peek();
        boolean mayHaveData=(nextJoinedKv != null && CellUtil.matchingRow(nextJoinedKv,currentRow,offset,length)) || (this.joinedHeap.requestSeek(KeyValueUtil.createFirstOnRow(currentRow,offset,length),true,true) && joinedHeap.peek() != null && CellUtil.matchingRow(joinedHeap.peek(),currentRow,offset,length));
        if (mayHaveData) {
          joinedContinuationRow=current;
          joinedHeapState=populateFromJoinedHeap(results,batchLimit,remainingResultSize - resultSize);
          resultSize+=joinedHeapState != null && joinedHeapState.hasResultSizeEstimate() ? joinedHeapState.getResultSize() : 0;
          if (joinedHeapState != null && joinedHeapState.sizeLimitReached()) {
            return NextState.makeState(NextState.State.SIZE_LIMIT_REACHED,resultSize);
          }
        }
      }
    }
 else {
      joinedHeapState=populateFromJoinedHeap(results,batchLimit,remainingResultSize - resultSize);
      resultSize+=joinedHeapState != null && joinedHeapState.hasResultSizeEstimate() ? joinedHeapState.getResultSize() : 0;
      if (joinedHeapState != null && joinedHeapState.sizeLimitReached()) {
        return NextState.makeState(NextState.State.SIZE_LIMIT_REACHED,resultSize);
      }
    }
    if (joinedContinuationRow != null) {
      return NextState.makeState(NextState.State.MORE_VALUES,resultSize);
    }
    if (results.isEmpty()) {
      boolean moreRows=nextRow(currentRow,offset,length);
      if (!moreRows)       return NextState.makeState(NextState.State.NO_MORE_VALUES,0);
      if (!stopRow)       continue;
    }
    if (stopRow) {
      return NextState.makeState(NextState.State.NO_MORE_VALUES,resultSize);
    }
 else {
      return NextState.makeState(NextState.State.MORE_VALUES,resultSize);
    }
  }
}
