{
  this.tableDir=tableDir;
  this.comparator=regionInfo.getComparator();
  this.log=log;
  this.fs=fs;
  if (confParam instanceof CompoundConfiguration) {
    throw new IllegalArgumentException("Need original base configuration");
  }
  this.baseConf=confParam;
  this.conf=new CompoundConfiguration().add(confParam).add(htd.getValues());
  this.rowLockWaitDuration=conf.getInt("hbase.rowlock.wait.duration",DEFAULT_ROWLOCK_WAIT_DURATION);
  this.regionInfo=regionInfo;
  this.htableDescriptor=htd;
  this.rsServices=rsServices;
  this.threadWakeFrequency=conf.getLong(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000);
  String encodedNameStr=this.regionInfo.getEncodedName();
  setHTableSpecificConf();
  this.regiondir=getRegionDir(this.tableDir,encodedNameStr);
  this.scannerReadPoints=new ConcurrentHashMap<RegionScanner,Long>();
  this.metricsRegion=new MetricsRegion(new MetricsRegionWrapperImpl(this));
  this.timestampSlop=conf.getLong("hbase.hregion.keyvalue.timestamp.slop.millisecs",HConstants.LATEST_TIMESTAMP);
  this.rowProcessorTimeout=conf.getLong("hbase.hregion.row.processor.timeout",DEFAULT_ROW_PROCESSOR_TIMEOUT);
  if (rsServices != null) {
    this.rsAccounting=this.rsServices.getRegionServerAccounting();
    this.coprocessorHost=new RegionCoprocessorHost(this,rsServices,conf);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Instantiated " + this);
  }
}
