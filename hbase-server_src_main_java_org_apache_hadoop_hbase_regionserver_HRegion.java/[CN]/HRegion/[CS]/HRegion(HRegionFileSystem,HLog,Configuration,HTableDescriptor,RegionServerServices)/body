{
  if (htd == null) {
    throw new IllegalArgumentException("Need table descriptor");
  }
  if (confParam instanceof CompoundConfiguration) {
    throw new IllegalArgumentException("Need original base configuration");
  }
  this.comparator=fs.getRegionInfo().getComparator();
  this.log=log;
  this.fs=fs;
  this.baseConf=confParam;
  this.conf=new CompoundConfiguration().add(confParam).addStringMap(htd.getConfiguration()).addWritableMap(htd.getValues());
  this.flushCheckInterval=conf.getInt(MEMSTORE_PERIODIC_FLUSH_INTERVAL,DEFAULT_CACHE_FLUSH_INTERVAL);
  this.rowLockWaitDuration=conf.getInt("hbase.rowlock.wait.duration",DEFAULT_ROWLOCK_WAIT_DURATION);
  this.isLoadingCfsOnDemandDefault=conf.getBoolean(LOAD_CFS_ON_DEMAND_CONFIG_KEY,true);
  this.htableDescriptor=htd;
  this.rsServices=rsServices;
  this.threadWakeFrequency=conf.getLong(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000);
  setHTableSpecificConf();
  this.scannerReadPoints=new ConcurrentHashMap<RegionScanner,Long>();
  this.busyWaitDuration=conf.getLong("hbase.busy.wait.duration",DEFAULT_BUSY_WAIT_DURATION);
  this.maxBusyWaitMultiplier=conf.getInt("hbase.busy.wait.multiplier.max",2);
  if (busyWaitDuration * maxBusyWaitMultiplier <= 0L) {
    throw new IllegalArgumentException("Invalid hbase.busy.wait.duration (" + busyWaitDuration + ") or hbase.busy.wait.multiplier.max ("+ maxBusyWaitMultiplier+ "). Their product should be positive");
  }
  this.maxBusyWaitDuration=conf.getLong("ipc.client.call.purge.timeout",2 * HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  this.timestampSlop=conf.getLong("hbase.hregion.keyvalue.timestamp.slop.millisecs",HConstants.LATEST_TIMESTAMP);
  this.rowProcessorTimeout=conf.getLong("hbase.hregion.row.processor.timeout",DEFAULT_ROW_PROCESSOR_TIMEOUT);
  this.deferredLogSyncDisabled=conf.getLong("hbase.regionserver.optionallogflushinterval",1 * 1000) <= 0;
  if (rsServices != null) {
    this.rsAccounting=this.rsServices.getRegionServerAccounting();
    this.coprocessorHost=new RegionCoprocessorHost(this,rsServices,conf);
    this.metricsRegionWrapper=new MetricsRegionWrapperImpl(this);
    this.metricsRegion=new MetricsRegion(this.metricsRegionWrapper);
  }
 else {
    this.metricsRegionWrapper=null;
    this.metricsRegion=null;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Instantiated " + this);
  }
  this.disallowWritesInRecovering=conf.getBoolean(HConstants.DISALLOW_WRITES_IN_RECOVERING,HConstants.DEFAULT_DISALLOW_WRITES_IN_RECOVERING_CONFIG);
}
