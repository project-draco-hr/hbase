{
  if (this.rsServices != null && this.rsServices.isAborted()) {
    throw new IOException("Aborting flush because server is aborted...");
  }
  final long startTime=EnvironmentEdgeManager.currentTime();
  if (this.memstoreSize.get() <= 0) {
    this.updatesLock.writeLock().lock();
    WriteEntry writeEntry=null;
    try {
      if (this.memstoreSize.get() <= 0) {
        FlushResult flushResult=null;
        if (wal != null) {
          writeEntry=mvcc.begin();
          long flushOpSeqId=writeEntry.getWriteNumber();
          flushResult=new FlushResultImpl(FlushResult.Result.CANNOT_FLUSH_MEMSTORE_EMPTY,flushOpSeqId,"Nothing to flush",writeFlushRequestMarkerToWAL(wal,writeFlushWalMarker));
          mvcc.completeAndWait(writeEntry);
          writeEntry=null;
          return new PrepareFlushResult(flushResult,myseqid);
        }
 else {
          return new PrepareFlushResult(new FlushResultImpl(FlushResult.Result.CANNOT_FLUSH_MEMSTORE_EMPTY,"Nothing to flush",false),myseqid);
        }
      }
    }
  finally {
      if (writeEntry != null) {
        mvcc.complete(writeEntry);
      }
      this.updatesLock.writeLock().unlock();
    }
  }
  logFatLineOnFlush(storesToFlush,myseqid);
  status.setStatus("Obtaining lock to block concurrent updates");
  this.updatesLock.writeLock().lock();
  status.setStatus("Preparing flush snapshotting stores in " + getRegionInfo().getEncodedName());
  long totalFlushableSizeOfFlushableStores=0;
  Set<byte[]> flushedFamilyNames=new HashSet<byte[]>();
  for (  Store store : storesToFlush) {
    flushedFamilyNames.add(store.getFamily().getName());
  }
  TreeMap<byte[],StoreFlushContext> storeFlushCtxs=new TreeMap<byte[],StoreFlushContext>(Bytes.BYTES_COMPARATOR);
  TreeMap<byte[],List<Path>> committedFiles=new TreeMap<byte[],List<Path>>(Bytes.BYTES_COMPARATOR);
  TreeMap<byte[],Long> storeFlushableSize=new TreeMap<byte[],Long>(Bytes.BYTES_COMPARATOR);
  long flushOpSeqId=HConstants.NO_SEQNUM;
  long flushedSeqId=HConstants.NO_SEQNUM;
  byte[] encodedRegionName=getRegionInfo().getEncodedNameAsBytes();
  try {
    if (wal != null) {
      Long earliestUnflushedSequenceIdForTheRegion=wal.startCacheFlush(encodedRegionName,flushedFamilyNames);
      if (earliestUnflushedSequenceIdForTheRegion == null) {
        String msg=this.getRegionInfo().getEncodedName() + " flush aborted; WAL closing.";
        status.setStatus(msg);
        return new PrepareFlushResult(new FlushResultImpl(FlushResult.Result.CANNOT_FLUSH,msg,false),myseqid);
      }
      flushOpSeqId=getNextSequenceId(wal);
      flushedSeqId=earliestUnflushedSequenceIdForTheRegion.longValue() == HConstants.NO_SEQNUM ? flushOpSeqId : earliestUnflushedSequenceIdForTheRegion.longValue() - 1;
    }
 else {
      flushedSeqId=flushOpSeqId=myseqid;
    }
    for (    Store s : storesToFlush) {
      totalFlushableSizeOfFlushableStores+=s.getFlushableSize();
      storeFlushCtxs.put(s.getFamily().getName(),s.createFlushContext(flushOpSeqId));
      committedFiles.put(s.getFamily().getName(),null);
      storeFlushableSize.put(s.getFamily().getName(),s.getFlushableSize());
    }
    if (wal != null && !writestate.readOnly) {
      FlushDescriptor desc=ProtobufUtil.toFlushDescriptor(FlushAction.START_FLUSH,getRegionInfo(),flushOpSeqId,committedFiles);
      WALUtil.writeFlushMarker(wal,this.getReplicationScope(),getRegionInfo(),desc,false,mvcc);
    }
    for (    StoreFlushContext flush : storeFlushCtxs.values()) {
      flush.prepare();
    }
  }
 catch (  IOException ex) {
    doAbortFlushToWAL(wal,flushOpSeqId,committedFiles);
    throw ex;
  }
 finally {
    this.updatesLock.writeLock().unlock();
  }
  String s="Finished memstore snapshotting " + this + ", syncing WAL and waiting on mvcc, "+ "flushsize="+ totalFlushableSizeOfFlushableStores;
  status.setStatus(s);
  doSyncOfUnflushedWALChanges(wal,getRegionInfo());
  return new PrepareFlushResult(storeFlushCtxs,committedFiles,storeFlushableSize,startTime,flushOpSeqId,flushedSeqId,totalFlushableSizeOfFlushableStores);
}
