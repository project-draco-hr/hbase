{
  byte[] row=increment.getRow();
  checkRow(row,"increment");
  TimeRange tr=increment.getTimeRange();
  boolean flush=false;
  Durability durability=getEffectiveDurability(increment.getDurability());
  boolean writeToWAL=durability != Durability.SKIP_WAL;
  WALEdit walEdits=null;
  List<Cell> allKVs=new ArrayList<Cell>(increment.size());
  Map<Store,List<Cell>> tempMemstore=new HashMap<Store,List<Cell>>();
  long size=0;
  long txid=0;
  checkReadOnly();
  checkResources();
  startRegionOperation(Operation.INCREMENT);
  this.writeRequestsCount.increment();
  RowLock rowLock=null;
  WriteEntry w=null;
  HLogKey walKey=null;
  long mvccNum=0;
  List<KeyValue> memstoreCells=new ArrayList<KeyValue>();
  boolean doRollBackMemstore=false;
  try {
    rowLock=getRowLock(row);
    try {
      lock(this.updatesLock.readLock());
      try {
        mvcc.waitForPreviousTransactionsComplete();
        if (this.coprocessorHost != null) {
          Result r=this.coprocessorHost.preIncrementAfterRowLock(increment);
          if (r != null) {
            return r;
          }
        }
        mvccNum=MultiVersionConsistencyControl.getPreAssignedWriteNumber(this.sequenceId);
        w=mvcc.beginMemstoreInsertWithSeqNum(mvccNum);
        long now=EnvironmentEdgeManager.currentTimeMillis();
        for (        Map.Entry<byte[],List<Cell>> family : increment.getFamilyCellMap().entrySet()) {
          Store store=stores.get(family.getKey());
          List<Cell> kvs=new ArrayList<Cell>(family.getValue().size());
          Collections.sort(family.getValue(),store.getComparator());
          Get get=new Get(row);
          for (          Cell cell : family.getValue()) {
            get.addColumn(family.getKey(),CellUtil.cloneQualifier(cell));
          }
          get.setTimeRange(tr.getMin(),tr.getMax());
          List<Cell> results=get(get,false);
          int idx=0;
          for (          Cell kv : family.getValue()) {
            long amount=Bytes.toLong(CellUtil.cloneValue(kv));
            boolean noWriteBack=(amount == 0);
            Cell c=null;
            if (idx < results.size() && CellUtil.matchingQualifier(results.get(idx),kv)) {
              c=results.get(idx);
              if (c.getValueLength() == Bytes.SIZEOF_LONG) {
                amount+=Bytes.toLong(c.getValueArray(),c.getValueOffset(),Bytes.SIZEOF_LONG);
              }
 else {
                throw new org.apache.hadoop.hbase.DoNotRetryIOException("Attempted to increment field that isn't 64 bits wide");
              }
              idx++;
            }
            byte[] q=CellUtil.cloneQualifier(kv);
            byte[] val=Bytes.toBytes(amount);
            int oldCellTagsLen=(c == null) ? 0 : c.getTagsLength();
            int incCellTagsLen=kv.getTagsLength();
            KeyValue newKV=new KeyValue(row.length,family.getKey().length,q.length,now,KeyValue.Type.Put,val.length,oldCellTagsLen + incCellTagsLen);
            System.arraycopy(row,0,newKV.getRowArray(),newKV.getRowOffset(),row.length);
            System.arraycopy(family.getKey(),0,newKV.getFamilyArray(),newKV.getFamilyOffset(),family.getKey().length);
            System.arraycopy(q,0,newKV.getQualifierArray(),newKV.getQualifierOffset(),q.length);
            System.arraycopy(val,0,newKV.getValueArray(),newKV.getValueOffset(),val.length);
            if (oldCellTagsLen > 0) {
              System.arraycopy(c.getTagsArray(),c.getTagsOffset(),newKV.getTagsArray(),newKV.getTagsOffset(),oldCellTagsLen);
            }
            if (incCellTagsLen > 0) {
              System.arraycopy(kv.getTagsArray(),kv.getTagsOffset(),newKV.getTagsArray(),newKV.getTagsOffset() + oldCellTagsLen,incCellTagsLen);
            }
            newKV.setSequenceId(mvccNum);
            if (coprocessorHost != null) {
              newKV=KeyValueUtil.ensureKeyValue(coprocessorHost.postMutationBeforeWAL(RegionObserver.MutationType.INCREMENT,increment,c,newKV));
            }
            allKVs.add(newKV);
            if (!noWriteBack) {
              kvs.add(newKV);
              if (writeToWAL) {
                if (walEdits == null) {
                  walEdits=new WALEdit();
                }
                walEdits.add(newKV);
              }
            }
          }
          if (!kvs.isEmpty()) {
            tempMemstore.put(store,kvs);
          }
        }
        if (!tempMemstore.isEmpty()) {
          for (          Map.Entry<Store,List<Cell>> entry : tempMemstore.entrySet()) {
            Store store=entry.getKey();
            if (store.getFamily().getMaxVersions() == 1) {
              size+=store.upsert(entry.getValue(),getSmallestReadPoint());
              memstoreCells.addAll(KeyValueUtil.ensureKeyValues(entry.getValue()));
            }
 else {
              for (              Cell cell : entry.getValue()) {
                KeyValue kv=KeyValueUtil.ensureKeyValue(cell);
                Pair<Long,Cell> ret=store.add(kv);
                size+=ret.getFirst();
                memstoreCells.add(KeyValueUtil.ensureKeyValue(ret.getSecond()));
                doRollBackMemstore=true;
              }
            }
          }
          size=this.addAndGetGlobalMemstoreSize(size);
          flush=isFlushSize(size);
        }
        if (walEdits != null && !walEdits.isEmpty()) {
          if (writeToWAL) {
            walKey=new HLogKey(this.getRegionInfo().getEncodedNameAsBytes(),this.htableDescriptor.getTableName(),HLog.NO_SEQUENCE_ID,nonceGroup,nonce);
            txid=this.log.appendNoSync(this.htableDescriptor,this.getRegionInfo(),walKey,walEdits,getSequenceId(),true,memstoreCells);
          }
 else {
            recordMutationWithoutWal(increment.getFamilyCellMap());
          }
        }
        if (walKey == null) {
          walKey=this.appendNoSyncNoAppend(this.log,memstoreCells);
        }
      }
  finally {
        this.updatesLock.readLock().unlock();
      }
    }
  finally {
      rowLock.release();
      rowLock=null;
    }
    if (txid != 0) {
      syncOrDefer(txid,durability);
    }
    doRollBackMemstore=false;
  }
  finally {
    if (rowLock != null) {
      rowLock.release();
    }
    if (doRollBackMemstore) {
      rollbackMemstore(memstoreCells);
    }
    if (w != null) {
      mvcc.completeMemstoreInsertWithSeqNum(w,walKey);
    }
    closeRegionOperation(Operation.INCREMENT);
    if (this.metricsRegion != null) {
      this.metricsRegion.updateIncrement();
    }
  }
  if (flush) {
    requestFlush();
  }
  return Result.create(allKVs);
}
