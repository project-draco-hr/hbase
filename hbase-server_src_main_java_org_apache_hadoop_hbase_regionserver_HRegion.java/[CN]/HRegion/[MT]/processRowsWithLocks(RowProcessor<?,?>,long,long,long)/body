{
  for (  byte[] row : processor.getRowsToLock()) {
    checkRow(row,"processRowsWithLocks");
  }
  if (!processor.readOnly()) {
    checkReadOnly();
  }
  checkResources();
  startRegionOperation();
  WALEdit walEdit=new WALEdit();
  preProcess(processor,walEdit);
  if (processor.readOnly()) {
    try {
      long now=EnvironmentEdgeManager.currentTime();
      doProcessRowWithTimeout(processor,now,this,null,null,timeout);
      processor.postProcess(this,walEdit,true);
    }
  finally {
      closeRegionOperation();
    }
    return;
  }
  boolean locked;
  List<RowLock> acquiredRowLocks;
  long addedSize=0;
  List<Mutation> mutations=new ArrayList<Mutation>();
  Collection<byte[]> rowsToLock=processor.getRowsToLock();
  WriteEntry writeEntry=null;
  try {
    acquiredRowLocks=new ArrayList<RowLock>(rowsToLock.size());
    for (    byte[] row : rowsToLock) {
      acquiredRowLocks.add(getRowLockInternal(row,false));
    }
    lock(this.updatesLock.readLock(),acquiredRowLocks.size() == 0 ? 1 : acquiredRowLocks.size());
    locked=true;
    boolean success=false;
    long now=EnvironmentEdgeManager.currentTime();
    try {
      doProcessRowWithTimeout(processor,now,this,mutations,walEdit,timeout);
      if (!mutations.isEmpty()) {
        processor.preBatchMutate(this,walEdit);
        if (!walEdit.isEmpty()) {
          writeEntry=doWALAppend(walEdit,getEffectiveDurability(processor.useDurability()),processor.getClusterIds(),now,nonceGroup,nonce);
        }
 else {
          writeEntry=this.mvcc.begin();
        }
        long sequenceId=writeEntry.getWriteNumber();
        for (        Mutation m : mutations) {
          rewriteCellTags(m.getFamilyCellMap(),m);
          for (CellScanner cellScanner=m.cellScanner(); cellScanner.advance(); ) {
            Cell cell=cellScanner.current();
            if (walEdit.isEmpty()) {
              CellUtil.setSequenceId(cell,sequenceId);
            }
            addedSize+=applyToMemstore(getHStore(cell),cell);
          }
        }
        mvcc.completeAndWait(writeEntry);
        writeEntry=null;
        if (locked) {
          this.updatesLock.readLock().unlock();
          locked=false;
        }
        releaseRowLocks(acquiredRowLocks);
        processor.postBatchMutate(this);
      }
      success=true;
    }
  finally {
      if (writeEntry != null)       mvcc.complete(writeEntry);
      if (locked) {
        this.updatesLock.readLock().unlock();
      }
      releaseRowLocks(acquiredRowLocks);
    }
    processor.postProcess(this,walEdit,success);
  }
  finally {
    closeRegionOperation();
    if (!mutations.isEmpty()) {
      long newSize=this.addAndGetGlobalMemstoreSize(addedSize);
      requestFlushIfNeeded(newSize);
    }
  }
}
