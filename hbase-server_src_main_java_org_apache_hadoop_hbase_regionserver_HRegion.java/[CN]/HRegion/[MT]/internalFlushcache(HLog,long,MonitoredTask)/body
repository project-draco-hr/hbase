{
  final long startTime=EnvironmentEdgeManager.currentTimeMillis();
  this.lastFlushTime=startTime;
  if (this.memstoreSize.get() <= 0) {
    return false;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Started memstore flush for " + this + ", current region memstore size "+ StringUtils.humanReadableInt(this.memstoreSize.get())+ ((wal != null) ? "" : "; wal is null, using passed sequenceid=" + myseqid));
  }
  long sequenceId=-1L;
  MultiVersionConsistencyControl.WriteEntry w=null;
  status.setStatus("Obtaining lock to block concurrent updates");
  this.updatesLock.writeLock().lock();
  long flushsize=this.memstoreSize.get();
  status.setStatus("Preparing to flush by snapshotting stores");
  List<StoreFlusher> storeFlushers=new ArrayList<StoreFlusher>(stores.size());
  long completeSeqId=-1L;
  try {
    w=mvcc.beginMemstoreInsert();
    mvcc.advanceMemstore(w);
    sequenceId=(wal == null) ? myseqid : wal.startCacheFlush(this.regionInfo.getEncodedNameAsBytes());
    completeSeqId=this.getCompleteCacheFlushSequenceId(sequenceId);
    for (    Store s : stores.values()) {
      storeFlushers.add(s.getStoreFlusher(completeSeqId));
    }
    for (    StoreFlusher flusher : storeFlushers) {
      flusher.prepare();
    }
  }
  finally {
    this.updatesLock.writeLock().unlock();
  }
  String s="Finished snapshotting " + this + ", commencing wait for mvcc, flushsize="+ flushsize;
  status.setStatus(s);
  LOG.debug(s);
  mvcc.waitForRead(w);
  status.setStatus("Flushing stores");
  LOG.debug("Finished snapshotting, commencing flushing stores");
  boolean compactionRequested=false;
  try {
    for (    StoreFlusher flusher : storeFlushers) {
      flusher.flushCache(status);
    }
    for (    StoreFlusher flusher : storeFlushers) {
      boolean needsCompaction=flusher.commit(status);
      if (needsCompaction) {
        compactionRequested=true;
      }
    }
    storeFlushers.clear();
    this.addAndGetGlobalMemstoreSize(-flushsize);
  }
 catch (  Throwable t) {
    if (wal != null) {
      wal.abortCacheFlush(this.regionInfo.getEncodedNameAsBytes());
    }
    DroppedSnapshotException dse=new DroppedSnapshotException("region: " + Bytes.toStringBinary(getRegionName()));
    dse.initCause(t);
    status.abort("Flush failed: " + StringUtils.stringifyException(t));
    throw dse;
  }
  if (wal != null) {
    wal.completeCacheFlush(this.regionInfo.getEncodedNameAsBytes(),regionInfo.getTableName(),completeSeqId,this.getRegionInfo().isMetaRegion());
  }
  if (this.rsServices != null) {
    completeSequenceId=completeSeqId;
  }
synchronized (this) {
    notifyAll();
  }
  long time=EnvironmentEdgeManager.currentTimeMillis() - startTime;
  long memstoresize=this.memstoreSize.get();
  String msg="Finished memstore flush of ~" + StringUtils.humanReadableInt(flushsize) + "/"+ flushsize+ ", currentsize="+ StringUtils.humanReadableInt(memstoresize)+ "/"+ memstoresize+ " for region "+ this+ " in "+ time+ "ms, sequenceid="+ sequenceId+ ", compaction requested="+ compactionRequested+ ((wal == null) ? "; wal=null" : "");
  LOG.info(msg);
  status.setStatus(msg);
  this.recentFlushes.add(new Pair<Long,Long>(time / 1000,flushsize));
  return compactionRequested;
}
