{
  if (this.closing.get()) {
    String msg="Skipping flush on " + this + " because closing";
    LOG.debug(msg);
    return new FlushResultImpl(FlushResult.Result.CANNOT_FLUSH,msg,false);
  }
  MonitoredTask status=TaskMonitor.get().createStatus("Flushing " + this);
  status.setStatus("Acquiring readlock on region");
  lock.readLock().lock();
  try {
    if (this.closed.get()) {
      String msg="Skipping flush on " + this + " because closed";
      LOG.debug(msg);
      status.abort(msg);
      return new FlushResultImpl(FlushResult.Result.CANNOT_FLUSH,msg,false);
    }
    if (coprocessorHost != null) {
      status.setStatus("Running coprocessor pre-flush hooks");
      coprocessorHost.preFlush();
    }
    if (numMutationsWithoutWAL.get() > 0) {
      numMutationsWithoutWAL.set(0);
      dataInMemoryWithoutWAL.set(0);
    }
synchronized (writestate) {
      if (!writestate.flushing && writestate.writesEnabled) {
        this.writestate.flushing=true;
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("NOT flushing memstore for region " + this + ", flushing="+ writestate.flushing+ ", writesEnabled="+ writestate.writesEnabled);
        }
        String msg="Not flushing since " + (writestate.flushing ? "already flushing" : "writes not enabled");
        status.abort(msg);
        return new FlushResultImpl(FlushResult.Result.CANNOT_FLUSH,msg,false);
      }
    }
    try {
      Collection<Store> specificStoresToFlush=forceFlushAllStores ? stores.values() : flushPolicy.selectStoresToFlush();
      FlushResult fs=internalFlushcache(specificStoresToFlush,status,writeFlushRequestWalMarker);
      if (coprocessorHost != null) {
        status.setStatus("Running post-flush coprocessor hooks");
        coprocessorHost.postFlush();
      }
      status.markComplete("Flush successful");
      return fs;
    }
  finally {
synchronized (writestate) {
        writestate.flushing=false;
        this.writestate.flushRequested=false;
        writestate.notifyAll();
      }
    }
  }
  finally {
    lock.readLock().unlock();
    status.cleanup();
  }
}
