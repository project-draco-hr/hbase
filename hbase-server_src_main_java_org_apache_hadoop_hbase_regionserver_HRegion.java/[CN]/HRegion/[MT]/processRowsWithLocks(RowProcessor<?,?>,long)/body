{
  for (  byte[] row : processor.getRowsToLock()) {
    checkRow(row,"processRowsWithLocks");
  }
  if (!processor.readOnly()) {
    checkReadOnly();
  }
  checkResources();
  startRegionOperation();
  WALEdit walEdit=new WALEdit();
  processor.preProcess(this,walEdit);
  if (processor.readOnly()) {
    try {
      long now=EnvironmentEdgeManager.currentTimeMillis();
      doProcessRowWithTimeout(processor,now,this,null,null,timeout);
      processor.postProcess(this,walEdit);
    }
 catch (    IOException e) {
      throw e;
    }
 finally {
      closeRegionOperation();
    }
    return;
  }
  MultiVersionConsistencyControl.WriteEntry writeEntry=null;
  boolean locked=false;
  boolean walSyncSuccessful=false;
  List<RowLock> acquiredRowLocks=null;
  long addedSize=0;
  List<KeyValue> mutations=new ArrayList<KeyValue>();
  Collection<byte[]> rowsToLock=processor.getRowsToLock();
  try {
    acquiredRowLocks=new ArrayList<RowLock>(rowsToLock.size());
    for (    byte[] row : rowsToLock) {
      acquiredRowLocks.add(getRowLock(row));
    }
    lock(this.updatesLock.readLock(),acquiredRowLocks.size());
    locked=true;
    long now=EnvironmentEdgeManager.currentTimeMillis();
    try {
      doProcessRowWithTimeout(processor,now,this,mutations,walEdit,timeout);
      if (!mutations.isEmpty()) {
        writeEntry=mvcc.beginMemstoreInsert();
        for (        KeyValue kv : mutations) {
          kv.setMvccVersion(writeEntry.getWriteNumber());
          byte[] family=kv.getFamily();
          checkFamily(family);
          addedSize+=stores.get(family).add(kv);
        }
        long txid=0;
        if (!walEdit.isEmpty()) {
          txid=this.log.appendNoSync(this.getRegionInfo(),this.htableDescriptor.getTableName(),walEdit,processor.getClusterIds(),now,this.htableDescriptor,this.getCoprocessorHost());
        }
        if (locked) {
          this.updatesLock.readLock().unlock();
          locked=false;
        }
        releaseRowLocks(acquiredRowLocks);
        if (txid != 0) {
          syncOrDefer(txid,getEffectiveDurability(processor.useDurability()));
        }
        walSyncSuccessful=true;
      }
    }
  finally {
      if (!mutations.isEmpty() && !walSyncSuccessful) {
        LOG.warn("Wal sync failed. Roll back " + mutations.size() + " memstore keyvalues for row(s):"+ processor.getRowsToLock().iterator().next()+ "...");
        for (        KeyValue kv : mutations) {
          stores.get(kv.getFamily()).rollback(kv);
        }
      }
      if (writeEntry != null) {
        mvcc.completeMemstoreInsert(writeEntry);
        writeEntry=null;
      }
      if (locked) {
        this.updatesLock.readLock().unlock();
        locked=false;
      }
      releaseRowLocks(acquiredRowLocks);
    }
    processor.postProcess(this,walEdit);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    closeRegionOperation();
    if (!mutations.isEmpty() && isFlushSize(this.addAndGetGlobalMemstoreSize(addedSize))) {
      requestFlush();
    }
  }
}
