{
  HashedBytes rowKey=new HashedBytes(row);
  RowLockContext rowLockContext=null;
  RowLockImpl result=null;
  TraceScope traceScope=null;
  if (Trace.isTracing()) {
    traceScope=Trace.startSpan("HRegion.getRowLock");
    traceScope.getSpan().addTimelineAnnotation("Getting a " + (readLock ? "readLock" : "writeLock"));
  }
  try {
    while (result == null) {
      rowLockContext=new RowLockContext(rowKey);
      RowLockContext existingContext=lockedRows.putIfAbsent(rowKey,rowLockContext);
      if (existingContext != null) {
        rowLockContext=existingContext;
      }
      if (readLock) {
        result=rowLockContext.newReadLock();
      }
 else {
        result=rowLockContext.newWriteLock();
      }
    }
    if (!result.getLock().tryLock(this.rowLockWaitDuration,TimeUnit.MILLISECONDS)) {
      if (traceScope != null) {
        traceScope.getSpan().addTimelineAnnotation("Failed to get row lock");
      }
      result=null;
      rowLockContext.cleanUp();
      throw new IOException("Timed out waiting for lock for row: " + rowKey);
    }
    rowLockContext.setThreadName(Thread.currentThread().getName());
    return result;
  }
 catch (  InterruptedException ie) {
    LOG.warn("Thread interrupted waiting for lock on row: " + rowKey);
    InterruptedIOException iie=new InterruptedIOException();
    iie.initCause(ie);
    if (traceScope != null) {
      traceScope.getSpan().addTimelineAnnotation("Interrupted exception getting row lock");
    }
    Thread.currentThread().interrupt();
    throw iie;
  }
 finally {
    if (traceScope != null) {
      traceScope.close();
    }
  }
}
