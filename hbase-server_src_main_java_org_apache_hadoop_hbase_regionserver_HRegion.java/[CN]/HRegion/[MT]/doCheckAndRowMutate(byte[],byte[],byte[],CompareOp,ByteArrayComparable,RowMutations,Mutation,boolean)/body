{
  checkReadOnly();
  checkResources();
  startRegionOperation();
  try {
    Get get=new Get(row);
    checkFamily(family);
    get.addColumn(family,qualifier);
    RowLock rowLock=getRowLock(get.getRow());
    try {
      if (mutation != null && this.getCoprocessorHost() != null) {
        Boolean processed=null;
        if (mutation instanceof Put) {
          processed=this.getCoprocessorHost().preCheckAndPutAfterRowLock(row,family,qualifier,compareOp,comparator,(Put)mutation);
        }
 else         if (mutation instanceof Delete) {
          processed=this.getCoprocessorHost().preCheckAndDeleteAfterRowLock(row,family,qualifier,compareOp,comparator,(Delete)mutation);
        }
        if (processed != null) {
          return processed;
        }
      }
      List<Cell> result=get(get,false);
      boolean valueIsNull=comparator.getValue() == null || comparator.getValue().length == 0;
      boolean matches=false;
      long cellTs=0;
      if (result.size() == 0 && valueIsNull) {
        matches=true;
      }
 else       if (result.size() > 0 && result.get(0).getValueLength() == 0 && valueIsNull) {
        matches=true;
        cellTs=result.get(0).getTimestamp();
      }
 else       if (result.size() == 1 && !valueIsNull) {
        Cell kv=result.get(0);
        cellTs=kv.getTimestamp();
        int compareResult=CellComparator.compareValue(kv,comparator);
        matches=matches(compareOp,compareResult);
      }
      if (matches) {
        long now=EnvironmentEdgeManager.currentTime();
        long ts=Math.max(now,cellTs);
        byte[] byteTs=Bytes.toBytes(ts);
        if (mutation != null) {
          if (mutation instanceof Put) {
            updateCellTimestamps(mutation.getFamilyCellMap().values(),byteTs);
          }
        }
 else {
          for (          Mutation m : rowMutations.getMutations()) {
            if (m instanceof Put) {
              updateCellTimestamps(m.getFamilyCellMap().values(),byteTs);
            }
          }
        }
        if (mutation != null) {
          doBatchMutate(mutation);
        }
 else {
          mutateRow(rowMutations);
        }
        this.checkAndMutateChecksPassed.increment();
        return true;
      }
      this.checkAndMutateChecksFailed.increment();
      return false;
    }
  finally {
      rowLock.release();
    }
  }
  finally {
    closeRegionOperation();
  }
}
