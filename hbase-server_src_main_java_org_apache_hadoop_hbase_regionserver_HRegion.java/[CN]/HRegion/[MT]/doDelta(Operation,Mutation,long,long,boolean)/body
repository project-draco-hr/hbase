{
  checkReadOnly();
  checkResources();
  checkRow(mutation.getRow(),op.toString());
  checkFamilies(mutation.getFamilyCellMap().keySet());
  this.writeRequestsCount.increment();
  WriteEntry writeEntry=null;
  startRegionOperation(op);
  long accumulatedResultSize=0;
  List<Cell> results=returnResults ? new ArrayList<Cell>(mutation.size()) : null;
  RowLock rowLock=getRowLockInternal(mutation.getRow(),false);
  try {
    lock(this.updatesLock.readLock());
    try {
      Result cpResult=doCoprocessorPreCall(op,mutation);
      if (cpResult != null) {
        return returnResults ? cpResult : null;
      }
      Durability effectiveDurability=getEffectiveDurability(mutation.getDurability());
      Map<Store,List<Cell>> forMemStore=new HashMap<Store,List<Cell>>(mutation.getFamilyCellMap().size());
      WALEdit walEdit=reckonDeltas(op,mutation,effectiveDurability,forMemStore,results);
      if (walEdit != null && !walEdit.isEmpty()) {
        writeEntry=doWALAppend(walEdit,durability,nonceGroup,nonce);
      }
 else {
        recordMutationWithoutWal(mutation.getFamilyCellMap());
        writeEntry=mvcc.begin();
        updateSequenceId(forMemStore.values(),writeEntry.getWriteNumber());
      }
      for (      Map.Entry<Store,List<Cell>> e : forMemStore.entrySet()) {
        accumulatedResultSize+=applyToMemstore(e.getKey(),e.getValue(),true);
      }
      mvcc.completeAndWait(writeEntry);
      if (rsServices != null && rsServices.getNonceManager() != null) {
        rsServices.getNonceManager().addMvccToOperationContext(nonceGroup,nonce,writeEntry.getWriteNumber());
      }
      writeEntry=null;
    }
  finally {
      this.updatesLock.readLock().unlock();
      dropMemstoreContents();
    }
    return results != null && returnResults ? Result.create(results) : null;
  }
  finally {
    if (writeEntry != null)     mvcc.complete(writeEntry);
    rowLock.release();
    if (isFlushSize(this.addAndGetGlobalMemstoreSize(accumulatedResultSize)))     requestFlush();
    closeRegionOperation(op);
    if (this.metricsRegion != null) {
switch (op) {
case INCREMENT:
        this.metricsRegion.updateIncrement();
      break;
case APPEND:
    this.metricsRegion.updateAppend();
  break;
default :
break;
}
}
}
}
