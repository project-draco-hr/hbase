{
  checkReadOnly();
  checkResources();
  boolean isPut=w instanceof Put;
  if (!isPut && !(w instanceof Delete))   throw new org.apache.hadoop.hbase.DoNotRetryIOException("Action must " + "be Put or Delete");
  if (!Bytes.equals(row,w.getRow())) {
    throw new org.apache.hadoop.hbase.DoNotRetryIOException("Action's " + "getRow must match the passed row");
  }
  startRegionOperation();
  try {
    Get get=new Get(row);
    checkFamily(family);
    get.addColumn(family,qualifier);
    RowLock rowLock=getRowLock(get.getRow());
    mvcc.completeMemstoreInsert(mvcc.beginMemstoreInsert());
    try {
      if (this.getCoprocessorHost() != null) {
        Boolean processed=null;
        if (w instanceof Put) {
          processed=this.getCoprocessorHost().preCheckAndPutAfterRowLock(row,family,qualifier,compareOp,comparator,(Put)w);
        }
 else         if (w instanceof Delete) {
          processed=this.getCoprocessorHost().preCheckAndDeleteAfterRowLock(row,family,qualifier,compareOp,comparator,(Delete)w);
        }
        if (processed != null) {
          return processed;
        }
      }
      List<Cell> result=get(get,false);
      boolean valueIsNull=comparator.getValue() == null || comparator.getValue().length == 0;
      boolean matches=false;
      if (result.size() == 0 && valueIsNull) {
        matches=true;
      }
 else       if (result.size() > 0 && result.get(0).getValueLength() == 0 && valueIsNull) {
        matches=true;
      }
 else       if (result.size() == 1 && !valueIsNull) {
        Cell kv=result.get(0);
        int compareResult=comparator.compareTo(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength());
switch (compareOp) {
case LESS:
          matches=compareResult < 0;
        break;
case LESS_OR_EQUAL:
      matches=compareResult <= 0;
    break;
case EQUAL:
  matches=compareResult == 0;
break;
case NOT_EQUAL:
matches=compareResult != 0;
break;
case GREATER_OR_EQUAL:
matches=compareResult >= 0;
break;
case GREATER:
matches=compareResult > 0;
break;
default :
throw new RuntimeException("Unknown Compare op " + compareOp.name());
}
}
if (matches) {
doBatchMutate(w);
this.checkAndMutateChecksPassed.increment();
return true;
}
this.checkAndMutateChecksFailed.increment();
return false;
}
  finally {
rowLock.release();
}
}
  finally {
closeRegionOperation();
}
}
