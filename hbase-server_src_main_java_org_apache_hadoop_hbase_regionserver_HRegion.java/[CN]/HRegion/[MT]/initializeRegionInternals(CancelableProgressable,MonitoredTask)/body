{
  if (coprocessorHost != null) {
    status.setStatus("Running coprocessor pre-open hook");
    coprocessorHost.preOpen();
  }
  status.setStatus("Writing region info on filesystem");
  fs.checkRegionInfoOnFilesystem();
  status.setStatus("Cleaning up temporary data from old regions");
  fs.cleanupTempDir();
  status.setStatus("Initializing all the Stores");
  long maxSeqId=initializeRegionStores(reporter,status);
  status.setStatus("Cleaning up detritus from prior splits");
  fs.cleanupAnySplitDetritus();
  fs.cleanupMergesDir();
  this.writestate.setReadOnly(this.htableDescriptor.isReadOnly());
  this.writestate.flushRequested=false;
  this.writestate.compacting=0;
  this.splitPolicy=RegionSplitPolicy.create(this,conf);
  this.lastFlushTime=EnvironmentEdgeManager.currentTimeMillis();
  long nextSeqid=maxSeqId + 1;
  if (this.isRecovering) {
    nextSeqid+=this.flushPerChanges + 10000000;
  }
  LOG.info("Onlined " + this.getRegionInfo().getShortNameToLog() + "; next sequenceid="+ nextSeqid);
  this.closing.set(false);
  this.closed.set(false);
  this.lastFlushSeqId=nextSeqid;
  if (coprocessorHost != null) {
    status.setStatus("Running coprocessor post-open hooks");
    coprocessorHost.postOpen();
  }
  status.markComplete("Region opened successfully");
  return nextSeqid;
}
