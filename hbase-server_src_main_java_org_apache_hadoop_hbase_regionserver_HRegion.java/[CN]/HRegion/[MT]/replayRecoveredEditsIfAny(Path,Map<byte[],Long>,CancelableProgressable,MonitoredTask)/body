{
  long minSeqIdForTheRegion=-1;
  for (  Long maxSeqIdInStore : maxSeqIdInStores.values()) {
    if (maxSeqIdInStore < minSeqIdForTheRegion || minSeqIdForTheRegion == -1) {
      minSeqIdForTheRegion=maxSeqIdInStore;
    }
  }
  long seqid=minSeqIdForTheRegion;
  FileSystem fs=this.fs.getFileSystem();
  NavigableSet<Path> files=WALSplitter.getSplitEditFilesSorted(fs,regiondir);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Found " + (files == null ? 0 : files.size()) + " recovered edits file(s) under "+ regiondir);
  }
  if (files == null || files.isEmpty())   return seqid;
  for (  Path edits : files) {
    if (edits == null || !fs.exists(edits)) {
      LOG.warn("Null or non-existent edits file: " + edits);
      continue;
    }
    if (isZeroLengthThenDelete(fs,edits))     continue;
    long maxSeqId;
    String fileName=edits.getName();
    maxSeqId=Math.abs(Long.parseLong(fileName));
    if (maxSeqId <= minSeqIdForTheRegion) {
      if (LOG.isDebugEnabled()) {
        String msg="Maximum sequenceid for this wal is " + maxSeqId + " and minimum sequenceid for the region is "+ minSeqIdForTheRegion+ ", skipped the whole file, path="+ edits;
        LOG.debug(msg);
      }
      continue;
    }
    try {
      seqid=Math.max(seqid,replayRecoveredEdits(edits,maxSeqIdInStores,reporter));
    }
 catch (    IOException e) {
      boolean skipErrors=conf.getBoolean(HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS,conf.getBoolean("hbase.skip.errors",HConstants.DEFAULT_HREGION_EDITS_REPLAY_SKIP_ERRORS));
      if (conf.get("hbase.skip.errors") != null) {
        LOG.warn("The property 'hbase.skip.errors' has been deprecated. Please use " + HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS + " instead.");
      }
      if (skipErrors) {
        Path p=WALSplitter.moveAsideBadEditsFile(fs,edits);
        LOG.error(HConstants.HREGION_EDITS_REPLAY_SKIP_ERRORS + "=true so continuing. Renamed " + edits+ " as "+ p,e);
      }
 else {
        throw e;
      }
    }
  }
  if (this.rsAccounting != null) {
    this.rsAccounting.clearRegionReplayEditsSize(getRegionInfo().getRegionName());
  }
  if (seqid > minSeqIdForTheRegion) {
    internalFlushcache(null,seqid,stores.values(),status,false);
  }
  if (files.size() > 0 && this.conf.getBoolean("hbase.region.archive.recovered.edits",false)) {
    String fakeFamilyName=WALSplitter.getRegionDirRecoveredEditsDir(regiondir).getName();
    Set<StoreFile> fakeStoreFiles=new HashSet<StoreFile>(files.size());
    for (    Path file : files) {
      fakeStoreFiles.add(new StoreFile(getRegionFileSystem().getFileSystem(),file,this.conf,null,null));
    }
    getRegionFileSystem().removeStoreFiles(fakeFamilyName,fakeStoreFiles);
  }
 else {
    for (    Path file : files) {
      if (!fs.delete(file,false)) {
        LOG.error("Failed delete of " + file);
      }
 else {
        LOG.debug("Deleted recovered.edits file=" + file);
      }
    }
  }
  return seqid;
}
