{
  checkReadOnly();
  checkResources();
  startRegionOperation();
  try {
    Get get=new Get(row);
    checkFamily(family);
    get.addColumn(family,qualifier);
    RowLock rowLock=getRowLock(get.getRow());
    mvcc.await();
    try {
      List<Cell> result=get(get,false);
      boolean valueIsNull=comparator.getValue() == null || comparator.getValue().length == 0;
      boolean matches=false;
      long cellTs=0;
      if (result.size() == 0 && valueIsNull) {
        matches=true;
      }
 else       if (result.size() > 0 && result.get(0).getValueLength() == 0 && valueIsNull) {
        matches=true;
        cellTs=result.get(0).getTimestamp();
      }
 else       if (result.size() == 1 && !valueIsNull) {
        Cell kv=result.get(0);
        cellTs=kv.getTimestamp();
        int compareResult=CellComparator.compareValue(kv,comparator);
switch (compareOp) {
case LESS:
          matches=compareResult < 0;
        break;
case LESS_OR_EQUAL:
      matches=compareResult <= 0;
    break;
case EQUAL:
  matches=compareResult == 0;
break;
case NOT_EQUAL:
matches=compareResult != 0;
break;
case GREATER_OR_EQUAL:
matches=compareResult >= 0;
break;
case GREATER:
matches=compareResult > 0;
break;
default :
throw new RuntimeException("Unknown Compare op " + compareOp.name());
}
}
if (matches) {
long now=EnvironmentEdgeManager.currentTime();
long ts=Math.max(now,cellTs);
byte[] byteTs=Bytes.toBytes(ts);
for (Mutation w : rm.getMutations()) {
if (w instanceof Put) {
updateCellTimestamps(w.getFamilyCellMap().values(),byteTs);
}
}
mutateRow(rm);
this.checkAndMutateChecksPassed.increment();
return true;
}
this.checkAndMutateChecksFailed.increment();
return false;
}
  finally {
rowLock.release();
}
}
  finally {
closeRegionOperation();
}
}
