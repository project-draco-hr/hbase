{
  byte[] row=append.getRow();
  checkRow(row,"append");
  boolean flush=false;
  Durability durability=getEffectiveDurability(append.getDurability());
  boolean writeToWAL=durability != Durability.SKIP_WAL;
  WALEdit walEdits=null;
  List<Cell> allKVs=new ArrayList<Cell>(append.size());
  Map<Store,List<Cell>> tempMemstore=new HashMap<Store,List<Cell>>();
  long size=0;
  long txid=0;
  checkReadOnly();
  checkResources();
  startRegionOperation(Operation.APPEND);
  this.writeRequestsCount.increment();
  WriteEntry w=null;
  RowLock rowLock;
  try {
    rowLock=getRowLock(row);
    try {
      lock(this.updatesLock.readLock());
      try {
        mvcc.completeMemstoreInsert(mvcc.beginMemstoreInsert());
        if (this.coprocessorHost != null) {
          Result r=this.coprocessorHost.preAppendAfterRowLock(append);
          if (r != null) {
            return r;
          }
        }
        w=mvcc.beginMemstoreInsert();
        long now=EnvironmentEdgeManager.currentTimeMillis();
        for (        Map.Entry<byte[],List<Cell>> family : append.getFamilyCellMap().entrySet()) {
          Store store=stores.get(family.getKey());
          List<Cell> kvs=new ArrayList<Cell>(family.getValue().size());
          Collections.sort(family.getValue(),store.getComparator());
          Get get=new Get(row);
          for (          Cell cell : family.getValue()) {
            get.addColumn(family.getKey(),CellUtil.cloneQualifier(cell));
          }
          List<Cell> results=get(get,false);
          int idx=0;
          for (          Cell cell : family.getValue()) {
            KeyValue kv=KeyValueUtil.ensureKeyValue(cell);
            KeyValue newKV;
            KeyValue oldKv=null;
            if (idx < results.size() && CellUtil.matchingQualifier(results.get(idx),kv)) {
              oldKv=KeyValueUtil.ensureKeyValue(results.get(idx));
              newKV=new KeyValue(row.length,kv.getFamilyLength(),kv.getQualifierLength(),now,KeyValue.Type.Put,oldKv.getValueLength() + kv.getValueLength(),oldKv.getTagsLength() + kv.getTagsLength());
              System.arraycopy(oldKv.getValueArray(),oldKv.getValueOffset(),newKV.getValueArray(),newKV.getValueOffset(),oldKv.getValueLength());
              System.arraycopy(kv.getValueArray(),kv.getValueOffset(),newKV.getValueArray(),newKV.getValueOffset() + oldKv.getValueLength(),kv.getValueLength());
              System.arraycopy(oldKv.getTagsArray(),oldKv.getTagsOffset(),newKV.getTagsArray(),newKV.getTagsOffset(),oldKv.getTagsLength());
              System.arraycopy(kv.getTagsArray(),kv.getTagsOffset(),newKV.getTagsArray(),newKV.getTagsOffset() + oldKv.getTagsLength(),kv.getTagsLength());
              System.arraycopy(kv.getRowArray(),kv.getRowOffset(),newKV.getRowArray(),newKV.getRowOffset(),kv.getRowLength());
              System.arraycopy(kv.getFamilyArray(),kv.getFamilyOffset(),newKV.getFamilyArray(),newKV.getFamilyOffset(),kv.getFamilyLength());
              System.arraycopy(kv.getQualifierArray(),kv.getQualifierOffset(),newKV.getQualifierArray(),newKV.getQualifierOffset(),kv.getQualifierLength());
              idx++;
            }
 else {
              newKV=kv;
              newKV.updateLatestStamp(Bytes.toBytes(now));
            }
            newKV.setMvccVersion(w.getWriteNumber());
            if (coprocessorHost != null) {
              newKV=KeyValueUtil.ensureKeyValue(coprocessorHost.postMutationBeforeWAL(RegionObserver.MutationType.APPEND,append,oldKv,newKV));
            }
            kvs.add(newKV);
            if (writeToWAL) {
              if (walEdits == null) {
                walEdits=new WALEdit();
              }
              walEdits.add(newKV);
            }
          }
          tempMemstore.put(store,kvs);
        }
        if (writeToWAL) {
          HLogKey key=new HLogKey(getRegionInfo().getEncodedNameAsBytes(),this.htableDescriptor.getTableName(),nonceGroup,nonce);
          txid=this.log.appendNoSync(this.htableDescriptor,getRegionInfo(),key,walEdits,this.sequenceId,true);
        }
 else {
          recordMutationWithoutWal(append.getFamilyCellMap());
        }
        for (        Map.Entry<Store,List<Cell>> entry : tempMemstore.entrySet()) {
          Store store=entry.getKey();
          if (store.getFamily().getMaxVersions() == 1) {
            size+=store.upsert(entry.getValue(),getSmallestReadPoint());
          }
 else {
            for (            Cell cell : entry.getValue()) {
              KeyValue kv=KeyValueUtil.ensureKeyValue(cell);
              size+=store.add(kv);
            }
          }
          allKVs.addAll(entry.getValue());
        }
        size=this.addAndGetGlobalMemstoreSize(size);
        flush=isFlushSize(size);
      }
  finally {
        this.updatesLock.readLock().unlock();
      }
    }
  finally {
      rowLock.release();
    }
    if (writeToWAL) {
      syncOrDefer(txid,durability);
    }
  }
  finally {
    if (w != null) {
      mvcc.completeMemstoreInsert(w);
    }
    closeRegionOperation(Operation.APPEND);
  }
  if (this.metricsRegion != null) {
    this.metricsRegion.updateAppend();
  }
  if (flush) {
    requestFlush();
  }
  return append.isReturnResults() ? Result.create(allKVs) : null;
}
