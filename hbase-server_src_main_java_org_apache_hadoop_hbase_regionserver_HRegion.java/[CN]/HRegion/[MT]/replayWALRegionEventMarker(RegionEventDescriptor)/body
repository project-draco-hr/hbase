{
  checkTargetRegion(regionEvent.getEncodedRegionName().toByteArray(),"RegionEvent marker from WAL ",regionEvent);
  startRegionOperation(Operation.REPLAY_EVENT);
  try {
    if (ServerRegionReplicaUtil.isDefaultReplica(this.getRegionInfo())) {
      return;
    }
    if (regionEvent.getEventType() == EventType.REGION_CLOSE) {
      return;
    }
    if (regionEvent.getEventType() != EventType.REGION_OPEN) {
      LOG.warn("Unknown region event received, ignoring :" + TextFormat.shortDebugString(regionEvent));
      return;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Replaying region open event marker " + TextFormat.shortDebugString(regionEvent));
    }
synchronized (writestate) {
      if (this.lastReplayedOpenRegionSeqId < regionEvent.getLogSequenceNumber()) {
        this.lastReplayedOpenRegionSeqId=regionEvent.getLogSequenceNumber();
      }
 else {
        LOG.warn("Skipping replaying region event :" + TextFormat.shortDebugString(regionEvent) + " because its sequence id is smaller than this regions lastReplayedOpenRegionSeqId "+ " of "+ lastReplayedOpenRegionSeqId);
        return;
      }
      for (      StoreDescriptor storeDescriptor : regionEvent.getStoresList()) {
        byte[] family=storeDescriptor.getFamilyName().toByteArray();
        Store store=getStore(family);
        if (store == null) {
          LOG.warn("Received a region open marker from primary, but the family is not found. " + "Ignoring. StoreDescriptor:" + storeDescriptor);
          continue;
        }
        long storeSeqId=store.getMaxSequenceId();
        List<String> storeFiles=storeDescriptor.getStoreFileList();
        store.refreshStoreFiles(storeFiles);
        if (store.getMaxSequenceId() != storeSeqId) {
          lastStoreFlushTimeMap.put(store,EnvironmentEdgeManager.currentTime());
        }
        if (writestate.flushing) {
          if (this.prepareFlushResult.flushOpSeqId <= regionEvent.getLogSequenceNumber()) {
            StoreFlushContext ctx=this.prepareFlushResult.storeFlushCtxs.get(family);
            if (ctx != null) {
              long snapshotSize=store.getFlushableSize();
              ctx.abort();
              this.addAndGetGlobalMemstoreSize(-snapshotSize);
              this.prepareFlushResult.storeFlushCtxs.remove(family);
            }
          }
        }
        dropMemstoreContentsForSeqId(regionEvent.getLogSequenceNumber(),store);
        if (storeSeqId > this.maxFlushedSeqId) {
          this.maxFlushedSeqId=storeSeqId;
        }
      }
      if (writestate.flushing) {
        boolean canDrop=true;
        for (        Entry<byte[],StoreFlushContext> entry : prepareFlushResult.storeFlushCtxs.entrySet()) {
          Store store=getStore(entry.getKey());
          if (store == null) {
            continue;
          }
          if (store.getSnapshotSize() > 0) {
            canDrop=false;
          }
        }
        if (canDrop) {
          writestate.flushing=false;
          this.prepareFlushResult=null;
        }
      }
      getMVCC().advanceMemstoreReadPointIfNeeded(this.maxFlushedSeqId);
synchronized (this) {
        notifyAll();
      }
    }
  }
  finally {
    closeRegionOperation(Operation.REPLAY_EVENT);
  }
}
