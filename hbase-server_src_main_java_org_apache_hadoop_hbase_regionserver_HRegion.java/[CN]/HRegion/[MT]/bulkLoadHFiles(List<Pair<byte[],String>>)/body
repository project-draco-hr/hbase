{
  Preconditions.checkNotNull(familyPaths);
  startBulkRegionOperation(hasMultipleColumnFamilies(familyPaths));
  try {
    this.writeRequestsCount.increment();
    List<IOException> ioes=new ArrayList<IOException>();
    List<Pair<byte[],String>> failures=new ArrayList<Pair<byte[],String>>();
    for (    Pair<byte[],String> p : familyPaths) {
      byte[] familyName=p.getFirst();
      String path=p.getSecond();
      Store store=getStore(familyName);
      if (store == null) {
        IOException ioe=new DoNotRetryIOException("No such column family " + Bytes.toStringBinary(familyName));
        ioes.add(ioe);
        failures.add(p);
      }
 else {
        try {
          store.assertBulkLoadHFileOk(new Path(path));
        }
 catch (        WrongRegionException wre) {
          failures.add(p);
        }
catch (        IOException ioe) {
          ioes.add(ioe);
        }
      }
    }
    if (failures.size() != 0) {
      StringBuilder list=new StringBuilder();
      for (      Pair<byte[],String> p : failures) {
        list.append("\n").append(Bytes.toString(p.getFirst())).append(" : ").append(p.getSecond());
      }
      LOG.warn("There was a recoverable bulk load failure likely due to a" + " split.  These (family, HFile) pairs were not loaded: " + list);
      return false;
    }
    if (ioes.size() != 0) {
      LOG.error("There were IO errors when checking if bulk load is ok.  " + "throwing exception!");
      throw MultipleIOException.createIOException(ioes);
    }
    for (    Pair<byte[],String> p : familyPaths) {
      byte[] familyName=p.getFirst();
      String path=p.getSecond();
      Store store=getStore(familyName);
      try {
        store.bulkLoadHFile(path);
      }
 catch (      IOException ioe) {
        LOG.error("There was a partial failure due to IO when attempting to" + " load " + Bytes.toString(p.getFirst()) + " : "+ p.getSecond());
        throw ioe;
      }
    }
    return true;
  }
  finally {
    closeBulkRegionOperation();
  }
}
