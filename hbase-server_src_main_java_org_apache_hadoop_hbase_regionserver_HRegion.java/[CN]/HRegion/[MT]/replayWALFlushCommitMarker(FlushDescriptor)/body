{
  MonitoredTask status=TaskMonitor.get().createStatus("Committing flush " + this);
synchronized (writestate) {
    try {
      if (flush.getFlushSequenceNumber() < lastReplayedOpenRegionSeqId) {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Skipping replaying flush event :"+ TextFormat.shortDebugString(flush)+ " because its sequence id is smaller than this regions lastReplayedOpenRegionSeqId "+ " of "+ lastReplayedOpenRegionSeqId);
        return;
      }
      if (writestate.flushing) {
        PrepareFlushResult prepareFlushResult=this.prepareFlushResult;
        if (flush.getFlushSequenceNumber() == prepareFlushResult.flushOpSeqId) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(getRegionInfo().getEncodedName() + " : " + "Received a flush commit marker with seqId:"+ flush.getFlushSequenceNumber()+ " and a previous prepared snapshot was found");
          }
          replayFlushInStores(flush,prepareFlushResult,true);
          this.addAndGetGlobalMemstoreSize(-prepareFlushResult.totalFlushableSize);
          this.prepareFlushResult=null;
          writestate.flushing=false;
        }
 else         if (flush.getFlushSequenceNumber() < prepareFlushResult.flushOpSeqId) {
          LOG.warn(getRegionInfo().getEncodedName() + " : " + "Received a flush commit marker with smaller seqId: "+ flush.getFlushSequenceNumber()+ " than what we have prepared with seqId: "+ prepareFlushResult.flushOpSeqId+ ". Picking up new file, but not dropping"+ "  prepared memstore snapshot");
          replayFlushInStores(flush,prepareFlushResult,false);
        }
 else {
          LOG.warn(getRegionInfo().getEncodedName() + " : " + "Received a flush commit marker with larger seqId: "+ flush.getFlushSequenceNumber()+ " than what we have prepared with seqId: "+ prepareFlushResult.flushOpSeqId+ ". Picking up new file and dropping prepared"+ " memstore snapshot");
          replayFlushInStores(flush,prepareFlushResult,true);
          this.addAndGetGlobalMemstoreSize(-prepareFlushResult.totalFlushableSize);
          dropMemstoreContentsForSeqId(flush.getFlushSequenceNumber(),null);
          this.prepareFlushResult=null;
          writestate.flushing=false;
        }
        this.setReadsEnabled(true);
      }
 else {
        LOG.warn(getRegionInfo().getEncodedName() + " : " + "Received a flush commit marker with seqId:"+ flush.getFlushSequenceNumber()+ ", but no previous prepared snapshot was found");
        replayFlushInStores(flush,null,false);
        dropMemstoreContentsForSeqId(flush.getFlushSequenceNumber(),null);
      }
      status.markComplete("Flush commit successful");
      this.maxFlushedSeqId=flush.getFlushSequenceNumber();
      getMVCC().advanceMemstoreReadPointIfNeeded(flush.getFlushSequenceNumber());
    }
 catch (    FileNotFoundException ex) {
      LOG.warn(getRegionInfo().getEncodedName() + " : " + "At least one of the store files in flush: "+ TextFormat.shortDebugString(flush)+ " doesn't exist any more. Skip loading the file(s)",ex);
    }
 finally {
      status.cleanup();
      writestate.notifyAll();
    }
  }
synchronized (this) {
    notifyAll();
  }
}
