{
  while (!exitWorker) {
    int seq_start=taskReadySeq;
    List<String> paths=getTaskList();
    if (paths == null) {
      LOG.warn("Could not get tasks, did someone remove " + this.watcher.splitLogZNode + " ... worker thread exiting.");
      return;
    }
    int offset=(int)(Math.random() * paths.size());
    for (int i=0; i < paths.size(); i++) {
      if (HLogUtil.isMetaFile(paths.get(i))) {
        offset=i;
        break;
      }
    }
    for (int i=0; i < paths.size(); i++) {
      int idx=(i + offset) % paths.size();
      grabTask(ZKUtil.joinZNode(watcher.splitLogZNode,paths.get(idx)));
      if (exitWorker) {
        return;
      }
    }
    SplitLogCounters.tot_wkr_task_grabing.incrementAndGet();
synchronized (taskReadyLock) {
      while (seq_start == taskReadySeq) {
        try {
          taskReadyLock.wait(checkInterval);
          if (this.server != null) {
            Map<String,HRegion> recoveringRegions=this.server.getRecoveringRegions();
            if (!recoveringRegions.isEmpty()) {
              List<String> tmpCopy=new ArrayList<String>(recoveringRegions.keySet());
              for (              String region : tmpCopy) {
                String nodePath=ZKUtil.joinZNode(this.watcher.recoveringRegionsZNode,region);
                try {
                  if (ZKUtil.checkExists(this.watcher,nodePath) == -1) {
                    HRegion r=recoveringRegions.remove(region);
                    if (r != null) {
                      r.setRecovering(false);
                    }
                    LOG.debug("Mark recovering region:" + region + " up.");
                  }
 else {
                    break;
                  }
                }
 catch (                KeeperException e) {
                  LOG.debug("Got a zookeeper when trying to open a recovering region",e);
                  break;
                }
              }
            }
          }
        }
 catch (        InterruptedException e) {
          LOG.info("SplitLogWorker interrupted while waiting for task," + " exiting: " + e.toString() + (exitWorker ? "" : " (ERROR: exitWorker is not set, exiting anyway)"));
          exitWorker=true;
          return;
        }
      }
    }
  }
}
