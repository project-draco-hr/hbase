{
  final List<Pair<String,Long>> countsSnapshot=Lists.newArrayListWithCapacity(this.counts.size());
  this.lock.writeLock().lock();
  try {
    for (    Entry<String,Counter> entry : this.counts.entrySet()) {
      countsSnapshot.add(Pair.newPair(entry.getKey(),entry.getValue().get()));
    }
  }
  finally {
    this.lock.writeLock().unlock();
  }
  Collections.sort(countsSnapshot,new Comparator<Pair<String,Long>>(){
    @Override public int compare(    Pair<String,Long> a,    Pair<String,Long> b){
      return b.getSecond().compareTo(a.getSecond());
    }
  }
);
  return countsSnapshot.subList(0,Math.min(n,countsSnapshot.size()));
}
