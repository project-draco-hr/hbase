{
  final int pauseTime=100;
  final int maxWaitTime=HConstants.RETRY_BACKOFF[HConstants.RETRY_BACKOFF.length - 1] * pauseTime;
  final int numRetries=HConstants.RETRY_BACKOFF.length;
  long ignoreExpectedTime=0;
  for (int i=0; i < HConstants.RETRY_BACKOFF.length; i++) {
    ignoreExpectedTime+=HConstants.RETRY_BACKOFF[i] * pauseTime;
  }
  final long time=pauseTime * 3 + ((maxWaitTime / numRetries) * 3) + 300;
  assertTrue("Capped snapshot wait time isn't less that the uncapped backoff time " + "- further testing won't prove anything.",time < ignoreExpectedTime);
  ConnectionImplementation mockConnection=Mockito.mock(ConnectionImplementation.class);
  Configuration conf=HBaseConfiguration.create();
  conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,numRetries);
  conf.setLong("hbase.client.pause",pauseTime);
  MasterKeepAliveConnection mockMaster=Mockito.mock(MasterKeepAliveConnection.class);
  Mockito.when(mockConnection.getConfiguration()).thenReturn(conf);
  Mockito.when(mockConnection.getKeepAliveMasterService()).thenReturn(mockMaster);
  RpcRetryingCallerFactory callerFactory=new RpcRetryingCallerFactory(conf);
  RpcControllerFactory controllerFactory=Mockito.mock(RpcControllerFactory.class);
  Mockito.when(controllerFactory.newController()).thenReturn(Mockito.mock(HBaseRpcController.class));
  Mockito.when(mockConnection.getRpcRetryingCallerFactory()).thenReturn(callerFactory);
  Mockito.when(mockConnection.getRpcControllerFactory()).thenReturn(controllerFactory);
  SnapshotResponse response=SnapshotResponse.newBuilder().setExpectedTimeout(maxWaitTime).build();
  Mockito.when(mockMaster.snapshot((RpcController)Mockito.any(),Mockito.any(SnapshotRequest.class))).thenReturn(response);
  IsSnapshotDoneResponse.Builder builder=IsSnapshotDoneResponse.newBuilder();
  builder.setDone(false);
  Mockito.when(mockMaster.isSnapshotDone((RpcController)Mockito.any(),Mockito.any(IsSnapshotDoneRequest.class))).thenReturn(builder.build(),builder.build(),builder.build(),builder.build(),builder.build(),builder.setDone(true).build());
  Admin admin=new HBaseAdmin(mockConnection);
  String snapshot="snapshot";
  TableName table=TableName.valueOf("table");
  long start=System.currentTimeMillis();
  admin.snapshot(snapshot,table);
  long finish=System.currentTimeMillis();
  long elapsed=(finish - start);
  assertTrue("Elapsed time:" + elapsed + " is more than expected max:"+ time,elapsed <= time);
  admin.close();
}
