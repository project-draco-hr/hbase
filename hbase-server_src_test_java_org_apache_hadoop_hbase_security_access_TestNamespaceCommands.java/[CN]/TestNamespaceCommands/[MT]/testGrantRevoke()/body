{
  final String testUser="testUser";
  AccessTestAction grantAction=new AccessTestAction(){
    public Object run() throws Exception {
      Table acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.grant(protocol,testUser,TEST_NAMESPACE,Action.WRITE);
      }
  finally {
        acl.close();
      }
      return null;
    }
  }
;
  AccessTestAction revokeAction=new AccessTestAction(){
    public Object run() throws Exception {
      Table acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.revoke(protocol,testUser,TEST_NAMESPACE,Action.WRITE);
      }
  finally {
        acl.close();
      }
      return null;
    }
  }
;
  AccessTestAction getPermissionsAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Table acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.getUserPermissions(protocol,Bytes.toBytes(TEST_NAMESPACE));
      }
  finally {
        acl.close();
      }
      return null;
    }
  }
;
  verifyAllowed(grantAction,SUPERUSER,USER_NSP_ADMIN);
  verifyDenied(grantAction,USER_CREATE,USER_RW);
  verifyAllowed(revokeAction,SUPERUSER,USER_NSP_ADMIN);
  verifyDenied(revokeAction,USER_CREATE,USER_RW);
  verifyAllowed(revokeAction,SUPERUSER,USER_NSP_ADMIN);
  verifyDeniedWithException(revokeAction,USER_CREATE,USER_RW);
}
