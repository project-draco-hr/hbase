{
  final String testUser="testUser";
  AccessTestAction grantAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.grant(protocol,testUser,TEST_NAMESPACE,Action.WRITE);
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  AccessTestAction revokeAction=new AccessTestAction(){
    public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.revoke(protocol,testUser,TEST_NAMESPACE,Action.WRITE);
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  AccessTestAction getPermissionsAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.getUserPermissions(protocol,Bytes.toBytes(TEST_NAMESPACE));
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  verifyAllowed(grantAction,SUPERUSER,USER_GLOBAL_ADMIN,USER_GROUP_ADMIN);
  verifyDenied(grantAction,USER_GLOBAL_CREATE,USER_GLOBAL_WRITE,USER_GLOBAL_READ,USER_GLOBAL_EXEC,USER_NS_ADMIN,USER_NS_CREATE,USER_NS_WRITE,USER_NS_READ,USER_NS_EXEC,USER_TABLE_CREATE,USER_TABLE_WRITE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  verifyAllowed(revokeAction,SUPERUSER,USER_GLOBAL_ADMIN,USER_GROUP_ADMIN);
  verifyDenied(revokeAction,USER_GLOBAL_CREATE,USER_GLOBAL_WRITE,USER_GLOBAL_READ,USER_GLOBAL_EXEC,USER_NS_ADMIN,USER_NS_CREATE,USER_NS_WRITE,USER_NS_READ,USER_NS_EXEC,USER_TABLE_CREATE,USER_TABLE_WRITE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  verifyAllowed(getPermissionsAction,SUPERUSER,USER_GLOBAL_ADMIN,USER_NS_ADMIN,USER_GROUP_ADMIN);
  verifyDenied(getPermissionsAction,USER_GLOBAL_CREATE,USER_GLOBAL_WRITE,USER_GLOBAL_READ,USER_GLOBAL_EXEC,USER_NS_CREATE,USER_NS_WRITE,USER_NS_READ,USER_NS_EXEC,USER_TABLE_CREATE,USER_TABLE_WRITE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
}
