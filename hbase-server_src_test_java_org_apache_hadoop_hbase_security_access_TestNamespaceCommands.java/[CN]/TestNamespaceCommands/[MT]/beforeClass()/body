{
  conf=UTIL.getConfiguration();
  SecureTestUtil.enableSecurity(conf);
  conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,AccessController.class.getName());
  UTIL.startMiniCluster();
  SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
  USER_RW=User.createUserForTesting(conf,"rw_user",new String[0]);
  USER_CREATE=User.createUserForTesting(conf,"create_user",new String[0]);
  USER_NSP_WRITE=User.createUserForTesting(conf,"namespace_write",new String[0]);
  UTIL.getHBaseAdmin().createNamespace(NamespaceDescriptor.create(TestNamespace).build());
  UTIL.waitTableAvailable(AccessControlLists.ACL_TABLE_NAME.getName(),8000);
  HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
  MasterCoprocessorHost cpHost=UTIL.getMiniHBaseCluster().getMaster().getCoprocessorHost();
  cpHost.load(AccessController.class,Coprocessor.PRIORITY_HIGHEST,conf);
  ACCESS_CONTROLLER=(AccessController)cpHost.findCoprocessor(AccessController.class.getName());
  try {
    BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    ProtobufUtil.grant(protocol,USER_NSP_WRITE.getShortName(),TestNamespace,Action.WRITE);
  }
  finally {
    acl.close();
  }
}
