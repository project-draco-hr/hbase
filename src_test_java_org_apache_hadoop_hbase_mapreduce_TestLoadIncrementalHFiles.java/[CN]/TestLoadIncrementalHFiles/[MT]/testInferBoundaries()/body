{
  TreeMap<byte[],Integer> map=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  String first;
  String last;
  first="a";
  last="e";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="r";
  last="s";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="o";
  last="p";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="g";
  last="k";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="v";
  last="x";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="c";
  last="i";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="m";
  last="q";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="s";
  last="t";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  first="u";
  last="w";
  addStartEndKeysForTest(map,first.getBytes(),last.getBytes());
  byte[][] keysArray=LoadIncrementalHFiles.inferBoundaries(map);
  byte[][] compare=new byte[3][];
  compare[0]="m".getBytes();
  compare[1]="r".getBytes();
  compare[2]="u".getBytes();
  assertEquals(keysArray.length,3);
  for (int row=0; row < keysArray.length; row++) {
    assertArrayEquals(keysArray[row],compare[row]);
  }
}
