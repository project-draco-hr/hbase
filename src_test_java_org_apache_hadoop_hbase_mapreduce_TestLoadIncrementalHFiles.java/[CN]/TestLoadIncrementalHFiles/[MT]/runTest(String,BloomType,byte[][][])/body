{
  Path dir=HBaseTestingUtility.getTestDir(testName);
  FileSystem fs=util.getTestFileSystem();
  dir=dir.makeQualified(fs);
  Path familyDir=new Path(dir,Bytes.toString(FAMILY));
  int hfileIdx=0;
  for (  byte[][] range : hfileRanges) {
    byte[] from=range[0];
    byte[] to=range[1];
    createHFile(util.getConfiguration(),fs,new Path(familyDir,"hfile_" + hfileIdx++),FAMILY,QUALIFIER,from,to,1000);
  }
  int expectedRows=hfileIdx * 1000;
  util.startMiniCluster();
  try {
    HBaseAdmin admin=new HBaseAdmin(util.getConfiguration());
    HTableDescriptor htd=new HTableDescriptor(TABLE);
    HColumnDescriptor familyDesc=new HColumnDescriptor(FAMILY);
    familyDesc.setBloomFilterType(bloomType);
    htd.addFamily(familyDesc);
    admin.createTable(htd,SPLIT_KEYS);
    HTable table=new HTable(util.getConfiguration(),TABLE);
    util.waitTableAvailable(TABLE,30000);
    LoadIncrementalHFiles loader=new LoadIncrementalHFiles(util.getConfiguration());
    loader.doBulkLoad(dir,table);
    assertEquals(expectedRows,util.countRows(table));
  }
  finally {
    util.shutdownMiniCluster();
  }
}
