{
  long time=EnvironmentEdgeManager.currentTime();
  mee.setValue(time);
  hTableInterface.put(new Put(ROW_A).addColumn(TEST_FAMILY,qualifierCol1,Bytes.toBytes(1L)));
  checkRowValue(ROW_A,Bytes.toBytes(1L));
  time=EnvironmentEdgeManager.currentTime();
  mee.setValue(time);
  TimeRange range10=new TimeRange(1,time + 10);
  hTableInterface.increment(new Increment(ROW_A).addColumn(TEST_FAMILY,qualifierCol1,10L).setTimeRange(range10.getMin(),range10.getMax()));
  checkRowValue(ROW_A,Bytes.toBytes(11L));
  assertEquals(MyObserver.tr10.getMin(),range10.getMin());
  assertEquals(MyObserver.tr10.getMax(),range10.getMax());
  time=EnvironmentEdgeManager.currentTime();
  mee.setValue(time);
  TimeRange range2=new TimeRange(1,time + 20);
  List<Row> actions=Arrays.asList(new Row[]{new Increment(ROW_A).addColumn(TEST_FAMILY,qualifierCol1,2L).setTimeRange(range2.getMin(),range2.getMax()),new Increment(ROW_A).addColumn(TEST_FAMILY,qualifierCol1,2L).setTimeRange(range2.getMin(),range2.getMax())});
  Object[] results3=new Object[actions.size()];
  Object[] results1=results3;
  hTableInterface.batch(actions,results1);
  assertEquals(MyObserver.tr2.getMin(),range2.getMin());
  assertEquals(MyObserver.tr2.getMax(),range2.getMax());
  for (  Object r2 : results1) {
    assertTrue(r2 instanceof Result);
  }
  checkRowValue(ROW_A,Bytes.toBytes(15L));
  hTableInterface.close();
}
