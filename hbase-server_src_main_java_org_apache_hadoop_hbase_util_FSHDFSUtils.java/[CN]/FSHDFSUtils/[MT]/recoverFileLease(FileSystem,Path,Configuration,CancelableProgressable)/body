{
  if (!(fs instanceof DistributedFileSystem)) {
    return;
  }
  DistributedFileSystem dfs=(DistributedFileSystem)fs;
  LOG.info("Recovering file " + p);
  long startWaiting=EnvironmentEdgeManager.currentTimeMillis();
  long recoveryTimeout=conf.getInt("hbase.lease.recovery.timeout",900000) + startWaiting;
  boolean recovered=false;
  int nbAttempt=0;
  while (!recovered) {
    nbAttempt++;
    try {
      recovered=dfs.recoverLease(p);
      LOG.info("Attempt " + nbAttempt + " to recoverLease on file "+ p+ " returned "+ recovered+ ", trying for "+ (EnvironmentEdgeManager.currentTimeMillis() - startWaiting)+ "ms");
    }
 catch (    IOException e) {
      if (e instanceof LeaseExpiredException && e.getMessage().contains("File does not exist")) {
        throw new FileNotFoundException("The given HLog wasn't found at " + p);
      }
 else       if (e instanceof FileNotFoundException) {
        throw e;
      }
      LOG.warn("Got IOException on attempt " + nbAttempt + " to recover lease for file "+ p+ ", retrying.",e);
    }
    if (!recovered) {
      if (reporter != null && !reporter.progress()) {
        throw new InterruptedIOException("Operation is cancelled");
      }
      if (nbAttempt > 2 && recoveryTimeout < EnvironmentEdgeManager.currentTimeMillis()) {
        LOG.error("Can't recoverLease after " + nbAttempt + " attempts and "+ (EnvironmentEdgeManager.currentTimeMillis() - startWaiting)+ "ms "+ " for "+ p+ " - continuing without the lease, but we could have a data loss.");
      }
 else {
        try {
          Thread.sleep(nbAttempt < 3 ? 500 : 1000);
        }
 catch (        InterruptedException ie) {
          InterruptedIOException iioe=new InterruptedIOException();
          iioe.initCause(ie);
          throw iioe;
        }
      }
    }
  }
}
