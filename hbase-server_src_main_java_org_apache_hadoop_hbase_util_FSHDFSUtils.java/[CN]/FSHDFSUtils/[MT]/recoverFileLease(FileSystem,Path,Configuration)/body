{
  if (!isAppendSupported(conf)) {
    LOG.warn("Running on HDFS without append enabled may result in data loss");
    return;
  }
  if (!(fs instanceof DistributedFileSystem)) {
    return;
  }
  LOG.info("Recovering file " + p);
  long startWaiting=System.currentTimeMillis();
  boolean recovered=false;
  long recoveryTimeout=conf.getInt("hbase.lease.recovery.timeout",300000);
  boolean triggerAppend=conf.getBoolean(TEST_TRIGGER_DFS_APPEND,false);
  Exception ex=null;
  while (!recovered) {
    try {
      try {
        DistributedFileSystem dfs=(DistributedFileSystem)fs;
        if (triggerAppend)         throw new IOException();
        try {
          recovered=(Boolean)DistributedFileSystem.class.getMethod("recoverLease",new Class[]{Path.class}).invoke(dfs,p);
          if (!recovered)           LOG.debug("recoverLease returned false");
        }
 catch (        InvocationTargetException ite) {
          throw (IOException)ite.getCause();
        }
      }
 catch (      Exception e) {
        LOG.debug("Failed fs.recoverLease invocation, " + e.toString() + ", trying fs.append instead");
        ex=e;
      }
      if (ex != null || System.currentTimeMillis() - startWaiting > recoveryTimeout) {
        LOG.debug("trying fs.append for " + p + " with "+ ex);
        ex=null;
        FSDataOutputStream out=fs.append(p);
        out.close();
        recovered=true;
        LOG.debug("fs.append passed");
      }
      if (recovered)       break;
    }
 catch (    IOException e) {
      e=RemoteExceptionHandler.checkIOException(e);
      if (e instanceof AlreadyBeingCreatedException) {
        long waitedFor=System.currentTimeMillis() - startWaiting;
        if (waitedFor > LEASE_SOFTLIMIT_PERIOD) {
          LOG.warn("Waited " + waitedFor + "ms for lease recovery on "+ p+ ":"+ e.getMessage());
        }
      }
 else       if (e instanceof LeaseExpiredException && e.getMessage().contains("File does not exist")) {
        throw new FileNotFoundException("The given HLog wasn't found at " + p.toString());
      }
 else {
        throw new IOException("Failed to open " + p + " for append",e);
      }
    }
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ie) {
      InterruptedIOException iioe=new InterruptedIOException();
      iioe.initCause(ie);
      throw iioe;
    }
  }
  LOG.info("Finished lease recover attempt for " + p);
}
