{
  if (this.results.length != this.rows.size()) {
    throw new IllegalArgumentException("argument results (size=" + results.length + ") must be the same size as "+ "argument list (size="+ this.rows.size()+ ")");
  }
  if (this.rows.isEmpty()) {
    return;
  }
  boolean isTraceEnabled=LOG.isTraceEnabled();
  BatchErrors errors=new BatchErrors();
  BatchErrors retriedErrors=null;
  if (isTraceEnabled) {
    retriedErrors=new BatchErrors();
  }
  int[] nbRetries=new int[this.results.length];
  final List<Action<R>> listActions=new ArrayList<Action<R>>(this.rows.size());
  for (int i=0; i < this.rows.size(); i++) {
    Action<R> action=new Action<R>(this.rows.get(i),i);
    listActions.add(action);
  }
  submit(listActions,0);
  boolean lastRetry=false;
  boolean noRetry=(hci.numRetries < 2);
  while (!this.inProgress.isEmpty()) {
    Triple<MultiAction<R>,HRegionLocation,Future<MultiResponse>> currentTask=removeFirstDone();
    MultiResponse responses=null;
    ExecutionException exception=null;
    try {
      responses=currentTask.getThird().get();
    }
 catch (    ExecutionException e) {
      exception=e;
    }
    if (responses == null) {
      for (      List<Action<R>> actions : currentTask.getFirst().actions.values()) {
        for (        Action<R> action : actions) {
          Row row=action.getAction();
          hci.updateCachedLocations(tableName,row,exception,currentTask.getSecond());
          if (noRetry) {
            errors.add(exception,row,currentTask);
          }
 else {
            if (isTraceEnabled) {
              retriedErrors.add(exception,row,currentTask);
            }
            lastRetry=addToReplay(nbRetries,action);
          }
        }
      }
    }
 else {
      for (      Entry<byte[],List<Pair<Integer,Object>>> resultsForRS : responses.getResults().entrySet()) {
        for (        Pair<Integer,Object> regionResult : resultsForRS.getValue()) {
          Action<R> correspondingAction=listActions.get(regionResult.getFirst());
          Object result=regionResult.getSecond();
          this.results[correspondingAction.getOriginalIndex()]=result;
          if (result == null || result instanceof Throwable) {
            Row row=correspondingAction.getAction();
            hci.updateCachedLocations(this.tableName,row,result,currentTask.getSecond());
            if (result instanceof DoNotRetryIOException || noRetry) {
              errors.add((Exception)result,row,currentTask);
            }
 else {
              if (isTraceEnabled) {
                retriedErrors.add((Exception)result,row,currentTask);
              }
              lastRetry=addToReplay(nbRetries,correspondingAction);
            }
          }
 else           if (callback != null) {
            this.callback.update(resultsForRS.getKey(),this.rows.get(regionResult.getFirst()).getRow(),(R)result);
          }
        }
      }
    }
    if (!noRetry && !toReplay.isEmpty()) {
      if (isTraceEnabled) {
        LOG.trace("Retrying due to errors: " + retriedErrors.getDescriptionAndClear());
      }
      doRetry();
      if (lastRetry) {
        if (isTraceEnabled) {
          LOG.trace("No more retries");
        }
        noRetry=true;
      }
    }
  }
  errors.rethrowIfAny();
}
