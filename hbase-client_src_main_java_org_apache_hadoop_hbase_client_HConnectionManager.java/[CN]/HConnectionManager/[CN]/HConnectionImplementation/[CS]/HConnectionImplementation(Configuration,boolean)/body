{
  this.conf=conf;
  this.managed=managed;
  this.closed=false;
  this.pause=conf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  this.numTries=conf.getInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);
  this.rpcTimeout=conf.getInt(HConstants.HBASE_RPC_TIMEOUT_KEY,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  this.prefetchRegionLimit=conf.getInt(HConstants.HBASE_CLIENT_PREFETCH_LIMIT,HConstants.DEFAULT_HBASE_CLIENT_PREFETCH_LIMIT);
  this.useServerTrackerForRetries=conf.getBoolean(RETRIES_BY_SERVER_KEY,true);
  long serverTrackerTimeout=0;
  if (this.useServerTrackerForRetries) {
    for (int i=0; i < this.numTries; ++i) {
      serverTrackerTimeout+=ConnectionUtils.getPauseTime(this.pause,i);
    }
  }
  this.serverTrackerTimeout=serverTrackerTimeout;
  this.registry=setupRegistry();
  retrieveClusterId();
  this.rpcClient=new RpcClient(this.conf,this.clusterId);
  Class<? extends ClusterStatusListener.Listener> listenerClass=conf.getClass(ClusterStatusListener.STATUS_LISTENER_CLASS,ClusterStatusListener.DEFAULT_STATUS_LISTENER_CLASS,ClusterStatusListener.Listener.class);
  if (listenerClass != null) {
    clusterStatusListener=new ClusterStatusListener(new ClusterStatusListener.DeadServerHandler(){
      @Override public void newDead(      ServerName sn){
        clearCaches(sn);
        rpcClient.cancelConnections(sn.getHostname(),sn.getPort(),new SocketException(sn.getServerName() + " is dead: closing its connection."));
      }
    }
,conf,listenerClass);
  }
}
