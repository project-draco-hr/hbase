{
synchronized (masterAndZKLock) {
    if (!isKeepAliveMasterConnectedAndRunning(this.monitorMasterServiceState)) {
      MasterMonitorServiceStubMaker stubMaker=new MasterMonitorServiceStubMaker();
      this.monitorMasterServiceState.stub=stubMaker.makeStub();
    }
    resetMasterServiceState(this.monitorMasterServiceState);
  }
  final MasterMonitorService.BlockingInterface stub=this.monitorMasterServiceState.stub;
  return new MasterMonitorKeepAliveConnection(){
    final MasterMonitorServiceState mss=monitorMasterServiceState;
    @Override public GetSchemaAlterStatusResponse getSchemaAlterStatus(    RpcController controller,    GetSchemaAlterStatusRequest request) throws ServiceException {
      return stub.getSchemaAlterStatus(controller,request);
    }
    @Override public GetTableDescriptorsResponse getTableDescriptors(    RpcController controller,    GetTableDescriptorsRequest request) throws ServiceException {
      return stub.getTableDescriptors(controller,request);
    }
    @Override public GetClusterStatusResponse getClusterStatus(    RpcController controller,    GetClusterStatusRequest request) throws ServiceException {
      return stub.getClusterStatus(controller,request);
    }
    @Override public IsMasterRunningResponse isMasterRunning(    RpcController controller,    IsMasterRunningRequest request) throws ServiceException {
      return stub.isMasterRunning(controller,request);
    }
    @Override public void close() throws IOException {
      release(this.mss);
    }
  }
;
}
