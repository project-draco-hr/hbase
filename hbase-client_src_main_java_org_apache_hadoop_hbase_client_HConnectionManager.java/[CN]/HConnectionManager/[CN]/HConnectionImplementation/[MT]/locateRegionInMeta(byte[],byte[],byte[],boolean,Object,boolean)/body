{
  HRegionLocation location;
  if (useCache) {
    location=getCachedLocation(tableName,row);
    if (location != null) {
      return location;
    }
  }
  int localNumRetries=retry ? numTries : 1;
  byte[] metaKey=HRegionInfo.createRegionName(tableName,row,HConstants.NINES,false);
  for (int tries=0; true; tries++) {
    if (tries >= localNumRetries) {
      throw new NoServerForRegionException("Unable to find region for " + Bytes.toStringBinary(row) + " after "+ numTries+ " tries.");
    }
    HRegionLocation metaLocation=null;
    try {
      metaLocation=locateRegion(parentTable,metaKey,true,false);
      if (metaLocation == null)       continue;
      ClientProtocol server=getClient(metaLocation.getServerName());
      Result regionInfoRow;
synchronized (regionLockObject) {
        if (useCache) {
          location=getCachedLocation(tableName,row);
          if (location != null) {
            return location;
          }
          if (Bytes.equals(parentTable,HConstants.META_TABLE_NAME) && (getRegionCachePrefetch(tableName))) {
            prefetchRegionCache(tableName,row);
          }
          location=getCachedLocation(tableName,row);
          if (location != null) {
            return location;
          }
        }
 else {
          forceDeleteCachedLocation(tableName,row);
        }
        regionInfoRow=ProtobufUtil.getRowOrBefore(server,metaLocation.getRegionInfo().getRegionName(),metaKey,HConstants.CATALOG_FAMILY);
      }
      if (regionInfoRow == null) {
        throw new TableNotFoundException(Bytes.toString(tableName));
      }
      HRegionInfo regionInfo=MetaScanner.getHRegionInfo(regionInfoRow);
      if (regionInfo == null) {
        throw new IOException("HRegionInfo was null or empty in " + Bytes.toString(parentTable) + ", row="+ regionInfoRow);
      }
      if (!Bytes.equals(regionInfo.getTableName(),tableName)) {
        throw new TableNotFoundException("Table '" + Bytes.toString(tableName) + "' was not found, got: "+ Bytes.toString(regionInfo.getTableName())+ ".");
      }
      if (regionInfo.isSplit()) {
        throw new RegionOfflineException("the only available region for" + " the required row is a split parent," + " the daughters should be online soon: "+ regionInfo.getRegionNameAsString());
      }
      if (regionInfo.isOffline()) {
        throw new RegionOfflineException("the region is offline, could" + " be caused by a disable table call: " + regionInfo.getRegionNameAsString());
      }
      ServerName serverName=HRegionInfo.getServerName(regionInfoRow);
      if (serverName == null) {
        throw new NoServerForRegionException("No server address listed " + "in " + Bytes.toString(parentTable) + " for region "+ regionInfo.getRegionNameAsString()+ " containing row "+ Bytes.toStringBinary(row));
      }
      if (isDeadServer(serverName)) {
        throw new RegionServerStoppedException(".META. says the region " + regionInfo.getRegionNameAsString() + " is managed by the server "+ serverName+ ", but it is dead.");
      }
      location=new HRegionLocation(regionInfo,serverName,HRegionInfo.getSeqNumDuringOpen(regionInfoRow));
      cacheLocation(tableName,null,location);
      return location;
    }
 catch (    TableNotFoundException e) {
      throw e;
    }
catch (    IOException e) {
      if (e instanceof RemoteException) {
        e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
      }
      if (tries < numTries - 1) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("locateRegionInMeta parentTable=" + Bytes.toString(parentTable) + ", metaLocation="+ ((metaLocation == null) ? "null" : "{" + metaLocation + "}")+ ", attempt="+ tries+ " of "+ this.numTries+ " failed; retrying after sleep of "+ ConnectionUtils.getPauseTime(this.pause,tries)+ " because: "+ e.getMessage());
        }
      }
 else {
        throw e;
      }
      if (!(e instanceof RegionOfflineException || e instanceof NoServerForRegionException)) {
        relocateRegion(parentTable,metaKey);
      }
    }
    try {
      Thread.sleep(ConnectionUtils.getPauseTime(this.pause,tries));
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException("Giving up trying to location region in " + "meta: thread is interrupted.");
    }
  }
}
