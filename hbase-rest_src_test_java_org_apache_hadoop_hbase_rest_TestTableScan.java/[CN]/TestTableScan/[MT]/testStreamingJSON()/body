{
  StringBuilder builder=new StringBuilder();
  builder.append("/*");
  builder.append("?");
  builder.append(Constants.SCAN_COLUMN + "=" + COLUMN_1);
  builder.append("&");
  builder.append(Constants.SCAN_LIMIT + "=20");
  Response response=client.get("/" + TABLE + builder.toString(),Constants.MIMETYPE_JSON);
  assertEquals(200,response.getCode());
  assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  ObjectMapper mapper=new JacksonProvider().locateMapper(CellSetModel.class,MediaType.APPLICATION_JSON_TYPE);
  CellSetModel model=mapper.readValue(response.getStream(),CellSetModel.class);
  int count=TestScannerResource.countCellSet(model);
  assertEquals(20,count);
  checkRowsNotNull(model);
  builder=new StringBuilder();
  builder.append("/*");
  builder.append("?");
  builder.append(Constants.SCAN_COLUMN + "=" + COLUMN_2);
  response=client.get("/" + TABLE + builder.toString(),Constants.MIMETYPE_JSON);
  assertEquals(200,response.getCode());
  assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  model=mapper.readValue(response.getStream(),CellSetModel.class);
  count=TestScannerResource.countCellSet(model);
  assertEquals(expectedRows2,count);
  checkRowsNotNull(model);
  builder=new StringBuilder();
  builder.append("/*");
  builder.append("?");
  builder.append(Constants.SCAN_COLUMN + "=" + COLUMN_1);
  builder.append("&");
  builder.append(Constants.SCAN_START_ROW + "=aaa");
  builder.append("&");
  builder.append(Constants.SCAN_END_ROW + "=aay");
  response=client.get("/" + TABLE + builder.toString(),Constants.MIMETYPE_JSON);
  assertEquals(200,response.getCode());
  count=0;
  JsonFactory jfactory=new JsonFactory(mapper);
  JsonParser jParser=jfactory.createJsonParser(response.getStream());
  boolean found=false;
  while (jParser.nextToken() != JsonToken.END_OBJECT) {
    if (jParser.getCurrentToken() == JsonToken.START_OBJECT && found) {
      RowModel row=jParser.readValueAs(RowModel.class);
      assertNotNull(row.getKey());
      for (int i=0; i < row.getCells().size(); i++) {
        if (count == 0) {
          assertEquals("aaa",Bytes.toString(row.getKey()));
        }
        if (count == 23) {
          assertEquals("aax",Bytes.toString(row.getKey()));
        }
        count++;
      }
      jParser.skipChildren();
    }
 else {
      found=jParser.getCurrentToken() == JsonToken.START_ARRAY;
    }
  }
  assertEquals(24,count);
}
