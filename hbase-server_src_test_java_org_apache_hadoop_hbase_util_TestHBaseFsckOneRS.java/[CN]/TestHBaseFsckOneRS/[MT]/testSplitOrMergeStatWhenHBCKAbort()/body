{
  admin.setSplitOrMergeEnabled(true,false,true,MasterSwitchType.SPLIT,MasterSwitchType.MERGE);
  boolean oldSplit=admin.isSplitOrMergeEnabled(MasterSwitchType.SPLIT);
  boolean oldMerge=admin.isSplitOrMergeEnabled(MasterSwitchType.MERGE);
  assertTrue(oldSplit);
  assertTrue(oldMerge);
  ExecutorService exec=new ScheduledThreadPoolExecutor(10);
  HBaseFsck hbck=new HBaseFsck(conf,exec);
  HBaseFsck.setDisplayFullReport();
  final HBaseFsck spiedHbck=spy(hbck);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      spiedHbck.setDisableSplitAndMerge(false);
      return null;
    }
  }
).when(spiedHbck).onlineConsistencyRepair();
  spiedHbck.setDisableSplitAndMerge();
  spiedHbck.connect();
  spiedHbck.onlineHbck();
  spiedHbck.close();
  boolean split=admin.isSplitOrMergeEnabled(MasterSwitchType.SPLIT);
  boolean merge=admin.isSplitOrMergeEnabled(MasterSwitchType.MERGE);
  assertFalse(split);
  assertFalse(merge);
  hbck=new HBaseFsck(conf,exec);
  hbck.setDisableSplitAndMerge();
  hbck.connect();
  hbck.onlineHbck();
  hbck.close();
  split=admin.isSplitOrMergeEnabled(MasterSwitchType.SPLIT);
  merge=admin.isSplitOrMergeEnabled(MasterSwitchType.MERGE);
  assertTrue(split);
  assertTrue(merge);
}
