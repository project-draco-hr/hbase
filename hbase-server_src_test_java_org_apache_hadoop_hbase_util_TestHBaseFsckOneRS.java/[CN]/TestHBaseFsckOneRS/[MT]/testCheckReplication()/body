{
  HBaseFsck hbck=doFsck(conf,false);
  assertNoErrors(hbck);
  ReplicationAdmin replicationAdmin=new ReplicationAdmin(conf);
  Assert.assertEquals(0,replicationAdmin.getPeersCount());
  int zkPort=conf.getInt(HConstants.ZOOKEEPER_CLIENT_PORT,HConstants.DEFAULT_ZOOKEPER_CLIENT_PORT);
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey("127.0.0.1:" + zkPort + ":/hbase");
  replicationAdmin.addPeer("1",rpc,null);
  replicationAdmin.getPeersCount();
  Assert.assertEquals(1,replicationAdmin.getPeersCount());
  ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"Test Hbase Fsck",connection);
  ReplicationQueues repQueues=ReplicationFactory.getReplicationQueues(new ReplicationQueuesArguments(conf,connection,zkw));
  repQueues.init("server1");
  repQueues.addLog("1","file1");
  repQueues.addLog("1-server2","file1");
  Assert.assertEquals(2,repQueues.getAllQueues().size());
  hbck=doFsck(conf,false);
  assertNoErrors(hbck);
  repQueues.addLog("2","file1");
  repQueues.addLog("2-server2","file1");
  Assert.assertEquals(4,repQueues.getAllQueues().size());
  hbck=doFsck(conf,false);
  assertErrors(hbck,new HBaseFsck.ErrorReporter.ERROR_CODE[]{HBaseFsck.ErrorReporter.ERROR_CODE.UNDELETED_REPLICATION_QUEUE,HBaseFsck.ErrorReporter.ERROR_CODE.UNDELETED_REPLICATION_QUEUE});
  hbck=doFsck(conf,true);
  hbck=doFsck(conf,false);
  assertNoErrors(hbck);
  Assert.assertEquals(2,repQueues.getAllQueues().size());
  Assert.assertNull(repQueues.getLogsInQueue("2"));
  Assert.assertNull(repQueues.getLogsInQueue("2-sever2"));
  replicationAdmin.removePeer("1");
  repQueues.removeAllQueues();
  zkw.close();
  replicationAdmin.close();
}
