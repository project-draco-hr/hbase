{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(4);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.row=iprot.readBinary();
    struct.setRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list357=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.mutations=new ArrayList<Mutation>(_list357.size);
      Mutation _elem358;
      for (int _i359=0; _i359 < _list357.size; ++_i359) {
        _elem358=new Mutation();
        _elem358.read(iprot);
        struct.mutations.add(_elem358);
      }
    }
    struct.setMutationsIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map360=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map360.size);
      ByteBuffer _key361;
      ByteBuffer _val362;
      for (int _i363=0; _i363 < _map360.size; ++_i363) {
        _key361=iprot.readBinary();
        _val362=iprot.readBinary();
        struct.attributes.put(_key361,_val362);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
