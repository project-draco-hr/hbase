{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.row=iprot.readBinary();
    struct.setRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list375=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.mutations=new ArrayList<Mutation>(_list375.size);
      Mutation _elem376;
      for (int _i377=0; _i377 < _list375.size; ++_i377) {
        _elem376=new Mutation();
        _elem376.read(iprot);
        struct.mutations.add(_elem376);
      }
    }
    struct.setMutationsIsSet(true);
  }
  if (incoming.get(3)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map378=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map378.size);
      ByteBuffer _key379;
      ByteBuffer _val380;
      for (int _i381=0; _i381 < _map378.size; ++_i381) {
        _key379=iprot.readBinary();
        _val380=iprot.readBinary();
        struct.attributes.put(_key379,_val380);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
