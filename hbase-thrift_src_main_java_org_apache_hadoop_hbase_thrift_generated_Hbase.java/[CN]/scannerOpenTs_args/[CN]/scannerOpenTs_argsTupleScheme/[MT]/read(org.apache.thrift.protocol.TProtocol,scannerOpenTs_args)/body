{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.startRow=iprot.readBinary();
    struct.setStartRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list541=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list541.size);
      for (int _i542=0; _i542 < _list541.size; ++_i542) {
        ByteBuffer _elem543;
        _elem543=iprot.readBinary();
        struct.columns.add(_elem543);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(3)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map544=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map544.size);
      for (int _i545=0; _i545 < _map544.size; ++_i545) {
        ByteBuffer _key546;
        ByteBuffer _val547;
        _key546=iprot.readBinary();
        _val547=iprot.readBinary();
        struct.attributes.put(_key546,_val547);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
