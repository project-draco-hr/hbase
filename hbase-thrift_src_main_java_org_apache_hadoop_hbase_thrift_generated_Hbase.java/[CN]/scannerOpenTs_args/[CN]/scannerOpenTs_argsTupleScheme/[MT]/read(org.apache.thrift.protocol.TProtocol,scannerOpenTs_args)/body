{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.startRow=iprot.readBinary();
    struct.setStartRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list517=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list517.size);
      for (int _i518=0; _i518 < _list517.size; ++_i518) {
        ByteBuffer _elem519;
        _elem519=iprot.readBinary();
        struct.columns.add(_elem519);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(3)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map520=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map520.size);
      for (int _i521=0; _i521 < _map520.size; ++_i521) {
        ByteBuffer _key522;
        ByteBuffer _val523;
        _key522=iprot.readBinary();
        _val523=iprot.readBinary();
        struct.attributes.put(_key522,_val523);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
