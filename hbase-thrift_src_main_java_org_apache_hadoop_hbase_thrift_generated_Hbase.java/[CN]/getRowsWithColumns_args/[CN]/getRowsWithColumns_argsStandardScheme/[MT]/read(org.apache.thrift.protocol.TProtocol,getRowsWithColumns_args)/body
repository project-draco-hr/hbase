{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.tableName=iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list252=iprot.readListBegin();
      struct.rows=new ArrayList<ByteBuffer>(_list252.size);
      for (int _i253=0; _i253 < _list252.size; ++_i253) {
        ByteBuffer _elem254;
        _elem254=iprot.readBinary();
        struct.rows.add(_elem254);
      }
      iprot.readListEnd();
    }
    struct.setRowsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list255=iprot.readListBegin();
  struct.columns=new ArrayList<ByteBuffer>(_list255.size);
  for (int _i256=0; _i256 < _list255.size; ++_i256) {
    ByteBuffer _elem257;
    _elem257=iprot.readBinary();
    struct.columns.add(_elem257);
  }
  iprot.readListEnd();
}
struct.setColumnsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map258=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map258.size);
for (int _i259=0; _i259 < _map258.size; ++_i259) {
ByteBuffer _key260;
ByteBuffer _val261;
_key260=iprot.readBinary();
_val261=iprot.readBinary();
struct.attributes.put(_key260,_val261);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
