{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.startRow=iprot.readBinary();
    struct.setStartRowIsSet(true);
  }
  if (incoming.get(2)) {
    struct.stopRow=iprot.readBinary();
    struct.setStopRowIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TList _list505=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list505.size);
      ByteBuffer _elem506;
      for (int _i507=0; _i507 < _list505.size; ++_i507) {
        _elem506=iprot.readBinary();
        struct.columns.add(_elem506);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map508=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map508.size);
      ByteBuffer _key509;
      ByteBuffer _val510;
      for (int _i511=0; _i511 < _map508.size; ++_i511) {
        _key509=iprot.readBinary();
        _val510=iprot.readBinary();
        struct.attributes.put(_key509,_val510);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
