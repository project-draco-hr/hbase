{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.tableName=iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list312=iprot.readListBegin();
      struct.rows=new ArrayList<ByteBuffer>(_list312.size);
      ByteBuffer _elem313;
      for (int _i314=0; _i314 < _list312.size; ++_i314) {
        _elem313=iprot.readBinary();
        struct.rows.add(_elem313);
      }
      iprot.readListEnd();
    }
    struct.setRowsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list315=iprot.readListBegin();
  struct.columns=new ArrayList<ByteBuffer>(_list315.size);
  ByteBuffer _elem316;
  for (int _i317=0; _i317 < _list315.size; ++_i317) {
    _elem316=iprot.readBinary();
    struct.columns.add(_elem316);
  }
  iprot.readListEnd();
}
struct.setColumnsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.timestamp=iprot.readI64();
struct.setTimestampIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map318=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map318.size);
ByteBuffer _key319;
ByteBuffer _val320;
for (int _i321=0; _i321 < _map318.size; ++_i321) {
_key319=iprot.readBinary();
_val320=iprot.readBinary();
struct.attributes.put(_key319,_val320);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
