{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.tableName=iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list382=iprot.readListBegin();
      struct.rowBatches=new ArrayList<BatchMutation>(_list382.size);
      for (int _i383=0; _i383 < _list382.size; ++_i383) {
        BatchMutation _elem384;
        _elem384=new BatchMutation();
        _elem384.read(iprot);
        struct.rowBatches.add(_elem384);
      }
      iprot.readListEnd();
    }
    struct.setRowBatchesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map385=iprot.readMapBegin();
  struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map385.size);
  for (int _i386=0; _i386 < _map385.size; ++_i386) {
    ByteBuffer _key387;
    ByteBuffer _val388;
    _key387=iprot.readBinary();
    _val388=iprot.readBinary();
    struct.attributes.put(_key387,_val388);
  }
  iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
