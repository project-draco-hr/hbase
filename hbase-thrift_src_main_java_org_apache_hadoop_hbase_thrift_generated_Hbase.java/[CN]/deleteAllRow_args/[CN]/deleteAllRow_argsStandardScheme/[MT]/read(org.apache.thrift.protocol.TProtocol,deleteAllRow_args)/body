{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.tableName=iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.row=iprot.readBinary();
    struct.setRowIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
  org.apache.thrift.protocol.TMap _map438=iprot.readMapBegin();
  struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map438.size);
  ByteBuffer _key439;
  ByteBuffer _val440;
  for (int _i441=0; _i441 < _map438.size; ++_i441) {
    _key439=iprot.readBinary();
    _val440=iprot.readBinary();
    struct.attributes.put(_key439,_val440);
  }
  iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
