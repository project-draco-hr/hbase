{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.row=iprot.readBinary();
    struct.setRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list211=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list211.size);
      for (int _i212=0; _i212 < _list211.size; ++_i212) {
        ByteBuffer _elem213;
        _elem213=iprot.readBinary();
        struct.columns.add(_elem213);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(3)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map214=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map214.size);
      for (int _i215=0; _i215 < _map214.size; ++_i215) {
        ByteBuffer _key216;
        ByteBuffer _val217;
        _key216=iprot.readBinary();
        _val217=iprot.readBinary();
        struct.attributes.put(_key216,_val217);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
