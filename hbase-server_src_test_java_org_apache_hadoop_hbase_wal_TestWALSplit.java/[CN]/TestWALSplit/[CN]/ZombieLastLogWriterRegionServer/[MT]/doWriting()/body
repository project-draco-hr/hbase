{
  this.user.runAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      int walToKeepOpen=numOfWriters - 1;
      Writer writer=null;
      try {
        writer=generateWALs(numOfWriters,ENTRIES,walToKeepOpen);
      }
 catch (      IOException e1) {
        throw new RuntimeException("Failed",e1);
      }
      editsCount.addAndGet(numOfWriters * ENTRIES);
      loop(writer);
      try {
        writer.close();
        fail("Writing closing after parsing should give an error.");
      }
 catch (      IOException exception) {
        LOG.debug("ignoring error when closing final writer.",exception);
      }
      return null;
    }
  }
);
}
