{
  conf.setBoolean(HBASE_SKIP_ERRORS,false);
  generateWALs(-1);
  useDifferentDFSClient();
  FileStatus[] logfiles=fs.listStatus(WALDIR);
  assertTrue("There should be some log file",logfiles != null && logfiles.length > 0);
  int largestLogFile=0;
  long largestSize=0;
  for (int i=0; i < logfiles.length; i++) {
    if (logfiles[i].getLen() > largestSize) {
      largestLogFile=i;
      largestSize=logfiles[i].getLen();
    }
  }
  assertTrue("There should be some log greater than size 0.",0 < largestSize);
  WALSplitter logSplitter=new WALSplitter(wals,conf,HBASEDIR,fs,null,null,this.mode){
    @Override protected Writer createWriter(    Path logfile) throws IOException {
      Writer mockWriter=Mockito.mock(Writer.class);
      Mockito.doThrow(new IOException("Injected")).when(mockWriter).append(Mockito.<Entry>any());
      return mockWriter;
    }
  }
;
  final AtomicBoolean stop=new AtomicBoolean(false);
  final Thread someOldThread=new Thread("Some-old-thread"){
    @Override public void run(){
      while (!stop.get())       Threads.sleep(10);
    }
  }
;
  someOldThread.setDaemon(true);
  someOldThread.start();
  final Thread t=new Thread("Background-thread-dumper"){
    public void run(){
      try {
        Threads.threadDumpingIsAlive(someOldThread);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
;
  t.setDaemon(true);
  t.start();
  try {
    logSplitter.splitLogFile(logfiles[largestLogFile],null);
    fail("Didn't throw!");
  }
 catch (  IOException ioe) {
    assertTrue(ioe.toString().contains("Injected"));
  }
 finally {
    stop.set(true);
  }
}
