{
  List<Result> results=MetaReader.fullScan(this.catalogTracker);
  Map<ServerName,List<Pair<HRegionInfo,Result>>> offlineServers=new TreeMap<ServerName,List<Pair<HRegionInfo,Result>>>();
  for (  Result result : results) {
    boolean disabled=false;
    boolean disablingOrEnabling=false;
    Pair<HRegionInfo,ServerName> region=MetaReader.parseCatalogResult(result);
    if (region == null)     continue;
    HRegionInfo regionInfo=region.getFirst();
    ServerName regionLocation=region.getSecond();
    if (regionInfo == null)     continue;
    String tableName=regionInfo.getTableNameAsString();
    if (regionLocation == null) {
      if (false == checkIfRegionsBelongsToEnabling(regionInfo)) {
        LOG.warn("Region " + regionInfo.getEncodedName() + " has null regionLocation."+ " But its table "+ tableName+ " isn't in ENABLING state.");
      }
      addTheTablesInPartialState(this.disablingTables,this.enablingTables,regionInfo,tableName);
    }
 else     if (!onlineServers.contains(regionLocation)) {
      List<Pair<HRegionInfo,Result>> offlineRegions=offlineServers.get(regionLocation);
      if (offlineRegions == null) {
        offlineRegions=new ArrayList<Pair<HRegionInfo,Result>>(1);
        offlineServers.put(regionLocation,offlineRegions);
      }
      offlineRegions.add(new Pair<HRegionInfo,Result>(regionInfo,result));
      disabled=checkIfRegionBelongsToDisabled(regionInfo);
      disablingOrEnabling=addTheTablesInPartialState(this.disablingTables,this.enablingTables,regionInfo,tableName);
      enableTableIfNotDisabledOrDisablingOrEnabling(disabled,disablingOrEnabling,tableName);
    }
 else {
      if (regionInfo.isOffline() && regionInfo.isSplit()) {
        String node=ZKAssign.getNodeName(this.watcher,regionInfo.getEncodedName());
        Stat stat=new Stat();
        byte[] data=ZKUtil.getDataNoWatch(this.watcher,node,stat);
        if (data == null) {
          LOG.debug("Region " + regionInfo.getRegionNameAsString() + " split is completed. Hence need not add to regions list");
          continue;
        }
      }
      if (false == checkIfRegionBelongsToDisabled(regionInfo) && false == checkIfRegionsBelongsToEnabling(regionInfo)) {
        regions.put(regionInfo,regionLocation);
        addToServers(regionLocation,regionInfo);
      }
      disablingOrEnabling=addTheTablesInPartialState(this.disablingTables,this.enablingTables,regionInfo,tableName);
      disabled=checkIfRegionBelongsToDisabled(regionInfo);
      enableTableIfNotDisabledOrDisablingOrEnabling(disabled,disablingOrEnabling,tableName);
    }
  }
  return offlineServers;
}
