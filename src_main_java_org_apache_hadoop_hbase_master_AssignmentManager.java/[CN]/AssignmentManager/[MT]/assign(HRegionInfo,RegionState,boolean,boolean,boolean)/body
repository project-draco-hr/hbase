{
  for (int i=0; i < this.maximumAssignmentAttempts; i++) {
    int versionOfOfflineNode=-1;
    if (setOfflineInZK) {
      versionOfOfflineNode=setOfflineInZooKeeper(state,hijack);
      if (versionOfOfflineNode != -1) {
        if (isDisabledorDisablingRegionInRIT(region)) {
          return;
        }
      }
    }
    if (setOfflineInZK && versionOfOfflineNode == -1) {
      return;
    }
    if (this.master.isStopped()) {
      LOG.debug("Server stopped; skipping assign of " + state);
      return;
    }
    RegionPlan plan=getRegionPlan(state,forceNewPlan);
    if (plan == null) {
      debugLog(state.getRegion(),"Unable to determine a plan to assign " + state);
      return;
    }
    try {
      debugLog(state.getRegion(),"Assigning region " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination().toString());
      state.update(RegionState.State.PENDING_OPEN,System.currentTimeMillis(),plan.getDestination());
      RegionOpeningState regionOpenState=serverManager.sendRegionOpen(plan.getDestination(),state.getRegion(),versionOfOfflineNode);
      if (regionOpenState == RegionOpeningState.ALREADY_OPENED) {
        String encodedRegionName=state.getRegion().getEncodedName();
        try {
          ZKAssign.deleteOfflineNode(master.getZooKeeper(),encodedRegionName);
        }
 catch (        KeeperException.NoNodeException e) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("The unassigned node " + encodedRegionName + " doesnot exist.");
          }
        }
catch (        KeeperException e) {
          master.abort("Error deleting OFFLINED node in ZK for transition ZK node (" + encodedRegionName + ")",e);
        }
synchronized (this.regionsInTransition) {
          this.regionsInTransition.remove(plan.getRegionInfo().getEncodedName());
        }
synchronized (this.regions) {
          this.regions.put(plan.getRegionInfo(),plan.getDestination());
        }
      }
      break;
    }
 catch (    Throwable t) {
      if (t instanceof RemoteException) {
        t=((RemoteException)t).unwrapRemoteException();
        if (t instanceof RegionAlreadyInTransitionException) {
          String errorMsg="Failed assignment of " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination()+ " as the region was already "+ extractRegionState((RegionAlreadyInTransitionException)t)+ " in the RS "+ plan.getDestination();
          LOG.error(errorMsg,t);
          return;
        }
        LOG.warn("Failed assignment of " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination()+ ", trying to assign elsewhere instead; "+ "retry="+ i,t);
        state.update(RegionState.State.OFFLINE);
        if (getRegionPlan(state,plan.getDestination(),true) == null) {
          LOG.warn("Unable to find a viable location to assign region " + state.getRegion().getRegionNameAsString());
          return;
        }
      }
    }
  }
}
