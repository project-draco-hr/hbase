{
  String encodedRegionName=regionInfo.getEncodedName();
  LOG.info("Processing region " + regionInfo.getRegionNameAsString() + " in state "+ data.getEventType());
synchronized (regionsInTransition) {
switch (data.getEventType()) {
case RS_ZK_REGION_CLOSING:
      if (isOnDeadServer(regionInfo,deadServers) && (data.getOrigin() == null || !serverManager.isServerOnline(data.getOrigin()))) {
        forceOffline(regionInfo,data);
      }
 else {
        regionsInTransition.put(encodedRegionName,new RegionState(regionInfo,RegionState.State.CLOSING,data.getStamp(),data.getOrigin()));
      }
    break;
case RS_ZK_REGION_CLOSED:
case RS_ZK_REGION_FAILED_OPEN:
  addToRITandCallClose(regionInfo,RegionState.State.CLOSED,data);
break;
case M_ZK_REGION_OFFLINE:
addToRITandCallClose(regionInfo,RegionState.State.OFFLINE,data);
break;
case RS_ZK_REGION_OPENING:
if (regionInfo.isMetaRegion() || regionInfo.isRootRegion()) {
regionsInTransition.put(encodedRegionName,new RegionState(regionInfo,RegionState.State.OPENING,data.getStamp(),data.getOrigin()));
processOpeningState(regionInfo);
break;
}
regionsInTransition.put(encodedRegionName,new RegionState(regionInfo,RegionState.State.OPENING,data.getStamp(),data.getOrigin()));
break;
case RS_ZK_REGION_OPENED:
regionsInTransition.put(encodedRegionName,new RegionState(regionInfo,RegionState.State.OPEN,data.getStamp(),data.getOrigin()));
ServerName sn=data.getOrigin() == null ? null : data.getOrigin();
if (sn == null) {
LOG.warn("Region in transition " + regionInfo.getEncodedName() + " references a null server; letting RIT timeout so will be "+ "assigned elsewhere");
}
 else if (!serverManager.isServerOnline(sn) && (isOnDeadServer(regionInfo,deadServers) || regionInfo.isMetaRegion() || regionInfo.isRootRegion())) {
forceOffline(regionInfo,data);
}
 else {
new OpenedRegionHandler(master,this,regionInfo,sn,expectedVersion).process();
}
break;
}
}
}
