{
  debugLog(region,"Starting unassignment of region " + region.getRegionNameAsString() + " (offlining)");
synchronized (this.regions) {
    if (!regions.containsKey(region)) {
      debugLog(region,"Attempted to unassign region " + region.getRegionNameAsString() + " but it is not "+ "currently assigned anywhere");
      return;
    }
  }
  String encodedName=region.getEncodedName();
  RegionState state;
synchronized (regionsInTransition) {
    state=regionsInTransition.get(encodedName);
    if (state == null) {
      try {
        ZKAssign.createNodeClosing(master.getZooKeeper(),region,master.getServerName());
      }
 catch (      KeeperException e) {
        master.abort("Unexpected ZK exception creating node CLOSING",e);
        return;
      }
      state=new RegionState(region,RegionState.State.PENDING_CLOSE);
      regionsInTransition.put(encodedName,state);
    }
 else     if (force && (state.isPendingClose() || state.isClosing())) {
      debugLog(region,"Attempting to unassign region " + region.getRegionNameAsString() + " which is already "+ state.getState()+ " but forcing to send a CLOSE RPC again ");
      state.update(state.getState());
    }
 else {
      debugLog(region,"Attempting to unassign region " + region.getRegionNameAsString() + " but it is "+ "already in transition ("+ state.getState()+ ")");
      return;
    }
  }
  ServerName server=null;
synchronized (this.regions) {
    server=regions.get(region);
  }
  try {
    if (serverManager.sendRegionClose(server,state.getRegion())) {
      debugLog(region,"Sent CLOSE to " + server + " for region "+ region.getRegionNameAsString());
      return;
    }
    LOG.warn("Server " + server + " region CLOSE RPC returned false for "+ region.getEncodedName());
  }
 catch (  NotServingRegionException nsre) {
    LOG.info("Server " + server + " returned "+ nsre+ " for "+ region.getEncodedName());
  }
catch (  Throwable t) {
    if (t instanceof RemoteException) {
      t=((RemoteException)t).unwrapRemoteException();
      if (t instanceof NotServingRegionException) {
        if (checkIfRegionBelongsToDisabling(region)) {
          LOG.info("While trying to recover the table " + region.getTableNameAsString() + " to DISABLED state the region "+ region+ " was offlined but the table was in DISABLING state");
synchronized (this.regionsInTransition) {
            this.regionsInTransition.remove(region.getEncodedName());
          }
synchronized (this.regions) {
            this.regions.remove(region);
          }
        }
      }
      if (t instanceof RegionAlreadyInTransitionException) {
        debugLog(region,"update " + state + " the timestamp.");
        state.update(state.getState());
      }
    }
    LOG.info("Server " + server + " returned "+ t+ " for "+ region.getEncodedName());
  }
}
