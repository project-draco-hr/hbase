{
  LOG.debug("Starting unassignment of region " + region.getRegionNameAsString() + " (offlining)");
  if (!regions.containsKey(region)) {
    LOG.debug("Attempted to unassign region " + region.getRegionNameAsString() + " but it is not "+ "currently assigned anywhere");
    return;
  }
  String encodedName=region.getEncodedName();
  RegionState state;
synchronized (regionsInTransition) {
    state=regionsInTransition.get(encodedName);
    if (state == null) {
      state=new RegionState(region,RegionState.State.PENDING_CLOSE);
      regionsInTransition.put(encodedName,state);
    }
 else     if (force && state.isPendingClose()) {
      LOG.debug("Attempting to unassign region " + region.getRegionNameAsString() + " which is already pending close "+ "but forcing an additional close");
      state.update(RegionState.State.PENDING_CLOSE);
    }
 else {
      LOG.debug("Attempting to unassign region " + region.getRegionNameAsString() + " but it is "+ "already in transition ("+ state.getState()+ ")");
      return;
    }
  }
  HServerInfo server=null;
synchronized (this.regions) {
    server=regions.get(region);
  }
  try {
    if (serverManager.sendRegionClose(server,state.getRegion())) {
      LOG.debug("Sent CLOSE to " + server + " for region "+ region.getRegionNameAsString());
      return;
    }
    LOG.debug("Server " + server + " region CLOSE RPC returned false");
  }
 catch (  NotServingRegionException nsre) {
    LOG.info("Server " + server + " returned NotServingRegionException");
  }
catch (  ConnectException e) {
    LOG.info("Server " + server + " returned ConnectException "+ e.getMessage());
  }
catch (  RemoteException re) {
    if (re.unwrapRemoteException() instanceof NotServingRegionException) {
      LOG.debug("Server " + server + " returned NotServingRegionException");
    }
 else {
      this.master.abort("Remote unexpected exception",re.unwrapRemoteException());
    }
  }
catch (  Throwable t) {
    this.master.abort("Remote unexpected exception",t);
  }
  LOG.debug("Attempted to send CLOSE to " + server + " for region "+ region.getRegionNameAsString()+ " but failed, "+ "setting region as OFFLINE and reassigning");
synchronized (regionsInTransition) {
    forceRegionStateToOffline(region);
  }
  assign(region,true);
}
