{
  String encodedName=state.getRegion().getEncodedName();
  List<ServerName> servers=this.serverManager.getOnlineServersList();
  if (serverToExclude != null)   servers.remove(serverToExclude);
  if (servers.isEmpty())   return null;
  RegionPlan randomPlan=new RegionPlan(state.getRegion(),null,balancer.randomAssignment(servers));
  boolean newPlan=false;
  RegionPlan existingPlan=null;
synchronized (this.regionPlans) {
    existingPlan=this.regionPlans.get(encodedName);
    if (forceNewPlan || existingPlan == null || existingPlan.getDestination() == null || existingPlan.getDestination().equals(serverToExclude)) {
      newPlan=true;
      this.regionPlans.put(encodedName,randomPlan);
    }
  }
  if (newPlan) {
    LOG.debug("No previous transition plan was found (or we are ignoring " + "an existing plan) for " + state.getRegion().getRegionNameAsString() + " so generated a random one; "+ randomPlan+ "; "+ serverManager.countOfRegionServers()+ " (online="+ serverManager.getOnlineServers().size()+ ", exclude="+ serverToExclude+ ") available servers");
    return randomPlan;
  }
  LOG.debug("Using pre-existing plan for region " + state.getRegion().getRegionNameAsString() + "; plan="+ existingPlan);
  return existingPlan;
}
