{
  String encodedName=state.getRegion().getEncodedName();
  List<HServerInfo> servers=this.serverManager.getOnlineServersList();
  if (serverToExclude != null)   servers.remove(serverToExclude);
  if (servers.isEmpty())   return null;
  RegionPlan randomPlan=new RegionPlan(state.getRegion(),null,LoadBalancer.randomAssignment(servers));
synchronized (this.regionPlans) {
    RegionPlan existingPlan=this.regionPlans.get(encodedName);
    if (existingPlan == null || forceNewPlan || existingPlan.getDestination().equals(serverToExclude)) {
      LOG.debug("No previous transition plan was found (or we are ignoring " + "an existing plan) for " + state.getRegion().getRegionNameAsString() + " so generated a random one; "+ randomPlan+ "; "+ serverManager.countOfRegionServers()+ " (online="+ serverManager.getOnlineServers().size()+ ", exclude="+ serverToExclude+ ") available servers");
      this.regionPlans.put(encodedName,randomPlan);
      return randomPlan;
    }
    LOG.debug("Using pre-existing plan for region " + state.getRegion().getRegionNameAsString() + "; plan="+ existingPlan);
    return existingPlan;
  }
}
