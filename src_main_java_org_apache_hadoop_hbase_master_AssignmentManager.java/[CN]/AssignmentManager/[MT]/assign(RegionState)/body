{
  if (!state.isClosed() && !state.isOffline()) {
    LOG.info("Attempting to assign region but it is in transition and in " + "an unexpected state:" + state);
    return;
  }
 else {
    state.update(RegionState.State.OFFLINE);
  }
  try {
    if (!ZKAssign.createOrForceNodeOffline(master.getZooKeeper(),state.getRegion(),master.getServerName())) {
      LOG.warn("Attempted to create/force node into OFFLINE state before " + "completing assignment but failed to do so");
      return;
    }
  }
 catch (  KeeperException e) {
    master.abort("Unexpected ZK exception creating/setting node OFFLINE",e);
    return;
  }
  String encodedName=state.getRegion().getEncodedName();
  RegionPlan plan;
synchronized (regionPlans) {
    plan=regionPlans.get(encodedName);
    if (plan == null) {
      LOG.debug("No previous transition plan for " + state.getRegion().getRegionNameAsString() + " so generating a random one from "+ serverManager.countOfRegionServers()+ " ( "+ serverManager.getOnlineServers().size()+ ") available servers");
      plan=new RegionPlan(state.getRegion(),null,LoadBalancer.randomAssignment(serverManager.getOnlineServersList()));
      regionPlans.put(encodedName,plan);
    }
 else {
      LOG.debug("Using preexisting plan=" + plan);
    }
  }
  try {
    serverManager.sendRegionOpen(plan.getDestination(),state.getRegion());
    state.update(RegionState.State.PENDING_OPEN);
  }
 catch (  Throwable t) {
    LOG.warn("Failed assignment of " + state.getRegion().getRegionNameAsString() + " to "+ plan.getDestination(),t);
synchronized (regionPlans) {
      this.regionPlans.remove(encodedName);
    }
  }
}
