{
synchronized (regionsInTransition) {
    if (!serverManager.isServerOnline(data.getServerName()) && !this.master.getServerName().equals(data.getServerName())) {
      LOG.warn("Attempted to handle region transition for server but " + "server is not online: " + data);
      return;
    }
    String encodedName=HRegionInfo.encodeRegionName(data.getRegionName());
    String prettyPrintedRegionName=HRegionInfo.prettyPrint(encodedName);
    LOG.debug("Handling transition=" + data.getEventType() + ", server="+ data.getServerName()+ ", region="+ prettyPrintedRegionName);
    RegionState regionState=regionsInTransition.get(encodedName);
switch (data.getEventType()) {
case M2ZK_REGION_OFFLINE:
      LOG.warn("What to do with this event? " + data);
    break;
case RS2ZK_REGION_CLOSING:
  if (regionState == null || (!regionState.isPendingClose() && !regionState.isClosing())) {
    LOG.warn("Received CLOSING for region " + prettyPrintedRegionName + " from server "+ data.getServerName()+ " but region was in "+ " the state "+ regionState+ " and not "+ "in expected PENDING_CLOSE or CLOSING states");
    return;
  }
regionState.update(RegionState.State.CLOSING,data.getStamp());
break;
case RS2ZK_REGION_CLOSED:
if (regionState == null || (!regionState.isPendingClose() && !regionState.isClosing())) {
LOG.warn("Received CLOSED for region " + prettyPrintedRegionName + " from server "+ data.getServerName()+ " but region was in "+ " the state "+ regionState+ " and not "+ "in expected PENDING_CLOSE or CLOSING states");
return;
}
regionState.update(RegionState.State.CLOSED,data.getStamp());
this.executorService.submit(new ClosedRegionHandler(master,this,data,regionState.getRegion()));
break;
case RS2ZK_REGION_OPENING:
if (regionState == null || (!regionState.isPendingOpen() && !regionState.isOpening())) {
LOG.warn("Received OPENING for region " + prettyPrintedRegionName + " from server "+ data.getServerName()+ " but region was in "+ " the state "+ regionState+ " and not "+ "in expected PENDING_OPEN or OPENING states");
return;
}
regionState.update(RegionState.State.OPENING,data.getStamp());
break;
case RS2ZK_REGION_OPENED:
if (regionState == null || (!regionState.isPendingOpen() && !regionState.isOpening())) {
LOG.warn("Received OPENED for region " + prettyPrintedRegionName + " from server "+ data.getServerName()+ " but region was in "+ " the state "+ regionState+ " and not "+ "in expected PENDING_OPEN or OPENING states");
return;
}
this.executorService.submit(new OpenedRegionHandler(master,this,data,regionState.getRegion(),this.serverManager.getServerInfo(data.getServerName())));
break;
}
}
}
