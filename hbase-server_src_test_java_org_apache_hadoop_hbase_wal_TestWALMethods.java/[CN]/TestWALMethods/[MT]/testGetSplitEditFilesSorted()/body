{
  FileSystem fs=FileSystem.get(util.getConfiguration());
  Path regiondir=util.getDataTestDir("regiondir");
  fs.delete(regiondir,true);
  fs.mkdirs(regiondir);
  Path recoverededits=WALSplitter.getRegionDirRecoveredEditsDir(regiondir);
  String first=WALSplitter.formatRecoveredEditsFileName(-1);
  createFile(fs,recoverededits,first);
  createFile(fs,recoverededits,WALSplitter.formatRecoveredEditsFileName(0));
  createFile(fs,recoverededits,WALSplitter.formatRecoveredEditsFileName(1));
  createFile(fs,recoverededits,WALSplitter.formatRecoveredEditsFileName(11));
  createFile(fs,recoverededits,WALSplitter.formatRecoveredEditsFileName(2));
  createFile(fs,recoverededits,WALSplitter.formatRecoveredEditsFileName(50));
  String last=WALSplitter.formatRecoveredEditsFileName(Long.MAX_VALUE);
  createFile(fs,recoverededits,last);
  createFile(fs,recoverededits,Long.toString(Long.MAX_VALUE) + "." + System.currentTimeMillis());
  final Configuration walConf=new Configuration(util.getConfiguration());
  FSUtils.setRootDir(walConf,regiondir);
  (new WALFactory(walConf,null,"dummyLogName")).getWAL(new byte[]{},null);
  NavigableSet<Path> files=WALSplitter.getSplitEditFilesSorted(fs,regiondir);
  assertEquals(7,files.size());
  assertEquals(files.pollFirst().getName(),first);
  assertEquals(files.pollLast().getName(),last);
  assertEquals(files.pollFirst().getName(),WALSplitter.formatRecoveredEditsFileName(0));
  assertEquals(files.pollFirst().getName(),WALSplitter.formatRecoveredEditsFileName(1));
  assertEquals(files.pollFirst().getName(),WALSplitter.formatRecoveredEditsFileName(2));
  assertEquals(files.pollFirst().getName(),WALSplitter.formatRecoveredEditsFileName(11));
}
