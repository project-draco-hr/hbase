{
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.listTables();
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableDescriptors((RpcController)Mockito.any(),(GetTableDescriptorsRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.listTableNames();
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableNames((RpcController)Mockito.any(),(GetTableNamesRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.getTableDescriptor(TableName.valueOf("getTableDescriptor"));
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableDescriptors((RpcController)Mockito.any(),(GetTableDescriptorsRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.getTableDescriptorsByTableName(new ArrayList<TableName>());
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableDescriptors((RpcController)Mockito.any(),(GetTableDescriptorsRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.move(new byte[0],null);
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).moveRegion((RpcController)Mockito.any(),(MoveRegionRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.offline(new byte[0]);
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).offlineRegion((RpcController)Mockito.any(),(OfflineRegionRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.setBalancerRunning(true,true);
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).setBalancerRunning((RpcController)Mockito.any(),(SetBalancerRunningRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.balancer();
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).balance((RpcController)Mockito.any(),(BalanceRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.enableCatalogJanitor(true);
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).enableCatalogJanitor((RpcController)Mockito.any(),(EnableCatalogJanitorRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.runCatalogScan();
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).runCatalogScan((RpcController)Mockito.any(),(RunCatalogScanRequest)Mockito.any());
    }
  }
);
  testMasterOperationIsRetried(new MethodCaller(){
    @Override public void call(    Admin admin) throws Exception {
      admin.isCatalogJanitorEnabled();
    }
    @Override public void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception {
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).isCatalogJanitorEnabled((RpcController)Mockito.any(),(IsCatalogJanitorEnabledRequest)Mockito.any());
    }
  }
);
}
