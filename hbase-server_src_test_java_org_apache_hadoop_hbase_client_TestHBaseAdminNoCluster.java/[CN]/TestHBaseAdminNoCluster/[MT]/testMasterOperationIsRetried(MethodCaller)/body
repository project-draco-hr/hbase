{
  Configuration configuration=HBaseConfiguration.create();
  configuration.setLong(HConstants.HBASE_CLIENT_PAUSE,1);
  final int count=10;
  configuration.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,count);
  ClusterConnection connection=mock(ClusterConnection.class);
  when(connection.getConfiguration()).thenReturn(configuration);
  MasterKeepAliveConnection masterAdmin=Mockito.mock(MasterKeepAliveConnection.class,new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      if (invocation.getMethod().getName().equals("close")) {
        return null;
      }
      throw new MasterNotRunningException();
    }
  }
);
  Mockito.when(connection.getKeepAliveMasterService()).thenReturn(masterAdmin);
  RpcControllerFactory rpcControllerFactory=Mockito.mock(RpcControllerFactory.class);
  Mockito.when(connection.getRpcControllerFactory()).thenReturn(rpcControllerFactory);
  Mockito.when(rpcControllerFactory.newController()).thenReturn(Mockito.mock(PayloadCarryingRpcController.class));
  RpcRetryingCallerFactory callerFactory=new RpcRetryingCallerFactory(configuration);
  Mockito.when(connection.getRpcRetryingCallerFactory()).thenReturn(callerFactory);
  Admin admin=null;
  try {
    admin=Mockito.spy(new HBaseAdmin(connection));
    Mockito.doReturn(null).when(((HBaseAdmin)admin)).getRegion(Matchers.<byte[]>any());
    try {
      caller.call(admin);
      fail();
    }
 catch (    RetriesExhaustedException e) {
      LOG.info("Expected fail",e);
    }
    caller.verify(masterAdmin,count);
  }
  finally {
    if (admin != null) {
      admin.close();
    }
  }
}
