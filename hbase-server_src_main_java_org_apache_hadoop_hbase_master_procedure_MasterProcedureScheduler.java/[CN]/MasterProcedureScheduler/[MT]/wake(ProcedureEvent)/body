{
  final boolean isDebugEnabled=LOG.isDebugEnabled();
synchronized (event) {
    event.setReady(true);
    if (isDebugEnabled) {
      LOG.debug("Wake event " + event);
    }
    schedLock.lock();
    try {
      while (event.hasWaitingTables()) {
        Queue<TableName> queue=event.popWaitingTable();
        addToRunQueue(tableRunQueue,queue);
      }
      while (event.hasWaitingServers()) {
        Queue<ServerName> queue=event.popWaitingServer();
        addToRunQueue(serverRunQueue,queue);
      }
      while (event.hasWaitingProcedures()) {
        wakeProcedure(event.popWaitingProcedure(false));
      }
      if (queueSize > 1) {
        schedWaitCond.signalAll();
      }
 else       if (queueSize > 0) {
        schedWaitCond.signal();
      }
    }
  finally {
      schedLock.unlock();
    }
  }
}
