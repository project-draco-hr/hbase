{
  THLog log=new THLog(fs,dir,this.conf,null);
  THLogRecoveryManager logRecoveryMangaer=new THLogRecoveryManager(fs,regionInfo,conf);
  long transactionId=1;
  log.writeStartToLog(regionInfo,transactionId);
  log.writeUpdateToLog(regionInfo,transactionId,new Put(row1).add(family,column,val1));
  log.writeUpdateToLog(regionInfo,transactionId,new Put(row2).add(family,column,val2));
  log.writeUpdateToLog(regionInfo,transactionId,new Put(row3).add(family,column,val3));
  log.writeCommitToLog(regionInfo,transactionId);
  log.close();
  Path filename=log.computeFilename(log.getFilenum());
  Map<Long,List<KeyValue>> commits=logRecoveryMangaer.getCommitsFromLog(filename,-1,null);
  assertEquals(1,commits.size());
  assertTrue(commits.containsKey(transactionId));
  assertEquals(3,commits.get(transactionId).size());
  List<KeyValue> updates=commits.get(transactionId);
  KeyValue update1=updates.get(0);
  assertTrue(Bytes.equals(row1,update1.getRow()));
  assertTrue(Bytes.equals(val1,update1.getValue()));
  KeyValue update2=updates.get(1);
  assertTrue(Bytes.equals(row2,update2.getRow()));
  assertTrue(Bytes.equals(val2,update2.getValue()));
  KeyValue update3=updates.get(2);
  assertTrue(Bytes.equals(row3,update3.getRow()));
  assertTrue(Bytes.equals(val3,update3.getValue()));
}
