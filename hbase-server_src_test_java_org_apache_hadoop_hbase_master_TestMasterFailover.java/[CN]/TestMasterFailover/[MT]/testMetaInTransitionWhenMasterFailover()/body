{
  final int NUM_MASTERS=1;
  final int NUM_RS=1;
  HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  log("Cluster started");
  log("Moving meta off the master");
  HMaster activeMaster=cluster.getMaster();
  HRegionServer rs=cluster.getRegionServer(0);
  ServerName metaServerName=cluster.getLiveRegionServerThreads().get(0).getRegionServer().getServerName();
  activeMaster.move(HRegionInfo.FIRST_META_REGIONINFO.getEncodedNameAsBytes(),Bytes.toBytes(metaServerName.getServerName()));
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  assertEquals("Meta should be assigned on expected regionserver",metaServerName,activeMaster.getMetaTableLocator().getMetaRegionLocation(activeMaster.getZooKeeper()));
  log("Aborting master");
  activeMaster.abort("test-kill");
  cluster.waitForMasterToStop(activeMaster.getServerName(),30000);
  log("Master has aborted");
  RegionState metaState=MetaTableLocator.getMetaRegionState(rs.getZooKeeper());
  assertEquals("hbase:meta should be onlined on RS",metaState.getServerName(),rs.getServerName());
  assertEquals("hbase:meta should be onlined on RS",metaState.getState(),State.OPEN);
  log("Starting up a new master");
  activeMaster=cluster.startMaster().getMaster();
  log("Waiting for master to be ready");
  cluster.waitForActiveAndReadyMaster();
  log("Master is ready");
  metaState=MetaTableLocator.getMetaRegionState(activeMaster.getZooKeeper());
  assertEquals("hbase:meta should be onlined on RS",metaState.getServerName(),rs.getServerName());
  assertEquals("hbase:meta should be onlined on RS",metaState.getState(),State.OPEN);
  MetaTableLocator.setMetaLocation(activeMaster.getZooKeeper(),rs.getServerName(),State.PENDING_OPEN);
  Region meta=rs.getFromOnlineRegions(HRegionInfo.FIRST_META_REGIONINFO.getEncodedName());
  rs.removeFromOnlineRegions(meta,null);
  ((HRegion)meta).close();
  log("Aborting master");
  activeMaster.abort("test-kill");
  cluster.waitForMasterToStop(activeMaster.getServerName(),30000);
  log("Master has aborted");
  log("Starting up a new master");
  activeMaster=cluster.startMaster().getMaster();
  log("Waiting for master to be ready");
  cluster.waitForActiveAndReadyMaster();
  log("Master is ready");
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  log("Meta was assigned");
  metaState=MetaTableLocator.getMetaRegionState(activeMaster.getZooKeeper());
  assertEquals("hbase:meta should be onlined on RS",metaState.getServerName(),rs.getServerName());
  assertEquals("hbase:meta should be onlined on RS",metaState.getState(),State.OPEN);
  MetaTableLocator.setMetaLocation(activeMaster.getZooKeeper(),rs.getServerName(),State.PENDING_CLOSE);
  log("Aborting master");
  activeMaster.abort("test-kill");
  cluster.waitForMasterToStop(activeMaster.getServerName(),30000);
  log("Master has aborted");
  rs.getRSRpcServices().closeRegion(null,ProtobufUtil.buildCloseRegionRequest(rs.getServerName(),HRegionInfo.FIRST_META_REGIONINFO.getEncodedName()));
  log("Starting up a new master");
  activeMaster=cluster.startMaster().getMaster();
  log("Waiting for master to be ready");
  cluster.waitForActiveAndReadyMaster();
  log("Master is ready");
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  log("Meta was assigned");
  TEST_UTIL.shutdownMiniCluster();
}
