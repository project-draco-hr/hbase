{
  final int NUM_MASTERS=1;
  final int NUM_RS=1;
  Configuration conf=HBaseConfiguration.create();
  HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility(conf);
  TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  log("Cluster started");
  List<MasterThread> masterThreads=cluster.getMasterThreads();
  assertEquals(1,masterThreads.size());
  assertTrue(cluster.waitForActiveAndReadyMaster());
  HMaster master=masterThreads.get(0).getMaster();
  assertTrue(master.isActiveMaster());
  assertTrue(master.isInitialized());
  RegionLocator onlineTable=TEST_UTIL.createTable(TableName.valueOf("onlineTable"),"family");
  HTableDescriptor offlineTable=new HTableDescriptor(TableName.valueOf(Bytes.toBytes("offlineTable")));
  offlineTable.addFamily(new HColumnDescriptor(Bytes.toBytes("family")));
  FileSystem filesystem=FileSystem.get(conf);
  Path rootdir=FSUtils.getRootDir(conf);
  FSTableDescriptors fstd=new FSTableDescriptors(filesystem,rootdir);
  fstd.createTableDescriptor(offlineTable);
  HRegionInfo hriOffline=new HRegionInfo(offlineTable.getTableName(),null,null);
  createRegion(hriOffline,rootdir,conf,offlineTable);
  MetaTableAccessor.addRegionToMeta(master.getShortCircuitConnection(),hriOffline);
  log("Regions in hbase:meta and namespace have been created");
  assertEquals(3,cluster.countServedRegions());
  HRegionInfo hriOnline=onlineTable.getRegionLocation(HConstants.EMPTY_START_ROW).getRegionInfo();
  RegionStates regionStates=master.getAssignmentManager().getRegionStates();
  RegionStateStore stateStore=master.getAssignmentManager().getRegionStateStore();
  RegionState oldState=regionStates.getRegionState(hriOnline);
  RegionState newState=new RegionState(hriOnline,State.PENDING_CLOSE,oldState.getServerName());
  stateStore.updateRegionState(HConstants.NO_SEQNUM,newState,oldState);
  oldState=new RegionState(hriOffline,State.OFFLINE);
  newState=new RegionState(hriOffline,State.PENDING_OPEN,newState.getServerName());
  stateStore.updateRegionState(HConstants.NO_SEQNUM,newState,oldState);
  log("Aborting master");
  cluster.abortMaster(0);
  cluster.waitOnMaster(0);
  log("Master has aborted");
  log("Starting up a new master");
  master=cluster.startMaster().getMaster();
  log("Waiting for master to be ready");
  cluster.waitForActiveAndReadyMaster();
  log("Master is ready");
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  regionStates=master.getAssignmentManager().getRegionStates();
  assertTrue(regionStates.isRegionOnline(hriOffline));
  assertTrue(regionStates.isRegionOnline(hriOnline));
  log("Done with verification, shutting down cluster");
  TEST_UTIL.shutdownMiniCluster();
}
