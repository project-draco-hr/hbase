{
  UniformSplit splitter=new UniformSplit();
  try {
    splitter.split(1);
    throw new AssertionError("Splitting into <2 regions should have thrown exception");
  }
 catch (  IllegalArgumentException e) {
  }
  byte[][] twoRegionsSplits=splitter.split(2);
  assertEquals(1,twoRegionsSplits.length);
  assertArrayEquals(twoRegionsSplits[0],new byte[]{0x7f,xFF,xFF,xFF,xFF,xFF,xFF,xFF});
  byte[][] threeRegionsSplits=splitter.split(3);
  assertEquals(2,threeRegionsSplits.length);
  byte[] expectedSplit0=new byte[]{0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55};
  assertArrayEquals(expectedSplit0,threeRegionsSplits[0]);
  byte[] expectedSplit1=new byte[]{(byte)0xAA,(byte)0xAA,(byte)0xAA,(byte)0xAA,(byte)0xAA,(byte)0xAA,(byte)0xAA,(byte)0xAA};
  assertArrayEquals(expectedSplit1,threeRegionsSplits[1]);
  byte[] splitPoint=splitter.split(new byte[]{0x10},new byte[]{0x30});
  assertArrayEquals(new byte[]{0x20},splitPoint);
  byte[] lastRow=new byte[]{xFF,xFF,xFF,xFF,xFF,xFF,xFF,xFF};
  assertArrayEquals(lastRow,splitter.lastRow());
  byte[] firstRow=ArrayUtils.EMPTY_BYTE_ARRAY;
  assertArrayEquals(firstRow,splitter.firstRow());
  splitPoint=splitter.split(firstRow,new byte[]{0x20});
  assertArrayEquals(splitPoint,new byte[]{0x10});
  splitPoint=splitter.split(new byte[]{(byte)0xdf,xFF,xFF,xFF,xFF,xFF,xFF,xFF},lastRow);
  assertArrayEquals(splitPoint,new byte[]{(byte)0xef,xFF,xFF,xFF,xFF,xFF,xFF,xFF});
}
