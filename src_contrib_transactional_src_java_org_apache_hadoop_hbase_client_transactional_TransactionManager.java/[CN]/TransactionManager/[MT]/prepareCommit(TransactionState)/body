{
  boolean allReadOnly=true;
  try {
    Iterator<HRegionLocation> locationIterator=transactionState.getParticipatingRegions().iterator();
    while (locationIterator.hasNext()) {
      HRegionLocation location=locationIterator.next();
      TransactionalRegionInterface transactionalRegionServer=(TransactionalRegionInterface)connection.getHRegionConnection(location.getServerAddress());
      int commitStatus=transactionalRegionServer.commitRequest(location.getRegionInfo().getRegionName(),transactionState.getTransactionId());
      boolean canCommit=true;
switch (commitStatus) {
case TransactionalRegionInterface.COMMIT_OK:
        allReadOnly=false;
      break;
case TransactionalRegionInterface.COMMIT_OK_READ_ONLY:
    locationIterator.remove();
  break;
case TransactionalRegionInterface.COMMIT_UNSUCESSFUL:
canCommit=false;
break;
default :
throw new CommitUnsuccessfulException("Unexpected return code from prepareCommit: " + commitStatus);
}
if (LOG.isTraceEnabled()) {
LOG.trace("Region [" + location.getRegionInfo().getRegionNameAsString() + "] votes "+ (canCommit ? "to commit" : "to abort")+ " transaction "+ transactionState.getTransactionId());
}
if (!canCommit) {
LOG.debug("Aborting [" + transactionState.getTransactionId() + "]");
abort(transactionState,location);
throw new CommitUnsuccessfulException();
}
}
}
 catch (Exception e) {
LOG.debug("Commit of transaction [" + transactionState.getTransactionId() + "] was unsucsessful",e);
try {
abort(transactionState);
}
 catch (Exception abortException) {
LOG.warn("Exeption durring abort",abortException);
}
throw new CommitUnsuccessfulException(e);
}
return allReadOnly ? TransactionalRegionInterface.COMMIT_OK_READ_ONLY : TransactionalRegionInterface.COMMIT_OK;
}
