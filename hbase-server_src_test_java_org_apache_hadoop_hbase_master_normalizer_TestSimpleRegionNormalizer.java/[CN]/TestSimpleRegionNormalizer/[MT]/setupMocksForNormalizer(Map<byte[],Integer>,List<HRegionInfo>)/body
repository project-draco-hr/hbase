{
  masterServices=Mockito.mock(MasterServices.class,RETURNS_DEEP_STUBS);
  masterRpcServices=Mockito.mock(MasterRpcServices.class,RETURNS_DEEP_STUBS);
  ServerName sn=ServerName.valueOf("localhost",0,1L);
  when(masterServices.getAssignmentManager().getRegionStates().getRegionsOfTable(any(TableName.class))).thenReturn(hris);
  when(masterServices.getAssignmentManager().getRegionStates().getRegionServerOfRegion(any(HRegionInfo.class))).thenReturn(sn);
  for (  Map.Entry<byte[],Integer> region : regionSizes.entrySet()) {
    RegionLoad regionLoad=Mockito.mock(RegionLoad.class);
    when(regionLoad.getName()).thenReturn(region.getKey());
    when(regionLoad.getStorefileSizeMB()).thenReturn(region.getValue());
    when(masterServices.getServerManager().getLoad(sn).getRegionsLoad().get(region.getKey())).thenReturn(regionLoad);
  }
  try {
    when(masterRpcServices.isSplitOrMergeEnabled(any(RpcController.class),any(IsSplitOrMergeEnabledRequest.class))).thenReturn(IsSplitOrMergeEnabledResponse.newBuilder().setEnabled(true).build());
  }
 catch (  ServiceException se) {
    LOG.debug("error setting isSplitOrMergeEnabled switch",se);
  }
  normalizer.setMasterServices(masterServices);
  normalizer.setMasterRpcServices(masterRpcServices);
}
