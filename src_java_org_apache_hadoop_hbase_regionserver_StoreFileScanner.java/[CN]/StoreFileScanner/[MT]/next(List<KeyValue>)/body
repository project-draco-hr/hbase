{
  if (this.scannerClosed) {
    return false;
  }
  this.lock.readLock().lock();
  try {
    KeyValue viable=getNextViableRow();
    if (viable == null) {
      return false;
    }
    boolean addedItem=false;
    for (int i=0; i < keys.length; i++) {
      while ((keys[i] != null) && (this.store.comparator.compareRows(this.keys[i],viable) == 0)) {
        if (!isWildcardScanner() && !isMultipleMatchScanner() && (keys[i].getTimestamp() != viable.getTimestamp())) {
          break;
        }
        if (columnMatch(i)) {
          if (!results.contains(keys[i])) {
            results.add(keys[i]);
            addedItem=true;
          }
        }
        if (!getNext(i)) {
          closeSubScanner(i);
        }
      }
      while ((keys[i] != null) && ((this.store.comparator.compareRows(this.keys[i],viable) <= 0) || (keys[i].getTimestamp() > this.timestamp) || !columnMatch(i))) {
        getNext(i);
      }
    }
    return addedItem;
  }
  finally {
    this.lock.readLock().unlock();
  }
}
