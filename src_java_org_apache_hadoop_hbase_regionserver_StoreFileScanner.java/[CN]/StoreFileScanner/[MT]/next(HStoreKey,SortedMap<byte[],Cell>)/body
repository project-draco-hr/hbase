{
  if (this.scannerClosed) {
    return false;
  }
  this.lock.readLock().lock();
  try {
    ViableRow viableRow=getNextViableRow();
    boolean insertedItem=false;
    if (viableRow.getRow() != null) {
      key.setRow(viableRow.getRow());
      key.setVersion(viableRow.getTimestamp());
      for (int i=0; i < keys.length; i++) {
        while ((keys[i] != null) && (HStoreKey.compareTwoRowKeys(this.keys[i].getRow(),viableRow.getRow()) == 0)) {
          if (!isWildcardScanner() && !isMultipleMatchScanner() && (keys[i].getTimestamp() != viableRow.getTimestamp())) {
            break;
          }
          if (columnMatch(i)) {
            if (!results.containsKey(keys[i].getColumn())) {
              results.put(keys[i].getColumn(),new Cell(vals[i],keys[i].getTimestamp()));
              insertedItem=true;
            }
          }
          if (!getNext(i)) {
            closeSubScanner(i);
          }
        }
        while ((keys[i] != null) && ((HStoreKey.compareTwoRowKeys(this.keys[i].getRow(),viableRow.getRow()) <= 0) || (keys[i].getTimestamp() > this.timestamp) || (!columnMatch(i)))) {
          getNext(i);
        }
      }
    }
    return insertedItem;
  }
  finally {
    this.lock.readLock().unlock();
  }
}
