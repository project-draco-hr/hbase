{
  if (table == null || table.isSystemTable()) {
    LOG.debug("Normalization of system table " + table + " isn't allowed");
    return null;
  }
  List<NormalizationPlan> plans=new ArrayList<NormalizationPlan>();
  List<HRegionInfo> tableRegions=masterServices.getAssignmentManager().getRegionStates().getRegionsOfTable(table);
  if (tableRegions == null || tableRegions.size() < MIN_REGION_COUNT) {
    int nrRegions=tableRegions == null ? 0 : tableRegions.size();
    LOG.debug("Table " + table + " has "+ nrRegions+ " regions, required min number"+ " of regions for normalizer to run is "+ MIN_REGION_COUNT+ ", not running normalizer");
    return null;
  }
  LOG.debug("Computing normalization plan for table: " + table + ", number of regions: "+ tableRegions.size());
  long totalSizeMb=0;
  for (int i=0; i < tableRegions.size(); i++) {
    HRegionInfo hri=tableRegions.get(i);
    long regionSize=getRegionSize(hri);
    totalSizeMb+=regionSize;
  }
  double avgRegionSize=totalSizeMb / (double)tableRegions.size();
  LOG.debug("Table " + table + ", total aggregated regions size: "+ totalSizeMb);
  LOG.debug("Table " + table + ", average region size: "+ avgRegionSize);
  int candidateIdx=0;
  while (candidateIdx < tableRegions.size()) {
    HRegionInfo hri=tableRegions.get(candidateIdx);
    long regionSize=getRegionSize(hri);
    if (regionSize > 2 * avgRegionSize) {
      LOG.debug("Table " + table + ", large region "+ hri.getRegionNameAsString()+ " has size "+ regionSize+ ", more than twice avg size, splitting");
      plans.add(new SplitNormalizationPlan(hri,null));
    }
 else {
      if (candidateIdx == tableRegions.size() - 1) {
        break;
      }
      HRegionInfo hri2=tableRegions.get(candidateIdx + 1);
      long regionSize2=getRegionSize(hri2);
      if (regionSize + regionSize2 < avgRegionSize) {
        LOG.debug("Table " + table + ", small region size: "+ regionSize+ " plus its neighbor size: "+ regionSize2+ ", less than the avg size "+ avgRegionSize+ ", merging them");
        plans.add(new MergeNormalizationPlan(hri,hri2));
        candidateIdx++;
      }
    }
    candidateIdx++;
  }
  if (plans.isEmpty()) {
    LOG.debug("No normalization needed, regions look good for table: " + table);
    return null;
  }
  Collections.sort(plans,planComparator);
  return plans;
}
