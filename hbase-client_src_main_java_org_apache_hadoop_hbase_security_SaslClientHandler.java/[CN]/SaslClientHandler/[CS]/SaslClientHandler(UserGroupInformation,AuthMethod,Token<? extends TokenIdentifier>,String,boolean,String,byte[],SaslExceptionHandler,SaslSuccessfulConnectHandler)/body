{
  this.ticket=ticket;
  this.fallbackAllowed=fallbackAllowed;
  this.connectionHeader=connectionHeader;
  this.exceptionHandler=exceptionHandler;
  this.successfulConnectHandler=successfulConnectHandler;
  saslProps=SaslUtil.initSaslProperties(rpcProtection);
switch (method) {
case DIGEST:
    if (LOG.isDebugEnabled())     LOG.debug("Creating SASL " + AuthMethod.DIGEST.getMechanismName() + " client to authenticate to service at "+ token.getService());
  saslClient=createDigestSaslClient(new String[]{AuthMethod.DIGEST.getMechanismName()},SaslUtil.SASL_DEFAULT_REALM,new HBaseSaslRpcClient.SaslClientCallbackHandler(token));
break;
case KERBEROS:
if (LOG.isDebugEnabled()) {
LOG.debug("Creating SASL " + AuthMethod.KERBEROS.getMechanismName() + " client. Server's Kerberos principal name is "+ serverPrincipal);
}
if (serverPrincipal == null || serverPrincipal.isEmpty()) {
throw new IOException("Failed to specify server's Kerberos principal name");
}
String[] names=SaslUtil.splitKerberosName(serverPrincipal);
if (names.length != 3) {
throw new IOException("Kerberos principal does not have the expected format: " + serverPrincipal);
}
saslClient=createKerberosSaslClient(new String[]{AuthMethod.KERBEROS.getMechanismName()},names[0],names[1]);
break;
default :
throw new IOException("Unknown authentication method " + method);
}
if (saslClient == null) {
throw new IOException("Unable to find SASL client implementation");
}
}
