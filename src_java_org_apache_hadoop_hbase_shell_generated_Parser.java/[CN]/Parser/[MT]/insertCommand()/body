{
  InsertCommand in=new InsertCommand(this.out);
  List<String> columnfamilies=null;
  List<String> values=null;
  String table=null;
  Token t=null;
  jj_consume_token(INSERT);
  jj_consume_token(INTO);
  table=identifier();
  in.setTable(table);
  columnfamilies=getColumns();
  in.setColumnfamilies(columnfamilies);
  jj_consume_token(VALUES);
  values=getLiteralValues();
  in.setValues(values);
  jj_consume_token(WHERE);
  jj_consume_token(ROW);
  jj_consume_token(EQUALS);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING_LITERAL:
    t=jj_consume_token(STRING_LITERAL);
  break;
case QUOTED_IDENTIFIER:
t=jj_consume_token(QUOTED_IDENTIFIER);
break;
default :
jj_la1[17]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
in.setRow(t.image.substring(1,t.image.length() - 1));
{
if (true) return in;
}
throw new Error("Missing return statement in function");
}
