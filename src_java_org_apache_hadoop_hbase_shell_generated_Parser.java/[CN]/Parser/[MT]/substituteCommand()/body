{
  Token key=null;
  Token chainKey=null;
  Token operation=null;
  String tableName=null;
  String condition="";
  List<String> notInList=new ArrayList<String>();
  SubstituteCommand substitute=new SubstituteCommand(this.out);
  Token extendedKey=null;
  key=jj_consume_token(ID);
  jj_consume_token(EQUALS);
  substitute.setKey(key.image.toString());
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ID:
    chainKey=jj_consume_token(ID);
  jj_consume_token(DOT);
substitute.setChainKey(chainKey.image.toString());
operation=jj_consume_token(ID);
substitute.setOperation(operation.image.toString());
jj_consume_token(LPAREN);
String operationType=operation.image.toLowerCase();
if (operationType.equals("projection")) {
List<String> columnList=columnList();
for (int i=0; i < columnList.size(); i++) {
condition+=appendIndicator(columnList.get(i)) + " ";
}
}
 else {
condition=booleanTerm();
}
substitute.setCondition(condition);
jj_consume_token(RPAREN);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case AND:
jj_consume_token(AND);
extendedKey=jj_consume_token(ID);
String eKey=extendedKey.image.toString();
String cKey=chainKey.image.toString();
substitute.setCondition(condition);
if (secondR.equals(eKey)) {
substitute.resetVariableRelation(eKey,cKey);
}
 else {
substitute.resetVariableRelation(cKey,eKey);
}
break;
default :
jj_la1[27]=jj_gen;
;
}
break;
case TABLE:
jj_consume_token(TABLE);
jj_consume_token(LPAREN);
tableName=identifier();
substitute.setInput(tableName);
jj_consume_token(RPAREN);
break;
case GROUP:
operation=jj_consume_token(GROUP);
chainKey=jj_consume_token(ID);
jj_consume_token(BY);
jj_consume_token(LPAREN);
List<String> columnList=columnList();
for (int i=0; i < columnList.size(); i++) {
condition+=appendIndicator(columnList.get(i));
}
jj_consume_token(RPAREN);
substitute.setChainKey(chainKey.image.toString());
substitute.setOperation(operation.image.toString());
substitute.setCondition(condition);
break;
default :
jj_la1[28]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
{
if (true) return substitute;
}
throw new Error("Missing return statement in function");
}
