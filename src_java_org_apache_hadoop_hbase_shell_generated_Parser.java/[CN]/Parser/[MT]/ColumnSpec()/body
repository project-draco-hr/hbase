{
  Map<String,Object> columnSpec=new HashMap<String,Object>();
  int n=-1;
  Token t=null;
  label_4:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MAX_VERSIONS:
case MAX_LENGTH:
case COMPRESSION:
case IN_MEMORY:
case BLOOMFILTER:
case VECTOR_SIZE:
case NUM_HASH:
case NUM_ENTRIES:
      ;
    break;
default :
  jj_la1[12]=jj_gen;
break label_4;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case MAX_VERSIONS:
jj_consume_token(MAX_VERSIONS);
jj_consume_token(EQUALS);
n=Number();
if (n < 0) {
n=Integer.MAX_VALUE;
}
columnSpec.put("MAX_VERSIONS",n);
break;
case MAX_LENGTH:
jj_consume_token(MAX_LENGTH);
jj_consume_token(EQUALS);
n=Number();
columnSpec.put("MAX_LENGTH",n);
break;
case COMPRESSION:
jj_consume_token(COMPRESSION);
jj_consume_token(EQUALS);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NONE:
t=jj_consume_token(NONE);
break;
case BLOCK:
t=jj_consume_token(BLOCK);
break;
case RECORD:
t=jj_consume_token(RECORD);
break;
default :
jj_la1[13]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
columnSpec.put("COMPRESSION",t.image.toString());
break;
case IN_MEMORY:
jj_consume_token(IN_MEMORY);
columnSpec.put("IN_MEMORY",true);
break;
case BLOOMFILTER:
jj_consume_token(BLOOMFILTER);
jj_consume_token(EQUALS);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case BLOOMFILTER:
t=jj_consume_token(BLOOMFILTER);
break;
case COUNTING_BLOOMFILTER:
t=jj_consume_token(COUNTING_BLOOMFILTER);
break;
case RETOUCHED_BLOOMFILTER:
t=jj_consume_token(RETOUCHED_BLOOMFILTER);
break;
default :
jj_la1[14]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
columnSpec.put("BLOOMFILTER",t.image.toString());
break;
case VECTOR_SIZE:
jj_consume_token(VECTOR_SIZE);
jj_consume_token(EQUALS);
n=Number();
columnSpec.put("VECTOR_SIZE",n);
break;
case NUM_HASH:
jj_consume_token(NUM_HASH);
jj_consume_token(EQUALS);
n=Number();
columnSpec.put("NUM_HASH",n);
break;
case NUM_ENTRIES:
jj_consume_token(NUM_ENTRIES);
jj_consume_token(EQUALS);
n=Number();
columnSpec.put("NUM_ENTRIES",n);
break;
default :
jj_la1[15]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
{
if (true) return columnSpec;
}
throw new Error("Missing return statement in function");
}
