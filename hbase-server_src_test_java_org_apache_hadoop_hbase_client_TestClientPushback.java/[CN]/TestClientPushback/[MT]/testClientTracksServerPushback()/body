{
  Configuration conf=UTIL.getConfiguration();
  ClusterConnection conn=(ClusterConnection)ConnectionFactory.createConnection(conf);
  Table table=conn.getTable(tableName);
  HRegionServer rs=UTIL.getHBaseCluster().getRegionServer(0);
  Region region=rs.getOnlineRegions(tableName).get(0);
  LOG.debug("Writing some data to " + tableName);
  Put p=new Put(Bytes.toBytes("row"));
  p.addColumn(family,qualifier,Bytes.toBytes("value1"));
  table.put(p);
  int load=(int)((((HRegion)region).addAndGetGlobalMemstoreSize(0) * 100) / flushSizeBytes);
  LOG.debug("Done writing some data to " + tableName);
  ClientBackoffPolicy backoffPolicy=conn.getBackoffPolicy();
  assertTrue("Backoff policy is not correctly configured",backoffPolicy instanceof ExponentialClientBackoffPolicy);
  ServerStatisticTracker stats=conn.getStatisticsTracker();
  assertNotNull("No stats configured for the client!",stats);
  ServerName server=rs.getServerName();
  byte[] regionName=region.getRegionInfo().getRegionName();
  ServerStatistics serverStats=stats.getServerStatsForTesting(server);
  ServerStatistics.RegionStatistics regionStats=serverStats.getStatsForRegion(regionName);
  assertEquals("We did not find some load on the memstore",load,regionStats.getMemstoreLoadPercent());
  long backoffTime=backoffPolicy.getBackoffTime(server,regionName,serverStats);
  assertNotEquals("Reported load does not produce a backoff",backoffTime,0);
  LOG.debug("Backoff calculated for " + region.getRegionInfo().getRegionNameAsString() + " @ "+ server+ " is "+ backoffTime);
  List<Row> ops=new ArrayList<>(1);
  ops.add(p);
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicLong endTime=new AtomicLong();
  long startTime=EnvironmentEdgeManager.currentTime();
  ((HTable)table).mutator.ap.submit(tableName,ops,true,new Batch.Callback<Result>(){
    @Override public void update(    byte[] region,    byte[] row,    Result result){
      endTime.set(EnvironmentEdgeManager.currentTime());
      latch.countDown();
    }
  }
,true);
  String name=server.getServerName() + "," + Bytes.toStringBinary(regionName);
  MetricsConnection.RegionStats rsStats=conn.getConnectionMetrics().serverStats.get(server).get(regionName);
  assertEquals(name,rsStats.name);
  assertEquals(rsStats.heapOccupancyHist.getSnapshot().getMean(),(double)regionStats.getHeapOccupancyPercent(),0.1);
  assertEquals(rsStats.memstoreLoadHist.getSnapshot().getMean(),(double)regionStats.getMemstoreLoadPercent(),0.1);
  MetricsConnection.RunnerStats runnerStats=conn.getConnectionMetrics().runnerStats;
  assertEquals(runnerStats.delayRunners.getCount(),1);
  assertEquals(runnerStats.normalRunners.getCount(),1);
  assertEquals("",runnerStats.delayIntevalHist.getSnapshot().getMean(),(double)backoffTime,0.1);
  latch.await(backoffTime * 2,TimeUnit.MILLISECONDS);
  assertNotEquals("AsyncProcess did not submit the work time",endTime.get(),0);
  assertTrue("AsyncProcess did not delay long enough",endTime.get() - startTime >= backoffTime);
}
