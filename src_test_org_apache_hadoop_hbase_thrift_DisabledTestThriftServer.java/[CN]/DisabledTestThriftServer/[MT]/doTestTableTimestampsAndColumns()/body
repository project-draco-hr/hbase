{
  ThriftServer.HBaseHandler handler=new ThriftServer.HBaseHandler();
  handler.createTable(tableAname,getColumnDescriptors());
  long time1=System.currentTimeMillis();
  handler.mutateRowTs(tableAname,rowAname,getMutations(),time1);
  Thread.sleep(1000);
  long time2=System.currentTimeMillis();
  handler.mutateRowsTs(tableAname,getBatchMutations(),time2);
  handler.mutateRowTs(tableAname,rowBname,getMutations(),time2);
  assertEquals(handler.getVerTs(tableAname,rowAname,columnBname,time2,MAXVERSIONS).size(),2);
  assertEquals(handler.getVerTs(tableAname,rowAname,columnBname,time1,MAXVERSIONS).size(),1);
  TRowResult rowResult1=handler.getRowTs(tableAname,rowAname,time1).get(0);
  TRowResult rowResult2=handler.getRowTs(tableAname,rowAname,time2).get(0);
  assertTrue(Bytes.equals(rowResult1.columns.get(columnAname).value,valueAname));
  assertTrue(Bytes.equals(rowResult1.columns.get(columnBname).value,valueBname));
  assertTrue(Bytes.equals(rowResult2.columns.get(columnBname).value,valueCname));
  assertTrue(rowResult2.columns.containsKey(columnAname));
  List<byte[]> columns=new ArrayList<byte[]>();
  columns.add(columnBname);
  rowResult1=handler.getRowWithColumns(tableAname,rowAname,columns).get(0);
  assertTrue(Bytes.equals(rowResult1.columns.get(columnBname).value,valueCname));
  assertFalse(rowResult1.columns.containsKey(columnAname));
  rowResult1=handler.getRowWithColumnsTs(tableAname,rowAname,columns,time1).get(0);
  assertTrue(Bytes.equals(rowResult1.columns.get(columnBname).value,valueBname));
  assertFalse(rowResult1.columns.containsKey(columnAname));
  handler.deleteAllTs(tableAname,rowAname,columnBname,time1);
  handler.deleteAllRowTs(tableAname,rowBname,time2);
  int size=handler.getVerTs(tableAname,rowAname,columnBname,time1,MAXVERSIONS).size();
  assertFalse(size > 0);
  assertTrue(Bytes.equals(handler.get(tableAname,rowAname,columnBname).get(0).value,valueCname));
  assertFalse(handler.getRow(tableAname,rowBname).size() > 0);
  handler.disableTable(tableAname);
  handler.deleteTable(tableAname);
}
