{
  short rLen1=c1.getRowLength();
  short rLen2=c2.getRowLength();
  int commonPrefix=KeyValue.ROW_LENGTH_SIZE;
  if (rLen1 != rLen2) {
    return ByteBufferUtils.findCommonPrefix(Bytes.toBytes(rLen1),0,KeyValue.ROW_LENGTH_SIZE,Bytes.toBytes(rLen2),0,KeyValue.ROW_LENGTH_SIZE);
  }
  int rkCommonPrefix=ByteBufferUtils.findCommonPrefix(c1.getRowArray(),c1.getRowOffset(),rLen1,c2.getRowArray(),c2.getRowOffset(),rLen2);
  commonPrefix+=rkCommonPrefix;
  if (rkCommonPrefix != rLen1) {
    return commonPrefix;
  }
  byte fLen1=c1.getFamilyLength();
  if (bypassFamilyCheck) {
    commonPrefix+=KeyValue.FAMILY_LENGTH_SIZE + fLen1;
  }
 else {
    byte fLen2=c2.getFamilyLength();
    if (fLen1 != fLen2) {
      return commonPrefix;
    }
    commonPrefix+=KeyValue.FAMILY_LENGTH_SIZE;
    int fCommonPrefix=ByteBufferUtils.findCommonPrefix(c1.getFamilyArray(),c1.getFamilyOffset(),fLen1,c2.getFamilyArray(),c2.getFamilyOffset(),fLen2);
    commonPrefix+=fCommonPrefix;
    if (fCommonPrefix != fLen1) {
      return commonPrefix;
    }
  }
  int qLen1=c1.getQualifierLength();
  int qLen2=c2.getQualifierLength();
  int qCommon=ByteBufferUtils.findCommonPrefix(c1.getQualifierArray(),c1.getQualifierOffset(),qLen1,c2.getQualifierArray(),c2.getQualifierOffset(),qLen2);
  commonPrefix+=qCommon;
  if (!withTsType || Math.max(qLen1,qLen2) != qCommon) {
    return commonPrefix;
  }
  int tsCommonPrefix=ByteBufferUtils.findCommonPrefix(Bytes.toBytes(c1.getTimestamp()),0,KeyValue.TIMESTAMP_SIZE,Bytes.toBytes(c2.getTimestamp()),0,KeyValue.TIMESTAMP_SIZE);
  commonPrefix+=tsCommonPrefix;
  if (tsCommonPrefix != KeyValue.TIMESTAMP_SIZE) {
    return commonPrefix;
  }
  if (c1.getTypeByte() == c2.getTypeByte()) {
    commonPrefix+=KeyValue.TYPE_SIZE;
  }
  return commonPrefix;
}
