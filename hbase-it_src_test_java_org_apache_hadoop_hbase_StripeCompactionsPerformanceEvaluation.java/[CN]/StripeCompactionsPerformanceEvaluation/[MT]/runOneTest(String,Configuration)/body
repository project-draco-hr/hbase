{
  int numServers=util.getHBaseClusterInterface().getClusterStatus().getServersSize();
  long startKey=(long)preloadKeys * numServers;
  long endKey=startKey + (long)writeKeys * numServers;
  status(String.format("%s test starting on %d servers; preloading 0 to %d and writing to %d",description,numServers,startKey,endKey));
  if (preloadKeys > 0) {
    MultiThreadedWriter preloader=new MultiThreadedWriter(dataGen,conf,TABLE_NAME);
    long time=System.currentTimeMillis();
    preloader.start(0,startKey,writeThreads);
    preloader.waitForFinish();
    if (preloader.getNumWriteFailures() > 0) {
      throw new IOException("Preload failed");
    }
    int waitTime=(int)Math.min(preloadKeys / 100,30000);
    status(description + " preload took " + (System.currentTimeMillis() - time) / 1000 + "sec; sleeping for " + waitTime / 1000 + "sec for store to stabilize");
    Thread.sleep(waitTime);
  }
  MultiThreadedWriter writer=new MultiThreadedWriter(dataGen,conf,TABLE_NAME);
  MultiThreadedReader reader=new MultiThreadedReader(dataGen,conf,TABLE_NAME,100);
  reader.linkToWriter(writer);
  long testStartTime=System.currentTimeMillis();
  writer.start(startKey,endKey,writeThreads);
  reader.start(startKey,endKey,readThreads);
  writer.waitForFinish();
  reader.waitForFinish();
  status("Readers and writers stopped for test " + description);
  boolean success=writer.getNumWriteFailures() == 0;
  if (!success) {
    LOG.error("Write failed");
  }
 else {
    success=reader.getNumReadErrors() == 0 && reader.getNumReadFailures() == 0;
    if (!success) {
      LOG.error("Read failed");
    }
  }
  status(description + " test took " + (System.currentTimeMillis() - testStartTime) / 1000 + "sec");
  Assert.assertTrue(success);
}
