{
  FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().startsWith(SNAPSHOT_MANIFEST_PREFIX);
    }
  }
);
  if (manifestFiles == null || manifestFiles.length == 0)   return null;
  final ExecutorCompletionService<SnapshotRegionManifest> completionService=new ExecutorCompletionService<SnapshotRegionManifest>(executor);
  for (  final FileStatus st : manifestFiles) {
    completionService.submit(new Callable<SnapshotRegionManifest>(){
      @Override public SnapshotRegionManifest call() throws IOException {
        FSDataInputStream stream=fs.open(st.getPath());
        try {
          return SnapshotRegionManifest.parseFrom(stream);
        }
  finally {
          stream.close();
        }
      }
    }
);
  }
  ArrayList<SnapshotRegionManifest> regionsManifest=new ArrayList<SnapshotRegionManifest>(manifestFiles.length);
  try {
    for (int i=0; i < manifestFiles.length; ++i) {
      regionsManifest.add(completionService.take().get());
    }
  }
 catch (  InterruptedException e) {
    throw new InterruptedIOException(e.getMessage());
  }
catch (  ExecutionException e) {
    Throwable t=e.getCause();
    if (t instanceof InvalidProtocolBufferException) {
      throw (InvalidProtocolBufferException)t;
    }
 else {
      IOException ex=new IOException("ExecutionException");
      ex.initCause(e.getCause());
      throw ex;
    }
  }
  return regionsManifest;
}
