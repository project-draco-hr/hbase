{
  Preconditions.checkArgument(filterArguments.size() == 2,"Expected 2 but got: %s",filterArguments.size());
  CompareOp compareOp=ParseFilter.createCompareOp(filterArguments.get(0));
  ByteArrayComparable comparator=ParseFilter.createComparator(ParseFilter.removeQuotesFromByteArray(filterArguments.get(1)));
  if (comparator instanceof RegexStringComparator || comparator instanceof SubstringComparator) {
    if (compareOp != CompareOp.EQUAL && compareOp != CompareOp.NOT_EQUAL) {
      throw new IllegalArgumentException("A regexstring comparator and substring comparator" + " can only be used with EQUAL and NOT_EQUAL");
    }
  }
  ArrayList arguments=new ArrayList();
  arguments.add(compareOp);
  arguments.add(comparator);
  return arguments;
}
