{
  int maxIters=3;
  String replicas="--replicas=" + replicaCount;
  String splitPolicy="--splitPolicy=" + DisabledRegionSplitPolicy.class.getName();
  String writeOpts=format("%s --nomapred --table=%s --presplit=16 sequentialWrite 4",splitPolicy,tableName);
  String readOpts=format("--nomapred --table=%s --latency --sampleRate=0.1 randomRead 4",tableName);
  String replicaReadOpts=format("%s %s",replicas,readOpts);
  ArrayList<TimingResult> resultsWithoutReplicas=new ArrayList<TimingResult>(maxIters);
  ArrayList<TimingResult> resultsWithReplicas=new ArrayList<TimingResult>(maxIters);
  LOG.debug("Populating table.");
  new PerfEvalCallable(util.getHBaseAdmin(),writeOpts).call();
  assertEquals("Table must be created with DisabledRegionSplitPolicy. Broken test.",DisabledRegionSplitPolicy.class.getName(),util.getHBaseAdmin().getTableDescriptor(tableName).getRegionSplitPolicyClassName());
  startMonkey();
  for (int i=0; i < maxIters; i++) {
    LOG.debug("Launching non-replica job " + (i + 1) + "/"+ maxIters);
    resultsWithoutReplicas.add(new PerfEvalCallable(util.getHBaseAdmin(),readOpts).call());
    Thread.sleep(5000l);
  }
  cleanUpMonkey("Altering table.");
  LOG.debug("Altering " + tableName + " replica count to "+ replicaCount);
  IntegrationTestingUtility.setReplicas(util.getHBaseAdmin(),tableName,replicaCount);
  setUpMonkey();
  startMonkey();
  for (int i=0; i < maxIters; i++) {
    LOG.debug("Launching replica job " + (i + 1) + "/"+ maxIters);
    resultsWithReplicas.add(new PerfEvalCallable(util.getHBaseAdmin(),replicaReadOpts).call());
    Thread.sleep(5000l);
  }
  double withoutReplicasStdevMean=calcMean("withoutReplicas",Stat.STDEV,resultsWithoutReplicas);
  double withoutReplicas9999Mean=calcMean("withoutReplicas",Stat.FOUR_9S,resultsWithoutReplicas);
  double withReplicasStdevMean=calcMean("withReplicas",Stat.STDEV,resultsWithReplicas);
  double withReplicas9999Mean=calcMean("withReplicas",Stat.FOUR_9S,resultsWithReplicas);
  LOG.info(Objects.toStringHelper(this).add("withoutReplicas",resultsWithoutReplicas).add("withReplicas",resultsWithReplicas).add("withoutReplicasStdevMean",withoutReplicasStdevMean).add("withoutReplicas99.99Mean",withoutReplicas9999Mean).add("withReplicasStdevMean",withReplicasStdevMean).add("withReplicas99.99Mean",withReplicas9999Mean).toString());
  assertTrue("Running with region replicas under chaos should have less request variance than without. " + "withReplicas.stdev.mean: " + withReplicasStdevMean + "ms "+ "withoutReplicas.stdev.mean: "+ withoutReplicasStdevMean+ "ms.",withReplicasStdevMean <= withoutReplicasStdevMean);
  assertTrue("Running with region replicas under chaos should improve 99.99pct latency. " + "withReplicas.99.99.mean: " + withReplicas9999Mean + "ms "+ "withoutReplicas.99.99.mean: "+ withoutReplicas9999Mean+ "ms.",withReplicas9999Mean <= withoutReplicas9999Mean);
}
