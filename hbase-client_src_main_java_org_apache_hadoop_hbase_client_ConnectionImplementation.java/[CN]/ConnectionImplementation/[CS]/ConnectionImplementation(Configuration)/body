{
  this.conf=conf;
  this.tableConfig=new TableConfiguration(conf);
  this.closed=false;
  this.pause=conf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  this.useMetaReplicas=conf.getBoolean(HConstants.USE_META_REPLICAS,HConstants.DEFAULT_USE_META_REPLICAS);
  this.numTries=tableConfig.getRetriesNumber();
  this.rpcTimeout=conf.getInt(HConstants.HBASE_RPC_TIMEOUT_KEY,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  if (conf.getBoolean(CLIENT_NONCES_ENABLED_KEY,true)) {
synchronized (nonceGeneratorCreateLock) {
      if (nonceGenerator == null) {
        nonceGenerator=new PerClientRandomNonceGenerator();
      }
    }
  }
 else {
    nonceGenerator=new ConnectionManager.NoNonceGenerator();
  }
  stats=ServerStatisticTracker.create(conf);
  this.asyncProcess=createAsyncProcess(this.conf);
  this.interceptor=(new RetryingCallerInterceptorFactory(conf)).build();
  this.rpcCallerFactory=RpcRetryingCallerFactory.instantiate(conf,interceptor,this.stats);
  this.backoffPolicy=ClientBackoffPolicyFactory.create(conf);
}
