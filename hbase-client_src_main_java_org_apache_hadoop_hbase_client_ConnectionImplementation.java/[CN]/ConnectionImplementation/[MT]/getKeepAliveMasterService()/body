{
synchronized (masterAndZKLock) {
    if (!isKeepAliveMasterConnectedAndRunning(this.masterServiceState)) {
      MasterServiceStubMaker stubMaker=new MasterServiceStubMaker();
      try {
        this.masterServiceState.stub=stubMaker.makeStub();
      }
 catch (      MasterNotRunningException ex) {
        throw ex;
      }
catch (      IOException e) {
        throw new MasterNotRunningException(e);
      }
    }
    resetMasterServiceState(this.masterServiceState);
  }
  final MasterProtos.MasterService.BlockingInterface stub=this.masterServiceState.stub;
  return new MasterKeepAliveConnection(){
    MasterServiceState mss=masterServiceState;
    @Override public MasterProtos.AbortProcedureResponse abortProcedure(    RpcController controller,    MasterProtos.AbortProcedureRequest request) throws ServiceException {
      return stub.abortProcedure(controller,request);
    }
    @Override public MasterProtos.ListProceduresResponse listProcedures(    RpcController controller,    MasterProtos.ListProceduresRequest request) throws ServiceException {
      return stub.listProcedures(controller,request);
    }
    @Override public MasterProtos.AddColumnResponse addColumn(    RpcController controller,    MasterProtos.AddColumnRequest request) throws ServiceException {
      return stub.addColumn(controller,request);
    }
    @Override public MasterProtos.DeleteColumnResponse deleteColumn(    RpcController controller,    MasterProtos.DeleteColumnRequest request) throws ServiceException {
      return stub.deleteColumn(controller,request);
    }
    @Override public MasterProtos.ModifyColumnResponse modifyColumn(    RpcController controller,    MasterProtos.ModifyColumnRequest request) throws ServiceException {
      return stub.modifyColumn(controller,request);
    }
    @Override public MasterProtos.MoveRegionResponse moveRegion(    RpcController controller,    MasterProtos.MoveRegionRequest request) throws ServiceException {
      return stub.moveRegion(controller,request);
    }
    @Override public MasterProtos.DispatchMergingRegionsResponse dispatchMergingRegions(    RpcController controller,    MasterProtos.DispatchMergingRegionsRequest request) throws ServiceException {
      return stub.dispatchMergingRegions(controller,request);
    }
    @Override public MasterProtos.AssignRegionResponse assignRegion(    RpcController controller,    MasterProtos.AssignRegionRequest request) throws ServiceException {
      return stub.assignRegion(controller,request);
    }
    @Override public MasterProtos.UnassignRegionResponse unassignRegion(    RpcController controller,    MasterProtos.UnassignRegionRequest request) throws ServiceException {
      return stub.unassignRegion(controller,request);
    }
    @Override public MasterProtos.OfflineRegionResponse offlineRegion(    RpcController controller,    MasterProtos.OfflineRegionRequest request) throws ServiceException {
      return stub.offlineRegion(controller,request);
    }
    @Override public MasterProtos.DeleteTableResponse deleteTable(    RpcController controller,    MasterProtos.DeleteTableRequest request) throws ServiceException {
      return stub.deleteTable(controller,request);
    }
    @Override public MasterProtos.TruncateTableResponse truncateTable(    RpcController controller,    MasterProtos.TruncateTableRequest request) throws ServiceException {
      return stub.truncateTable(controller,request);
    }
    @Override public MasterProtos.EnableTableResponse enableTable(    RpcController controller,    MasterProtos.EnableTableRequest request) throws ServiceException {
      return stub.enableTable(controller,request);
    }
    @Override public MasterProtos.DisableTableResponse disableTable(    RpcController controller,    MasterProtos.DisableTableRequest request) throws ServiceException {
      return stub.disableTable(controller,request);
    }
    @Override public MasterProtos.ModifyTableResponse modifyTable(    RpcController controller,    MasterProtos.ModifyTableRequest request) throws ServiceException {
      return stub.modifyTable(controller,request);
    }
    @Override public MasterProtos.CreateTableResponse createTable(    RpcController controller,    MasterProtos.CreateTableRequest request) throws ServiceException {
      return stub.createTable(controller,request);
    }
    @Override public MasterProtos.ShutdownResponse shutdown(    RpcController controller,    MasterProtos.ShutdownRequest request) throws ServiceException {
      return stub.shutdown(controller,request);
    }
    @Override public MasterProtos.StopMasterResponse stopMaster(    RpcController controller,    MasterProtos.StopMasterRequest request) throws ServiceException {
      return stub.stopMaster(controller,request);
    }
    @Override public MasterProtos.BalanceResponse balance(    RpcController controller,    MasterProtos.BalanceRequest request) throws ServiceException {
      return stub.balance(controller,request);
    }
    @Override public MasterProtos.SetBalancerRunningResponse setBalancerRunning(    RpcController controller,    MasterProtos.SetBalancerRunningRequest request) throws ServiceException {
      return stub.setBalancerRunning(controller,request);
    }
    @Override public MasterProtos.RunCatalogScanResponse runCatalogScan(    RpcController controller,    MasterProtos.RunCatalogScanRequest request) throws ServiceException {
      return stub.runCatalogScan(controller,request);
    }
    @Override public MasterProtos.EnableCatalogJanitorResponse enableCatalogJanitor(    RpcController controller,    MasterProtos.EnableCatalogJanitorRequest request) throws ServiceException {
      return stub.enableCatalogJanitor(controller,request);
    }
    @Override public MasterProtos.IsCatalogJanitorEnabledResponse isCatalogJanitorEnabled(    RpcController controller,    MasterProtos.IsCatalogJanitorEnabledRequest request) throws ServiceException {
      return stub.isCatalogJanitorEnabled(controller,request);
    }
    @Override public ClientProtos.CoprocessorServiceResponse execMasterService(    RpcController controller,    ClientProtos.CoprocessorServiceRequest request) throws ServiceException {
      return stub.execMasterService(controller,request);
    }
    @Override public MasterProtos.SnapshotResponse snapshot(    RpcController controller,    MasterProtos.SnapshotRequest request) throws ServiceException {
      return stub.snapshot(controller,request);
    }
    @Override public MasterProtos.GetCompletedSnapshotsResponse getCompletedSnapshots(    RpcController controller,    MasterProtos.GetCompletedSnapshotsRequest request) throws ServiceException {
      return stub.getCompletedSnapshots(controller,request);
    }
    @Override public MasterProtos.DeleteSnapshotResponse deleteSnapshot(    RpcController controller,    MasterProtos.DeleteSnapshotRequest request) throws ServiceException {
      return stub.deleteSnapshot(controller,request);
    }
    @Override public MasterProtos.IsSnapshotDoneResponse isSnapshotDone(    RpcController controller,    MasterProtos.IsSnapshotDoneRequest request) throws ServiceException {
      return stub.isSnapshotDone(controller,request);
    }
    @Override public MasterProtos.RestoreSnapshotResponse restoreSnapshot(    RpcController controller,    MasterProtos.RestoreSnapshotRequest request) throws ServiceException {
      return stub.restoreSnapshot(controller,request);
    }
    @Override public MasterProtos.IsRestoreSnapshotDoneResponse isRestoreSnapshotDone(    RpcController controller,    MasterProtos.IsRestoreSnapshotDoneRequest request) throws ServiceException {
      return stub.isRestoreSnapshotDone(controller,request);
    }
    @Override public MasterProtos.ExecProcedureResponse execProcedure(    RpcController controller,    MasterProtos.ExecProcedureRequest request) throws ServiceException {
      return stub.execProcedure(controller,request);
    }
    @Override public MasterProtos.ExecProcedureResponse execProcedureWithRet(    RpcController controller,    MasterProtos.ExecProcedureRequest request) throws ServiceException {
      return stub.execProcedureWithRet(controller,request);
    }
    @Override public MasterProtos.IsProcedureDoneResponse isProcedureDone(    RpcController controller,    MasterProtos.IsProcedureDoneRequest request) throws ServiceException {
      return stub.isProcedureDone(controller,request);
    }
    @Override public MasterProtos.GetProcedureResultResponse getProcedureResult(    RpcController controller,    MasterProtos.GetProcedureResultRequest request) throws ServiceException {
      return stub.getProcedureResult(controller,request);
    }
    @Override public MasterProtos.IsMasterRunningResponse isMasterRunning(    RpcController controller,    MasterProtos.IsMasterRunningRequest request) throws ServiceException {
      return stub.isMasterRunning(controller,request);
    }
    @Override public MasterProtos.ModifyNamespaceResponse modifyNamespace(    RpcController controller,    MasterProtos.ModifyNamespaceRequest request) throws ServiceException {
      return stub.modifyNamespace(controller,request);
    }
    @Override public MasterProtos.CreateNamespaceResponse createNamespace(    RpcController controller,    MasterProtos.CreateNamespaceRequest request) throws ServiceException {
      return stub.createNamespace(controller,request);
    }
    @Override public MasterProtos.DeleteNamespaceResponse deleteNamespace(    RpcController controller,    MasterProtos.DeleteNamespaceRequest request) throws ServiceException {
      return stub.deleteNamespace(controller,request);
    }
    @Override public MasterProtos.GetNamespaceDescriptorResponse getNamespaceDescriptor(    RpcController controller,    MasterProtos.GetNamespaceDescriptorRequest request) throws ServiceException {
      return stub.getNamespaceDescriptor(controller,request);
    }
    @Override public MasterProtos.ListNamespaceDescriptorsResponse listNamespaceDescriptors(    RpcController controller,    MasterProtos.ListNamespaceDescriptorsRequest request) throws ServiceException {
      return stub.listNamespaceDescriptors(controller,request);
    }
    @Override public MasterProtos.ListTableDescriptorsByNamespaceResponse listTableDescriptorsByNamespace(    RpcController controller,    MasterProtos.ListTableDescriptorsByNamespaceRequest request) throws ServiceException {
      return stub.listTableDescriptorsByNamespace(controller,request);
    }
    @Override public MasterProtos.ListTableNamesByNamespaceResponse listTableNamesByNamespace(    RpcController controller,    MasterProtos.ListTableNamesByNamespaceRequest request) throws ServiceException {
      return stub.listTableNamesByNamespace(controller,request);
    }
    @Override public MasterProtos.GetTableStateResponse getTableState(    RpcController controller,    MasterProtos.GetTableStateRequest request) throws ServiceException {
      return stub.getTableState(controller,request);
    }
    @Override public void close(){
      release(this.mss);
    }
    @Override public MasterProtos.GetSchemaAlterStatusResponse getSchemaAlterStatus(    RpcController controller,    MasterProtos.GetSchemaAlterStatusRequest request) throws ServiceException {
      return stub.getSchemaAlterStatus(controller,request);
    }
    @Override public MasterProtos.GetTableDescriptorsResponse getTableDescriptors(    RpcController controller,    MasterProtos.GetTableDescriptorsRequest request) throws ServiceException {
      return stub.getTableDescriptors(controller,request);
    }
    @Override public MasterProtos.GetTableNamesResponse getTableNames(    RpcController controller,    MasterProtos.GetTableNamesRequest request) throws ServiceException {
      return stub.getTableNames(controller,request);
    }
    @Override public MasterProtos.GetClusterStatusResponse getClusterStatus(    RpcController controller,    MasterProtos.GetClusterStatusRequest request) throws ServiceException {
      return stub.getClusterStatus(controller,request);
    }
    @Override public MasterProtos.SetQuotaResponse setQuota(    RpcController controller,    MasterProtos.SetQuotaRequest request) throws ServiceException {
      return stub.setQuota(controller,request);
    }
    @Override public MasterProtos.MajorCompactionTimestampResponse getLastMajorCompactionTimestamp(    RpcController controller,    MasterProtos.MajorCompactionTimestampRequest request) throws ServiceException {
      return stub.getLastMajorCompactionTimestamp(controller,request);
    }
    @Override public MasterProtos.MajorCompactionTimestampResponse getLastMajorCompactionTimestampForRegion(    RpcController controller,    MasterProtos.MajorCompactionTimestampForRegionRequest request) throws ServiceException {
      return stub.getLastMajorCompactionTimestampForRegion(controller,request);
    }
    @Override public IsBalancerEnabledResponse isBalancerEnabled(    RpcController controller,    IsBalancerEnabledRequest request) throws ServiceException {
      return stub.isBalancerEnabled(controller,request);
    }
    @Override public SecurityCapabilitiesResponse getSecurityCapabilities(    RpcController controller,    SecurityCapabilitiesRequest request) throws ServiceException {
      return stub.getSecurityCapabilities(controller,request);
    }
  }
;
}
