{
  blockBuffer.mark();
  currKeyLen=blockBuffer.getInt();
  currValueLen=blockBuffer.getInt();
  blockBuffer.reset();
  if (this.reader.shouldIncludeMemstoreTS()) {
    try {
      int memstoreTSOffset=blockBuffer.arrayOffset() + blockBuffer.position() + KEY_VALUE_LEN_SIZE+ currKeyLen+ currValueLen;
      currMemstoreTS=Bytes.readVLong(blockBuffer.array(),memstoreTSOffset);
      currMemstoreTSLen=WritableUtils.getVIntSize(currMemstoreTS);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error reading memstore timestamp",e);
    }
  }
  if (currKeyLen < 0 || currValueLen < 0 || currKeyLen > blockBuffer.limit() || currValueLen > blockBuffer.limit()) {
    throw new IllegalStateException("Invalid currKeyLen " + currKeyLen + " or currValueLen "+ currValueLen+ ". Block offset: "+ block.getOffset()+ ", block length: "+ blockBuffer.limit()+ ", position: "+ blockBuffer.position()+ " (without header).");
  }
}
