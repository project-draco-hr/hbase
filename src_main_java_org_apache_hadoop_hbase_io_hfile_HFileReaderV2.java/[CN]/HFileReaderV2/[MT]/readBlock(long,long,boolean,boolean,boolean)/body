{
  if (dataBlockIndexReader == null) {
    throw new IOException("Block index not loaded");
  }
  if (dataBlockOffset < 0 || dataBlockOffset >= trailer.getLoadOnOpenDataOffset()) {
    throw new IOException("Requested block is out of range: " + dataBlockOffset + ", lastDataBlockOffset: "+ trailer.getLastDataBlockOffset());
  }
  BlockCacheKey cacheKey=HFile.getBlockCacheKey(name,dataBlockOffset);
  IdLock.Entry lockEntry=offsetLock.getLockEntry(dataBlockOffset);
  try {
    blockLoads.incrementAndGet();
    if (cacheConf.isBlockCacheEnabled()) {
      HFileBlock cachedBlock=(HFileBlock)cacheConf.getBlockCache().getBlock(cacheKey,cacheBlock);
      cachedBlock=blockEncoder.afterBlockCache(cachedBlock,isCompaction,shouldIncludeMemstoreTS());
      if (cachedBlock != null) {
        BlockCategory blockCategory=cachedBlock.getBlockType().getCategory();
        cacheHits.incrementAndGet();
        getSchemaMetrics().updateOnCacheHit(blockCategory,isCompaction);
        if (cachedBlock.getBlockType() == BlockType.DATA) {
          HFile.dataBlockReadCnt.incrementAndGet();
        }
        return cachedBlock;
      }
    }
    long startTimeNs=System.nanoTime();
    HFileBlock hfileBlock=fsBlockReader.readBlockData(dataBlockOffset,onDiskBlockSize,-1,pread);
    passSchemaMetricsTo(hfileBlock);
    BlockCategory blockCategory=hfileBlock.getBlockType().getCategory();
    long delta=System.nanoTime() - startTimeNs;
    if (pread) {
      HFile.preadTimeNano.addAndGet(delta);
      HFile.preadOps.incrementAndGet();
    }
 else {
      HFile.readTimeNano.addAndGet(delta);
      HFile.readOps.incrementAndGet();
    }
    getSchemaMetrics().updateOnCacheMiss(blockCategory,isCompaction,delta);
    if (cacheBlock && cacheConf.shouldCacheBlockOnRead(hfileBlock.getBlockType().getCategory())) {
      hfileBlock=blockEncoder.beforeBlockCache(hfileBlock,includesMemstoreTS);
      cacheConf.getBlockCache().cacheBlock(cacheKey,hfileBlock,cacheConf.isInMemory());
    }
    if (hfileBlock.getBlockType() == BlockType.DATA) {
      HFile.dataBlockReadCnt.incrementAndGet();
    }
    return blockEncoder.afterReadFromDiskAndPuttingInCache(hfileBlock,isCompaction,includesMemstoreTS);
  }
  finally {
    offsetLock.releaseLockEntry(lockEntry);
  }
}
