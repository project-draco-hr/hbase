{
  super(path,trailer,fsdis,size,closeIStream,cacheConf);
  trailer.expectVersion(2);
  fsBlockReader=new HFileBlock.FSReaderV2(fsdis,compressAlgo,fileSize);
  comparator=trailer.createComparator();
  dataBlockIndexReader=new HFileBlockIndex.BlockIndexReader(comparator,trailer.getNumDataIndexLevels(),this);
  metaBlockIndexReader=new HFileBlockIndex.BlockIndexReader(Bytes.BYTES_RAWCOMPARATOR,1);
  HFileBlock.BlockIterator blockIter=fsBlockReader.blockRange(trailer.getLoadOnOpenDataOffset(),fileSize - trailer.getTrailerSize());
  dataBlockIndexReader.readMultiLevelIndexRoot(blockIter.nextBlockAsStream(BlockType.ROOT_INDEX),trailer.getDataIndexCount());
  metaBlockIndexReader.readRootIndex(blockIter.nextBlockAsStream(BlockType.ROOT_INDEX),trailer.getMetaIndexCount());
  fileInfo=new FileInfo();
  fileInfo.readFields(blockIter.nextBlockAsStream(BlockType.FILE_INFO));
  lastKey=fileInfo.get(FileInfo.LASTKEY);
  avgKeyLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_KEY_LEN));
  avgValueLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_VALUE_LEN));
  byte[] keyValueFormatVersion=fileInfo.get(HFileWriterV2.KEY_VALUE_VERSION);
  includesMemstoreTS=(keyValueFormatVersion != null && Bytes.toInt(keyValueFormatVersion) == HFileWriterV2.KEY_VALUE_VER_WITH_MEMSTORE);
  HFileBlock b;
  while ((b=blockIter.nextBlock()) != null) {
    loadOnOpenBlocks.add(b);
  }
}
