{
  if (userRegions == null || (this.recoveryMode != RecoveryMode.LOG_REPLAY)) {
    return;
  }
  try {
    this.recoveringRegionLock.lock();
    this.lastRecoveringNodeCreationTime=EnvironmentEdgeManager.currentTimeMillis();
    for (    HRegionInfo region : userRegions) {
      String regionEncodeName=region.getEncodedName();
      long retries=this.zkretries;
      do {
        String nodePath=ZKUtil.joinZNode(watcher.recoveringRegionsZNode,regionEncodeName);
        long lastRecordedFlushedSequenceId=-1;
        try {
          long lastSequenceId=this.master.getServerManager().getLastFlushedSequenceId(regionEncodeName.getBytes());
          byte[] data=ZKUtil.getData(this.watcher,nodePath);
          if (data == null) {
            ZKUtil.createSetData(this.watcher,nodePath,ZKUtil.positionToByteArray(lastSequenceId));
          }
 else {
            lastRecordedFlushedSequenceId=SplitLogManager.parseLastFlushedSequenceIdFrom(data);
            if (lastRecordedFlushedSequenceId < lastSequenceId) {
              ZKUtil.setData(this.watcher,nodePath,ZKUtil.positionToByteArray(lastSequenceId));
            }
          }
          nodePath=ZKUtil.joinZNode(nodePath,serverName.getServerName());
          if (lastSequenceId <= lastRecordedFlushedSequenceId) {
            lastSequenceId=lastRecordedFlushedSequenceId;
          }
          ZKUtil.createSetData(this.watcher,nodePath,ZKUtil.regionSequenceIdsToByteArray(lastSequenceId,null));
          LOG.debug("Mark region " + regionEncodeName + " recovering from failed region server "+ serverName);
          break;
        }
 catch (        KeeperException e) {
          if (retries <= 1) {
            throw e;
          }
          try {
            Thread.sleep(20);
          }
 catch (          InterruptedException e1) {
            throw new InterruptedIOException();
          }
        }
catch (        InterruptedException e) {
          throw new InterruptedIOException();
        }
      }
 while ((--retries) > 0 && (!this.stopper.isStopped()));
    }
  }
  finally {
    this.recoveringRegionLock.unlock();
  }
}
