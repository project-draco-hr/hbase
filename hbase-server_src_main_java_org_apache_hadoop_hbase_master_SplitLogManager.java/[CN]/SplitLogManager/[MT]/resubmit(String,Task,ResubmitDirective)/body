{
  if (task.status != IN_PROGRESS) {
    return false;
  }
  int version;
  if (directive != FORCE) {
    final long time=EnvironmentEdgeManager.currentTimeMillis() - task.last_update;
    final boolean alive=master.getServerManager() != null ? master.getServerManager().isServerOnline(task.cur_worker_name) : true;
    if (alive && time < timeout) {
      LOG.trace("Skipping the resubmit of " + task.toString() + "  because the server "+ task.cur_worker_name+ " is not marked as dead, we waited for "+ time+ " while the timeout is "+ timeout);
      return false;
    }
    if (task.unforcedResubmits.get() >= resubmit_threshold) {
      if (!task.resubmitThresholdReached) {
        task.resubmitThresholdReached=true;
        SplitLogCounters.tot_mgr_resubmit_threshold_reached.incrementAndGet();
        LOG.info("Skipping resubmissions of task " + path + " because threshold "+ resubmit_threshold+ " reached");
      }
      return false;
    }
    version=task.last_version;
  }
 else {
    SplitLogCounters.tot_mgr_resubmit_force.incrementAndGet();
    version=-1;
  }
  LOG.info("resubmitting task " + path);
  task.incarnation++;
  try {
    SplitLogTask slt=new SplitLogTask.Unassigned(this.serverName);
    if (ZKUtil.setData(this.watcher,path,slt.toByteArray(),version) == false) {
      LOG.debug("failed to resubmit task " + path + " version changed");
      task.heartbeatNoDetails(EnvironmentEdgeManager.currentTimeMillis());
      return false;
    }
  }
 catch (  NoNodeException e) {
    LOG.warn("failed to resubmit because znode doesn't exist " + path + " task done (or forced done by removing the znode)");
    try {
      getDataSetWatchSuccess(path,null,Integer.MIN_VALUE);
    }
 catch (    DeserializationException e1) {
      LOG.debug("Failed to re-resubmit task " + path + " because of deserialization issue",e1);
      task.heartbeatNoDetails(EnvironmentEdgeManager.currentTimeMillis());
      return false;
    }
    return false;
  }
catch (  KeeperException.BadVersionException e) {
    LOG.debug("failed to resubmit task " + path + " version changed");
    task.heartbeatNoDetails(EnvironmentEdgeManager.currentTimeMillis());
    return false;
  }
catch (  KeeperException e) {
    SplitLogCounters.tot_mgr_resubmit_failed.incrementAndGet();
    LOG.warn("failed to resubmit " + path,e);
    return false;
  }
  if (directive != FORCE) {
    task.unforcedResubmits.incrementAndGet();
  }
  task.setUnassigned();
  createRescanNode(Long.MAX_VALUE);
  SplitLogCounters.tot_mgr_resubmit.incrementAndGet();
  return true;
}
