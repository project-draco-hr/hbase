{
  if (!this.distributedLogReplay) {
    return;
  }
  int count=0;
  Set<String> recoveredServerNameSet=new HashSet<String>();
  if (serverNames != null) {
    for (    ServerName tmpServerName : serverNames) {
      recoveredServerNameSet.add(tmpServerName.getServerName());
    }
  }
  try {
    this.recoveringRegionLock.lock();
    List<String> tasks=ZKUtil.listChildrenNoWatch(watcher,watcher.splitLogZNode);
    if (tasks != null) {
      for (      String t : tasks) {
        if (!ZKSplitLog.isRescanNode(watcher,t)) {
          count++;
        }
      }
    }
    if (count == 0 && this.master.isInitialized() && !this.master.getServerManager().areDeadServersInProgress()) {
      deleteRecoveringRegionZNodes(null);
      lastRecoveringNodeCreationTime=Long.MAX_VALUE;
    }
 else     if (!recoveredServerNameSet.isEmpty()) {
      List<String> regions=ZKUtil.listChildrenNoWatch(watcher,watcher.recoveringRegionsZNode);
      if (regions != null) {
        for (        String region : regions) {
          String nodePath=ZKUtil.joinZNode(watcher.recoveringRegionsZNode,region);
          List<String> failedServers=ZKUtil.listChildrenNoWatch(watcher,nodePath);
          if (failedServers == null || failedServers.isEmpty()) {
            ZKUtil.deleteNode(watcher,nodePath);
            continue;
          }
          if (recoveredServerNameSet.containsAll(failedServers)) {
            ZKUtil.deleteNodeRecursively(watcher,nodePath);
          }
 else {
            for (            String failedServer : failedServers) {
              if (recoveredServerNameSet.contains(failedServer)) {
                String tmpPath=ZKUtil.joinZNode(nodePath,failedServer);
                ZKUtil.deleteNode(watcher,tmpPath);
              }
            }
          }
        }
      }
    }
  }
 catch (  KeeperException ke) {
    LOG.warn("removeRecoveringRegionsFromZK got zookeeper exception. Will retry",ke);
    if (serverNames != null && !serverNames.isEmpty()) {
      this.failedRecoveringRegionDeletions.addAll(serverNames);
    }
  }
 finally {
    this.recoveringRegionLock.unlock();
  }
}
