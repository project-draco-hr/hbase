{
  int resubmitted=0;
  int unassigned=0;
  int tot=0;
  boolean found_assigned_task=false;
  Set<ServerName> localDeadWorkers;
synchronized (deadWorkersLock) {
    localDeadWorkers=deadWorkers;
    deadWorkers=null;
  }
  for (  Map.Entry<String,Task> e : tasks.entrySet()) {
    String path=e.getKey();
    Task task=e.getValue();
    ServerName cur_worker=task.cur_worker_name;
    tot++;
    if (task.isUnassigned()) {
      unassigned++;
      continue;
    }
    found_assigned_task=true;
    if (localDeadWorkers != null && localDeadWorkers.contains(cur_worker)) {
      SplitLogCounters.tot_mgr_resubmit_dead_server_task.incrementAndGet();
      if (((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().resubmitTask(path,task,FORCE)) {
        resubmitted++;
      }
 else {
        handleDeadWorker(cur_worker);
        LOG.warn("Failed to resubmit task " + path + " owned by dead "+ cur_worker+ ", will retry.");
      }
    }
 else     if (((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().resubmitTask(path,task,CHECK)) {
      resubmitted++;
    }
  }
  if (tot > 0) {
    long now=EnvironmentEdgeManager.currentTimeMillis();
    if (now > lastLog + 5000) {
      lastLog=now;
      LOG.info("total tasks = " + tot + " unassigned = "+ unassigned+ " tasks="+ tasks);
    }
  }
  if (resubmitted > 0) {
    LOG.info("resubmitted " + resubmitted + " out of "+ tot+ " tasks");
  }
  if (tot > 0 && !found_assigned_task && ((EnvironmentEdgeManager.currentTimeMillis() - lastTaskCreateTime) > unassignedTimeout)) {
    for (    Map.Entry<String,Task> e : tasks.entrySet()) {
      String key=e.getKey();
      Task task=e.getValue();
      if (task.isUnassigned() && (task.status != FAILURE)) {
        ((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().checkTaskStillAvailable(key);
      }
    }
    ((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().checkTasks();
    SplitLogCounters.tot_mgr_resubmit_unassigned.incrementAndGet();
    LOG.debug("resubmitting unassigned task(s) after timeout");
  }
  Set<String> failedDeletions=((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().getDetails().getFailedDeletions();
  if (failedDeletions.size() > 0) {
    List<String> tmpPaths=new ArrayList<String>(failedDeletions);
    for (    String tmpPath : tmpPaths) {
      ((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().deleteTask(tmpPath);
    }
    failedDeletions.removeAll(tmpPaths);
  }
  long timeInterval=EnvironmentEdgeManager.currentTimeMillis() - ((BaseCoordinatedStateManager)server.getCoordinatedStateManager()).getSplitLogManagerCoordination().getLastRecoveryTime();
  if (!failedRecoveringRegionDeletions.isEmpty() || (tot == 0 && tasks.size() == 0 && (timeInterval > checkRecoveringTimeThreshold))) {
    if (!failedRecoveringRegionDeletions.isEmpty()) {
      List<Pair<Set<ServerName>,Boolean>> previouslyFailedDeletions=new ArrayList<Pair<Set<ServerName>,Boolean>>(failedRecoveringRegionDeletions);
      failedRecoveringRegionDeletions.removeAll(previouslyFailedDeletions);
      for (      Pair<Set<ServerName>,Boolean> failedDeletion : previouslyFailedDeletions) {
        removeRecoveringRegions(failedDeletion.getFirst(),failedDeletion.getSecond());
      }
    }
 else {
      removeRecoveringRegions(null,null);
    }
  }
}
