{
  int iTimes=this.server.getConfiguration().getInt("hbase.catalog.verification.retries",10);
  long waitTime=this.server.getConfiguration().getLong("hbase.catalog.verification.timeout",1000);
  if (this.shouldSplitHlog && this.distributedLogReplay) {
    LOG.info("Splitting META logs for " + serverName + ". Mark META region in recovery before assignment.");
    Set<HRegionInfo> regions=new HashSet<HRegionInfo>();
    regions.add(HRegionInfo.FIRST_META_REGIONINFO);
    try {
      this.services.getMasterFileSystem().prepareLogReplay(serverName,regions);
    }
 catch (    IOException ioe) {
      this.services.getExecutorService().submit(this);
      this.deadServers.add(serverName);
      throw new IOException("failed to mark META region in recovery on " + serverName + ", will retry",ioe);
    }
  }
  int iFlag=0;
  while (true) {
    try {
      verifyAndAssignMeta();
      break;
    }
 catch (    KeeperException e) {
      this.server.abort("In server shutdown processing, assigning meta",e);
      throw new IOException("Aborting",e);
    }
catch (    Exception e) {
      if (iFlag >= iTimes) {
        this.server.abort("verifyAndAssignMeta failed after" + iTimes + " times retries, aborting",e);
        throw new IOException("Aborting",e);
      }
      try {
        Thread.sleep(waitTime);
      }
 catch (      InterruptedException e1) {
        LOG.warn("Interrupted when is the thread sleep",e1);
        Thread.currentThread().interrupt();
        throw new IOException("Interrupted",e1);
      }
      iFlag++;
    }
  }
}
