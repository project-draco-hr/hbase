{
  boolean gotException=true;
  try {
    AssignmentManager am=this.services.getAssignmentManager();
    this.services.getMasterFileSystem().setLogRecoveryMode();
    boolean distributedLogReplay=(this.services.getMasterFileSystem().getLogRecoveryMode() == RecoveryMode.LOG_REPLAY);
    try {
      if (this.shouldSplitHlog) {
        LOG.info("Splitting hbase:meta logs for " + serverName);
        if (distributedLogReplay) {
          Set<HRegionInfo> regions=new HashSet<HRegionInfo>();
          regions.add(HRegionInfo.FIRST_META_REGIONINFO);
          this.services.getMasterFileSystem().prepareLogReplay(serverName,regions);
        }
 else {
          this.services.getMasterFileSystem().splitMetaLog(serverName);
        }
        am.getRegionStates().logSplit(HRegionInfo.FIRST_META_REGIONINFO);
      }
    }
 catch (    IOException ioe) {
      this.services.getExecutorService().submit(this);
      this.deadServers.add(serverName);
      throw new IOException("failed log splitting for " + serverName + ", will retry",ioe);
    }
    if (am.isCarryingMeta(serverName)) {
      LOG.info("Server " + serverName + " was carrying META. Trying to assign.");
      am.regionOffline(HRegionInfo.FIRST_META_REGIONINFO);
      verifyAndAssignMetaWithRetries();
    }
 else     if (!this.services.getCatalogTracker().isMetaLocationAvailable()) {
      verifyAndAssignMetaWithRetries();
    }
 else {
      LOG.info("META has been assigned to otherwhere, skip assigning.");
    }
    try {
      if (this.shouldSplitHlog && distributedLogReplay) {
        if (!am.waitOnRegionToClearRegionsInTransition(HRegionInfo.FIRST_META_REGIONINFO,regionAssignmentWaitTimeout)) {
          LOG.warn("Region " + HRegionInfo.FIRST_META_REGIONINFO.getEncodedName() + " didn't complete assignment in time");
        }
        this.services.getMasterFileSystem().splitMetaLog(serverName);
      }
    }
 catch (    Exception ex) {
      if (ex instanceof IOException) {
        this.services.getExecutorService().submit(this);
        this.deadServers.add(serverName);
        throw new IOException("failed log splitting for " + serverName + ", will retry",ex);
      }
 else {
        throw new IOException(ex);
      }
    }
    gotException=false;
  }
  finally {
    if (gotException) {
      this.deadServers.finish(serverName);
    }
  }
  super.process();
  this.eventExceptionCount.set(0);
}
