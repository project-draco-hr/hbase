{
  if (numZooKeeperServers <= 0)   return -1;
  setupTestEnv();
  shutdown();
  int tentativePort=-1;
  int currentClientPort;
  for (int i=0; i < numZooKeeperServers; i++) {
    File dir=new File(baseDir,"zookeeper_" + i).getAbsoluteFile();
    createDir(dir);
    int tickTimeToUse;
    if (this.tickTime > 0) {
      tickTimeToUse=this.tickTime;
    }
 else {
      tickTimeToUse=TICK_TIME;
    }
    if (hasValidClientPortInList(i)) {
      currentClientPort=clientPortList.get(i);
    }
 else {
      tentativePort=selectClientPort(tentativePort);
      currentClientPort=tentativePort;
    }
    ZooKeeperServer server=new ZooKeeperServer(dir,dir,tickTimeToUse);
    NIOServerCnxnFactory standaloneServerFactory;
    while (true) {
      try {
        standaloneServerFactory=new NIOServerCnxnFactory();
        standaloneServerFactory.configure(new InetSocketAddress(currentClientPort),configuration.getInt(HConstants.ZOOKEEPER_MAX_CLIENT_CNXNS,1000));
      }
 catch (      BindException e) {
        LOG.debug("Failed binding ZK Server to client port: " + currentClientPort,e);
        if (hasValidClientPortInList(i)) {
          return -1;
        }
        tentativePort=selectClientPort(tentativePort);
        currentClientPort=tentativePort;
        continue;
      }
      break;
    }
    standaloneServerFactory.startup(server);
    if (!waitForServerUp(currentClientPort,CONNECTION_TIMEOUT)) {
      throw new IOException("Waiting for startup of standalone server");
    }
    if (clientPortList.size() <= i) {
      clientPortList.add(currentClientPort);
    }
 else     if (clientPortList.get(i) <= 0) {
      clientPortList.remove(i);
      clientPortList.add(i,currentClientPort);
    }
    standaloneServerFactoryList.add(standaloneServerFactory);
    zooKeeperServers.add(server);
  }
  activeZKServerIndex=0;
  started=true;
  int clientPort=clientPortList.get(activeZKServerIndex);
  LOG.info("Started MiniZooKeeperCluster and ran successful 'stat' " + "on client port=" + clientPort);
  return clientPort;
}
