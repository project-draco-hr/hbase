{
  Map<ImmutableByteArray,Long> flushing=null;
  Map<ImmutableByteArray,Long> tmpMap=new HashMap<>();
synchronized (tieLock) {
    flushing=this.flushingSequenceIds.remove(encodedRegionName);
    if (flushing != null) {
      Map<ImmutableByteArray,Long> unflushed=getOrCreateLowestSequenceIds(encodedRegionName);
      for (      Map.Entry<ImmutableByteArray,Long> e : flushing.entrySet()) {
        tmpMap.put(e.getKey(),unflushed.put(e.getKey(),e.getValue()));
      }
    }
  }
  if (flushing != null) {
    for (    Map.Entry<ImmutableByteArray,Long> e : flushing.entrySet()) {
      Long currentId=tmpMap.get(e.getKey());
      if (currentId != null && currentId.longValue() <= e.getValue().longValue()) {
        String errorStr=Bytes.toString(encodedRegionName) + " family " + e.getKey().toStringUtf8()+ " acquired edits out of order current memstore seq="+ currentId+ ", previous oldest unflushed id="+ e.getValue();
        LOG.error(errorStr);
        Runtime.getRuntime().halt(1);
      }
    }
  }
}
