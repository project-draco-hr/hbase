{
  Configuration conf=new Configuration();
  conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false);
  ServletContext context=Mockito.mock(ServletContext.class);
  Mockito.when(context.getAttribute(HttpServer.CONF_CONTEXT_ATTRIBUTE)).thenReturn(conf);
  Mockito.when(context.getAttribute(HttpServer.ADMINS_ACL)).thenReturn(null);
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  Mockito.when(request.getRemoteUser()).thenReturn(null);
  HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
  Assert.assertTrue(HttpServer.hasAdministratorAccess(context,request,response));
  response=Mockito.mock(HttpServletResponse.class);
  conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,true);
  Assert.assertFalse(HttpServer.hasAdministratorAccess(context,request,response));
  Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_UNAUTHORIZED),Mockito.anyString());
  response=Mockito.mock(HttpServletResponse.class);
  Mockito.when(request.getRemoteUser()).thenReturn("foo");
  Assert.assertTrue(HttpServer.hasAdministratorAccess(context,request,response));
  response=Mockito.mock(HttpServletResponse.class);
  AccessControlList acls=Mockito.mock(AccessControlList.class);
  Mockito.when(acls.isUserAllowed(Mockito.<UserGroupInformation>any())).thenReturn(false);
  Mockito.when(context.getAttribute(HttpServer.ADMINS_ACL)).thenReturn(acls);
  Assert.assertFalse(HttpServer.hasAdministratorAccess(context,request,response));
  Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_UNAUTHORIZED),Mockito.anyString());
  response=Mockito.mock(HttpServletResponse.class);
  Mockito.when(acls.isUserAllowed(Mockito.<UserGroupInformation>any())).thenReturn(true);
  Mockito.when(context.getAttribute(HttpServer.ADMINS_ACL)).thenReturn(acls);
  Assert.assertTrue(HttpServer.hasAdministratorAccess(context,request,response));
}
