{
  final Configuration conf=TESTUTIL.getConfiguration();
  final ServerName newServer=ServerName.valueOf("test.sample",1,101);
  final ServerName deadServer=ServerName.valueOf("test.sample",1,100);
  final MockRegionServer rs0=new MockRegionServer(conf,newServer);
  CoordinatedStateManager cp=CoordinatedStateManagerFactory.getCoordinatedStateManager(TESTUTIL.getConfiguration());
  HMaster master=new HMaster(conf,cp){
    @Override void assignMeta(    MonitoredTask status,    Set<ServerName> previouslyFailedMeatRSs,    int replicaId){
    }
    @Override void initClusterSchemaService() throws IOException, InterruptedException {
    }
    @Override void initializeZKBasedSystemTrackers() throws IOException, InterruptedException, KeeperException, CoordinatedStateException {
      super.initializeZKBasedSystemTrackers();
      getServerManager().recordNewServerWithLock(newServer,ServerLoad.EMPTY_SERVERLOAD);
      List<ServerName> onlineServers=new ArrayList<ServerName>();
      onlineServers.add(deadServer);
      onlineServers.add(newServer);
      regionServerTracker=Mockito.spy(regionServerTracker);
      Mockito.doReturn(onlineServers).when(regionServerTracker).getOnlineServers();
    }
    @Override public ClusterConnection getConnection(){
      try {
        return HConnectionTestingUtility.getMockedConnectionAndDecorate(TESTUTIL.getConfiguration(),rs0,rs0,rs0.getServerName(),HRegionInfo.FIRST_META_REGIONINFO);
      }
 catch (      IOException e) {
        return null;
      }
    }
  }
;
  master.start();
  try {
    while (!master.isInitialized())     Threads.sleep(10);
    LOG.info("Master is initialized");
    assertFalse("The dead server should not be pulled in",master.getServerManager().isServerOnline(deadServer));
  }
  finally {
    master.stopMaster();
    master.join();
  }
}
