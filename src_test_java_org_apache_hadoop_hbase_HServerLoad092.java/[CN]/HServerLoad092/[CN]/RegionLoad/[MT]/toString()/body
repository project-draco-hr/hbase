{
  StringBuilder sb=Strings.appendKeyValue(new StringBuilder(),"numberOfStores",Integer.valueOf(this.stores));
  sb=Strings.appendKeyValue(sb,"numberOfStorefiles",Integer.valueOf(this.storefiles));
  sb=Strings.appendKeyValue(sb,"storefileUncompressedSizeMB",Integer.valueOf(this.storeUncompressedSizeMB));
  sb=Strings.appendKeyValue(sb,"storefileSizeMB",Integer.valueOf(this.storefileSizeMB));
  if (this.storeUncompressedSizeMB != 0) {
    sb=Strings.appendKeyValue(sb,"compressionRatio",String.format("%.4f",(float)this.storefileSizeMB / (float)this.storeUncompressedSizeMB));
  }
  sb=Strings.appendKeyValue(sb,"memstoreSizeMB",Integer.valueOf(this.memstoreSizeMB));
  sb=Strings.appendKeyValue(sb,"storefileIndexSizeMB",Integer.valueOf(this.storefileIndexSizeMB));
  sb=Strings.appendKeyValue(sb,"readRequestsCount",Long.valueOf(this.readRequestsCount));
  sb=Strings.appendKeyValue(sb,"writeRequestsCount",Long.valueOf(this.writeRequestsCount));
  sb=Strings.appendKeyValue(sb,"rootIndexSizeKB",Integer.valueOf(this.rootIndexSizeKB));
  sb=Strings.appendKeyValue(sb,"totalStaticIndexSizeKB",Integer.valueOf(this.totalStaticIndexSizeKB));
  sb=Strings.appendKeyValue(sb,"totalStaticBloomSizeKB",Integer.valueOf(this.totalStaticBloomSizeKB));
  sb=Strings.appendKeyValue(sb,"totalCompactingKVs",Long.valueOf(this.totalCompactingKVs));
  sb=Strings.appendKeyValue(sb,"currentCompactedKVs",Long.valueOf(this.currentCompactedKVs));
  float compactionProgressPct=Float.NaN;
  if (this.totalCompactingKVs > 0) {
    compactionProgressPct=Float.valueOf(this.currentCompactedKVs / this.totalCompactingKVs);
  }
  sb=Strings.appendKeyValue(sb,"compactionProgressPct",compactionProgressPct);
  String coprocessors=Arrays.toString(getCoprocessors());
  if (coprocessors != null) {
    sb=Strings.appendKeyValue(sb,"coprocessors",Arrays.toString(getCoprocessors()));
  }
  return sb.toString();
}
