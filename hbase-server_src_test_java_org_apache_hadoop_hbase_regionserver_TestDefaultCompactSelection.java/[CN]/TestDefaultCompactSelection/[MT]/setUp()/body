{
  this.conf=TEST_UTIL.getConfiguration();
  this.conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,0);
  this.conf.setInt("hbase.hstore.compaction.min",minFiles);
  this.conf.setInt("hbase.hstore.compaction.max",maxFiles);
  this.conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,minSize);
  this.conf.setLong("hbase.hstore.compaction.max.size",maxSize);
  this.conf.setFloat("hbase.hstore.compaction.ratio",1.0F);
  this.conf.unset("hbase.hstore.compaction.min.size");
  final String id=TestDefaultCompactSelection.class.getName();
  Path basedir=new Path(DIR);
  final Path logdir=new Path(basedir,DefaultWALProvider.getWALDirectoryName(id));
  HColumnDescriptor hcd=new HColumnDescriptor(Bytes.toBytes("family"));
  FileSystem fs=FileSystem.get(conf);
  fs.delete(logdir,true);
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(Bytes.toBytes("table")));
  htd.addFamily(hcd);
  HRegionInfo info=new HRegionInfo(htd.getTableName(),null,null,false);
  final Configuration walConf=new Configuration(conf);
  FSUtils.setRootDir(walConf,basedir);
  wals=new WALFactory(walConf,null,id);
  region=HRegion.createHRegion(info,basedir,conf,htd);
  HRegion.closeHRegion(region);
  Path tableDir=FSUtils.getTableDir(basedir,htd.getTableName());
  region=new HRegion(tableDir,wals.getWAL(info.getEncodedNameAsBytes()),fs,conf,info,htd,null);
  store=new HStore(region,hcd,conf);
  TEST_FILE=region.getRegionFileSystem().createTempName();
  fs.createNewFile(TEST_FILE);
}
