{
  long tooBig=maxSize + 1;
  compactEquals(sfCreate(100,50,23,12,12),23,12,12);
  compactEquals(sfCreate(100,50,25,12,12));
  compactEquals(sfCreate(tooBig,tooBig,700,700,700),700,700,700);
  compactEquals(sfCreate(tooBig,tooBig,700,700));
  compactEquals(sfCreate(8,3,1),8,3,1);
  compactEquals(sfCreate(7,6,5,4,3,2,1),7,6,5,4,3);
  compactEquals(sfCreate(50,25,12,12),true,50,25,12,12);
  compactEquals(sfCreate(12,12),true,12,12);
  compactEquals(sfCreate(tooBig,12,12),true,tooBig,12,12);
  store.forceMajor=true;
  assertEquals(maxFiles,manager.selectCompaction(sfCreate(7,6,5,4,3,2,1),Store.NO_PRIORITY,false).getFilesToCompact().size());
  compactEquals(sfCreate(7,6,5,4,3,2,1),7,6,5,4,3);
  store.forceMajor=false;
  compactEquals(sfCreate(100,50,23,12,12),true,23,12,12);
  conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,1);
  conf.setFloat("hbase.hregion.majorcompaction.jitter",0);
  store.updateConfiguration();
  try {
    compactEquals(sfCreate(50,25,12,12),50,25,12,12);
    compactEquals(sfCreate(100,50,23,12,12),23,12,12);
  }
  finally {
    conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,1000 * 60 * 60* 24);
    conf.setFloat("hbase.hregion.majorcompaction.jitter",0.20F);
  }
  compactEquals(sfCreate(true,100,50,25,12,12),100,50,25,12,12);
  compactEquals(sfCreate(true,tooBig,12,12),tooBig,12,12);
  compactEquals(sfCreate(true,7,6,5,4,3,2,1),7,6,5,4,3);
  compactEquals(new ArrayList<StoreFile>());
  compactEquals(sfCreate(tooBig,tooBig));
}
