{
  admin.createNamespace(NamespaceDescriptor.create(prefix + "ns1").build());
  admin.createNamespace(NamespaceDescriptor.create(prefix + "ns2").build());
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.createNamespace(NamespaceDescriptor.create(prefix + "ns1").build());
      return null;
    }
  }
,NamespaceExistException.class);
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("non_existing_namespace","table1"));
      htd.addFamily(new HColumnDescriptor("family1"));
      admin.createTable(htd);
      return null;
    }
  }
,NamespaceNotFoundException.class);
  admin.getNamespaceDescriptor(prefix + "ns1");
  runWithExpectedException(new Callable<NamespaceDescriptor>(){
    @Override public NamespaceDescriptor call() throws Exception {
      return admin.getNamespaceDescriptor("non_existing_namespace");
    }
  }
,NamespaceNotFoundException.class);
  admin.deleteNamespace(prefix + "ns2");
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.deleteNamespace("non_existing_namespace");
      return null;
    }
  }
,NamespaceNotFoundException.class);
  NamespaceDescriptor ns1=admin.getNamespaceDescriptor(prefix + "ns1");
  ns1.setConfiguration("foo","bar");
  admin.modifyNamespace(ns1);
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.modifyNamespace(NamespaceDescriptor.create("non_existing_namespace").build());
      return null;
    }
  }
,NamespaceNotFoundException.class);
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(prefix + "ns1","table1"));
  htd.addFamily(new HColumnDescriptor("family1"));
  admin.createTable(htd);
  HTableDescriptor[] htds=admin.listTableDescriptorsByNamespace(prefix + "ns1");
  assertNotNull("Should have not returned null",htds);
  assertEquals("Should have returned non-empty array",1,htds.length);
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.listTableDescriptorsByNamespace("non_existant_namespace");
      return null;
    }
  }
,NamespaceNotFoundException.class);
  TableName[] tableNames=admin.listTableNamesByNamespace(prefix + "ns1");
  assertNotNull("Should have not returned null",tableNames);
  assertEquals("Should have returned non-empty array",1,tableNames.length);
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.listTableNamesByNamespace("non_existing_namespace");
      return null;
    }
  }
,NamespaceNotFoundException.class);
}
