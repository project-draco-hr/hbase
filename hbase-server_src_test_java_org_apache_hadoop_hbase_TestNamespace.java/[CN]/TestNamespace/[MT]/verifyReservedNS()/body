{
  NamespaceDescriptor ns=admin.getNamespaceDescriptor(NamespaceDescriptor.DEFAULT_NAMESPACE.getName());
  assertNotNull(ns);
  assertEquals(ns.getName(),NamespaceDescriptor.DEFAULT_NAMESPACE.getName());
  assertNotNull(zkNamespaceManager.get(NamespaceDescriptor.DEFAULT_NAMESPACE_NAME_STR));
  ns=admin.getNamespaceDescriptor(NamespaceDescriptor.SYSTEM_NAMESPACE.getName());
  assertNotNull(ns);
  assertEquals(ns.getName(),NamespaceDescriptor.SYSTEM_NAMESPACE.getName());
  assertNotNull(zkNamespaceManager.get(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR));
  assertEquals(2,admin.listNamespaceDescriptors().length);
  Set<TableName> systemTables=Sets.newHashSet(TableName.META_TABLE_NAME,TableName.NAMESPACE_TABLE_NAME);
  HTableDescriptor[] descs=admin.listTableDescriptorsByNamespace(NamespaceDescriptor.SYSTEM_NAMESPACE.getName());
  assertEquals(systemTables.size(),descs.length);
  for (  HTableDescriptor desc : descs) {
    assertTrue(systemTables.contains(desc.getTableName()));
  }
  assertEquals(0,admin.listTables().length);
  boolean exceptionCaught=false;
  try {
    admin.createNamespace(NamespaceDescriptor.DEFAULT_NAMESPACE);
  }
 catch (  IOException exp) {
    LOG.warn(exp);
    exceptionCaught=true;
  }
 finally {
    assertTrue(exceptionCaught);
  }
  exceptionCaught=false;
  try {
    admin.createNamespace(NamespaceDescriptor.SYSTEM_NAMESPACE);
  }
 catch (  IOException exp) {
    LOG.warn(exp);
    exceptionCaught=true;
  }
 finally {
    assertTrue(exceptionCaught);
  }
}
