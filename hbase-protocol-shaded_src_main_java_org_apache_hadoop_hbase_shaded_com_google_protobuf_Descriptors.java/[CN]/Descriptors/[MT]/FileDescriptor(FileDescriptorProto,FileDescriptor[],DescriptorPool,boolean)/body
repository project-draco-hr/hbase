{
  this.pool=pool;
  this.proto=proto;
  this.dependencies=dependencies.clone();
  HashMap<String,FileDescriptor> nameToFileMap=new HashMap<String,FileDescriptor>();
  for (  FileDescriptor file : dependencies) {
    nameToFileMap.put(file.getName(),file);
  }
  List<FileDescriptor> publicDependencies=new ArrayList<FileDescriptor>();
  for (int i=0; i < proto.getPublicDependencyCount(); i++) {
    int index=proto.getPublicDependency(i);
    if (index < 0 || index >= proto.getDependencyCount()) {
      throw new DescriptorValidationException(this,"Invalid public dependency index.");
    }
    String name=proto.getDependency(index);
    FileDescriptor file=nameToFileMap.get(name);
    if (file == null) {
      if (!allowUnknownDependencies) {
        throw new DescriptorValidationException(this,"Invalid public dependency: " + name);
      }
    }
 else {
      publicDependencies.add(file);
    }
  }
  this.publicDependencies=new FileDescriptor[publicDependencies.size()];
  publicDependencies.toArray(this.publicDependencies);
  pool.addPackage(getPackage(),this);
  messageTypes=new Descriptor[proto.getMessageTypeCount()];
  for (int i=0; i < proto.getMessageTypeCount(); i++) {
    messageTypes[i]=new Descriptor(proto.getMessageType(i),this,null,i);
  }
  enumTypes=new EnumDescriptor[proto.getEnumTypeCount()];
  for (int i=0; i < proto.getEnumTypeCount(); i++) {
    enumTypes[i]=new EnumDescriptor(proto.getEnumType(i),this,null,i);
  }
  services=new ServiceDescriptor[proto.getServiceCount()];
  for (int i=0; i < proto.getServiceCount(); i++) {
    services[i]=new ServiceDescriptor(proto.getService(i),this,i);
  }
  extensions=new FieldDescriptor[proto.getExtensionCount()];
  for (int i=0; i < proto.getExtensionCount(); i++) {
    extensions[i]=new FieldDescriptor(proto.getExtension(i),this,null,i,true);
  }
}
