{
  this.index=index;
  this.proto=proto;
  fullName=computeFullName(file,parent,proto.getName());
  this.file=file;
  if (proto.hasJsonName()) {
    jsonName=proto.getJsonName();
  }
 else {
    jsonName=fieldNameToJsonName(proto.getName());
  }
  if (proto.hasType()) {
    type=Type.valueOf(proto.getType());
  }
  if (getNumber() <= 0) {
    throw new DescriptorValidationException(this,"Field numbers must be positive integers.");
  }
  if (isExtension) {
    if (!proto.hasExtendee()) {
      throw new DescriptorValidationException(this,"FieldDescriptorProto.extendee not set for extension field.");
    }
    containingType=null;
    if (parent != null) {
      extensionScope=parent;
    }
 else {
      extensionScope=null;
    }
    if (proto.hasOneofIndex()) {
      throw new DescriptorValidationException(this,"FieldDescriptorProto.oneof_index set for extension field.");
    }
    containingOneof=null;
  }
 else {
    if (proto.hasExtendee()) {
      throw new DescriptorValidationException(this,"FieldDescriptorProto.extendee set for non-extension field.");
    }
    containingType=parent;
    if (proto.hasOneofIndex()) {
      if (proto.getOneofIndex() < 0 || proto.getOneofIndex() >= parent.toProto().getOneofDeclCount()) {
        throw new DescriptorValidationException(this,"FieldDescriptorProto.oneof_index is out of range for type " + parent.getName());
      }
      containingOneof=parent.getOneofs().get(proto.getOneofIndex());
      containingOneof.fieldCount++;
    }
 else {
      containingOneof=null;
    }
    extensionScope=null;
  }
  file.pool.addSymbol(this);
}
