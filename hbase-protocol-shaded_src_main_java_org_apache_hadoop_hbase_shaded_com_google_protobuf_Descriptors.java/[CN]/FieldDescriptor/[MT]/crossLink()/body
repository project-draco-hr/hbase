{
  if (proto.hasExtendee()) {
    final GenericDescriptor extendee=file.pool.lookupSymbol(proto.getExtendee(),this,DescriptorPool.SearchFilter.TYPES_ONLY);
    if (!(extendee instanceof Descriptor)) {
      throw new DescriptorValidationException(this,'\"' + proto.getExtendee() + "\" is not a message type.");
    }
    containingType=(Descriptor)extendee;
    if (!getContainingType().isExtensionNumber(getNumber())) {
      throw new DescriptorValidationException(this,'\"' + getContainingType().getFullName() + "\" does not declare "+ getNumber()+ " as an extension number.");
    }
  }
  if (proto.hasTypeName()) {
    final GenericDescriptor typeDescriptor=file.pool.lookupSymbol(proto.getTypeName(),this,DescriptorPool.SearchFilter.TYPES_ONLY);
    if (!proto.hasType()) {
      if (typeDescriptor instanceof Descriptor) {
        type=Type.MESSAGE;
      }
 else       if (typeDescriptor instanceof EnumDescriptor) {
        type=Type.ENUM;
      }
 else {
        throw new DescriptorValidationException(this,'\"' + proto.getTypeName() + "\" is not a type.");
      }
    }
    if (getJavaType() == JavaType.MESSAGE) {
      if (!(typeDescriptor instanceof Descriptor)) {
        throw new DescriptorValidationException(this,'\"' + proto.getTypeName() + "\" is not a message type.");
      }
      messageType=(Descriptor)typeDescriptor;
      if (proto.hasDefaultValue()) {
        throw new DescriptorValidationException(this,"Messages can't have default values.");
      }
    }
 else     if (getJavaType() == JavaType.ENUM) {
      if (!(typeDescriptor instanceof EnumDescriptor)) {
        throw new DescriptorValidationException(this,'\"' + proto.getTypeName() + "\" is not an enum type.");
      }
      enumType=(EnumDescriptor)typeDescriptor;
    }
 else {
      throw new DescriptorValidationException(this,"Field with primitive type has type_name.");
    }
  }
 else {
    if (getJavaType() == JavaType.MESSAGE || getJavaType() == JavaType.ENUM) {
      throw new DescriptorValidationException(this,"Field with message or enum type missing type_name.");
    }
  }
  if (proto.getOptions().getPacked() && !isPackable()) {
    throw new DescriptorValidationException(this,"[packed = true] can only be specified for repeated primitive " + "fields.");
  }
  if (proto.hasDefaultValue()) {
    if (isRepeated()) {
      throw new DescriptorValidationException(this,"Repeated fields cannot have default values.");
    }
    try {
switch (getType()) {
case INT32:
case SINT32:
case SFIXED32:
        defaultValue=TextFormat.parseInt32(proto.getDefaultValue());
      break;
case UINT32:
case FIXED32:
    defaultValue=TextFormat.parseUInt32(proto.getDefaultValue());
  break;
case INT64:
case SINT64:
case SFIXED64:
defaultValue=TextFormat.parseInt64(proto.getDefaultValue());
break;
case UINT64:
case FIXED64:
defaultValue=TextFormat.parseUInt64(proto.getDefaultValue());
break;
case FLOAT:
if (proto.getDefaultValue().equals("inf")) {
defaultValue=Float.POSITIVE_INFINITY;
}
 else if (proto.getDefaultValue().equals("-inf")) {
defaultValue=Float.NEGATIVE_INFINITY;
}
 else if (proto.getDefaultValue().equals("nan")) {
defaultValue=Float.NaN;
}
 else {
defaultValue=Float.valueOf(proto.getDefaultValue());
}
break;
case DOUBLE:
if (proto.getDefaultValue().equals("inf")) {
defaultValue=Double.POSITIVE_INFINITY;
}
 else if (proto.getDefaultValue().equals("-inf")) {
defaultValue=Double.NEGATIVE_INFINITY;
}
 else if (proto.getDefaultValue().equals("nan")) {
defaultValue=Double.NaN;
}
 else {
defaultValue=Double.valueOf(proto.getDefaultValue());
}
break;
case BOOL:
defaultValue=Boolean.valueOf(proto.getDefaultValue());
break;
case STRING:
defaultValue=proto.getDefaultValue();
break;
case BYTES:
try {
defaultValue=TextFormat.unescapeBytes(proto.getDefaultValue());
}
 catch (TextFormat.InvalidEscapeSequenceException e) {
throw new DescriptorValidationException(this,"Couldn't parse default value: " + e.getMessage(),e);
}
break;
case ENUM:
defaultValue=enumType.findValueByName(proto.getDefaultValue());
if (defaultValue == null) {
throw new DescriptorValidationException(this,"Unknown enum default value: \"" + proto.getDefaultValue() + '\"');
}
break;
case MESSAGE:
case GROUP:
throw new DescriptorValidationException(this,"Message type had default value.");
}
}
 catch (NumberFormatException e) {
throw new DescriptorValidationException(this,"Could not parse default value: \"" + proto.getDefaultValue() + '\"',e);
}
}
 else {
if (isRepeated()) {
defaultValue=Collections.emptyList();
}
 else {
switch (getJavaType()) {
case ENUM:
defaultValue=enumType.getValues().get(0);
break;
case MESSAGE:
defaultValue=null;
break;
default :
defaultValue=getJavaType().defaultDefault;
break;
}
}
}
if (!isExtension()) {
file.pool.addFieldByNumber(this);
}
if (containingType != null && containingType.getOptions().getMessageSetWireFormat()) {
if (isExtension()) {
if (!isOptional() || getType() != Type.MESSAGE) {
throw new DescriptorValidationException(this,"Extensions of MessageSets must be optional messages.");
}
}
 else {
throw new DescriptorValidationException(this,"MessageSets cannot have fields, only extensions.");
}
}
}
