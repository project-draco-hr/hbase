{
  String methodName=header.getMethodName();
  Integer priorityByAnnotation=annotatedQos.get(methodName);
  if (priorityByAnnotation != null) {
    return priorityByAnnotation;
  }
  if (isExecutedBySuperUser(user)) {
    return HConstants.ADMIN_QOS;
  }
  if (param == null) {
    return HConstants.NORMAL_QOS;
  }
  if (methodName.equalsIgnoreCase("multi") && param instanceof MultiRequest) {
    return header.hasPriority() ? header.getPriority() : HConstants.NORMAL_QOS;
  }
  String cls=param.getClass().getName();
  Class<? extends Message> rpcArgClass=argumentToClassMap.get(cls);
  RegionSpecifier regionSpecifier=null;
  try {
    Method hasRegion=methodMap.get("hasRegion").get(rpcArgClass);
    if (hasRegion != null && (Boolean)hasRegion.invoke(param,(Object[])null)) {
      Method getRegion=methodMap.get("getRegion").get(rpcArgClass);
      regionSpecifier=(RegionSpecifier)getRegion.invoke(param,(Object[])null);
      Region region=rpcServices.getRegion(regionSpecifier);
      if (region.getRegionInfo().isSystemTable()) {
        if (LOG.isTraceEnabled()) {
          LOG.trace("High priority because region=" + region.getRegionInfo().getRegionNameAsString());
        }
        return HConstants.SYSTEMTABLE_QOS;
      }
    }
  }
 catch (  Exception ex) {
    if (LOG.isTraceEnabled())     LOG.trace("Marking normal priority after getting exception=" + ex);
    return HConstants.NORMAL_QOS;
  }
  if (methodName.equalsIgnoreCase("scan")) {
    ScanRequest request=(ScanRequest)param;
    if (!request.hasScannerId()) {
      return HConstants.NORMAL_QOS;
    }
    RegionScanner scanner=rpcServices.getScanner(request.getScannerId());
    if (scanner != null && scanner.getRegionInfo().isSystemTable()) {
      if (LOG.isTraceEnabled()) {
        LOG.trace("High priority scanner request " + TextFormat.shortDebugString(request));
      }
      return HConstants.SYSTEMTABLE_QOS;
    }
  }
  if (methodName.equalsIgnoreCase("ReportRegionStateTransition")) {
    ReportRegionStateTransitionRequest tRequest=(ReportRegionStateTransitionRequest)param;
    for (    RegionStateTransition transition : tRequest.getTransitionList()) {
      if (transition.getRegionInfoList() != null) {
        for (        HBaseProtos.RegionInfo info : transition.getRegionInfoList()) {
          TableName tn=ProtobufUtil.toTableName(info.getTableName());
          if (tn.isSystemTable()) {
            return HConstants.SYSTEMTABLE_QOS;
          }
        }
      }
    }
  }
  return HConstants.NORMAL_QOS;
}
