{
  if (LOG.isTraceEnabled()) {
    LOG.trace("GET " + uriInfo.getAbsolutePath());
  }
  servlet.getMetrics().incrementRequests(1);
  try {
    TableName tableName=TableName.valueOf(tableResource.getName());
    TableInfoModel model=new TableInfoModel(tableName.getNameAsString());
    Connection connection=ConnectionFactory.createConnection(servlet.getConfiguration());
    @SuppressWarnings("deprecation") Map<HRegionInfo,ServerName> regions=MetaTableAccessor.allTableRegions(connection,tableName);
    connection.close();
    for (    Map.Entry<HRegionInfo,ServerName> e : regions.entrySet()) {
      HRegionInfo hri=e.getKey();
      ServerName addr=e.getValue();
      model.add(new TableRegionModel(tableName.getNameAsString(),hri.getRegionId(),hri.getStartKey(),hri.getEndKey(),addr.getHostAndPort()));
    }
    ResponseBuilder response=Response.ok(model);
    response.cacheControl(cacheControl);
    servlet.getMetrics().incrementSucessfulGetRequests(1);
    return response.build();
  }
 catch (  TableNotFoundException e) {
    servlet.getMetrics().incrementFailedGetRequests(1);
    return Response.status(Response.Status.NOT_FOUND).type(MIMETYPE_TEXT).entity("Not found" + CRLF).build();
  }
catch (  IOException e) {
    servlet.getMetrics().incrementFailedGetRequests(1);
    return Response.status(Response.Status.SERVICE_UNAVAILABLE).type(MIMETYPE_TEXT).entity("Unavailable" + CRLF).build();
  }
}
