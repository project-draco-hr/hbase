{
  errors.print("Version: " + status.getHBaseVersion());
  regionInfo.clear();
  tablesInfo.clear();
  emptyRegionInfoQualifiers.clear();
  disabledTables.clear();
  if (!recordRootRegion()) {
    errors.reportError("Encountered fatal error. Exitting...");
    return -1;
  }
  getMetaEntries();
  if (!checkMetaEntries()) {
    errors.reportError("Encountered fatal error. Exitting...");
    return -1;
  }
  AtomicInteger numSkipped=new AtomicInteger(0);
  HTableDescriptor[] allTables=getTables(numSkipped);
  errors.print("Number of Tables: " + allTables.length);
  if (details) {
    if (numSkipped.get() > 0) {
      errors.detail("Number of Tables in flux: " + numSkipped.get());
    }
    for (    HTableDescriptor td : allTables) {
      String tableName=td.getNameAsString();
      errors.detail("  Table: " + tableName + "\t"+ (td.isReadOnly() ? "ro" : "rw")+ "\t"+ (td.isRootRegion() ? "ROOT" : (td.isMetaRegion() ? "META" : "    "))+ "\t"+ " families: "+ td.getFamilies().size());
    }
  }
  Collection<ServerName> regionServers=status.getServers();
  errors.print("Number of live region servers: " + regionServers.size());
  if (details) {
    for (    ServerName rsinfo : regionServers) {
      errors.print("  " + rsinfo);
    }
  }
  Collection<ServerName> deadRegionServers=status.getDeadServerNames();
  errors.print("Number of dead region servers: " + deadRegionServers.size());
  if (details) {
    for (    ServerName name : deadRegionServers) {
      errors.print("  " + name);
    }
  }
  processRegionServers(regionServers);
  checkHdfs();
  errors.print("Number of empty REGIONINFO_QUALIFIER rows in .META.: " + emptyRegionInfoQualifiers.size());
  if (details) {
    for (    Result r : emptyRegionInfoQualifiers) {
      errors.print("  " + r);
    }
  }
  loadDisabledTables();
  checkConsistency();
  checkIntegrity();
  printTableSummary();
  return errors.summarize();
}
