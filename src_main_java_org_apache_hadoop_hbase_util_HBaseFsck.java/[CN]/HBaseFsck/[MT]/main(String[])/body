{
  Configuration conf=HBaseConfiguration.create();
  conf.set("fs.defaultFS",conf.get("hbase.rootdir"));
  HBaseFsck fsck=new HBaseFsck(conf);
  long sleepBeforeRerun=DEFAULT_SLEEP_BEFORE_RERUN;
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    if (cmd.equals("-details")) {
      fsck.displayFullReport();
    }
 else     if (cmd.equals("-timelag")) {
      if (i == args.length - 1) {
        System.err.println("HBaseFsck: -timelag needs a value.");
        printUsageAndExit();
      }
      try {
        long timelag=Long.parseLong(args[i + 1]);
        fsck.setTimeLag(timelag);
      }
 catch (      NumberFormatException e) {
        System.err.println("-timelag needs a numeric value.");
        printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-sleepBeforeRerun")) {
      if (i == args.length - 1) {
        System.err.println("HBaseFsck: -sleepBeforeRerun needs a value.");
        printUsageAndExit();
      }
      try {
        sleepBeforeRerun=Long.parseLong(args[i + 1]);
      }
 catch (      NumberFormatException e) {
        System.err.println("-sleepBeforeRerun needs a numeric value.");
        printUsageAndExit();
      }
      i++;
    }
 else     if (cmd.equals("-fix")) {
      fsck.setFixErrors(true);
    }
 else     if (cmd.equals("-summary")) {
      fsck.setSummary();
    }
 else {
      String str="Unknown command line option : " + cmd;
      LOG.info(str);
      System.out.println(str);
      printUsageAndExit();
    }
  }
  int code=fsck.doWork();
  if (fsck.shouldRerun()) {
    try {
      LOG.info("Sleeping " + sleepBeforeRerun + "ms before re-checking after fix...");
      Thread.sleep(sleepBeforeRerun);
    }
 catch (    InterruptedException ie) {
      Runtime.getRuntime().exit(code);
    }
    fsck.setFixErrors(false);
    fsck.errors.resetErrors();
    code=fsck.doWork();
  }
  Runtime.getRuntime().exit(code);
}
