{
  LOG.info("Starting test");
  Cluster cluster=new Cluster(10,100);
  for (int i=0; i < 10; i++) {
    cluster.startServer();
  }
  ArrayList<SimpleClient> clients=new ArrayList<>();
  AbstractRpcClient rpcClient=createRpcClient(conf,isSyncClient);
  for (int i=0; i < 30; i++) {
    String clientId="client_" + i + "_";
    LOG.info("Starting client: " + clientId);
    SimpleClient client=new SimpleClient(cluster,rpcClient,clientId);
    client.start();
    clients.add(client);
  }
  LOG.info("Starting MiniChaosMonkey");
  MiniChaosMonkey cm=new MiniChaosMonkey(cluster);
  cm.start();
  Threads.sleep(30000);
  LOG.info("Stopping MiniChaosMonkey");
  cm.stopRunning();
  cm.join();
  cm.rethrowException();
  LOG.info("Stopping clients");
  for (  SimpleClient client : clients) {
    LOG.info("Stopping client: " + client.id);
    LOG.info(client.id + " numCalls:" + client.numCalls);
    client.stopRunning();
    client.join();
    client.rethrowException();
    assertTrue(client.numCalls > 10);
  }
  LOG.info("Stopping RpcClient");
  rpcClient.close();
  LOG.info("Stopping Cluster");
  cluster.stopRunning();
}
