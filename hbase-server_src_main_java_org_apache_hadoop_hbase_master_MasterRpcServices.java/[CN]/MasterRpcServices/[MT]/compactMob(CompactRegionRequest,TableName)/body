{
  boolean isForceAllFiles=false;
  List<HColumnDescriptor> compactedColumns=new ArrayList<HColumnDescriptor>();
  HColumnDescriptor[] hcds=master.getTableDescriptors().get(tableName).getColumnFamilies();
  byte[] family=null;
  if (request.hasFamily()) {
    family=request.getFamily().toByteArray();
    for (    HColumnDescriptor hcd : hcds) {
      if (Bytes.equals(family,hcd.getName())) {
        if (!hcd.isMobEnabled()) {
          LOG.error("Column family " + hcd.getName() + " is not a mob column family");
          throw new DoNotRetryIOException("Column family " + hcd.getName() + " is not a mob column family");
        }
        compactedColumns.add(hcd);
      }
    }
  }
 else {
    for (    HColumnDescriptor hcd : hcds) {
      if (hcd.isMobEnabled()) {
        compactedColumns.add(hcd);
      }
    }
  }
  if (compactedColumns.isEmpty()) {
    LOG.error("No mob column families are assigned in the mob file compaction");
    throw new DoNotRetryIOException("No mob column families are assigned in the mob file compaction");
  }
  if (request.hasMajor() && request.getMajor()) {
    isForceAllFiles=true;
  }
  String familyLogMsg=(family != null) ? Bytes.toString(family) : "";
  if (LOG.isTraceEnabled()) {
    LOG.trace("User-triggered mob file compaction requested for table: " + tableName.getNameAsString() + " for column family: "+ familyLogMsg);
  }
  master.mobFileCompactThread.requestMobFileCompaction(master.getConfiguration(),master.getFileSystem(),tableName,compactedColumns,master.getTableLockManager(),isForceAllFiles);
  return CompactRegionResponse.newBuilder().build();
}
