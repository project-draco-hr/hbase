{
  try {
    master.checkInitialized();
    ServerRpcController execController=new ServerRpcController();
    ClientProtos.CoprocessorServiceCall call=request.getCall();
    String serviceName=call.getServiceName();
    String methodName=call.getMethodName();
    if (!master.coprocessorServiceHandlers.containsKey(serviceName)) {
      throw new UnknownProtocolException(null,"No registered master coprocessor service found for name " + serviceName);
    }
    com.google.protobuf.Service service=master.coprocessorServiceHandlers.get(serviceName);
    com.google.protobuf.Descriptors.ServiceDescriptor serviceDesc=service.getDescriptorForType();
    com.google.protobuf.Descriptors.MethodDescriptor methodDesc=CoprocessorRpcUtils.getMethodDescriptor(methodName,serviceDesc);
    com.google.protobuf.Message execRequest=CoprocessorRpcUtils.getRequest(service,methodDesc,call.getRequest());
    final com.google.protobuf.Message.Builder responseBuilder=service.getResponsePrototype(methodDesc).newBuilderForType();
    service.callMethod(methodDesc,execController,execRequest,new com.google.protobuf.RpcCallback<com.google.protobuf.Message>(){
      @Override public void run(      com.google.protobuf.Message message){
        if (message != null) {
          responseBuilder.mergeFrom(message);
        }
      }
    }
);
    com.google.protobuf.Message execResult=responseBuilder.build();
    if (execController.getFailedOn() != null) {
      throw execController.getFailedOn();
    }
    return CoprocessorRpcUtils.getResponse(execResult,HConstants.EMPTY_BYTE_ARRAY);
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
}
