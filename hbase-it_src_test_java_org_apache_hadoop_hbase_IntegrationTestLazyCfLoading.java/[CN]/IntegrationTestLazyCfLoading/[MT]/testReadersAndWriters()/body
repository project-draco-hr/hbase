{
  Configuration conf=util.getConfiguration();
  String timeoutKey=String.format(TIMEOUT_KEY,this.getClass().getSimpleName());
  long maxRuntime=conf.getLong(timeoutKey,DEFAULT_TIMEOUT_MINUTES);
  long serverCount=util.getHBaseClusterInterface().getClusterStatus().getServersSize();
  long keysToWrite=serverCount * KEYS_TO_WRITE_PER_SERVER;
  Table table=new HTable(conf,TABLE_NAME);
  MultiThreadedWriter writer=new MultiThreadedWriter(dataGen,conf,TABLE_NAME);
  writer.setMultiPut(true);
  LOG.info("Starting writer; the number of keys to write is " + keysToWrite);
  writer.start(1,keysToWrite,WRITER_THREADS);
  long now=EnvironmentEdgeManager.currentTime();
  long timeLimit=now + (maxRuntime * 60000);
  boolean isWriterDone=false;
  while (now < timeLimit && !isWriterDone) {
    LOG.info("Starting the scan; wrote approximately " + dataGen.getTotalNumberOfKeys() + " keys");
    isWriterDone=writer.isDone();
    if (isWriterDone) {
      LOG.info("Scanning full result, writer is done");
    }
    Scan scan=new Scan();
    for (    byte[] cf : dataGen.getColumnFamilies()) {
      scan.addFamily(cf);
    }
    scan.setFilter(dataGen.getScanFilter());
    scan.setLoadColumnFamiliesOnDemand(true);
    long onesGennedBeforeScan=dataGen.getExpectedNumberOfKeys();
    long startTs=EnvironmentEdgeManager.currentTime();
    ResultScanner results=table.getScanner(scan);
    long resultCount=0;
    Result result=null;
    while ((result=results.next()) != null) {
      boolean isOk=writer.verifyResultAgainstDataGenerator(result,true,true);
      Assert.assertTrue("Failed to verify [" + Bytes.toString(result.getRow()) + "]",isOk);
      ++resultCount;
    }
    long timeTaken=EnvironmentEdgeManager.currentTime() - startTs;
    long onesGennedAfterScan=dataGen.getExpectedNumberOfKeys();
    Assert.assertTrue("Read " + resultCount + " keys when at most "+ onesGennedAfterScan+ " were generated ",onesGennedAfterScan >= resultCount);
    if (isWriterDone) {
      Assert.assertTrue("Read " + resultCount + " keys; the writer is done and "+ onesGennedAfterScan+ " keys were generated",onesGennedAfterScan == resultCount);
    }
 else     if (onesGennedBeforeScan * 0.9 > resultCount) {
      LOG.warn("Read way too few keys (" + resultCount + "/"+ onesGennedBeforeScan+ ") - there might be a problem, or the writer might just be slow");
    }
    LOG.info("Scan took " + timeTaken + "ms");
    if (!isWriterDone) {
      Thread.sleep(WAIT_BETWEEN_SCANS_MS);
      now=EnvironmentEdgeManager.currentTime();
    }
  }
  Assert.assertEquals("There are write failures",0,writer.getNumWriteFailures());
  Assert.assertTrue("Writer is not done",isWriterDone);
}
