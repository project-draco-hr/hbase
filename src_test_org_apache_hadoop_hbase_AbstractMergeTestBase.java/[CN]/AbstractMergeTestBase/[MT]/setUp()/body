{
  super.setUp();
  rand=new Random();
  desc=new HTableDescriptor("test");
  desc.addFamily(new HColumnDescriptor(COLUMN_NAME.toString()));
  String partialValue=String.valueOf(System.currentTimeMillis());
  StringBuilder val=new StringBuilder();
  while (val.length() < 1024) {
    val.append(partialValue);
  }
  try {
    value=new ImmutableBytesWritable(val.toString().getBytes(HConstants.UTF8_ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    fail();
  }
  try {
    dfsCluster=new MiniDFSCluster(conf,2,true,(String[])null);
    fs=dfsCluster.getFileSystem();
    dir=new Path("/hbase");
    fs.mkdirs(dir);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    fail();
  }
  try {
    Text row_70001=new Text("row_70001");
    Text row_80001=new Text("row_80001");
    HRegion[] regions={createAregion(null,row_70001,1,70000),createAregion(row_70001,row_80001,70001,10000),createAregion(row_80001,null,80001,10000)};
    HRegion root=createNewHRegion(fs,dir,conf,HGlobals.rootTableDesc,0L,null,null);
    HRegion meta=createNewHRegion(fs,dir,conf,HGlobals.metaTableDesc,1L,null,null);
    HRegion.addRegionToMETA(root,meta);
    for (int i=0; i < regions.length; i++) {
      HRegion.addRegionToMETA(meta,regions[i]);
    }
    root.close();
    root.getLog().closeAndDelete();
    meta.close();
    meta.getLog().closeAndDelete();
  }
 catch (  Throwable t) {
    t.printStackTrace();
    if (dfsCluster != null) {
      dfsCluster.shutdown();
    }
    fail();
  }
}
