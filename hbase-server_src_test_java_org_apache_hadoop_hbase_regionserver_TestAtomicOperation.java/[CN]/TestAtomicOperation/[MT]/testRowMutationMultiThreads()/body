{
  LOG.info("Starting test testRowMutationMultiThreads");
  initHRegion(tableName,getName(),fam1);
  int numThreads=10;
  int opsPerThread=500;
  AtomicOperation[] all=new AtomicOperation[numThreads];
  AtomicLong timeStamps=new AtomicLong(0);
  AtomicInteger failures=new AtomicInteger(0);
  for (int i=0; i < numThreads; i++) {
    all[i]=new AtomicOperation(region,opsPerThread,timeStamps,failures){
      @Override public void run(){
        boolean op=true;
        for (int i=0; i < numOps; i++) {
          try {
            if (i % 10 == 0) {
synchronized (region) {
                LOG.debug("flushing");
                region.flushcache();
                if (i % 100 == 0) {
                  region.compactStores();
                }
              }
            }
            long ts=timeStamps.incrementAndGet();
            RowMutations rm=new RowMutations(row);
            if (op) {
              Put p=new Put(row,ts);
              p.add(fam1,qual1,value1);
              rm.add(p);
              Delete d=new Delete(row);
              d.deleteColumns(fam1,qual2,ts);
              rm.add(d);
            }
 else {
              Delete d=new Delete(row);
              d.deleteColumns(fam1,qual1,ts);
              rm.add(d);
              Put p=new Put(row,ts);
              p.add(fam1,qual2,value2);
              rm.add(p);
            }
            region.mutateRow(rm);
            op^=true;
            Get g=new Get(row);
            Result r=region.get(g);
            if (r.size() != 1) {
              LOG.debug(r);
              failures.incrementAndGet();
              fail();
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
            failures.incrementAndGet();
            fail();
          }
        }
      }
    }
;
  }
  for (int i=0; i < numThreads; i++) {
    all[i].start();
  }
  for (int i=0; i < numThreads; i++) {
    try {
      all[i].join();
    }
 catch (    InterruptedException e) {
    }
  }
  assertEquals(0,failures.get());
}
