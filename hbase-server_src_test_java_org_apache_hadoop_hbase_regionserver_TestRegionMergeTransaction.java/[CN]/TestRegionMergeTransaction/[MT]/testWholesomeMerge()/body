{
  final int rowCountOfRegionA=loadRegion(this.region_a,CF,true);
  final int rowCountOfRegionB=loadRegion(this.region_b,CF,true);
  assertTrue(rowCountOfRegionA > 0 && rowCountOfRegionB > 0);
  assertEquals(rowCountOfRegionA,TEST_UTIL.countRows(this.region_a));
  assertEquals(rowCountOfRegionB,TEST_UTIL.countRows(this.region_b));
  RegionMergeTransactionImpl mt=prepareOnGoodRegions();
  TEST_UTIL.getConfiguration().setInt(HConstants.REGIONSERVER_PORT,0);
  CoordinatedStateManager cp=CoordinatedStateManagerFactory.getCoordinatedStateManager(TEST_UTIL.getConfiguration());
  Server mockServer=new HRegionServer(TEST_UTIL.getConfiguration(),cp);
  HRegion mergedRegion=(HRegion)mt.execute(mockServer,null);
  assertTrue(this.fs.exists(mt.getMergesDir()));
  assertTrue(region_a.isClosed());
  assertTrue(region_b.isClosed());
  assertEquals(0,this.fs.listStatus(mt.getMergesDir()).length);
  assertTrue(Bytes.equals(this.region_a.getRegionInfo().getStartKey(),mergedRegion.getRegionInfo().getStartKey()));
  assertTrue(Bytes.equals(this.region_b.getRegionInfo().getEndKey(),mergedRegion.getRegionInfo().getEndKey()));
  try {
    int mergedRegionRowCount=TEST_UTIL.countRows(mergedRegion);
    assertEquals((rowCountOfRegionA + rowCountOfRegionB),mergedRegionRowCount);
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(mergedRegion);
  }
  assertTrue(!this.region_a.lock.writeLock().isHeldByCurrentThread());
  assertTrue(!this.region_b.lock.writeLock().isHeldByCurrentThread());
}
