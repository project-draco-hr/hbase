{
  final int rowCountOfRegionA=loadRegion(this.region_a,CF,true);
  final int rowCountOfRegionB=loadRegion(this.region_b,CF,true);
  assertTrue(rowCountOfRegionA > 0 && rowCountOfRegionB > 0);
  assertEquals(rowCountOfRegionA,countRows(this.region_a));
  assertEquals(rowCountOfRegionB,countRows(this.region_b));
  RegionMergeTransaction mt=prepareOnGoodRegions();
  Mockito.doThrow(new MockedFailedMergedRegionOpen()).when(mt).openMergedRegion((Server)Mockito.anyObject(),(RegionServerServices)Mockito.anyObject(),(HRegion)Mockito.anyObject());
  boolean expectedException=false;
  TEST_UTIL.getConfiguration().setInt(HConstants.REGIONSERVER_PORT,0);
  ConsensusProvider cp=ConsensusProviderFactory.getConsensusProvider(TEST_UTIL.getConfiguration());
  Server mockServer=new HRegionServer(TEST_UTIL.getConfiguration(),cp);
  try {
    mt.execute(mockServer,null);
  }
 catch (  MockedFailedMergedRegionOpen e) {
    expectedException=true;
  }
  assertTrue(expectedException);
  assertFalse(mt.rollback(null,null));
  Path tableDir=this.region_a.getRegionFileSystem().getRegionDir().getParent();
  Path mergedRegionDir=new Path(tableDir,mt.getMergedRegionInfo().getEncodedName());
  assertTrue(TEST_UTIL.getTestFileSystem().exists(mergedRegionDir));
}
