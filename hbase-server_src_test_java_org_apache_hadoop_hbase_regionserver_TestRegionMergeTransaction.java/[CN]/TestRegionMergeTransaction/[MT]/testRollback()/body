{
  final int rowCountOfRegionA=loadRegion(this.region_a,CF,true);
  final int rowCountOfRegionB=loadRegion(this.region_b,CF,true);
  assertTrue(rowCountOfRegionA > 0 && rowCountOfRegionB > 0);
  assertEquals(rowCountOfRegionA,countRows(this.region_a));
  assertEquals(rowCountOfRegionB,countRows(this.region_b));
  RegionMergeTransactionImpl mt=prepareOnGoodRegions();
  when(mt.createMergedRegionFromMerges(region_a,region_b,mt.getMergedRegionInfo())).thenThrow(new MockedFailedMergedRegionCreation());
  boolean expectedException=false;
  TEST_UTIL.getConfiguration().setInt(HConstants.REGIONSERVER_PORT,0);
  CoordinatedStateManager cp=CoordinatedStateManagerFactory.getCoordinatedStateManager(TEST_UTIL.getConfiguration());
  Server mockServer=new HRegionServer(TEST_UTIL.getConfiguration(),cp);
  try {
    mt.execute(mockServer,null);
  }
 catch (  MockedFailedMergedRegionCreation e) {
    expectedException=true;
  }
  assertTrue(expectedException);
  assertTrue(mt.rollback(null,null));
  int rowCountOfRegionA2=countRows(this.region_a);
  assertEquals(rowCountOfRegionA,rowCountOfRegionA2);
  int rowCountOfRegionB2=countRows(this.region_b);
  assertEquals(rowCountOfRegionB,rowCountOfRegionB2);
  assertTrue(!this.fs.exists(HRegion.getRegionDir(this.testdir,mt.getMergedRegionInfo())));
  assertTrue(!this.region_a.lock.writeLock().isHeldByCurrentThread());
  assertTrue(!this.region_b.lock.writeLock().isHeldByCurrentThread());
  assertTrue(mt.prepare(null));
  HRegion mergedRegion=(HRegion)mt.execute(mockServer,null);
  try {
    int mergedRegionRowCount=countRows(mergedRegion);
    assertEquals((rowCountOfRegionA + rowCountOfRegionB),mergedRegionRowCount);
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(mergedRegion);
  }
  assertTrue(!this.region_a.lock.writeLock().isHeldByCurrentThread());
  assertTrue(!this.region_b.lock.writeLock().isHeldByCurrentThread());
}
