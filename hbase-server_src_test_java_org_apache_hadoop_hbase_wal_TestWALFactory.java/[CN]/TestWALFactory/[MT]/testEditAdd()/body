{
  final int COL_COUNT=10;
  final HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("tablename")).addFamily(new HColumnDescriptor("column"));
  NavigableMap<byte[],Integer> scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  for (  byte[] fam : htd.getFamiliesKeys()) {
    scopes.put(fam,0);
  }
  final byte[] row=Bytes.toBytes("row");
  WAL.Reader reader=null;
  try {
    final MultiVersionConcurrencyControl mvcc=new MultiVersionConcurrencyControl(1);
    long timestamp=System.currentTimeMillis();
    WALEdit cols=new WALEdit();
    for (int i=0; i < COL_COUNT; i++) {
      cols.add(new KeyValue(row,Bytes.toBytes("column"),Bytes.toBytes(Integer.toString(i)),timestamp,new byte[]{(byte)(i + '0')}));
    }
    HRegionInfo info=new HRegionInfo(htd.getTableName(),row,Bytes.toBytes(Bytes.toString(row) + "1"),false);
    final WAL log=wals.getWAL(info.getEncodedNameAsBytes(),info.getTable().getNamespace());
    final long txid=log.append(info,new WALKey(info.getEncodedNameAsBytes(),htd.getTableName(),System.currentTimeMillis(),mvcc,scopes),cols,true);
    log.sync(txid);
    log.startCacheFlush(info.getEncodedNameAsBytes(),htd.getFamiliesKeys());
    log.completeCacheFlush(info.getEncodedNameAsBytes());
    log.shutdown();
    Path filename=AbstractFSWALProvider.getCurrentFileName(log);
    reader=wals.createReader(fs,filename);
    for (int i=0; i < 1; i++) {
      WAL.Entry entry=reader.next(null);
      if (entry == null)       break;
      WALKey key=entry.getKey();
      WALEdit val=entry.getEdit();
      assertTrue(Bytes.equals(info.getEncodedNameAsBytes(),key.getEncodedRegionName()));
      assertTrue(htd.getTableName().equals(key.getTablename()));
      Cell cell=val.getCells().get(0);
      assertTrue(Bytes.equals(row,0,row.length,cell.getRowArray(),cell.getRowOffset(),cell.getRowLength()));
      assertEquals((byte)(i + '0'),CellUtil.cloneValue(cell)[0]);
      System.out.println(key + " " + val);
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}
