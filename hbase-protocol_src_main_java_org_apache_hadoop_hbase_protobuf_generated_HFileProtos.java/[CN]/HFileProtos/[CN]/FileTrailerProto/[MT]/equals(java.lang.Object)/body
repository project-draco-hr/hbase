{
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.apache.hadoop.hbase.protobuf.generated.HFileProtos.FileTrailerProto)) {
    return super.equals(obj);
  }
  org.apache.hadoop.hbase.protobuf.generated.HFileProtos.FileTrailerProto other=(org.apache.hadoop.hbase.protobuf.generated.HFileProtos.FileTrailerProto)obj;
  boolean result=true;
  result=result && (hasFileInfoOffset() == other.hasFileInfoOffset());
  if (hasFileInfoOffset()) {
    result=result && (getFileInfoOffset() == other.getFileInfoOffset());
  }
  result=result && (hasLoadOnOpenDataOffset() == other.hasLoadOnOpenDataOffset());
  if (hasLoadOnOpenDataOffset()) {
    result=result && (getLoadOnOpenDataOffset() == other.getLoadOnOpenDataOffset());
  }
  result=result && (hasUncompressedDataIndexSize() == other.hasUncompressedDataIndexSize());
  if (hasUncompressedDataIndexSize()) {
    result=result && (getUncompressedDataIndexSize() == other.getUncompressedDataIndexSize());
  }
  result=result && (hasTotalUncompressedBytes() == other.hasTotalUncompressedBytes());
  if (hasTotalUncompressedBytes()) {
    result=result && (getTotalUncompressedBytes() == other.getTotalUncompressedBytes());
  }
  result=result && (hasDataIndexCount() == other.hasDataIndexCount());
  if (hasDataIndexCount()) {
    result=result && (getDataIndexCount() == other.getDataIndexCount());
  }
  result=result && (hasMetaIndexCount() == other.hasMetaIndexCount());
  if (hasMetaIndexCount()) {
    result=result && (getMetaIndexCount() == other.getMetaIndexCount());
  }
  result=result && (hasEntryCount() == other.hasEntryCount());
  if (hasEntryCount()) {
    result=result && (getEntryCount() == other.getEntryCount());
  }
  result=result && (hasNumDataIndexLevels() == other.hasNumDataIndexLevels());
  if (hasNumDataIndexLevels()) {
    result=result && (getNumDataIndexLevels() == other.getNumDataIndexLevels());
  }
  result=result && (hasFirstDataBlockOffset() == other.hasFirstDataBlockOffset());
  if (hasFirstDataBlockOffset()) {
    result=result && (getFirstDataBlockOffset() == other.getFirstDataBlockOffset());
  }
  result=result && (hasLastDataBlockOffset() == other.hasLastDataBlockOffset());
  if (hasLastDataBlockOffset()) {
    result=result && (getLastDataBlockOffset() == other.getLastDataBlockOffset());
  }
  result=result && (hasComparatorClassName() == other.hasComparatorClassName());
  if (hasComparatorClassName()) {
    result=result && getComparatorClassName().equals(other.getComparatorClassName());
  }
  result=result && (hasCompressionCodec() == other.hasCompressionCodec());
  if (hasCompressionCodec()) {
    result=result && (getCompressionCodec() == other.getCompressionCodec());
  }
  result=result && getUnknownFields().equals(other.getUnknownFields());
  return result;
}
