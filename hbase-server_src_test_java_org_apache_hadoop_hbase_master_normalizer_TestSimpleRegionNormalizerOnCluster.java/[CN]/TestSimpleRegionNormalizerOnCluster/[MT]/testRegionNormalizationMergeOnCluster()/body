{
  final TableName TABLENAME=TableName.valueOf("testRegionNormalizationMergeOnCluster");
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  HMaster m=cluster.getMaster();
  try (HTable ht=TEST_UTIL.createMultiRegionTable(TABLENAME,FAMILYNAME,5)){
    List<HRegion> generatedRegions=TEST_UTIL.getHBaseCluster().getRegions(TABLENAME);
    Collections.sort(generatedRegions,new Comparator<HRegion>(){
      @Override public int compare(      HRegion o1,      HRegion o2){
        return o1.getRegionInfo().compareTo(o2.getRegionInfo());
      }
    }
);
    HRegion region=generatedRegions.get(0);
    generateTestData(region,1);
    region.flush(true);
    region=generatedRegions.get(1);
    generateTestData(region,1);
    region.flush(true);
    region=generatedRegions.get(2);
    generateTestData(region,3);
    region.flush(true);
    region=generatedRegions.get(3);
    generateTestData(region,3);
    region.flush(true);
    region=generatedRegions.get(4);
    generateTestData(region,5);
    region.flush(true);
  }
   HTableDescriptor htd=admin.getTableDescriptor(TABLENAME);
  htd.setNormalizationEnabled(true);
  admin.modifyTable(TABLENAME,htd);
  admin.flush(TABLENAME);
  assertEquals(5,MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(),TABLENAME));
  Thread.sleep(5000);
  m.normalizeRegions();
  while (MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(),TABLENAME) > 4) {
    LOG.info("Waiting for normalization merge to complete");
    Thread.sleep(100);
  }
  assertEquals(4,MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(),TABLENAME));
  admin.disableTable(TABLENAME);
  admin.deleteTable(TABLENAME);
}
