{
  HeapMemoryManager heapMemoryManager=null;
  BlockCacheStub blockCache=new BlockCacheStub((long)(maxHeapSize * 0.4));
  MemstoreFlusherStub memStoreFlusher=new MemstoreFlusherStub((long)(maxHeapSize * 0.3));
  Configuration conf=HBaseConfiguration.create();
  conf.setFloat(HeapMemoryManager.MEMSTORE_SIZE_MAX_RANGE_KEY,0.7f);
  conf.setFloat(HeapMemoryManager.MEMSTORE_SIZE_MIN_RANGE_KEY,0.1f);
  conf.setFloat(HeapMemoryManager.BLOCK_CACHE_SIZE_MAX_RANGE_KEY,0.7f);
  conf.setFloat(HeapMemoryManager.BLOCK_CACHE_SIZE_MIN_RANGE_KEY,0.1f);
  conf.setInt(DefaultHeapMemoryTuner.NUM_PERIODS_TO_IGNORE,0);
  conf.setFloat(HeapMemorySizeUtil.MEMSTORE_SIZE_KEY,0.4F);
  conf.setFloat(HConstants.HFILE_BLOCK_CACHE_SIZE_KEY,0.3F);
  conf.setFloat(HConstants.BUCKET_CACHE_SIZE_KEY,0.1F);
  conf.set(HConstants.BUCKET_CACHE_IOENGINE_KEY,"heap");
  conf.setLong(HeapMemoryManager.HBASE_RS_HEAP_MEMORY_TUNER_PERIOD,1000);
  conf.setClass(HeapMemoryManager.HBASE_RS_HEAP_MEMORY_TUNER_CLASS,CustomHeapMemoryTuner.class,HeapMemoryTuner.class);
  try {
    heapMemoryManager=new HeapMemoryManager(blockCache,memStoreFlusher,new RegionServerStub(conf),new RegionServerAccountingStub());
    fail("Should have failed as the collective heap memory need is above 80%");
  }
 catch (  Exception e) {
  }
  conf.setFloat(HeapMemoryManager.MEMSTORE_SIZE_MAX_RANGE_KEY,0.6f);
  conf.setFloat(HeapMemoryManager.BLOCK_CACHE_SIZE_MAX_RANGE_KEY,0.6f);
  heapMemoryManager=new HeapMemoryManager(blockCache,memStoreFlusher,new RegionServerStub(conf),new RegionServerAccountingStub());
  long oldMemstoreSize=memStoreFlusher.memstoreSize;
  long oldBlockCacheSize=blockCache.maxSize;
  final ChoreService choreService=new ChoreService("TEST_SERVER_NAME");
  heapMemoryManager.start(choreService);
  CustomHeapMemoryTuner.memstoreSize=0.4f;
  CustomHeapMemoryTuner.blockCacheSize=0.4f;
  Thread.sleep(1500);
  assertEquals(oldMemstoreSize,memStoreFlusher.memstoreSize);
  assertEquals(oldBlockCacheSize,blockCache.maxSize);
  CustomHeapMemoryTuner.memstoreSize=0.1f;
  CustomHeapMemoryTuner.blockCacheSize=0.5f;
  Thread.sleep(1500);
  assertHeapSpace(0.1f,memStoreFlusher.memstoreSize);
  assertHeapSpace(0.5f,blockCache.maxSize);
}
