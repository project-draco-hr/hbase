{
  Lock lock=readWriteLock.readLock();
  lock.lock();
  try {
    if (closed) {
      return;
    }
    mrb.addGauge(Interns.info(regionNamePrefix + MetricsRegionServerSource.STORE_COUNT,MetricsRegionServerSource.STORE_COUNT_DESC),this.regionWrapper.getNumStores());
    mrb.addGauge(Interns.info(regionNamePrefix + MetricsRegionServerSource.STOREFILE_COUNT,MetricsRegionServerSource.STOREFILE_COUNT_DESC),this.regionWrapper.getNumStoreFiles());
    mrb.addGauge(Interns.info(regionNamePrefix + MetricsRegionServerSource.MEMSTORE_SIZE,MetricsRegionServerSource.MEMSTORE_SIZE_DESC),this.regionWrapper.getMemstoreSize());
    mrb.addGauge(Interns.info(regionNamePrefix + MetricsRegionServerSource.STOREFILE_SIZE,MetricsRegionServerSource.STOREFILE_SIZE_DESC),this.regionWrapper.getStoreFileSize());
    mrb.addCounter(Interns.info(regionNamePrefix + MetricsRegionSource.COMPACTIONS_COMPLETED_COUNT,MetricsRegionSource.COMPACTIONS_COMPLETED_DESC),this.regionWrapper.getNumCompactionsCompleted());
    mrb.addCounter(Interns.info(regionNamePrefix + MetricsRegionSource.NUM_BYTES_COMPACTED_COUNT,MetricsRegionSource.NUM_BYTES_COMPACTED_DESC),this.regionWrapper.getNumBytesCompacted());
    mrb.addCounter(Interns.info(regionNamePrefix + MetricsRegionSource.NUM_FILES_COMPACTED_COUNT,MetricsRegionSource.NUM_FILES_COMPACTED_DESC),this.regionWrapper.getNumFilesCompacted());
    mrb.addCounter(Interns.info(regionNamePrefix + MetricsRegionServerSource.READ_REQUEST_COUNT,MetricsRegionServerSource.READ_REQUEST_COUNT_DESC),this.regionWrapper.getReadRequestCount());
    mrb.addCounter(Interns.info(regionNamePrefix + MetricsRegionServerSource.WRITE_REQUEST_COUNT,MetricsRegionServerSource.WRITE_REQUEST_COUNT_DESC),this.regionWrapper.getWriteRequestCount());
    for (    Map.Entry<String,DescriptiveStatistics> entry : this.regionWrapper.getCoprocessorExecutionStatistics().entrySet()) {
      DescriptiveStatistics ds=entry.getValue();
      mrb.addGauge(Interns.info(regionNamePrefix + " " + entry.getKey()+ " "+ MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS,MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "Min: "),ds.getMin() / 1000);
      mrb.addGauge(Interns.info(regionNamePrefix + " " + entry.getKey()+ " "+ MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS,MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "Mean: "),ds.getMean() / 1000);
      mrb.addGauge(Interns.info(regionNamePrefix + " " + entry.getKey()+ " "+ MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS,MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "Max: "),ds.getMax() / 1000);
      mrb.addGauge(Interns.info(regionNamePrefix + " " + entry.getKey()+ " "+ MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS,MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "90th percentile: "),ds.getPercentile(90d) / 1000);
      mrb.addGauge(Interns.info(regionNamePrefix + " " + entry.getKey()+ " "+ MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS,MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "95th percentile: "),ds.getPercentile(95d) / 1000);
      mrb.addGauge(Interns.info(regionNamePrefix + " " + entry.getKey()+ " "+ MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS,MetricsRegionSource.COPROCESSOR_EXECUTION_STATISTICS_DESC + "99th percentile: "),ds.getPercentile(99d) / 1000);
    }
  }
  finally {
    lock.unlock();
  }
}
