{
  Filter bf=new CountingBloomFilter(8,2,Hash.JENKINS_HASH);
  Key key=new StringKey("toto");
  Key k2=new StringKey("lulu");
  Key k3=new StringKey("mama");
  bf.add(key);
  bf.add(k2);
  bf.add(k3);
  assertTrue(bf.membershipTest(key));
  assertFalse(bf.membershipTest(k2));
  assertFalse(bf.membershipTest(new StringKey("xyzzy")));
  assertFalse(bf.membershipTest(new StringKey("abcd")));
  ((CountingBloomFilter)bf).delete(key);
  assertFalse(bf.membershipTest(key));
  Filter bf2=new CountingBloomFilter(8,2,Hash.JENKINS_HASH);
  bf2.add(key);
  bf.or(bf2);
  assertTrue(bf.membershipTest(key));
  assertTrue(bf.membershipTest(k2));
  assertFalse(bf.membershipTest(new StringKey("xyzzy")));
  assertFalse(bf.membershipTest(new StringKey("abcd")));
  for (int i=0; i < 16; i++) {
    bf.add(key);
    assertTrue(bf.membershipTest(key));
  }
  CountingBloomFilter bf3=new CountingBloomFilter(4,2,Hash.JENKINS_HASH);
  for (int i=0; i < 8; i++) {
    bf3.add(key);
    bf3.add(k2);
    assertEquals(bf3.approximateCount(key),i + 1);
    assertEquals(bf3.approximateCount(k2),i + 1);
  }
  for (int i=8; i < 15; i++) {
    bf3.add(key);
    assertTrue(bf3.approximateCount(key) >= (i + 1));
    assertEquals(bf3.approximateCount(k2),8);
    assertEquals(bf3.approximateCount(k3),0);
  }
}
