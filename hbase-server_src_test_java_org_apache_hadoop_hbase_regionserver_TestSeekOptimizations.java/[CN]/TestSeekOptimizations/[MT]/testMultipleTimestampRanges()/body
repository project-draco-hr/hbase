{
  StoreFileScanner.instrument();
  region=TEST_UTIL.createTestRegion("testMultipleTimestampRanges",new HColumnDescriptor(FAMILY).setCompressionType(comprAlgo).setBloomFilterType(bloomType).setMaxVersions(3));
  final long latestDelTS=USE_MANY_STORE_FILES ? 1397 : -1;
  createTimestampRange(1,50,-1);
  createTimestampRange(51,100,-1);
  if (USE_MANY_STORE_FILES) {
    createTimestampRange(100,500,127);
    createTimestampRange(900,1300,-1);
    createTimestampRange(1301,2500,latestDelTS);
    createTimestampRange(2502,2598,-1);
    createTimestampRange(2599,2999,-1);
  }
  prepareExpectedKVs(latestDelTS);
  for (  int[] columnArr : COLUMN_SETS) {
    for (    int[] rowRange : ROW_RANGES) {
      for (      int maxVersions : MAX_VERSIONS_VALUES) {
        for (        boolean lazySeekEnabled : new boolean[]{false,true}) {
          testScan(columnArr,lazySeekEnabled,rowRange[0],rowRange[1],maxVersions);
        }
      }
    }
  }
  final double seekSavings=1 - totalSeekLazy * 1.0 / totalSeekDiligent;
  System.err.println("For bloom=" + bloomType + ", compr="+ comprAlgo+ " total seeks without optimization: "+ totalSeekDiligent+ ", with optimization: "+ totalSeekLazy+ " ("+ String.format("%.2f%%",totalSeekLazy * 100.0 / totalSeekDiligent)+ "), savings: "+ String.format("%.2f%%",100.0 * seekSavings)+ "\n");
  final double expectedSeekSavings=0.0;
  assertTrue("Lazy seek is only saving " + String.format("%.2f%%",seekSavings * 100) + " seeks but should "+ "save at least "+ String.format("%.2f%%",expectedSeekSavings * 100),seekSavings >= expectedSeekSavings);
}
