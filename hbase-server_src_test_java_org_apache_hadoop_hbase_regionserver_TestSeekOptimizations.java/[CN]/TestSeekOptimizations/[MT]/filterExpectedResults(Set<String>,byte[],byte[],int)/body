{
  final List<KeyValue> filteredKVs=new ArrayList<KeyValue>();
  final Map<String,Integer> verCount=new HashMap<String,Integer>();
  for (  KeyValue kv : expectedKVs) {
    if (startRow.length > 0 && Bytes.compareTo(kv.getBuffer(),kv.getRowOffset(),kv.getRowLength(),startRow,0,startRow.length) < 0) {
      continue;
    }
    if (endRow.length > 0 && Bytes.compareTo(kv.getBuffer(),kv.getRowOffset(),kv.getRowLength(),endRow,0,endRow.length) > 0) {
      continue;
    }
    if (!qualSet.isEmpty() && (Bytes.compareTo(kv.getBuffer(),kv.getFamilyOffset(),kv.getFamilyLength(),FAMILY_BYTES,0,FAMILY_BYTES.length) != 0 || !qualSet.contains(Bytes.toString(kv.getQualifier())))) {
      continue;
    }
    final String rowColStr=Bytes.toStringBinary(kv.getRow()) + "/" + Bytes.toStringBinary(kv.getFamily())+ ":"+ Bytes.toStringBinary(kv.getQualifier());
    final Integer curNumVer=verCount.get(rowColStr);
    final int newNumVer=curNumVer != null ? (curNumVer + 1) : 1;
    if (newNumVer <= maxVersions) {
      filteredKVs.add(kv);
      verCount.put(rowColStr,newNumVer);
    }
  }
  return filteredKVs;
}
