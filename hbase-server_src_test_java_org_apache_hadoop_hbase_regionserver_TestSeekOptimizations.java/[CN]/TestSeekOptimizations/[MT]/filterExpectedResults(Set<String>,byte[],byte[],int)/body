{
  final List<Cell> filteredKVs=new ArrayList<Cell>();
  final Map<String,Integer> verCount=new HashMap<String,Integer>();
  for (  Cell kv : expectedKVs) {
    if (startRow.length > 0 && Bytes.compareTo(kv.getRowArray(),kv.getRowOffset(),kv.getRowLength(),startRow,0,startRow.length) < 0) {
      continue;
    }
    if (endRow.length > 0 && Bytes.compareTo(kv.getRowArray(),kv.getRowOffset(),kv.getRowLength(),endRow,0,endRow.length) > 0) {
      continue;
    }
    if (!qualSet.isEmpty() && (!CellUtil.matchingFamily(kv,FAMILY_BYTES) || !qualSet.contains(Bytes.toString(CellUtil.cloneQualifier(kv))))) {
      continue;
    }
    final String rowColStr=Bytes.toStringBinary(CellUtil.cloneRow(kv)) + "/" + Bytes.toStringBinary(CellUtil.cloneFamily(kv))+ ":"+ Bytes.toStringBinary(CellUtil.cloneQualifier(kv));
    final Integer curNumVer=verCount.get(rowColStr);
    final int newNumVer=curNumVer != null ? (curNumVer + 1) : 1;
    if (newNumVer <= maxVersions) {
      filteredKVs.add(kv);
      verCount.put(rowColStr,newNumVer);
    }
  }
  return filteredKVs;
}
