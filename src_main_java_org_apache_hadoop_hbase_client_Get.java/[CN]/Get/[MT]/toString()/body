{
  StringBuilder sb=new StringBuilder();
  sb.append("row=");
  sb.append(Bytes.toStringBinary(this.row));
  sb.append(", maxVersions=");
  sb.append("").append(this.maxVersions);
  sb.append(", cacheBlocks=");
  sb.append(this.cacheBlocks);
  sb.append(", timeRange=");
  sb.append("[").append(this.tr.getMin()).append(",");
  sb.append(this.tr.getMax()).append(")");
  sb.append(", families=");
  if (this.familyMap.size() == 0) {
    sb.append("ALL");
    return sb.toString();
  }
  boolean moreThanOne=false;
  for (  Map.Entry<byte[],NavigableSet<byte[]>> entry : this.familyMap.entrySet()) {
    if (moreThanOne) {
      sb.append("), ");
    }
 else {
      moreThanOne=true;
      sb.append("{");
    }
    sb.append("(family=");
    sb.append(Bytes.toString(entry.getKey()));
    sb.append(", columns=");
    if (entry.getValue() == null) {
      sb.append("ALL");
    }
 else {
      sb.append("{");
      boolean moreThanOneB=false;
      for (      byte[] column : entry.getValue()) {
        if (moreThanOneB) {
          sb.append(", ");
        }
 else {
          moreThanOneB=true;
        }
        sb.append(Bytes.toStringBinary(column));
      }
      sb.append("}");
    }
  }
  sb.append("}");
  return sb.toString();
}
