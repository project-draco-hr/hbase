{
  int version=in.readByte();
  if (version > GET_VERSION) {
    throw new IOException("unsupported version");
  }
  this.row=Bytes.readByteArray(in);
  this.lockId=in.readLong();
  this.maxVersions=in.readInt();
  boolean hasFilter=in.readBoolean();
  if (hasFilter) {
    this.filter=(Filter)createForName(Bytes.toString(Bytes.readByteArray(in)));
    this.filter.readFields(in);
  }
  this.cacheBlocks=in.readBoolean();
  this.tr=new TimeRange();
  tr.readFields(in);
  int numFamilies=in.readInt();
  this.familyMap=new TreeMap<byte[],NavigableSet<byte[]>>(Bytes.BYTES_COMPARATOR);
  for (int i=0; i < numFamilies; i++) {
    byte[] family=Bytes.readByteArray(in);
    boolean hasColumns=in.readBoolean();
    NavigableSet<byte[]> set=null;
    if (hasColumns) {
      int numColumns=in.readInt();
      set=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
      for (int j=0; j < numColumns; j++) {
        byte[] qualifier=Bytes.readByteArray(in);
        set.add(qualifier);
      }
    }
    this.familyMap.put(family,set);
  }
  readAttributes(in);
}
