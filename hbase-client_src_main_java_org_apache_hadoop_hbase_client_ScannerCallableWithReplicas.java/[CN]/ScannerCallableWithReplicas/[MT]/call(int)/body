{
  if (currentScannerCallable != null && currentScannerCallable.closed) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("Closing scanner id=" + currentScannerCallable.scannerId);
    }
    Result[] r=currentScannerCallable.call(timeout);
    currentScannerCallable=null;
    return r;
  }
  RegionLocations rl=RpcRetryingCallerWithReadReplicas.getRegionLocations(true,RegionReplicaUtil.DEFAULT_REPLICA_ID,cConnection,tableName,currentScannerCallable.getRow());
  ResultBoundedCompletionService<Pair<Result[],ScannerCallable>> cs=new ResultBoundedCompletionService<Pair<Result[],ScannerCallable>>(RpcRetryingCallerFactory.instantiate(ScannerCallableWithReplicas.this.conf),pool,rl.size() * 5);
  AtomicBoolean done=new AtomicBoolean(false);
  replicaSwitched.set(false);
  addCallsForCurrentReplica(cs,rl);
  int startIndex=0;
  try {
    Future<Pair<Result[],ScannerCallable>> f=cs.poll(timeBeforeReplicas,TimeUnit.MICROSECONDS);
    if (f != null) {
      Pair<Result[],ScannerCallable> r=f.get();
      if (r != null && r.getSecond() != null) {
        updateCurrentlyServingReplica(r.getSecond(),r.getFirst(),done,pool);
      }
      return r == null ? null : r.getFirst();
    }
  }
 catch (  ExecutionException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Scan with primary region returns " + e.getCause());
    }
    if ((rl.size() == 1) || (scan.getConsistency() == Consistency.STRONG)) {
      RpcRetryingCallerWithReadReplicas.throwEnrichedException(e,retries);
    }
    startIndex=1;
  }
catch (  CancellationException e) {
    throw new InterruptedIOException(e.getMessage());
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException(e.getMessage());
  }
  int endIndex=rl.size();
  if (scan.getConsistency() == Consistency.STRONG) {
    endIndex=1;
  }
 else {
    addCallsForOtherReplicas(cs,rl,0,rl.size() - 1);
  }
  try {
    Future<Pair<Result[],ScannerCallable>> f=cs.pollForFirstSuccessfullyCompletedTask(timeout,TimeUnit.MILLISECONDS,startIndex,endIndex);
    if (f == null) {
      throw new IOException("Failed to get result within timeout, timeout=" + timeout + "ms");
    }
    Pair<Result[],ScannerCallable> r=f.get();
    if (r != null && r.getSecond() != null) {
      updateCurrentlyServingReplica(r.getSecond(),r.getFirst(),done,pool);
    }
    return r == null ? null : r.getFirst();
  }
 catch (  ExecutionException e) {
    RpcRetryingCallerWithReadReplicas.throwEnrichedException(e,retries);
  }
catch (  CancellationException e) {
    throw new InterruptedIOException(e.getMessage());
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException(e.getMessage());
  }
 finally {
    cs.cancelAll();
  }
  LOG.error("Imposible? Arrive at an unreachable line...");
  throw new IOException("Imposible? Arrive at an unreachable line...");
}
