{
  if (this.readOnly && this.migrationNeeded) {
    return;
  }
  Path hbaseRootDir=new Path(conf.get(HConstants.HBASE_DIR));
  boolean pre020=FSUtils.isPre020FileLayout(fs,hbaseRootDir);
  if (pre020) {
    LOG.info("Checking pre020 filesystem is major compacted");
    if (!FSUtils.isMajorCompactedPre020(fs,hbaseRootDir)) {
      String msg="All tables must be major compacted before migration." + MIGRATION_LINK;
      System.out.println(msg);
      throw new IOException(msg);
    }
    rewrite(hbaseRootDir);
  }
  LOG.info("Checking filesystem is major compacted");
  if (!FSUtils.isMajorCompacted(fs,hbaseRootDir)) {
    LOG.info("Checking filesystem is major compacted");
    if (!FSUtils.isMajorCompacted(fs,hbaseRootDir)) {
      String msg="All tables must be major compacted before migration." + MIGRATION_LINK;
      System.out.println(msg);
      throw new IOException(msg);
    }
  }
  final MetaUtils utils=new MetaUtils(this.conf);
  try {
    rewriteHRegionInfo(utils.getRootRegion().getRegionInfo());
    utils.scanRootRegion(new MetaUtils.ScannerListener(){
      public boolean processRow(      HRegionInfo info) throws IOException {
        if (readOnly && !migrationNeeded) {
          migrationNeeded=true;
          return false;
        }
        rewriteHRegionInfo(utils.getRootRegion(),info);
        return true;
      }
    }
);
    LOG.info("TODO: Note on make sure not using old hbase-default.xml");
    LOG.info("TODO: Note on zookeeper config. before starting:");
  }
  finally {
    utils.shutdown();
  }
}
