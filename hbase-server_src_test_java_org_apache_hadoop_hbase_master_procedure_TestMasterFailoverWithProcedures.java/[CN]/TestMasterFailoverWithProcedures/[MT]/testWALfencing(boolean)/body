{
  final ProcedureStore procStore=getMasterProcedureExecutor().getStore();
  assertTrue("expected WALStore for this test",procStore instanceof WALProcedureStore);
  HMaster firstMaster=UTIL.getHBaseCluster().getMaster();
  firstMaster.getConfiguration().setLong("hbase.procedure.store.wal.roll.threshold",1);
  HMaster backupMaster3=Mockito.mock(HMaster.class);
  Mockito.doReturn(firstMaster.getConfiguration()).when(backupMaster3).getConfiguration();
  Mockito.doReturn(true).when(backupMaster3).isActiveMaster();
  final WALProcedureStore procStore2=new WALProcedureStore(firstMaster.getConfiguration(),firstMaster.getMasterFileSystem().getFileSystem(),((WALProcedureStore)procStore).getLogDir(),new MasterProcedureEnv.WALStoreLeaseRecovery(backupMaster3));
  LOG.info("Starting new WALProcedureStore");
  procStore2.start(1);
  procStore2.recoverLease();
  if (walRolls) {
    LOG.info("Inserting into second WALProcedureStore, causing WAL rolls");
    for (int i=0; i < 512; i++) {
      Procedure proc2=new TestProcedure(i);
      procStore2.insert(proc2,null);
      procStore2.delete(proc2.getProcId());
    }
  }
  LOG.info("Inserting into first WALProcedureStore");
  try {
    procStore.insert(new TestProcedure(11),null);
    fail("Inserting into Procedure Store should have failed");
  }
 catch (  Exception ex) {
    LOG.info("Received expected exception",ex);
  }
}
