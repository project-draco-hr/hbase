{
  LOG.info("testHFileMultiSlaveReplication");
  int numClusters=3;
  Table[] htables=null;
  try {
    startMiniClusters(numClusters);
    createTableOnClusters(table);
    addPeer("1",0,1);
    htables=getHTablesOnClusters(tableName);
    byte[][][] hfileRanges=new byte[][][]{new byte[][]{Bytes.toBytes("mmmm"),Bytes.toBytes("oooo")},new byte[][]{Bytes.toBytes("ppp"),Bytes.toBytes("rrr")}};
    int numOfRows=100;
    int[] expectedCounts=new int[]{hfileRanges.length * numOfRows,hfileRanges.length * numOfRows};
    loadAndValidateHFileReplication("testHFileCyclicReplication_0",0,new int[]{1},row,famName,htables,hfileRanges,numOfRows,expectedCounts,true);
    assertEquals(0,utilities[2].countRows(htables[2]));
    rollWALAndWait(utilities[0],htables[0].getName(),row);
    addPeer("2",0,2);
    hfileRanges=new byte[][][]{new byte[][]{Bytes.toBytes("ssss"),Bytes.toBytes("uuuu")},new byte[][]{Bytes.toBytes("vvv"),Bytes.toBytes("xxx")}};
    numOfRows=200;
    int[] newExpectedCounts=new int[]{hfileRanges.length * numOfRows + expectedCounts[0],hfileRanges.length * numOfRows + expectedCounts[1],hfileRanges.length * numOfRows};
    loadAndValidateHFileReplication("testHFileCyclicReplication_1",0,new int[]{1,2},row,famName,htables,hfileRanges,numOfRows,newExpectedCounts,true);
  }
  finally {
    close(htables);
    shutDownMiniClusters();
  }
}
