{
  testRowsFilteredMetric(baseScan,null,0);
  Filter filter=new RowFilter(CompareOp.EQUAL,new BinaryComparator("xyz".getBytes()));
  testRowsFilteredMetric(baseScan,filter,ROWS.length);
  filter=new FirstKeyOnlyFilter();
  testRowsFilteredMetric(baseScan,filter,0);
  filter=new ColumnPrefixFilter(QUALIFIERS[0]);
  testRowsFilteredMetric(baseScan,filter,0);
  filter=new ColumnPrefixFilter("xyz".getBytes());
  testRowsFilteredMetric(baseScan,filter,ROWS.length);
  filter=new SingleColumnValueFilter(FAMILIES[0],QUALIFIERS[0],CompareOp.EQUAL,VALUE);
  testRowsFilteredMetric(baseScan,filter,0);
  filter=new SingleColumnValueFilter(FAMILIES[0],QUALIFIERS[0],CompareOp.NOT_EQUAL,VALUE);
  testRowsFilteredMetric(baseScan,filter,ROWS.length);
  List<Filter> filters=new ArrayList<Filter>();
  filters.add(new RowFilter(CompareOp.EQUAL,new BinaryComparator(ROWS[0])));
  filters.add(new RowFilter(CompareOp.EQUAL,new BinaryComparator(ROWS[3])));
  int numberOfMatchingRowFilters=filters.size();
  filter=new FilterList(Operator.MUST_PASS_ONE,filters);
  testRowsFilteredMetric(baseScan,filter,ROWS.length - numberOfMatchingRowFilters);
  filters.clear();
  for (int family=0; family < FAMILIES.length; family++) {
    for (int qualifier=0; qualifier < QUALIFIERS.length; qualifier++) {
      filters.add(new SingleColumnValueExcludeFilter(FAMILIES[family],QUALIFIERS[qualifier],CompareOp.EQUAL,VALUE));
    }
  }
  filter=new FilterList(Operator.MUST_PASS_ONE,filters);
  testRowsFilteredMetric(baseScan,filter,ROWS.length);
}
