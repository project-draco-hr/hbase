{
  byte[][] cols={Bytes.toBytes(ANCHORNUM + "[0-9]+"),CONTENTS_BASIC};
  long startTime=System.currentTimeMillis();
  InternalScanner s=r.getScanner(cols,HConstants.EMPTY_START_ROW,System.currentTimeMillis(),null);
  try {
    int contentsFetched=0;
    int anchorFetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<byte[],byte[]> curVals=new TreeMap<byte[],byte[]>(Bytes.BYTES_COMPARATOR);
    int k=0;
    while (s.next(curKey,curVals)) {
      for (Iterator<byte[]> it=curVals.keySet().iterator(); it.hasNext(); ) {
        byte[] col=it.next();
        byte[] val=curVals.get(col);
        String curval=Bytes.toString(val);
        if (Bytes.compareTo(col,CONTENTS_BASIC) == 0) {
          assertTrue("Error at:" + curKey.getRow() + "/"+ curKey.getTimestamp()+ ", Value for "+ col+ " should start with: "+ CONTENTSTR+ ", but was fetched as: "+ curval,curval.startsWith(CONTENTSTR));
          contentsFetched++;
        }
 else         if (Bytes.toString(col).startsWith(ANCHORNUM)) {
          assertTrue("Error at:" + curKey.getRow() + "/"+ curKey.getTimestamp()+ ", Value for "+ Bytes.toString(col)+ " should start with: "+ ANCHORSTR+ ", but was fetched as: "+ curval,curval.startsWith(ANCHORSTR));
          anchorFetched++;
        }
 else {
          LOG.info("UNEXPECTED COLUMN " + col);
        }
      }
      curVals.clear();
      k++;
    }
    assertEquals("Expected " + NUM_VALS + " "+ CONTENTS_BASIC+ " values, but fetched "+ contentsFetched,NUM_VALS,contentsFetched);
    assertEquals("Expected " + NUM_VALS + " "+ ANCHORNUM+ " values, but fetched "+ anchorFetched,NUM_VALS,anchorFetched);
    LOG.info("Scanned " + NUM_VALS + " rows from disk. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
  finally {
    s.close();
  }
  cols=new byte[][]{CONTENTS_FIRSTCOL,ANCHOR_SECONDCOL};
  startTime=System.currentTimeMillis();
  s=r.getScanner(cols,HConstants.EMPTY_START_ROW,System.currentTimeMillis(),null);
  try {
    int numFetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<byte[],byte[]> curVals=new TreeMap<byte[],byte[]>(Bytes.BYTES_COMPARATOR);
    int k=0;
    while (s.next(curKey,curVals)) {
      for (Iterator<byte[]> it=curVals.keySet().iterator(); it.hasNext(); ) {
        byte[] col=it.next();
        byte[] val=curVals.get(col);
        int curval=Integer.parseInt(new String(val,HConstants.UTF8_ENCODING).trim());
        for (int j=0; j < cols.length; j++) {
          if (Bytes.compareTo(col,cols[j]) == 0) {
            assertEquals("Value for " + col + " should be: "+ k+ ", but was fetched as: "+ curval,curval,k);
            numFetched++;
          }
        }
      }
      curVals.clear();
      k++;
    }
    assertEquals("Inserted " + numInserted + " values, but fetched "+ numFetched,numInserted,numFetched);
    LOG.info("Scanned " + (numFetched / 2) + " rows from disk. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
  finally {
    s.close();
  }
  cols=new byte[][]{Bytes.toBytes("anchor:")};
  startTime=System.currentTimeMillis();
  s=r.getScanner(cols,HConstants.EMPTY_START_ROW,System.currentTimeMillis(),null);
  try {
    int fetched=0;
    HStoreKey curKey=new HStoreKey();
    TreeMap<byte[],byte[]> curVals=new TreeMap<byte[],byte[]>(Bytes.BYTES_COMPARATOR);
    while (s.next(curKey,curVals)) {
      for (Iterator<byte[]> it=curVals.keySet().iterator(); it.hasNext(); ) {
        it.next();
        fetched++;
      }
      curVals.clear();
    }
    assertEquals("Inserted " + (NUM_VALS + numInserted / 2) + " values, but fetched "+ fetched,(NUM_VALS + numInserted / 2),fetched);
    LOG.info("Scanned " + fetched + " rows from disk. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  }
  finally {
    s.close();
  }
  LOG.info("read completed.");
}
