{
  final int threadCount=10;
  final int lockCount=10;
  List<Thread> threads=new ArrayList<Thread>(threadCount);
  for (int i=0; i < threadCount; i++) {
    threads.add(new Thread(Integer.toString(i)){
      @Override public void run(){
        long[] lockids=new long[lockCount];
        for (int i=0; i < lockCount; i++) {
          try {
            Text rowid=new Text(Integer.toString(i));
            lockids[i]=r.obtainRowLock(rowid);
            rowid.equals(r.getRowFromLock(lockids[i]));
            LOG.debug(getName() + " locked " + rowid.toString());
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
        LOG.debug(getName() + " set " + Integer.toString(lockCount)+ " locks");
        for (int i=lockCount - 1; i >= 0; i--) {
          r.releaseRowLock(r.getRowFromLock(lockids[i]));
          LOG.debug(getName() + " unlocked " + i);
        }
        LOG.debug(getName() + " released " + Integer.toString(lockCount)+ " locks");
      }
    }
);
  }
  for (  Thread t : threads) {
    t.start();
  }
  for (  Thread t : threads) {
    while (t.isAlive()) {
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  LOG.info("locks completed.");
}
