{
  long startTime=System.currentTimeMillis();
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    BatchUpdate batchUpdate=new BatchUpdate(Bytes.toBytes("row_" + k),System.currentTimeMillis());
    batchUpdate.put(CONTENTS_BASIC,(CONTENTSTR + k).getBytes(HConstants.UTF8_ENCODING));
    batchUpdate.put(Bytes.toBytes(ANCHORNUM + k),(ANCHORSTR + k).getBytes(HConstants.UTF8_ENCODING));
    region.commit(batchUpdate);
  }
  LOG.info("Write " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  startTime=System.currentTimeMillis();
  region.flushcache();
  LOG.info("Cache flush elapsed time: " + ((System.currentTimeMillis() - startTime) / 1000.0));
  startTime=System.currentTimeMillis();
  byte[] collabel=null;
  for (int k=FIRST_ROW; k <= NUM_VALS; k++) {
    String rowlabelStr="row_" + k;
    byte[] rowlabel=Bytes.toBytes(rowlabelStr);
    if (k % 100 == 0)     LOG.info(Bytes.toString(rowlabel));
    byte[] bodydata=region.get(rowlabel,CONTENTS_BASIC).getValue();
    assertNotNull(bodydata);
    String bodystr=new String(bodydata,HConstants.UTF8_ENCODING).trim();
    String teststr=CONTENTSTR + k;
    assertEquals("Incorrect value for key: (" + rowlabelStr + ","+ CONTENTS_BASIC_STR+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",bodystr,teststr);
    String collabelStr=ANCHORNUM + k;
    collabel=Bytes.toBytes(collabelStr);
    bodydata=region.get(rowlabel,collabel).getValue();
    bodystr=new String(bodydata,HConstants.UTF8_ENCODING).trim();
    teststr=ANCHORSTR + k;
    assertEquals("Incorrect value for key: (" + rowlabelStr + ","+ collabelStr+ "), expected: '"+ teststr+ "' got: '"+ bodystr+ "'",bodystr,teststr);
  }
  LOG.info("Read " + NUM_VALS + " rows. Elapsed time: "+ ((System.currentTimeMillis() - startTime) / 1000.0));
  LOG.info("basic completed.");
}
