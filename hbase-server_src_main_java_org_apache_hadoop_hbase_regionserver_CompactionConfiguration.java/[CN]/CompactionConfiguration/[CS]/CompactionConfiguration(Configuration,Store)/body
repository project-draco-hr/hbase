{
  this.conf=conf;
  this.store=store;
  String strPrefix="hbase.hstore.compaction.";
  maxCompactSize=conf.getLong(strPrefix + "max.size",Long.MAX_VALUE);
  minCompactSize=conf.getLong(strPrefix + "min.size",store.getHRegion().memstoreFlushSize);
  minFilesToCompact=Math.max(2,conf.getInt(strPrefix + "min",conf.getInt("hbase.hstore.compactionThreshold",3)));
  maxFilesToCompact=conf.getInt(strPrefix + "max",10);
  compactionRatio=conf.getFloat(strPrefix + "ratio",1.2F);
  offPeekCompactionRatio=conf.getFloat(strPrefix + "ratio.offpeak",5.0F);
  offPeakStartHour=conf.getInt("hbase.offpeak.start.hour",-1);
  offPeakEndHour=conf.getInt("hbase.offpeak.end.hour",-1);
  if (!isValidHour(offPeakStartHour) || !isValidHour(offPeakEndHour)) {
    if (!(offPeakStartHour == -1 && offPeakEndHour == -1)) {
      LOG.warn("Ignoring invalid start/end hour for peak hour : start = " + this.offPeakStartHour + " end = "+ this.offPeakEndHour+ ". Valid numbers are [0-23]");
    }
    this.offPeakStartHour=this.offPeakEndHour=-1;
  }
  throttlePoint=conf.getLong("hbase.regionserver.thread.compaction.throttle",2 * maxFilesToCompact * store.getHRegion().memstoreFlushSize);
  shouldDeleteExpired=conf.getBoolean("hbase.store.delete.expired.storefile",true);
  majorCompactionPeriod=conf.getLong(HConstants.MAJOR_COMPACTION_PERIOD,1000 * 60 * 60* 24);
  majorCompactionJitter=conf.getFloat("hbase.hregion.majorcompaction.jitter",0.20F);
  LOG.info("Compaction configuration " + this.toString());
}
