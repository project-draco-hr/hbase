{
  put(incommon,T0);
  put(incommon,T1);
  put(incommon,T2);
  put(incommon);
  assertVersions(incommon,new long[]{HConstants.LATEST_TIMESTAMP,T2,T1});
  delete(incommon);
  assertVersions(incommon,new long[]{T2,T1,T0});
  flusher.flushcache();
  assertVersions(incommon,new long[]{T2,T1,T0});
  put(incommon);
  assertVersions(incommon,new long[]{HConstants.LATEST_TIMESTAMP,T2,T1});
  delete(incommon,T2);
  assertVersions(incommon,new long[]{HConstants.LATEST_TIMESTAMP,T1,T0});
  flusher.flushcache();
  assertVersions(incommon,new long[]{HConstants.LATEST_TIMESTAMP,T1,T0});
  put(incommon,T2);
  delete(incommon,T1);
  put(incommon,T1);
  Delete delete=new Delete(ROW);
  byte[][] famAndQf=KeyValue.parseColumn(COLUMN);
  if (famAndQf[1].length == 0) {
    delete.deleteFamily(famAndQf[0],T2);
  }
 else {
    delete.deleteColumns(famAndQf[0],famAndQf[1],T2);
  }
  incommon.delete(delete,null,true);
  assertOnlyLatest(incommon,HConstants.LATEST_TIMESTAMP);
  flusher.flushcache();
  assertOnlyLatest(incommon,HConstants.LATEST_TIMESTAMP);
}
