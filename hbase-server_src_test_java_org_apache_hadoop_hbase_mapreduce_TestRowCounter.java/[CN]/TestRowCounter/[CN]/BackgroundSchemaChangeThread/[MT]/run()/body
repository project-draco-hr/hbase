{
  final long START_TIME=System.currentTimeMillis();
  final int ONLINE_CHANGE_TIMEOUT=200000;
  HTableDescriptor htd=null;
  try {
    htd=admin.getTableDescriptor(tableName);
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    fail("Fail: Issue pulling table descriptor");
  }
  HColumnDescriptor hcd=null;
  assertTrue(htd != null);
  final int countOfFamilies=htd.getFamilies().size();
  assertTrue(countOfFamilies > 0);
  boolean expectedException=false;
  int numIterations=0;
  while (numIterations < numOnlineChanges) {
    if (System.currentTimeMillis() - START_TIME > ONLINE_CHANGE_TIMEOUT) {
      fail("Fail: Timed out reaching before required snapshot count. Only had " + numIterations + " updates");
    }
    hcd=htd.getFamilies().iterator().next();
    int maxversions=hcd.getMaxVersions();
    int newMaxVersions=maxversions + 1;
    System.out.println("Setting max versions on CF to " + newMaxVersions);
    hcd.setMaxVersions(newMaxVersions);
    final byte[] hcdName=hcd.getName();
    expectedException=false;
    try {
      this.admin.modifyColumn(tableName,hcd);
    }
 catch (    TableNotDisabledException re) {
      expectedException=true;
    }
catch (    IOException e) {
      e.printStackTrace();
      fail("Fail: IO Issue while modifying column");
    }
    assertFalse(expectedException);
    try {
      int EXPECTED_NUM_REGIONS=TEST_UTIL.getHBaseAdmin().getTableRegions(tableName).size();
      assertEquals("The max version count was not updated",newMaxVersions,TestAdmin.waitForColumnSchemasToSettle(TEST_UTIL.getMiniHBaseCluster(),tableName,EXPECTED_NUM_REGIONS).getMaxVersions());
      Thread.sleep(2000);
    }
 catch (    TableNotFoundException e) {
      e.printStackTrace();
      fail("Fail: Table not found.");
    }
catch (    IOException e) {
      e.printStackTrace();
      fail("Fail: IO Issue while modifying column");
    }
catch (    InterruptedException e) {
      LOG.warn("Sleep was interrupted. This is unusual, but not grounds for TF");
      e.printStackTrace();
    }
    numIterations++;
  }
}
