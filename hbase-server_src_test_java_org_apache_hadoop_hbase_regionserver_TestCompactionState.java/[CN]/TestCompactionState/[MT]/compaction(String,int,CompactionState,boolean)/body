{
  TableName table=TableName.valueOf(tableName);
  byte[] family=Bytes.toBytes("family");
  byte[][] families={family,Bytes.add(family,Bytes.toBytes("2")),Bytes.add(family,Bytes.toBytes("3"))};
  Table ht=null;
  try {
    ht=TEST_UTIL.createTable(table,families);
    loadData(ht,families,3000,flushes);
    HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
    List<Region> regions=rs.getOnlineRegions(table);
    int countBefore=countStoreFilesInFamilies(regions,families);
    int countBeforeSingleFamily=countStoreFilesInFamily(regions,family);
    assertTrue(countBefore > 0);
    HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
    if (expectedState == CompactionState.MINOR) {
      if (singleFamily) {
        admin.compact(table.getName(),family);
      }
 else {
        admin.compact(table.getName());
      }
    }
 else {
      if (singleFamily) {
        admin.majorCompact(table.getName(),family);
      }
 else {
        admin.majorCompact(table.getName());
      }
    }
    long curt=System.currentTimeMillis();
    long waitTime=5000;
    long endt=curt + waitTime;
    CompactionState state=admin.getCompactionState(table);
    while (state == CompactionState.NONE && curt < endt) {
      Thread.sleep(10);
      state=admin.getCompactionState(table);
      curt=System.currentTimeMillis();
    }
    if (expectedState != state) {
      for (      Region region : regions) {
        state=region.getCompactionState();
        assertEquals(CompactionState.NONE,state);
      }
    }
 else {
      state=admin.getCompactionState(table);
      while (state != CompactionState.NONE && curt < endt) {
        Thread.sleep(10);
        state=admin.getCompactionState(table);
      }
      assertEquals(CompactionState.NONE,state);
    }
    int countAfter=countStoreFilesInFamilies(regions,families);
    int countAfterSingleFamily=countStoreFilesInFamily(regions,family);
    assertTrue(countAfter < countBefore);
    if (!singleFamily) {
      if (expectedState == CompactionState.MAJOR)       assertTrue(families.length == countAfter);
 else       assertTrue(families.length < countAfter);
    }
 else {
      int singleFamDiff=countBeforeSingleFamily - countAfterSingleFamily;
      assertTrue(singleFamDiff == (countBefore - countAfter));
      if (expectedState == CompactionState.MAJOR) {
        assertTrue(1 == countAfterSingleFamily);
      }
 else {
        assertTrue(1 < countAfterSingleFamily);
      }
    }
  }
  finally {
    if (ht != null) {
      TEST_UTIL.deleteTable(table);
    }
  }
}
