{
  boolean onSameRS=isRegionsOnTheSameServer(env);
  if (!onSameRS) {
    RegionStates regionStates=getAssignmentManager(env).getRegionStates();
    ServerName regionLocation2=regionStates.getRegionServerOfRegion(regionsToMerge[1]);
    RegionLoad loadOfRegionA=getRegionLoad(env,regionLocation,regionsToMerge[0]);
    RegionLoad loadOfRegionB=getRegionLoad(env,regionLocation2,regionsToMerge[1]);
    if (loadOfRegionA != null && loadOfRegionB != null && loadOfRegionA.getRequestsCount() < loadOfRegionB.getRequestsCount()) {
      HRegionInfo tmpRegion=this.regionsToMerge[0];
      this.regionsToMerge[0]=this.regionsToMerge[1];
      this.regionsToMerge[1]=tmpRegion;
      ServerName tmpLocation=regionLocation;
      regionLocation=regionLocation2;
      regionLocation2=tmpLocation;
    }
    long startTime=EnvironmentEdgeManager.currentTime();
    RegionPlan regionPlan=new RegionPlan(regionsToMerge[1],regionLocation2,regionLocation);
    LOG.info("Moving regions to same server for merge: " + regionPlan.toString());
    getAssignmentManager(env).balance(regionPlan);
    do {
      try {
        Thread.sleep(20);
        boolean isRIT=regionStates.isRegionInTransition(regionsToMerge[1]);
        regionLocation2=regionStates.getRegionServerOfRegion(regionsToMerge[1]);
        onSameRS=regionLocation.equals(regionLocation2);
        if (onSameRS || !isRIT) {
          break;
        }
      }
 catch (      InterruptedException e) {
        InterruptedIOException iioe=new InterruptedIOException();
        iioe.initCause(e);
        throw iioe;
      }
    }
 while ((EnvironmentEdgeManager.currentTime() - startTime) <= getTimeout(env));
  }
  return onSameRS;
}
