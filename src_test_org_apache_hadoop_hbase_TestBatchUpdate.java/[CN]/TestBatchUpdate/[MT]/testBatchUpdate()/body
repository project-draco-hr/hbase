{
  try {
    client.commitBatch(-1L);
  }
 catch (  IllegalStateException e) {
  }
catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
  long lockid=client.startBatchUpdate(new Text("row1"));
  try {
    client.openTable(HConstants.META_TABLE_NAME);
  }
 catch (  IllegalStateException e) {
  }
catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
  try {
    try {
      @SuppressWarnings("unused") long dummy=client.startUpdate(new Text("row2"));
    }
 catch (    IllegalStateException e) {
    }
catch (    Exception e) {
      e.printStackTrace();
      fail();
    }
    client.put(lockid,CONTENTS,value);
    client.delete(lockid,CONTENTS);
    client.commitBatch(lockid);
    lockid=client.startBatchUpdate(new Text("row2"));
    client.put(lockid,CONTENTS,value);
    client.commit(lockid);
    Text[] columns={CONTENTS};
    HScannerInterface scanner=client.obtainScanner(columns,new Text());
    HStoreKey key=new HStoreKey();
    TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
    while (scanner.next(key,results)) {
      for (      Map.Entry<Text,byte[]> e : results.entrySet()) {
        System.out.println(key + ": row: " + e.getKey()+ " value: "+ new String(e.getValue()));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail();
  }
}
