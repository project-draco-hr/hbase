{
  if (remoteId.getAddress().isUnresolved()) {
    throw new UnknownHostException("unknown host: " + remoteId.getAddress().getHostName());
  }
  this.server=remoteId.getAddress();
  this.codec=codec;
  this.compressor=compressor;
  UserGroupInformation ticket=remoteId.getTicket().getUGI();
  Class<?> protocol=remoteId.getProtocol();
  this.useSasl=User.isHBaseSecurityEnabled(conf);
  if (useSasl && protocol != null) {
    TokenInfo tokenInfo=protocol.getAnnotation(TokenInfo.class);
    if (tokenInfo != null) {
      TokenSelector<? extends TokenIdentifier> tokenSelector=tokenHandlers.get(tokenInfo.value());
      if (tokenSelector != null) {
        token=tokenSelector.selectToken(new Text(clusterId),ticket.getTokens());
      }
 else       if (LOG.isDebugEnabled()) {
        LOG.debug("No token selector found for type " + tokenInfo.value());
      }
    }
    KerberosInfo krbInfo=protocol.getAnnotation(KerberosInfo.class);
    if (krbInfo != null) {
      String serverKey=krbInfo.serverPrincipal();
      if (serverKey == null) {
        throw new IOException("Can't obtain server Kerberos config key from KerberosInfo");
      }
      serverPrincipal=SecurityUtil.getServerPrincipal(conf.get(serverKey),server.getAddress().getCanonicalHostName().toLowerCase());
      if (LOG.isDebugEnabled()) {
        LOG.debug("RPC Server Kerberos principal name for protocol=" + protocol.getCanonicalName() + " is "+ serverPrincipal);
      }
    }
  }
  if (!useSasl) {
    authMethod=AuthMethod.SIMPLE;
  }
 else   if (token != null) {
    authMethod=AuthMethod.DIGEST;
  }
 else {
    authMethod=AuthMethod.KERBEROS;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Use " + authMethod + " authentication for protocol "+ protocol.getSimpleName());
  }
  reloginMaxBackoff=conf.getInt("hbase.security.relogin.maxbackoff",5000);
  this.remoteId=remoteId;
  ConnectionHeader.Builder builder=ConnectionHeader.newBuilder();
  builder.setProtocol(protocol == null ? "" : protocol.getName());
  UserInformation userInfoPB;
  if ((userInfoPB=getUserInfo(ticket)) != null) {
    builder.setUserInfo(userInfoPB);
  }
  builder.setCellBlockCodecClass(this.codec.getClass().getCanonicalName());
  if (this.compressor != null) {
    builder.setCellBlockCompressorClass(this.compressor.getClass().getCanonicalName());
  }
  this.header=builder.build();
  this.setName("IPC Client (" + socketFactory.hashCode() + ") connection to "+ remoteId.getAddress().toString()+ ((ticket == null) ? " from an unknown user" : (" from " + ticket.getUserName())));
  this.setDaemon(true);
}
