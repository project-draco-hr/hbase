{
  if (shouldCloseConnection.get())   return;
  touch();
  try {
    in.readInt();
    ResponseHeader responseHeader=ResponseHeader.parseDelimitedFrom(in);
    int id=responseHeader.getCallId();
    if (LOG.isDebugEnabled()) {
      LOG.debug(getName() + ": got response header " + TextFormat.shortDebugString(responseHeader));
    }
    Call call=calls.get(id);
    if (responseHeader.hasException()) {
      ExceptionResponse exceptionResponse=responseHeader.getException();
      RemoteException re=createRemoteException(exceptionResponse);
      if (isFatalConnectionException(exceptionResponse)) {
        markClosed(re);
      }
 else {
        if (call != null)         call.setException(re);
      }
    }
 else {
      Message rpcResponseType=null;
      if (call != null) {
        try {
          rpcResponseType=ProtobufRpcClientEngine.Invoker.getReturnProtoType(reflectionCache.getMethod(remoteId.getProtocol(),call.method.getName()));
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      Message value=null;
      if (rpcResponseType != null) {
        Builder builder=rpcResponseType.newBuilderForType();
        builder.mergeDelimitedFrom(in);
        value=builder.build();
      }
      CellScanner cellBlockScanner=null;
      if (responseHeader.hasCellBlockMeta()) {
        int size=responseHeader.getCellBlockMeta().getLength();
        byte[] cellBlock=new byte[size];
        IPCUtil.readChunked(this.in,cellBlock,0,size);
        cellBlockScanner=ipcUtil.createCellScanner(this.codec,this.compressor,cellBlock);
      }
      if (call != null)       call.setResponse(value,cellBlockScanner);
    }
    if (call != null)     calls.remove(id);
  }
 catch (  IOException e) {
    if (e instanceof SocketTimeoutException && remoteId.rpcTimeout > 0) {
      closeException=e;
    }
 else {
      markClosed(e);
    }
  }
 finally {
    if (remoteId.rpcTimeout > 0) {
      cleanupCalls(remoteId.rpcTimeout);
    }
  }
}
