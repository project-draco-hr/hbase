{
  close();
  long expectedPos=PB_WAL_MAGIC.length;
  if (stream == null) {
    stream=fs.open(path);
    stream.seek(expectedPos);
  }
  if (stream.getPos() != expectedPos) {
    throw new IOException("The stream is at invalid position: " + stream.getPos());
  }
  WALProtos.WALHeader.Builder builder=WALProtos.WALHeader.newBuilder();
  WALHdrContext hdrCtxt=readHeader(builder,stream);
  WALHdrResult walHdrRes=hdrCtxt.getResult();
  if (walHdrRes == WALHdrResult.EOF) {
    throw new EOFException("Couldn't read WAL PB header");
  }
  if (walHdrRes == WALHdrResult.UNKNOWN_WRITER_CLS) {
    throw new IOException("Got unknown writer class: " + builder.getWriterClsName());
  }
  if (isFirst) {
    WALProtos.WALHeader header=builder.build();
    this.hasCompression=header.hasHasCompression() && header.getHasCompression();
    this.hasTagCompression=header.hasHasTagCompression() && header.getHasTagCompression();
  }
  this.inputStream=stream;
  this.walEditsStopOffset=this.fileLength;
  long currentPosition=stream.getPos();
  trailerPresent=setTrailerIfPresent();
  this.seekOnFs(currentPosition);
  if (LOG.isTraceEnabled()) {
    LOG.trace("After reading the trailer: walEditsStopOffset: " + this.walEditsStopOffset + ", fileLength: "+ this.fileLength+ ", "+ "trailerPresent: "+ trailerPresent);
  }
  codecClsName=hdrCtxt.getCellCodecClsName();
  return hdrCtxt.getCellCodecClsName();
}
