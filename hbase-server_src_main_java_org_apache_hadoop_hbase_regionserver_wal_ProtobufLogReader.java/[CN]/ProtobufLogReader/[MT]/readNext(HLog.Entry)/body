{
  while (true) {
    WALKey.Builder builder=WALKey.newBuilder();
    boolean hasNext=false;
    try {
      hasNext=builder.mergeDelimitedFrom(inputStream);
    }
 catch (    InvalidProtocolBufferException ipbe) {
      LOG.error("Invalid PB while reading WAL, probably an unexpected EOF, ignoring",ipbe);
    }
    if (!hasNext)     return false;
    if (!builder.isInitialized()) {
      LOG.error("Partial PB while reading WAL, probably an unexpected EOF, ignoring");
      return false;
    }
    WALKey walKey=builder.build();
    entry.getKey().readFieldsFromPb(walKey,this.byteStringUncompressor);
    if (!walKey.hasFollowingKvCount() || 0 == walKey.getFollowingKvCount()) {
      LOG.warn("WALKey has no KVs that follow it; trying the next one");
      continue;
    }
    int expectedCells=walKey.getFollowingKvCount();
    long posBefore=this.inputStream.getPos();
    try {
      int actualCells=entry.getEdit().readFromCells(cellDecoder,expectedCells);
      if (expectedCells != actualCells) {
        throw new EOFException("Only read " + actualCells);
      }
    }
 catch (    Exception ex) {
      String posAfterStr="<unknown>";
      try {
        posAfterStr=this.inputStream.getPos() + "";
      }
 catch (      Throwable t) {
        LOG.trace("Error getting pos for error message - ignoring",t);
      }
      String message=" while reading " + expectedCells + " WAL KVs; started reading at "+ posBefore+ " and read up to "+ posAfterStr;
      IOException realEofEx=extractHiddenEof(ex);
      if (realEofEx != null) {
        LOG.error("EOF " + message,realEofEx);
        return false;
      }
      message="Error " + message;
      LOG.error(message);
      throw new IOException(message,ex);
    }
    return true;
  }
}
