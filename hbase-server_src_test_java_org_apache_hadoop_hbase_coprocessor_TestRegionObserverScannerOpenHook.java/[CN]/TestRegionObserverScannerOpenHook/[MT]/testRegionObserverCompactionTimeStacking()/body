{
  Configuration conf=UTIL.getConfiguration();
  conf.setClass(HConstants.REGION_IMPL,CompactionCompletionNotifyingRegion.class,HRegion.class);
  conf.setInt("hbase.hstore.compaction.min",2);
  UTIL.startMiniCluster();
  String tableName="testRegionObserverCompactionTimeStacking";
  byte[] ROW=Bytes.toBytes("testRow");
  byte[] A=Bytes.toBytes("A");
  HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(tableName));
  desc.addFamily(new HColumnDescriptor(A));
  desc.addCoprocessor(EmptyRegionObsever.class.getName(),null,Coprocessor.PRIORITY_USER,null);
  desc.addCoprocessor(NoDataFromCompaction.class.getName(),null,Coprocessor.PRIORITY_HIGHEST,null);
  HBaseAdmin admin=UTIL.getHBaseAdmin();
  admin.createTable(desc);
  HTable table=new HTable(conf,desc.getTableName());
  Put put=new Put(ROW);
  put.add(A,A,A);
  table.put(put);
  table.flushCommits();
  HRegionServer rs=UTIL.getRSForFirstRegionInTable(desc.getTableName());
  List<HRegion> regions=rs.getOnlineRegions(desc.getTableName());
  assertEquals("More than 1 region serving test table with 1 row",1,regions.size());
  HRegion region=regions.get(0);
  admin.flush(region.getRegionName());
  CountDownLatch latch=((CompactionCompletionNotifyingRegion)region).getCompactionStateChangeLatch();
  put=new Put(Bytes.toBytes("anotherrow"));
  put.add(A,A,A);
  table.put(put);
  table.flushCommits();
  admin.flush(region.getRegionName());
  latch.await();
  Get get=new Get(ROW);
  Result r=table.get(get);
  assertNull("Got an unexpected number of rows - no data should be returned with the NoDataFromScan coprocessor. Found: " + r,r.listCells());
  get=new Get(Bytes.toBytes("anotherrow"));
  r=table.get(get);
  assertNull("Got an unexpected number of rows - no data should be returned with the NoDataFromScan coprocessor Found: " + r,r.listCells());
  table.close();
  UTIL.shutdownMiniCluster();
}
