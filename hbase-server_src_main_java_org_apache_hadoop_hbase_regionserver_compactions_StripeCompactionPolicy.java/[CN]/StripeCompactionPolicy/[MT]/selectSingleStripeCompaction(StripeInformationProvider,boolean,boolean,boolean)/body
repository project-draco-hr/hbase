{
  ArrayList<ImmutableList<StoreFile>> stripes=si.getStripes();
  int bqIndex=-1;
  List<StoreFile> bqSelection=null;
  int stripeCount=stripes.size();
  long bqTotalSize=-1;
  for (int i=0; i < stripeCount; ++i) {
    List<StoreFile> selection=selectSimpleCompaction(stripes.get(i),!canDropDeletesWithoutL0 && includeL0,isOffpeak);
    if (selection.isEmpty())     continue;
    long size=0;
    for (    StoreFile sf : selection) {
      size+=sf.getReader().length();
    }
    if (bqSelection == null || selection.size() > bqSelection.size() || (selection.size() == bqSelection.size() && size < bqTotalSize)) {
      bqSelection=selection;
      bqIndex=i;
      bqTotalSize=size;
    }
  }
  if (bqSelection == null) {
    LOG.debug("No good compaction is possible in any stripe");
    return null;
  }
  List<StoreFile> filesToCompact=new ArrayList<StoreFile>(bqSelection);
  int targetCount=1;
  long targetKvs=Long.MAX_VALUE;
  boolean hasAllFiles=filesToCompact.size() == stripes.get(bqIndex).size();
  String splitString="";
  if (hasAllFiles && bqTotalSize >= config.getSplitSize()) {
    if (includeL0) {
      return null;
    }
    Pair<Long,Integer> kvsAndCount=estimateTargetKvs(filesToCompact,config.getSplitCount());
    targetKvs=kvsAndCount.getFirst();
    targetCount=kvsAndCount.getSecond();
    splitString="; the stripe will be split into at most " + targetCount + " stripes with "+ targetKvs+ " target KVs";
  }
  LOG.debug("Found compaction in a stripe with end key [" + Bytes.toString(si.getEndRow(bqIndex)) + "], with "+ filesToCompact.size()+ " files of total size "+ bqTotalSize+ splitString);
  StripeCompactionRequest req;
  if (includeL0) {
    assert hasAllFiles;
    List<StoreFile> l0Files=si.getLevel0Files();
    LOG.debug("Adding " + l0Files.size() + " files to compaction to be able to drop deletes");
    ConcatenatedLists<StoreFile> sfs=new ConcatenatedLists<StoreFile>();
    sfs.addSublist(filesToCompact);
    sfs.addSublist(l0Files);
    req=new BoundaryStripeCompactionRequest(sfs,si.getStripeBoundaries());
  }
 else {
    req=new SplitStripeCompactionRequest(filesToCompact,si.getStartRow(bqIndex),si.getEndRow(bqIndex),targetCount,targetKvs);
  }
  if (hasAllFiles && (canDropDeletesWithoutL0 || includeL0)) {
    req.setMajorRange(si.getStartRow(bqIndex),si.getEndRow(bqIndex));
  }
  req.getRequest().setOffPeak(isOffpeak);
  return req;
}
