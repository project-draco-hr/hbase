{
  byte[] lineBytes=value.getBytes();
  try {
    ImportTsv.TsvParser.ParsedLine parsed=parser.parse(lineBytes,value.getLength());
    ImmutableBytesWritable rowKey=new ImmutableBytesWritable(lineBytes,parsed.getRowKeyOffset(),parsed.getRowKeyLength());
    ts=parsed.getTimestamp(ts);
    cellVisibilityExpr=parsed.getCellVisibility();
    ttl=parsed.getCellTTL();
    if (hfileOutPath != null) {
      tags.clear();
      if (cellVisibilityExpr != null) {
        tags.addAll(kvCreator.getVisibilityExpressionResolver().createVisibilityExpTags(cellVisibilityExpr));
      }
      if (ttl > 0) {
        tags.add(new ArrayBackedTag(TagType.TTL_TAG_TYPE,Bytes.toBytes(ttl)));
      }
    }
    Put put=new Put(rowKey.copyBytes());
    for (int i=0; i < parsed.getColumnCount(); i++) {
      if (i == parser.getRowKeyColumnIndex() || i == parser.getTimestampKeyColumnIndex() || i == parser.getAttributesKeyColumnIndex() || i == parser.getCellVisibilityColumnIndex() || i == parser.getCellTTLColumnIndex()) {
        continue;
      }
      populatePut(lineBytes,parsed,put,i);
    }
    context.write(rowKey,put);
  }
 catch (  ImportTsv.TsvParser.BadTsvLineException|IllegalArgumentException|InvalidLabelException badLine) {
    if (logBadLines) {
      System.err.println(value);
    }
    System.err.println("Bad line at offset: " + offset.get() + ":\n"+ badLine.getMessage());
    if (skipBadLines) {
      incrementBadLineCount(1);
      return;
    }
    throw new IOException(badLine);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
}
