{
  if (curInlineChunk != null && curInlineChunk.getNumEntries() != 0) {
    throw new IOException("Trying to write a multi-level block index, " + "but are " + curInlineChunk.getNumEntries() + " entries in the "+ "last inline chunk.");
  }
  byte[] midKeyMetadata=numLevels > 1 ? rootChunk.getMidKeyMetadata() : null;
  if (curInlineChunk != null) {
    while (rootChunk.getRootSize() > maxChunkSize) {
      rootChunk=writeIntermediateLevel(out,rootChunk);
      numLevels+=1;
    }
  }
  long rootLevelIndexPos=out.getPos();
{
    DataOutput blockStream=blockWriter.startWriting(BlockType.ROOT_INDEX);
    rootChunk.writeRoot(blockStream);
    if (midKeyMetadata != null)     blockStream.write(midKeyMetadata);
    blockWriter.writeHeaderAndData(out);
  }
  totalBlockOnDiskSize+=blockWriter.getOnDiskSizeWithoutHeader();
  totalBlockUncompressedSize+=blockWriter.getUncompressedSizeWithoutHeader();
  if (LOG.isTraceEnabled()) {
    LOG.trace("Wrote a " + numLevels + "-level index with root level at pos "+ rootLevelIndexPos+ ", "+ rootChunk.getNumEntries()+ " root-level entries, "+ totalNumEntries+ " total entries, "+ StringUtils.humanReadableInt(this.totalBlockOnDiskSize)+ " on-disk size, "+ StringUtils.humanReadableInt(totalBlockUncompressedSize)+ " total uncompressed size.");
  }
  return rootLevelIndexPos;
}
