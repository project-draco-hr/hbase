{
  int numEntries=nonRootIndex.getIntAfterPosition(0);
  int low=0;
  int high=numEntries - 1;
  int mid=0;
  int entriesOffset=Bytes.SIZEOF_INT * (numEntries + 2);
  ByteBufferedKeyOnlyKeyValue nonRootIndexkeyOnlyKV=new ByteBufferedKeyOnlyKeyValue();
  Pair<ByteBuffer,Integer> pair=new Pair<ByteBuffer,Integer>();
  while (low <= high) {
    mid=(low + high) >>> 1;
    int midKeyRelOffset=nonRootIndex.getIntAfterPosition(Bytes.SIZEOF_INT * (mid + 1));
    int midKeyOffset=entriesOffset + midKeyRelOffset + SECONDARY_INDEX_ENTRY_OVERHEAD;
    int midLength=nonRootIndex.getIntAfterPosition(Bytes.SIZEOF_INT * (mid + 2)) - midKeyRelOffset - SECONDARY_INDEX_ENTRY_OVERHEAD;
    nonRootIndex.asSubByteBuffer(midKeyOffset,midLength,pair);
    nonRootIndexkeyOnlyKV.setKey(pair.getFirst(),pair.getSecond(),midLength);
    int cmp=comparator.compareKeyIgnoresMvcc(key,nonRootIndexkeyOnlyKV);
    if (cmp > 0)     low=mid + 1;
 else     if (cmp < 0)     high=mid - 1;
 else     return mid;
  }
  if (low != high + 1) {
    throw new IllegalStateException("Binary search broken: low=" + low + " "+ "instead of "+ (high + 1));
  }
  int i=low - 1;
  if (i < -1 || i >= numEntries) {
    throw new IllegalStateException("Binary search broken: result is " + i + " but expected to be between -1 and (numEntries - 1) = "+ (numEntries - 1));
  }
  return i;
}
