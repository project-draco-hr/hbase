{
  int rootLevelIndex=rootBlockContainingKey(key);
  if (rootLevelIndex < 0 || rootLevelIndex >= blockOffsets.length) {
    return null;
  }
  Cell nextIndexedKey=null;
  long currentOffset=blockOffsets[rootLevelIndex];
  int currentOnDiskSize=blockDataSizes[rootLevelIndex];
  if (rootLevelIndex < blockKeys.length - 1) {
    nextIndexedKey=blockKeys[rootLevelIndex + 1];
  }
 else {
    nextIndexedKey=HConstants.NO_NEXT_INDEXED_KEY;
  }
  int lookupLevel=1;
  int index=-1;
  HFileBlock block;
  KeyOnlyKeyValue tmpNextIndexKV=new KeyValue.KeyOnlyKeyValue();
  while (true) {
    if (currentBlock != null && currentBlock.getOffset() == currentOffset) {
      block=currentBlock;
    }
 else {
      boolean shouldCache=cacheBlocks || (lookupLevel < searchTreeLevel);
      BlockType expectedBlockType;
      if (lookupLevel < searchTreeLevel - 1) {
        expectedBlockType=BlockType.INTERMEDIATE_INDEX;
      }
 else       if (lookupLevel == searchTreeLevel - 1) {
        expectedBlockType=BlockType.LEAF_INDEX;
      }
 else {
        expectedBlockType=BlockType.DATA;
      }
      block=cachingBlockReader.readBlock(currentOffset,currentOnDiskSize,shouldCache,pread,isCompaction,true,expectedBlockType,expectedDataBlockEncoding);
    }
    if (block == null) {
      throw new IOException("Failed to read block at offset " + currentOffset + ", onDiskSize="+ currentOnDiskSize);
    }
    if (block.getBlockType().isData()) {
      break;
    }
    if (++lookupLevel > searchTreeLevel) {
      throw new IOException("Search Tree Level overflow: lookupLevel=" + lookupLevel + ", searchTreeLevel="+ searchTreeLevel);
    }
    ByteBuff buffer=block.getBufferWithoutHeader();
    index=locateNonRootIndexEntry(buffer,key,comparator);
    if (index == -1) {
      KeyValue kv=KeyValueUtil.ensureKeyValue(key);
      throw new IOException("The key " + Bytes.toStringBinary(kv.getKey(),kv.getKeyOffset(),kv.getKeyLength()) + " is before the"+ " first key of the non-root index block "+ block);
    }
    currentOffset=buffer.getLong();
    currentOnDiskSize=buffer.getInt();
    byte[] nonRootIndexedKey=getNonRootIndexedKey(buffer,index + 1);
    if (nonRootIndexedKey != null) {
      tmpNextIndexKV.setKey(nonRootIndexedKey,0,nonRootIndexedKey.length);
      nextIndexedKey=tmpNextIndexKV;
    }
  }
  if (lookupLevel != searchTreeLevel) {
    throw new IOException("Reached a data block at level " + lookupLevel + " but the number of levels is "+ searchTreeLevel);
  }
  BlockWithScanInfo blockWithScanInfo=new BlockWithScanInfo(block,nextIndexedKey);
  return blockWithScanInfo;
}
