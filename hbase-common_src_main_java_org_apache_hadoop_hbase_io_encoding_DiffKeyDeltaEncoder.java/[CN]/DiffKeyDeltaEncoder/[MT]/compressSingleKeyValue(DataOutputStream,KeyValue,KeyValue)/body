{
  byte flag=0;
  int kLength=kv.getKeyLength();
  int vLength=kv.getValueLength();
  long timestamp;
  long diffTimestamp=0;
  int diffTimestampFitsInBytes=0;
  int timestampFitsInBytes;
  int commonPrefix;
  byte[] curKvBuf=kv.getBuffer();
  if (prevKv == null) {
    timestamp=kv.getTimestamp();
    if (timestamp < 0) {
      flag|=FLAG_TIMESTAMP_SIGN;
      timestamp=-timestamp;
    }
    timestampFitsInBytes=ByteBufferUtils.longFitsIn(timestamp);
    flag|=(timestampFitsInBytes - 1) << SHIFT_TIMESTAMP_LENGTH;
    commonPrefix=0;
    byte familyLength=kv.getFamilyLength();
    out.write(familyLength);
    out.write(kv.getFamilyArray(),kv.getFamilyOffset(),familyLength);
  }
 else {
    int preKeyLength=prevKv.getKeyLength();
    commonPrefix=ByteBufferUtils.findCommonPrefix(curKvBuf,kv.getKeyOffset(),kLength - KeyValue.TIMESTAMP_TYPE_SIZE,prevKv.getBuffer(),prevKv.getKeyOffset(),preKeyLength - KeyValue.TIMESTAMP_TYPE_SIZE);
    if (kLength == preKeyLength) {
      flag|=FLAG_SAME_KEY_LENGTH;
    }
    if (vLength == prevKv.getValueLength()) {
      flag|=FLAG_SAME_VALUE_LENGTH;
    }
    if (kv.getTypeByte() == prevKv.getTypeByte()) {
      flag|=FLAG_SAME_TYPE;
    }
    timestamp=kv.getTimestamp();
    diffTimestamp=prevKv.getTimestamp() - timestamp;
    boolean negativeTimestamp=timestamp < 0;
    if (negativeTimestamp) {
      timestamp=-timestamp;
    }
    timestampFitsInBytes=ByteBufferUtils.longFitsIn(timestamp);
    boolean minusDiffTimestamp=diffTimestamp < 0;
    if (minusDiffTimestamp) {
      diffTimestamp=-diffTimestamp;
    }
    diffTimestampFitsInBytes=ByteBufferUtils.longFitsIn(diffTimestamp);
    if (diffTimestampFitsInBytes < timestampFitsInBytes) {
      flag|=(diffTimestampFitsInBytes - 1) << SHIFT_TIMESTAMP_LENGTH;
      flag|=FLAG_TIMESTAMP_IS_DIFF;
      if (minusDiffTimestamp) {
        flag|=FLAG_TIMESTAMP_SIGN;
      }
    }
 else {
      flag|=(timestampFitsInBytes - 1) << SHIFT_TIMESTAMP_LENGTH;
      if (negativeTimestamp) {
        flag|=FLAG_TIMESTAMP_SIGN;
      }
    }
  }
  out.write(flag);
  if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
    ByteBufferUtils.putCompressedInt(out,kLength);
  }
  if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
    ByteBufferUtils.putCompressedInt(out,vLength);
  }
  ByteBufferUtils.putCompressedInt(out,commonPrefix);
  if (prevKv == null || commonPrefix < kv.getRowLength() + KeyValue.ROW_LENGTH_SIZE) {
    int restRowLength=kv.getRowLength() + KeyValue.ROW_LENGTH_SIZE - commonPrefix;
    out.write(curKvBuf,kv.getKeyOffset() + commonPrefix,restRowLength);
    out.write(curKvBuf,kv.getQualifierOffset(),kv.getQualifierLength());
  }
 else {
    out.write(curKvBuf,kv.getKeyOffset() + commonPrefix,kLength - commonPrefix - KeyValue.TIMESTAMP_TYPE_SIZE);
  }
  if ((flag & FLAG_TIMESTAMP_IS_DIFF) == 0) {
    ByteBufferUtils.putLong(out,timestamp,timestampFitsInBytes);
  }
 else {
    ByteBufferUtils.putLong(out,diffTimestamp,diffTimestampFitsInBytes);
  }
  if ((flag & FLAG_SAME_TYPE) == 0) {
    out.write(kv.getTypeByte());
  }
  out.write(kv.getValueArray(),kv.getValueOffset(),vLength);
  return kLength + vLength + KeyValue.KEYVALUE_INFRASTRUCTURE_SIZE;
}
