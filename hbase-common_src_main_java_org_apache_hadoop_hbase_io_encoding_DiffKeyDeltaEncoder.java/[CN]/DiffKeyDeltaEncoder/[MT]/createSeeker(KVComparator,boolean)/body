{
  return new BufferedEncodedSeeker<DiffSeekerState>(comparator){
    private byte[] familyNameWithSize;
    private static final int TIMESTAMP_WITH_TYPE_LENGTH=Bytes.SIZEOF_LONG + Bytes.SIZEOF_BYTE;
    private void decode(    boolean isFirst){
      byte flag=currentBuffer.get();
      byte type=0;
      if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        if (!isFirst) {
          type=current.keyBuffer[current.keyLength - Bytes.SIZEOF_BYTE];
        }
        current.keyLength=ByteBufferUtils.readCompressedInt(currentBuffer);
      }
      if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
        current.valueLength=ByteBufferUtils.readCompressedInt(currentBuffer);
      }
      current.lastCommonPrefix=ByteBufferUtils.readCompressedInt(currentBuffer);
      current.ensureSpaceForKey();
      if (current.lastCommonPrefix < Bytes.SIZEOF_SHORT) {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,Bytes.SIZEOF_SHORT - current.lastCommonPrefix);
        current.rowLengthWithSize=Bytes.toShort(current.keyBuffer,0) + Bytes.SIZEOF_SHORT;
        currentBuffer.get(current.keyBuffer,Bytes.SIZEOF_SHORT,current.rowLengthWithSize - Bytes.SIZEOF_SHORT);
        System.arraycopy(familyNameWithSize,0,current.keyBuffer,current.rowLengthWithSize,familyNameWithSize.length);
        currentBuffer.get(current.keyBuffer,current.rowLengthWithSize + familyNameWithSize.length,current.keyLength - current.rowLengthWithSize - familyNameWithSize.length- TIMESTAMP_WITH_TYPE_LENGTH);
      }
 else       if (current.lastCommonPrefix < current.rowLengthWithSize) {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.rowLengthWithSize - current.lastCommonPrefix);
        currentBuffer.get(current.keyBuffer,current.rowLengthWithSize + familyNameWithSize.length,current.keyLength - current.rowLengthWithSize - familyNameWithSize.length- TIMESTAMP_WITH_TYPE_LENGTH);
      }
 else {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.keyLength - TIMESTAMP_WITH_TYPE_LENGTH - current.lastCommonPrefix);
      }
      int pos=current.keyLength - TIMESTAMP_WITH_TYPE_LENGTH;
      int timestampFitInBytes=1 + ((flag & MASK_TIMESTAMP_LENGTH) >>> SHIFT_TIMESTAMP_LENGTH);
      long timestampOrDiff=ByteBufferUtils.readLong(currentBuffer,timestampFitInBytes);
      if ((flag & FLAG_TIMESTAMP_SIGN) != 0) {
        timestampOrDiff=-timestampOrDiff;
      }
      if ((flag & FLAG_TIMESTAMP_IS_DIFF) == 0) {
        current.timestamp=timestampOrDiff;
      }
 else {
        current.timestamp=current.timestamp - timestampOrDiff;
      }
      Bytes.putLong(current.keyBuffer,pos,current.timestamp);
      pos+=Bytes.SIZEOF_LONG;
      if ((flag & FLAG_SAME_TYPE) == 0) {
        currentBuffer.get(current.keyBuffer,pos,Bytes.SIZEOF_BYTE);
      }
 else       if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        current.keyBuffer[pos]=type;
      }
      current.valueOffset=currentBuffer.position();
      ByteBufferUtils.skip(currentBuffer,current.valueLength);
      if (includesMemstoreTS) {
        current.memstoreTS=ByteBufferUtils.readVLong(currentBuffer);
      }
 else {
        current.memstoreTS=0;
      }
      current.nextKvOffset=currentBuffer.position();
    }
    @Override protected void decodeFirst(){
      ByteBufferUtils.skip(currentBuffer,Bytes.SIZEOF_INT);
      byte familyNameLength=currentBuffer.get();
      familyNameWithSize=new byte[familyNameLength + Bytes.SIZEOF_BYTE];
      familyNameWithSize[0]=familyNameLength;
      currentBuffer.get(familyNameWithSize,Bytes.SIZEOF_BYTE,familyNameLength);
      decode(true);
    }
    @Override protected void decodeNext(){
      decode(false);
    }
    @Override protected DiffSeekerState createSeekerState(){
      return new DiffSeekerState();
    }
  }
;
}
