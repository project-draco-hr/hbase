{
  block.mark();
  block.position(Bytes.SIZEOF_INT);
  byte familyLength=block.get();
  ByteBufferUtils.skip(block,familyLength);
  byte flag=block.get();
  int keyLength=ByteBufferUtils.readCompressedInt(block);
  ByteBufferUtils.readCompressedInt(block);
  ByteBufferUtils.readCompressedInt(block);
  ByteBuffer result=ByteBuffer.allocate(keyLength);
  int pos=result.arrayOffset();
  block.get(result.array(),pos,Bytes.SIZEOF_SHORT);
  pos+=Bytes.SIZEOF_SHORT;
  short rowLength=result.getShort();
  block.get(result.array(),pos,rowLength);
  pos+=rowLength;
  int savePosition=block.position();
  block.position(Bytes.SIZEOF_INT);
  block.get(result.array(),pos,familyLength + Bytes.SIZEOF_BYTE);
  pos+=familyLength + Bytes.SIZEOF_BYTE;
  block.position(savePosition);
  int qualifierLength=keyLength - pos + result.arrayOffset() - KeyValue.TIMESTAMP_TYPE_SIZE;
  block.get(result.array(),pos,qualifierLength);
  pos+=qualifierLength;
  int timestampFitInBytes=((flag & MASK_TIMESTAMP_LENGTH) >>> SHIFT_TIMESTAMP_LENGTH) + 1;
  long timestamp=ByteBufferUtils.readLong(block,timestampFitInBytes);
  if ((flag & FLAG_TIMESTAMP_SIGN) != 0) {
    timestamp=-timestamp;
  }
  result.putLong(pos,timestamp);
  pos+=Bytes.SIZEOF_LONG;
  block.get(result.array(),pos,Bytes.SIZEOF_BYTE);
  block.reset();
  return result;
}
