{
  block.mark();
  block.position(Bytes.SIZEOF_INT);
  int keyLength=ByteBuff.readCompressedInt(block);
  ByteBuff.readCompressedInt(block);
  int commonLength=ByteBuff.readCompressedInt(block);
  if (commonLength != 0) {
    throw new AssertionError("Nonzero common length in the first key in " + "block: " + commonLength);
  }
  ByteBuffer key=block.asSubByteBuffer(keyLength).duplicate();
  block.reset();
  return new KeyValue.KeyOnlyKeyValue(key.array(),key.arrayOffset() + key.position(),keyLength);
}
