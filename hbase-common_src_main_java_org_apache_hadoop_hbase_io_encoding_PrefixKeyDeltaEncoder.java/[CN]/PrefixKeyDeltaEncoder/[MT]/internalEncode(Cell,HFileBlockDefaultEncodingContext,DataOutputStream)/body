{
  int klength=KeyValueUtil.keyLength(cell);
  int vlength=cell.getValueLength();
  EncodingState state=encodingContext.getEncodingState();
  if (state.prevCell == null) {
    ByteBufferUtils.putCompressedInt(out,klength);
    ByteBufferUtils.putCompressedInt(out,vlength);
    ByteBufferUtils.putCompressedInt(out,0);
    CellUtil.writeFlatKey(cell,out);
  }
 else {
    int common=CellUtil.findCommonPrefixInFlatKey(cell,state.prevCell,true,true);
    ByteBufferUtils.putCompressedInt(out,klength - common);
    ByteBufferUtils.putCompressedInt(out,vlength);
    ByteBufferUtils.putCompressedInt(out,common);
    writeKeyExcludingCommon(cell,common,out);
  }
  CellUtil.writeValue(out,cell,vlength);
  int size=klength + vlength + KeyValue.KEYVALUE_INFRASTRUCTURE_SIZE;
  size+=afterEncodingKeyValue(cell,out,encodingContext);
  state.prevCell=cell;
  return size;
}
