{
  block.mark();
  block.position(Bytes.SIZEOF_INT);
  int keyLength=ByteBufferUtils.readCompressedInt(block);
  ByteBufferUtils.readCompressedInt(block);
  int commonLength=ByteBufferUtils.readCompressedInt(block);
  if (commonLength != 0) {
    throw new AssertionError("Nonzero common length in the first key in " + "block: " + commonLength);
  }
  int pos=block.position();
  block.reset();
  ByteBuffer dup=block.duplicate();
  dup.position(pos);
  dup.limit(pos + keyLength);
  return new KeyValue.KeyOnlyKeyValue(dup.array(),dup.arrayOffset() + pos,keyLength);
}
