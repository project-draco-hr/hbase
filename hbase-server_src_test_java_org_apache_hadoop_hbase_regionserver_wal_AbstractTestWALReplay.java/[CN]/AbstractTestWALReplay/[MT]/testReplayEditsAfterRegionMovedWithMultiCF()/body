{
  final TableName tableName=TableName.valueOf("testReplayEditsAfterRegionMovedWithMultiCF");
  byte[] family1=Bytes.toBytes("cf1");
  byte[] family2=Bytes.toBytes("cf2");
  byte[] qualifier=Bytes.toBytes("q");
  byte[] value=Bytes.toBytes("testV");
  byte[][] familys={family1,family2};
  TEST_UTIL.createTable(tableName,familys);
  Table htable=TEST_UTIL.getConnection().getTable(tableName);
  Put put=new Put(Bytes.toBytes("r1"));
  put.addColumn(family1,qualifier,value);
  htable.put(put);
  ResultScanner resultScanner=htable.getScanner(new Scan());
  int count=0;
  while (resultScanner.next() != null) {
    count++;
  }
  resultScanner.close();
  assertEquals(1,count);
  MiniHBaseCluster hbaseCluster=TEST_UTIL.getMiniHBaseCluster();
  List<HRegion> regions=hbaseCluster.getRegions(tableName);
  assertEquals(1,regions.size());
  Region destRegion=regions.get(0);
  int originServerNum=hbaseCluster.getServerWith(destRegion.getRegionInfo().getRegionName());
  assertTrue("Please start more than 1 regionserver",hbaseCluster.getRegionServerThreads().size() > 1);
  int destServerNum=0;
  while (destServerNum == originServerNum) {
    destServerNum++;
  }
  HRegionServer originServer=hbaseCluster.getRegionServer(originServerNum);
  HRegionServer destServer=hbaseCluster.getRegionServer(destServerNum);
  moveRegionAndWait(destRegion,destServer);
  Delete del=new Delete(Bytes.toBytes("r1"));
  htable.delete(del);
  resultScanner=htable.getScanner(new Scan());
  count=0;
  while (resultScanner.next() != null) {
    count++;
  }
  resultScanner.close();
  assertEquals(0,count);
  Region region=destServer.getOnlineRegion(destRegion.getRegionInfo().getRegionName());
  region.flush(true);
  for (  Store store : region.getStores()) {
    store.triggerMajorCompaction();
  }
  region.compact(true);
  moveRegionAndWait(destRegion,originServer);
  originServer.abort("testing");
  Result result=htable.get(new Get(Bytes.toBytes("r1")));
  if (result != null) {
    assertTrue("Row is deleted, but we get" + result.toString(),(result == null) || result.isEmpty());
  }
  resultScanner.close();
}
