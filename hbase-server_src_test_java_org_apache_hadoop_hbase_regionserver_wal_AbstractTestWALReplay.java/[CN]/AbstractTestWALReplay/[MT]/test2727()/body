{
  final TableName tableName=TableName.valueOf("test2727");
  MultiVersionConcurrencyControl mvcc=new MultiVersionConcurrencyControl();
  HRegionInfo hri=createBasic3FamilyHRegionInfo(tableName);
  Path basedir=FSUtils.getTableDir(hbaseRootDir,tableName);
  deleteDir(basedir);
  HTableDescriptor htd=createBasic3FamilyHTD(tableName);
  Region region2=HBaseTestingUtility.createRegionAndWAL(hri,hbaseRootDir,this.conf,htd);
  HBaseTestingUtility.closeRegionAndWAL(region2);
  final byte[] rowName=tableName.getName();
  WAL wal1=createWAL(this.conf,hbaseRootDir,logName);
  final int countPerFamily=1000;
  NavigableMap<byte[],Integer> scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  for (  byte[] fam : htd.getFamiliesKeys()) {
    scopes.put(fam,0);
  }
  for (  HColumnDescriptor hcd : htd.getFamilies()) {
    addWALEdits(tableName,hri,rowName,hcd.getName(),countPerFamily,ee,wal1,htd,mvcc,scopes);
  }
  wal1.shutdown();
  runWALSplit(this.conf);
  WAL wal2=createWAL(this.conf,hbaseRootDir,logName);
  for (  HColumnDescriptor hcd : htd.getFamilies()) {
    addWALEdits(tableName,hri,rowName,hcd.getName(),countPerFamily,ee,wal2,htd,mvcc,scopes);
  }
  wal2.shutdown();
  runWALSplit(this.conf);
  WAL wal3=createWAL(this.conf,hbaseRootDir,logName);
  try {
    HRegion region=HRegion.openHRegion(this.conf,this.fs,hbaseRootDir,hri,htd,wal3);
    long seqid=region.getOpenSeqNum();
    assertTrue(seqid > mvcc.getWritePoint());
    assertEquals(seqid - 1,mvcc.getWritePoint());
    LOG.debug("region.getOpenSeqNum(): " + region.getOpenSeqNum() + ", wal3.id: "+ mvcc.getReadPoint());
    region.close();
  }
  finally {
    wal3.close();
  }
}
