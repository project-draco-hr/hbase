{
  HFileBlockPair[] returnedBlocks=new HFileBlockPair[numBlocks];
  Random rand=new Random();
  HashSet<String> usedStrings=new HashSet<String>();
  for (int i=0; i < numBlocks; i++) {
    ByteBuffer cachedBuffer=ByteBuffer.allocate(blockSize - HFileBlock.EXTRA_SERIALIZATION_SPACE);
    rand.nextBytes(cachedBuffer.array());
    cachedBuffer.rewind();
    int onDiskSizeWithoutHeader=blockSize - HFileBlock.EXTRA_SERIALIZATION_SPACE;
    int uncompressedSizeWithoutHeader=blockSize - HFileBlock.EXTRA_SERIALIZATION_SPACE;
    long prevBlockOffset=rand.nextLong();
    BlockType.DATA.write(cachedBuffer);
    cachedBuffer.putInt(onDiskSizeWithoutHeader);
    cachedBuffer.putInt(uncompressedSizeWithoutHeader);
    cachedBuffer.putLong(prevBlockOffset);
    cachedBuffer.rewind();
    HFileBlock generated=new HFileBlock(BlockType.DATA,onDiskSizeWithoutHeader,uncompressedSizeWithoutHeader,prevBlockOffset,cachedBuffer,HFileBlock.DONT_FILL_HEADER,blockSize,includesMemstoreTS);
    String strKey;
    for (strKey=new Long(rand.nextLong()).toString(); !usedStrings.add(strKey); strKey=new Long(rand.nextLong()).toString())     ;
    returnedBlocks[i]=new HFileBlockPair();
    returnedBlocks[i].blockName=new BlockCacheKey(strKey,0);
    returnedBlocks[i].block=generated;
  }
  return returnedBlocks;
}
