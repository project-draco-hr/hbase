{
  metricsBalancer.incrMiscInvocations();
  if (regions == null || regions.isEmpty()) {
    return null;
  }
  List<ServerName> backupMasters=normalizeServers(servers);
  int numServers=servers == null ? 0 : servers.size();
  int numBackupMasters=backupMasters == null ? 0 : backupMasters.size();
  if (numServers == 0 && numBackupMasters == 0) {
    LOG.warn("Wanted to do round robin assignment but no servers to assign to");
    return null;
  }
  Map<ServerName,List<HRegionInfo>> assignments=new TreeMap<ServerName,List<HRegionInfo>>();
  if (numServers + numBackupMasters == 1) {
    ServerName server=numServers > 0 ? servers.get(0) : backupMasters.get(0);
    assignments.put(server,new ArrayList<HRegionInfo>(regions));
    return assignments;
  }
  List<HRegionInfo> masterRegions=null;
  if (numServers > 0 && servers.contains(masterServerName)) {
    masterRegions=new ArrayList<HRegionInfo>();
    if (numServers == 1) {
      numServers=0;
    }
  }
  int total=regions.size();
  int numRegions=total * numBackupMasters / (numServers * backupMasterWeight + numBackupMasters);
  if (numRegions > 0) {
    roundRobinAssignment(regions,0,numRegions,backupMasters,masterRegions,assignments);
  }
  int remainder=total - numRegions;
  if (remainder > 0) {
    roundRobinAssignment(regions,numRegions,remainder,servers,masterRegions,assignments);
  }
  if (masterRegions != null && !masterRegions.isEmpty()) {
    assignments.put(masterServerName,masterRegions);
  }
  return assignments;
}
