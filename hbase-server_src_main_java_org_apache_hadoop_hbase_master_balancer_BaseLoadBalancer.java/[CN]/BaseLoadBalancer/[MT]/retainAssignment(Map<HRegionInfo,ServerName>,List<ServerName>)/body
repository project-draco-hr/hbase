{
  metricsBalancer.incrMiscInvocations();
  ArrayListMultimap<String,ServerName> serversByHostname=ArrayListMultimap.create();
  for (  ServerName server : servers) {
    serversByHostname.put(server.getHostname(),server);
  }
  Map<ServerName,List<HRegionInfo>> assignments=new TreeMap<ServerName,List<HRegionInfo>>();
  for (  ServerName server : servers) {
    assignments.put(server,new ArrayList<HRegionInfo>());
  }
  Set<String> oldHostsNoLongerPresent=Sets.newTreeSet();
  int numRandomAssignments=0;
  int numRetainedAssigments=0;
  for (  Map.Entry<HRegionInfo,ServerName> entry : regions.entrySet()) {
    HRegionInfo region=entry.getKey();
    ServerName oldServerName=entry.getValue();
    List<ServerName> localServers=new ArrayList<ServerName>();
    if (oldServerName != null) {
      localServers=serversByHostname.get(oldServerName.getHostname());
    }
    if (localServers.isEmpty()) {
      ServerName randomServer=servers.get(RANDOM.nextInt(servers.size()));
      assignments.get(randomServer).add(region);
      numRandomAssignments++;
      if (oldServerName != null)       oldHostsNoLongerPresent.add(oldServerName.getHostname());
    }
 else     if (localServers.size() == 1) {
      assignments.get(localServers.get(0)).add(region);
      numRetainedAssigments++;
    }
 else {
      int size=localServers.size();
      ServerName target=localServers.contains(oldServerName) ? oldServerName : localServers.get(RANDOM.nextInt(size));
      assignments.get(target).add(region);
      numRetainedAssigments++;
    }
  }
  String randomAssignMsg="";
  if (numRandomAssignments > 0) {
    randomAssignMsg=numRandomAssignments + " regions were assigned " + "to random hosts, since the old hosts for these regions are no "+ "longer present in the cluster. These hosts were:\n  "+ Joiner.on("\n  ").join(oldHostsNoLongerPresent);
  }
  LOG.info("Reassigned " + regions.size() + " regions. "+ numRetainedAssigments+ " retained the pre-restart assignment. "+ randomAssignMsg);
  return assignments;
}
