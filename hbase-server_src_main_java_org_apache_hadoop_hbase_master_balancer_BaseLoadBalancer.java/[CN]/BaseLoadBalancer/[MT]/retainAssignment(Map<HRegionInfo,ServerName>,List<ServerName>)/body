{
  metricsBalancer.incrMiscInvocations();
  if (!excludedServers.isEmpty() && servers != null) {
    servers.removeAll(excludedServers);
  }
  if (regions.isEmpty() || servers.isEmpty()) {
    return null;
  }
  Map<ServerName,List<HRegionInfo>> assignments=new TreeMap<ServerName,List<HRegionInfo>>();
  int numServers=servers.size();
  if (numServers == 1) {
    assignments.put(servers.get(0),new ArrayList<HRegionInfo>(regions.keySet()));
    return assignments;
  }
  ArrayListMultimap<String,ServerName> serversByHostname=ArrayListMultimap.create();
  for (  ServerName server : servers) {
    if (!server.equals(masterServerName)) {
      serversByHostname.put(server.getHostname(),server);
    }
  }
  for (  ServerName server : servers) {
    assignments.put(server,new ArrayList<HRegionInfo>());
  }
  Set<String> oldHostsNoLongerPresent=Sets.newTreeSet();
  boolean masterIncluded=servers.contains(masterServerName);
  int numRandomAssignments=0;
  int numRetainedAssigments=0;
  for (  Map.Entry<HRegionInfo,ServerName> entry : regions.entrySet()) {
    HRegionInfo region=entry.getKey();
    ServerName oldServerName=entry.getValue();
    List<ServerName> localServers=new ArrayList<ServerName>();
    if (oldServerName != null) {
      localServers=serversByHostname.get(oldServerName.getHostname());
    }
    if (masterIncluded && shouldBeOnMaster(region)) {
      assignments.get(masterServerName).add(region);
      if (localServers.contains(masterServerName)) {
        numRetainedAssigments++;
      }
 else {
        numRandomAssignments++;
      }
    }
 else     if (localServers.isEmpty()) {
      int i=RANDOM.nextInt(numServers);
      ServerName randomServer=servers.get(i);
      if (randomServer.equals(masterServerName)) {
        i=(i == 0 ? 1 : i - 1);
        randomServer=servers.get(i);
      }
      assignments.get(randomServer).add(region);
      numRandomAssignments++;
      if (oldServerName != null)       oldHostsNoLongerPresent.add(oldServerName.getHostname());
    }
 else     if (localServers.size() == 1) {
      assignments.get(localServers.get(0)).add(region);
      numRetainedAssigments++;
    }
 else {
      int size=localServers.size();
      ServerName target=localServers.contains(oldServerName) ? oldServerName : localServers.get(RANDOM.nextInt(size));
      assignments.get(target).add(region);
      numRetainedAssigments++;
    }
  }
  String randomAssignMsg="";
  if (numRandomAssignments > 0) {
    randomAssignMsg=numRandomAssignments + " regions were assigned " + "to random hosts, since the old hosts for these regions are no "+ "longer present in the cluster. These hosts were:\n  "+ Joiner.on("\n  ").join(oldHostsNoLongerPresent);
  }
  LOG.info("Reassigned " + regions.size() + " regions. "+ numRetainedAssigments+ " retained the pre-restart assignment. "+ randomAssignMsg);
  return assignments;
}
