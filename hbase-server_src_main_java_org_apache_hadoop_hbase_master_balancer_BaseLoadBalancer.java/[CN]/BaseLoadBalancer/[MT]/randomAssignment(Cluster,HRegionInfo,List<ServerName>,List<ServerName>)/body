{
  int numServers=servers == null ? 0 : servers.size();
  int numBackupMasters=backupMasters == null ? 0 : backupMasters.size();
  if (numServers == 0 && numBackupMasters == 0) {
    LOG.warn("Wanted to do random assignment but no servers to assign to");
    return null;
  }
  if (servers != null && shouldBeOnMaster(regionInfo) && servers.contains(masterServerName)) {
    return masterServerName;
  }
  ServerName sn=null;
  final int maxIterations=servers.size() * 4;
  int iterations=0;
  do {
    int i=RANDOM.nextInt(numBackupMasters + numServers * backupMasterWeight);
    if (i < numBackupMasters) {
      sn=backupMasters.get(i);
      continue;
    }
    i=(i - numBackupMasters) / backupMasterWeight;
    sn=servers.get(i);
    if (sn.equals(masterServerName)) {
      if (numServers > 1) {
        i=(i == 0 ? 1 : i - 1);
        sn=servers.get(i);
      }
 else       if (numBackupMasters > 0) {
        sn=backupMasters.get(0);
      }
    }
  }
 while (cluster.wouldLowerAvailability(regionInfo,sn) && iterations++ < maxIterations);
  cluster.doAssignRegion(regionInfo,sn);
  return sn;
}
