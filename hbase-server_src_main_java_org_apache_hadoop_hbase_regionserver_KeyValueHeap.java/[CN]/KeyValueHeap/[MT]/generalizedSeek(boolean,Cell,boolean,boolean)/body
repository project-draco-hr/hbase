{
  if (!isLazy && useBloom) {
    throw new IllegalArgumentException("Multi-column Bloom filter " + "optimization requires a lazy seek");
  }
  if (current == null) {
    return false;
  }
  KeyValueScanner scanner=current;
  while (scanner != null) {
    Cell topKey=scanner.peek();
    if (comparator.getComparator().compare(seekKey,topKey) <= 0) {
      heap.add(scanner);
      current=pollRealKV();
      return current != null;
    }
    boolean seekResult;
    if (isLazy && heap.size() > 0) {
      seekResult=scanner.requestSeek(seekKey,forward,useBloom);
    }
 else {
      seekResult=NonLazyKeyValueScanner.doRealSeek(scanner,seekKey,forward);
    }
    if (!seekResult) {
      this.scannersForDelayedClose.add(scanner);
    }
 else {
      heap.add(scanner);
    }
    scanner=heap.poll();
    if (scanner == null) {
      current=null;
    }
  }
  return false;
}
