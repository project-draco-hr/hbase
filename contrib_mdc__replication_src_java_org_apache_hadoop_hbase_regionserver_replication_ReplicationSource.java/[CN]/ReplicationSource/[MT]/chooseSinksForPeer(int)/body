{
  this.currentPeers.clear();
  List<HServerAddress> addresses=this.zkHelper.getPeersAddresses(index);
  Map<String,HServerAddress> mapOfAdr=new HashMap<String,HServerAddress>();
  LOG.info("Considering " + addresses.size() + " rs, with ratio "+ ratio);
  int nbPeers=(int)(Math.ceil(addresses.size() * ratio));
  LOG.info("Getting " + nbPeers + " rs from peer cluster # "+ index);
  for (int i=0; i < nbPeers; i++) {
    HServerAddress adr=addresses.get(this.random.nextInt(addresses.size()));
    while (mapOfAdr.containsKey(adr.toString())) {
      adr=addresses.get(this.random.nextInt(addresses.size()));
    }
    LOG.info("Choosing peer " + adr.toString());
    mapOfAdr.put(adr.toString(),adr);
  }
  this.currentPeers.addAll(mapOfAdr.values());
}
