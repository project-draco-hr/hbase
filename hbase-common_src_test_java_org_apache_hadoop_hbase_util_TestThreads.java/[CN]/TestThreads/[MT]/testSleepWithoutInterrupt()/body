{
  Thread sleeper=new Thread(new Runnable(){
    @Override public void run(){
      LOG.debug("Sleeper thread: sleeping for " + SLEEP_TIME_MS);
      Threads.sleepWithoutInterrupt(SLEEP_TIME_MS);
      LOG.debug("Sleeper thread: finished sleeping");
      wasInterrupted.set(Thread.currentThread().isInterrupted());
    }
  }
);
  LOG.debug("Starting sleeper thread (" + SLEEP_TIME_MS + " ms)");
  sleeper.start();
  long startTime=System.currentTimeMillis();
  LOG.debug("Main thread: sleeping for 200 ms");
  Threads.sleep(200);
  LOG.debug("Interrupting the sleeper thread and sleeping for 500 ms");
  sleeper.interrupt();
  Threads.sleep(500);
  LOG.debug("Interrupting the sleeper thread and sleeping for 800 ms");
  sleeper.interrupt();
  Threads.sleep(800);
  LOG.debug("Interrupting the sleeper thread again");
  sleeper.interrupt();
  sleeper.join();
  assertTrue("sleepWithoutInterrupt did not preserve the thread's " + "interrupted status",wasInterrupted.get());
  long timeElapsed=System.currentTimeMillis() - startTime;
  assertTrue("Elapsed time " + timeElapsed + " ms is out of the expected "+ " sleep time of "+ SLEEP_TIME_MS,SLEEP_TIME_MS - timeElapsed < TOLERANCE_MS);
  LOG.debug("Target sleep time: " + SLEEP_TIME_MS + ", time elapsed: "+ timeElapsed);
}
