{
  super(path,trailer,size,cacheConf,hfs);
  trailer.expectMajorVersion(2);
  validateMinorVersion(path,trailer.getMinorVersion());
  HFileBlock.FSReaderV2 fsBlockReaderV2=new HFileBlock.FSReaderV2(fsdis,compressAlgo,fileSize,trailer.getMinorVersion(),hfs,path);
  this.fsBlockReader=fsBlockReaderV2;
  comparator=trailer.createComparator();
  dataBlockIndexReader=new HFileBlockIndex.BlockIndexReader(comparator,trailer.getNumDataIndexLevels(),this);
  metaBlockIndexReader=new HFileBlockIndex.BlockIndexReader(Bytes.BYTES_RAWCOMPARATOR,1);
  HFileBlock.BlockIterator blockIter=fsBlockReaderV2.blockRange(trailer.getLoadOnOpenDataOffset(),fileSize - trailer.getTrailerSize());
  dataBlockIndexReader.readMultiLevelIndexRoot(blockIter.nextBlockWithBlockType(BlockType.ROOT_INDEX),trailer.getDataIndexCount());
  metaBlockIndexReader.readRootIndex(blockIter.nextBlockWithBlockType(BlockType.ROOT_INDEX),trailer.getMetaIndexCount());
  fileInfo=new FileInfo();
  fileInfo.read(blockIter.nextBlockWithBlockType(BlockType.FILE_INFO).getByteStream());
  lastKey=fileInfo.get(FileInfo.LASTKEY);
  avgKeyLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_KEY_LEN));
  avgValueLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_VALUE_LEN));
  byte[] keyValueFormatVersion=fileInfo.get(HFileWriterV2.KEY_VALUE_VERSION);
  includesMemstoreTS=keyValueFormatVersion != null && Bytes.toInt(keyValueFormatVersion) == HFileWriterV2.KEY_VALUE_VER_WITH_MEMSTORE;
  fsBlockReaderV2.setIncludesMemstoreTS(includesMemstoreTS);
  if (includesMemstoreTS) {
    decodeMemstoreTS=Bytes.toLong(fileInfo.get(HFileWriterV2.MAX_MEMSTORE_TS_KEY)) > 0;
  }
  dataBlockEncoder=HFileDataBlockEncoderImpl.createFromFileInfo(fileInfo,preferredEncodingInCache);
  fsBlockReaderV2.setDataBlockEncoder(dataBlockEncoder);
  HFileBlock b;
  while ((b=blockIter.nextBlock()) != null) {
    loadOnOpenBlocks.add(b);
  }
}
