{
  super(path,trailer,size,cacheConf,hfs,conf);
  this.conf=conf;
  trailer.expectMajorVersion(getMajorVersion());
  validateMinorVersion(path,trailer.getMinorVersion());
  this.hfileContext=createHFileContext(fsdis,fileSize,hfs,path,trailer);
  HFileBlock.FSReaderImpl fsBlockReaderV2=new HFileBlock.FSReaderImpl(fsdis,fileSize,hfs,path,hfileContext);
  this.fsBlockReader=fsBlockReaderV2;
  comparator=trailer.createComparator();
  dataBlockIndexReader=new HFileBlockIndex.BlockIndexReader(comparator,trailer.getNumDataIndexLevels(),this);
  metaBlockIndexReader=new HFileBlockIndex.BlockIndexReader(KeyValue.RAW_COMPARATOR,1);
  HFileBlock.BlockIterator blockIter=fsBlockReaderV2.blockRange(trailer.getLoadOnOpenDataOffset(),fileSize - trailer.getTrailerSize());
  dataBlockIndexReader.readMultiLevelIndexRoot(blockIter.nextBlockWithBlockType(BlockType.ROOT_INDEX),trailer.getDataIndexCount());
  metaBlockIndexReader.readRootIndex(blockIter.nextBlockWithBlockType(BlockType.ROOT_INDEX),trailer.getMetaIndexCount());
  fileInfo=new FileInfo();
  fileInfo.read(blockIter.nextBlockWithBlockType(BlockType.FILE_INFO).getByteStream());
  lastKey=fileInfo.get(FileInfo.LASTKEY);
  avgKeyLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_KEY_LEN));
  avgValueLen=Bytes.toInt(fileInfo.get(FileInfo.AVG_VALUE_LEN));
  byte[] keyValueFormatVersion=fileInfo.get(HFileWriterV2.KEY_VALUE_VERSION);
  includesMemstoreTS=keyValueFormatVersion != null && Bytes.toInt(keyValueFormatVersion) == HFileWriterV2.KEY_VALUE_VER_WITH_MEMSTORE;
  fsBlockReaderV2.setIncludesMemstoreTS(includesMemstoreTS);
  if (includesMemstoreTS) {
    decodeMemstoreTS=Bytes.toLong(fileInfo.get(HFileWriterV2.MAX_MEMSTORE_TS_KEY)) > 0;
  }
  dataBlockEncoder=HFileDataBlockEncoderImpl.createFromFileInfo(fileInfo);
  fsBlockReaderV2.setDataBlockEncoder(dataBlockEncoder);
  HFileBlock b;
  while ((b=blockIter.nextBlock()) != null) {
    loadOnOpenBlocks.add(b);
  }
  if (cacheConf.shouldPrefetchOnOpen()) {
    PrefetchExecutor.request(path,new Runnable(){
      public void run(){
        try {
          long offset=0;
          long end=fileSize - getTrailer().getTrailerSize();
          HFileBlock prevBlock=null;
          while (offset < end) {
            if (Thread.interrupted()) {
              break;
            }
            long onDiskSize=-1;
            if (prevBlock != null) {
              onDiskSize=prevBlock.getNextBlockOnDiskSizeWithHeader();
            }
            HFileBlock block=readBlock(offset,onDiskSize,true,false,false,false,null,null);
            prevBlock=block;
            offset+=block.getOnDiskSizeWithHeader();
          }
        }
 catch (        IOException e) {
          if (LOG.isTraceEnabled()) {
            LOG.trace("Exception encountered while prefetching " + path + ":",e);
          }
        }
catch (        Exception e) {
          LOG.warn("Exception encountered while prefetching " + path + ":",e);
        }
 finally {
          PrefetchExecutor.complete(path);
        }
      }
    }
);
  }
}
