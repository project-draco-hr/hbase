{
  CancellableRegionServerCallable<MultiResponse> callable=new CancellableRegionServerCallable<MultiResponse>(connection,getName(),rm.getRow(),rpcControllerFactory.newController(),writeRpcTimeout,new RetryingTimeTracker().start()){
    @Override protected MultiResponse rpcCall() throws Exception {
      CompareType compareType=CompareType.valueOf(compareOp.name());
      MultiRequest request=RequestConverter.buildMutateRequest(getLocation().getRegionInfo().getRegionName(),row,family,qualifier,new BinaryComparator(value),compareType,rm);
      ClientProtos.MultiResponse response=doMulti(request);
      ClientProtos.RegionActionResult res=response.getRegionActionResultList().get(0);
      if (res.hasException()) {
        Throwable ex=ProtobufUtil.toException(res.getException());
        if (ex instanceof IOException) {
          throw (IOException)ex;
        }
        throw new IOException("Failed to checkAndMutate row: " + Bytes.toStringBinary(rm.getRow()),ex);
      }
      return ResponseConverter.getResults(request,response,getRpcControllerCellScanner());
    }
  }
;
  Object[] results=new Object[rm.getMutations().size()];
  AsyncRequestFuture ars=multiAp.submitAll(pool,tableName,rm.getMutations(),null,results,callable,-1);
  ars.waitUntilDone();
  if (ars.hasError()) {
    throw ars.getErrors();
  }
  return ((Result)results[0]).getExists();
}
