{
  if (get.isCheckExistenceOnly() != checkExistenceOnly || get.getConsistency() == null) {
    get=ReflectionUtils.newInstance(get.getClass(),get);
    get.setCheckExistenceOnly(checkExistenceOnly);
    if (get.getConsistency() == null) {
      get.setConsistency(defaultConsistency);
    }
  }
  if (get.getConsistency() == Consistency.STRONG) {
    final Get getReq=get;
    RegionServerCallable<Result> callable=new RegionServerCallable<Result>(this.connection,getName(),get.getRow()){
      @Override public Result call(      int callTimeout) throws IOException {
        ClientProtos.GetRequest request=RequestConverter.buildGetRequest(getLocation().getRegionInfo().getRegionName(),getReq);
        PayloadCarryingRpcController controller=rpcControllerFactory.newController();
        controller.setPriority(tableName);
        controller.setCallTimeout(callTimeout);
        try {
          ClientProtos.GetResponse response=getStub().get(controller,request);
          if (response == null)           return null;
          return ProtobufUtil.toResult(response.getResult(),controller.cellScanner());
        }
 catch (        ServiceException se) {
          throw ProtobufUtil.getRemoteException(se);
        }
      }
    }
;
    return rpcCallerFactory.<Result>newCaller().callWithRetries(callable,this.operationTimeout);
  }
  RpcRetryingCallerWithReadReplicas callable=new RpcRetryingCallerWithReadReplicas(rpcControllerFactory,tableName,this.connection,get,pool,connConfiguration.getRetriesNumber(),operationTimeout,connConfiguration.getPrimaryCallTimeoutMicroSecond());
  return callable.call();
}
