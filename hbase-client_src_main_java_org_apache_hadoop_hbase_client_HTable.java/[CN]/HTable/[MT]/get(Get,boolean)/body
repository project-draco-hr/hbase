{
  if (get.isCheckExistenceOnly() != checkExistenceOnly || get.getConsistency() == null) {
    get=ReflectionUtils.newInstance(get.getClass(),get);
    get.setCheckExistenceOnly(checkExistenceOnly);
    if (get.getConsistency() == null) {
      get.setConsistency(defaultConsistency);
    }
  }
  if (get.getConsistency() == Consistency.STRONG) {
    final Get configuredGet=get;
    RegionServerCallable<Result> callable=new RegionServerCallable<Result>(this.connection,this.rpcControllerFactory,getName(),get.getRow()){
      @Override protected Result rpcCall() throws Exception {
        ClientProtos.GetRequest request=RequestConverter.buildGetRequest(getLocation().getRegionInfo().getRegionName(),configuredGet);
        ClientProtos.GetResponse response=getStub().get(getRpcController(),request);
        if (response == null)         return null;
        return ProtobufUtil.toResult(response.getResult(),getRpcControllerCellScanner());
      }
    }
;
    return rpcCallerFactory.<Result>newCaller(readRpcTimeout).callWithRetries(callable,this.operationTimeout);
  }
  RpcRetryingCallerWithReadReplicas callable=new RpcRetryingCallerWithReadReplicas(rpcControllerFactory,tableName,this.connection,get,pool,connConfiguration.getRetriesNumber(),operationTimeout,connConfiguration.getPrimaryCallTimeoutMicroSecond());
  return callable.call(operationTimeout);
}
