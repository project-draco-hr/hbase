{
  Filter filter=new SingleColumnValueExcludeFilter(COLUMN_FAMILY,COLUMN_QUALIFIER,CompareOp.EQUAL,VAL_1);
  List<Cell> kvs=new ArrayList<Cell>();
  KeyValue kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1));
  kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,VAL_1));
  kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1));
  filter.filterRowCells(kvs);
  assertEquals("resultSize",kvs.size(),2);
  assertTrue("leftKV1",KeyValue.COMPARATOR.compare(kvs.get(0),kv) == 0);
  assertTrue("leftKV2",KeyValue.COMPARATOR.compare(kvs.get(1),kv) == 0);
  assertFalse("allRemainingWhenMatch",filter.filterAllRemaining());
  filter.reset();
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("otherColumn",filter.filterKeyValue(kv) == Filter.ReturnCode.INCLUDE);
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,VAL_2);
  assertTrue("testedMismatch",filter.filterKeyValue(kv) == Filter.ReturnCode.NEXT_ROW);
  kv=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("otherColumn",filter.filterKeyValue(kv) == Filter.ReturnCode.NEXT_ROW);
}
