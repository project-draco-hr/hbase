{
  RpcServer rpcServer=HBaseRPC.getServer(new TestImpl(),new Class<?>[]{TestProtocol.class},"localhost",9999,2,0,conf.getBoolean("hbase.rpc.verbose",false),conf,0);
  TestProtocol proxy=null;
  try {
    rpcServer.start();
    InetSocketAddress isa=new InetSocketAddress("localhost",9999);
    proxy=(TestProtocol)HBaseRPC.waitForProxy(TestProtocol.class,TestProtocol.VERSION,isa,conf,-1,8000,8000);
    String stringResult=proxy.echo("foo");
    assertEquals(stringResult,"foo");
    stringResult=proxy.echo((String)null);
    assertEquals(stringResult,null);
    Text utf8Result=(Text)proxy.echo(new Text("hello world"));
    assertEquals(utf8Result,new Text("hello world"));
    utf8Result=(Text)proxy.echo((Text)null);
    assertEquals(utf8Result,null);
    EnumDescriptorProto sendProto=EnumDescriptorProto.newBuilder().setName("test").build();
    EnumDescriptorProto retProto=proxy.exchangeProto(sendProto);
    assertEquals(sendProto,retProto);
    assertNotSame(sendProto,retProto);
  }
  finally {
    rpcServer.stop();
    if (proxy != null) {
      HBaseRPC.stopProxy(proxy);
    }
  }
}
