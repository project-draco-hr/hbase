{
  HLog log=HLogFactory.createHLog(fs,hbaseDir,logName,conf);
  long ts=System.currentTimeMillis();
  WALEdit edit=new WALEdit();
  final AtomicLong sequenceId=new AtomicLong(0);
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("1"),ts,value));
  log.append(info,tableName,edit,ts,htd,sequenceId);
  edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("2"),ts + 1,value));
  log.append(info,tableName,edit,ts + 1,htd,sequenceId);
  log.rollWriter();
  Thread.sleep(1);
  long ts1=System.currentTimeMillis();
  edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("3"),ts1 + 1,value));
  log.append(info,tableName,edit,ts1 + 1,htd,sequenceId);
  edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("4"),ts1 + 2,value));
  log.append(info,tableName,edit,ts1 + 2,htd,sequenceId);
  log.close();
  HLogInputFormat input=new HLogInputFormat();
  Configuration jobConf=new Configuration(conf);
  jobConf.set("mapred.input.dir",logDir.toString());
  jobConf.setLong(HLogInputFormat.END_TIME_KEY,ts);
  List<InputSplit> splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(1,splits.size());
  testSplit(splits.get(0),Bytes.toBytes("1"));
  jobConf.setLong(HLogInputFormat.START_TIME_KEY,ts + 1);
  jobConf.setLong(HLogInputFormat.END_TIME_KEY,ts1 + 1);
  splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(2,splits.size());
  testSplit(splits.get(0),Bytes.toBytes("2"));
  testSplit(splits.get(1),Bytes.toBytes("3"));
}
