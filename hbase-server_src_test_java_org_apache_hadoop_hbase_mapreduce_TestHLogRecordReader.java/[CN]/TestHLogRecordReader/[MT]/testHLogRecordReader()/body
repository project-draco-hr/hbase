{
  HLog log=new HLog(fs,logDir,oldLogDir,conf);
  byte[] value=Bytes.toBytes("value");
  WALEdit edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("1"),System.currentTimeMillis(),value));
  log.append(info,tableName,edit,System.currentTimeMillis(),htd);
  Thread.sleep(1);
  long secondTs=System.currentTimeMillis();
  log.rollWriter();
  edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("2"),System.currentTimeMillis(),value));
  log.append(info,tableName,edit,System.currentTimeMillis(),htd);
  log.close();
  long thirdTs=System.currentTimeMillis();
  HLogInputFormat input=new HLogInputFormat();
  Configuration jobConf=new Configuration(conf);
  jobConf.set("mapred.input.dir",logDir.toString());
  List<InputSplit> splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(2,splits.size());
  testSplit(splits.get(0),Bytes.toBytes("1"));
  testSplit(splits.get(1),Bytes.toBytes("2"));
  jobConf.setLong(HLogInputFormat.END_TIME_KEY,secondTs - 1);
  splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(1,splits.size());
  testSplit(splits.get(0),Bytes.toBytes("1"));
  jobConf.setLong(HLogInputFormat.END_TIME_KEY,Long.MAX_VALUE);
  jobConf.setLong(HLogInputFormat.START_TIME_KEY,thirdTs);
  splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(2,splits.size());
  testSplit(splits.get(0));
  testSplit(splits.get(1));
}
