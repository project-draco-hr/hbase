{
  Enum<?>[] storageTypes=locatedBlock.getStorageTypes();
  DatanodeInfo[] datanodeInfos=locatedBlock.getLocations();
  boolean connectToDnViaHostname=conf.getBoolean(DFS_CLIENT_USE_DN_HOSTNAME,DFS_CLIENT_USE_DN_HOSTNAME_DEFAULT);
  final int timeoutMs=conf.getInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,HdfsServerConstants.READ_TIMEOUT);
  ExtendedBlock blockCopy=new ExtendedBlock(locatedBlock.getBlock());
  blockCopy.setNumBytes(locatedBlock.getBlockSize());
  ClientOperationHeaderProto header=ClientOperationHeaderProto.newBuilder().setBaseHeader(BaseHeaderProto.newBuilder().setBlock(PBHelper.convert(blockCopy)).setToken(PBHelper.convert(locatedBlock.getBlockToken()))).setClientName(clientName).build();
  ChecksumProto checksumProto=DataTransferProtoUtil.toProto(summer);
  final OpWriteBlockProto.Builder writeBlockProtoBuilder=OpWriteBlockProto.newBuilder().setHeader(header).setStage(OpWriteBlockProto.BlockConstructionStage.valueOf(stage.name())).setPipelineSize(1).setMinBytesRcvd(locatedBlock.getBlock().getNumBytes()).setMaxBytesRcvd(maxBytesRcvd).setLatestGenerationStamp(latestGS).setRequestedChecksum(checksumProto).setCachingStrategy(CachingStrategyProto.newBuilder().setDropBehind(true).build());
  List<Future<Channel>> futureList=new ArrayList<>(datanodeInfos.length);
  for (int i=0; i < datanodeInfos.length; i++) {
    final DatanodeInfo dnInfo=datanodeInfos[i];
    final Enum<?> storageType=storageTypes[i];
    final Promise<Channel> promise=eventLoop.newPromise();
    futureList.add(promise);
    String dnAddr=dnInfo.getXferAddr(connectToDnViaHostname);
    new Bootstrap().group(eventLoop).channel(NioSocketChannel.class).option(CONNECT_TIMEOUT_MILLIS,timeoutMs).handler(new ChannelInitializer<Channel>(){
      @Override protected void initChannel(      Channel ch) throws Exception {
      }
    }
).connect(NetUtils.createSocketAddr(dnAddr)).addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        if (future.isSuccess()) {
          initialize(conf,future.channel(),dnInfo,storageType,writeBlockProtoBuilder,timeoutMs,client,locatedBlock.getBlockToken(),promise);
        }
 else {
          promise.tryFailure(future.cause());
        }
      }
    }
);
  }
  return futureList;
}
