{
  Configuration conf=dfs.getConf();
  FSUtils fsUtils=FSUtils.getInstance(dfs,conf);
  DFSClient client=dfs.getClient();
  String clientName=client.getClientName();
  ClientProtocol namenode=client.getNamenode();
  HdfsFileStatus stat;
  try {
    stat=FILE_CREATER.create(namenode,src,FsPermission.getFileDefault().applyUMask(FsPermission.getUMask(conf)),clientName,new EnumSetWritable<CreateFlag>(overwrite ? EnumSet.of(CREATE,OVERWRITE) : EnumSet.of(CREATE)),createParent,replication,blockSize);
  }
 catch (  Exception e) {
    if (e instanceof RemoteException) {
      throw (RemoteException)e;
    }
 else {
      throw new NameNodeException(e);
    }
  }
  beginFileLease(client,src,stat.getFileId());
  boolean succ=false;
  LocatedBlock locatedBlock=null;
  List<Future<Channel>> futureList=null;
  try {
    DataChecksum summer=createChecksum(client);
    locatedBlock=namenode.addBlock(src,client.getClientName(),null,null,stat.getFileId(),null);
    List<Channel> datanodeList=new ArrayList<>();
    futureList=connectToDataNodes(conf,client,clientName,locatedBlock,0L,0L,PIPELINE_SETUP_CREATE,summer,eventLoop);
    for (    Future<Channel> future : futureList) {
      datanodeList.add(future.syncUninterruptibly().getNow());
    }
    succ=true;
    return new FanOutOneBlockAsyncDFSOutput(conf,fsUtils,dfs,client,namenode,clientName,src,stat.getFileId(),locatedBlock,eventLoop,datanodeList,summer,ALLOC);
  }
  finally {
    if (!succ) {
      if (futureList != null) {
        for (        Future<Channel> f : futureList) {
          f.addListener(new FutureListener<Channel>(){
            @Override public void operationComplete(            Future<Channel> future) throws Exception {
              if (future.isSuccess()) {
                future.getNow().close();
              }
            }
          }
);
        }
      }
      endFileLease(client,src,stat.getFileId());
      fsUtils.recoverFileLease(dfs,new Path(src),conf,new CancelOnClose(client));
    }
  }
}
