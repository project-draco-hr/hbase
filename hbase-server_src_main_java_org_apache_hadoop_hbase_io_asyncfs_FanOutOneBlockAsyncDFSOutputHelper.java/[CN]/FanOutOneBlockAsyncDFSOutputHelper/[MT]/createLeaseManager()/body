{
  try {
    final Method beginFileLeaseMethod=DFSClient.class.getDeclaredMethod("beginFileLease",long.class,DFSOutputStream.class);
    beginFileLeaseMethod.setAccessible(true);
    final Method endFileLeaseMethod=DFSClient.class.getDeclaredMethod("endFileLease",long.class);
    endFileLeaseMethod.setAccessible(true);
    return new LeaseManager(){
      @Override public void begin(      DFSClient client,      String src,      long inodeId){
        try {
          beginFileLeaseMethod.invoke(client,inodeId,null);
        }
 catch (        IllegalAccessException|InvocationTargetException e) {
          throw new RuntimeException(e);
        }
      }
      @Override public void end(      DFSClient client,      String src,      long inodeId){
        try {
          endFileLeaseMethod.invoke(client,inodeId);
        }
 catch (        IllegalAccessException|InvocationTargetException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  NoSuchMethodException e) {
    LOG.warn("No inodeId related lease methods found, should be hadoop 2.4-",e);
  }
  try {
    final Method beginFileLeaseMethod=DFSClient.class.getDeclaredMethod("beginFileLease",String.class,DFSOutputStream.class);
    beginFileLeaseMethod.setAccessible(true);
    final Method endFileLeaseMethod=DFSClient.class.getDeclaredMethod("endFileLease",String.class);
    endFileLeaseMethod.setAccessible(true);
    return new LeaseManager(){
      @Override public void begin(      DFSClient client,      String src,      long inodeId){
        try {
          beginFileLeaseMethod.invoke(client,src,null);
        }
 catch (        IllegalAccessException|InvocationTargetException e) {
          throw new RuntimeException(e);
        }
      }
      @Override public void end(      DFSClient client,      String src,      long inodeId){
        try {
          endFileLeaseMethod.invoke(client,src);
        }
 catch (        IllegalAccessException|InvocationTargetException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  NoSuchMethodException e) {
    throw new Error(e);
  }
}
