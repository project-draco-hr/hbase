{
  ZooKeeperWatcher zk=e.getRegionServerServices().getZooKeeper();
  try {
    labelsCache=VisibilityLabelsCache.createAndGet(zk,this.conf);
  }
 catch (  IOException ioe) {
    LOG.error("Error creating VisibilityLabelsCache",ioe);
    throw ioe;
  }
  this.scanLabelGenerators=VisibilityUtils.getScanLabelGenerators(this.conf);
  Pair<List<String>,List<String>> superUsersAndGroups=VisibilityUtils.getSystemAndSuperUsers(this.conf);
  this.superUsers=superUsersAndGroups.getFirst();
  this.superGroups=superUsersAndGroups.getSecond();
  if (e.getRegion().getRegionInfo().getTable().equals(LABELS_TABLE_NAME)) {
    this.labelsRegion=e.getRegion();
    Pair<Map<String,Integer>,Map<String,List<Integer>>> labelsAndUserAuths=extractLabelsAndAuths(getExistingLabelsWithAuths());
    Map<String,Integer> labels=labelsAndUserAuths.getFirst();
    Map<String,List<Integer>> userAuths=labelsAndUserAuths.getSecond();
    addSystemLabel(this.labelsRegion,labels,userAuths);
    int ordinal=SYSTEM_LABEL_ORDINAL;
    for (    Integer i : labels.values()) {
      if (i > ordinal) {
        ordinal=i;
      }
    }
    this.ordinalCounter.set(ordinal + 1);
    if (labels.size() > 0) {
      byte[] serialized=VisibilityUtils.getDataToWriteToZooKeeper(labels);
      this.labelsCache.writeToZookeeper(serialized,true);
      this.labelsCache.refreshLabelsCache(serialized);
    }
    if (userAuths.size() > 0) {
      byte[] serialized=VisibilityUtils.getUserAuthsDataToWriteToZooKeeper(userAuths);
      this.labelsCache.writeToZookeeper(serialized,false);
      this.labelsCache.refreshUserAuthsCache(serialized);
    }
  }
}
