{
  StringBuilder visibilityString=new StringBuilder();
  for (  Tag tag : tags) {
    if (tag.getType() == TagType.VISIBILITY_TAG_TYPE) {
      if (visibilityString.length() != 0) {
        visibilityString.append(VisibilityConstants.CLOSED_PARAN).append(VisibilityConstants.OR_OPERATOR);
      }
      int offset=tag.getValueOffset();
      int endOffset=offset + tag.getValueLength();
      boolean expressionStart=true;
      while (offset < endOffset) {
        Pair<Integer,Integer> result=TagUtil.readVIntValuePart(tag,offset);
        int currLabelOrdinal=result.getFirst();
        if (currLabelOrdinal < 0) {
          int temp=-currLabelOrdinal;
          String label=this.labelsCache.getLabel(temp);
          if (expressionStart) {
            visibilityString.append(VisibilityConstants.OPEN_PARAN).append(VisibilityConstants.NOT_OPERATOR).append(CellVisibility.quote(label));
          }
 else {
            visibilityString.append(VisibilityConstants.AND_OPERATOR).append(VisibilityConstants.NOT_OPERATOR).append(CellVisibility.quote(label));
          }
        }
 else {
          String label=this.labelsCache.getLabel(currLabelOrdinal);
          if (expressionStart) {
            visibilityString.append(VisibilityConstants.OPEN_PARAN).append(CellVisibility.quote(label));
          }
 else {
            visibilityString.append(VisibilityConstants.AND_OPERATOR).append(CellVisibility.quote(label));
          }
        }
        expressionStart=false;
        offset+=result.getSecond();
      }
    }
  }
  if (visibilityString.length() != 0) {
    visibilityString.append(VisibilityConstants.CLOSED_PARAN);
    return Bytes.toBytes(visibilityString.toString());
  }
  return null;
}
