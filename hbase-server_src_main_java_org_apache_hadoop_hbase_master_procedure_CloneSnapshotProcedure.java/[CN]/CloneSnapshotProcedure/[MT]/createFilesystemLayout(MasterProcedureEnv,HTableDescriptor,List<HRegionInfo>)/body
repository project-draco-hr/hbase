{
  return createFsLayout(env,hTableDescriptor,newRegions,new CreateHdfsRegions(){
    @Override public List<HRegionInfo> createHdfsRegions(    final MasterProcedureEnv env,    final Path tableRootDir,    final TableName tableName,    final List<HRegionInfo> newRegions) throws IOException {
      final MasterFileSystem mfs=env.getMasterServices().getMasterFileSystem();
      final FileSystem fs=mfs.getFileSystem();
      final Path rootDir=mfs.getRootDir();
      final Configuration conf=env.getMasterConfiguration();
      final ForeignExceptionDispatcher monitorException=new ForeignExceptionDispatcher();
      getMonitorStatus().setStatus("Clone snapshot - creating regions for table: " + tableName);
      try {
        Path snapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshot,rootDir);
        SnapshotManifest manifest=SnapshotManifest.open(conf,fs,snapshotDir,snapshot);
        RestoreSnapshotHelper restoreHelper=new RestoreSnapshotHelper(conf,fs,manifest,hTableDescriptor,tableRootDir,monitorException,monitorStatus);
        RestoreSnapshotHelper.RestoreMetaChanges metaChanges=restoreHelper.restoreHdfsRegions();
        Preconditions.checkArgument(!metaChanges.hasRegionsToRestore(),"A clone should not have regions to restore");
        Preconditions.checkArgument(!metaChanges.hasRegionsToRemove(),"A clone should not have regions to remove");
        String msg="Clone snapshot=" + snapshot.getName() + " on table="+ tableName+ " completed!";
        LOG.info(msg);
        monitorStatus.setStatus(msg + " Waiting for table to be enabled...");
        return metaChanges.getRegionsToAdd();
      }
 catch (      Exception e) {
        String msg="clone snapshot=" + ClientSnapshotDescriptionUtils.toString(snapshot) + " failed because "+ e.getMessage();
        LOG.error(msg,e);
        IOException rse=new RestoreSnapshotException(msg,e,snapshot);
        monitorException.receive(new ForeignException("Master CloneSnapshotProcedure",rse));
        throw rse;
      }
    }
  }
);
}
