{
  super.serializeStateData(stream);
  MasterProcedureProtos.CloneSnapshotStateData.Builder cloneSnapshotMsg=MasterProcedureProtos.CloneSnapshotStateData.newBuilder().setUserInfo(MasterProcedureUtil.toProtoUserInfo(getUser())).setSnapshot(this.snapshot).setTableSchema(ProtobufUtil.convertToTableSchema(hTableDescriptor));
  if (newRegions != null) {
    for (    HRegionInfo hri : newRegions) {
      cloneSnapshotMsg.addRegionInfo(HRegionInfo.convert(hri));
    }
  }
  if (!parentsToChildrenPairMap.isEmpty()) {
    final Iterator<Map.Entry<String,Pair<String,String>>> it=parentsToChildrenPairMap.entrySet().iterator();
    while (it.hasNext()) {
      final Map.Entry<String,Pair<String,String>> entry=it.next();
      MasterProcedureProtos.RestoreParentToChildRegionsPair.Builder parentToChildrenPair=MasterProcedureProtos.RestoreParentToChildRegionsPair.newBuilder().setParentRegionName(entry.getKey()).setChild1RegionName(entry.getValue().getFirst()).setChild2RegionName(entry.getValue().getSecond());
      cloneSnapshotMsg.addParentToChildRegionsPairList(parentToChildrenPair);
    }
  }
  cloneSnapshotMsg.build().writeDelimitedTo(stream);
}
