{
  StripeCompactor sc=mock(StripeCompactor.class);
  assertTrue(policy.needsCompactions(si,al()));
  StripeCompactionPolicy.StripeCompactionRequest scr=policy.selectCompaction(si,al(),false);
  verifyCollectionsEqual(sfs,scr.getRequest().getFiles());
  scr.execute(sc);
  verify(sc,times(1)).compact(eq(scr.getRequest()),argThat(new ArgumentMatcher<List<byte[]>>(){
    @Override public boolean matches(    Object argument){
      @SuppressWarnings("unchecked") List<byte[]> other=(List<byte[]>)argument;
      if (other.size() != boundaries.size())       return false;
      for (int i=0; i < other.size(); ++i) {
        if (!Bytes.equals(other.get(i),boundaries.get(i)))         return false;
      }
      return true;
    }
  }
),dropDeletesFrom == null ? isNull(byte[].class) : aryEq(dropDeletesFrom),dropDeletesTo == null ? isNull(byte[].class) : aryEq(dropDeletesTo));
}
