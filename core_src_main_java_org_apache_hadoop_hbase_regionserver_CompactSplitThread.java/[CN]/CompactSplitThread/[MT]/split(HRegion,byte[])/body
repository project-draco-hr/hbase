{
  final HRegionInfo oldRegionInfo=region.getRegionInfo();
  final long startTime=System.currentTimeMillis();
  final HRegion[] newRegions=region.splitRegion(midKey);
  if (newRegions == null) {
    return;
  }
  HTable t=null;
  if (region.getRegionInfo().isMetaTable()) {
    if (this.root == null) {
      this.root=new HTable(conf,ROOT_TABLE_NAME);
    }
    t=root;
  }
 else {
    if (meta == null) {
      meta=new HTable(conf,META_TABLE_NAME);
    }
    t=meta;
  }
  oldRegionInfo.setOffline(true);
  oldRegionInfo.setSplit(true);
  this.server.removeFromOnlineRegions(oldRegionInfo);
  Put put=new Put(oldRegionInfo.getRegionName());
  put.add(CATALOG_FAMILY,REGIONINFO_QUALIFIER,Writables.getBytes(oldRegionInfo));
  put.add(CATALOG_FAMILY,SERVER_QUALIFIER,EMPTY_BYTE_ARRAY);
  put.add(CATALOG_FAMILY,STARTCODE_QUALIFIER,EMPTY_BYTE_ARRAY);
  put.add(CATALOG_FAMILY,SPLITA_QUALIFIER,Writables.getBytes(newRegions[0].getRegionInfo()));
  put.add(CATALOG_FAMILY,SPLITB_QUALIFIER,Writables.getBytes(newRegions[1].getRegionInfo()));
  t.put(put);
  for (int i=0; i < newRegions.length; i++) {
    put=new Put(newRegions[i].getRegionName());
    put.add(CATALOG_FAMILY,REGIONINFO_QUALIFIER,Writables.getBytes(newRegions[i].getRegionInfo()));
    t.put(put);
  }
  server.reportSplit(oldRegionInfo,newRegions[0].getRegionInfo(),newRegions[1].getRegionInfo());
  LOG.info("region split, META updated, and report to master all" + " successful. Old region=" + oldRegionInfo.toString() + ", new regions: "+ newRegions[0].toString()+ ", "+ newRegions[1].toString()+ ". Split took "+ StringUtils.formatTimeDiff(System.currentTimeMillis(),startTime));
}
