{
  Set<String> rackSkipSet=new HashSet<String>();
  rackSkipSet.add(primaryRack);
  ServerName[] favoredNodes=new ServerName[2];
  String secondaryRack=getOneRandomRack(rackSkipSet);
  List<ServerName> serverList=getServersFromRack(secondaryRack);
  if (serverList.size() >= 2) {
    ServerName secondaryRS=getOneRandomServer(secondaryRack);
    Set<ServerName> skipServerSet=new HashSet<ServerName>();
    skipServerSet.add(secondaryRS);
    ServerName tertiaryRS=getOneRandomServer(secondaryRack,skipServerSet);
    if (secondaryRS == null || tertiaryRS == null) {
      LOG.error("Cannot place the secondary and terinary" + "region server for region " + regionInfo.getRegionNameAsString());
    }
    favoredNodes[0]=secondaryRS;
    favoredNodes[1]=tertiaryRS;
  }
 else {
    favoredNodes[0]=getOneRandomServer(secondaryRack);
    if (getTotalNumberOfRacks() == 2) {
      Set<ServerName> serverSkipSet=new HashSet<ServerName>();
      serverSkipSet.add(primaryRS);
      favoredNodes[1]=getOneRandomServer(primaryRack,serverSkipSet);
    }
 else {
      rackSkipSet.add(secondaryRack);
      String tertiaryRandomRack=getOneRandomRack(rackSkipSet);
      favoredNodes[1]=getOneRandomServer(tertiaryRandomRack);
    }
  }
  return favoredNodes;
}
