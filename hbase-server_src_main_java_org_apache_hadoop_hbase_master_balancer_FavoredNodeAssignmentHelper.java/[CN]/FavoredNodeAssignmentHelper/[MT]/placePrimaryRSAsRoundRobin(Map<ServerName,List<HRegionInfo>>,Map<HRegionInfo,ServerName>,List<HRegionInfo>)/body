{
  List<String> rackList=new ArrayList<String>(rackToRegionServerMap.size());
  rackList.addAll(rackToRegionServerMap.keySet());
  int rackIndex=random.nextInt(rackList.size());
  int maxRackSize=0;
  for (  Map.Entry<String,List<ServerName>> r : rackToRegionServerMap.entrySet()) {
    if (r.getValue().size() > maxRackSize) {
      maxRackSize=r.getValue().size();
    }
  }
  int numIterations=0;
  int firstServerIndex=random.nextInt(maxRackSize);
  int serverIndex=firstServerIndex;
  for (  HRegionInfo regionInfo : regions) {
    List<ServerName> currentServerList;
    String rackName;
    while (true) {
      rackName=rackList.get(rackIndex);
      numIterations++;
      currentServerList=rackToRegionServerMap.get(rackName);
      if (serverIndex >= currentServerList.size()) {
        if (numIterations % rackList.size() == 0) {
          if (++serverIndex >= maxRackSize)           serverIndex=0;
        }
        if ((++rackIndex) >= rackList.size()) {
          rackIndex=0;
        }
      }
 else       break;
    }
    ServerName currentServer=currentServerList.get(serverIndex);
    primaryRSMap.put(regionInfo,currentServer);
    List<HRegionInfo> regionsForServer=assignmentMap.get(currentServer);
    if (regionsForServer == null) {
      regionsForServer=new ArrayList<HRegionInfo>();
      assignmentMap.put(currentServer,regionsForServer);
    }
    regionsForServer.add(regionInfo);
    if (numIterations % rackList.size() == 0) {
      ++serverIndex;
    }
    if ((++rackIndex) >= rackList.size()) {
      rackIndex=0;
    }
  }
}
