{
  Set<String> rackSkipSet=new HashSet<String>();
  rackSkipSet.add(primaryRack);
  String secondaryRack=getOneRandomRack(rackSkipSet);
  List<ServerName> serverList=getServersFromRack(secondaryRack);
  Set<ServerName> serverSet=new HashSet<ServerName>();
  serverSet.addAll(serverList);
  ServerName[] favoredNodes;
  if (serverList.size() >= 2) {
    Set<HRegionInfo> primaries=serverToPrimaries.get(primaryRS);
    Set<ServerName> skipServerSet=new HashSet<ServerName>();
    while (true) {
      ServerName[] secondaryAndTertiary=null;
      if (primaries.size() > 1) {
        for (        HRegionInfo primary : primaries) {
          secondaryAndTertiary=secondaryAndTertiaryMap.get(primary);
          if (secondaryAndTertiary != null) {
            if (regionServerToRackMap.get(secondaryAndTertiary[0]).equals(secondaryRack)) {
              skipServerSet.add(secondaryAndTertiary[0]);
            }
            if (regionServerToRackMap.get(secondaryAndTertiary[1]).equals(secondaryRack)) {
              skipServerSet.add(secondaryAndTertiary[1]);
            }
          }
        }
      }
      if (skipServerSet.size() + 2 <= serverSet.size())       break;
      skipServerSet.clear();
      rackSkipSet.add(secondaryRack);
      if (rackSkipSet.size() == getTotalNumberOfRacks()) {
        skipServerSet.remove(secondaryAndTertiary[0]);
        skipServerSet.remove(secondaryAndTertiary[1]);
        break;
      }
      secondaryRack=getOneRandomRack(rackSkipSet);
      serverList=getServersFromRack(secondaryRack);
      serverSet=new HashSet<ServerName>();
      serverSet.addAll(serverList);
    }
    ServerName secondaryRS=getOneRandomServer(secondaryRack,skipServerSet);
    skipServerSet.add(secondaryRS);
    ServerName tertiaryRS=getOneRandomServer(secondaryRack,skipServerSet);
    if (secondaryRS == null || tertiaryRS == null) {
      LOG.error("Cannot place the secondary and tertiary" + " region server for region " + regionInfo.getRegionNameAsString());
    }
    favoredNodes=new ServerName[2];
    favoredNodes[0]=secondaryRS;
    favoredNodes[1]=tertiaryRS;
  }
 else {
    favoredNodes=new ServerName[2];
    ServerName secondary=getOneRandomServer(secondaryRack);
    favoredNodes[0]=secondary;
    if (getTotalNumberOfRacks() == 2) {
      Set<ServerName> serverSkipSet=new HashSet<ServerName>();
      serverSkipSet.add(primaryRS);
      favoredNodes[1]=getOneRandomServer(primaryRack,serverSkipSet);
    }
 else {
      rackSkipSet.add(secondaryRack);
      String tertiaryRandomRack=getOneRandomRack(rackSkipSet);
      favoredNodes[1]=getOneRandomServer(tertiaryRandomRack);
    }
  }
  return favoredNodes;
}
