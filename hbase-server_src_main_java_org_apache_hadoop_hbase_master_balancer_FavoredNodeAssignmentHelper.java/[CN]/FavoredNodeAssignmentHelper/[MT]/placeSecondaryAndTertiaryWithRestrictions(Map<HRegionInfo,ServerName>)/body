{
  Map<ServerName,Set<HRegionInfo>> serverToPrimaries=mapRSToPrimaries(primaryRSMap);
  Map<HRegionInfo,ServerName[]> secondaryAndTertiaryMap=new HashMap<HRegionInfo,ServerName[]>();
  for (  Entry<HRegionInfo,ServerName> entry : primaryRSMap.entrySet()) {
    HRegionInfo regionInfo=entry.getKey();
    ServerName primaryRS=entry.getValue();
    try {
      String primaryRack=rackManager.getRack(primaryRS);
      ServerName[] favoredNodes=null;
      if (getTotalNumberOfRacks() == 1) {
        favoredNodes=singleRackCase(regionInfo,primaryRS,primaryRack);
      }
 else {
        favoredNodes=multiRackCaseWithRestrictions(serverToPrimaries,secondaryAndTertiaryMap,primaryRack,primaryRS,regionInfo);
      }
      if (favoredNodes != null) {
        secondaryAndTertiaryMap.put(regionInfo,favoredNodes);
        LOG.debug("Place the secondary and tertiary region server for region " + regionInfo.getRegionNameAsString());
      }
    }
 catch (    Exception e) {
      LOG.warn("Cannot place the favored nodes for region " + regionInfo.getRegionNameAsString() + " because "+ e,e);
      continue;
    }
  }
  return secondaryAndTertiaryMap;
}
