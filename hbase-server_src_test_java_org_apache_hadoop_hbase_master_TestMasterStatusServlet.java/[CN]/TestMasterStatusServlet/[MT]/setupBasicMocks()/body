{
  conf=HBaseConfiguration.create();
  master=Mockito.mock(HMaster.class);
  Mockito.doReturn(FAKE_HOST).when(master).getServerName();
  Mockito.doReturn(conf).when(master).getConfiguration();
  ServerManager serverManager=Mockito.mock(ServerManager.class);
  Mockito.doReturn(1.0).when(serverManager).getAverageLoad();
  Mockito.doReturn(serverManager).when(master).getServerManager();
  AssignmentManager am=Mockito.mock(AssignmentManager.class);
  RegionStates rs=Mockito.mock(RegionStates.class);
  NavigableMap<String,RegionState> regionsInTransition=Maps.newTreeMap();
  regionsInTransition.put("r1",new RegionState(FAKE_HRI,RegionState.State.CLOSING,12345L,FAKE_HOST));
  Mockito.doReturn(rs).when(am).getRegionStates();
  Mockito.doReturn(regionsInTransition).when(rs).getRegionsInTransition();
  Mockito.doReturn(am).when(master).getAssignmentManager();
  ZooKeeperWatcher zkw=Mockito.mock(ZooKeeperWatcher.class);
  Mockito.doReturn("fakequorum").when(zkw).getQuorum();
  Mockito.doReturn(zkw).when(master).getZooKeeperWatcher();
  MasterAddressTracker tracker=Mockito.mock(MasterAddressTracker.class);
  Mockito.doReturn(tracker).when(master).getMasterAddressManager();
  Mockito.doReturn(FAKE_HOST).when(tracker).getMasterAddress();
  admin=Mockito.mock(HBaseAdmin.class);
}
