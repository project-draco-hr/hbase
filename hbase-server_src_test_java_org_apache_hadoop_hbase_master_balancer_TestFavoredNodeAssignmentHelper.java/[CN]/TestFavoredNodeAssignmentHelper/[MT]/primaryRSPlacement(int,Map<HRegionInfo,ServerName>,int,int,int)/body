{
  Map<String,Integer> rackToServerCount=new HashMap<String,Integer>();
  rackToServerCount.put("rack1",firstRackSize);
  rackToServerCount.put("rack2",secondRackSize);
  rackToServerCount.put("rack3",thirdRackSize);
  List<ServerName> servers=getServersFromRack(rackToServerCount);
  FavoredNodeAssignmentHelper helper=new FavoredNodeAssignmentHelper(servers,rackManager);
  helper.initialize();
  assertTrue(helper.canPlaceFavoredNodes());
  Map<ServerName,List<HRegionInfo>> assignmentMap=new HashMap<ServerName,List<HRegionInfo>>();
  if (primaryRSMap == null)   primaryRSMap=new HashMap<HRegionInfo,ServerName>();
  List<HRegionInfo> regions=new ArrayList<HRegionInfo>(regionCount);
  for (int i=0; i < regionCount; i++) {
    HRegionInfo region=new HRegionInfo(TableName.valueOf("foobar"),Bytes.toBytes(i),Bytes.toBytes(i + 1));
    regions.add(region);
  }
  helper.placePrimaryRSAsRoundRobin(assignmentMap,primaryRSMap,regions);
  int regionsOnRack1=0;
  int regionsOnRack2=0;
  int regionsOnRack3=0;
  for (  HRegionInfo region : regions) {
    if (rackManager.getRack(primaryRSMap.get(region)).equals("rack1")) {
      regionsOnRack1++;
    }
 else     if (rackManager.getRack(primaryRSMap.get(region)).equals("rack2")) {
      regionsOnRack2++;
    }
 else     if (rackManager.getRack(primaryRSMap.get(region)).equals("rack3")) {
      regionsOnRack3++;
    }
  }
  checkNumRegions(regionCount,firstRackSize,secondRackSize,thirdRackSize,regionsOnRack1,regionsOnRack2,regionsOnRack3,assignmentMap);
}
