{
  Map<String,Integer> rackToServerCount=new HashMap<String,Integer>();
  rackToServerCount.put("rack1",2);
  rackToServerCount.put("rack2",1);
  Triple<Map<HRegionInfo,ServerName>,FavoredNodeAssignmentHelper,List<HRegionInfo>> primaryRSMapAndHelper=secondaryAndTertiaryRSPlacementHelper(6,rackToServerCount);
  FavoredNodeAssignmentHelper helper=primaryRSMapAndHelper.getSecond();
  Map<HRegionInfo,ServerName> primaryRSMap=primaryRSMapAndHelper.getFirst();
  List<HRegionInfo> regions=primaryRSMapAndHelper.getThird();
  assertTrue(primaryRSMap.size() == 6);
  Map<HRegionInfo,ServerName[]> secondaryAndTertiaryMap=helper.placeSecondaryAndTertiaryRS(primaryRSMap);
  for (  HRegionInfo region : regions) {
    ServerName s=primaryRSMap.get(region);
    ServerName secondaryRS=secondaryAndTertiaryMap.get(region)[0];
    ServerName tertiaryRS=secondaryAndTertiaryMap.get(region)[1];
    if (rackManager.getRack(s).equals("rack1")) {
      assertTrue(rackManager.getRack(secondaryRS).equals("rack2") && rackManager.getRack(tertiaryRS).equals("rack1"));
    }
    if (rackManager.getRack(s).equals("rack2")) {
      assertTrue(rackManager.getRack(secondaryRS).equals("rack1") && rackManager.getRack(tertiaryRS).equals("rack1"));
    }
  }
}
