{
  ImmutableSegment result=null;
  boolean resultSwapped=false;
  Action nextStep=null;
  try {
    nextStep=policy();
    if (nextStep == Action.NOOP) {
      return;
    }
    if (nextStep == Action.FLATTEN) {
      compactingMemStore.flattenOneSegment(versionedList.getVersion());
      return;
    }
    if (!isInterrupted.get()) {
      result=createSubstitution();
    }
    if (!isInterrupted.get()) {
      if (resultSwapped=compactingMemStore.swapCompactedSegments(versionedList,result,(action == Action.MERGE))) {
        compactingMemStore.updateLowestUnflushedSequenceIdInWAL(true);
      }
    }
  }
 catch (  IOException e) {
    LOG.debug("Interrupting the MemStore in-memory compaction for store " + compactingMemStore.getFamilyName());
    Thread.currentThread().interrupt();
  }
 finally {
    if (nextStep != Action.MERGE) {
      if ((result != null) && (!resultSwapped)) {
        result.close();
      }
    }
    releaseResources();
  }
}
