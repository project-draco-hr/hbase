{
  FileSystem fs=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getFileSystem();
  Path rootDir=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getRootDir();
  final Admin admin=UTIL.getHBaseAdmin();
  final long startTime=System.currentTimeMillis();
  final TableName localTableName=TableName.valueOf(STRING_TABLE_NAME + startTime);
  try (Table original=createTable(localTableName,TEST_FAM)){
    loadData(original,TEST_FAM);
  }
   final String snapshotNameAsString="snapshot_" + localTableName;
  byte[] snapshotName=Bytes.toBytes(snapshotNameAsString);
  SnapshotTestingUtils.createSnapshotAndValidate(admin,localTableName,TEST_FAM_STR,snapshotNameAsString,rootDir,fs,online);
  if (!online) {
    tryDisable(admin,localTableName);
  }
  TableName cloneTableName=TableName.valueOf("test-clone-" + localTableName);
  admin.cloneSnapshot(snapshotName,cloneTableName);
  UTIL.waitUntilAllRegionsAssigned(cloneTableName);
  admin.majorCompact(localTableName);
  admin.deleteSnapshot(snapshotName);
  do {
    Thread.sleep(5000);
  }
 while (!admin.listSnapshots(snapshotNameAsString).isEmpty());
  try (Table original=UTIL.getConnection().getTable(localTableName)){
    try (Table clonedTable=UTIL.getConnection().getTable(cloneTableName)){
      final int origTableRowCount=countRows(original);
      final int clonedTableRowCount=countRows(clonedTable);
      Assert.assertEquals(origTableRowCount,clonedTableRowCount);
    }
   }
 }
