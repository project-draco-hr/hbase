{
  if (LOG.isTraceEnabled()) {
    LOG.trace(this + " rollback state=" + state);
  }
  try {
switch (state) {
case CREATE_TABLE_POST_OPERATION:
      break;
case CREATE_TABLE_UPDATE_DESC_CACHE:
    DeleteTableProcedure.deleteTableDescriptorCache(env,getTableName());
  break;
case CREATE_TABLE_ASSIGN_REGIONS:
DeleteTableProcedure.deleteAssignmentState(env,getTableName());
break;
case CREATE_TABLE_ADD_TO_META:
DeleteTableProcedure.deleteFromMeta(env,getTableName(),newRegions);
break;
case CREATE_TABLE_WRITE_FS_LAYOUT:
DeleteTableProcedure.deleteFromFs(env,getTableName(),newRegions,false);
break;
case CREATE_TABLE_PRE_OPERATION:
DeleteTableProcedure.deleteTableStates(env,getTableName());
ProcedurePrepareLatch.releaseLatch(syncLatch,this);
break;
default :
throw new UnsupportedOperationException("unhandled state=" + state);
}
}
 catch (IOException e) {
LOG.warn("Failed rollback attempt step=" + state + " table="+ getTableName(),e);
throw e;
}
}
