{
  final int NUM_MASTERS=1;
  final int NUM_RS=3;
  TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
  try {
    final byte[] TABLENAME=Bytes.toBytes("testDataCorrectnessReplayingRecoveredEdits");
    final byte[] FAMILY=Bytes.toBytes("family");
    MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
    HMaster master=cluster.getMaster();
    HTableDescriptor desc=new HTableDescriptor(TABLENAME);
    desc.addFamily(new HColumnDescriptor(FAMILY));
    HBaseAdmin hbaseAdmin=TEST_UTIL.getHBaseAdmin();
    hbaseAdmin.createTable(desc);
    assertTrue(hbaseAdmin.isTableAvailable(TABLENAME));
    HTable table=new HTable(TEST_UTIL.getConfiguration(),TABLENAME);
    putDataAndVerify(table,"r1",FAMILY,"v1",1);
    HRegionInfo regionInfo=table.getRegionLocation("r1").getRegionInfo();
    int originServerNum=cluster.getServerWith(regionInfo.getRegionName());
    HRegionServer originServer=cluster.getRegionServer(originServerNum);
    int targetServerNum=(originServerNum + 1) % NUM_RS;
    HRegionServer targetServer=cluster.getRegionServer(targetServerNum);
    assertFalse(originServer.equals(targetServer));
    hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(targetServer.getServerName().getServerName()));
    do {
      Thread.sleep(1);
    }
 while (cluster.getServerWith(regionInfo.getRegionName()) == originServerNum);
    putDataAndVerify(table,"r2",FAMILY,"v2",2);
    hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(originServer.getServerName().getServerName()));
    do {
      Thread.sleep(1);
    }
 while (cluster.getServerWith(regionInfo.getRegionName()) == targetServerNum);
    putDataAndVerify(table,"r3",FAMILY,"v3",3);
    targetServer.kill();
    cluster.getRegionServerThreads().get(targetServerNum).join();
    while (master.getServerManager().areDeadServersInProgress()) {
      Thread.sleep(5);
    }
    originServer.kill();
    cluster.getRegionServerThreads().get(originServerNum).join();
    putDataAndVerify(table,"r4",FAMILY,"v4",4);
  }
  finally {
    TEST_UTIL.shutdownMiniCluster();
  }
}
