{
  Configuration conf=getConf();
  try {
    if (LocalHBaseCluster.isLocal(conf)) {
      final MiniZooKeeperCluster zooKeeperCluster=new MiniZooKeeperCluster();
      File zkDataPath=new File(conf.get(HConstants.ZOOKEEPER_DATA_DIR));
      int zkClientPort=conf.getInt(HConstants.ZOOKEEPER_CLIENT_PORT,0);
      if (zkClientPort == 0) {
        throw new IOException("No config value for " + HConstants.ZOOKEEPER_CLIENT_PORT);
      }
      zooKeeperCluster.setDefaultClientPort(zkClientPort);
      int clientPort=zooKeeperCluster.startup(zkDataPath);
      if (clientPort != zkClientPort) {
        String errorMsg="Could not start ZK at requested port of " + zkClientPort + ".  ZK was started at port: "+ clientPort+ ".  Aborting as clients (e.g. shell) will not be able to find "+ "this ZK quorum.";
        System.err.println(errorMsg);
        throw new IOException(errorMsg);
      }
      conf.set(HConstants.ZOOKEEPER_CLIENT_PORT,Integer.toString(clientPort));
      LocalHBaseCluster cluster=new LocalHBaseCluster(conf,1,1,LocalHMaster.class,HRegionServer.class);
      ((LocalHMaster)cluster.getMaster(0)).setZKCluster(zooKeeperCluster);
      cluster.startup();
      waitOnMasterThreads(cluster);
    }
 else {
      HMaster master=HMaster.constructMaster(masterClass,conf);
      if (master.isStopped()) {
        LOG.info("Won't bring the Master up as a shutdown is requested");
        return -1;
      }
      master.start();
      master.join();
      if (master.isAborted())       throw new RuntimeException("HMaster Aborted");
    }
  }
 catch (  Throwable t) {
    LOG.error("Failed to start master",t);
    return -1;
  }
  return 0;
}
