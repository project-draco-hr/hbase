{
  Configuration conf=getConf();
  try {
    if (LocalHBaseCluster.isLocal(conf)) {
      DefaultMetricsSystem.setMiniClusterMode(true);
      final MiniZooKeeperCluster zooKeeperCluster=new MiniZooKeeperCluster(conf);
      File zkDataPath=new File(conf.get(HConstants.ZOOKEEPER_DATA_DIR));
      int zkClientPort=0;
      String zkserver=conf.get(HConstants.ZOOKEEPER_QUORUM);
      if (zkserver != null) {
        String[] zkservers=zkserver.split(",");
        if (zkservers.length > 1) {
          String errorMsg="Could not start ZK with " + zkservers.length + " ZK servers in local mode deployment. Aborting as clients (e.g. shell) will not "+ "be able to find this ZK quorum.";
          System.err.println(errorMsg);
          throw new IOException(errorMsg);
        }
        String[] parts=zkservers[0].split(":");
        if (parts.length == 2) {
          zkClientPort=Integer.parseInt(parts[1]);
        }
      }
      if (zkClientPort == 0) {
        zkClientPort=conf.getInt(HConstants.ZOOKEEPER_CLIENT_PORT,0);
        if (zkClientPort == 0) {
          throw new IOException("No config value for " + HConstants.ZOOKEEPER_CLIENT_PORT);
        }
      }
      zooKeeperCluster.setDefaultClientPort(zkClientPort);
      int zkTickTime=conf.getInt(HConstants.ZOOKEEPER_TICK_TIME,0);
      if (zkTickTime > 0) {
        zooKeeperCluster.setTickTime(zkTickTime);
      }
      ZKUtil.loginServer(conf,"hbase.zookeeper.server.keytab.file","hbase.zookeeper.server.kerberos.principal",null);
      int localZKClusterSessionTimeout=conf.getInt(HConstants.ZK_SESSION_TIMEOUT + ".localHBaseCluster",10 * 1000);
      conf.setInt(HConstants.ZK_SESSION_TIMEOUT,localZKClusterSessionTimeout);
      LOG.info("Starting a zookeeper cluster");
      int clientPort=zooKeeperCluster.startup(zkDataPath);
      if (clientPort != zkClientPort) {
        String errorMsg="Could not start ZK at requested port of " + zkClientPort + ".  ZK was started at port: "+ clientPort+ ".  Aborting as clients (e.g. shell) will not be able to find "+ "this ZK quorum.";
        System.err.println(errorMsg);
        throw new IOException(errorMsg);
      }
      conf.set(HConstants.ZOOKEEPER_CLIENT_PORT,Integer.toString(clientPort));
      int mastersCount=conf.getInt("hbase.masters",1);
      int regionServersCount=conf.getInt("hbase.regionservers",1);
      LOG.info("Starting up instance of localHBaseCluster; master=" + mastersCount + ", regionserversCount="+ regionServersCount);
      LocalHBaseCluster cluster=new LocalHBaseCluster(conf,mastersCount,regionServersCount,LocalHMaster.class,HRegionServer.class);
      ((LocalHMaster)cluster.getMaster(0)).setZKCluster(zooKeeperCluster);
      cluster.startup();
      waitOnMasterThreads(cluster);
    }
 else {
      logProcessInfo(getConf());
      CoordinatedStateManager csm=CoordinatedStateManagerFactory.getCoordinatedStateManager(conf);
      HMaster master=HMaster.constructMaster(masterClass,conf,csm);
      if (master.isStopped()) {
        LOG.info("Won't bring the Master up as a shutdown is requested");
        return 1;
      }
      master.start();
      master.join();
      if (master.isAborted())       throw new RuntimeException("HMaster Aborted");
    }
  }
 catch (  Throwable t) {
    LOG.error("Master exiting",t);
    return 1;
  }
  return 0;
}
