{
  final String name="testSyncRunnerIndexOverflow";
  final byte[] b=Bytes.toBytes("b");
  final AtomicBoolean startHoldingForAppend=new AtomicBoolean(false);
  final CountDownLatch holdAppend=new CountDownLatch(1);
  final CountDownLatch flushFinished=new CountDownLatch(1);
  final CountDownLatch putFinished=new CountDownLatch(1);
  try (FSHLog log=new FSHLog(FS,FSUtils.getRootDir(CONF),name,HConstants.HREGION_OLDLOGDIR_NAME,CONF,null,true,null,null)){
    log.registerWALActionsListener(new WALActionsListener.Base(){
      @Override public void visitLogEntryBeforeWrite(      WALKey logKey,      WALEdit logEdit) throws IOException {
        if (startHoldingForAppend.get()) {
          try {
            holdAppend.await();
          }
 catch (          InterruptedException e) {
            LOG.error(e);
          }
        }
      }
    }
);
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("t1")).addFamily(new HColumnDescriptor(b));
    HRegionInfo hri=new HRegionInfo(htd.getTableName(),HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW);
    final HRegion region=TEST_UTIL.createLocalHRegion(hri,htd,log);
    ExecutorService exec=Executors.newFixedThreadPool(2);
    region.put(new Put(b).addColumn(b,b,b));
    startHoldingForAppend.set(true);
    exec.submit(new Runnable(){
      @Override public void run(){
        try {
          region.put(new Put(b).addColumn(b,b,b));
          putFinished.countDown();
        }
 catch (        IOException e) {
          LOG.error(e);
        }
      }
    }
);
    Threads.sleep(3000);
    exec.submit(new Runnable(){
      @Override public void run(){
        try {
          Region.FlushResult flushResult=region.flush(true);
          LOG.info("Flush result:" + flushResult.getResult());
          LOG.info("Flush succeeded:" + flushResult.isFlushSucceeded());
          flushFinished.countDown();
        }
 catch (        IOException e) {
          LOG.error(e);
        }
      }
    }
);
    Threads.sleep(3000);
    holdAppend.countDown();
    putFinished.await();
    flushFinished.await();
    assertEquals("Region did not flush?",1,region.getStoreFileList(new byte[][]{b}).size());
    long seqId=log.getEarliestMemstoreSeqNum(hri.getEncodedNameAsBytes());
    assertEquals("Found seqId for the region which is already flushed",HConstants.NO_SEQNUM,seqId);
    region.close();
  }
 }
