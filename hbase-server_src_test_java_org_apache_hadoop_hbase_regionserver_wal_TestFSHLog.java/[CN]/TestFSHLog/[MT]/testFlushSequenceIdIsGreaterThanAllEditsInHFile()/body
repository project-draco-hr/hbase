{
  String testName="testFlushSequenceIdIsGreaterThanAllEditsInHFile";
  final TableName tableName=TableName.valueOf(testName);
  final HRegionInfo hri=new HRegionInfo(tableName);
  final byte[] rowName=tableName.getName();
  final HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor("f"));
  HRegion r=HBaseTestingUtility.createRegionAndWAL(hri,TEST_UTIL.getDefaultRootDirPath(),TEST_UTIL.getConfiguration(),htd);
  HBaseTestingUtility.closeRegionAndWAL(r);
  final int countPerFamily=10;
  final MutableBoolean goslow=new MutableBoolean(false);
  FSHLog wal=new FSHLog(FileSystem.get(conf),TEST_UTIL.getDefaultRootDirPath(),testName,conf){
    @Override void atHeadOfRingBufferEventHandlerAppend(){
      if (goslow.isTrue()) {
        Threads.sleep(100);
        LOG.debug("Sleeping before appending 100ms");
      }
      super.atHeadOfRingBufferEventHandlerAppend();
    }
  }
;
  HRegion region=HRegion.openHRegion(TEST_UTIL.getConfiguration(),TEST_UTIL.getTestFileSystem(),TEST_UTIL.getDefaultRootDirPath(),hri,htd,wal);
  EnvironmentEdge ee=EnvironmentEdgeManager.getDelegate();
  try {
    List<Put> puts=null;
    for (    HColumnDescriptor hcd : htd.getFamilies()) {
      puts=TestWALReplay.addRegionEdits(rowName,hcd.getName(),countPerFamily,ee,region,"x");
    }
    final Get g=new Get(rowName);
    Result result=region.get(g);
    assertEquals(countPerFamily * htd.getFamilies().size(),result.size());
    WALEdit edits=new WALEdit();
    for (    Put p : puts) {
      CellScanner cs=p.cellScanner();
      while (cs.advance()) {
        edits.add(cs.current());
      }
    }
    List<UUID> clusterIds=new ArrayList<UUID>();
    clusterIds.add(UUID.randomUUID());
    goslow.setValue(true);
    for (int i=0; i < countPerFamily; i++) {
      final HRegionInfo info=region.getRegionInfo();
      final WALKey logkey=new WALKey(info.getEncodedNameAsBytes(),tableName,System.currentTimeMillis(),clusterIds,-1,-1,region.getMVCC());
      wal.append(htd,info,logkey,edits,true);
    }
    region.flush(true);
    long currentSequenceId=region.getReadPoint(null);
    goslow.setValue(false);
synchronized (goslow) {
      goslow.notifyAll();
    }
    assertTrue(currentSequenceId >= region.getReadPoint(null));
  }
  finally {
    region.close(true);
    wal.close();
  }
}
