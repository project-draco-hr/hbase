{
  Abortable abortable=new StubAbortable();
  ZooKeeperWatcher zk=new ZooKeeperWatcher(TEST_UTIL.getConfiguration(),"testNodeTracker",abortable);
  ZKUtil.createAndFailSilent(zk,zk.baseZNode);
  final String node=ZKUtil.joinZNode(zk.baseZNode,new Long(rand.nextLong()).toString());
  final byte[] dataOne=Bytes.toBytes("dataOne");
  final byte[] dataTwo=Bytes.toBytes("dataTwo");
  TestTracker localTracker=new TestTracker(zk,node,abortable);
  localTracker.start();
  zk.registerListener(localTracker);
  assertNull(localTracker.getData());
  WaitToGetDataThread thread=new WaitToGetDataThread(zk,node);
  thread.start();
  assertFalse(thread.hasData);
  TestTracker secondTracker=new TestTracker(zk,node,null);
  secondTracker.start();
  zk.registerListener(secondTracker);
  TestingZKListener zkListener=new TestingZKListener(zk,node);
  zk.registerListener(zkListener);
  assertEquals(0,zkListener.createdLock.availablePermits());
  final ZooKeeper zkconn=new ZooKeeper(ZKConfig.getZKQuorumServersString(TEST_UTIL.getConfiguration()),60000,new StubWatcher());
  zkconn.create(node,dataOne,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  zkListener.waitForCreation();
  thread.join();
  assertNotNull(localTracker.getData());
  assertNotNull(localTracker.blockUntilAvailable());
  assertTrue(Bytes.equals(localTracker.getData(),dataOne));
  assertTrue(thread.hasData);
  assertTrue(Bytes.equals(thread.tracker.getData(),dataOne));
  LOG.info("Successfully got data one");
  assertNotNull(secondTracker.getData());
  assertNotNull(secondTracker.blockUntilAvailable());
  assertTrue(Bytes.equals(secondTracker.getData(),dataOne));
  LOG.info("Successfully got data one with the second tracker");
  zkconn.delete(node,-1);
  zkListener.waitForDeletion();
  TestTracker threadTracker=thread.tracker;
  thread=new WaitToGetDataThread(zk,node,threadTracker);
  thread.start();
  assertFalse(thread.hasData);
  assertNull(secondTracker.getData());
  assertNull(localTracker.getData());
  LOG.info("Successfully made unavailable");
  zkconn.create(node,dataTwo,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
  zkListener.waitForCreation();
  thread.join();
  assertNotNull(localTracker.getData());
  assertNotNull(localTracker.blockUntilAvailable());
  assertTrue(Bytes.equals(localTracker.getData(),dataTwo));
  assertNotNull(secondTracker.getData());
  assertNotNull(secondTracker.blockUntilAvailable());
  assertTrue(Bytes.equals(secondTracker.getData(),dataTwo));
  assertTrue(thread.hasData);
  assertTrue(Bytes.equals(thread.tracker.getData(),dataTwo));
  LOG.info("Successfully got data two on all trackers and threads");
  zkconn.setData(node,dataOne,-1);
  zkListener.waitForDataChange();
  assertNotNull(localTracker.getData());
  assertNotNull(localTracker.blockUntilAvailable());
  assertTrue(Bytes.equals(localTracker.getData(),dataOne));
  assertNotNull(secondTracker.getData());
  assertNotNull(secondTracker.blockUntilAvailable());
  assertTrue(Bytes.equals(secondTracker.getData(),dataOne));
  assertTrue(thread.hasData);
  assertTrue(Bytes.equals(thread.tracker.getData(),dataOne));
  LOG.info("Successfully got data one following a data change on all trackers and threads");
}
