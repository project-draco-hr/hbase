{
  if (globalInstance != null)   return globalInstance;
  if (chunkPoolDisabled)   return null;
  float poolSizePercentage=conf.getFloat(CHUNK_POOL_MAXSIZE_KEY,POOL_MAX_SIZE_DEFAULT);
  if (poolSizePercentage <= 0) {
    chunkPoolDisabled=true;
    return null;
  }
  if (poolSizePercentage > 1.0) {
    throw new IllegalArgumentException(CHUNK_POOL_MAXSIZE_KEY + " must be between 0.0 and 1.0");
  }
  long heapMax=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  long globalMemStoreLimit=MemStoreFlusher.globalMemStoreLimit(heapMax,MemStoreFlusher.DEFAULT_UPPER,MemStoreFlusher.UPPER_KEY,conf);
  int chunkSize=conf.getInt(MemStoreLAB.CHUNK_SIZE_KEY,MemStoreLAB.CHUNK_SIZE_DEFAULT);
  int maxCount=(int)(globalMemStoreLimit * poolSizePercentage / chunkSize);
  float initialCountPercentage=conf.getFloat(CHUNK_POOL_INITIALSIZE_KEY,POOL_INITIAL_SIZE_DEFAULT);
  if (initialCountPercentage > 1.0 || initialCountPercentage < 0) {
    throw new IllegalArgumentException(CHUNK_POOL_INITIALSIZE_KEY + " must be between 0.0 and 1.0");
  }
  int initialCount=(int)(initialCountPercentage * maxCount);
  LOG.info("Allocating MemStoreChunkPool with chunk size " + StringUtils.byteDesc(chunkSize) + ", max count "+ maxCount+ ", initial count "+ initialCount);
  globalInstance=new MemStoreChunkPool(conf,chunkSize,maxCount,initialCount);
  return globalInstance;
}
