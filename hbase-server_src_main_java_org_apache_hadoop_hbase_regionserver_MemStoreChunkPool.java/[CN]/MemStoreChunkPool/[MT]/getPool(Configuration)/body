{
  if (GLOBAL_INSTANCE != null)   return GLOBAL_INSTANCE;
synchronized (MemStoreChunkPool.class) {
    if (chunkPoolDisabled)     return null;
    if (GLOBAL_INSTANCE != null)     return GLOBAL_INSTANCE;
    float poolSizePercentage=conf.getFloat(CHUNK_POOL_MAXSIZE_KEY,POOL_MAX_SIZE_DEFAULT);
    if (poolSizePercentage <= 0) {
      chunkPoolDisabled=true;
      return null;
    }
    if (poolSizePercentage > 1.0) {
      throw new IllegalArgumentException(CHUNK_POOL_MAXSIZE_KEY + " must be between 0.0 and 1.0");
    }
    long heapMax=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
    long globalMemStoreLimit=(long)(heapMax * HeapMemorySizeUtil.getGlobalMemStorePercent(conf,false));
    int chunkSize=conf.getInt(HeapMemStoreLAB.CHUNK_SIZE_KEY,HeapMemStoreLAB.CHUNK_SIZE_DEFAULT);
    int maxCount=(int)(globalMemStoreLimit * poolSizePercentage / chunkSize);
    float initialCountPercentage=conf.getFloat(CHUNK_POOL_INITIALSIZE_KEY,POOL_INITIAL_SIZE_DEFAULT);
    if (initialCountPercentage > 1.0 || initialCountPercentage < 0) {
      throw new IllegalArgumentException(CHUNK_POOL_INITIALSIZE_KEY + " must be between 0.0 and 1.0");
    }
    int initialCount=(int)(initialCountPercentage * maxCount);
    LOG.info("Allocating MemStoreChunkPool with chunk size " + StringUtils.byteDesc(chunkSize) + ", max count "+ maxCount+ ", initial count "+ initialCount);
    GLOBAL_INSTANCE=new MemStoreChunkPool(conf,chunkSize,maxCount,initialCount,poolSizePercentage);
    return GLOBAL_INSTANCE;
  }
}
