{
  LOG.debug("Getting the direct ancestors of the current backup ...");
  ArrayList<BackupImage> ancestors=new ArrayList<BackupImage>();
  if (backupCtx.getType().equals(BackupRestoreConstants.BACKUP_TYPE_FULL)) {
    LOG.debug("Current backup is a full backup, no direct ancestor for it.");
    return ancestors;
  }
  ArrayList<BackupCompleteData> allHistoryList=getBackupHistory();
  for (  BackupCompleteData backup : allHistoryList) {
    BackupImage image=new BackupImage(backup.getBackupToken(),backup.getType(),backup.getBackupRootPath(),backup.getTableList(),Long.parseLong(backup.getStartTime()),Long.parseLong(backup.getEndTime()));
    if (backup.getType().equals(BackupRestoreConstants.BACKUP_TYPE_FULL)) {
      if (backup.fromExistingSnapshot()) {
        continue;
      }
      if (!BackupManifest.canCoverImage(ancestors,image)) {
        ancestors.add(image);
      }
    }
 else {
      if (BackupManifest.canCoverImage(ancestors,image)) {
        LOG.debug("Met the backup boundary of the current table set. " + "The root full backup images for the current backup scope:");
        for (        BackupImage image1 : ancestors) {
          LOG.debug("  BackupId: " + image1.getBackupId() + ", Backup directory: "+ image1.getRootDir());
        }
      }
 else {
        Path logBackupPath=HBackupFileSystem.getLogBackupPath(backup.getBackupRootPath(),backup.getBackupToken());
        LOG.debug("Current backup has an incremental backup ancestor, " + "touching its image manifest in " + logBackupPath.toString() + " to construct the dependency.");
        BackupManifest lastIncrImgManifest=new BackupManifest(conf,logBackupPath);
        BackupImage lastIncrImage=lastIncrImgManifest.getBackupImage();
        ancestors.add(lastIncrImage);
        LOG.debug("Last dependent incremental backup image information:");
        LOG.debug("  Token: " + lastIncrImage.getBackupId());
        LOG.debug("  Backup directory: " + lastIncrImage.getRootDir());
      }
    }
  }
  LOG.debug("Got " + ancestors.size() + " ancestors for the current backup.");
  return ancestors;
}
