{
  FileSystem fs=FileSystem.getLocal(conf);
  conf.setFloat("io.hfile.bloom.error.rate",(float)0.01);
  conf.setBoolean("io.hfile.bloom.enabled",true);
  Path f=new Path(ROOT_DIR,getName());
  StoreFile.Writer writer=new StoreFile.Writer(fs,f,StoreFile.DEFAULT_BLOCKSIZE_SMALL,HFile.DEFAULT_COMPRESSION_ALGORITHM,conf,KeyValue.COMPARATOR,StoreFile.BloomType.ROW,2000);
  long now=System.currentTimeMillis();
  for (int i=0; i < 2000; i+=2) {
    String row=String.format(localFormatter,i);
    KeyValue kv=new KeyValue(row.getBytes(),"family".getBytes(),"col".getBytes(),now,"value".getBytes());
    writer.append(kv);
  }
  writer.close();
  StoreFile.Reader reader=new StoreFile.Reader(fs,f,null,false);
  reader.loadFileInfo();
  reader.loadBloomfilter();
  StoreFileScanner scanner=reader.getStoreFileScanner(false,false);
  int falsePos=0;
  int falseNeg=0;
  for (int i=0; i < 2000; i++) {
    String row=String.format(localFormatter,i);
    TreeSet<byte[]> columns=new TreeSet<byte[]>();
    columns.add("family:col".getBytes());
    boolean exists=scanner.shouldSeek(row.getBytes(),columns);
    if (i % 2 == 0) {
      if (!exists)       falseNeg++;
    }
 else {
      if (exists)       falsePos++;
    }
  }
  reader.close();
  fs.delete(f,true);
  System.out.println("False negatives: " + falseNeg);
  assertEquals(0,falseNeg);
  System.out.println("False positives: " + falsePos);
  assertTrue(falsePos < 2);
}
