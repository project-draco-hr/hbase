{
  Configuration conf=this.conf;
  conf.setBoolean("hbase.rs.evictblocksonclose",false);
  Path baseDir=new Path(new Path(this.testDir,"regionname"),"twoCOWEOC");
  BlockCache bc=StoreFile.getBlockCache(conf);
  assertNotNull(bc);
  CacheStats cs=bc.getStats();
  long startHit=cs.getHitCount();
  long startMiss=cs.getMissCount();
  long startEvicted=cs.getEvictedCount();
  conf.setBoolean("hbase.rs.cacheblocksonwrite",false);
  Path pathCowOff=new Path(baseDir,"123456789");
  StoreFile.Writer writer=writeStoreFile(conf,pathCowOff,3);
  StoreFile hsf=new StoreFile(this.fs,writer.getPath(),true,conf,StoreFile.BloomType.NONE,false);
  LOG.debug(hsf.getPath().toString());
  StoreFile.Reader reader=hsf.createReader();
  reader.loadFileInfo();
  StoreFileScanner scanner=reader.getStoreFileScanner(true,true);
  scanner.seek(KeyValue.LOWESTKEY);
  while (scanner.next() != null)   ;
  assertEquals(startHit,cs.getHitCount());
  assertEquals(startMiss + 3,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
  startMiss+=3;
  scanner.close();
  reader.close();
  conf.setBoolean("hbase.rs.cacheblocksonwrite",true);
  Path pathCowOn=new Path(baseDir,"123456788");
  writer=writeStoreFile(conf,pathCowOn,3);
  hsf=new StoreFile(this.fs,writer.getPath(),true,conf,StoreFile.BloomType.NONE,false);
  reader=hsf.createReader();
  scanner=reader.getStoreFileScanner(true,true);
  scanner.seek(KeyValue.LOWESTKEY);
  while (scanner.next() != null)   ;
  assertEquals(startHit + 3,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
  startHit+=3;
  scanner.close();
  reader.close();
  hsf=new StoreFile(this.fs,pathCowOff,true,conf,StoreFile.BloomType.NONE,false);
  StoreFile.Reader readerOne=hsf.createReader();
  readerOne.loadFileInfo();
  StoreFileScanner scannerOne=readerOne.getStoreFileScanner(true,true);
  scannerOne.seek(KeyValue.LOWESTKEY);
  hsf=new StoreFile(this.fs,pathCowOn,true,conf,StoreFile.BloomType.NONE,false);
  StoreFile.Reader readerTwo=hsf.createReader();
  readerTwo.loadFileInfo();
  StoreFileScanner scannerTwo=readerTwo.getStoreFileScanner(true,true);
  scannerTwo.seek(KeyValue.LOWESTKEY);
  KeyValue kv1=null;
  KeyValue kv2=null;
  while ((kv1=scannerOne.next()) != null) {
    kv2=scannerTwo.next();
    assertTrue(kv1.equals(kv2));
  }
  assertNull(scannerTwo.next());
  assertEquals(startHit + 6,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
  startHit+=6;
  scannerOne.close();
  readerOne.close();
  scannerTwo.close();
  readerTwo.close();
  conf.setBoolean("hbase.rs.evictblocksonclose",true);
  hsf=new StoreFile(this.fs,pathCowOff,true,conf,StoreFile.BloomType.NONE,false);
  reader=hsf.createReader();
  reader.close();
  assertEquals(startHit,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted + 3,cs.getEvictedCount());
  startEvicted+=3;
  conf.setBoolean("hbase.rs.evictblocksonclose",false);
  hsf=new StoreFile(this.fs,pathCowOn,true,conf,StoreFile.BloomType.NONE,false);
  reader=hsf.createReader();
  reader.close();
  assertEquals(startHit,cs.getHitCount());
  assertEquals(startMiss,cs.getMissCount());
  assertEquals(startEvicted,cs.getEvictedCount());
}
