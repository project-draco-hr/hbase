{
  Put put=new Put(row);
  put.add(famName,row,row);
  HTable table1=new HTable(conf1,tableName);
  table1.put(put);
  HTable table2=new HTable(conf2,tableName);
  Get get=new Get(row);
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      fail("Waited too much time for put replication");
    }
    Result res=table2.get(get);
    if (res.size() == 0) {
      LOG.info("Row not available");
      Thread.sleep(SLEEP_TIME);
    }
 else {
      assertArrayEquals(res.value(),row);
      break;
    }
  }
  Delete del=new Delete(row);
  table1.delete(del);
  table2=new HTable(conf2,tableName);
  get=new Get(row);
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      fail("Waited too much time for del replication");
    }
    Result res=table2.get(get);
    if (res.size() >= 1) {
      LOG.info("Row not deleted");
      Thread.sleep(SLEEP_TIME);
    }
 else {
      break;
    }
  }
  table1.setAutoFlush(false);
  for (int i=0; i < NB_ROWS_IN_BATCH; i++) {
    put=new Put(Bytes.toBytes(i));
    put.add(famName,row,row);
    table1.put(put);
  }
  table1.flushCommits();
  Scan scan=new Scan();
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      fail("Waited too much time for normal batch replication");
    }
    ResultScanner scanner=table2.getScanner(scan);
    Result[] res=scanner.next(NB_ROWS_IN_BATCH);
    scanner.close();
    if (res.length != NB_ROWS_IN_BATCH) {
      LOG.info("Only got " + res.length + " rows");
      Thread.sleep(SLEEP_TIME);
    }
 else {
      break;
    }
  }
  table1.setAutoFlush(true);
  setIsReplication("false");
  put=new Put(Bytes.toBytes("stop start"));
  put.add(famName,row,row);
  table1.put(put);
  get=new Get(Bytes.toBytes("stop start"));
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      break;
    }
    Result res=table2.get(get);
    if (res.size() >= 1) {
      fail("Replication wasn't stopped");
    }
 else {
      LOG.info("Row not replicated, let's wait a bit more...");
      Thread.sleep(SLEEP_TIME);
    }
  }
  setIsReplication("true");
  table1.put(put);
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      fail("Waited too much time for put replication");
    }
    Result res=table2.get(get);
    if (res.size() == 0) {
      LOG.info("Row not available");
      Thread.sleep(SLEEP_TIME);
    }
 else {
      assertArrayEquals(res.value(),row);
      break;
    }
  }
  put=new Put(Bytes.toBytes("do not rep"));
  put.add(noRepfamName,row,row);
  table1.put(put);
  get=new Get(Bytes.toBytes("do not rep"));
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      break;
    }
    Result res=table2.get(get);
    if (res.size() >= 1) {
      fail("Not supposed to be replicated");
    }
 else {
      LOG.info("Row not replicated, let's wait a bit more...");
      Thread.sleep(SLEEP_TIME);
    }
  }
}
