{
  LOG.debug("Creating test table");
  HTableDescriptor hdt=HTU.createTableDescriptor("testBulkLoad");
  hdt.setRegionReplication(NB_SERVERS);
  hdt.addCoprocessor(SlowMeCopro.class.getName());
  HTable table=HTU.createTable(hdt,new byte[][]{f},HTU.getConfiguration());
  LOG.debug("Creating test data");
  Path dir=HTU.getDataTestDirOnTestFS("testBulkLoad");
  final int numRows=10;
  final byte[] qual=Bytes.toBytes("qual");
  final byte[] val=Bytes.toBytes("val");
  final List<Pair<byte[],String>> famPaths=new ArrayList<Pair<byte[],String>>();
  for (  HColumnDescriptor col : hdt.getColumnFamilies()) {
    Path hfile=new Path(dir,col.getNameAsString());
    TestHRegionServerBulkLoad.createHFile(HTU.getTestFileSystem(),hfile,col.getName(),qual,val,numRows);
    famPaths.add(new Pair<byte[],String>(col.getName(),hfile.toString()));
  }
  LOG.debug("Loading test data");
  final HConnection conn=HTU.getHBaseAdmin().getConnection();
  RegionServerCallable<Void> callable=new RegionServerCallable<Void>(conn,hdt.getTableName(),TestHRegionServerBulkLoad.rowkey(0)){
    @Override public Void call() throws Exception {
      LOG.debug("Going to connect to server " + getLocation() + " for row "+ Bytes.toStringBinary(getRow()));
      byte[] regionName=getLocation().getRegionInfo().getRegionName();
      BulkLoadHFileRequest request=RequestConverter.buildBulkLoadHFileRequest(famPaths,regionName,true);
      getStub().bulkLoadHFile(null,request);
      return null;
    }
  }
;
  RpcRetryingCallerFactory factory=new RpcRetryingCallerFactory(HTU.getConfiguration());
  RpcRetryingCaller<Void> caller=factory.<Void>newCaller();
  caller.callWithRetries(callable);
  LOG.debug("Verifying data load");
  for (int i=0; i < numRows; i++) {
    byte[] row=TestHRegionServerBulkLoad.rowkey(i);
    Get g=new Get(row);
    Result r=table.get(g);
    Assert.assertFalse(r.isStale());
  }
  LOG.debug("Verifying replica queries");
  try {
    SlowMeCopro.cdl.set(new CountDownLatch(1));
    for (int i=0; i < numRows; i++) {
      byte[] row=TestHRegionServerBulkLoad.rowkey(i);
      Get g=new Get(row);
      g.setConsistency(Consistency.TIMELINE);
      Result r=table.get(g);
      Assert.assertTrue(r.isStale());
    }
    SlowMeCopro.cdl.get().countDown();
  }
  finally {
    SlowMeCopro.cdl.get().countDown();
    SlowMeCopro.sleepTime.set(0);
  }
  HTU.getHBaseAdmin().disableTable(hdt.getTableName());
  HTU.deleteTable(hdt.getTableName());
}
