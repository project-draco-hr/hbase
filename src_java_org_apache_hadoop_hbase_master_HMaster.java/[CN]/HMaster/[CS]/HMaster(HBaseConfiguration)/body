{
  String addressStr=conf.get(MASTER_ADDRESS);
  if (addressStr == null) {
    addressStr=conf.get(MASTER_HOST_NAME);
    if (addressStr == null) {
      addressStr=InetAddress.getLocalHost().getCanonicalHostName();
    }
    addressStr+=":";
    addressStr+=conf.get("hbase.master.port",Integer.toString(DEFAULT_MASTER_PORT));
  }
  HServerAddress address=new HServerAddress(addressStr);
  LOG.info("My address is " + address);
  this.conf=conf;
  this.rootdir=new Path(conf.get(HBASE_DIR));
  try {
    FSUtils.validateRootPath(this.rootdir);
  }
 catch (  IOException e) {
    LOG.fatal("Not starting HMaster because the root directory path '" + this.rootdir + "' is not valid. Check the setting of the"+ " configuration parameter '"+ HBASE_DIR+ "'",e);
    throw e;
  }
  this.threadWakeFrequency=conf.getInt(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.conf.set("fs.default.name",this.rootdir.toString());
  this.fs=FileSystem.get(conf);
  if (this.fs instanceof DistributedFileSystem) {
    String message="Waiting for dfs to exit safe mode...";
    while (((DistributedFileSystem)fs).setSafeMode(FSConstants.SafeModeAction.SAFEMODE_GET)) {
      LOG.info(message);
      try {
        Thread.sleep(this.threadWakeFrequency);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  this.conf.set(HConstants.HBASE_DIR,this.rootdir.toString());
  this.rand=new Random();
  try {
    if (!fs.exists(rootdir)) {
      fs.mkdirs(rootdir);
      FSUtils.setVersion(fs,rootdir);
    }
 else {
      FSUtils.checkVersion(fs,rootdir,true);
    }
    if (!FSUtils.rootRegionExists(fs,rootdir)) {
      bootstrap();
    }
  }
 catch (  IOException e) {
    LOG.fatal("Not starting HMaster because:",e);
    throw e;
  }
  this.numRetries=conf.getInt("hbase.client.retries.number",2);
  this.maxRegionOpenTime=conf.getLong("hbase.hbasemaster.maxregionopen",120 * 1000);
  this.leaseTimeout=conf.getInt("hbase.master.lease.period",120 * 1000);
  this.server=HBaseRPC.getServer(this,address.getBindAddress(),address.getPort(),conf.getInt("hbase.regionserver.handler.count",10),false,conf);
  this.address=new HServerAddress(server.getListenerAddress());
  conf.setInt("hbase.client.retries.number",3);
  this.connection=ServerConnectionManager.getConnection(conf);
  this.metaRescanInterval=conf.getInt("hbase.master.meta.thread.rescanfrequency",60 * 1000);
  this.sleeper=new Sleeper(this.threadWakeFrequency,this.closed);
  zooKeeperWrapper=new ZooKeeperWrapper(conf);
  zkMasterAddressWatcher=new ZKMasterAddressWatcher(zooKeeperWrapper);
  serverManager=new ServerManager(this);
  regionManager=new RegionManager(this);
  writeAddressToZooKeeper();
  this.closed.set(false);
  LOG.info("HMaster initialized on " + this.address.toString());
}
