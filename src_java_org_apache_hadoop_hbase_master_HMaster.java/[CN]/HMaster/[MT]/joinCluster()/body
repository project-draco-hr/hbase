{
  LOG.debug("Checking cluster state...");
  HServerAddress rootLocation=this.zooKeeperWrapper.readRootRegionLocation();
  List<HServerAddress> addresses=this.zooKeeperWrapper.scanRSDirectory();
  if (addresses.isEmpty()) {
    LOG.debug("Master fresh start, proceeding with normal startup");
    splitLogAfterStartup();
    return;
  }
  LOG.info("Master failover, ZK inspection begins...");
  boolean isRootRegionAssigned=false;
  Map<byte[],HRegionInfo> assignedRegions=new HashMap<byte[],HRegionInfo>();
  for (  HServerAddress address : addresses) {
    HRegionInfo[] regions=null;
    try {
      HRegionInterface hri=this.connection.getHRegionConnection(address,false);
      HServerInfo info=hri.getHServerInfo();
      LOG.debug("Inspection found server " + info.getName());
      this.serverManager.recordNewServer(info,true);
      regions=hri.getRegionsAssignment();
    }
 catch (    IOException e) {
      LOG.error("Failed contacting " + address.toString(),e);
      continue;
    }
    for (    HRegionInfo r : regions) {
      if (r.isRootRegion()) {
        this.connection.setRootRegionLocation(new HRegionLocation(r,rootLocation));
        this.regionManager.setRootRegionLocation(rootLocation);
        this.regionManager.removeRegion(r);
        isRootRegionAssigned=true;
      }
 else       if (r.isMetaRegion()) {
        MetaRegion m=new MetaRegion(new HServerAddress(address),r);
        this.regionManager.addMetaRegionToScan(m);
      }
      assignedRegions.put(r.getRegionName(),r);
    }
  }
  LOG.info("Inspection found " + assignedRegions.size() + " regions, "+ (isRootRegionAssigned ? "with -ROOT-" : "but -ROOT- was MIA"));
  splitLogAfterStartup();
}
