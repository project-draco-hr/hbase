{
  FileSystem fs=cluster.getFileSystem();
  File jarFile1=buildCoprocessorJar(cpName1);
  File jarFile2=buildCoprocessorJar(cpName2);
  fs.copyFromLocalFile(new Path(jarFile1.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
  String jarFileOnHDFS1=fs.getUri().toString() + Path.SEPARATOR + jarFile1.getName();
  assertTrue("Copy jar file to HDFS failed.",fs.exists(new Path(jarFileOnHDFS1)));
  LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS1);
  fs.copyFromLocalFile(new Path(jarFile2.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
  String jarFileOnHDFS2=fs.getUri().toString() + Path.SEPARATOR + jarFile2.getName();
  assertTrue("Copy jar file to HDFS failed.",fs.exists(new Path(jarFileOnHDFS2)));
  LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS2);
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor("test"));
  htd.setValue("COPROCESSOR$1",jarFileOnHDFS1.toString() + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER);
  htd.setValue("COPROCESSOR$2",jarFileOnHDFS2.toString() + "|" + cpName2+ "|"+ Coprocessor.PRIORITY_USER+ "|k1=v1,k2=v2,k3=v3");
  HBaseAdmin admin=new HBaseAdmin(this.conf);
  admin.createTable(htd);
  boolean found1=false, found2=false, found2_k1=false, found2_k2=false, found2_k3=false;
  MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
  for (  HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
    if (region.getRegionNameAsString().startsWith(tableName)) {
      CoprocessorEnvironment env;
      env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName1);
      if (env != null) {
        found1=true;
      }
      env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName2);
      if (env != null) {
        found2=true;
        Configuration conf=env.getConfiguration();
        found2_k1=conf.get("k1") != null;
        found2_k2=conf.get("k2") != null;
        found2_k3=conf.get("k3") != null;
      }
    }
  }
  assertTrue("Class " + cpName1 + " was missing on a region",found1);
  assertTrue("Class " + cpName2 + " was missing on a region",found2);
  assertTrue("Configuration key 'k1' was missing on a region",found2_k1);
  assertTrue("Configuration key 'k2' was missing on a region",found2_k2);
  assertTrue("Configuration key 'k3' was missing on a region",found2_k3);
}
