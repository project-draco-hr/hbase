{
  List<HServerInfo> servers=randomServers(10,10);
  List<HRegionInfo> regions=randomRegions(100);
  Map<HRegionInfo,HServerAddress> existing=new TreeMap<HRegionInfo,HServerAddress>();
  for (int i=0; i < regions.size(); i++) {
    existing.put(regions.get(i),servers.get(i % servers.size()).getServerAddress());
  }
  Map<HServerInfo,List<HRegionInfo>> assignment=LoadBalancer.retainAssignment(existing,servers);
  assertRetainedAssignment(existing,servers,assignment);
  List<HServerInfo> servers2=new ArrayList<HServerInfo>(servers);
  servers2.add(randomServer(10));
  servers2.add(randomServer(10));
  assignment=LoadBalancer.retainAssignment(existing,servers2);
  assertRetainedAssignment(existing,servers2,assignment);
  List<HServerInfo> servers3=new ArrayList<HServerInfo>(servers);
  servers3.remove(servers3.size() - 1);
  servers3.remove(servers3.size() - 2);
  assignment=LoadBalancer.retainAssignment(existing,servers3);
  assertRetainedAssignment(existing,servers3,assignment);
}
