{
  List<LoadBalancer.ServerAndLoad> servers=randomServers(10,10);
  List<HRegionInfo> regions=randomRegions(100);
  Map<HRegionInfo,ServerName> existing=new TreeMap<HRegionInfo,ServerName>();
  for (int i=0; i < regions.size(); i++) {
    existing.put(regions.get(i),servers.get(i % servers.size()).getServerName());
  }
  List<ServerName> listOfServerNames=getListOfServerNames(servers);
  Map<ServerName,List<HRegionInfo>> assignment=LoadBalancer.retainAssignment(existing,listOfServerNames);
  assertRetainedAssignment(existing,listOfServerNames,assignment);
  List<LoadBalancer.ServerAndLoad> servers2=new ArrayList<LoadBalancer.ServerAndLoad>(servers);
  servers2.add(randomServer(10));
  servers2.add(randomServer(10));
  listOfServerNames=getListOfServerNames(servers2);
  assignment=LoadBalancer.retainAssignment(existing,listOfServerNames);
  assertRetainedAssignment(existing,listOfServerNames,assignment);
  List<LoadBalancer.ServerAndLoad> servers3=new ArrayList<LoadBalancer.ServerAndLoad>(servers);
  servers3.remove(servers3.size() - 1);
  servers3.remove(servers3.size() - 2);
  listOfServerNames=getListOfServerNames(servers2);
  assignment=LoadBalancer.retainAssignment(existing,listOfServerNames);
  assertRetainedAssignment(existing,listOfServerNames,assignment);
}
