{
  int resultLen=Math.max(first.length,last.length);
  int minLen=Math.min(first.length,last.length);
  byte[] result=new byte[resultLen];
  boolean greaterThanFirst=false;
  boolean lessThanLast=false;
  for (int i=0; i < resultLen; ++i) {
    boolean isHex=i < minLen && charToHex(first[i]) != -1 && charToHex(last[i]) != -1;
    int low=greaterThanFirst || i >= first.length ? 0 : first[i] & 0xff;
    int high=lessThanLast || i >= last.length ? 0xff : last[i] & 0xff;
    int r;
    if (isHex) {
      if (low < '0')       low='0';
      if (high > 'f')       high='f';
      int lowHex=charToHex(low);
      int highHex=charToHex(high);
      r=hexToChar(lowHex + rand.nextInt(highHex - lowHex + 1));
    }
 else {
      r=low + rand.nextInt(high - low + 1);
    }
    if (r > low)     greaterThanFirst=true;
    if (r < high)     lessThanLast=true;
    result[i]=(byte)r;
  }
  if (Bytes.compareTo(result,first) < 0) {
    throw new IllegalStateException("Generated key " + Bytes.toStringBinary(result) + " is less than the first key "+ Bytes.toStringBinary(first));
  }
  if (Bytes.compareTo(result,last) > 0) {
    throw new IllegalStateException("Generated key " + Bytes.toStringBinary(result) + " is greater than te last key "+ Bytes.toStringBinary(last));
  }
  return result;
}
