{
  Writer tempWriter;
synchronized (this.updateLock) {
    if (this.closed)     return;
    tempWriter=this.writer;
  }
  if (txid <= this.syncedTillHere) {
    return;
  }
  try {
    long doneUpto=this.unflushedEntries.get();
    long now=System.currentTimeMillis();
    List<Entry> pending=logSyncerThread.getPendingWrites();
    try {
      logSyncerThread.hlogFlush(tempWriter,pending);
      pending=null;
      tempWriter.sync();
      syncBatchSize.addAndGet(doneUpto - this.syncedTillHere);
      this.syncedTillHere=Math.max(this.syncedTillHere,doneUpto);
    }
 catch (    IOException io) {
synchronized (this.updateLock) {
        tempWriter=this.writer;
        logSyncerThread.hlogFlush(tempWriter,pending);
        tempWriter.sync();
        syncBatchSize.addAndGet(doneUpto - this.syncedTillHere);
        this.syncedTillHere=doneUpto;
      }
    }
    syncTime.inc(System.currentTimeMillis() - now);
    if (!this.logRollRunning) {
      checkLowReplication();
      try {
        if (tempWriter.getLength() > this.logrollsize) {
          requestLogRoll();
        }
      }
 catch (      IOException x) {
        LOG.debug("Log roll failed and will be retried. (This is not an error)");
      }
    }
  }
 catch (  IOException e) {
    LOG.fatal("Could not sync. Requesting close of hlog",e);
    requestLogRoll();
    throw e;
  }
}
