{
  Path oldFile=null;
  if (this.writer != null) {
    try {
      sync();
      this.writer.close();
      this.writer=null;
      closeErrorCount.set(0);
    }
 catch (    Exception e) {
      LOG.error("Failed close of HLog writer",e);
      int errors=closeErrorCount.incrementAndGet();
      if (errors <= closeErrorsTolerated && !hasDeferredEntries()) {
        LOG.warn("Riding over HLog close failure! error count=" + errors);
      }
 else {
        if (hasDeferredEntries()) {
          LOG.error("Aborting due to unflushed edits in HLog");
        }
        FailedLogCloseException flce=new FailedLogCloseException("#" + currentfilenum);
        flce.initCause(e);
        throw flce;
      }
    }
    if (currentfilenum >= 0) {
      oldFile=computeFilename(currentfilenum);
      this.outputfiles.put(Long.valueOf(this.logSeqNum.get()),oldFile);
    }
  }
  return oldFile;
}
