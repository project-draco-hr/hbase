{
  final int minLength=Math.min(l1,l2);
  final int minWords=minLength / Bytes.SIZEOF_LONG;
  int j=minWords << 3;
  for (int i=0; i < j; i+=Bytes.SIZEOF_LONG) {
    long lw=UnsafeAccess.getAsLong(buf1,o1 + i);
    long rw=UnsafeAccess.getAsLong(buf2,o2 + i);
    long diff=lw ^ rw;
    if (diff != 0) {
      return lessThanUnsignedLong(lw,rw) ? -1 : 1;
    }
  }
  int offset=j;
  if (minLength - offset >= Bytes.SIZEOF_INT) {
    int il=UnsafeAccess.getAsInt(buf1,o1 + offset);
    int ir=UnsafeAccess.getAsInt(buf2,o2 + offset);
    if (il != ir) {
      return lessThanUnsignedInt(il,ir) ? -1 : 1;
    }
    offset+=Bytes.SIZEOF_INT;
  }
  if (minLength - offset >= Bytes.SIZEOF_SHORT) {
    short sl=UnsafeAccess.getAsShort(buf1,o1 + offset);
    short sr=UnsafeAccess.getAsShort(buf2,o2 + offset);
    if (sl != sr) {
      return lessThanUnsignedShort(sl,sr) ? -1 : 1;
    }
    offset+=Bytes.SIZEOF_SHORT;
  }
  if (minLength - offset == 1) {
    int a=(buf1.get(o1 + offset) & 0xff);
    int b=(buf2.get(o2 + offset) & 0xff);
    if (a != b) {
      return a - b;
    }
  }
  return l1 - l2;
}
