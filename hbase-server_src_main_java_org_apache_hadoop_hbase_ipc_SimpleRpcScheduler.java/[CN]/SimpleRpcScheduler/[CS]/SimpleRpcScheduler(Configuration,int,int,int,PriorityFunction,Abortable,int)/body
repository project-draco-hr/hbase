{
  int maxQueueLength=conf.getInt(RpcScheduler.IPC_SERVER_MAX_CALLQUEUE_LENGTH,handlerCount * RpcServer.DEFAULT_MAX_CALLQUEUE_LENGTH_PER_HANDLER);
  int maxPriorityQueueLength=conf.getInt(RpcScheduler.IPC_SERVER_PRIORITY_MAX_CALLQUEUE_LENGTH,maxQueueLength);
  this.priority=priority;
  this.highPriorityLevel=highPriorityLevel;
  this.abortable=server;
  String callQueueType=conf.get(CALL_QUEUE_TYPE_CONF_KEY,CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE);
  float callqReadShare=conf.getFloat(CALL_QUEUE_READ_SHARE_CONF_KEY,0);
  float callqScanShare=conf.getFloat(CALL_QUEUE_SCAN_SHARE_CONF_KEY,0);
  int codelTargetDelay=conf.getInt(CALL_QUEUE_CODEL_TARGET_DELAY,CALL_QUEUE_CODEL_DEFAULT_TARGET_DELAY);
  int codelInterval=conf.getInt(CALL_QUEUE_CODEL_INTERVAL,CALL_QUEUE_CODEL_DEFAULT_INTERVAL);
  double codelLifoThreshold=conf.getDouble(CALL_QUEUE_CODEL_LIFO_THRESHOLD,CALL_QUEUE_CODEL_DEFAULT_LIFO_THRESHOLD);
  float callQueuesHandlersFactor=conf.getFloat(CALL_QUEUE_HANDLER_FACTOR_CONF_KEY,0);
  int numCallQueues=Math.max(1,(int)Math.round(handlerCount * callQueuesHandlersFactor));
  LOG.info("Using " + callQueueType + " as user call queue, count="+ numCallQueues);
  if (numCallQueues > 1 && callqReadShare > 0) {
    if (callQueueType.equals(CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE)) {
      CallPriorityComparator callPriority=new CallPriorityComparator(conf,this.priority);
      callExecutor=new RWQueueRpcExecutor("RW.default",handlerCount,numCallQueues,callqReadShare,callqScanShare,maxQueueLength,conf,abortable,BoundedPriorityBlockingQueue.class,callPriority);
    }
 else     if (callQueueType.equals(CALL_QUEUE_TYPE_CODEL_CONF_VALUE)) {
      Object[] callQueueInitArgs={maxQueueLength,codelTargetDelay,codelInterval,codelLifoThreshold,numGeneralCallsDropped,numLifoModeSwitches};
      callExecutor=new RWQueueRpcExecutor("B.default",handlerCount,numCallQueues,callqReadShare,callqScanShare,AdaptiveLifoCoDelCallQueue.class,callQueueInitArgs,AdaptiveLifoCoDelCallQueue.class,callQueueInitArgs);
    }
 else {
      callExecutor=new RWQueueRpcExecutor("RW.default",handlerCount,numCallQueues,callqReadShare,callqScanShare,maxQueueLength,conf,abortable);
    }
  }
 else {
    if (callQueueType.equals(CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE)) {
      CallPriorityComparator callPriority=new CallPriorityComparator(conf,this.priority);
      callExecutor=new BalancedQueueRpcExecutor("B.default",handlerCount,numCallQueues,conf,abortable,BoundedPriorityBlockingQueue.class,maxQueueLength,callPriority);
    }
 else     if (callQueueType.equals(CALL_QUEUE_TYPE_CODEL_CONF_VALUE)) {
      callExecutor=new BalancedQueueRpcExecutor("B.default",handlerCount,numCallQueues,conf,abortable,AdaptiveLifoCoDelCallQueue.class,maxQueueLength,codelTargetDelay,codelInterval,codelLifoThreshold,numGeneralCallsDropped,numLifoModeSwitches);
    }
 else {
      callExecutor=new BalancedQueueRpcExecutor("B.default",handlerCount,numCallQueues,maxQueueLength,conf,abortable);
    }
  }
  this.priorityExecutor=priorityHandlerCount > 0 ? new BalancedQueueRpcExecutor("Priority",priorityHandlerCount,2,maxPriorityQueueLength) : null;
  this.replicationExecutor=replicationHandlerCount > 0 ? new BalancedQueueRpcExecutor("Replication",replicationHandlerCount,1,maxQueueLength,conf,abortable) : null;
}
