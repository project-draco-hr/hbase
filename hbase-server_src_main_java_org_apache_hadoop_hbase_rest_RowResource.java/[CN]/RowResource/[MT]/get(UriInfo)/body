{
  if (LOG.isDebugEnabled()) {
    LOG.debug("GET " + uriInfo.getAbsolutePath());
  }
  servlet.getMetrics().incrementRequests(1);
  try {
    ResultGenerator generator=ResultGenerator.fromRowSpec(tableResource.getName(),rowspec,null);
    if (!generator.hasNext()) {
      servlet.getMetrics().incrementFailedGetRequests(1);
      return Response.status(Response.Status.NOT_FOUND).type(MIMETYPE_TEXT).entity("Not found" + CRLF).build();
    }
    int count=0;
    CellSetModel model=new CellSetModel();
    Cell value=generator.next();
    byte[] rowKey=CellUtil.cloneRow(value);
    RowModel rowModel=new RowModel(rowKey);
    do {
      if (!Bytes.equals(CellUtil.cloneRow(value),rowKey)) {
        model.addRow(rowModel);
        rowKey=CellUtil.cloneRow(value);
        rowModel=new RowModel(rowKey);
      }
      rowModel.addCell(new CellModel(CellUtil.cloneFamily(value),CellUtil.cloneQualifier(value),value.getTimestamp(),CellUtil.cloneValue(value)));
      if (++count > rowspec.getMaxValues()) {
        break;
      }
      value=generator.next();
    }
 while (value != null);
    model.addRow(rowModel);
    servlet.getMetrics().incrementSucessfulGetRequests(1);
    return Response.ok(model).build();
  }
 catch (  RuntimeException e) {
    servlet.getMetrics().incrementFailedGetRequests(1);
    if (e.getCause() instanceof TableNotFoundException) {
      return Response.status(Response.Status.NOT_FOUND).type(MIMETYPE_TEXT).entity("Not found" + CRLF).build();
    }
    return Response.status(Response.Status.BAD_REQUEST).type(MIMETYPE_TEXT).entity("Bad request" + CRLF).build();
  }
catch (  Exception e) {
    servlet.getMetrics().incrementFailedGetRequests(1);
    return Response.status(Response.Status.SERVICE_UNAVAILABLE).type(MIMETYPE_TEXT).entity("Unavailable" + CRLF).build();
  }
}
