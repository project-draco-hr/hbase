{
  servlet.getMetrics().incrementRequests(1);
  if (servlet.isReadOnly()) {
    return Response.status(Response.Status.FORBIDDEN).type(MIMETYPE_TEXT).entity("Forbidden" + CRLF).build();
  }
  HTableInterface table=null;
  try {
    byte[] row=rowspec.getRow();
    byte[][] columns=rowspec.getColumns();
    byte[] column=null;
    if (columns != null) {
      column=columns[0];
    }
    long timestamp=HConstants.LATEST_TIMESTAMP;
    List<String> vals=headers.getRequestHeader("X-Row");
    if (vals != null && !vals.isEmpty()) {
      row=Bytes.toBytes(vals.get(0));
    }
    vals=headers.getRequestHeader("X-Column");
    if (vals != null && !vals.isEmpty()) {
      column=Bytes.toBytes(vals.get(0));
    }
    vals=headers.getRequestHeader("X-Timestamp");
    if (vals != null && !vals.isEmpty()) {
      timestamp=Long.valueOf(vals.get(0));
    }
    if (column == null) {
      return Response.status(Response.Status.BAD_REQUEST).type(MIMETYPE_TEXT).entity("Bad request" + CRLF).build();
    }
    Put put=new Put(row);
    byte parts[][]=KeyValue.parseColumn(column);
    if (parts.length == 2 && parts[1].length > 0) {
      put.add(parts[0],parts[1],timestamp,message);
    }
 else {
      put.add(parts[0],null,timestamp,message);
    }
    table=servlet.getTable(tableResource.getName());
    table.put(put);
    if (LOG.isDebugEnabled()) {
      LOG.debug("PUT " + put.toString());
    }
    servlet.getMetrics().incrementSucessfulPutRequests(1);
    return Response.ok().build();
  }
 catch (  IOException e) {
    servlet.getMetrics().incrementFailedPutRequests(1);
    return Response.status(Response.Status.SERVICE_UNAVAILABLE).type(MIMETYPE_TEXT).entity("Unavailable" + CRLF).build();
  }
 finally {
    if (table != null)     try {
      table.close();
    }
 catch (    IOException ioe) {
    }
  }
}
