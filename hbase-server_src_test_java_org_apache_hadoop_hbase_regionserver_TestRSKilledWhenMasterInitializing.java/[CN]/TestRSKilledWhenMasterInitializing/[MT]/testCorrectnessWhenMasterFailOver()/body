{
  final byte[] TABLENAME=Bytes.toBytes("testCorrectnessWhenMasterFailOver");
  final byte[] FAMILY=Bytes.toBytes("family");
  final byte[][] SPLITKEYS={Bytes.toBytes("b"),Bytes.toBytes("i")};
  MiniHBaseCluster cluster=TESTUTIL.getHBaseCluster();
  HTableDescriptor desc=new HTableDescriptor(TABLENAME);
  desc.addFamily(new HColumnDescriptor(FAMILY));
  HBaseAdmin hbaseAdmin=TESTUTIL.getHBaseAdmin();
  hbaseAdmin.createTable(desc,SPLITKEYS);
  assertTrue(hbaseAdmin.isTableAvailable(TABLENAME));
  HTable table=new HTable(TESTUTIL.getConfiguration(),TABLENAME);
  List<Put> puts=new ArrayList<Put>();
  Put put1=new Put(Bytes.toBytes("a"));
  put1.add(FAMILY,Bytes.toBytes("q1"),Bytes.toBytes("value"));
  Put put2=new Put(Bytes.toBytes("h"));
  put2.add(FAMILY,Bytes.toBytes("q1"),Bytes.toBytes("value"));
  Put put3=new Put(Bytes.toBytes("o"));
  put3.add(FAMILY,Bytes.toBytes("q1"),Bytes.toBytes("value"));
  puts.add(put1);
  puts.add(put2);
  puts.add(put3);
  table.put(puts);
  ResultScanner resultScanner=table.getScanner(new Scan());
  int count=0;
  while (resultScanner.next() != null) {
    count++;
  }
  resultScanner.close();
  table.close();
  assertEquals(3,count);
  cluster.getConfiguration().setBoolean("TestingMaster.sleep",true);
  cluster.getConfiguration().setInt("TestingMaster.sleep.duration",10000);
  abortMaster(cluster);
  TestingMaster master=startMasterAndWaitUntilLogSplit(cluster);
  int metaServerNum=cluster.getServerWithMeta();
  HRegionServer metaRS=cluster.getRegionServer(metaServerNum);
  LOG.debug("Killing metaRS");
  metaRS.kill();
  metaRS.join();
  Thread.sleep(10000 * 2);
  waitUntilMasterIsInitialized(master);
  assertTrue(hbaseAdmin.isTableAvailable(TABLENAME));
  ServerManager serverManager=cluster.getMaster().getServerManager();
  while (serverManager.areDeadServersInProgress()) {
    Thread.sleep(100);
  }
  ZooKeeperWatcher zkw=HBaseTestingUtility.getZooKeeperWatcher(TESTUTIL);
  ZKAssign.blockUntilNoRIT(zkw);
  table=new HTable(TESTUTIL.getConfiguration(),TABLENAME);
  resultScanner=table.getScanner(new Scan());
  count=0;
  while (resultScanner.next() != null) {
    count++;
  }
  resultScanner.close();
  table.close();
  assertEquals(3,count);
}
