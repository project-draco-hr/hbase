{
  String filterString="ColumnPaginationFilter(4, 6)";
  byte[] filterStringAsByteArray=Bytes.toBytes(filterString);
  filter=f.parseFilterString(filterStringAsByteArray);
  assertTrue(filter instanceof ColumnPaginationFilter);
  int limit=((ColumnPaginationFilter)filter).getLimit();
  assertEquals(limit,4);
  int offset=((ColumnPaginationFilter)filter).getOffset();
  assertEquals(offset,6);
  filterString=" ColumnPaginationFilter('124')";
  filterStringAsByteArray=Bytes.toBytes(filterString);
  try {
    filter=f.parseFilterString(filterStringAsByteArray);
    assertTrue(filter instanceof ColumnPaginationFilter);
  }
 catch (  IllegalArgumentException e) {
    System.out.println("ColumnPaginationFilter needs two arguments");
  }
  filterString=" ColumnPaginationFilter('4' , '123a')";
  filterStringAsByteArray=Bytes.toBytes(filterString);
  try {
    filter=f.parseFilterString(filterStringAsByteArray);
    assertTrue(filter instanceof ColumnPaginationFilter);
  }
 catch (  IllegalArgumentException e) {
    System.out.println("ColumnPaginationFilter needs two ints as arguments");
  }
  filterString=" ColumnPaginationFilter('4' , '-123')";
  filterStringAsByteArray=Bytes.toBytes(filterString);
  try {
    filter=f.parseFilterString(filterStringAsByteArray);
    assertTrue(filter instanceof ColumnPaginationFilter);
  }
 catch (  IllegalArgumentException e) {
    System.out.println("ColumnPaginationFilter arguments should not be negative");
  }
}
