{
  Configuration conf=HBaseConfiguration.create();
  StochasticLoadBalancer.CostFunction costFunction=new StochasticLoadBalancer.RegionReplicaHostCostFunction(conf);
  int[] servers=new int[]{3,3,3,3,3};
  TreeMap<ServerName,List<HRegionInfo>> clusterState=mockClusterServers(servers);
  BaseLoadBalancer.Cluster cluster;
  cluster=new BaseLoadBalancer.Cluster(clusterState,null,null,null);
  costFunction.init(cluster);
  double costWithoutReplicas=costFunction.cost();
  assertEquals(0,costWithoutReplicas,0);
  HRegionInfo replica1=RegionReplicaUtil.getRegionInfoForReplica(clusterState.firstEntry().getValue().get(0),1);
  clusterState.lastEntry().getValue().add(replica1);
  cluster=new BaseLoadBalancer.Cluster(clusterState,null,null,null);
  costFunction.init(cluster);
  double costWith1ReplicaDifferentServer=costFunction.cost();
  assertEquals(0,costWith1ReplicaDifferentServer,0);
  HRegionInfo replica2=RegionReplicaUtil.getRegionInfoForReplica(replica1,2);
  clusterState.lastEntry().getValue().add(replica2);
  cluster=new BaseLoadBalancer.Cluster(clusterState,null,null,null);
  costFunction.init(cluster);
  double costWith1ReplicaSameServer=costFunction.cost();
  assertTrue(costWith1ReplicaDifferentServer < costWith1ReplicaSameServer);
  HRegionInfo replica3;
  Iterator<Entry<ServerName,List<HRegionInfo>>> it;
  Entry<ServerName,List<HRegionInfo>> entry;
  clusterState=mockClusterServers(servers);
  it=clusterState.entrySet().iterator();
  entry=it.next();
  HRegionInfo hri=entry.getValue().get(0);
  replica1=RegionReplicaUtil.getRegionInfoForReplica(hri,1);
  replica2=RegionReplicaUtil.getRegionInfoForReplica(hri,2);
  replica3=RegionReplicaUtil.getRegionInfoForReplica(hri,3);
  entry.getValue().add(replica1);
  entry.getValue().add(replica2);
  it.next().getValue().add(replica3);
  cluster=new BaseLoadBalancer.Cluster(clusterState,null,null,null);
  costFunction.init(cluster);
  double costWith3ReplicasSameServer=costFunction.cost();
  clusterState=mockClusterServers(servers);
  hri=clusterState.firstEntry().getValue().get(0);
  replica1=RegionReplicaUtil.getRegionInfoForReplica(hri,1);
  replica2=RegionReplicaUtil.getRegionInfoForReplica(hri,2);
  replica3=RegionReplicaUtil.getRegionInfoForReplica(hri,3);
  clusterState.firstEntry().getValue().add(replica1);
  clusterState.lastEntry().getValue().add(replica2);
  clusterState.lastEntry().getValue().add(replica3);
  cluster=new BaseLoadBalancer.Cluster(clusterState,null,null,null);
  costFunction.init(cluster);
  double costWith2ReplicasOnTwoServers=costFunction.cost();
  assertTrue(costWith2ReplicasOnTwoServers < costWith3ReplicasSameServer);
}
