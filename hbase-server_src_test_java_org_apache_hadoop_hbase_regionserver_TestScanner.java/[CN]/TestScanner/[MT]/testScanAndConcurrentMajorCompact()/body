{
  HTableDescriptor htd=TEST_UTIL.createTableDescriptor(name.getMethodName());
  this.r=TEST_UTIL.createLocalHRegion(htd,null,null);
  HRegionIncommon hri=new HRegionIncommon(r);
  try {
    HBaseTestCase.addContent(hri,Bytes.toString(fam1),Bytes.toString(col1),firstRowBytes,secondRowBytes);
    HBaseTestCase.addContent(hri,Bytes.toString(fam2),Bytes.toString(col1),firstRowBytes,secondRowBytes);
    Delete dc=new Delete(firstRowBytes);
    dc.deleteColumns(fam1,col1);
    r.delete(dc);
    r.flushcache();
    HBaseTestCase.addContent(hri,Bytes.toString(fam1),Bytes.toString(col1),secondRowBytes,thirdRowBytes);
    HBaseTestCase.addContent(hri,Bytes.toString(fam2),Bytes.toString(col1),secondRowBytes,thirdRowBytes);
    r.flushcache();
    InternalScanner s=r.getScanner(new Scan());
    r.compactStores(true);
    List<KeyValue> results=new ArrayList<KeyValue>();
    s.next(results);
    assertTrue("result is not correct, keyValues : " + results,results.size() == 1);
    assertTrue(Bytes.BYTES_COMPARATOR.compare(firstRowBytes,results.get(0).getRow()) == 0);
    assertTrue(Bytes.BYTES_COMPARATOR.compare(fam2,results.get(0).getFamily()) == 0);
    results=new ArrayList<KeyValue>();
    s.next(results);
    assertTrue(results.size() == 2);
    assertTrue(Bytes.BYTES_COMPARATOR.compare(secondRowBytes,results.get(0).getRow()) == 0);
    assertTrue(Bytes.BYTES_COMPARATOR.compare(fam1,results.get(0).getFamily()) == 0);
    assertTrue(Bytes.BYTES_COMPARATOR.compare(fam2,results.get(1).getFamily()) == 0);
  }
  finally {
    HRegion.closeHRegion(this.r);
  }
}
