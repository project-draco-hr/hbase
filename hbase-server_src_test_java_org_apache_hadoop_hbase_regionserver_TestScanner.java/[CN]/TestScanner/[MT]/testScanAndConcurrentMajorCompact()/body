{
  HTableDescriptor htd=TEST_UTIL.createTableDescriptor(name.getMethodName());
  this.region=TEST_UTIL.createLocalHRegion(htd,null,null);
  Table hri=new RegionAsTable(region);
  try {
    HBaseTestCase.addContent(hri,Bytes.toString(fam1),Bytes.toString(col1),firstRowBytes,secondRowBytes);
    HBaseTestCase.addContent(hri,Bytes.toString(fam2),Bytes.toString(col1),firstRowBytes,secondRowBytes);
    Delete dc=new Delete(firstRowBytes);
    dc.addColumns(fam1,col1);
    region.delete(dc);
    region.flush(true);
    HBaseTestCase.addContent(hri,Bytes.toString(fam1),Bytes.toString(col1),secondRowBytes,thirdRowBytes);
    HBaseTestCase.addContent(hri,Bytes.toString(fam2),Bytes.toString(col1),secondRowBytes,thirdRowBytes);
    region.flush(true);
    InternalScanner s=region.getScanner(new Scan());
    region.compact(true);
    List<Cell> results=new ArrayList<Cell>();
    s.next(results);
    assertTrue("result is not correct, keyValues : " + results,results.size() == 1);
    assertTrue(CellUtil.matchingRow(results.get(0),firstRowBytes));
    assertTrue(CellUtil.matchingFamily(results.get(0),fam2));
    results=new ArrayList<Cell>();
    s.next(results);
    assertTrue(results.size() == 2);
    assertTrue(CellUtil.matchingRow(results.get(0),secondRowBytes));
    assertTrue(CellUtil.matchingFamily(results.get(0),fam1));
    assertTrue(CellUtil.matchingFamily(results.get(1),fam2));
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
  }
}
