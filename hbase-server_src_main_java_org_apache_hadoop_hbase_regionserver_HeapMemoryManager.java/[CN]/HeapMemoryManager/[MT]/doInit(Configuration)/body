{
  globalMemStorePercent=HeapMemorySizeUtil.getGlobalMemStorePercent(conf,false);
  blockCachePercent=conf.getFloat(HFILE_BLOCK_CACHE_SIZE_KEY,HConstants.HFILE_BLOCK_CACHE_SIZE_DEFAULT);
  HeapMemorySizeUtil.checkForClusterFreeMemoryLimit(conf);
  globalMemStorePercentMinRange=conf.getFloat(MEMSTORE_SIZE_MIN_RANGE_KEY,globalMemStorePercent);
  globalMemStorePercentMaxRange=conf.getFloat(MEMSTORE_SIZE_MAX_RANGE_KEY,globalMemStorePercent);
  if (globalMemStorePercent < globalMemStorePercentMinRange) {
    LOG.warn("Setting " + MEMSTORE_SIZE_MIN_RANGE_KEY + " to "+ globalMemStorePercent+ ", same value as "+ HeapMemorySizeUtil.MEMSTORE_SIZE_KEY+ " because supplied value greater than initial memstore size value.");
    globalMemStorePercentMinRange=globalMemStorePercent;
    conf.setFloat(MEMSTORE_SIZE_MIN_RANGE_KEY,globalMemStorePercentMinRange);
  }
  if (globalMemStorePercent > globalMemStorePercentMaxRange) {
    LOG.warn("Setting " + MEMSTORE_SIZE_MAX_RANGE_KEY + " to "+ globalMemStorePercent+ ", same value as "+ HeapMemorySizeUtil.MEMSTORE_SIZE_KEY+ " because supplied value less than initial memstore size value.");
    globalMemStorePercentMaxRange=globalMemStorePercent;
    conf.setFloat(MEMSTORE_SIZE_MAX_RANGE_KEY,globalMemStorePercentMaxRange);
  }
  if (globalMemStorePercent == globalMemStorePercentMinRange && globalMemStorePercent == globalMemStorePercentMaxRange) {
    return false;
  }
  blockCachePercentMinRange=conf.getFloat(BLOCK_CACHE_SIZE_MIN_RANGE_KEY,blockCachePercent);
  blockCachePercentMaxRange=conf.getFloat(BLOCK_CACHE_SIZE_MAX_RANGE_KEY,blockCachePercent);
  if (blockCachePercent < blockCachePercentMinRange) {
    LOG.warn("Setting " + BLOCK_CACHE_SIZE_MIN_RANGE_KEY + " to "+ blockCachePercent+ ", same value as "+ HFILE_BLOCK_CACHE_SIZE_KEY+ " because supplied value greater than initial block cache size.");
    blockCachePercentMinRange=blockCachePercent;
    conf.setFloat(BLOCK_CACHE_SIZE_MIN_RANGE_KEY,blockCachePercentMinRange);
  }
  if (blockCachePercent > blockCachePercentMaxRange) {
    LOG.warn("Setting " + BLOCK_CACHE_SIZE_MAX_RANGE_KEY + " to "+ blockCachePercent+ ", same value as "+ HFILE_BLOCK_CACHE_SIZE_KEY+ " because supplied value less than initial block cache size.");
    blockCachePercentMaxRange=blockCachePercent;
    conf.setFloat(BLOCK_CACHE_SIZE_MAX_RANGE_KEY,blockCachePercentMaxRange);
  }
  if (blockCachePercent == blockCachePercentMinRange && blockCachePercent == blockCachePercentMaxRange) {
    return false;
  }
  int gml=(int)(globalMemStorePercentMaxRange * CONVERT_TO_PERCENTAGE);
  this.l2BlockCachePercent=HeapMemorySizeUtil.getL2BlockCacheHeapPercent(conf);
  int bcul=(int)((blockCachePercentMinRange + l2BlockCachePercent) * CONVERT_TO_PERCENTAGE);
  if (CONVERT_TO_PERCENTAGE - (gml + bcul) < CLUSTER_MINIMUM_MEMORY_THRESHOLD) {
    throw new RuntimeException("Current heap configuration for MemStore and BlockCache exceeds " + "the threshold required for successful cluster operation. " + "The combined value cannot exceed 0.8. Please check the settings for " + MEMSTORE_SIZE_MAX_RANGE_KEY + " and "+ BLOCK_CACHE_SIZE_MIN_RANGE_KEY+ " in your configuration. "+ MEMSTORE_SIZE_MAX_RANGE_KEY+ " is "+ globalMemStorePercentMaxRange+ " and "+ BLOCK_CACHE_SIZE_MIN_RANGE_KEY+ " is "+ blockCachePercentMinRange);
  }
  gml=(int)(globalMemStorePercentMinRange * CONVERT_TO_PERCENTAGE);
  bcul=(int)((blockCachePercentMaxRange + l2BlockCachePercent) * CONVERT_TO_PERCENTAGE);
  if (CONVERT_TO_PERCENTAGE - (gml + bcul) < CLUSTER_MINIMUM_MEMORY_THRESHOLD) {
    throw new RuntimeException("Current heap configuration for MemStore and BlockCache exceeds " + "the threshold required for successful cluster operation. " + "The combined value cannot exceed 0.8. Please check the settings for " + MEMSTORE_SIZE_MIN_RANGE_KEY + " and "+ BLOCK_CACHE_SIZE_MAX_RANGE_KEY+ " in your configuration. "+ MEMSTORE_SIZE_MIN_RANGE_KEY+ " is "+ globalMemStorePercentMinRange+ " and "+ BLOCK_CACHE_SIZE_MAX_RANGE_KEY+ " is "+ blockCachePercentMaxRange);
  }
  return true;
}
