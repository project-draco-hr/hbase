{
  Random random=Mockito.mock(Random.class);
  Mockito.when(random.nextInt(Mockito.any(Integer.class))).thenAnswer(new Answer<Integer>(){
    int[] numbers={1,1,2};
    int count=0;
    @Override public Integer answer(    InvocationOnMock invocation){
      int ret=numbers[count];
      count++;
      return ret;
    }
  }
);
  HBaseTestingUtility.PortAllocator.AvailablePortChecker portChecker=Mockito.mock(HBaseTestingUtility.PortAllocator.AvailablePortChecker.class);
  Mockito.when(portChecker.available(Mockito.any(Integer.class))).thenReturn(true);
  HBaseTestingUtility.PortAllocator portAllocator=new HBaseTestingUtility.PortAllocator(random,portChecker);
  int port1=portAllocator.randomFreePort();
  int port2=portAllocator.randomFreePort();
  assertNotEquals(port1,port2);
  Mockito.verify(random,Mockito.times(3)).nextInt(Mockito.any(Integer.class));
}
