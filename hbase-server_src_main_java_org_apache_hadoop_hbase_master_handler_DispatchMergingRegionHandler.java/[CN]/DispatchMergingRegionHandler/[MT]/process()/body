{
  boolean regionAHasMergeQualifier=!catalogJanitor.cleanMergeQualifier(region_a);
  if (regionAHasMergeQualifier || !catalogJanitor.cleanMergeQualifier(region_b)) {
    LOG.info("Skip merging regions " + region_a.getRegionNameAsString() + ", "+ region_b.getRegionNameAsString()+ ", because region "+ (regionAHasMergeQualifier ? region_a.getEncodedName() : region_b.getEncodedName())+ " has merge qualifier");
    return;
  }
  RegionStates regionStates=masterServices.getAssignmentManager().getRegionStates();
  ServerName region_a_location=regionStates.getRegionServerOfRegion(region_a);
  ServerName region_b_location=regionStates.getRegionServerOfRegion(region_b);
  if (region_a_location == null || region_b_location == null) {
    LOG.info("Skip merging regions " + region_a.getRegionNameAsString() + ", "+ region_b.getRegionNameAsString()+ ", because region "+ (region_a_location == null ? region_a.getEncodedName() : region_b.getEncodedName())+ " is not online now");
    return;
  }
  long startTime=EnvironmentEdgeManager.currentTimeMillis();
  boolean onSameRS=region_a_location.equals(region_b_location);
  if (!onSameRS) {
    RegionLoad loadOfRegionA=getRegionLoad(region_a_location,region_a);
    RegionLoad loadOfRegionB=getRegionLoad(region_b_location,region_b);
    if (loadOfRegionA != null && loadOfRegionB != null && loadOfRegionA.getRequestsCount() < loadOfRegionB.getRequestsCount()) {
      HRegionInfo tmpRegion=this.region_a;
      this.region_a=this.region_b;
      this.region_b=tmpRegion;
      ServerName tmpLocation=region_a_location;
      region_a_location=region_b_location;
      region_b_location=tmpLocation;
    }
    RegionPlan regionPlan=new RegionPlan(region_b,region_b_location,region_a_location);
    LOG.info("Moving regions to same server for merge: " + regionPlan.toString());
    masterServices.getAssignmentManager().balance(regionPlan);
    while (!masterServices.isStopped()) {
      try {
        Thread.sleep(20);
        boolean isRIT=regionStates.isRegionInTransition(region_b);
        region_b_location=masterServices.getAssignmentManager().getRegionStates().getRegionServerOfRegion(region_b);
        onSameRS=region_a_location.equals(region_b_location);
        if (onSameRS || !isRIT) {
          break;
        }
        if ((EnvironmentEdgeManager.currentTimeMillis() - startTime) > timeout)         break;
      }
 catch (      InterruptedException e) {
        InterruptedIOException iioe=new InterruptedIOException();
        iioe.initCause(e);
        throw iioe;
      }
    }
  }
  if (onSameRS) {
    startTime=EnvironmentEdgeManager.currentTimeMillis();
    while (!masterServices.isStopped()) {
      try {
        masterServices.getServerManager().sendRegionsMerge(region_a_location,region_a,region_b,forcible);
        LOG.info("Sent merge to server " + region_a_location + " for region "+ region_a.getEncodedName()+ ","+ region_b.getEncodedName()+ ", focible="+ forcible);
        break;
      }
 catch (      RegionOpeningException roe) {
        if ((EnvironmentEdgeManager.currentTimeMillis() - startTime) > timeout) {
          LOG.warn("Failed sending merge to " + region_a_location + " after "+ timeout+ "ms",roe);
          break;
        }
      }
catch (      IOException ie) {
        LOG.warn("Failed sending merge to " + region_a_location + " for region "+ region_a.getEncodedName()+ ","+ region_b.getEncodedName()+ ", focible="+ forcible,ie);
        break;
      }
    }
  }
 else {
    LOG.info("Cancel merging regions " + region_a.getRegionNameAsString() + ", "+ region_b.getRegionNameAsString()+ ", because can't move them together after "+ (EnvironmentEdgeManager.currentTimeMillis() - startTime)+ "ms");
  }
}
