{
  Thread.currentThread().setName(getClass().getSimpleName());
  try {
    long expectedKey=startKey;
    Queue<Long> sortedKeys=new PriorityQueue<Long>();
    while (expectedKey < endKey) {
      Long k;
      try {
        k=insertedKeys.poll(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        LOG.info("Inserted key tracker thread interrupted",e);
        break;
      }
      if (k == null) {
        continue;
      }
      if (k == expectedKey) {
        insertedUpToKey.set(k);
        ++expectedKey;
      }
 else {
        sortedKeys.add(k);
      }
      while (!sortedKeys.isEmpty() && ((k=sortedKeys.peek()) == expectedKey)) {
        sortedKeys.poll();
        insertedUpToKey.set(k);
        ++expectedKey;
      }
      insertedKeyQueueSize.set(insertedKeys.size() + sortedKeys.size());
    }
  }
 catch (  Exception ex) {
    LOG.error("Error in inserted key tracker",ex);
  }
 finally {
    numThreadsWorking.decrementAndGet();
  }
}
