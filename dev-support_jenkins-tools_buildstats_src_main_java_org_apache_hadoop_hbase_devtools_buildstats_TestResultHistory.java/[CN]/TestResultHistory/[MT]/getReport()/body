{
  HistoryReport report=new HistoryReport();
  List<Integer> buildWithTestResults=new ArrayList<Integer>();
  Map<String,int[]> failureStats=new HashMap<String,int[]>();
  try {
    JenkinsServer jenkins=new JenkinsServer(this.client);
    Map<String,Job> jobs=jenkins.getJobs();
    JobWithDetails job=jobs.get(jobName.toLowerCase()).details();
    Build lastBuild=job.getLastBuild();
    int startingBuildNumber=(lastBuild.getNumber() - BUILD_HISTORY_NUM > 0) ? lastBuild.getNumber() - BUILD_HISTORY_NUM + 1 : 1;
    Map<Integer,HashMap<String,String>> executedTestCases=new HashMap<Integer,HashMap<String,String>>();
    Map<Integer,Set<String>> skippedTestCases=new TreeMap<Integer,Set<String>>();
    Set<String> allExecutedTestCases=new HashSet<String>();
    Map<Integer,Set<String>> normalizedTestSet=new HashMap<Integer,Set<String>>();
    String buildUrl=lastBuild.getUrl();
    for (int i=startingBuildNumber; i <= lastBuild.getNumber(); i++) {
      HashMap<String,String> buildExecutedTestCases=new HashMap<String,String>(2048);
      String curBuildUrl=buildUrl.replaceFirst("/" + lastBuild.getNumber(),"/" + i);
      List<String> failedCases=null;
      try {
        failedCases=getBuildFailedTestCases(curBuildUrl,buildExecutedTestCases);
        buildWithTestResults.add(i);
      }
 catch (      Exception ex) {
        continue;
      }
      executedTestCases.put(i,buildExecutedTestCases);
      HashSet<String> tmpSet=new HashSet<String>();
      for (      String tmpTestCase : buildExecutedTestCases.keySet()) {
        allExecutedTestCases.add(tmpTestCase.substring(0,tmpTestCase.lastIndexOf(".")));
        tmpSet.add(tmpTestCase.substring(0,tmpTestCase.lastIndexOf(".")));
      }
      normalizedTestSet.put(i,tmpSet);
      for (      String curFailedTestCase : failedCases) {
        if (failureStats.containsKey(curFailedTestCase)) {
          int[] testCaseResultArray=failureStats.get(curFailedTestCase);
          testCaseResultArray[i - startingBuildNumber]=-1;
        }
 else {
          int[] testResult=new int[BUILD_HISTORY_NUM];
          testResult[i - startingBuildNumber]=-1;
          for (int k=startingBuildNumber; k < i; k++) {
            HashMap<String,String> tmpBuildExecutedTestCases=executedTestCases.get(k);
            if (tmpBuildExecutedTestCases != null && tmpBuildExecutedTestCases.containsKey(curFailedTestCase)) {
              String statusStr=tmpBuildExecutedTestCases.get(curFailedTestCase);
              testResult[k - startingBuildNumber]=convertStatusStringToInt(statusStr);
            }
          }
          failureStats.put(curFailedTestCase,testResult);
        }
      }
      for (      String curTestCase : failureStats.keySet()) {
        if (!failedCases.contains(curTestCase) && buildExecutedTestCases.containsKey(curTestCase)) {
          String statusVal=buildExecutedTestCases.get(curTestCase);
          int[] testCaseResultArray=failureStats.get(curTestCase);
          testCaseResultArray[i - startingBuildNumber]=convertStatusStringToInt(statusVal);
        }
      }
    }
    for (int i=startingBuildNumber; i <= lastBuild.getNumber(); i++) {
      Set<String> skippedTests=new HashSet<String>();
      HashMap<String,String> tmpBuildExecutedTestCases=executedTestCases.get(i);
      if (tmpBuildExecutedTestCases == null || tmpBuildExecutedTestCases.isEmpty())       continue;
      Set<String> tmpNormalizedTestCaseSet=normalizedTestSet.get(i);
      for (      String testCase : allExecutedTestCases) {
        if (!tmpNormalizedTestCaseSet.contains(testCase)) {
          skippedTests.add(testCase);
        }
      }
      skippedTestCases.put(i,skippedTests);
    }
    report.setBuildsWithTestResults(buildWithTestResults);
    for (    String failedTestCase : failureStats.keySet()) {
      int[] resultHistory=failureStats.get(failedTestCase);
      int[] compactHistory=new int[buildWithTestResults.size()];
      int index=0;
      for (      Integer i : buildWithTestResults) {
        compactHistory[index]=resultHistory[i - startingBuildNumber];
        index++;
      }
      failureStats.put(failedTestCase,compactHistory);
    }
    report.setHistoryResults(failureStats,skippedTestCases);
  }
 catch (  Exception ex) {
    System.out.println(ex);
    ex.printStackTrace();
  }
  return report;
}
