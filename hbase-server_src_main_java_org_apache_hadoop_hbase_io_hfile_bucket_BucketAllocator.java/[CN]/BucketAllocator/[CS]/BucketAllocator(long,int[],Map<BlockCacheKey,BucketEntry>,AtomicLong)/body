{
  this(availableSpace,bucketSizes);
  boolean[] reconfigured=new boolean[buckets.length];
  int sizeNotMatchedCount=0;
  int insufficientCapacityCount=0;
  Iterator<Map.Entry<BlockCacheKey,BucketEntry>> iterator=map.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<BlockCacheKey,BucketEntry> entry=iterator.next();
    long foundOffset=entry.getValue().offset();
    int foundLen=entry.getValue().getLength();
    int bucketSizeIndex=-1;
    for (int i=0; i < this.bucketSizes.length; ++i) {
      if (foundLen <= this.bucketSizes[i]) {
        bucketSizeIndex=i;
        break;
      }
    }
    if (bucketSizeIndex == -1) {
      sizeNotMatchedCount++;
      iterator.remove();
      continue;
    }
    int bucketNo=(int)(foundOffset / bucketCapacity);
    if (bucketNo < 0 || bucketNo >= buckets.length) {
      insufficientCapacityCount++;
      iterator.remove();
      continue;
    }
    Bucket b=buckets[bucketNo];
    if (reconfigured[bucketNo]) {
      if (b.sizeIndex() != bucketSizeIndex) {
        throw new BucketAllocatorException("Inconsistent allocation in bucket map;");
      }
    }
 else {
      if (!b.isCompletelyFree()) {
        throw new BucketAllocatorException("Reconfiguring bucket " + bucketNo + " but it's already allocated; corrupt data");
      }
      BucketSizeInfo bsi=bucketSizeInfos[bucketSizeIndex];
      BucketSizeInfo oldbsi=bucketSizeInfos[b.sizeIndex()];
      oldbsi.removeBucket(b);
      bsi.instantiateBucket(b);
      reconfigured[bucketNo]=true;
    }
    realCacheSize.addAndGet(foundLen);
    buckets[bucketNo].addAllocation(foundOffset);
    usedSize+=buckets[bucketNo].getItemAllocationSize();
    bucketSizeInfos[bucketSizeIndex].blockAllocated(b);
  }
  if (sizeNotMatchedCount > 0) {
    LOG.warn("There are " + sizeNotMatchedCount + " blocks which can't be rebuilt because "+ "there is no matching bucket size for these blocks");
  }
  if (insufficientCapacityCount > 0) {
    LOG.warn("There are " + insufficientCapacityCount + " blocks which can't be rebuilt - "+ "did you shrink the cache?");
  }
}
