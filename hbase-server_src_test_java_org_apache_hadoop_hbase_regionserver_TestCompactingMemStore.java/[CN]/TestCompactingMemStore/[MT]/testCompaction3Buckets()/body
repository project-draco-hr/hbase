{
  String[] keys1={"A","A","B","C"};
  String[] keys2={"A","B","D"};
  String[] keys3={"D","B","B"};
  addRowsByKeys(memstore,keys1);
  assertEquals(496,region.getMemstoreSize());
  long size=memstore.getFlushableSize();
  ((CompactingMemStore)memstore).flushInMemory();
  String tstStr="\n\nFlushable size after first flush in memory:" + size + ". Is MemmStore in compaction?:"+ ((CompactingMemStore)memstore).isMemStoreFlushingInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  assertEquals(264,regionServicesForStores.getGlobalMemstoreTotalSize());
  addRowsByKeys(memstore,keys2);
  tstStr+=" After adding second part of the keys. Memstore size: " + region.getMemstoreSize() + ", Memstore Total Size: "+ regionServicesForStores.getGlobalMemstoreTotalSize()+ "\n\n";
  assertEquals(640,regionServicesForStores.getGlobalMemstoreTotalSize());
  ((CompactingMemStore)memstore).disableCompaction();
  size=memstore.getFlushableSize();
  ((CompactingMemStore)memstore).flushInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  assertEquals(640,regionServicesForStores.getGlobalMemstoreTotalSize());
  addRowsByKeys(memstore,keys3);
  assertEquals(1016,regionServicesForStores.getGlobalMemstoreTotalSize());
  ((CompactingMemStore)memstore).enableCompaction();
  size=memstore.getFlushableSize();
  ((CompactingMemStore)memstore).flushInMemory();
  while (((CompactingMemStore)memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  assertEquals(384,regionServicesForStores.getGlobalMemstoreTotalSize());
  size=memstore.getFlushableSize();
  MemStoreSnapshot snapshot=memstore.snapshot();
  region.addAndGetGlobalMemstoreSize(-size);
  ImmutableSegment s=memstore.getSnapshot();
  assertEquals(4,s.getCellsCount());
  assertEquals(0,regionServicesForStores.getGlobalMemstoreTotalSize());
  memstore.clearSnapshot(snapshot.getId());
}
