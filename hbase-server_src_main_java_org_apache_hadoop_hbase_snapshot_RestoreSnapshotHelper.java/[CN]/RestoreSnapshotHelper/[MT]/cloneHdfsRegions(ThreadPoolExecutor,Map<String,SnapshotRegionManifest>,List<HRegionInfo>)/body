{
  if (regions == null || regions.size() == 0)   return null;
  final Map<String,HRegionInfo> snapshotRegions=new HashMap<String,HRegionInfo>(regions.size());
  HRegionInfo[] clonedRegionsInfo=new HRegionInfo[regions.size()];
  for (int i=0; i < clonedRegionsInfo.length; ++i) {
    HRegionInfo snapshotRegionInfo=regions.get(i);
    clonedRegionsInfo[i]=cloneRegionInfo(snapshotRegionInfo);
    String snapshotRegionName=snapshotRegionInfo.getEncodedName();
    String clonedRegionName=clonedRegionsInfo[i].getEncodedName();
    regionsMap.put(Bytes.toBytes(snapshotRegionName),Bytes.toBytes(clonedRegionName));
    LOG.info("clone region=" + snapshotRegionName + " as "+ clonedRegionName);
    snapshotRegions.put(clonedRegionName,snapshotRegionInfo);
  }
  ModifyRegionUtils.createRegions(exec,conf,rootDir,tableDesc,clonedRegionsInfo,new ModifyRegionUtils.RegionFillTask(){
    @Override public void fillRegion(    final HRegion region) throws IOException {
      HRegionInfo snapshotHri=snapshotRegions.get(region.getRegionInfo().getEncodedName());
      cloneRegion(region,snapshotHri,regionManifests.get(snapshotHri.getEncodedName()));
    }
  }
);
  return clonedRegionsInfo;
}
