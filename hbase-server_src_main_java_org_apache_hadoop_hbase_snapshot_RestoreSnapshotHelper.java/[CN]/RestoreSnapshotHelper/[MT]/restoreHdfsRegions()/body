{
  LOG.debug("starting restore");
  Set<String> snapshotRegionNames=SnapshotReferenceUtil.getSnapshotRegionNames(fs,snapshotDir);
  if (snapshotRegionNames == null) {
    LOG.warn("Nothing to restore. Snapshot " + snapshotDesc + " looks empty");
    return null;
  }
  RestoreMetaChanges metaChanges=new RestoreMetaChanges(parentsMap);
  List<HRegionInfo> tableRegions=getTableRegions();
  if (tableRegions != null) {
    monitor.rethrowException();
    for (    HRegionInfo regionInfo : tableRegions) {
      String regionName=regionInfo.getEncodedName();
      if (snapshotRegionNames.contains(regionName)) {
        LOG.info("region to restore: " + regionName);
        snapshotRegionNames.remove(regionName);
        metaChanges.addRegionToRestore(regionInfo);
      }
 else {
        LOG.info("region to remove: " + regionName);
        metaChanges.addRegionToRemove(regionInfo);
      }
    }
    monitor.rethrowException();
    status.setStatus("Restoring table regions...");
    restoreHdfsRegions(metaChanges.getRegionsToRestore());
    status.setStatus("Finished restoring all table regions.");
    monitor.rethrowException();
    status.setStatus("Starting to delete excess regions from table");
    removeHdfsRegions(metaChanges.getRegionsToRemove());
    status.setStatus("Finished deleting excess regions from table.");
  }
  if (snapshotRegionNames.size() > 0) {
    List<HRegionInfo> regionsToAdd=new LinkedList<HRegionInfo>();
    monitor.rethrowException();
    for (    String regionName : snapshotRegionNames) {
      LOG.info("region to add: " + regionName);
      Path regionDir=new Path(snapshotDir,regionName);
      regionsToAdd.add(HRegionFileSystem.loadRegionInfoFileContent(fs,regionDir));
    }
    monitor.rethrowException();
    status.setStatus("Cloning regions...");
    HRegionInfo[] clonedRegions=cloneHdfsRegions(regionsToAdd);
    metaChanges.setNewRegions(clonedRegions);
    status.setStatus("Finished cloning regions.");
  }
  monitor.rethrowException();
  status.setStatus("Restoring WALs to table...");
  restoreWALs();
  status.setStatus("Finished restoring WALs to table.");
  return metaChanges;
}
