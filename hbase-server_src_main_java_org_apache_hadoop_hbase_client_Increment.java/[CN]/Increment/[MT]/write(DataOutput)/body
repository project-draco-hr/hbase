{
  out.writeByte(INCREMENT_VERSION);
  Bytes.writeByteArray(out,this.row);
  tr.write(out);
  out.writeLong(this.lockId);
  if (familyMap.size() == 0) {
    throw new IOException("At least one column required");
  }
  out.writeInt(familyMap.size());
  for (  Map.Entry<byte[],NavigableMap<byte[],Long>> entry : familyMap.entrySet()) {
    Bytes.writeByteArray(out,entry.getKey());
    NavigableMap<byte[],Long> columnSet=entry.getValue();
    if (columnSet == null) {
      throw new IOException("At least one column required per family");
    }
 else {
      out.writeBoolean(true);
      out.writeInt(columnSet.size());
      for (      Map.Entry<byte[],Long> qualifier : columnSet.entrySet()) {
        Bytes.writeByteArray(out,qualifier.getKey());
        out.writeLong(qualifier.getValue());
      }
    }
  }
  out.writeBoolean(writeToWAL);
}
