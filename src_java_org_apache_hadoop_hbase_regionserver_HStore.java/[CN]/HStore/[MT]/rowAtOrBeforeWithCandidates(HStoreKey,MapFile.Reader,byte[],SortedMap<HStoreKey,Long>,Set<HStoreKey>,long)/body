{
  HStoreKey readkey=new HStoreKey();
  ImmutableBytesWritable readval=new ImmutableBytesWritable();
  HStoreKey searchKey=new HStoreKey(candidateKeys.firstKey().getRow());
  if (searchKey.compareTo(startKey) < 0) {
    searchKey=startKey;
  }
  readkey=(HStoreKey)map.getClosest(searchKey,readval,true);
  if (readkey == null) {
    return;
  }
  do {
    HStoreKey strippedKey=null;
    if (Bytes.equals(readkey.getRow(),row)) {
      strippedKey=stripTimestamp(readkey);
      if (!HLogEdit.isDeleted(readval.get())) {
        if (notExpiredAndNotInDeletes(this.ttl,readkey,now,deletes)) {
          candidateKeys.put(strippedKey,new Long(readkey.getTimestamp()));
        }
      }
 else {
        if (candidateKeys.containsKey(strippedKey)) {
          long bestCandidateTs=candidateKeys.get(strippedKey).longValue();
          if (bestCandidateTs <= readkey.getTimestamp()) {
            candidateKeys.remove(strippedKey);
          }
        }
      }
    }
 else     if (Bytes.compareTo(readkey.getRow(),row) > 0) {
      break;
    }
 else {
      strippedKey=stripTimestamp(readkey);
      if (!HLogEdit.isDeleted(readval.get())) {
        if (notExpiredAndNotInDeletes(this.ttl,readkey,now,deletes)) {
          candidateKeys.put(strippedKey,Long.valueOf(readkey.getTimestamp()));
        }
      }
 else {
        if (candidateKeys.containsKey(strippedKey)) {
          long bestCandidateTs=candidateKeys.get(strippedKey).longValue();
          if (bestCandidateTs <= readkey.getTimestamp()) {
            candidateKeys.remove(strippedKey);
          }
        }
      }
    }
  }
 while (map.next(readkey,readval));
}
