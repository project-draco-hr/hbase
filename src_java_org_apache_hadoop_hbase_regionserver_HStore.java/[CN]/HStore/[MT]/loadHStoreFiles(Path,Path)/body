{
  if (LOG.isDebugEnabled()) {
    LOG.debug("infodir: " + infodir.toString() + " mapdir: "+ mapdir.toString());
  }
  Path infofiles[]=fs.listPaths(new Path[]{infodir});
  ArrayList<HStoreFile> results=new ArrayList<HStoreFile>(infofiles.length);
  ArrayList<Path> mapfiles=new ArrayList<Path>(infofiles.length);
  for (  Path p : infofiles) {
    Matcher m=REF_NAME_PARSER.matcher(p.getName());
    boolean isReference=isReference(p,m);
    long fid=Long.parseLong(m.group(1));
    HStoreFile curfile=null;
    HStoreFile.Reference reference=null;
    if (isReference) {
      reference=readSplitInfo(p,fs);
    }
    curfile=new HStoreFile(conf,fs,basedir,info.getEncodedName(),family.getFamilyName(),fid,reference);
    Path mapfile=curfile.getMapFilePath();
    if (!fs.exists(mapfile)) {
      fs.delete(curfile.getInfoFilePath());
      LOG.warn("Mapfile " + mapfile.toString() + " does not exist. "+ "Cleaned up info file.  Continuing...");
      continue;
    }
    results.add(curfile);
    mapfiles.add(mapfile);
  }
  Path datfiles[]=fs.listPaths(new Path[]{mapdir});
  for (int i=0; i < datfiles.length; i++) {
    if (!mapfiles.contains(fs.makeQualified(datfiles[i]))) {
      fs.delete(datfiles[i]);
    }
  }
  return results;
}
