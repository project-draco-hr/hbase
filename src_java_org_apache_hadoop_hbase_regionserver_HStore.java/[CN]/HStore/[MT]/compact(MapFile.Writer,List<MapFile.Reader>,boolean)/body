{
  List<MapFile.Reader> copy=new ArrayList<MapFile.Reader>(pReaders);
  Collections.reverse(copy);
  MapFile.Reader[] rdrs=copy.toArray(new MapFile.Reader[0]);
  try {
    HStoreKey[] keys=new HStoreKey[rdrs.length];
    ImmutableBytesWritable[] vals=new ImmutableBytesWritable[rdrs.length];
    boolean[] done=new boolean[rdrs.length];
    for (int i=0; i < rdrs.length; i++) {
      keys[i]=new HStoreKey(HConstants.EMPTY_BYTE_ARRAY,this.info);
      vals[i]=new ImmutableBytesWritable();
      done[i]=false;
    }
    int numDone=0;
    for (int i=0; i < rdrs.length; i++) {
      rdrs[i].reset();
      done[i]=!rdrs[i].next(keys[i],vals[i]);
      if (done[i]) {
        numDone++;
      }
    }
    long now=System.currentTimeMillis();
    int timesSeen=0;
    byte[] lastRow=null;
    byte[] lastColumn=null;
    while (numDone < done.length) {
      int smallestKey=-1;
      for (int i=0; i < rdrs.length; i++) {
        if (done[i]) {
          continue;
        }
        if (smallestKey < 0) {
          smallestKey=i;
        }
 else {
          if (keys[i].compareTo(keys[smallestKey]) < 0) {
            smallestKey=i;
          }
        }
      }
      HStoreKey sk=keys[smallestKey];
      if (HStoreKey.equalsTwoRowKeys(info,lastRow,sk.getRow()) && Bytes.equals(lastColumn,sk.getColumn())) {
        timesSeen++;
      }
 else {
        timesSeen=1;
      }
      if (timesSeen <= family.getMaxVersions() || !majorCompaction) {
        if (sk.getRow().length != 0 && sk.getColumn().length != 0) {
          if (!isExpired(sk,ttl,now)) {
            compactedOut.append(sk,vals[smallestKey]);
          }
 else {
            timesSeen--;
          }
        }
      }
      lastRow=sk.getRow();
      lastColumn=sk.getColumn();
      if (!rdrs[smallestKey].next(keys[smallestKey],vals[smallestKey])) {
        done[smallestKey]=true;
        rdrs[smallestKey].close();
        rdrs[smallestKey]=null;
        numDone++;
      }
    }
  }
  finally {
    closeCompactionReaders(Arrays.asList(rdrs));
  }
}
