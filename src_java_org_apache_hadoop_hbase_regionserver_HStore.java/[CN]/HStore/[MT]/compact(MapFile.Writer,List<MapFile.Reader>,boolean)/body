{
  MapFile.Reader[] rdrs=reverse(pReaders);
  try {
    HStoreKey[] keys=new HStoreKey[rdrs.length];
    ImmutableBytesWritable[] vals=new ImmutableBytesWritable[rdrs.length];
    boolean[] done=new boolean[rdrs.length];
    for (int i=0; i < rdrs.length; i++) {
      keys[i]=new HStoreKey(HConstants.EMPTY_BYTE_ARRAY,this.info);
      vals[i]=new ImmutableBytesWritable();
      done[i]=false;
    }
    int numDone=0;
    for (int i=0; i < rdrs.length; i++) {
      rdrs[i].reset();
      done[i]=!rdrs[i].next(keys[i],vals[i]);
      if (done[i]) {
        numDone++;
      }
    }
    long now=System.currentTimeMillis();
    int timesSeen=0;
    HStoreKey lastSeen=new HStoreKey();
    HStoreKey lastDelete=null;
    while (numDone < done.length) {
      int lowestKey=getLowestKey(rdrs,keys,done);
      HStoreKey sk=keys[lowestKey];
      if (HStoreKey.equalsTwoRowKeys(info,lastSeen.getRow(),sk.getRow()) && Bytes.equals(lastSeen.getColumn(),sk.getColumn())) {
        timesSeen++;
        if (lastDelete != null && lastDelete.getTimestamp() != sk.getTimestamp()) {
          lastDelete=null;
        }
      }
 else {
        timesSeen=1;
        lastDelete=null;
      }
      if (sk.getRow().length != 0 && sk.getColumn().length != 0) {
        ImmutableBytesWritable value=vals[lowestKey];
        if (!majorCompaction) {
          compactedOut.append(sk,value);
        }
 else {
          boolean expired=false;
          boolean deleted=false;
          if (timesSeen <= family.getMaxVersions() && !(expired=isExpired(sk,ttl,now))) {
            if (lastDelete != null && sk.equals(lastDelete)) {
              deleted=true;
            }
 else             if (HLogEdit.isDeleted(value.get())) {
              deleted=true;
              lastDelete=new HStoreKey(sk);
            }
 else {
              compactedOut.append(sk,vals[lowestKey]);
            }
          }
          if (expired || deleted) {
            timesSeen--;
          }
        }
      }
      lastSeen=new HStoreKey(sk);
      if (!rdrs[lowestKey].next(keys[lowestKey],vals[lowestKey])) {
        done[lowestKey]=true;
        rdrs[lowestKey].close();
        rdrs[lowestKey]=null;
        numDone++;
      }
    }
  }
  finally {
    closeCompactionReaders(Arrays.asList(rdrs));
  }
}
