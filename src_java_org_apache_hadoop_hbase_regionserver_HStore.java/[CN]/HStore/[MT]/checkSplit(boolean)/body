{
  if (this.storefiles.size() <= 0) {
    return null;
  }
  if (!force && (storeSize < this.desiredMaxFileSize)) {
    return null;
  }
  this.lock.readLock().lock();
  try {
    boolean splitable=true;
    long maxSize=0L;
    Long mapIndex=Long.valueOf(0L);
synchronized (storefiles) {
      for (      Map.Entry<Long,HStoreFile> e : storefiles.entrySet()) {
        HStoreFile curHSF=e.getValue();
        long size=curHSF.length();
        if (size > maxSize) {
          maxSize=size;
          mapIndex=e.getKey();
        }
        if (splitable) {
          splitable=!curHSF.isReference();
        }
      }
    }
    if (!splitable) {
      return null;
    }
    MapFile.Reader r=this.readers.get(mapIndex);
    r.reset();
    HStoreKey firstKey=new HStoreKey();
    HStoreKey lastKey=new HStoreKey();
    Writable value=new ImmutableBytesWritable();
    r.next(firstKey,value);
    r.finalKey(lastKey);
    HStoreKey mk=(HStoreKey)r.midKey();
    if (mk != null) {
      if (HStoreKey.equalsTwoRowKeys(info,mk.getRow(),firstKey.getRow()) && HStoreKey.equalsTwoRowKeys(info,mk.getRow(),lastKey.getRow())) {
        return null;
      }
      return new StoreSize(maxSize,mk.getRow());
    }
  }
 catch (  IOException e) {
    LOG.warn("Failed getting store size for " + this.storeNameStr,e);
  }
 finally {
    this.lock.readLock().unlock();
  }
  return null;
}
