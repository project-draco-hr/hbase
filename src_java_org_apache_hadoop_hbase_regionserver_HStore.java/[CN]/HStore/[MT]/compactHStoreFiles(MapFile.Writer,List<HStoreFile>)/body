{
  int size=toCompactFiles.size();
  CompactionReader[] rdrs=new CompactionReader[size];
  int index=0;
  for (  HStoreFile hsf : toCompactFiles) {
    try {
      rdrs[index++]=new MapFileCompactionReader(hsf.getReader(fs,bloomFilter));
    }
 catch (    IOException e) {
      LOG.warn("Failed with " + e.toString() + ": "+ hsf.toString());
      closeCompactionReaders(rdrs);
      throw e;
    }
  }
  try {
    HStoreKey[] keys=new HStoreKey[rdrs.length];
    ImmutableBytesWritable[] vals=new ImmutableBytesWritable[rdrs.length];
    boolean[] done=new boolean[rdrs.length];
    for (int i=0; i < rdrs.length; i++) {
      keys[i]=new HStoreKey();
      vals[i]=new ImmutableBytesWritable();
      done[i]=false;
    }
    int numDone=0;
    for (int i=0; i < rdrs.length; i++) {
      rdrs[i].reset();
      done[i]=!rdrs[i].next(keys[i],vals[i]);
      if (done[i]) {
        numDone++;
      }
    }
    long now=System.currentTimeMillis();
    int timesSeen=0;
    byte[] lastRow=null;
    byte[] lastColumn=null;
    Map<byte[],List<Long>> deletes=null;
    while (numDone < done.length) {
      int smallestKey=-1;
      for (int i=0; i < rdrs.length; i++) {
        if (done[i]) {
          continue;
        }
        if (smallestKey < 0) {
          smallestKey=i;
        }
 else {
          if (keys[i].compareTo(keys[smallestKey]) < 0) {
            smallestKey=i;
          }
        }
      }
      HStoreKey sk=keys[smallestKey];
      if (Bytes.equals(lastRow,sk.getRow()) && Bytes.equals(lastColumn,sk.getColumn())) {
        timesSeen++;
      }
 else {
        timesSeen=0;
        deletes=new TreeMap<byte[],List<Long>>(Bytes.BYTES_COMPARATOR);
      }
      byte[] value=(vals[smallestKey] == null) ? null : vals[smallestKey].get();
      if (!isDeleted(sk,value,false,deletes) && timesSeen <= family.getMaxVersions()) {
        if (sk.getRow().length != 0 && sk.getColumn().length != 0) {
          if (ttl == HConstants.FOREVER || now < sk.getTimestamp() + ttl) {
            compactedOut.append(sk,vals[smallestKey]);
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug("compactHStoreFiles: " + sk + ": expired, deleted");
            }
          }
        }
      }
      lastRow=sk.getRow();
      lastColumn=sk.getColumn();
      if (!rdrs[smallestKey].next(keys[smallestKey],vals[smallestKey])) {
        done[smallestKey]=true;
        rdrs[smallestKey].close();
        rdrs[smallestKey]=null;
        numDone++;
      }
    }
  }
  finally {
    closeCompactionReaders(rdrs);
  }
}
