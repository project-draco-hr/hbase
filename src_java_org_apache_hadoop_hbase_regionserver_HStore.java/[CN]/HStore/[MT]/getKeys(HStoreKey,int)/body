{
  List<HStoreKey> keys=this.memcache.getKeys(origin,versions);
  if (versions != ALL_VERSIONS && keys.size() >= versions) {
    return keys;
  }
  this.lock.readLock().lock();
  try {
    MapFile.Reader[] maparray=getReaders();
    for (int i=maparray.length - 1; i >= 0; i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        map.reset();
        ImmutableBytesWritable readval=new ImmutableBytesWritable();
        HStoreKey readkey=(HStoreKey)map.getClosest(origin,readval);
        if (readkey == null) {
          continue;
        }
        do {
          if (rowMatches(origin,readkey)) {
            if (cellMatches(origin,readkey)) {
              if (!isDeleted(readkey,readval.get(),false,null) && !keys.contains(readkey)) {
                keys.add(new HStoreKey(readkey));
                if (versions != ALL_VERSIONS && keys.size() >= versions) {
                  break;
                }
              }
            }
 else {
              continue;
            }
          }
 else {
            break;
          }
        }
 while (map.next(readkey,readval));
      }
    }
    return keys;
  }
  finally {
    this.lock.readLock().unlock();
  }
}
