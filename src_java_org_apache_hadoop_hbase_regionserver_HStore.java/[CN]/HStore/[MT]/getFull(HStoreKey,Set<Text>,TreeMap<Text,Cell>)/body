{
  Map<Text,List<Long>> deletes=new HashMap<Text,List<Long>>();
  if (key == null) {
    return;
  }
  this.lock.readLock().lock();
  memcache.getFull(key,columns,results);
  try {
    MapFile.Reader[] maparray=getReaders();
    for (int i=maparray.length - 1; i >= 0; i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        map.reset();
        ImmutableBytesWritable readval=new ImmutableBytesWritable();
        HStoreKey readkey=(HStoreKey)map.getClosest(key,readval);
        if (readkey == null) {
          continue;
        }
        do {
          Text readcol=readkey.getColumn();
          if (results.get(readcol) == null && key.matchesWithoutColumn(readkey)) {
            if (isDeleted(readkey,readval.get(),true,deletes)) {
              break;
            }
            if (columns == null || columns.contains(readkey.getColumn())) {
              results.put(new Text(readcol),new Cell(readval.get(),readkey.getTimestamp()));
            }
            readval=new ImmutableBytesWritable();
          }
 else           if (key.getRow().compareTo(readkey.getRow()) < 0) {
            break;
          }
        }
 while (map.next(readkey,readval));
      }
    }
  }
  finally {
    this.lock.readLock().unlock();
  }
}
