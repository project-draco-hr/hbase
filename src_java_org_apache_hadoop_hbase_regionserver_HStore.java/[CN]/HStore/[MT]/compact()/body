{
synchronized (compactLock) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("started compaction of " + storefiles.size() + " files using "+ compactionDir.toString()+ " for "+ this.storeName);
    }
    List<HStoreFile> filesToCompact=new ArrayList<HStoreFile>(this.storefiles.values());
    Collections.reverse(filesToCompact);
    if (filesToCompact.size() < 1 || (filesToCompact.size() == 1 && !filesToCompact.get(0).isReference())) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("nothing to compact for " + this.storeName);
      }
      return false;
    }
    if (!fs.exists(compactionDir) && !fs.mkdirs(compactionDir)) {
      LOG.warn("Mkdir on " + compactionDir.toString() + " failed");
      return false;
    }
    HStoreFile compactedOutputFile=new HStoreFile(conf,fs,this.compactionDir,info.getEncodedName(),family.getFamilyName(),-1L,null);
    MapFile.Writer compactedOut=compactedOutputFile.getWriter(this.fs,this.compression,this.bloomFilter);
    try {
      compactHStoreFiles(compactedOut,filesToCompact);
    }
  finally {
      compactedOut.close();
    }
    long maxId=getMaxSequenceId(filesToCompact);
    compactedOutputFile.writeInfo(fs,maxId);
    completeCompaction(filesToCompact,compactedOutputFile);
    return true;
  }
}
