{
  long now=System.currentTimeMillis();
  int versions=versionsToReturn(numVersions);
  Set<HStoreKey> deletes=new HashSet<HStoreKey>();
  this.lock.readLock().lock();
  try {
    List<Cell> results=this.memcache.get(key,versions,deletes,now);
    if (results.size() == versions) {
      return results.toArray(new Cell[results.size()]);
    }
    MapFile.Reader[] maparray=getReaders();
    for (int i=maparray.length - 1; i >= 0 && !hasEnoughVersions(versions,results); i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        map.reset();
        ImmutableBytesWritable readval=new ImmutableBytesWritable();
        HStoreKey readkey=(HStoreKey)map.getClosest(key,readval);
        if (readkey == null) {
          continue;
        }
        if (!readkey.matchesRowCol(key)) {
          continue;
        }
        if (get(readkey,readval.get(),versions,results,deletes,now)) {
          break;
        }
        for (readval=new ImmutableBytesWritable(); map.next(readkey,readval) && readkey.matchesRowCol(key); readval=new ImmutableBytesWritable()) {
          if (get(readkey,readval.get(),versions,results,deletes,now)) {
            break;
          }
        }
      }
    }
    return results.size() == 0 ? null : results.toArray(new Cell[results.size()]);
  }
  finally {
    this.lock.readLock().unlock();
  }
}
