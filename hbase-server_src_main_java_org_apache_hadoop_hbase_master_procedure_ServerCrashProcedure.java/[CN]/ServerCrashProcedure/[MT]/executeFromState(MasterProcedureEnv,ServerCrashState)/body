{
  if (LOG.isTraceEnabled()) {
    LOG.trace(state);
  }
  if (state.ordinal() != this.previousState) {
    this.previousState=state.ordinal();
    this.cycles=0;
  }
 else {
    this.cycles++;
  }
  MasterServices services=env.getMasterServices();
  try {
switch (state) {
case SERVER_CRASH_START:
      if (!services.getAssignmentManager().isFailoverCleanupDone()) {
        throwProcedureYieldException("Waiting on master failover to complete");
      }
    LOG.info("Start processing crashed " + this.serverName);
  start(env);
if (this.carryingMeta) setNextState(ServerCrashState.SERVER_CRASH_PROCESS_META);
 else setNextState(ServerCrashState.SERVER_CRASH_GET_REGIONS);
break;
case SERVER_CRASH_GET_REGIONS:
if (!isMetaAssignedQuickTest(env)) {
throwProcedureYieldException("Waiting on hbase:meta assignment");
}
this.regionsOnCrashedServer=services.getAssignmentManager().getRegionStates().getServerRegions(this.serverName);
if (!this.shouldSplitWal) {
setNextState(ServerCrashState.SERVER_CRASH_CALC_REGIONS_TO_ASSIGN);
}
 else if (this.distributedLogReplay) {
setNextState(ServerCrashState.SERVER_CRASH_PREPARE_LOG_REPLAY);
}
 else {
setNextState(ServerCrashState.SERVER_CRASH_SPLIT_LOGS);
}
break;
case SERVER_CRASH_PROCESS_META:
if (!processMeta(env)) {
throwProcedureYieldException("Waiting on regions-in-transition to clear");
}
setNextState(ServerCrashState.SERVER_CRASH_GET_REGIONS);
break;
case SERVER_CRASH_PREPARE_LOG_REPLAY:
prepareLogReplay(env,this.regionsOnCrashedServer);
setNextState(ServerCrashState.SERVER_CRASH_CALC_REGIONS_TO_ASSIGN);
break;
case SERVER_CRASH_SPLIT_LOGS:
splitLogs(env);
if (this.distributedLogReplay) setNextState(ServerCrashState.SERVER_CRASH_FINISH);
 else setNextState(ServerCrashState.SERVER_CRASH_CALC_REGIONS_TO_ASSIGN);
break;
case SERVER_CRASH_CALC_REGIONS_TO_ASSIGN:
this.regionsToAssign=calcRegionsToAssign(env);
setNextState(ServerCrashState.SERVER_CRASH_ASSIGN);
break;
case SERVER_CRASH_ASSIGN:
boolean regions=this.regionsToAssign != null && !this.regionsToAssign.isEmpty();
if (regions) {
if (!assign(env,this.regionsToAssign)) {
throwProcedureYieldException("Failed assign; will retry");
}
}
if (regions && this.shouldSplitWal && distributedLogReplay) {
setNextState(ServerCrashState.SERVER_CRASH_WAIT_ON_ASSIGN);
}
 else {
setNextState(ServerCrashState.SERVER_CRASH_FINISH);
}
break;
case SERVER_CRASH_WAIT_ON_ASSIGN:
if (this.regionsToAssign != null && !this.regionsToAssign.isEmpty()) {
if (!waitOnAssign(env,this.regionsToAssign)) {
throwProcedureYieldException("Waiting on region assign");
}
}
setNextState(ServerCrashState.SERVER_CRASH_SPLIT_LOGS);
break;
case SERVER_CRASH_FINISH:
LOG.info("Finished processing of crashed " + serverName);
services.getServerManager().getDeadServers().finish(serverName);
return Flow.NO_MORE_STATE;
default :
throw new UnsupportedOperationException("unhandled state=" + state);
}
}
 catch (IOException e) {
LOG.warn("Failed serverName=" + this.serverName + ", state="+ state+ "; retry",e);
}
catch (InterruptedException e) {
LOG.warn("Interrupted serverName=" + this.serverName + ", state="+ state+ "; retry",e);
Thread.currentThread().interrupt();
}
return Flow.HAS_MORE_STATE;
}
