{
  this.readPt=readPt;
  this.store=store;
  this.cacheBlocks=cacheBlocks;
  isGet=scan.isGetScan();
  int numCol=columns == null ? 0 : columns.size();
  explicitColumnQuery=numCol > 0;
  this.scan=scan;
  this.columns=columns;
  this.now=EnvironmentEdgeManager.currentTime();
  this.oldestUnexpiredTS=now - ttl;
  this.minVersions=minVersions;
  if (store != null && ((HStore)store).getHRegion() != null && ((HStore)store).getHRegion().getBaseConf() != null) {
    Configuration conf=((HStore)store).getHRegion().getBaseConf();
    this.maxRowSize=conf.getLong(HConstants.TABLE_MAX_ROWSIZE_KEY,HConstants.TABLE_MAX_ROWSIZE_DEFAULT);
    this.scanUsePread=conf.getBoolean("hbase.storescanner.use.pread",scan.isSmall());
    long tmpCellsPerTimeoutCheck=conf.getLong(HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK,DEFAULT_HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK);
    this.cellsPerHeartbeatCheck=tmpCellsPerTimeoutCheck > 0 ? tmpCellsPerTimeoutCheck : DEFAULT_HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK;
  }
 else {
    this.maxRowSize=HConstants.TABLE_MAX_ROWSIZE_DEFAULT;
    this.scanUsePread=scan.isSmall();
    this.cellsPerHeartbeatCheck=DEFAULT_HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK;
  }
  useRowColBloom=numCol > 1 || (!isGet && numCol == 1);
  if (store != null && ((HStore)store).getHRegion() != null && store.getStorefilesCount() > 1) {
    RegionServerServices rsService=((HStore)store).getHRegion().getRegionServerServices();
    if (rsService == null || !rsService.getConfiguration().getBoolean(STORESCANNER_PARALLEL_SEEK_ENABLE,false))     return;
    isParallelSeekEnabled=true;
    executor=rsService.getExecutorService();
  }
}
