{
  List<Mutation> mutations=new ArrayList<Mutation>(1);
  mutations.add(new Mutation(false,columnAAname,valueEname,true));
  mutations.add(new Mutation(false,columnAname,valueEname,true));
  handler.mutateRow(tableAname,rowAname,mutations,null);
  handler.mutateRow(tableAname,rowBname,mutations,null);
  List<TIncrement> increments=new ArrayList<TIncrement>();
  increments.add(new TIncrement(tableAname,rowBname,columnAAname,7));
  increments.add(new TIncrement(tableAname,rowBname,columnAAname,7));
  increments.add(new TIncrement(tableAname,rowBname,columnAAname,7));
  int numIncrements=60000;
  for (int i=0; i < numIncrements; i++) {
    handler.increment(new TIncrement(tableAname,rowAname,columnAname,2));
    handler.incrementRows(increments);
  }
  Thread.sleep(1000);
  long lv=handler.get(tableAname,rowAname,columnAname,null).get(0).value.getLong();
  assertEquals((100 + (2 * numIncrements)),lv);
  lv=handler.get(tableAname,rowBname,columnAAname,null).get(0).value.getLong();
  assertEquals((100 + (3 * 7 * numIncrements)),lv);
  assertTrue(handler.coalescer.getSuccessfulCoalescings() > 0);
}
