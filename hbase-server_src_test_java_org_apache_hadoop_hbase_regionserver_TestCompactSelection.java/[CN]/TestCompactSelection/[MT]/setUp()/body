{
  this.conf=TEST_UTIL.getConfiguration();
  this.conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,0);
  this.conf.setInt("hbase.hstore.compaction.min",minFiles);
  this.conf.setInt("hbase.hstore.compaction.max",maxFiles);
  this.conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,minSize);
  this.conf.setLong("hbase.hstore.compaction.max.size",maxSize);
  this.conf.setFloat("hbase.hstore.compaction.ratio",1.0F);
  Path basedir=new Path(DIR);
  Path logdir=new Path(DIR + "/logs");
  Path oldLogDir=new Path(basedir,HConstants.HREGION_OLDLOGDIR_NAME);
  HColumnDescriptor hcd=new HColumnDescriptor(Bytes.toBytes("family"));
  FileSystem fs=FileSystem.get(conf);
  fs.delete(logdir,true);
  HTableDescriptor htd=new HTableDescriptor(Bytes.toBytes("table"));
  htd.addFamily(hcd);
  HRegionInfo info=new HRegionInfo(htd.getName(),null,null,false);
  HLog hlog=new HLog(fs,logdir,oldLogDir,conf);
  HRegion region=HRegion.createHRegion(info,basedir,conf,htd);
  HRegion.closeHRegion(region);
  Path tableDir=new Path(basedir,Bytes.toString(htd.getName()));
  region=new HRegion(tableDir,hlog,fs,conf,info,htd,null);
  store=new HStore(basedir,region,hcd,fs,conf);
  TEST_FILE=StoreFile.getRandomFilename(fs,store.getHomedir());
  fs.create(TEST_FILE);
}
