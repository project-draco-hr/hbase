{
  this.transposed=costMatrix.length > costMatrix[0].length;
  if (this.transposed) {
    this.rows=costMatrix[0].length;
    this.cols=costMatrix.length;
  }
 else {
    this.rows=costMatrix.length;
    this.cols=costMatrix[0].length;
  }
  cost=new float[rows][cols];
  mask=new byte[rows][cols];
  rowsCovered=new boolean[rows];
  colsCovered=new boolean[cols];
  path=new LinkedList<Pair<Integer,Integer>>();
  leastInRow=new float[rows];
  leastInRowIndex=new int[rows];
  rowAdjust=new float[rows];
  colAdjust=new float[cols];
  assignments=null;
  if (transposed) {
    for (int r=0; r < rows; r++) {
      for (int c=0; c < cols; c++) {
        cost[r][c]=costMatrix[c][r];
      }
    }
  }
 else {
    for (int r=0; r < rows; r++) {
      System.arraycopy(costMatrix[r],0,cost[r],0,cols);
    }
  }
  for (int r=0; r < rows; r++) {
    for (int c=0; c < cols; c++) {
      if (cost[r][c] == Float.POSITIVE_INFINITY) {
        cost[r][c]=Float.MAX_VALUE;
      }
    }
  }
}
