{
  if (assignments != null) {
    return assignments;
  }
  preliminaries();
  while (!testIsDone()) {
    while (!stepOne()) {
      stepThree();
    }
    stepTwo();
  }
  if (transposed) {
    assignments=new int[cols];
    outer:     for (int c=0; c < cols; c++) {
      for (int r=0; r < rows; r++) {
        if (mask[r][c] == STAR) {
          assignments[c]=r;
          continue outer;
        }
      }
      assignments[c]=-1;
    }
  }
 else {
    assignments=new int[rows];
    outer:     for (int r=0; r < rows; r++) {
      for (int c=0; c < cols; c++) {
        if (mask[r][c] == STAR) {
          assignments[r]=c;
          continue outer;
        }
      }
    }
  }
  cost=null;
  mask=null;
  rowsCovered=null;
  colsCovered=null;
  path=null;
  leastInRow=null;
  leastInRowIndex=null;
  rowAdjust=null;
  colAdjust=null;
  return assignments;
}
