{
  for (int r=0; r < rows; r++) {
    for (int c=0; c < cols; c++) {
      if (mask[r][c] == STAR) {
        colsCovered[c]=true;
      }
    }
  }
  int coveredCols=0;
  for (int c=0; c < cols; c++) {
    coveredCols+=colsCovered[c] ? 1 : 0;
  }
  for (int r=0; r < rows; r++) {
    for (int c=0; c < cols; c++) {
      cost[r][c]+=rowAdjust[r];
      cost[r][c]+=colAdjust[c];
    }
  }
  Arrays.fill(rowAdjust,0);
  Arrays.fill(colAdjust,0);
  for (int r=0; r < rows; r++) {
    leastInRow[r]=Float.POSITIVE_INFINITY;
    for (int c=0; c < cols; c++) {
      if (!rowsCovered[r] && !colsCovered[c] && cost[r][c] < leastInRow[r]) {
        leastInRow[r]=cost[r][c];
        leastInRowIndex[r]=c;
      }
    }
  }
  return (coveredCols == cols || coveredCols >= rows);
}
