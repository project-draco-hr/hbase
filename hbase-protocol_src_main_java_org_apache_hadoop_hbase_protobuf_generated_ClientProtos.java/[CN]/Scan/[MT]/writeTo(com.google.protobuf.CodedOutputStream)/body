{
  getSerializedSize();
  for (int i=0; i < column_.size(); i++) {
    output.writeMessage(1,column_.get(i));
  }
  for (int i=0; i < attribute_.size(); i++) {
    output.writeMessage(2,attribute_.get(i));
  }
  if (((bitField0_ & 0x00000001) == 0x00000001)) {
    output.writeBytes(3,startRow_);
  }
  if (((bitField0_ & 0x00000002) == 0x00000002)) {
    output.writeBytes(4,stopRow_);
  }
  if (((bitField0_ & 0x00000004) == 0x00000004)) {
    output.writeMessage(5,filter_);
  }
  if (((bitField0_ & 0x00000008) == 0x00000008)) {
    output.writeMessage(6,timeRange_);
  }
  if (((bitField0_ & 0x00000010) == 0x00000010)) {
    output.writeUInt32(7,maxVersions_);
  }
  if (((bitField0_ & 0x00000020) == 0x00000020)) {
    output.writeBool(8,cacheBlocks_);
  }
  if (((bitField0_ & 0x00000040) == 0x00000040)) {
    output.writeUInt32(9,batchSize_);
  }
  if (((bitField0_ & 0x00000080) == 0x00000080)) {
    output.writeUInt64(10,maxResultSize_);
  }
  if (((bitField0_ & 0x00000100) == 0x00000100)) {
    output.writeUInt32(11,storeLimit_);
  }
  if (((bitField0_ & 0x00000200) == 0x00000200)) {
    output.writeUInt32(12,storeOffset_);
  }
  if (((bitField0_ & 0x00000400) == 0x00000400)) {
    output.writeBool(13,loadColumnFamiliesOnDemand_);
  }
  if (((bitField0_ & 0x00000800) == 0x00000800)) {
    output.writeBool(14,small_);
  }
  if (((bitField0_ & 0x00001000) == 0x00001000)) {
    output.writeBool(15,reversed_);
  }
  if (((bitField0_ & 0x00002000) == 0x00002000)) {
    output.writeEnum(16,consistency_.getNumber());
  }
  if (((bitField0_ & 0x00004000) == 0x00004000)) {
    output.writeUInt32(17,caching_);
  }
  if (((bitField0_ & 0x00008000) == 0x00008000)) {
    output.writeBool(18,allowPartialResults_);
  }
  for (int i=0; i < cfTimeRange_.size(); i++) {
    output.writeMessage(19,cfTimeRange_.get(i));
  }
  getUnknownFields().writeTo(output);
}
