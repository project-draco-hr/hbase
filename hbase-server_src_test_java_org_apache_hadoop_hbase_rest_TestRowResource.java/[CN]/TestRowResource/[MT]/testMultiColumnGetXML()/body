{
  String path="/" + TABLE + "/fakerow";
  CellSetModel cellSetModel=new CellSetModel();
  RowModel rowModel=new RowModel(ROW_1);
  rowModel.addCell(new CellModel(Bytes.toBytes(COLUMN_1),Bytes.toBytes(VALUE_1)));
  rowModel.addCell(new CellModel(Bytes.toBytes(COLUMN_2),Bytes.toBytes(VALUE_2)));
  rowModel.addCell(new CellModel(Bytes.toBytes(COLUMN_3),Bytes.toBytes(VALUE_2)));
  cellSetModel.addRow(rowModel);
  StringWriter writer=new StringWriter();
  marshaller.marshal(cellSetModel,writer);
  Response response=client.put(path,Constants.MIMETYPE_XML,Bytes.toBytes(writer.toString()));
  Thread.yield();
  response=client.get(path,Constants.MIMETYPE_XML);
  assertEquals(response.getCode(),404);
  path="/" + TABLE + "/"+ ROW_1+ "/"+ COLUMN_1+ ","+ COLUMN_2+ ","+ COLUMN_3;
  response=client.get(path,Constants.MIMETYPE_XML);
  assertEquals(200,response.getCode());
  CellSetModel cellSet=(CellSetModel)unmarshaller.unmarshal(new ByteArrayInputStream(response.getBody()));
  assertTrue(cellSet.getRows().size() == 1);
  assertTrue(cellSet.getRows().get(0).getCells().size() == 3);
  List<CellModel> cells=cellSet.getRows().get(0).getCells();
  assertTrue(containsCellModel(cells,COLUMN_1,VALUE_1));
  assertTrue(containsCellModel(cells,COLUMN_2,VALUE_2));
  assertTrue(containsCellModel(cells,COLUMN_3,VALUE_2));
  response=deleteRow(TABLE,ROW_1);
  assertEquals(response.getCode(),200);
}
