def expand_multi_config_projects(cli_args):
    "\n    If any url is of type multi-configuration project (i.e. has key 'activeConfigurations'),\n    get urls for individual jobs.\n    "
    job_urls = cli_args.urls
    excluded_builds_arg = cli_args.excluded_builds
    max_builds_arg = cli_args.max_builds
    if ((excluded_builds_arg is not None) and (len(excluded_builds_arg) != len(job_urls))):
        raise Exception('Number of --excluded-builds arguments should be same as that of --urls since values are matched.')
    if ((max_builds_arg is not None) and (len(max_builds_arg) != len(job_urls))):
        raise Exception('Number of --max-builds arguments should be same as that of --urls since values are matched.')
    final_expanded_urls = []
    for (i, job_url) in enumerate(job_urls):
        max_builds = 10000
        if ((max_builds_arg is not None) and (max_builds_arg[i] != 0)):
            max_builds = int(max_builds_arg[i])
        excluded_builds = []
        if ((excluded_builds_arg is not None) and (excluded_builds_arg[i] != 'None')):
            excluded_builds = [int(x) for x in excluded_builds_arg[i].split(',')]
        response = requests.get((job_url + '/api/json')).json()
        if response.has_key('activeConfigurations'):
            for config in response['activeConfigurations']:
                final_expanded_urls.append({'url': config['url'], 'max_builds': max_builds, 'excludes': excluded_builds, })
        else:
            final_expanded_urls.append({'url': job_url, 'max_builds': max_builds, 'excludes': excluded_builds, })
    return final_expanded_urls
