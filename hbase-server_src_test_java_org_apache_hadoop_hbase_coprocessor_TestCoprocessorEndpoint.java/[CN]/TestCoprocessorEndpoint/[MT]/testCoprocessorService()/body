{
  HTable table=(HTable)util.getConnection().getTable(TEST_TABLE);
  NavigableMap<HRegionInfo,ServerName> regions=table.getRegionLocations();
  final TestProtos.EchoRequestProto request=TestProtos.EchoRequestProto.newBuilder().setMessage("hello").build();
  final Map<byte[],String> results=Collections.synchronizedMap(new TreeMap<byte[],String>(Bytes.BYTES_COMPARATOR));
  try {
    final RpcController controller=new ServerRpcController();
    table.coprocessorService(TestRpcServiceProtos.TestProtobufRpcProto.class,ROWS[0],ROWS[ROWS.length - 1],new Batch.Call<TestRpcServiceProtos.TestProtobufRpcProto,TestProtos.EchoResponseProto>(){
      public TestProtos.EchoResponseProto call(      TestRpcServiceProtos.TestProtobufRpcProto instance) throws IOException {
        LOG.debug("Default response is " + TestProtos.EchoRequestProto.getDefaultInstance());
        BlockingRpcCallback<TestProtos.EchoResponseProto> callback=new BlockingRpcCallback<TestProtos.EchoResponseProto>();
        instance.echo(controller,request,callback);
        TestProtos.EchoResponseProto response=callback.get();
        LOG.debug("Batch.Call returning result " + response);
        return response;
      }
    }
,new Batch.Callback<TestProtos.EchoResponseProto>(){
      public void update(      byte[] region,      byte[] row,      TestProtos.EchoResponseProto result){
        assertNotNull(result);
        assertEquals("hello",result.getMessage());
        results.put(region,result.getMessage());
      }
    }
);
    for (    Map.Entry<byte[],String> e : results.entrySet()) {
      LOG.info("Got value " + e.getValue() + " for region "+ Bytes.toStringBinary(e.getKey()));
    }
    assertEquals(3,results.size());
    for (    HRegionInfo info : regions.navigableKeySet()) {
      LOG.info("Region info is " + info.getRegionNameAsString());
      assertTrue(results.containsKey(info.getRegionName()));
    }
    results.clear();
    table.coprocessorService(TestRpcServiceProtos.TestProtobufRpcProto.class,ROWS[rowSeperator1],ROWS[ROWS.length - 1],new Batch.Call<TestRpcServiceProtos.TestProtobufRpcProto,TestProtos.EchoResponseProto>(){
      public TestProtos.EchoResponseProto call(      TestRpcServiceProtos.TestProtobufRpcProto instance) throws IOException {
        LOG.debug("Default response is " + TestProtos.EchoRequestProto.getDefaultInstance());
        BlockingRpcCallback<TestProtos.EchoResponseProto> callback=new BlockingRpcCallback<TestProtos.EchoResponseProto>();
        instance.echo(controller,request,callback);
        TestProtos.EchoResponseProto response=callback.get();
        LOG.debug("Batch.Call returning result " + response);
        return response;
      }
    }
,new Batch.Callback<TestProtos.EchoResponseProto>(){
      public void update(      byte[] region,      byte[] row,      TestProtos.EchoResponseProto result){
        assertNotNull(result);
        assertEquals("hello",result.getMessage());
        results.put(region,result.getMessage());
      }
    }
);
    for (    Map.Entry<byte[],String> e : results.entrySet()) {
      LOG.info("Got value " + e.getValue() + " for region "+ Bytes.toStringBinary(e.getKey()));
    }
    assertEquals(2,results.size());
  }
  finally {
    table.close();
  }
}
