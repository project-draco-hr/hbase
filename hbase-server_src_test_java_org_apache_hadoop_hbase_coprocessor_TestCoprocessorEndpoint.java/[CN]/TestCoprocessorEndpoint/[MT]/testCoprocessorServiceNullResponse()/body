{
  Table table=util.getConnection().getTable(TEST_TABLE);
  List<HRegionLocation> regions;
  try (RegionLocator rl=util.getConnection().getRegionLocator(TEST_TABLE)){
    regions=rl.getAllRegionLocations();
  }
   final TestProtos.EchoRequestProto request=TestProtos.EchoRequestProto.newBuilder().setMessage("hello").build();
  try {
    final RpcController controller=new ServerRpcController();
    Map<byte[],String> results=table.coprocessorService(TestRpcServiceProtos.TestProtobufRpcProto.class,ROWS[0],ROWS[ROWS.length - 1],new Batch.Call<TestRpcServiceProtos.TestProtobufRpcProto,String>(){
      public String call(      TestRpcServiceProtos.TestProtobufRpcProto instance) throws IOException {
        BlockingRpcCallback<TestProtos.EchoResponseProto> callback=new BlockingRpcCallback<TestProtos.EchoResponseProto>();
        instance.echo(controller,request,callback);
        TestProtos.EchoResponseProto response=callback.get();
        LOG.debug("Batch.Call got result " + response);
        return null;
      }
    }
);
    for (    Map.Entry<byte[],String> e : results.entrySet()) {
      LOG.info("Got value " + e.getValue() + " for region "+ Bytes.toStringBinary(e.getKey()));
    }
    assertEquals(3,results.size());
    for (    HRegionLocation region : regions) {
      HRegionInfo info=region.getRegionInfo();
      LOG.info("Region info is " + info.getRegionNameAsString());
      assertTrue(results.containsKey(info.getRegionName()));
      assertNull(results.get(info.getRegionName()));
    }
  }
  finally {
    table.close();
  }
}
