{
  HBaseTestingUtility htu1=new HBaseTestingUtility();
  htu1.startMiniCluster();
  htu1.startMiniMapReduceCluster();
  Tool tool=new ImportTsv();
  tool.setConf(htu1.getConfiguration());
  try {
    FileSystem fs=FileSystem.get(tool.getConf());
    FSDataOutputStream op=fs.create(new Path(inputFile),true);
    if (data == null) {
      data="KEY\u001bVALUE1\u001bVALUE2\n";
    }
    op.write(Bytes.toBytes(data));
    op.close();
    LOG.debug(String.format("Wrote test data to file: %s",fs.makeQualified(new Path(inputFile))));
    if (tool.getConf().get(ImportTsv.BULK_OUTPUT_CONF_KEY) == null) {
      HTableDescriptor desc=new HTableDescriptor(tableName);
      desc.addFamily(new HColumnDescriptor(family));
      HBaseAdmin admin=new HBaseAdmin(tool.getConf());
      admin.createTable(desc);
      admin.close();
    }
    tool.getConf().setInt("min.num.spills.for.combine",1);
    assertEquals(0,ToolRunner.run(tool,args));
    HTable table=new HTable(tool.getConf(),tableName);
    boolean verified=false;
    long pause=tool.getConf().getLong("hbase.client.pause",5 * 1000);
    int numRetries=tool.getConf().getInt("hbase.client.retries.number",5);
    for (int i=0; i < numRetries; i++) {
      try {
        Scan scan=new Scan();
        scan.addFamily(Bytes.toBytes(family));
        ResultScanner resScanner=table.getScanner(scan);
        for (        Result res : resScanner) {
          assertTrue(res.size() == 2);
          List<KeyValue> kvs=res.list();
          assertEquals(toU8Str(kvs.get(0).getRow()),toU8Str(Bytes.toBytes("KEY")));
          assertEquals(toU8Str(kvs.get(1).getRow()),toU8Str(Bytes.toBytes("KEY")));
          assertEquals(toU8Str(kvs.get(0).getValue()),toU8Str(Bytes.toBytes("VALUE" + valueMultiplier)));
          assertEquals(toU8Str(kvs.get(1).getValue()),toU8Str(Bytes.toBytes("VALUE" + 2 * valueMultiplier)));
        }
        verified=true;
        break;
      }
 catch (      NullPointerException e) {
      }
      try {
        Thread.sleep(pause);
      }
 catch (      InterruptedException e) {
      }
    }
    table.close();
    assertTrue(verified);
  }
  finally {
    htu1.shutdownMiniMapReduceCluster();
    htu1.shutdownMiniCluster();
  }
}
