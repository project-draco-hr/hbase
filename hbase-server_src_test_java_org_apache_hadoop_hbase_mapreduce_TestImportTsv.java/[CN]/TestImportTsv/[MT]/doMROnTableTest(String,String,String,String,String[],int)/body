{
  HBaseTestingUtility htu1=new HBaseTestingUtility();
  htu1.startMiniCluster();
  htu1.startMiniMapReduceCluster();
  GenericOptionsParser opts=new GenericOptionsParser(htu1.getConfiguration(),args);
  Configuration conf=opts.getConfiguration();
  args=opts.getRemainingArgs();
  try {
    FileSystem fs=FileSystem.get(conf);
    FSDataOutputStream op=fs.create(new Path(inputFile),true);
    if (data == null) {
      data="KEY\u001bVALUE1\u001bVALUE2\n";
    }
    op.write(Bytes.toBytes(data));
    op.close();
    final byte[] FAM=Bytes.toBytes(family);
    final byte[] TAB=Bytes.toBytes(tableName);
    if (conf.get(ImportTsv.BULK_OUTPUT_CONF_KEY) == null) {
      HTableDescriptor desc=new HTableDescriptor(TAB);
      desc.addFamily(new HColumnDescriptor(FAM));
      new HBaseAdmin(conf).createTable(desc);
    }
 else {
      ImportTsv.createHbaseAdmin(conf);
    }
    Job job=ImportTsv.createSubmittableJob(conf,args);
    job.waitForCompletion(false);
    assertTrue(job.isSuccessful());
    HTable table=new HTable(new Configuration(conf),TAB);
    boolean verified=false;
    long pause=conf.getLong("hbase.client.pause",5 * 1000);
    int numRetries=conf.getInt("hbase.client.retries.number",5);
    for (int i=0; i < numRetries; i++) {
      try {
        Scan scan=new Scan();
        scan.addFamily(FAM);
        ResultScanner resScanner=table.getScanner(scan);
        for (        Result res : resScanner) {
          assertTrue(res.size() == 2);
          List<KeyValue> kvs=res.list();
          assertEquals(toU8Str(kvs.get(0).getRow()),toU8Str(Bytes.toBytes("KEY")));
          assertEquals(toU8Str(kvs.get(1).getRow()),toU8Str(Bytes.toBytes("KEY")));
          assertEquals(toU8Str(kvs.get(0).getValue()),toU8Str(Bytes.toBytes("VALUE" + valueMultiplier)));
          assertEquals(toU8Str(kvs.get(1).getValue()),toU8Str(Bytes.toBytes("VALUE" + 2 * valueMultiplier)));
        }
        verified=true;
        break;
      }
 catch (      NullPointerException e) {
      }
      try {
        Thread.sleep(pause);
      }
 catch (      InterruptedException e) {
      }
    }
    assertTrue(verified);
  }
  finally {
    htu1.shutdownMiniMapReduceCluster();
    htu1.shutdownMiniCluster();
  }
}
