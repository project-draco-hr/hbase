{
  conf.setBoolean(HBASE_SKIP_ERRORS,true);
  Path c1=new Path(hlogDir,HLOG_FILE_PREFIX + "0");
  Path c2=new Path(hlogDir,HLOG_FILE_PREFIX + "5");
  Path c3=new Path(hlogDir,HLOG_FILE_PREFIX + (NUM_WRITERS - 1));
  generateHLogs(-1);
  corruptHLog(c1,Corruptions.INSERT_GARBAGE_IN_THE_MIDDLE,false,fs);
  corruptHLog(c2,Corruptions.APPEND_GARBAGE,true,fs);
  corruptHLog(c3,Corruptions.INSERT_GARBAGE_ON_FIRST_LINE,true,fs);
  fs.initialize(fs.getUri(),conf);
  HLogSplitter logSplitter=HLogSplitter.createLogSplitter(conf);
  logSplitter.splitLog(hbaseDir,hlogDir,oldLogDir,fs,conf);
  FileStatus[] archivedLogs=fs.listStatus(corruptDir);
  assertEquals("expected a different file",c1.getName(),archivedLogs[0].getPath().getName());
  assertEquals("expected a different file",c2.getName(),archivedLogs[1].getPath().getName());
  assertEquals("expected a different file",c3.getName(),archivedLogs[2].getPath().getName());
  assertEquals(archivedLogs.length,3);
}
