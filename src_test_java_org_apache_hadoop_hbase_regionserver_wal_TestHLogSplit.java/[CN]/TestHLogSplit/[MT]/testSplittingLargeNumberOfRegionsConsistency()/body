{
  regions.removeAll(regions);
  for (int i=0; i < 500; i++) {
    regions.add("region__" + i);
  }
  generateHLogs(1,100,-1);
  fs.initialize(fs.getUri(),conf);
  HLog.splitLog(hbaseDir,hlogDir,oldLogDir,fs,conf);
  fs.rename(oldLogDir,hlogDir);
  Path firstSplitPath=new Path(hbaseDir,Bytes.toString(TABLE_NAME) + ".first");
  Path splitPath=new Path(hbaseDir,Bytes.toString(TABLE_NAME));
  fs.rename(splitPath,firstSplitPath);
  fs.initialize(fs.getUri(),conf);
  HLog.splitLog(hbaseDir,hlogDir,oldLogDir,fs,conf);
  FileStatus[] f1=fs.listStatus(firstSplitPath);
  FileStatus[] f2=fs.listStatus(splitPath);
  for (int i=0; i < f1.length; i++) {
    HLog.Reader in1, in2;
    in1=HLog.getReader(fs,new Path(f1[i].getPath(),"oldlogfile.log"),conf);
    in2=HLog.getReader(fs,new Path(f2[i].getPath(),"oldlogfile.log"),conf);
    HLog.Entry entry1;
    HLog.Entry entry2;
    while ((entry1=in1.next()) != null) {
      entry2=in2.next();
      assertEquals(0,entry1.getKey().compareTo(entry2.getKey()));
      assertEquals(entry1.getEdit().toString(),entry2.getEdit().toString());
    }
  }
}
