{
  assertEquals(0,primaryRegion.getStoreFileList(families).size());
  assertEquals(0,secondaryRegion.getStoreFileList(families).size());
  secondaryRegion.refreshStoreFiles();
  assertEquals(0,secondaryRegion.getStoreFileList(families).size());
  putDataWithFlushes(primaryRegion,100,100,0);
  int numRows=100;
  secondaryRegion.refreshStoreFiles();
  assertPathListsEqual(primaryRegion.getStoreFileList(families),secondaryRegion.getStoreFileList(families));
  assertEquals(families.length,secondaryRegion.getStoreFileList(families).size());
  LOG.info("-- Verifying edits from secondary");
  verifyData(secondaryRegion,0,numRows,cq,families);
  putDataWithFlushes(primaryRegion,100,300,0);
  numRows=300;
  secondaryRegion.refreshStoreFiles();
  assertPathListsEqual(primaryRegion.getStoreFileList(families),secondaryRegion.getStoreFileList(families));
  assertEquals(families.length * 4,secondaryRegion.getStoreFileList(families).size());
  LOG.info("-- Verifying edits from secondary");
  verifyData(secondaryRegion,0,numRows,cq,families);
  if (FSUtils.WINDOWS) {
    return;
  }
  primaryRegion.compactStores();
  CompactedHFilesDischarger cleaner=new CompactedHFilesDischarger(100,null,primaryRegion);
  cleaner.chore();
  secondaryRegion.refreshStoreFiles();
  assertPathListsEqual(primaryRegion.getStoreFileList(families),secondaryRegion.getStoreFileList(families));
  assertEquals(families.length,secondaryRegion.getStoreFileList(families).size());
  LOG.info("-- Verifying edits from secondary");
  verifyData(secondaryRegion,0,numRows,cq,families);
  LOG.info("-- Replaying edits in secondary");
  assertTrue(secondaryRegion.getMemstoreSize() == 0);
  putDataWithFlushes(primaryRegion,400,400,0);
  numRows=400;
  reader=createWALReaderForPrimary();
  while (true) {
    WAL.Entry entry=reader.next();
    if (entry == null) {
      break;
    }
    FlushDescriptor flush=WALEdit.getFlushDescriptor(entry.getEdit().getCells().get(0));
    if (flush != null) {
    }
 else {
      replayEdit(secondaryRegion,entry);
    }
  }
  assertTrue(secondaryRegion.getMemstoreSize() > 0);
  secondaryRegion.refreshStoreFiles();
  assertTrue(secondaryRegion.getMemstoreSize() == 0);
  LOG.info("-- Verifying edits from primary");
  verifyData(primaryRegion,0,numRows,cq,families);
  LOG.info("-- Verifying edits from secondary");
  verifyData(secondaryRegion,0,numRows,cq,families);
}
