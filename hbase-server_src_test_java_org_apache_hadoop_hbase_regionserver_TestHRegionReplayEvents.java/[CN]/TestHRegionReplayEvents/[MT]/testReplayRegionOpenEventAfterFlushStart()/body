{
  putDataWithFlushes(primaryRegion,100,100,100);
  int numRows=200;
  primaryRegion.close();
  primaryRegion=HRegion.openHRegion(rootDir,primaryHri,htd,walPrimary,CONF,rss,null);
  reader=createWALReaderForPrimary();
  List<RegionEventDescriptor> regionEvents=Lists.newArrayList();
  LOG.info("-- Replaying edits and region events in secondary");
  while (true) {
    WAL.Entry entry=reader.next();
    if (entry == null) {
      break;
    }
    FlushDescriptor flushDesc=WALEdit.getFlushDescriptor(entry.getEdit().getCells().get(0));
    RegionEventDescriptor regionEventDesc=WALEdit.getRegionEventDescriptor(entry.getEdit().getCells().get(0));
    if (flushDesc != null) {
      if (flushDesc.getAction() == FlushAction.START_FLUSH) {
        secondaryRegion.replayWALFlushStartMarker(flushDesc);
      }
    }
 else     if (regionEventDesc != null) {
      regionEvents.add(regionEventDesc);
    }
 else {
      replayEdit(secondaryRegion,entry);
    }
  }
  verifyData(secondaryRegion,0,numRows,cq,families);
  assertEquals(3,regionEvents.size());
  int expectedStoreFileCount=0;
  for (  Store s : secondaryRegion.getStores().values()) {
    assertEquals(expectedStoreFileCount,s.getStorefilesCount());
  }
  LOG.info("Testing replaying region open event " + regionEvents.get(2));
  secondaryRegion.replayWALRegionEventMarker(regionEvents.get(2));
  expectedStoreFileCount=2;
  for (  Store s : secondaryRegion.getStores().values()) {
    assertEquals(expectedStoreFileCount,s.getStorefilesCount());
  }
  Store store=secondaryRegion.getStore(Bytes.toBytes("cf1"));
  long newSnapshotSize=store.getSnapshotSize();
  assertTrue(newSnapshotSize == 0);
  long newRegionMemstoreSize=secondaryRegion.getMemstoreSize().get();
  assertTrue(newRegionMemstoreSize == 0);
  assertNull(secondaryRegion.getPrepareFlushResult());
  LOG.info("-- Verifying edits from secondary");
  verifyData(secondaryRegion,0,numRows,cq,families);
  LOG.info("-- Verifying edits from primary.");
  verifyData(primaryRegion,0,numRows,cq,families);
}
