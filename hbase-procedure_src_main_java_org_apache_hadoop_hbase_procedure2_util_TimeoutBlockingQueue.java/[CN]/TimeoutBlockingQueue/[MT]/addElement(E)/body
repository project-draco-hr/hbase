{
  int size=(tail - head);
  if ((objects.length - size) == 0) {
    int capacity=size + ((size < 64) ? (size + 2) : (size >> 1));
    E[] newObjects=(E[])new Object[capacity];
    if (compareTimeouts(objects[tail - 1],elem) <= 0) {
      System.arraycopy(objects,head,newObjects,0,tail);
      tail-=head;
      newObjects[tail++]=elem;
    }
 else     if (compareTimeouts(objects[head],elem) > 0) {
      System.arraycopy(objects,head,newObjects,1,tail);
      newObjects[0]=elem;
      tail-=(head - 1);
    }
 else {
      int index=upperBound(head,tail - 1,elem);
      int newIndex=(index - head);
      System.arraycopy(objects,head,newObjects,0,newIndex);
      newObjects[newIndex]=elem;
      System.arraycopy(objects,index,newObjects,newIndex + 1,tail - index);
      tail-=(head - 1);
    }
    head=0;
    objects=newObjects;
  }
 else {
    if (tail == objects.length) {
      tail-=head;
      System.arraycopy(objects,head,objects,0,tail);
      head=0;
    }
    if (tail == head || compareTimeouts(objects[tail - 1],elem) <= 0) {
      objects[tail++]=elem;
    }
 else     if (head > 0 && compareTimeouts(objects[head],elem) > 0) {
      objects[--head]=elem;
    }
 else {
      int index=upperBound(head,tail - 1,elem);
      System.arraycopy(objects,index,objects,index + 1,tail - index);
      objects[index]=elem;
      tail++;
    }
  }
}
