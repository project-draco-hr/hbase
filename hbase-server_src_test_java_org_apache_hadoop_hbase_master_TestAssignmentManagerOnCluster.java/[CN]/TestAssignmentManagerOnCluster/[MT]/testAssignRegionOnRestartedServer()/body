{
  TableName table=TableName.valueOf("testAssignRegionOnRestartedServer");
  TEST_UTIL.getMiniHBaseCluster().getConf().setInt("hbase.assignment.maximum.attempts",20);
  TEST_UTIL.getMiniHBaseCluster().stopMaster(0);
  TEST_UTIL.getMiniHBaseCluster().startMaster();
  ServerName deadServer=null;
  HMaster master=null;
  try {
    HTableDescriptor desc=new HTableDescriptor(table);
    desc.addFamily(new HColumnDescriptor(FAMILY));
    admin.createTable(desc);
    Table meta=TEST_UTIL.getConnection().getTable(TableName.META_TABLE_NAME);
    final HRegionInfo hri=new HRegionInfo(desc.getTableName(),Bytes.toBytes("A"),Bytes.toBytes("Z"));
    MetaTableAccessor.addRegionToMeta(meta,hri);
    master=TEST_UTIL.getHBaseCluster().getMaster();
    Set<ServerName> onlineServers=master.getServerManager().getOnlineServers().keySet();
    assertFalse("There should be some servers online",onlineServers.isEmpty());
    ServerName destServer=onlineServers.iterator().next();
    deadServer=ServerName.valueOf(destServer.getHostname(),destServer.getPort(),destServer.getStartcode() - 100L);
    master.getServerManager().recordNewServerWithLock(deadServer,ServerLoad.EMPTY_SERVERLOAD);
    final AssignmentManager am=master.getAssignmentManager();
    RegionPlan plan=new RegionPlan(hri,null,deadServer);
    am.addPlan(hri.getEncodedName(),plan);
    TEST_UTIL.assignRegion(hri);
    TEST_UTIL.waitFor(60000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return !am.getRegionStates().isRegionInTransition(hri);
      }
    }
);
    assertFalse("Region should be assigned",am.getRegionStates().isRegionInTransition(hri));
  }
  finally {
    if (deadServer != null) {
      master.getServerManager().expireServer(deadServer);
    }
    TEST_UTIL.deleteTable(table);
    TEST_UTIL.getMiniHBaseCluster().getConf().setInt("hbase.assignment.maximum.attempts",3);
    ServerName masterServerName=TEST_UTIL.getMiniHBaseCluster().getMaster().getServerName();
    TEST_UTIL.getMiniHBaseCluster().stopMaster(masterServerName);
    TEST_UTIL.getMiniHBaseCluster().startMaster();
  }
}
