{
  final TableName table=TableName.valueOf("testSSHWhenDisablingTableRegionsInOpeningOrPendingOpenState");
  AssignmentManager am=TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager();
  HRegionInfo hri=null;
  ServerName serverName=null;
  try {
    hri=createTableAndGetOneRegion(table);
    serverName=am.getRegionStates().getRegionServerOfRegion(hri);
    ServerName destServerName=null;
    HRegionServer destServer=null;
    for (int i=0; i < 3; i++) {
      destServer=TEST_UTIL.getHBaseCluster().getRegionServer(i);
      if (!destServer.getServerName().equals(serverName)) {
        destServerName=destServer.getServerName();
        break;
      }
    }
    am.regionOffline(hri);
    ZooKeeperWatcher zkw=TEST_UTIL.getHBaseCluster().getMaster().getZooKeeper();
    am.getRegionStates().updateRegionState(hri,State.PENDING_OPEN,destServerName);
    if (ConfigUtil.useZKForAssignment(conf)) {
      ZKAssign.createNodeOffline(zkw,hri,destServerName);
      ZKAssign.transitionNodeOpening(zkw,hri,destServerName);
      long timeoutTime=System.currentTimeMillis() + 20000;
      while (!am.getRegionStates().isRegionInTransition(hri)) {
        assertTrue("Failed to process ZK opening event in time",System.currentTimeMillis() < timeoutTime);
        Thread.sleep(100);
      }
    }
    am.getTableStateManager().setTableState(table,ZooKeeperProtos.Table.State.DISABLING);
    List<HRegionInfo> toAssignRegions=am.processServerShutdown(destServerName);
    assertTrue("Regions to be assigned should be empty.",toAssignRegions.isEmpty());
    assertTrue("Regions to be assigned should be empty.",am.getRegionStates().getRegionState(hri).isOffline());
  }
  finally {
    if (hri != null && serverName != null) {
      am.regionOnline(hri,serverName);
    }
    am.getTableStateManager().setTableState(table,ZooKeeperProtos.Table.State.DISABLED);
    TEST_UTIL.deleteTable(table);
  }
}
