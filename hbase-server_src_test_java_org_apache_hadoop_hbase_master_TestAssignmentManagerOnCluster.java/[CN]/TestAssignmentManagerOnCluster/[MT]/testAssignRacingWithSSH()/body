{
  TableName table=TableName.valueOf("testAssignRacingWithSSH");
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  MyMaster master=null;
  try {
    HTableDescriptor desc=new HTableDescriptor(table);
    desc.addFamily(new HColumnDescriptor(FAMILY));
    admin.createTable(desc);
    Table meta=TEST_UTIL.getConnection().getTable(TableName.META_TABLE_NAME);
    HRegionInfo hri=new HRegionInfo(desc.getTableName(),Bytes.toBytes("A"),Bytes.toBytes("Z"));
    MetaTableAccessor.addRegionToMeta(meta,hri);
    master=(MyMaster)cluster.getMaster();
    master.assignRegion(hri);
    master.enableSSH(false);
    AssignmentManager am=master.getAssignmentManager();
    RegionStates regionStates=am.getRegionStates();
    ServerName metaServer=regionStates.getRegionServerOfRegion(HRegionInfo.FIRST_META_REGIONINFO);
    while (true) {
      assertTrue(am.waitForAssignment(hri));
      RegionState state=regionStates.getRegionState(hri);
      ServerName oldServerName=state.getServerName();
      if (!ServerName.isSameHostnameAndPort(oldServerName,metaServer)) {
        cluster.killRegionServer(oldServerName);
        cluster.waitForRegionServerToStop(oldServerName,-1);
        break;
      }
      int i=cluster.getServerWithMeta();
      HRegionServer rs=cluster.getRegionServer(i == 0 ? 1 : 0);
      oldServerName=rs.getServerName();
      master.move(hri.getEncodedNameAsBytes(),Bytes.toBytes(oldServerName.getServerName()));
    }
    am.assign(hri,true);
    RegionState state=regionStates.getRegionState(hri);
    assertTrue(state.isFailedClose());
    am.unassign(hri);
    state=regionStates.getRegionState(hri);
    assertTrue(state.isFailedClose());
    master.enableSSH(true);
    am.waitOnRegionToClearRegionsInTransition(hri);
    assertTrue(am.waitForAssignment(hri));
    ServerName serverName=master.getAssignmentManager().getRegionStates().getRegionServerOfRegion(hri);
    TEST_UTIL.assertRegionOnlyOnServer(hri,serverName,6000);
  }
  finally {
    if (master != null) {
      master.enableSSH(true);
    }
    TEST_UTIL.deleteTable(table);
    cluster.startRegionServer();
  }
}
