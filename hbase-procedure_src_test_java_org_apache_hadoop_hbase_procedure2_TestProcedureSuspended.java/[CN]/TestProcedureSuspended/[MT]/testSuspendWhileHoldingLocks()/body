{
  final AtomicBoolean lockA=new AtomicBoolean(false);
  final AtomicBoolean lockB=new AtomicBoolean(false);
  final TestLockProcedure p1keyA=new TestLockProcedure(lockA,"keyA",false,true);
  final TestLockProcedure p2keyA=new TestLockProcedure(lockA,"keyA",false,true);
  final TestLockProcedure p3keyB=new TestLockProcedure(lockB,"keyB",false,true);
  procExecutor.submitProcedure(p1keyA);
  procExecutor.submitProcedure(p2keyA);
  procExecutor.submitProcedure(p3keyB);
  waitAndAssertTimestamp(p1keyA,1,1);
  waitAndAssertTimestamp(p2keyA,0,-1);
  waitAndAssertTimestamp(p3keyB,1,2);
  assertEquals(true,lockA.get());
  assertEquals(true,lockB.get());
  p3keyB.setThrowSuspend(false);
  procExecutor.getScheduler().addFront(p3keyB);
  waitAndAssertTimestamp(p1keyA,1,1);
  waitAndAssertTimestamp(p2keyA,0,-1);
  waitAndAssertTimestamp(p3keyB,2,3);
  assertEquals(true,lockA.get());
  ProcedureTestingUtility.waitProcedure(procExecutor,p3keyB);
  assertEquals(false,lockB.get());
  p1keyA.setTriggerRollback(true);
  procExecutor.getScheduler().addFront(p1keyA);
  ProcedureTestingUtility.waitProcedure(procExecutor,p1keyA);
  waitAndAssertTimestamp(p1keyA,4,60000);
  waitAndAssertTimestamp(p2keyA,1,7);
  waitAndAssertTimestamp(p3keyB,2,3);
  assertEquals(true,lockA.get());
  p2keyA.setThrowSuspend(false);
  procExecutor.getScheduler().addFront(p2keyA);
  ProcedureTestingUtility.waitProcedure(procExecutor,p2keyA);
  waitAndAssertTimestamp(p1keyA,4,60000);
  waitAndAssertTimestamp(p2keyA,2,8);
  waitAndAssertTimestamp(p3keyB,2,3);
  assertEquals(false,lockA.get());
  assertEquals(false,lockB.get());
}
