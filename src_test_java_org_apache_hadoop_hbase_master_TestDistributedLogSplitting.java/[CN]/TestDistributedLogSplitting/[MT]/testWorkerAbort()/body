{
  LOG.info("testWorkerAbort");
  startCluster(1);
  final int NUM_LOG_LINES=10000;
  final SplitLogManager slm=master.getMasterFileSystem().splitLogManager;
  FileSystem fs=master.getMasterFileSystem().getFileSystem();
  final List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  HRegionServer hrs=rsts.get(0).getRegionServer();
  Path rootdir=FSUtils.getRootDir(conf);
  final Path logDir=new Path(rootdir,HLog.getHLogDirectoryName(hrs.getServerName().toString()));
  installTable(new ZooKeeperWatcher(conf,"table-creation",null),"table","family",40);
  makeHLog(hrs.getWAL(),hrs.getOnlineRegions(),"table",NUM_LOG_LINES,100);
  new Thread(){
    public void run(){
      waitForCounter(tot_wkr_task_acquired,0,1,1000);
      for (      RegionServerThread rst : rsts) {
        rst.getRegionServer().abort("testing");
      }
    }
  }
.start();
  FileStatus[] logfiles=fs.listStatus(logDir);
  TaskBatch batch=new TaskBatch();
  slm.enqueueSplitTask(logfiles[0].getPath().toString(),batch);
  long curt=System.currentTimeMillis();
  long waitTime=80000;
  long endt=curt + waitTime;
  while (curt < endt) {
    if ((tot_wkr_task_resigned.get() + tot_wkr_task_err.get() + tot_wkr_final_transistion_failed.get()+ tot_wkr_task_done.get()+ tot_wkr_preempt_task.get()) == 0) {
      Thread.yield();
      curt=System.currentTimeMillis();
    }
 else {
      assertEquals(1,(tot_wkr_task_resigned.get() + tot_wkr_task_err.get() + tot_wkr_final_transistion_failed.get()+ tot_wkr_task_done.get()+ tot_wkr_preempt_task.get()));
      return;
    }
  }
  fail("none of the following counters went up in " + waitTime + " milliseconds - "+ "tot_wkr_task_resigned, tot_wkr_task_err, "+ "tot_wkr_final_transistion_failed, tot_wkr_task_done, "+ "tot_wkr_preempt_task");
}
