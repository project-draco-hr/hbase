{
  Path dir=TEST_UTIL.getDataTestDirOnTestFS("testReplicateEntries");
  Path familyDir=new Path(dir,Bytes.toString(FAM_NAME1));
  int numRows=10;
  List<Path> p=new ArrayList<>(1);
  Random rng=new SecureRandom();
  Set<Integer> numbers=new HashSet<>();
  while (numbers.size() < 50) {
    numbers.add(rng.nextInt(1000));
  }
  List<Integer> numberList=new ArrayList<>(numbers);
  Collections.sort(numberList);
  Map<String,Long> storeFilesSize=new HashMap<String,Long>(1);
  Configuration conf=TEST_UTIL.getConfiguration();
  FileSystem fs=dir.getFileSystem(conf);
  Iterator<Integer> numbersItr=numberList.iterator();
  for (int i=0; i < 25; i++) {
    Path hfilePath=new Path(familyDir,"hfile_" + i);
    HFileTestUtil.createHFile(conf,fs,hfilePath,FAM_NAME1,FAM_NAME1,Bytes.toBytes(numbersItr.next()),Bytes.toBytes(numbersItr.next()),numRows);
    p.add(hfilePath);
    storeFilesSize.put(hfilePath.getName(),fs.getFileStatus(hfilePath).getLen());
  }
  Map<byte[],List<Path>> storeFiles=new HashMap<>(1);
  storeFiles.put(FAM_NAME1,p);
  WALEdit edit=null;
  WALProtos.BulkLoadDescriptor loadDescriptor=null;
  try (Connection c=ConnectionFactory.createConnection(conf);RegionLocator l=c.getRegionLocator(TABLE_NAME1)){
    HRegionInfo regionInfo=l.getAllRegionLocations().get(0).getRegionInfo();
    loadDescriptor=ProtobufUtil.toBulkLoadDescriptor(TABLE_NAME1,UnsafeByteOperations.unsafeWrap(regionInfo.getEncodedNameAsBytes()),storeFiles,storeFilesSize,1);
    edit=WALEdit.createBulkLoadEvent(regionInfo,loadDescriptor);
  }
   List<WALEntry> entries=new ArrayList<WALEntry>(1);
  WALEntry.Builder builder=createWALEntryBuilder(TABLE_NAME1);
  for (int i=0; i < 25; i++) {
    String pathToHfileFromNS=new StringBuilder(100).append(TABLE_NAME1.getNamespaceAsString()).append(Path.SEPARATOR).append(Bytes.toString(TABLE_NAME1.getName())).append(Path.SEPARATOR).append(Bytes.toString(loadDescriptor.getEncodedRegionName().toByteArray())).append(Path.SEPARATOR).append(Bytes.toString(FAM_NAME1)).append(Path.SEPARATOR).append("hfile_" + i).toString();
    String dst=baseNamespaceDir + Path.SEPARATOR + pathToHfileFromNS;
    FileUtil.copy(fs,p.get(0),fs,new Path(dst),false,conf);
  }
  entries.add(builder.build());
  ResultScanner scanRes=null;
  try {
    Scan scan=new Scan();
    scanRes=table1.getScanner(scan);
    assertEquals(0,scanRes.next(numRows).length);
    SINK.replicateEntries(entries,CellUtil.createCellScanner(edit.getCells().iterator()),replicationClusterId,baseNamespaceDir,hfileArchiveDir);
    scanRes=table1.getScanner(scan);
    assertEquals(numRows,scanRes.next(numRows).length);
  }
  finally {
    if (scanRes != null) {
      scanRes.close();
    }
  }
}
