{
  final TableName tableName=htable1.getName();
  HRegion region=utility1.getMiniHBaseCluster().getRegions(tableName).get(0);
  HRegionInfo hri=region.getRegionInfo();
  NavigableMap<byte[],Integer> scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  for (  byte[] fam : htable1.getTableDescriptor().getFamiliesKeys()) {
    scopes.put(fam,1);
  }
  final MultiVersionConcurrencyControl mvcc=new MultiVersionConcurrencyControl();
  int index=utility1.getMiniHBaseCluster().getServerWith(hri.getRegionName());
  WAL wal=utility1.getMiniHBaseCluster().getRegionServer(index).getWAL(region.getRegionInfo());
  final byte[] rowName=Bytes.toBytes("testReplicationInReplay");
  final byte[] qualifier=Bytes.toBytes("q");
  final byte[] value=Bytes.toBytes("v");
  WALEdit edit=new WALEdit(true);
  long now=EnvironmentEdgeManager.currentTime();
  edit.add(new KeyValue(rowName,famName,qualifier,now,value));
  WALKey walKey=new WALKey(hri.getEncodedNameAsBytes(),tableName,now,mvcc,scopes);
  wal.append(hri,walKey,edit,true);
  wal.sync();
  Get get=new Get(rowName);
  for (int i=0; i < NB_RETRIES; i++) {
    if (i == NB_RETRIES - 1) {
      break;
    }
    Result res=htable2.get(get);
    if (res.size() >= 1) {
      fail("Not supposed to be replicated for " + Bytes.toString(res.getRow()));
    }
 else {
      LOG.info("Row not replicated, let's wait a bit more...");
      Thread.sleep(SLEEP_TIME);
    }
  }
}
