{
  prepareToSplit();
synchronized (splitLock) {
    if (closed.get()) {
      return null;
    }
    byte[] startKey=this.regionInfo.getStartKey();
    byte[] endKey=this.regionInfo.getEndKey();
    if (this.comparator.matchingRows(startKey,0,startKey.length,splitRow,0,splitRow.length)) {
      LOG.debug("Startkey and midkey are same, not splitting");
      return null;
    }
    if (this.comparator.matchingRows(splitRow,0,splitRow.length,endKey,0,endKey.length)) {
      LOG.debug("Endkey and midkey are same, not splitting");
      return null;
    }
    LOG.info("Starting split of region " + this);
    Path splits=new Path(this.regiondir,SPLITDIR);
    if (!this.fs.exists(splits)) {
      this.fs.mkdirs(splits);
    }
    long rid=System.currentTimeMillis();
    if (rid < this.regionInfo.getRegionId()) {
      LOG.warn("Clock skew; parent regions id is " + this.regionInfo.getRegionId() + " but current time here is "+ rid);
      rid=this.regionInfo.getRegionId() + 1;
    }
    HRegionInfo regionAInfo=new HRegionInfo(this.regionInfo.getTableDesc(),startKey,splitRow,false,rid);
    Path dirA=getSplitDirForDaughter(splits,regionAInfo);
    HRegionInfo regionBInfo=new HRegionInfo(this.regionInfo.getTableDesc(),splitRow,endKey,false,rid);
    Path dirB=getSplitDirForDaughter(splits,regionBInfo);
    List<StoreFile> hstoreFilesToSplit=close(false);
    if (hstoreFilesToSplit == null) {
      LOG.warn("Close came back null (Implement abort of close?)");
      throw new RuntimeException("close returned empty vector of HStoreFiles");
    }
    for (    StoreFile h : hstoreFilesToSplit) {
      StoreFile.split(fs,Store.getStoreHomedir(splits,regionAInfo.getEncodedName(),h.getFamily()),h,splitRow,Range.bottom);
      StoreFile.split(fs,Store.getStoreHomedir(splits,regionBInfo.getEncodedName(),h.getFamily()),h,splitRow,Range.top);
    }
    HRegion regionA=HRegion.newHRegion(basedir,log,fs,conf,regionAInfo,null);
    moveInitialFilesIntoPlace(this.fs,dirA,regionA.getRegionDir());
    HRegion regionB=HRegion.newHRegion(basedir,log,fs,conf,regionBInfo,null);
    moveInitialFilesIntoPlace(this.fs,dirB,regionB.getRegionDir());
    HRegion regions[]=new HRegion[]{regionA,regionB};
    return regions;
  }
}
