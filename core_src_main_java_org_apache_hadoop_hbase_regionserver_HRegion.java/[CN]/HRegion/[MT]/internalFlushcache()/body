{
  final long startTime=System.currentTimeMillis();
  this.lastFlushTime=startTime;
  if (this.memstoreSize.get() <= 0) {
    return false;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Started memstore flush for region " + this + ". Current region memstore size "+ StringUtils.humanReadableInt(this.memstoreSize.get()));
  }
  long sequenceId=-1L;
  long completeSequenceId=-1L;
  this.updatesLock.writeLock().lock();
  final long currentMemStoreSize=this.memstoreSize.get();
  List<StoreFlusher> storeFlushers=new ArrayList<StoreFlusher>();
  try {
    sequenceId=log.startCacheFlush();
    completeSequenceId=this.getCompleteCacheFlushSequenceId(sequenceId);
    for (    Store s : stores.values()) {
      storeFlushers.add(s.getStoreFlusher(completeSequenceId));
    }
    for (    StoreFlusher flusher : storeFlushers) {
      flusher.prepare();
    }
  }
  finally {
    this.updatesLock.writeLock().unlock();
  }
  boolean compactionRequested=false;
  try {
    for (    StoreFlusher flusher : storeFlushers) {
      flusher.flushCache();
    }
    internalPreFlushcacheCommit();
    for (    StoreFlusher flusher : storeFlushers) {
      boolean needsCompaction=flusher.commit();
      if (needsCompaction) {
        compactionRequested=true;
      }
    }
    storeFlushers.clear();
    this.memstoreSize.addAndGet(-currentMemStoreSize);
  }
 catch (  Throwable t) {
    this.log.abortCacheFlush();
    DroppedSnapshotException dse=new DroppedSnapshotException("region: " + Bytes.toStringBinary(getRegionName()));
    dse.initCause(t);
    throw dse;
  }
  this.log.completeCacheFlush(getRegionName(),regionInfo.getTableDesc().getName(),completeSequenceId,this.getRegionInfo().isMetaRegion());
synchronized (this) {
    notifyAll();
  }
  if (LOG.isDebugEnabled()) {
    long now=System.currentTimeMillis();
    LOG.debug("Finished memstore flush of ~" + StringUtils.humanReadableInt(currentMemStoreSize) + " for region "+ this+ " in "+ (now - startTime)+ "ms, sequence id="+ sequenceId+ ", compaction requested="+ compactionRequested);
  }
  return compactionRequested;
}
