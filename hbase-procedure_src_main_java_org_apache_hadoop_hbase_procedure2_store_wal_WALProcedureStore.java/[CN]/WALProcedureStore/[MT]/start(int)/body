{
  if (!setRunning(true)) {
    return;
  }
  loading.set(true);
  slots=new ByteSlot[numSlots];
  slotsCache=new LinkedTransferQueue();
  while (slotsCache.size() < numSlots) {
    slotsCache.offer(new ByteSlot());
  }
  maxRetriesBeforeRoll=conf.getInt(MAX_RETRIES_BEFORE_ROLL_CONF_KEY,DEFAULT_MAX_RETRIES_BEFORE_ROLL);
  maxSyncFailureRoll=conf.getInt(MAX_SYNC_FAILURE_ROLL_CONF_KEY,DEFAULT_MAX_SYNC_FAILURE_ROLL);
  waitBeforeRoll=conf.getInt(WAIT_BEFORE_ROLL_CONF_KEY,DEFAULT_WAIT_BEFORE_ROLL);
  rollRetries=conf.getInt(ROLL_RETRIES_CONF_KEY,DEFAULT_ROLL_RETRIES);
  rollThreshold=conf.getLong(ROLL_THRESHOLD_CONF_KEY,DEFAULT_ROLL_THRESHOLD);
  periodicRollMsec=conf.getInt(PERIODIC_ROLL_CONF_KEY,DEFAULT_PERIODIC_ROLL);
  syncWaitMsec=conf.getInt(SYNC_WAIT_MSEC_CONF_KEY,DEFAULT_SYNC_WAIT_MSEC);
  useHsync=conf.getBoolean(USE_HSYNC_CONF_KEY,DEFAULT_USE_HSYNC);
  syncThread=new Thread("WALProcedureStoreSyncThread"){
    @Override public void run(){
      try {
        syncLoop();
      }
 catch (      Throwable e) {
        LOG.error("Got an exception from the sync-loop",e);
        if (!isSyncAborted()) {
          sendAbortProcessSignal();
        }
      }
    }
  }
;
  syncThread.start();
}
