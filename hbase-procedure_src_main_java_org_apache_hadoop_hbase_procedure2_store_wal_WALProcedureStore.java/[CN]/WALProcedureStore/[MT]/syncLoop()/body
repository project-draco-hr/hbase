{
  long totalSyncedToStore=0;
  inSync.set(false);
  lock.lock();
  try {
    while (isRunning()) {
      try {
        if (slotIndex == 0) {
          if (!loading.get()) {
            periodicRoll();
          }
          if (LOG.isTraceEnabled()) {
            float rollTsSec=getMillisFromLastRoll() / 1000.0f;
            LOG.trace(String.format("Waiting for data. flushed=%s (%s/sec)",StringUtils.humanSize(totalSynced.get()),StringUtils.humanSize(totalSynced.get() / rollTsSec)));
          }
          waitCond.await(getMillisToNextPeriodicRoll(),TimeUnit.MILLISECONDS);
          if (slotIndex == 0) {
            continue;
          }
        }
        final long syncWaitSt=System.currentTimeMillis();
        if (slotIndex != slots.length) {
          slotCond.await(syncWaitMsec,TimeUnit.MILLISECONDS);
        }
        final long currentTs=System.currentTimeMillis();
        final long syncWaitMs=currentTs - syncWaitSt;
        final float rollSec=getMillisFromLastRoll() / 1000.0f;
        final float syncedPerSec=totalSyncedToStore / rollSec;
        if (LOG.isTraceEnabled() && (syncWaitMs > 10 || slotIndex < slots.length)) {
          LOG.trace(String.format("Sync wait %s, slotIndex=%s , totalSynced=%s (%s/sec)",StringUtils.humanTimeDiff(syncWaitMs),slotIndex,StringUtils.humanSize(totalSyncedToStore),StringUtils.humanSize(syncedPerSec)));
        }
        final SyncMetrics syncMetrics=new SyncMetrics();
        syncMetrics.timestamp=currentTs;
        syncMetrics.syncWaitMs=syncWaitMs;
        syncMetrics.syncedEntries=slotIndex;
        syncMetrics.totalSyncedBytes=totalSyncedToStore;
        syncMetrics.syncedPerSec=syncedPerSec;
        syncMetricsBuffer.add(syncMetrics);
        inSync.set(true);
        long slotSize=syncSlots();
        logs.getLast().addToSize(slotSize);
        totalSyncedToStore=totalSynced.addAndGet(slotSize);
        slotIndex=0;
        inSync.set(false);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        sendAbortProcessSignal();
        syncException.compareAndSet(null,e);
        throw e;
      }
catch (      Throwable t) {
        syncException.compareAndSet(null,t);
        throw t;
      }
 finally {
        syncCond.signalAll();
      }
    }
  }
  finally {
    lock.unlock();
  }
}
