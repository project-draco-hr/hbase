{
  inSync.set(false);
  while (running.get()) {
    lock.lock();
    try {
      if (slotIndex == 0) {
        if (LOG.isTraceEnabled()) {
          float rollTsSec=(System.currentTimeMillis() - lastRollTs) / 1000.0f;
          LOG.trace(String.format("Waiting for data. flushed=%s (%s/sec)",StringUtils.humanSize(totalSynced.get()),StringUtils.humanSize(totalSynced.get() / rollTsSec)));
        }
        waitCond.await();
        if (slotIndex == 0) {
          continue;
        }
      }
      long syncWaitSt=System.currentTimeMillis();
      if (slotIndex != slots.length) {
        slotCond.await(syncWaitMsec,TimeUnit.MILLISECONDS);
      }
      long syncWaitMs=System.currentTimeMillis() - syncWaitSt;
      if (LOG.isTraceEnabled() && (syncWaitMs > 10 || slotIndex < slots.length)) {
        float rollSec=(System.currentTimeMillis() - lastRollTs) / 1000.0f;
        LOG.trace("Sync wait " + StringUtils.humanTimeDiff(syncWaitMs) + ", slotIndex="+ slotIndex+ ", totalSynced="+ StringUtils.humanSize(totalSynced.get())+ " "+ StringUtils.humanSize(totalSynced.get() / rollSec)+ "/sec");
      }
      inSync.set(true);
      totalSynced.addAndGet(syncSlots());
      slotIndex=0;
      inSync.set(false);
      syncCond.signalAll();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      sendAbortProcessSignal();
    }
 finally {
      lock.unlock();
    }
  }
}
