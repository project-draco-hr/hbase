{
  HServerInfo info=new HServerInfo(serverInfo);
  String serverName=info.getServerName();
  if (this.serversToServerInfo.containsKey(serverName) || this.deadServers.contains(serverName)) {
    LOG.debug("Server start was rejected: " + serverInfo);
    LOG.debug("serversToServerInfo.containsKey: " + this.serversToServerInfo.containsKey(serverName));
    LOG.debug("deadServers.contains: " + this.deadServers.contains(serverName));
    throw new Leases.LeaseStillHeldException(serverName);
  }
  LOG.info("Received start message from: " + serverName);
  HServerLoad load=this.serversToLoad.remove(serverName);
  if (load != null) {
synchronized (this.loadToServers) {
      Set<String> servers=loadToServers.get(load);
      if (servers != null) {
        servers.remove(serverName);
        if (servers.size() > 0)         this.loadToServers.put(load,servers);
 else         this.loadToServers.remove(load);
      }
    }
  }
  HServerInfo storedInfo=this.serversToServerInfo.remove(serverName);
  if (storedInfo != null && !this.master.isClosed()) {
    this.master.getRegionManager().getRootRegionLocation();
    RegionServerOperation op=new ProcessServerShutdown(master,storedInfo);
    this.master.getRegionServerOperationQueue().put(op);
  }
  recordNewServer(info);
}
