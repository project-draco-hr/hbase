{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.startRow != null) {
    if (struct.isSetStartRow()) {
      oprot.writeFieldBegin(START_ROW_FIELD_DESC);
      oprot.writeBinary(struct.startRow);
      oprot.writeFieldEnd();
    }
  }
  if (struct.stopRow != null) {
    if (struct.isSetStopRow()) {
      oprot.writeFieldBegin(STOP_ROW_FIELD_DESC);
      oprot.writeBinary(struct.stopRow);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetTimestamp()) {
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(struct.timestamp);
    oprot.writeFieldEnd();
  }
  if (struct.columns != null) {
    if (struct.isSetColumns()) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,struct.columns.size()));
        for (        ByteBuffer _iter29 : struct.columns) {
          oprot.writeBinary(_iter29);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetCaching()) {
    oprot.writeFieldBegin(CACHING_FIELD_DESC);
    oprot.writeI32(struct.caching);
    oprot.writeFieldEnd();
  }
  if (struct.filterString != null) {
    if (struct.isSetFilterString()) {
      oprot.writeFieldBegin(FILTER_STRING_FIELD_DESC);
      oprot.writeBinary(struct.filterString);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetBatchSize()) {
    oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
    oprot.writeI32(struct.batchSize);
    oprot.writeFieldEnd();
  }
  if (struct.isSetSortColumns()) {
    oprot.writeFieldBegin(SORT_COLUMNS_FIELD_DESC);
    oprot.writeBool(struct.sortColumns);
    oprot.writeFieldEnd();
  }
  if (struct.isSetReversed()) {
    oprot.writeFieldBegin(REVERSED_FIELD_DESC);
    oprot.writeBool(struct.reversed);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
