{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetStartRow()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.startRow,other.startRow);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetStopRow()).compareTo(other.isSetStopRow());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetStopRow()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.stopRow,other.stopRow);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetTimestamp()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.timestamp,other.timestamp);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetColumns()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.columns,other.columns);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetCaching()).compareTo(other.isSetCaching());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetCaching()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.caching,other.caching);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetFilterString()).compareTo(other.isSetFilterString());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetFilterString()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.filterString,other.filterString);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBatchSize()).compareTo(other.isSetBatchSize());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBatchSize()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.batchSize,other.batchSize);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSortColumns()).compareTo(other.isSetSortColumns());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSortColumns()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.sortColumns,other.sortColumns);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetReversed()).compareTo(other.isSetReversed());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetReversed()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.reversed,other.reversed);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
