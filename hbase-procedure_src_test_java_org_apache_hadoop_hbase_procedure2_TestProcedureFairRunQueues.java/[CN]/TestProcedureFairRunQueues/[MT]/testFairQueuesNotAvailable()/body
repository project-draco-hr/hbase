{
  ProcedureFairRunQueues<String,TestRunQueue> fairq=new ProcedureFairRunQueues<String,TestRunQueue>(1);
  TestRunQueue a=fairq.add("A",new TestRunQueue("A",1));
  TestRunQueue b=fairq.add("B",new TestRunQueue("B",1));
  TestRunQueue m=fairq.add("M",new TestRunQueue("M",2));
  m.setAvailable(false);
  for (int i=0; i < 3; ++i) {
    assertEquals(a,fairq.poll());
    assertEquals(b,fairq.poll());
  }
  m.setAvailable(true);
  for (int i=0; i < 3; ++i) {
    assertEquals(m,fairq.poll());
    assertEquals(m,fairq.poll());
    assertEquals(a,fairq.poll());
    assertEquals(b,fairq.poll());
  }
  b.setAvailable(false);
  for (int i=0; i < 3; ++i) {
    assertEquals(m,fairq.poll());
    assertEquals(m,fairq.poll());
    assertEquals(a,fairq.poll());
  }
  assertEquals(m,fairq.poll());
  m.setAvailable(false);
  assertEquals(a,fairq.poll());
  assertEquals(a,fairq.poll());
  b.setAvailable(true);
  for (int i=0; i < 3; ++i) {
    assertEquals(b,fairq.poll());
    assertEquals(a,fairq.poll());
  }
}
