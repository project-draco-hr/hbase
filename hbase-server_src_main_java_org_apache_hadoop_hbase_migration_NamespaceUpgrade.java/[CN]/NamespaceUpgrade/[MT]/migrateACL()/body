{
  TableName oldTableName=TableName.valueOf(OLD_ACL);
  Path oldTablePath=new Path(rootDir,oldTableName.getNameAsString());
  if (!fs.exists(oldTablePath)) {
    return;
  }
  LOG.info("Migrating ACL table");
  TableName newTableName=AccessControlLists.ACL_TABLE_NAME;
  Path newTablePath=FSUtils.getTableDir(rootDir,newTableName);
  HTableDescriptor oldDesc=readTableDescriptor(fs,getCurrentTableInfoStatus(fs,oldTablePath));
  if (FSTableDescriptors.getTableInfoPath(fs,newTablePath) == null) {
    LOG.info("Creating new tableDesc for ACL");
    HTableDescriptor newDesc=new HTableDescriptor(oldDesc);
    newDesc.setName(newTableName);
    new FSTableDescriptors(this.conf).createTableDescriptorForTableDirectory(newTablePath,new TableDescriptor(newDesc,TableState.State.ENABLED),true);
  }
  ServerName fakeServer=ServerName.valueOf("nsupgrade",96,123);
  final WALFactory walFactory=new WALFactory(conf,null,fakeServer.toString());
  WAL metawal=walFactory.getMetaWAL(HRegionInfo.FIRST_META_REGIONINFO.getEncodedNameAsBytes());
  FSTableDescriptors fst=new FSTableDescriptors(conf);
  HRegion meta=HRegion.openHRegion(rootDir,HRegionInfo.FIRST_META_REGIONINFO,fst.get(TableName.META_TABLE_NAME),metawal,conf);
  HRegion region=null;
  try {
    for (    Path regionDir : FSUtils.getRegionDirs(fs,oldTablePath)) {
      LOG.info("Migrating ACL region " + regionDir.getName());
      HRegionInfo oldRegionInfo=HRegionFileSystem.loadRegionInfoFileContent(fs,regionDir);
      HRegionInfo newRegionInfo=new HRegionInfo(newTableName,oldRegionInfo.getStartKey(),oldRegionInfo.getEndKey(),oldRegionInfo.isSplit(),oldRegionInfo.getRegionId());
      newRegionInfo.setOffline(oldRegionInfo.isOffline());
      region=new HRegion(HRegionFileSystem.openRegionFromFileSystem(conf,fs,oldTablePath,oldRegionInfo,false),metawal,conf,oldDesc,null);
      region.initialize();
      updateAcls(region);
      region.close();
      Path newRegionDir=new Path(newTablePath,newRegionInfo.getEncodedName());
      if (!fs.exists(newRegionDir)) {
        if (!fs.mkdirs(newRegionDir)) {
          throw new IllegalStateException("Failed to create new region dir: " + newRegionDir);
        }
      }
      HRegionFileSystem.openRegionFromFileSystem(conf,fs,newTablePath,newRegionInfo,false);
      for (      FileStatus file : fs.listStatus(regionDir,new FSUtils.UserTableDirFilter(fs))) {
        if (file.getPath().getName().equals(HRegionFileSystem.REGION_INFO_FILE))         continue;
        if (!fs.rename(file.getPath(),newRegionDir)) {
          throw new IllegalStateException("Failed to move file " + file.getPath() + " to "+ newRegionDir);
        }
      }
      meta.put(MetaTableAccessor.makePutFromRegionInfo(newRegionInfo));
      meta.delete(MetaTableAccessor.makeDeleteFromRegionInfo(oldRegionInfo));
    }
  }
  finally {
    meta.flushcache();
    meta.waitForFlushesAndCompactions();
    meta.close();
    metawal.close();
    if (region != null) {
      region.close();
    }
  }
  if (!fs.rename(oldTablePath,backupDir)) {
    throw new IllegalStateException("Failed to old data: " + oldTablePath + " to "+ backupDir);
  }
}
