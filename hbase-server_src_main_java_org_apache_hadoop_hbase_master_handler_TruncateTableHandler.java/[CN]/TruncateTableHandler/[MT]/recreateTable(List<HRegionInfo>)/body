{
  MasterFileSystem mfs=this.masterServices.getMasterFileSystem();
  Path tempdir=mfs.getTempDir();
  FileSystem fs=mfs.getFileSystem();
  AssignmentManager assignmentManager=this.masterServices.getAssignmentManager();
  CreateTableHandler.checkAndSetEnablingTable(assignmentManager,tableName);
  try {
    new FSTableDescriptors(server.getConfiguration()).createTableDescriptorForTableDirectory(tempdir,this.hTableDescriptor,false);
    Path tempTableDir=FSUtils.getTableDir(tempdir,this.tableName);
    Path tableDir=FSUtils.getTableDir(mfs.getRootDir(),this.tableName);
    HRegionInfo[] newRegions;
    if (this.preserveSplits) {
      newRegions=regions.toArray(new HRegionInfo[regions.size()]);
      LOG.info("Truncate will preserve " + newRegions.length + " regions");
    }
 else {
      newRegions=new HRegionInfo[1];
      newRegions[0]=new HRegionInfo(this.tableName,null,null);
      LOG.info("Truncate will not preserve the regions");
    }
    List<HRegionInfo> regionInfos=ModifyRegionUtils.createRegions(masterServices.getConfiguration(),tempdir,this.hTableDescriptor,newRegions,null);
    if (!fs.rename(tempTableDir,tableDir)) {
      throw new IOException("Unable to move table from temp=" + tempTableDir + " to hbase root="+ tableDir);
    }
    MetaEditor.addRegionsToMeta(masterServices.getCatalogTracker(),regionInfos);
    ModifyRegionUtils.assignRegions(assignmentManager,regionInfos);
    try {
      assignmentManager.getZKTable().setEnabledTable(tableName);
    }
 catch (    KeeperException e) {
      throw new IOException("Unable to ensure that " + tableName + " will be"+ " enabled because of a ZooKeeper issue",e);
    }
  }
 catch (  IOException e) {
    CreateTableHandler.removeEnablingTable(assignmentManager,tableName);
    throw e;
  }
}
