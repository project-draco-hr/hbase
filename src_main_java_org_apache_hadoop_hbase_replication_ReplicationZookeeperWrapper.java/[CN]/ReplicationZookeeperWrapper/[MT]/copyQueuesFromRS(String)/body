{
  SortedMap<String,SortedSet<String>> queues=new TreeMap<String,SortedSet<String>>();
  try {
    String nodePath=this.zookeeperWrapper.getZNode(rsZNode,znode);
    List<String> clusters=this.zookeeperWrapper.listZnodes(nodePath,null);
    if (clusters == null || clusters.size() <= 1) {
      return queues;
    }
    clusters.remove(RS_LOCK_ZNODE);
    for (    String cluster : clusters) {
      String newCluster=cluster + "-" + znode;
      String newClusterZnode=this.zookeeperWrapper.getZNode(rsServerNameZnode,newCluster);
      this.zookeeperWrapper.ensureExists(newClusterZnode);
      String clusterPath=this.zookeeperWrapper.getZNode(nodePath,cluster);
      List<String> hlogs=this.zookeeperWrapper.listZnodes(clusterPath,null);
      if (hlogs == null || hlogs.size() == 0) {
        continue;
      }
      SortedSet<String> logQueue=new TreeSet<String>();
      queues.put(newCluster,logQueue);
      for (      String hlog : hlogs) {
        String position=Bytes.toString(this.zookeeperWrapper.getData(clusterPath,hlog));
        LOG.debug("Creating " + hlog + " with data "+ position);
        this.zookeeperWrapper.writeZNode(newClusterZnode,hlog,position);
        logQueue.add(hlog);
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.warn(e);
    return null;
  }
catch (  KeeperException e) {
    LOG.warn(e);
    return null;
  }
  return queues;
}
