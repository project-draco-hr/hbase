{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.row=iprot.readBinary();
  struct.setRowIsSet(true);
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TList _list63=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.columns=new ArrayList<TColumn>(_list63.size);
      for (int _i64=0; _i64 < _list63.size; ++_i64) {
        TColumn _elem65;
        _elem65=new TColumn();
        _elem65.read(iprot);
        struct.columns.add(_elem65);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(1)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(2)) {
    struct.deleteType=TDeleteType.findByValue(iprot.readI32());
    struct.setDeleteTypeIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map66=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map66.size);
      for (int _i67=0; _i67 < _map66.size; ++_i67) {
        ByteBuffer _key68;
        ByteBuffer _val69;
        _key68=iprot.readBinary();
        _val69=iprot.readBinary();
        struct.attributes.put(_key68,_val69);
      }
    }
    struct.setAttributesIsSet(true);
  }
  if (incoming.get(4)) {
    struct.durability=TDurability.findByValue(iprot.readI32());
    struct.setDurabilityIsSet(true);
  }
}
