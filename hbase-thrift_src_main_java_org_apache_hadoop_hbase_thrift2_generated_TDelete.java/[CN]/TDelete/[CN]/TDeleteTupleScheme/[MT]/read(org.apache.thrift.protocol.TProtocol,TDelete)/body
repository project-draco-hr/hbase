{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.row=iprot.readBinary();
  struct.setRowIsSet(true);
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TList _list63=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
      struct.columns=new ArrayList<TColumn>(_list63.size);
      TColumn _elem64;
      for (int _i65=0; _i65 < _list63.size; ++_i65) {
        _elem64=new TColumn();
        _elem64.read(iprot);
        struct.columns.add(_elem64);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(1)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(2)) {
    struct.deleteType=org.apache.hadoop.hbase.thrift2.generated.TDeleteType.findByValue(iprot.readI32());
    struct.setDeleteTypeIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TMap _map66=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map66.size);
      ByteBuffer _key67;
      ByteBuffer _val68;
      for (int _i69=0; _i69 < _map66.size; ++_i69) {
        _key67=iprot.readBinary();
        _val68=iprot.readBinary();
        struct.attributes.put(_key67,_val68);
      }
    }
    struct.setAttributesIsSet(true);
  }
  if (incoming.get(4)) {
    struct.durability=org.apache.hadoop.hbase.thrift2.generated.TDurability.findByValue(iprot.readI32());
    struct.setDurabilityIsSet(true);
  }
}
