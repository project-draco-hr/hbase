{
  if (this.compressionContext != null) {
    this.encodedRegionName=uncompressor.uncompress(walKey.getEncodedRegionName(),compressionContext.regionDict);
    this.tablename=uncompressor.uncompress(walKey.getTableName(),compressionContext.tableDict);
  }
 else {
    this.encodedRegionName=walKey.getEncodedRegionName().toByteArray();
    this.tablename=walKey.getTableName().toByteArray();
  }
  this.clusterId=HConstants.DEFAULT_CLUSTER_ID;
  if (walKey.hasClusterId()) {
    this.clusterId=new UUID(walKey.getClusterId().getMostSigBits(),walKey.getClusterId().getLeastSigBits());
  }
  this.scopes=null;
  if (walKey.getScopesCount() > 0) {
    this.scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
    for (    FamilyScope scope : walKey.getScopesList()) {
      byte[] family=(compressionContext == null) ? scope.getFamily().toByteArray() : uncompressor.uncompress(scope.getFamily(),compressionContext.familyDict);
      this.scopes.put(family,scope.getScopeType().getNumber());
    }
  }
  this.logSeqNum=walKey.getLogSequenceNumber();
  this.writeTime=walKey.getWriteTime();
}
