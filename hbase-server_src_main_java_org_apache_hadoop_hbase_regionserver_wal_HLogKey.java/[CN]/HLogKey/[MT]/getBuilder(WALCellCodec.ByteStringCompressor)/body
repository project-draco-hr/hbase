{
  WALKey.Builder builder=WALKey.newBuilder();
  if (compressionContext == null) {
    builder.setEncodedRegionName(ByteString.copyFrom(this.encodedRegionName));
    builder.setTableName(ByteString.copyFrom(this.tablename.getName()));
  }
 else {
    builder.setEncodedRegionName(compressor.compress(this.encodedRegionName,compressionContext.regionDict));
    builder.setTableName(compressor.compress(this.tablename.getName(),compressionContext.tableDict));
  }
  builder.setLogSequenceNumber(this.logSeqNum);
  builder.setWriteTime(writeTime);
  if (this.clusterId != HConstants.DEFAULT_CLUSTER_ID) {
    builder.setClusterId(HBaseProtos.UUID.newBuilder().setLeastSigBits(this.clusterId.getLeastSignificantBits()).setMostSigBits(this.clusterId.getMostSignificantBits()));
  }
  if (scopes != null) {
    for (    Map.Entry<byte[],Integer> e : scopes.entrySet()) {
      ByteString family=(compressionContext == null) ? ByteString.copyFrom(e.getKey()) : compressor.compress(e.getKey(),compressionContext.familyDict);
      builder.addScopes(FamilyScope.newBuilder().setFamily(family).setScopeType(ScopeType.valueOf(e.getValue())));
    }
  }
  return builder;
}
