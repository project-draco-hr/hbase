{
  for (  Compression.Algorithm compressAlgo : COMPRESSION_ALGORITHMS) {
    Path path=new Path(TEST_UTIL.getDataTestDir(),"concurrent_reading");
    Random rand=defaultRandom();
    List<Long> offsets=new ArrayList<Long>();
    List<BlockType> types=new ArrayList<BlockType>();
    writeBlocks(rand,compressAlgo,path,offsets,null,types,null);
    FSDataInputStream is=fs.open(path);
    long fileSize=fs.getFileStatus(path).getLen();
    HFileBlock.FSReader hbr=new HFileBlock.FSReaderV2(is,compressAlgo,fileSize);
    Executor exec=Executors.newFixedThreadPool(NUM_READER_THREADS);
    ExecutorCompletionService<Boolean> ecs=new ExecutorCompletionService<Boolean>(exec);
    for (int i=0; i < NUM_READER_THREADS; ++i) {
      ecs.submit(new BlockReaderThread("reader_" + (char)('A' + i),hbr,offsets,types,fileSize));
    }
    for (int i=0; i < NUM_READER_THREADS; ++i) {
      Future<Boolean> result=ecs.take();
      assertTrue(result.get());
      if (detailedLogging) {
        LOG.info(String.valueOf(i + 1) + " reader threads finished successfully (algo=" + compressAlgo+ ")");
      }
    }
    is.close();
  }
}
