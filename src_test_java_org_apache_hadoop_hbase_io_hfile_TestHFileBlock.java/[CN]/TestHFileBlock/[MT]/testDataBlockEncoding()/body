{
  final int numBlocks=5;
  for (  Compression.Algorithm algo : COMPRESSION_ALGORITHMS) {
    for (    boolean pread : new boolean[]{false,true}) {
      for (      DataBlockEncoding encoding : DataBlockEncoding.values()) {
        Path path=new Path(TEST_UTIL.getDataTestDir(),"blocks_v2_" + algo + "_"+ encoding.toString());
        FSDataOutputStream os=fs.create(path);
        HFileDataBlockEncoder dataBlockEncoder=new HFileDataBlockEncoderImpl(encoding);
        HFileBlock.Writer hbw=new HFileBlock.Writer(algo,dataBlockEncoder,includesMemstoreTS,HFile.DEFAULT_CHECKSUM_TYPE,HFile.DEFAULT_BYTES_PER_CHECKSUM);
        long totalSize=0;
        final List<Integer> encodedSizes=new ArrayList<Integer>();
        final List<ByteBuffer> encodedBlocks=new ArrayList<ByteBuffer>();
        for (int blockId=0; blockId < numBlocks; ++blockId) {
          DataOutputStream dos=hbw.startWriting(BlockType.DATA);
          writeEncodedBlock(encoding,dos,encodedSizes,encodedBlocks,blockId,includesMemstoreTS);
          hbw.writeHeaderAndData(os);
          totalSize+=hbw.getOnDiskSizeWithHeader();
        }
        os.close();
        FSDataInputStream is=fs.open(path);
        HFileBlock.FSReaderV2 hbr=new HFileBlock.FSReaderV2(is,algo,totalSize);
        hbr.setDataBlockEncoder(dataBlockEncoder);
        hbr.setIncludesMemstoreTS(includesMemstoreTS);
        HFileBlock b;
        int pos=0;
        for (int blockId=0; blockId < numBlocks; ++blockId) {
          b=hbr.readBlockData(pos,-1,-1,pread);
          assertEquals(0,HFile.getChecksumFailuresCount());
          b.sanityCheck();
          pos+=b.getOnDiskSizeWithHeader();
          assertEquals((int)encodedSizes.get(blockId),b.getUncompressedSizeWithoutHeader());
          ByteBuffer actualBuffer=b.getBufferWithoutHeader();
          if (encoding != DataBlockEncoding.NONE) {
            assertEquals(0,actualBuffer.get(0));
            assertEquals(encoding.getId(),actualBuffer.get(1));
            actualBuffer.position(2);
            actualBuffer=actualBuffer.slice();
          }
          ByteBuffer expectedBuffer=encodedBlocks.get(blockId);
          expectedBuffer.rewind();
          assertBuffersEqual(expectedBuffer,actualBuffer,algo,encoding,pread);
        }
        is.close();
      }
    }
  }
}
