{
  Random rand=new Random(clientId.hashCode());
  long endTime=System.currentTimeMillis() + 10000;
  int numBlocksRead=0;
  int numPositionalRead=0;
  int numWithOnDiskSize=0;
  while (System.currentTimeMillis() < endTime) {
    int blockId=rand.nextInt(NUM_TEST_BLOCKS);
    long offset=offsets.get(blockId);
    boolean pread=rand.nextBoolean();
    boolean withOnDiskSize=rand.nextBoolean();
    long expectedSize=(blockId == NUM_TEST_BLOCKS - 1 ? fileSize : offsets.get(blockId + 1)) - offset;
    HFileBlock b;
    try {
      long onDiskSizeArg=withOnDiskSize ? expectedSize : -1;
      b=hbr.readBlockData(offset,onDiskSizeArg,-1,pread);
    }
 catch (    IOException ex) {
      LOG.error("Error in client " + clientId + " trying to read block at "+ offset+ ", pread="+ pread+ ", withOnDiskSize="+ withOnDiskSize,ex);
      return false;
    }
    assertEquals(types.get(blockId),b.getBlockType());
    assertEquals(expectedSize,b.getOnDiskSizeWithHeader());
    assertEquals(offset,b.getOffset());
    ++numBlocksRead;
    if (pread)     ++numPositionalRead;
    if (withOnDiskSize)     ++numWithOnDiskSize;
  }
  LOG.info("Client " + clientId + " successfully read "+ numBlocksRead+ " blocks (with pread: "+ numPositionalRead+ ", with onDiskSize "+ "specified: "+ numWithOnDiskSize+ ")");
  return true;
}
