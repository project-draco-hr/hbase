{
  String[] keys1={"A","A","B","C","F","H"};
  String[] keys2={"A","B","D","G","I","J"};
  String[] keys3={"D","B","B","E"};
  memstore.getConfiguration().set("hbase.hregion.compacting.memstore.type","index-compaction");
  ((CompactingMemStore)memstore).initiateType();
  addRowsByKeys(memstore,keys1);
  ((CompactingMemStore)memstore).flushInMemory();
  while (((CompactingMemStore)memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  addRowsByKeys(memstore,keys2);
  int counter2=0;
  for (  Segment s : memstore.getSegments()) {
    counter2+=s.getCellsCount();
  }
  assertEquals(12,counter2);
  ((CompactingMemStore)memstore).disableCompaction();
  ((CompactingMemStore)memstore).flushInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  int counter3=0;
  for (  Segment s : memstore.getSegments()) {
    counter3+=s.getCellsCount();
  }
  assertEquals(12,counter3);
  addRowsByKeys(memstore,keys3);
  int counter4=0;
  for (  Segment s : memstore.getSegments()) {
    counter4+=s.getCellsCount();
  }
  assertEquals(16,counter4);
  ((CompactingMemStore)memstore).enableCompaction();
  ((CompactingMemStore)memstore).flushInMemory();
  while (((CompactingMemStore)memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  int counter=0;
  for (  Segment s : memstore.getSegments()) {
    counter+=s.getCellsCount();
  }
  assertEquals(16,counter);
  MemStoreSnapshot snapshot=memstore.snapshot();
  ImmutableSegment s=memstore.getSnapshot();
  memstore.clearSnapshot(snapshot.getId());
}
