{
  String family="Family";
  HTableDescriptor htd=new HTableDescriptor("TestMultipleColumnPrefixFilter");
  htd.addFamily(new HColumnDescriptor(family));
  HRegionInfo info=new HRegionInfo(htd.getName(),null,null,false);
  HRegion region=HRegion.createHRegion(info,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
  List<String> rows=generateRandomWords(100,"row");
  List<String> columns=generateRandomWords(10000,"column");
  long maxTimestamp=2;
  String valueString="ValueString";
  for (  String row : rows) {
    Put p=new Put(Bytes.toBytes(row));
    p.setWriteToWAL(false);
    for (    String column : columns) {
      for (long timestamp=1; timestamp <= maxTimestamp; timestamp++) {
        KeyValue kv=KeyValueTestUtil.create(row,family,column,timestamp,valueString);
        p.add(kv);
      }
    }
    region.put(p);
  }
  MultipleColumnPrefixFilter multiplePrefixFilter;
  Scan scan1=new Scan();
  scan1.setMaxVersions();
  byte[][] filter_prefix=new byte[1][];
  filter_prefix[0]=new byte[]{'p'};
  multiplePrefixFilter=new MultipleColumnPrefixFilter(filter_prefix);
  scan1.setFilter(multiplePrefixFilter);
  List<KeyValue> results1=new ArrayList<KeyValue>();
  InternalScanner scanner1=region.getScanner(scan1);
  while (scanner1.next(results1))   ;
  ColumnPrefixFilter singlePrefixFilter;
  Scan scan2=new Scan();
  scan2.setMaxVersions();
  singlePrefixFilter=new ColumnPrefixFilter(Bytes.toBytes("p"));
  scan2.setFilter(singlePrefixFilter);
  List<KeyValue> results2=new ArrayList<KeyValue>();
  InternalScanner scanner2=region.getScanner(scan1);
  while (scanner2.next(results2))   ;
  assertEquals(results1.size(),results2.size());
  HRegion.closeHRegion(region);
}
