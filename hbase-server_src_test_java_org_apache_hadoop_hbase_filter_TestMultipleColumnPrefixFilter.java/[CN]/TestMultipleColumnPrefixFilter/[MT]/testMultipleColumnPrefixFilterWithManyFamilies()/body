{
  String family1="Family1";
  String family2="Family2";
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("TestMultipleColumnPrefixFilter"));
  HColumnDescriptor hcd1=new HColumnDescriptor(family1);
  hcd1.setMaxVersions(3);
  htd.addFamily(hcd1);
  HColumnDescriptor hcd2=new HColumnDescriptor(family2);
  hcd2.setMaxVersions(3);
  htd.addFamily(hcd2);
  HRegionInfo info=new HRegionInfo(htd.getTableName(),null,null,false);
  HRegion region=HRegion.createHRegion(info,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
  List<String> rows=generateRandomWords(100,"row");
  List<String> columns=generateRandomWords(10000,"column");
  long maxTimestamp=3;
  List<KeyValue> kvList=new ArrayList<KeyValue>();
  Map<String,List<KeyValue>> prefixMap=new HashMap<String,List<KeyValue>>();
  prefixMap.put("p",new ArrayList<KeyValue>());
  prefixMap.put("q",new ArrayList<KeyValue>());
  prefixMap.put("s",new ArrayList<KeyValue>());
  String valueString="ValueString";
  for (  String row : rows) {
    Put p=new Put(Bytes.toBytes(row));
    p.setDurability(Durability.SKIP_WAL);
    for (    String column : columns) {
      for (long timestamp=1; timestamp <= maxTimestamp; timestamp++) {
        double rand=Math.random();
        KeyValue kv;
        if (rand < 0.5)         kv=KeyValueTestUtil.create(row,family1,column,timestamp,valueString);
 else         kv=KeyValueTestUtil.create(row,family2,column,timestamp,valueString);
        p.add(kv);
        kvList.add(kv);
        for (        String s : prefixMap.keySet()) {
          if (column.startsWith(s)) {
            prefixMap.get(s).add(kv);
          }
        }
      }
    }
    region.put(p);
  }
  MultipleColumnPrefixFilter filter;
  Scan scan=new Scan();
  scan.setMaxVersions();
  byte[][] filter_prefix=new byte[2][];
  filter_prefix[0]=new byte[]{'p'};
  filter_prefix[1]=new byte[]{'q'};
  filter=new MultipleColumnPrefixFilter(filter_prefix);
  scan.setFilter(filter);
  List<KeyValue> results=new ArrayList<KeyValue>();
  InternalScanner scanner=region.getScanner(scan);
  while (scanner.next(results))   ;
  assertEquals(prefixMap.get("p").size() + prefixMap.get("q").size(),results.size());
  HRegion.closeHRegion(region);
}
