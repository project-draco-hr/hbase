{
  try {
    HRegion region=getRegion(request.getRegion());
    MultiResponse.Builder builder=MultiResponse.newBuilder();
    if (request.hasAtomic() && request.getAtomic()) {
      List<Mutate> mutates=new ArrayList<Mutate>();
      for (      MultiAction actionUnion : request.getActionList()) {
        if (actionUnion.hasMutate()) {
          mutates.add(actionUnion.getMutate());
        }
 else {
          throw new DoNotRetryIOException("Unsupported atomic action type: " + actionUnion);
        }
      }
      mutateRows(region,mutates);
    }
 else {
      ActionResult.Builder resultBuilder=null;
      List<Mutate> puts=new ArrayList<Mutate>();
      for (      MultiAction actionUnion : request.getActionList()) {
        requestCount.incrementAndGet();
        try {
          Object result=null;
          if (actionUnion.hasGet()) {
            Get get=ProtobufUtil.toGet(actionUnion.getGet());
            Integer lock=getLockFromId(get.getLockId());
            Result r=region.get(get,lock);
            if (r != null) {
              result=ProtobufUtil.toResult(r);
            }
          }
 else           if (actionUnion.hasMutate()) {
            Mutate mutate=actionUnion.getMutate();
            MutateType type=mutate.getMutateType();
            if (type != MutateType.PUT) {
              if (!puts.isEmpty()) {
                put(builder,region,puts);
                puts.clear();
              }
 else               if (!region.getRegionInfo().isMetaTable()) {
                cacheFlusher.reclaimMemStoreMemory();
              }
            }
            Result r=null;
switch (type) {
case APPEND:
              r=append(region,mutate);
            break;
case INCREMENT:
          r=increment(region,mutate);
        break;
case PUT:
      puts.add(mutate);
    break;
case DELETE:
  Delete delete=ProtobufUtil.toDelete(mutate);
Integer lock=getLockFromId(delete.getLockId());
region.delete(delete,lock,delete.getWriteToWAL());
r=new Result();
break;
default :
throw new DoNotRetryIOException("Unsupported mutate type: " + type.name());
}
if (r != null) {
result=ProtobufUtil.toResult(r);
}
}
 else if (actionUnion.hasExec()) {
Exec call=ProtobufUtil.toExec(actionUnion.getExec());
result=region.exec(call).getValue();
}
 else {
LOG.warn("Error: invalid action: " + actionUnion + ". "+ "it must be a Get, Mutate, or Exec.");
throw new DoNotRetryIOException("Invalid action, " + "it must be a Get, Mutate, or Exec.");
}
if (result != null) {
if (resultBuilder == null) {
resultBuilder=ActionResult.newBuilder();
}
 else {
resultBuilder.clear();
}
NameBytesPair value=ProtobufUtil.toParameter(result);
resultBuilder.setValue(value);
builder.addResult(resultBuilder.build());
}
}
 catch (IOException ie) {
builder.addResult(ResponseConverter.buildActionResult(ie));
}
}
if (!puts.isEmpty()) {
put(builder,region,puts);
}
}
return builder.build();
}
 catch (IOException ie) {
throw new ServiceException(ie);
}
}
