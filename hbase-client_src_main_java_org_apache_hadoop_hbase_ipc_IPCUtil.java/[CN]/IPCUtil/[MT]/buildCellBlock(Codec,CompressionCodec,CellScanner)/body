{
  if (cellScanner == null)   return null;
  if (codec == null)   throw new CellScannerButNoCodecException();
  int bufferSize=this.cellBlockBuildingInitialBufferSize;
  if (cellScanner instanceof HeapSize) {
    long longSize=((HeapSize)cellScanner).heapSize();
    if (longSize > Integer.MAX_VALUE) {
      throw new IOException("Size " + longSize + " > "+ Integer.MAX_VALUE);
    }
    bufferSize=ClassSize.align((int)longSize);
  }
  ByteBufferOutputStream baos=new ByteBufferOutputStream(bufferSize);
  OutputStream os=baos;
  Compressor poolCompressor=null;
  try {
    if (compressor != null) {
      if (compressor instanceof Configurable)       ((Configurable)compressor).setConf(this.conf);
      poolCompressor=CodecPool.getCompressor(compressor);
      os=compressor.createOutputStream(os,poolCompressor);
    }
    Codec.Encoder encoder=codec.getEncoder(os);
    while (cellScanner.advance()) {
      encoder.write(cellScanner.current());
    }
    encoder.flush();
  }
  finally {
    os.close();
    if (poolCompressor != null)     CodecPool.returnCompressor(poolCompressor);
  }
  if (LOG.isTraceEnabled()) {
    if (bufferSize < baos.size()) {
      LOG.trace("Buffer grew from initial bufferSize=" + bufferSize + " to "+ baos.size()+ "; up hbase.ipc.cellblock.building.initial.buffersize?");
    }
  }
  return baos.getByteBuffer();
}
