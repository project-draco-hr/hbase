{
  TableName TABLE=TableName.valueOf("testMaxResultSizeIsSetToDefault");
  Table ht=TEST_UTIL.createTable(TABLE,FAMILY);
  long expectedMaxResultSize=TEST_UTIL.getConfiguration().getLong(HConstants.HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY,HConstants.DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE);
  int numRows=5;
  byte[][] ROWS=HTestConst.makeNAscii(ROW,numRows);
  int numQualifiers=10;
  byte[][] QUALIFIERS=HTestConst.makeNAscii(QUALIFIER,numQualifiers);
  int cellSize=(int)(expectedMaxResultSize / (numQualifiers - 1));
  byte[] cellValue=Bytes.createMaxByteArray(cellSize);
  Put put;
  List<Put> puts=new ArrayList<Put>();
  for (int row=0; row < ROWS.length; row++) {
    put=new Put(ROWS[row]);
    for (int qual=0; qual < QUALIFIERS.length; qual++) {
      KeyValue kv=new KeyValue(ROWS[row],FAMILY,QUALIFIERS[qual],cellValue);
      put.add(kv);
    }
    puts.add(put);
  }
  ht.put(puts);
  Scan scan=new Scan();
  ResultScanner scanner=ht.getScanner(scan);
  assertTrue(scanner instanceof ClientScanner);
  ClientScanner clientScanner=(ClientScanner)scanner;
  scanner.next();
  assertTrue("The cache contains: " + clientScanner.getCacheSize() + " results",clientScanner.getCacheSize() <= 1);
}
