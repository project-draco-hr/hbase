{
  byte[] TABLE=Bytes.toBytes("testGetMaxResults-" + prefetching + "_"+ maxSize);
  byte[][] FAMILIES=HTestConst.makeNAscii(FAMILY,3);
  byte[][] QUALIFIERS=HTestConst.makeNAscii(QUALIFIER,20);
  HTable ht=TEST_UTIL.createTable(TABLE,FAMILIES);
  Get get;
  Put put;
  Result result;
  boolean toLog=true;
  List<KeyValue> kvListExp;
  kvListExp=new ArrayList<KeyValue>();
  put=new Put(ROW);
  for (int i=0; i < 10; i++) {
    KeyValue kv=new KeyValue(ROW,FAMILIES[0],QUALIFIERS[i],1,VALUE);
    put.add(kv);
    kvListExp.add(kv);
  }
  ht.put(put);
  get=new Get(ROW);
  result=ht.get(get);
  verifyResult(result,kvListExp,toLog,"Testing without setting maxResults");
  get=new Get(ROW);
  get.setMaxResultsPerColumnFamily(2);
  result=ht.get(get);
  kvListExp=new ArrayList<KeyValue>();
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[0],1,VALUE));
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[1],1,VALUE));
  verifyResult(result,kvListExp,toLog,"Testing basic setMaxResults");
  get=new Get(ROW);
  get.setMaxResultsPerColumnFamily(5);
  get.setFilter(new ColumnRangeFilter(QUALIFIERS[2],true,QUALIFIERS[5],true));
  result=ht.get(get);
  kvListExp=new ArrayList<KeyValue>();
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[2],1,VALUE));
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[3],1,VALUE));
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[4],1,VALUE));
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[5],1,VALUE));
  verifyResult(result,kvListExp,toLog,"Testing single CF with CRF");
  put=new Put(ROW);
  for (int i=0; i < QUALIFIERS.length; i++) {
    KeyValue kv=new KeyValue(ROW,FAMILIES[2],QUALIFIERS[i],1,VALUE);
    put.add(kv);
  }
  ht.put(put);
  put=new Put(ROW);
  for (int i=0; i < 10; i++) {
    KeyValue kv=new KeyValue(ROW,FAMILIES[1],QUALIFIERS[i],1,VALUE);
    put.add(kv);
  }
  ht.put(put);
  get=new Get(ROW);
  get.setMaxResultsPerColumnFamily(12);
  get.addFamily(FAMILIES[1]);
  get.addFamily(FAMILIES[2]);
  result=ht.get(get);
  kvListExp=new ArrayList<KeyValue>();
  for (int i=0; i < 10; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[1],QUALIFIERS[i],1,VALUE));
  }
  for (int i=0; i < 2; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[2],QUALIFIERS[i],1,VALUE));
  }
  for (int i=10; i < 20; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[2],QUALIFIERS[i],1,VALUE));
  }
  verifyResult(result,kvListExp,toLog,"Testing multiple CFs");
  get=new Get(ROW);
  get.setMaxResultsPerColumnFamily(3);
  get.setFilter(new ColumnRangeFilter(QUALIFIERS[2],true,null,true));
  result=ht.get(get);
  kvListExp=new ArrayList<KeyValue>();
  for (int i=2; i < 5; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[i],1,VALUE));
  }
  for (int i=2; i < 5; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[1],QUALIFIERS[i],1,VALUE));
  }
  for (int i=2; i < 5; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[2],QUALIFIERS[i],1,VALUE));
  }
  verifyResult(result,kvListExp,toLog,"Testing multiple CFs + CRF");
  get=new Get(ROW);
  get.setMaxResultsPerColumnFamily(7);
  get.setFilter(new ColumnPrefixFilter(QUALIFIERS[1]));
  result=ht.get(get);
  kvListExp=new ArrayList<KeyValue>();
  kvListExp.add(new KeyValue(ROW,FAMILIES[0],QUALIFIERS[1],1,VALUE));
  kvListExp.add(new KeyValue(ROW,FAMILIES[1],QUALIFIERS[1],1,VALUE));
  kvListExp.add(new KeyValue(ROW,FAMILIES[2],QUALIFIERS[1],1,VALUE));
  for (int i=10; i < 16; i++) {
    kvListExp.add(new KeyValue(ROW,FAMILIES[2],QUALIFIERS[i],1,VALUE));
  }
  verifyResult(result,kvListExp,toLog,"Testing multiple CFs + PFF");
}
