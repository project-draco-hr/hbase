{
  Configuration conf=new Configuration(UTIL.getConfiguration());
  conf.setInt("zookeeper.recovery.retry",0);
  conf.setInt(HConstants.ZK_SESSION_TIMEOUT,100);
  conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT,conf.getInt(HConstants.ZOOKEEPER_CLIENT_PORT,2181) - 1);
  init(conf,200);
  byte[] dummyData=makeDummyData(300);
  HRegionIncommon loader=new HRegionIncommon(region);
  byte[] deleteRow=Bytes.toBytes(0);
  for (int i=0; i < compactionThreshold - 1; i++) {
    Put p=new Put(Bytes.toBytes(i));
    p.setDurability(Durability.SKIP_WAL);
    p.add(COLUMN_FAMILY,Bytes.toBytes("colX"),dummyData);
    loader.put(p);
    loader.flushcache();
  }
  Delete delete=new Delete(deleteRow);
  delete.deleteFamily(COLUMN_FAMILY);
  region.delete(delete);
  loader.flushcache();
  assertEquals("Before compaction: store files",compactionThreshold,countStoreFiles());
  region.compactStores(true);
  assertEquals("After compaction: store files",1,countStoreFiles());
  Scan scan=new Scan();
  scan.setRaw(true);
  InternalScanner scanner=region.getScanner(scan);
  List<Cell> results=new ArrayList<Cell>();
  scanner.next(results);
  int deleteCount=0;
  while (!results.isEmpty()) {
    for (    Cell c : results) {
      if (c.getTypeByte() == KeyValue.Type.DeleteFamily.getCode()) {
        deleteCount++;
        assertTrue(Bytes.equals(CellUtil.cloneRow(c),deleteRow));
      }
    }
    results.clear();
    scanner.next(results);
  }
  assertEquals(1,deleteCount);
  scanner.close();
}
