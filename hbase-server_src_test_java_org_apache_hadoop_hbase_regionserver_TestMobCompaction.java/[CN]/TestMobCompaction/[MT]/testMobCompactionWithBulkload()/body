{
  init(300);
  byte[] dummyData=makeDummyData(600);
  Path hbaseRootDir=FSUtils.getRootDir(conf);
  Path basedir=new Path(hbaseRootDir,htd.getNameAsString());
  List<Pair<byte[],String>> hfiles=new ArrayList<Pair<byte[],String>>(1);
  for (int i=0; i < compactionThreshold; i++) {
    Path hpath=new Path(basedir,"hfile" + i);
    hfiles.add(Pair.newPair(COLUMN_FAMILY,hpath.toString()));
    createHFile(hpath,i,dummyData);
  }
  boolean result=region.bulkLoadHFiles(hfiles,true);
  assertTrue("Bulkload result:",result);
  assertEquals("Before compaction: store files",compactionThreshold,countStoreFiles());
  assertEquals("Before compaction: mob file count",0,countMobFiles());
  assertEquals("Before compaction: rows",compactionThreshold,countRows());
  assertEquals("Before compaction: mob rows",0,countMobRows());
  assertEquals("Before compaction: referenced mob file count",0,countReferencedMobFiles());
  region.compactStores();
  assertEquals("After compaction: store files",1,countStoreFiles());
  assertEquals("After compaction: mob file count:",1,countMobFiles());
  assertEquals("After compaction: rows",compactionThreshold,countRows());
  assertEquals("After compaction: mob rows",compactionThreshold,countMobRows());
  assertEquals("After compaction: referenced mob file count",1,countReferencedMobFiles());
}
