{
  Configuration conf=HBaseConfiguration.create();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,600 * 1024);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushNonSloppyStoresFirstPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,200 * 1024);
  conf.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,0.5);
  conf.set("hbase.hregion.compacting.memstore.type","index-compaction");
  HRegion region=initHRegion("testSelectiveFlushAndWALinDataCompaction",conf);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  long totalMemstoreSize=region.getMemstoreSize();
  long cf1MemstoreSizePhaseI=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseI=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseI=region.getStore(FAMILY3).getMemStoreSize();
  assertTrue(cf1MemstoreSizePhaseI > 0);
  assertTrue(cf2MemstoreSizePhaseI > 0);
  assertTrue(cf3MemstoreSizePhaseI > 0);
  assertEquals(totalMemstoreSize + 1 * DefaultMemStore.DEEP_OVERHEAD + 2 * CompactingMemStore.DEEP_OVERHEAD + 3 * MutableSegment.DEEP_OVERHEAD,cf1MemstoreSizePhaseI + cf2MemstoreSizePhaseI + cf3MemstoreSizePhaseI);
  ((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).flushInMemory();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  region.flush(false);
  long cf2MemstoreSizePhaseII=region.getStore(FAMILY2).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseII=region.getWAL().getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF1PhaseII=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseII=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseII=region.getOldestSeqIdOfStore(FAMILY3);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD + MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseII);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  long smallestSeqInRegionCurrentMemstorePhaseIII=region.getWAL().getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF1PhaseIII=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseIII=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseIII=region.getOldestSeqIdOfStore(FAMILY3);
  ((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).flushInMemory();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  region.flush(false);
  long smallestSeqInRegionCurrentMemstorePhaseIV=region.getWAL().getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF1PhaseIV=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseIV=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseIV=region.getOldestSeqIdOfStore(FAMILY3);
  assertFalse(smallestSeqInRegionCurrentMemstorePhaseIV > smallestSeqInRegionCurrentMemstorePhaseIII);
  assertFalse(smallestSeqCF1PhaseIV > smallestSeqCF1PhaseIII);
  assertFalse(smallestSeqCF3PhaseIV > smallestSeqCF3PhaseIII);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
