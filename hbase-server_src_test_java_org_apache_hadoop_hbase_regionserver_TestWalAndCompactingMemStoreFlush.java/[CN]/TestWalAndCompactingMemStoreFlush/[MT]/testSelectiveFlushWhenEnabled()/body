{
  Configuration conf=HBaseConfiguration.create();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,600 * 1024);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushNonSloppyStoresFirstPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,300 * 1024);
  conf.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,0.5);
  Region region=initHRegion("testSelectiveFlushWhenEnabled",conf);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createDoublePut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  long totalMemstoreSize=region.getMemstoreSize();
  long smallestSeqCF1PhaseI=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseI=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseI=region.getOldestSeqIdOfStore(FAMILY3);
  long cf1MemstoreSizePhaseI=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseI=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseI=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseI=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  String s="\n\n----------------------------------\n" + "Upon initial insert and before any flush, size of CF1 is:" + cf1MemstoreSizePhaseI + ", is CF1 compacted memstore?:"+ region.getStore(FAMILY1).getMemStore().isSloppy()+ ". Size of CF2 is:"+ cf2MemstoreSizePhaseI+ ", is CF2 compacted memstore?:"+ region.getStore(FAMILY2).getMemStore().isSloppy()+ ". Size of CF3 is:"+ cf3MemstoreSizePhaseI+ ", is CF3 compacted memstore?:"+ region.getStore(FAMILY3).getMemStore().isSloppy()+ "\n";
  assertEquals(smallestSeqCF1PhaseI,smallestSeqInRegionCurrentMemstorePhaseI);
  assertTrue(smallestSeqCF1PhaseI < smallestSeqCF2PhaseI);
  assertTrue(smallestSeqCF2PhaseI < smallestSeqCF3PhaseI);
  assertTrue(cf1MemstoreSizePhaseI > 0);
  assertTrue(cf2MemstoreSizePhaseI > 0);
  assertTrue(cf3MemstoreSizePhaseI > 0);
  String msg="totalMemstoreSize=" + totalMemstoreSize + " DefaultMemStore.DEEP_OVERHEAD="+ DefaultMemStore.DEEP_OVERHEAD+ " DEEP_OVERHEAD_PER_PIPELINE_ITEM="+ CompactingMemStore.DEEP_OVERHEAD_PER_PIPELINE_ITEM+ " cf1MemstoreSizePhaseI="+ cf1MemstoreSizePhaseI+ " cf2MemstoreSizePhaseI="+ cf2MemstoreSizePhaseI+ " cf3MemstoreSizePhaseI="+ cf3MemstoreSizePhaseI;
  assertEquals(msg,totalMemstoreSize + 3 * DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSizePhaseI + cf2MemstoreSizePhaseI + cf3MemstoreSizePhaseI);
  ((CompactingMemStore)region.getStore(FAMILY1).getMemStore()).flushInMemory();
  ((CompactingMemStore)region.getStore(FAMILY3).getMemStore()).flushInMemory();
  region.flush(false);
  while (((CompactingMemStore)region.getStore(FAMILY3).getMemStore()).isMemStoreFlushingInMemory())   Threads.sleep(10);
  long cf1MemstoreSizePhaseII=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseII=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseII=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseII=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF1PhaseII=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseII=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseII=region.getOldestSeqIdOfStore(FAMILY3);
  s=s + "DefaultMemStore DEEP_OVERHEAD is:" + DefaultMemStore.DEEP_OVERHEAD+ ", CompactingMemStore DEEP_OVERHEAD is:"+ CompactingMemStore.DEEP_OVERHEAD+ ", CompactingMemStore DEEP_OVERHEAD_PER_PIPELINE_ITEM is:"+ CompactingMemStore.DEEP_OVERHEAD_PER_PIPELINE_ITEM+ "\n----After first flush! CF1 should be flushed to memory, but not compacted.---\n"+ "Size of CF1 is:"+ cf1MemstoreSizePhaseII+ ", size of CF2 is:"+ cf2MemstoreSizePhaseII+ ", size of CF3 is:"+ cf3MemstoreSizePhaseII+ "\n";
  assertEquals(s,cf1MemstoreSizePhaseII,cf1MemstoreSizePhaseI + CompactingMemStore.DEEP_OVERHEAD_PER_PIPELINE_ITEM);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf2MemstoreSizePhaseII);
  assertTrue(cf3MemstoreSizePhaseI / 2 + DefaultMemStore.DEEP_OVERHEAD + CompactingMemStore.DEEP_OVERHEAD_PER_PIPELINE_ITEM > cf3MemstoreSizePhaseII);
  assertTrue(cf3MemstoreSizePhaseI / 2 < cf3MemstoreSizePhaseII);
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseII,smallestSeqCF1PhaseI);
  for (int i=1200; i < 2000; i++) {
    region.put(createPut(1,i));
  }
  s=s + "The smallest sequence in region WAL is: " + smallestSeqInRegionCurrentMemstorePhaseII+ ", the smallest sequence in CF1:"+ smallestSeqCF1PhaseII+ ", "+ "the smallest sequence in CF2:"+ smallestSeqCF2PhaseII+ ", the smallest sequence in CF3:"+ smallestSeqCF3PhaseII+ "\n";
  long cf1MemstoreSizePhaseIII=region.getStore(FAMILY1).getMemStoreSize();
  long smallestSeqCF1PhaseIII=region.getOldestSeqIdOfStore(FAMILY1);
  s=s + "----After more puts into CF1 its size is:" + cf1MemstoreSizePhaseIII+ ", and its sequence is:"+ smallestSeqCF1PhaseIII+ " ----\n";
  region.flush(false);
  long cf1MemstoreSizePhaseIV=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseIV=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseIV=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseIV=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF1PhaseIV=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseIV=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseIV=region.getOldestSeqIdOfStore(FAMILY3);
  s=s + "----After SECOND FLUSH, CF1 size is:" + cf1MemstoreSizePhaseIV+ ", CF2 size is:"+ cf2MemstoreSizePhaseIV+ " and CF3 size is:"+ cf3MemstoreSizePhaseIV+ "\n";
  s=s + "The smallest sequence in region WAL is: " + smallestSeqInRegionCurrentMemstorePhaseIV+ ", the smallest sequence in CF1:"+ smallestSeqCF1PhaseIV+ ", "+ "the smallest sequence in CF2:"+ smallestSeqCF2PhaseIV+ ", the smallest sequence in CF3:"+ smallestSeqCF3PhaseIV+ "\n";
  assertEquals(cf1MemstoreSizePhaseIII - cf1MemstoreSizePhaseI + DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSizePhaseIV);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf2MemstoreSizePhaseIV);
  assertEquals(cf3MemstoreSizePhaseIV,cf3MemstoreSizePhaseII);
  assertEquals(smallestSeqCF3PhaseII,smallestSeqCF3PhaseIV);
  assertEquals(s,smallestSeqInRegionCurrentMemstorePhaseIV,smallestSeqCF3PhaseIV);
  region.flush(true);
  long cf1MemstoreSizePhaseV=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseV=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseV=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseV=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSizePhaseV);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf2MemstoreSizePhaseV);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf3MemstoreSizePhaseV);
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseV,HConstants.NO_SEQNUM);
  for (int i=1; i <= 300; i++) {
    region.put(createPut(1,i));
    region.put(createPut(2,i));
    region.put(createPut(3,i));
    region.put(createPut(4,i));
    region.put(createPut(5,i));
  }
  region.flush(false);
  s=s + "----AFTER THIRD AND FORTH FLUSH, The smallest sequence in region WAL is: " + smallestSeqInRegionCurrentMemstorePhaseV+ ". After additional inserts and last flush, the entire region size is:"+ region.getMemstoreSize()+ "\n----------------------------------\n";
  assertEquals(0,region.getMemstoreSize());
  System.out.println(s);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
