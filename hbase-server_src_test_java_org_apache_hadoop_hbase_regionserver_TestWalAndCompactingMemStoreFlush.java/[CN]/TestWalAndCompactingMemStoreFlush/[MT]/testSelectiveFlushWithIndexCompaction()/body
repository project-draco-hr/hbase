{
  Configuration conf=HBaseConfiguration.create();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,600 * 1024);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushNonSloppyStoresFirstPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,200 * 1024);
  conf.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,0.5);
  conf.set("hbase.hregion.compacting.memstore.type","index-compaction");
  Region region=initHRegion("testSelectiveFlushWithIndexCompaction",conf);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createDoublePut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  long totalMemstoreSizePhaseI=region.getMemstoreSize();
  long smallestSeqCF1PhaseI=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseI=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseI=region.getOldestSeqIdOfStore(FAMILY3);
  long cf1MemstoreSizePhaseI=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseI=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseI=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseI=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(smallestSeqCF1PhaseI,smallestSeqInRegionCurrentMemstorePhaseI);
  assertTrue(smallestSeqCF1PhaseI < smallestSeqCF2PhaseI);
  assertTrue(smallestSeqCF2PhaseI < smallestSeqCF3PhaseI);
  assertTrue(cf1MemstoreSizePhaseI > 0);
  assertTrue(cf2MemstoreSizePhaseI > 0);
  assertTrue(cf3MemstoreSizePhaseI > 0);
  assertEquals(totalMemstoreSizePhaseI + 1 * DefaultMemStore.DEEP_OVERHEAD + 2 * CompactingMemStore.DEEP_OVERHEAD + 3 * MutableSegment.DEEP_OVERHEAD,cf1MemstoreSizePhaseI + cf2MemstoreSizePhaseI + cf3MemstoreSizePhaseI);
  region.flush(false);
  CompactingMemStore cms1=(CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore;
  CompactingMemStore cms3=(CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore;
  cms1.flushInMemory();
  cms3.flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  long cf1MemstoreSizePhaseII=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseII=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseII=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseII=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF3PhaseII=region.getOldestSeqIdOfStore(FAMILY3);
  long totalMemstoreSizePhaseII=region.getMemstoreSize();
  assertTrue(cf1MemstoreSizePhaseII < cf1MemstoreSizePhaseI);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD + MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseII);
  assertTrue(cf3MemstoreSizePhaseI / 2 < cf3MemstoreSizePhaseII);
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseII,smallestSeqCF1PhaseI);
  assertEquals(totalMemstoreSizePhaseII + 1 * DefaultMemStore.DEEP_OVERHEAD + 2 * CompactingMemStore.DEEP_OVERHEAD + 3 * MutableSegment.DEEP_OVERHEAD + 2 * CompactionPipeline.ENTRY_OVERHEAD + 2 * ImmutableSegment.DEEP_OVERHEAD_CAM,cf1MemstoreSizePhaseII + cf2MemstoreSizePhaseII + cf3MemstoreSizePhaseII);
  for (int i=1200; i < 8000; i++) {
    region.put(createPut(1,i));
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  long cf1MemstoreSizePhaseIII=region.getStore(FAMILY1).getMemStoreSize();
  long totalMemstoreSizePhaseIII=region.getMemstoreSize();
  assertEquals(totalMemstoreSizePhaseIII + 1 * DefaultMemStore.DEEP_OVERHEAD + 2 * CompactingMemStore.DEEP_OVERHEAD + 3 * MutableSegment.DEEP_OVERHEAD + 2 * CompactionPipeline.ENTRY_OVERHEAD + 2 * ImmutableSegment.DEEP_OVERHEAD_CAM,cf1MemstoreSizePhaseIII + cf2MemstoreSizePhaseII + cf3MemstoreSizePhaseII);
  region.flush(false);
  long cf1MemstoreSizePhaseIV=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseIV=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseIV=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseIV=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF3PhaseIV=region.getOldestSeqIdOfStore(FAMILY3);
  assertTrue(cf1MemstoreSizePhaseIII > cf1MemstoreSizePhaseIV);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD + MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseIV);
  assertEquals(cf3MemstoreSizePhaseIV,cf3MemstoreSizePhaseII);
  assertEquals(smallestSeqCF3PhaseII,smallestSeqCF3PhaseIV);
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseIV,smallestSeqCF3PhaseIV);
  region.flush(true);
  long cf1MemstoreSizePhaseV=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSizePhaseV=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSizePhaseV=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseV=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long totalMemstoreSizePhaseV=region.getMemstoreSize();
  assertEquals(CompactingMemStore.DEEP_OVERHEAD + MutableSegment.DEEP_OVERHEAD,cf1MemstoreSizePhaseV);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD + MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseV);
  assertEquals(CompactingMemStore.DEEP_OVERHEAD + MutableSegment.DEEP_OVERHEAD,cf3MemstoreSizePhaseV);
  assertEquals(totalMemstoreSizePhaseV,0);
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseV,HConstants.NO_SEQNUM);
  for (int i=1; i <= 300; i++) {
    region.put(createPut(1,i));
    region.put(createPut(2,i));
    region.put(createPut(3,i));
    region.put(createPut(4,i));
    region.put(createPut(5,i));
  }
  long cf1ActiveSizePhaseVI=region.getStore(FAMILY1).getMemStoreSize();
  long cf3ActiveSizePhaseVI=region.getStore(FAMILY3).getMemStoreSize();
  long cf5ActiveSizePhaseVI=region.getStore(FAMILIES[4]).getMemStoreSize();
  region.flush(false);
  long cf1ActiveSizePhaseVII=region.getStore(FAMILY1).getMemStoreSize();
  long cf3ActiveSizePhaseVII=region.getStore(FAMILY3).getMemStoreSize();
  long cf5ActiveSizePhaseVII=region.getStore(FAMILIES[4]).getMemStoreSize();
  assertTrue(cf1ActiveSizePhaseVII < cf1ActiveSizePhaseVI);
  assertTrue(cf3ActiveSizePhaseVII < cf3ActiveSizePhaseVI);
  assertTrue(cf5ActiveSizePhaseVII < cf5ActiveSizePhaseVI);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
