{
  final int NUM_MASTERS=3;
  final int NUM_RS=3;
  Configuration conf=HBaseConfiguration.create();
  HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility(conf);
  TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  List<MasterThread> masterThreads=cluster.getMasterThreads();
  for (  MasterThread mt : masterThreads) {
    assertTrue(mt.isAlive());
  }
  int numActive=0;
  int activeIndex=-1;
  ServerName activeName=null;
  HMaster active=null;
  for (int i=0; i < masterThreads.size(); i++) {
    if (masterThreads.get(i).getMaster().isActiveMaster()) {
      numActive++;
      activeIndex=i;
      active=masterThreads.get(activeIndex).getMaster();
      activeName=active.getServerName();
    }
  }
  assertEquals(1,numActive);
  assertEquals(NUM_MASTERS,masterThreads.size());
  assertNotNull(active);
  ClusterStatus status=active.getClusterStatus();
  assertTrue(status.getMaster().equals(activeName));
  assertEquals(2,status.getBackupMastersSize());
  assertEquals(2,status.getBackupMasters().size());
  LOG.debug("\n\nStopping a backup master\n");
  int backupIndex=(activeIndex == 0 ? 1 : activeIndex - 1);
  cluster.stopMaster(backupIndex,false);
  cluster.waitOnMaster(backupIndex);
  for (int i=0; i < masterThreads.size(); i++) {
    if (masterThreads.get(i).getMaster().isActiveMaster()) {
      assertTrue(activeName.equals(masterThreads.get(i).getMaster().getServerName()));
      activeIndex=i;
      active=masterThreads.get(activeIndex).getMaster();
    }
  }
  assertEquals(1,numActive);
  assertEquals(2,masterThreads.size());
  int rsCount=masterThreads.get(activeIndex).getMaster().getClusterStatus().getServersSize();
  LOG.info("Active master managing " + rsCount + " regions servers");
  assertEquals(3,rsCount);
  assertNotNull(active);
  status=active.getClusterStatus();
  assertTrue(status.getMaster().equals(activeName));
  assertEquals(1,status.getBackupMastersSize());
  assertEquals(1,status.getBackupMasters().size());
  LOG.debug("\n\nStopping the active master\n");
  cluster.stopMaster(activeIndex,false);
  cluster.waitOnMaster(activeIndex);
  assertTrue(cluster.waitForActiveAndReadyMaster());
  LOG.debug("\n\nVerifying backup master is now active\n");
  assertEquals(1,masterThreads.size());
  active=masterThreads.get(0).getMaster();
  assertNotNull(active);
  status=active.getClusterStatus();
  ServerName mastername=status.getMaster();
  assertTrue(mastername.equals(active.getServerName()));
  assertTrue(active.isActiveMaster());
  assertEquals(0,status.getBackupMastersSize());
  assertEquals(0,status.getBackupMasters().size());
  int rss=status.getServersSize();
  LOG.info("Active master " + mastername.getHostname() + " managing "+ rss+ " region servers");
  assertEquals(3,rss);
  TEST_UTIL.shutdownMiniCluster();
}
