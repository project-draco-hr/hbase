{
  final int NUM_MASTERS=1;
  final int NUM_RS=2;
  Configuration conf=HBaseConfiguration.create();
  conf.setInt("hbase.master.assignment.timeoutmonitor.period",2000);
  conf.setInt("hbase.master.assignment.timeoutmonitor.timeout",8000);
  HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility(conf);
  TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  List<MasterThread> masterThreads=cluster.getMasterThreads();
  for (  MasterThread mt : masterThreads) {
    assertTrue(mt.isAlive());
  }
  int numActive=0;
  ServerName activeName=null;
  for (int i=0; i < masterThreads.size(); i++) {
    if (masterThreads.get(i).getMaster().isActiveMaster()) {
      numActive++;
      activeName=masterThreads.get(i).getMaster().getServerName();
    }
  }
  assertEquals(1,numActive);
  assertEquals(NUM_MASTERS,masterThreads.size());
  for (int i=0; i < masterThreads.size(); i++) {
    if (masterThreads.get(i).getMaster().isActiveMaster()) {
      assertTrue(activeName.equals(masterThreads.get(i).getMaster().getServerName()));
    }
  }
  assertEquals(1,numActive);
  assertEquals(1,masterThreads.size());
  List<RegionServerThread> regionServerThreads=cluster.getRegionServerThreads();
  int count=-1;
  HRegion metaRegion=null;
  for (  RegionServerThread regionServerThread : regionServerThreads) {
    HRegionServer regionServer=regionServerThread.getRegionServer();
    metaRegion=regionServer.getOnlineRegion(HRegionInfo.FIRST_META_REGIONINFO.getRegionName());
    count++;
    regionServer.abort("");
    if (null != metaRegion) {
      break;
    }
  }
  HRegionServer regionServer=cluster.getRegionServer(count);
  cluster.shutdown();
  ZooKeeperWatcher zkw=HBaseTestingUtility.createAndForceNodeToOpenedState(TEST_UTIL,metaRegion,regionServer);
  TEST_UTIL.startMiniHBaseCluster(1,1);
  log("Waiting for no more RIT");
  ZKAssign.blockUntilNoRIT(zkw);
  TEST_UTIL.shutdownMiniCluster();
}
