{
  TraceScope tableCreationSpan=Trace.startSpan("creating table",Sampler.ALWAYS);
  Table table;
  try {
    table=TEST_UTIL.createTable(TableName.valueOf("table"),FAMILY_BYTES);
  }
  finally {
    tableCreationSpan.close();
  }
  TEST_UTIL.waitFor(1000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return rcvr.getSpans().size() >= 5;
    }
  }
);
  Collection<Span> spans=rcvr.getSpans();
  TraceTree traceTree=new TraceTree(spans);
  Collection<Span> roots=traceTree.getSpansByParent().find(ROOT_SPAN_ID);
  assertEquals(1,roots.size());
  Span createTableRoot=roots.iterator().next();
  assertEquals("creating table",createTableRoot.getDescription());
  int createTableCount=0;
  for (  Span s : traceTree.getSpansByParent().find(createTableRoot.getSpanId())) {
    if (s.getDescription().startsWith("MasterService.CreateTable")) {
      createTableCount++;
    }
  }
  assertTrue(createTableCount >= 1);
  assertTrue(traceTree.getSpansByParent().find(createTableRoot.getSpanId()).size() > 3);
  assertTrue(spans.size() > 5);
  Put put=new Put("row".getBytes());
  put.addColumn(FAMILY_BYTES,"col".getBytes(),"value".getBytes());
  TraceScope putSpan=Trace.startSpan("doing put",Sampler.ALWAYS);
  try {
    table.put(put);
  }
  finally {
    putSpan.close();
  }
  spans=rcvr.getSpans();
  traceTree=new TraceTree(spans);
  roots=traceTree.getSpansByParent().find(ROOT_SPAN_ID);
  assertEquals(2,roots.size());
  Span putRoot=null;
  for (  Span root : roots) {
    if (root.getDescription().equals("doing put")) {
      putRoot=root;
    }
  }
  assertNotNull(putRoot);
}
