{
  LOG.info("testReseeksWithMultipleFiles");
  TableName TABLE=TableName.valueOf("testReseeksWithMultipleFiles");
  byte[] FAMILY=Bytes.toBytes("event_log");
  byte[][] FAMILIES=new byte[][]{FAMILY};
  HTable ht=TEST_UTIL.createTable(TABLE,FAMILIES,Integer.MAX_VALUE);
  Integer[] putRows1=new Integer[]{1,2,3};
  Integer[] putColumns1=new Integer[]{2,5,6};
  Long[] putTimestamps1=new Long[]{1L,2L,5L};
  Integer[] putRows2=new Integer[]{6,7};
  Integer[] putColumns2=new Integer[]{3,6};
  Long[] putTimestamps2=new Long[]{4L,5L};
  Integer[] putRows3=new Integer[]{2,3,5};
  Integer[] putColumns3=new Integer[]{1,2,3};
  Long[] putTimestamps3=new Long[]{4L,8L};
  Integer[] scanRows=new Integer[]{3,5,7};
  Integer[] scanColumns=new Integer[]{3,4,5};
  Long[] scanTimestamps=new Long[]{2l,4L};
  int scanMaxVersions=5;
  put(ht,FAMILY,putRows1,putColumns1,putTimestamps1);
  TEST_UTIL.flush(TABLE);
  put(ht,FAMILY,putRows2,putColumns2,putTimestamps2);
  TEST_UTIL.flush(TABLE);
  put(ht,FAMILY,putRows3,putColumns3,putTimestamps3);
  ResultScanner scanner=scan(ht,FAMILY,scanRows,scanColumns,scanTimestamps,scanMaxVersions);
  KeyValue[] kvs;
  kvs=scanner.next().raw();
  assertEquals(2,kvs.length);
  checkOneCell(kvs[0],FAMILY,3,3,4);
  checkOneCell(kvs[1],FAMILY,3,5,2);
  kvs=scanner.next().raw();
  assertEquals(1,kvs.length);
  checkOneCell(kvs[0],FAMILY,5,3,4);
  kvs=scanner.next().raw();
  assertEquals(1,kvs.length);
  checkOneCell(kvs[0],FAMILY,6,3,4);
  kvs=scanner.next().raw();
  assertEquals(1,kvs.length);
  checkOneCell(kvs[0],FAMILY,7,3,4);
  ht.close();
}
