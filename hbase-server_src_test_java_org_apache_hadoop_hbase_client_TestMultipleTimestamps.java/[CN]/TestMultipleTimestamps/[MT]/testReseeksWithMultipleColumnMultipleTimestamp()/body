{
  LOG.info("testReseeksWithMultipleColumnMultipleTimestamp");
  TableName TABLE=TableName.valueOf("testReseeksWithMultipleColumnMiltipleTimestamps");
  byte[] FAMILY=Bytes.toBytes("event_log");
  byte[][] FAMILIES=new byte[][]{FAMILY};
  Table ht=TEST_UTIL.createTable(TABLE,FAMILIES,Integer.MAX_VALUE);
  Integer[] putRows=new Integer[]{1,3,5,7};
  Integer[] putColumns=new Integer[]{1,3,5};
  Long[] putTimestamps=new Long[]{1L,2L,3L,4L,5L};
  Integer[] scanRows=new Integer[]{5,7};
  Integer[] scanColumns=new Integer[]{3,4,5};
  Long[] scanTimestamps=new Long[]{2l,3L};
  int scanMaxVersions=2;
  put(ht,FAMILY,putRows,putColumns,putTimestamps);
  TEST_UTIL.flush(TABLE);
  Scan scan=new Scan();
  scan.setMaxVersions(10);
  ResultScanner scanner=ht.getScanner(scan);
  while (true) {
    Result r=scanner.next();
    if (r == null)     break;
    LOG.info("r=" + r);
  }
  scanner=scan(ht,FAMILY,scanRows,scanColumns,scanTimestamps,scanMaxVersions);
  Cell[] kvs;
  kvs=scanner.next().rawCells();
  assertEquals(4,kvs.length);
  checkOneCell(kvs[0],FAMILY,5,3,3);
  checkOneCell(kvs[1],FAMILY,5,3,2);
  checkOneCell(kvs[2],FAMILY,5,5,3);
  checkOneCell(kvs[3],FAMILY,5,5,2);
  kvs=scanner.next().rawCells();
  assertEquals(4,kvs.length);
  checkOneCell(kvs[0],FAMILY,7,3,3);
  checkOneCell(kvs[1],FAMILY,7,3,2);
  checkOneCell(kvs[2],FAMILY,7,5,3);
  checkOneCell(kvs[3],FAMILY,7,5,2);
  ht.close();
}
