{
  if (outputStream == null) {
    return;
  }
  finishBlock();
  writeInlineBlocks(true);
  FixedFileTrailer trailer=new FixedFileTrailer(2);
  if (!metaNames.isEmpty()) {
    for (int i=0; i < metaNames.size(); ++i) {
      long offset=outputStream.getPos();
      DataOutputStream dos=fsBlockWriter.startWriting(BlockType.META,cacheConf.shouldCacheDataOnWrite());
      metaData.get(i).write(dos);
      fsBlockWriter.writeHeaderAndData(outputStream);
      totalUncompressedBytes+=fsBlockWriter.getUncompressedSizeWithHeader();
      metaBlockIndexWriter.addEntry(metaNames.get(i),offset,fsBlockWriter.getOnDiskSizeWithHeader());
    }
  }
  long rootIndexOffset=dataBlockIndexWriter.writeIndexBlocks(outputStream);
  trailer.setLoadOnOpenOffset(rootIndexOffset);
  metaBlockIndexWriter.writeSingleLevelIndex(fsBlockWriter.startWriting(BlockType.ROOT_INDEX,false),"meta");
  fsBlockWriter.writeHeaderAndData(outputStream);
  totalUncompressedBytes+=fsBlockWriter.getUncompressedSizeWithHeader();
  if (this.includeMemstoreTS) {
    appendFileInfo(MAX_MEMSTORE_TS_KEY,Bytes.toBytes(maxMemstoreTS));
    appendFileInfo(KEY_VALUE_VERSION,Bytes.toBytes(KEY_VALUE_VER_WITH_MEMSTORE));
  }
  writeFileInfo(trailer,fsBlockWriter.startWriting(BlockType.FILE_INFO,false));
  fsBlockWriter.writeHeaderAndData(outputStream);
  totalUncompressedBytes+=fsBlockWriter.getUncompressedSizeWithHeader();
  for (  BlockWritable w : additionalLoadOnOpenData) {
    fsBlockWriter.writeBlock(w,outputStream);
    totalUncompressedBytes+=fsBlockWriter.getUncompressedSizeWithHeader();
  }
  trailer.setNumDataIndexLevels(dataBlockIndexWriter.getNumLevels());
  trailer.setUncompressedDataIndexSize(dataBlockIndexWriter.getTotalUncompressedSize());
  trailer.setFirstDataBlockOffset(firstDataBlockOffset);
  trailer.setLastDataBlockOffset(lastDataBlockOffset);
  trailer.setComparatorClass(comparator.getClass());
  trailer.setDataIndexCount(dataBlockIndexWriter.getNumRootEntries());
  finishClose(trailer);
  fsBlockWriter.releaseCompressor();
}
