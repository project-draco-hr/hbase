{
  ManualEnvironmentEdge timeMachine=new ManualEnvironmentEdge();
  EnvironmentEdgeManager.injectEdge(timeMachine);
  timeMachine.setValue(now);
  DateTieredCompactionRequest request;
  DateTieredCompactionPolicy policy=(DateTieredCompactionPolicy)store.storeEngine.getCompactionPolicy();
  if (isMajor) {
    for (    StoreFile file : candidates) {
      ((MockStoreFile)file).setIsMajor(true);
    }
    assertEquals(toCompact,policy.shouldPerformMajorCompaction(candidates));
    request=(DateTieredCompactionRequest)policy.selectMajorCompaction(candidates);
  }
 else {
    assertEquals(toCompact,policy.needsCompaction(candidates,ImmutableList.<StoreFile>of()));
    request=(DateTieredCompactionRequest)policy.selectMinorCompaction(candidates,false,false);
  }
  List<StoreFile> actual=Lists.newArrayList(request.getFiles());
  assertEquals(Arrays.toString(expectedFileSizes),Arrays.toString(getSizes(actual)));
  assertEquals(Arrays.toString(expectedBoundaries),Arrays.toString(request.getBoundaries().toArray()));
}
