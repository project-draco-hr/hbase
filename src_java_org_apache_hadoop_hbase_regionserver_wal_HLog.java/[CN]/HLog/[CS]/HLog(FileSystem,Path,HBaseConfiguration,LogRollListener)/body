{
  super();
  this.fs=fs;
  this.dir=dir;
  this.conf=conf;
  this.listener=listener;
  this.flushlogentries=conf.getInt("hbase.regionserver.flushlogentries",100);
  this.blocksize=conf.getLong("hbase.regionserver.hlog.blocksize",this.fs.getDefaultBlockSize());
  this.replicationLevel=(short)conf.getInt("hbase.regionserver.hlog.replication",this.fs.getDefaultReplication());
  float multi=conf.getFloat("hbase.regionserver.logroll.multiplier",0.95f);
  this.logrollsize=(long)(this.blocksize * multi);
  this.optionalFlushInterval=conf.getLong("hbase.regionserver.optionallogflushinterval",10 * 1000);
  if (fs.exists(dir)) {
    throw new IOException("Target HLog directory already exists: " + dir);
  }
  fs.mkdirs(dir);
  this.maxLogs=conf.getInt("hbase.regionserver.maxlogs",32);
  this.enabled=conf.getBoolean("hbase.regionserver.hlog.enabled",true);
  LOG.info("HLog configuration: blocksize=" + this.blocksize + ", rollsize="+ this.logrollsize+ ", enabled="+ this.enabled+ ", flushlogentries="+ this.flushlogentries+ ", optionallogflushinternal="+ this.optionalFlushInterval+ "ms");
  rollWriter();
  logSyncerThread=new LogSyncer(this.flushlogentries);
  Threads.setDaemonThreadRunning(logSyncerThread,Thread.currentThread().getName() + ".logSyncer");
}
