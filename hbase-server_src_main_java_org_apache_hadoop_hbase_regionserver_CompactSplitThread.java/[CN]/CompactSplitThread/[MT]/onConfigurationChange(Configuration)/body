{
  int largeThreads=Math.max(1,newConf.getInt(LARGE_COMPACTION_THREADS,LARGE_COMPACTION_THREADS_DEFAULT));
  if (this.longCompactions.getCorePoolSize() != largeThreads) {
    LOG.info("Changing the value of " + LARGE_COMPACTION_THREADS + " from "+ this.longCompactions.getCorePoolSize()+ " to "+ largeThreads);
    if (this.longCompactions.getCorePoolSize() < largeThreads) {
      this.longCompactions.setMaximumPoolSize(largeThreads);
      this.longCompactions.setCorePoolSize(largeThreads);
    }
 else {
      this.longCompactions.setCorePoolSize(largeThreads);
      this.longCompactions.setMaximumPoolSize(largeThreads);
    }
  }
  int smallThreads=newConf.getInt(SMALL_COMPACTION_THREADS,SMALL_COMPACTION_THREADS_DEFAULT);
  if (this.shortCompactions.getCorePoolSize() != smallThreads) {
    LOG.info("Changing the value of " + SMALL_COMPACTION_THREADS + " from "+ this.shortCompactions.getCorePoolSize()+ " to "+ smallThreads);
    if (this.shortCompactions.getCorePoolSize() < smallThreads) {
      this.shortCompactions.setMaximumPoolSize(smallThreads);
      this.shortCompactions.setCorePoolSize(smallThreads);
    }
 else {
      this.shortCompactions.setCorePoolSize(smallThreads);
      this.shortCompactions.setMaximumPoolSize(smallThreads);
    }
  }
  int splitThreads=newConf.getInt(SPLIT_THREADS,SPLIT_THREADS_DEFAULT);
  if (this.splits.getCorePoolSize() != splitThreads) {
    LOG.info("Changing the value of " + SPLIT_THREADS + " from "+ this.splits.getCorePoolSize()+ " to "+ splitThreads);
    if (this.splits.getCorePoolSize() < splitThreads) {
      this.splits.setMaximumPoolSize(splitThreads);
      this.splits.setCorePoolSize(splitThreads);
    }
 else {
      this.splits.setCorePoolSize(splitThreads);
      this.splits.setMaximumPoolSize(splitThreads);
    }
  }
  int mergeThreads=newConf.getInt(MERGE_THREADS,MERGE_THREADS_DEFAULT);
  if (this.mergePool.getCorePoolSize() != mergeThreads) {
    LOG.info("Changing the value of " + MERGE_THREADS + " from "+ this.mergePool.getCorePoolSize()+ " to "+ mergeThreads);
    if (this.mergePool.getCorePoolSize() < mergeThreads) {
      this.mergePool.setMaximumPoolSize(mergeThreads);
      this.mergePool.setCorePoolSize(mergeThreads);
    }
 else {
      this.mergePool.setCorePoolSize(mergeThreads);
      this.mergePool.setMaximumPoolSize(mergeThreads);
    }
  }
  CompactionThroughputController old=this.compactionThroughputController;
  if (old != null) {
    old.stop("configuration change");
  }
  this.compactionThroughputController=CompactionThroughputControllerFactory.create(server,newConf);
  this.conf.reloadConfiguration();
}
