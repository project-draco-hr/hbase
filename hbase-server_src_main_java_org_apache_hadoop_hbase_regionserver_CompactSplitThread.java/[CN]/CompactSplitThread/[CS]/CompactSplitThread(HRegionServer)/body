{
  super();
  this.server=server;
  this.conf=server.getConfiguration();
  this.regionSplitLimit=conf.getInt("hbase.regionserver.regionSplitLimit",Integer.MAX_VALUE);
  int largeThreads=Math.max(1,conf.getInt("hbase.regionserver.thread.compaction.large",1));
  int smallThreads=conf.getInt("hbase.regionserver.thread.compaction.small",1);
  int splitThreads=conf.getInt("hbase.regionserver.thread.split",1);
  Preconditions.checkArgument(largeThreads > 0 && smallThreads > 0);
  final String n=Thread.currentThread().getName();
  this.longCompactions=new ThreadPoolExecutor(largeThreads,largeThreads,60,TimeUnit.SECONDS,new PriorityBlockingQueue<Runnable>(),new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setName(n + "-longCompactions-" + System.currentTimeMillis());
      return t;
    }
  }
);
  this.longCompactions.setRejectedExecutionHandler(new Rejection());
  this.shortCompactions=new ThreadPoolExecutor(smallThreads,smallThreads,60,TimeUnit.SECONDS,new PriorityBlockingQueue<Runnable>(),new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setName(n + "-shortCompactions-" + System.currentTimeMillis());
      return t;
    }
  }
);
  this.shortCompactions.setRejectedExecutionHandler(new Rejection());
  this.splits=(ThreadPoolExecutor)Executors.newFixedThreadPool(splitThreads,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setName(n + "-splits-" + System.currentTimeMillis());
      return t;
    }
  }
);
  int mergeThreads=conf.getInt("hbase.regionserver.thread.merge",1);
  this.mergePool=(ThreadPoolExecutor)Executors.newFixedThreadPool(mergeThreads,new ThreadFactory(){
    @Override public Thread newThread(    Runnable r){
      Thread t=new Thread(r);
      t.setName(n + "-merges-" + System.currentTimeMillis());
      return t;
    }
  }
);
}
