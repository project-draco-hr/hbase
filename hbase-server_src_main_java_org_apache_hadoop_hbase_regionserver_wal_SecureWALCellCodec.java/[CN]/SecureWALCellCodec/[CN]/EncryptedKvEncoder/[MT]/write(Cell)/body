{
  if (encryptor == null) {
    super.write(cell);
    return;
  }
  byte[] iv=nextIv();
  encryptor.setIv(iv);
  encryptor.reset();
  StreamUtils.writeRawVInt32(out,iv.length);
  out.write(iv);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  OutputStream cout=encryptor.createEncryptionStream(baos);
  int tlen=cell.getTagsLength();
  StreamUtils.writeRawVInt32(cout,KeyValueUtil.keyLength(cell));
  StreamUtils.writeRawVInt32(cout,cell.getValueLength());
  StreamUtils.writeRawVInt32(cout,tlen);
  StreamUtils.writeRawVInt32(cout,cell.getRowLength());
  cout.write(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength());
  StreamUtils.writeRawVInt32(cout,cell.getFamilyLength());
  cout.write(cell.getFamilyArray(),cell.getFamilyOffset(),cell.getFamilyLength());
  StreamUtils.writeRawVInt32(cout,cell.getQualifierLength());
  cout.write(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
  StreamUtils.writeLong(cout,cell.getTimestamp());
  cout.write(cell.getTypeByte());
  cout.write(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
  if (tlen > 0) {
    cout.write(cell.getTagsArray(),cell.getTagsOffset(),tlen);
  }
  cout.close();
  StreamUtils.writeRawVInt32(out,baos.size());
  baos.writeTo(out);
  incrementIv(baos.size());
}
