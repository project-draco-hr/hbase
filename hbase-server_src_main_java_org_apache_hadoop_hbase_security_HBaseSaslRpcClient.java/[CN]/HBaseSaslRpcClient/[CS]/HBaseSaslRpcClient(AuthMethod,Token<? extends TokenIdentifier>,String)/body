{
switch (method) {
case DIGEST:
    if (LOG.isDebugEnabled())     LOG.debug("Creating SASL " + AuthMethod.DIGEST.getMechanismName() + " client to authenticate to service at "+ token.getService());
  saslClient=Sasl.createSaslClient(new String[]{AuthMethod.DIGEST.getMechanismName()},null,null,HBaseSaslRpcServer.SASL_DEFAULT_REALM,HBaseSaslRpcServer.SASL_PROPS,new SaslClientCallbackHandler(token));
break;
case KERBEROS:
if (LOG.isDebugEnabled()) {
LOG.debug("Creating SASL " + AuthMethod.KERBEROS.getMechanismName() + " client. Server's Kerberos principal name is "+ serverPrincipal);
}
if (serverPrincipal == null || serverPrincipal.length() == 0) {
throw new IOException("Failed to specify server's Kerberos principal name");
}
String names[]=HBaseSaslRpcServer.splitKerberosName(serverPrincipal);
if (names.length != 3) {
throw new IOException("Kerberos principal does not have the expected format: " + serverPrincipal);
}
saslClient=Sasl.createSaslClient(new String[]{AuthMethod.KERBEROS.getMechanismName()},null,names[0],names[1],HBaseSaslRpcServer.SASL_PROPS,null);
break;
default :
throw new IOException("Unknown authentication method " + method);
}
if (saslClient == null) throw new IOException("Unable to find SASL client implementation");
}
