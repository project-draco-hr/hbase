{
  final KeyComparator keyComparator=new KeyValue.KeyComparator();
  long ts=5;
  KeyValue kv1=new KeyValue(Bytes.toBytes("the quick brown fox"),family,qualA,ts,Type.Put);
  KeyValue kv2=new KeyValue(Bytes.toBytes("the who test text"),family,qualA,ts,Type.Put);
  byte[] newKey=keyComparator.getShortMidpointKey(kv1.getKey(),kv2.getKey());
  assertTrue(keyComparator.compare(kv1.getKey(),newKey) < 0);
  assertTrue(keyComparator.compare(newKey,kv2.getKey()) < 0);
  short newRowLength=Bytes.toShort(newKey,0);
  byte[] expectedArray=Bytes.toBytes("the r");
  Bytes.equals(newKey,KeyValue.ROW_LENGTH_SIZE,newRowLength,expectedArray,0,expectedArray.length);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,0,Type.Put);
  assertTrue(keyComparator.compare(kv1.getKey(),kv2.getKey()) < 0);
  newKey=keyComparator.getShortMidpointKey(kv1.getKey(),kv2.getKey());
  assertTrue(keyComparator.compare(kv1.getKey(),newKey) < 0);
  assertTrue(keyComparator.compare(newKey,kv2.getKey()) == 0);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,-5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,-10,Type.Put);
  assertTrue(keyComparator.compare(kv1.getKey(),kv2.getKey()) < 0);
  newKey=keyComparator.getShortMidpointKey(kv1.getKey(),kv2.getKey());
  assertTrue(keyComparator.compare(kv1.getKey(),newKey) < 0);
  assertTrue(keyComparator.compare(newKey,kv2.getKey()) == 0);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualB,5,Type.Put);
  assertTrue(keyComparator.compare(kv1.getKey(),kv2.getKey()) < 0);
  newKey=keyComparator.getShortMidpointKey(kv1.getKey(),kv2.getKey());
  assertTrue(keyComparator.compare(kv1.getKey(),newKey) < 0);
  assertTrue(keyComparator.compare(newKey,kv2.getKey()) < 0);
  KeyValue newKeyValue=KeyValue.createKeyValueFromKey(newKey);
  assertTrue(Arrays.equals(newKeyValue.getFamily(),family));
  assertTrue(Arrays.equals(newKeyValue.getQualifier(),qualB));
  assertTrue(newKeyValue.getTimestamp() == HConstants.LATEST_TIMESTAMP);
  assertTrue(newKeyValue.getType() == Type.Maximum.getCode());
  final KeyComparator metaKeyComparator=new KeyValue.MetaKeyComparator();
  kv1=new KeyValue(Bytes.toBytes("ilovehbase123"),family,qualA,5,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbase234"),family,qualA,0,Type.Put);
  newKey=metaKeyComparator.getShortMidpointKey(kv1.getKey(),kv2.getKey());
  assertTrue(metaKeyComparator.compare(kv1.getKey(),newKey) < 0);
  assertTrue(metaKeyComparator.compare(newKey,kv2.getKey()) == 0);
  kv1=new KeyValue(Bytes.toBytes("ilovehbase"),family,qualA,ts,Type.Put);
  kv2=new KeyValue(Bytes.toBytes("ilovehbaseandhdfs"),family,qualA,ts,Type.Put);
  assertTrue(keyComparator.compare(kv1.getKey(),kv2.getKey()) < 0);
  newKey=keyComparator.getShortMidpointKey(kv1.getKey(),kv2.getKey());
  assertTrue(keyComparator.compare(kv1.getKey(),newKey) < 0);
  assertTrue(keyComparator.compare(newKey,kv2.getKey()) == 0);
}
