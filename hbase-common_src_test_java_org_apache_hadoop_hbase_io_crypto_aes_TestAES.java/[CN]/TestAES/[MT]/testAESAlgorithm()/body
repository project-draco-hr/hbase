{
  Configuration conf=HBaseConfiguration.create();
  Cipher aes=Encryption.getCipher(conf,"AES");
  assertEquals(aes.getKeyLength(),AES.KEY_LENGTH);
  assertEquals(aes.getIvLength(),AES.IV_LENGTH);
  Encryptor e=aes.getEncryptor();
  e.setKey(new SecretKeySpec(Bytes.fromHex("2b7e151628aed2a6abf7158809cf4f3c"),"AES"));
  e.setIv(Bytes.fromHex("f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff"));
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  OutputStream cout=e.createEncryptionStream(out);
  cout.write(Bytes.fromHex("6bc1bee22e409f96e93d7e117393172a"));
  cout.write(Bytes.fromHex("ae2d8a571e03ac9c9eb76fac45af8e51"));
  cout.write(Bytes.fromHex("30c81c46a35ce411e5fbc1191a0a52ef"));
  cout.write(Bytes.fromHex("f69f2445df4f9b17ad2b417be66c3710"));
  cout.close();
  ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
  byte[] b=new byte[16];
  IOUtils.readFully(in,b);
  assertTrue("Failed #1",Bytes.equals(b,Bytes.fromHex("874d6191b620e3261bef6864990db6ce")));
  IOUtils.readFully(in,b);
  assertTrue("Failed #2",Bytes.equals(b,Bytes.fromHex("9806f66b7970fdff8617187bb9fffdff")));
  IOUtils.readFully(in,b);
  assertTrue("Failed #3",Bytes.equals(b,Bytes.fromHex("5ae4df3edbd5d35e5b4f09020db03eab")));
  IOUtils.readFully(in,b);
  assertTrue("Failed #4",Bytes.equals(b,Bytes.fromHex("1e031dda2fbe03d1792170a0f3009cee")));
}
