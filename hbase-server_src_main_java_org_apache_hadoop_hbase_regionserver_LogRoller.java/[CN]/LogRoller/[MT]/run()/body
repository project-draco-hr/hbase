{
  while (!server.isStopped()) {
    long now=System.currentTimeMillis();
    boolean periodic=false;
    if (!rollLog.get()) {
      periodic=(now - this.lastrolltime) > this.rollperiod;
      if (!periodic) {
synchronized (rollLog) {
          try {
            if (!rollLog.get()) {
              rollLog.wait(this.threadWakeFrequency);
            }
          }
 catch (          InterruptedException e) {
          }
        }
        continue;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Wal roll period " + this.rollperiod + "ms elapsed");
      }
    }
 else     if (LOG.isDebugEnabled()) {
      LOG.debug("WAL roll requested");
    }
    rollLock.lock();
    try {
      this.lastrolltime=now;
      for (      Entry<WAL,Boolean> entry : walNeedsRoll.entrySet()) {
        final WAL wal=entry.getKey();
        final byte[][] regionsToFlush=wal.rollWriter(periodic || entry.getValue().booleanValue());
        walNeedsRoll.put(wal,Boolean.FALSE);
        if (regionsToFlush != null) {
          for (          byte[] r : regionsToFlush)           scheduleFlush(r);
        }
      }
    }
 catch (    FailedLogCloseException e) {
      server.abort("Failed log close in log roller",e);
    }
catch (    java.net.ConnectException e) {
      server.abort("Failed log close in log roller",e);
    }
catch (    IOException ex) {
      server.abort("IOE in log roller",ex instanceof RemoteException ? ((RemoteException)ex).unwrapRemoteException() : ex);
    }
catch (    Exception ex) {
      LOG.error("Log rolling failed",ex);
      server.abort("Log rolling failed",ex);
    }
 finally {
      try {
        rollLog.set(false);
      }
  finally {
        rollLock.unlock();
      }
    }
  }
  for (  WAL wal : walNeedsRoll.keySet()) {
    wal.logRollerExited();
  }
  LOG.info("LogRoller exiting.");
}
