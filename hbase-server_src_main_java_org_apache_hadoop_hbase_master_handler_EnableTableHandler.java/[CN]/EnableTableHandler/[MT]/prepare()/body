{
  this.tableLock=this.tableLockManager.writeLock(tableName,EventType.C_M_ENABLE_TABLE.toString());
  this.tableLock.acquire();
  boolean success=false;
  try {
    if (!MetaTableAccessor.tableExists(this.server.getShortCircuitConnection(),tableName)) {
      if (!this.skipTableStateCheck) {
        throw new TableNotFoundException(tableName);
      }
      try {
        this.assignmentManager.getTableStateManager().checkAndRemoveTableState(tableName,ZooKeeperProtos.Table.State.ENABLING,true);
        throw new TableNotFoundException(tableName);
      }
 catch (      CoordinatedStateException e) {
        LOG.warn("Failed to delete the ENABLING node for the table " + tableName + ".  The table will remain unusable. Run HBCK to manually fix the problem.");
      }
    }
    if (!skipTableStateCheck) {
      try {
        if (!this.assignmentManager.getTableStateManager().setTableStateIfInStates(this.tableName,ZooKeeperProtos.Table.State.ENABLING,ZooKeeperProtos.Table.State.DISABLED)) {
          LOG.info("Table " + tableName + " isn't disabled; skipping enable");
          throw new TableNotDisabledException(this.tableName);
        }
      }
 catch (      CoordinatedStateException e) {
        throw new IOException("Unable to ensure that the table will be" + " enabling because of a coordination engine issue",e);
      }
    }
    success=true;
  }
  finally {
    if (!success) {
      releaseTableLock();
    }
  }
  return this;
}
