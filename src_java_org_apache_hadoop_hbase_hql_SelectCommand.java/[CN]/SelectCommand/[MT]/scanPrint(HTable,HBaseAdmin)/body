{
  int count=0;
  HScannerInterface scan=null;
  try {
    ParsedColumns parsedColumns=getColumns(admin,true);
    Text[] cols=parsedColumns.getColumns().toArray(new Text[]{});
    if (timestamp == 0) {
      scan=table.obtainScanner(cols,rowKey);
    }
 else {
      scan=table.obtainScanner(cols,rowKey,timestamp);
    }
    if (this.stopRow.toString().length() > 0) {
      RowFilterInterface filter=new WhileMatchRowFilter(new StopRowFilter(stopRow));
      scan=table.obtainScanner(cols,rowKey,filter);
    }
    HStoreKey key=new HStoreKey();
    TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
    while (scan.next(key,results) && checkLimit(count)) {
      if (count == 0 && !countFunction) {
        formatter.header((parsedColumns.isMultiple()) ? HEADER : HEADER_ROW_CELL);
      }
      Text r=key.getRow();
      if (!countFunction) {
        for (        Text columnKey : results.keySet()) {
          String cellData=toString(columnKey,results.get(columnKey));
          if (parsedColumns.isMultiple()) {
            formatter.row(new String[]{r.toString(),columnKey.toString(),cellData});
          }
 else {
            formatter.row(new String[]{r.toString(),cellData});
          }
          if (limit > 0 && count >= limit) {
            break;
          }
        }
      }
      count++;
      results.clear();
    }
    if (count == 0 && Shell.HTML_OPTION != null && !countFunction) {
      formatter.header((parsedColumns.isMultiple()) ? HEADER : HEADER_ROW_CELL);
    }
    formatter.footer();
    scan.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return count;
}
