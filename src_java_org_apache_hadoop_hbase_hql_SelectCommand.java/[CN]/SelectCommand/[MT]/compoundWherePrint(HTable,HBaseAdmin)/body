{
  int count=0;
  try {
    if (version != 0) {
      Cell[] result=null;
      ParsedColumns parsedColumns=getColumns(admin,false);
      boolean multiple=parsedColumns.isMultiple() || version > 1;
      for (      byte[] column : parsedColumns.getColumns()) {
        if (count == 0) {
          formatter.header(multiple ? HEADER_COLUMN_CELL : null);
        }
        if (timestamp != 0) {
          result=table.get(rowKey.getBytes(),column,timestamp,version);
        }
 else {
          result=table.get(rowKey.getBytes(),column,version);
        }
        for (int ii=0; result != null && ii < result.length; ii++) {
          if (multiple) {
            formatter.row(new String[]{column.toString(),toString(column,result[ii].getValue())});
          }
 else {
            formatter.row(new String[]{toString(column,result[ii].getValue())});
          }
          count++;
        }
      }
    }
 else {
      for (      Map.Entry<byte[],Cell> e : table.getRow(rowKey).entrySet()) {
        if (count == 0) {
          formatter.header(isMultiple() ? HEADER_COLUMN_CELL : null);
        }
        byte[] key=e.getKey();
        String keyStr=key.toString();
        if (!columns.contains(ASTERISK) && !columns.contains(keyStr)) {
          continue;
        }
        String cellData=toString(key,e.getValue().getValue());
        if (isMultiple()) {
          formatter.row(new String[]{key.toString(),cellData});
        }
 else {
          formatter.row(new String[]{cellData});
        }
        count++;
      }
    }
    if (count == 0 && Shell.HTML_OPTION != null) {
      formatter.header(isMultiple() ? HEADER_COLUMN_CELL : null);
    }
    formatter.footer();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return 1;
}
