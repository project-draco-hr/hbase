{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetName()).compareTo(other.isSetName());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetName()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.name,other.name);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetMaxVersions()).compareTo(other.isSetMaxVersions());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetMaxVersions()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.maxVersions,other.maxVersions);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetCompression()).compareTo(other.isSetCompression());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetCompression()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.compression,other.compression);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetInMemory()).compareTo(other.isSetInMemory());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetInMemory()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.inMemory,other.inMemory);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBloomFilterType()).compareTo(other.isSetBloomFilterType());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBloomFilterType()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterType,other.bloomFilterType);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBloomFilterVectorSize()).compareTo(other.isSetBloomFilterVectorSize());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBloomFilterVectorSize()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterVectorSize,other.bloomFilterVectorSize);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBloomFilterNbHashes()).compareTo(other.isSetBloomFilterNbHashes());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBloomFilterNbHashes()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.bloomFilterNbHashes,other.bloomFilterNbHashes);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBlockCacheEnabled()).compareTo(other.isSetBlockCacheEnabled());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBlockCacheEnabled()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.blockCacheEnabled,other.blockCacheEnabled);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetTimeToLive()).compareTo(other.isSetTimeToLive());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetTimeToLive()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.timeToLive,other.timeToLive);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
