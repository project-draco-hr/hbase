{
  final FileSystem fs=FileSystem.get(this.conf);
  final Path mf=fs.makeQualified(new Path("performanceevaluation.mapfile"));
  if (fs.exists(mf)) {
    fs.delete(mf,true);
  }
  runBenchmark(new SequentialWriteBenchmark(conf,fs,mf,ROW_COUNT),ROW_COUNT);
  PerformanceEvaluationCommons.concurrentReads(new Runnable(){
    public void run(){
      try {
        runBenchmark(new UniformRandomSmallScan(conf,fs,mf,ROW_COUNT),ROW_COUNT);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  PerformanceEvaluationCommons.concurrentReads(new Runnable(){
    public void run(){
      try {
        runBenchmark(new UniformRandomReadBenchmark(conf,fs,mf,ROW_COUNT),ROW_COUNT);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  PerformanceEvaluationCommons.concurrentReads(new Runnable(){
    public void run(){
      try {
        runBenchmark(new GaussianRandomReadBenchmark(conf,fs,mf,ROW_COUNT),ROW_COUNT);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  PerformanceEvaluationCommons.concurrentReads(new Runnable(){
    public void run(){
      try {
        runBenchmark(new SequentialReadBenchmark(conf,fs,mf,ROW_COUNT),ROW_COUNT);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}
