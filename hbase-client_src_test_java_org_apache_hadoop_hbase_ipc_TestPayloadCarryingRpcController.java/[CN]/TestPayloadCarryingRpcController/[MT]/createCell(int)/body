{
  return new CellScannable(){
    @Override public CellScanner cellScanner(){
      return new CellScanner(){
        @Override public Cell current(){
          return new Cell(){
            private final int i=index;
            @Override public byte[] getRowArray(){
              return null;
            }
            @Override public int getRowOffset(){
              return 0;
            }
            @Override public short getRowLength(){
              return 0;
            }
            @Override public byte[] getFamilyArray(){
              return null;
            }
            @Override public int getFamilyOffset(){
              return 0;
            }
            @Override public byte getFamilyLength(){
              return 0;
            }
            @Override public byte[] getQualifierArray(){
              return null;
            }
            @Override public int getQualifierOffset(){
              return 0;
            }
            @Override public int getQualifierLength(){
              return 0;
            }
            @Override public long getTimestamp(){
              return 0;
            }
            @Override public byte getTypeByte(){
              return 0;
            }
            @Override public long getMvccVersion(){
              return 0;
            }
            @Override public long getSequenceId(){
              return 0;
            }
            @Override public byte[] getValueArray(){
              return Bytes.toBytes(this.i);
            }
            @Override public int getValueOffset(){
              return 0;
            }
            @Override public int getValueLength(){
              return Bytes.SIZEOF_INT;
            }
            @Override public int getTagsOffset(){
              return 0;
            }
            @Override public int getTagsLength(){
              return 0;
            }
            @Override public byte[] getTagsArray(){
              return null;
            }
            @Override public byte[] getValue(){
              return null;
            }
            @Override public byte[] getFamily(){
              return null;
            }
            @Override public byte[] getQualifier(){
              return null;
            }
            @Override public byte[] getRow(){
              return null;
            }
          }
;
        }
        private boolean hasCell=true;
        @Override public boolean advance(){
          if (!hasCell)           return hasCell;
          hasCell=false;
          return true;
        }
      }
;
    }
  }
;
}
