{
  TableName tableName=TableName.valueOf("testGroupOrSplitWhenRegionHoleExistsInMeta");
  byte[][] SPLIT_KEYS=new byte[][]{Bytes.toBytes("row_00000100")};
  Connection connection=ConnectionFactory.createConnection(util.getConfiguration());
  Table table=connection.getTable(tableName);
  setupTableWithSplitkeys(tableName,10,SPLIT_KEYS);
  Path dir=buildBulkFiles(tableName,2);
  final AtomicInteger countedLqis=new AtomicInteger();
  LoadIncrementalHFiles loader=new LoadIncrementalHFiles(util.getConfiguration()){
    protected List<LoadQueueItem> groupOrSplit(    Multimap<ByteBuffer,LoadQueueItem> regionGroups,    final LoadQueueItem item,    final Table htable,    final Pair<byte[][],byte[][]> startEndKeys) throws IOException {
      List<LoadQueueItem> lqis=super.groupOrSplit(regionGroups,item,htable,startEndKeys);
      if (lqis != null) {
        countedLqis.addAndGet(lqis.size());
      }
      return lqis;
    }
  }
;
  try (Table t=connection.getTable(tableName);RegionLocator locator=connection.getRegionLocator(tableName);Admin admin=connection.getAdmin()){
    loader.doBulkLoad(dir,admin,t,locator);
  }
 catch (  Exception e) {
    LOG.error("exeception=",e);
  }
  this.assertExpectedTable(tableName,ROWCOUNT,2);
  dir=buildBulkFiles(tableName,3);
  List<HRegionInfo> regionInfos=MetaTableAccessor.getTableRegions(connection,tableName);
  for (  HRegionInfo regionInfo : regionInfos) {
    if (Bytes.equals(regionInfo.getStartKey(),HConstants.EMPTY_BYTE_ARRAY)) {
      MetaTableAccessor.deleteRegion(connection,regionInfo);
      break;
    }
  }
  try (Table t=connection.getTable(tableName);RegionLocator locator=connection.getRegionLocator(tableName);Admin admin=connection.getAdmin()){
    loader.doBulkLoad(dir,admin,t,locator);
  }
 catch (  Exception e) {
    LOG.error("exception=",e);
    assertTrue("IOException expected",e instanceof IOException);
  }
  table.close();
  regionInfos=MetaTableAccessor.getTableRegions(connection,tableName);
  assertTrue(regionInfos.size() >= 1);
  this.assertExpectedTable(connection,tableName,ROWCOUNT,2);
  connection.close();
}
