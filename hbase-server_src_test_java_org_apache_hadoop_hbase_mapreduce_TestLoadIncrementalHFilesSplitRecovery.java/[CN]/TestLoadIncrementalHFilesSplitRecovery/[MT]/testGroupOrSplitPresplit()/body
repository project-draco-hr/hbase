{
  final TableName table=TableName.valueOf("groupOrSplitPresplit");
  try (Connection connection=ConnectionFactory.createConnection(util.getConfiguration())){
    setupTable(connection,table,10);
    populateTable(connection,table,1);
    assertExpectedTable(connection,table,ROWCOUNT,1);
    forceSplit(table);
    final AtomicInteger countedLqis=new AtomicInteger();
    LoadIncrementalHFiles lih=new LoadIncrementalHFiles(util.getConfiguration()){
      @Override protected List<LoadQueueItem> groupOrSplit(      Multimap<ByteBuffer,LoadQueueItem> regionGroups,      final LoadQueueItem item,      final Table htable,      final Pair<byte[][],byte[][]> startEndKeys) throws IOException {
        List<LoadQueueItem> lqis=super.groupOrSplit(regionGroups,item,htable,startEndKeys);
        if (lqis != null) {
          countedLqis.addAndGet(lqis.size());
        }
        return lqis;
      }
    }
;
    Path bulk=buildBulkFiles(table,2);
    try (Table t=connection.getTable(table)){
      lih.doBulkLoad(bulk,(HTable)t);
    }
     assertExpectedTable(connection,table,ROWCOUNT,2);
    assertEquals(20,countedLqis.get());
  }
 }
