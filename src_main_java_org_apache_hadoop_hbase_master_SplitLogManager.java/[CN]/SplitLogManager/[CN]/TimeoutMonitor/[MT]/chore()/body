{
  int resubmitted=0;
  int unassigned=0;
  int tot=0;
  boolean found_assigned_task=false;
  Set<ServerName> localDeadWorkers;
synchronized (deadWorkersLock) {
    localDeadWorkers=deadWorkers;
    deadWorkers=null;
  }
  for (  Map.Entry<String,Task> e : tasks.entrySet()) {
    String path=e.getKey();
    Task task=e.getValue();
    ServerName cur_worker=task.cur_worker_name;
    tot++;
    if (task.isUnassigned()) {
      unassigned++;
      continue;
    }
    found_assigned_task=true;
    if (localDeadWorkers != null && localDeadWorkers.contains(cur_worker)) {
      SplitLogCounters.tot_mgr_resubmit_dead_server_task.incrementAndGet();
      if (resubmit(path,task,FORCE)) {
        resubmitted++;
      }
 else {
        handleDeadWorker(cur_worker);
        LOG.warn("Failed to resubmit task " + path + " owned by dead "+ cur_worker+ ", will retry.");
      }
    }
 else     if (resubmit(path,task,CHECK)) {
      resubmitted++;
    }
  }
  if (tot > 0) {
    LOG.debug("total tasks = " + tot + " unassigned = "+ unassigned);
  }
  if (resubmitted > 0) {
    LOG.info("resubmitted " + resubmitted + " out of "+ tot+ " tasks");
  }
  if (tot > 0 && !found_assigned_task && ((EnvironmentEdgeManager.currentTimeMillis() - lastNodeCreateTime) > unassignedTimeout)) {
    for (    Map.Entry<String,Task> e : tasks.entrySet()) {
      String path=e.getKey();
      Task task=e.getValue();
      if (task.isUnassigned() && (task.status != FAILURE)) {
        tryGetDataSetWatch(path);
      }
    }
    createRescanNode(Long.MAX_VALUE);
    SplitLogCounters.tot_mgr_resubmit_unassigned.incrementAndGet();
    LOG.debug("resubmitting unassigned task(s) after timeout");
  }
}
