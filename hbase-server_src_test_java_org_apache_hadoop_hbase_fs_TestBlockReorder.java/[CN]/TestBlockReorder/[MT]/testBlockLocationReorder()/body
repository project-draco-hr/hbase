{
  Path p=new Path("hello");
  Assert.assertTrue((short)cluster.getDataNodes().size() > 1);
  final int repCount=2;
  FSDataOutputStream fop=dfs.create(p,(short)repCount);
  final double toWrite=875.5613;
  fop.writeDouble(toWrite);
  fop.close();
  long start=System.currentTimeMillis();
  FSDataInputStream fin=dfs.open(p);
  Assert.assertTrue(toWrite == fin.readDouble());
  long end=System.currentTimeMillis();
  LOG.info("readtime= " + (end - start));
  fin.close();
  Assert.assertTrue((end - start) < 30 * 1000);
  FileStatus f=dfs.getFileStatus(p);
  BlockLocation[] lbs;
  do {
    lbs=dfs.getFileBlockLocations(f,0,1);
  }
 while (lbs.length != 1 && lbs[0].getLength() != repCount);
  final String name=lbs[0].getNames()[0];
  Assert.assertTrue(name.indexOf(':') > 0);
  String portS=name.substring(name.indexOf(':') + 1);
  final int port=Integer.parseInt(portS);
  LOG.info("port= " + port);
  int ipcPort=-1;
  boolean ok=false;
  final String lookup=lbs[0].getHosts()[0];
  StringBuilder sb=new StringBuilder();
  for (  DataNode dn : cluster.getDataNodes()) {
    final String dnName=getHostName(dn);
    sb.append(dnName).append(' ');
    if (lookup.equals(dnName)) {
      ok=true;
      LOG.info("killing datanode " + name + " / "+ lookup);
      ipcPort=dn.ipcServer.getListenerAddress().getPort();
      dn.shutdown();
      LOG.info("killed datanode " + name + " / "+ lookup);
      break;
    }
  }
  Assert.assertTrue("didn't find the server to kill, was looking for " + lookup + " found "+ sb,ok);
  LOG.info("ipc port= " + ipcPort);
  Assert.assertTrue(HFileSystem.addLocationsOrderInterceptor(conf,new HFileSystem.ReorderBlocks(){
    @Override public void reorderBlocks(    Configuration c,    LocatedBlocks lbs,    String src){
      for (      LocatedBlock lb : lbs.getLocatedBlocks()) {
        if (lb.getLocations().length > 1) {
          if (lb.getLocations()[0].getHostName().equals(lookup)) {
            LOG.info("HFileSystem bad host, inverting");
            DatanodeInfo tmp=lb.getLocations()[0];
            lb.getLocations()[0]=lb.getLocations()[1];
            lb.getLocations()[1]=tmp;
          }
        }
      }
    }
  }
));
  final int retries=10;
  ServerSocket ss=null;
  ServerSocket ssI;
  try {
    ss=new ServerSocket(port);
    ssI=new ServerSocket(ipcPort);
  }
 catch (  BindException be) {
    LOG.warn("Got bind exception trying to set up socket on " + port + " or "+ ipcPort+ ", this means that the datanode has not closed the socket or"+ " someone else took it. It may happen, skipping this test for this time.",be);
    if (ss != null) {
      ss.close();
    }
    return;
  }
  for (int i=0; i < retries; i++) {
    start=System.currentTimeMillis();
    fin=dfs.open(p);
    Assert.assertTrue(toWrite == fin.readDouble());
    fin.close();
    end=System.currentTimeMillis();
    LOG.info("HFileSystem readtime= " + (end - start));
    Assert.assertFalse("We took too much time to read",(end - start) > 60000);
  }
  ss.close();
  ssI.close();
}
