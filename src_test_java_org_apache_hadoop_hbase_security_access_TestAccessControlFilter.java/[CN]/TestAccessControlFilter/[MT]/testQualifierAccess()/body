{
  final HTable table=TEST_UTIL.createTable(TABLE,FAMILY);
  ADMIN.runAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      HTable aclmeta=new HTable(TEST_UTIL.getConfiguration(),AccessControlLists.ACL_TABLE_NAME);
      AccessControllerProtocol acls=aclmeta.coprocessorProxy(AccessControllerProtocol.class,Bytes.toBytes("testtable"));
      TablePermission perm=new TablePermission(TABLE,null,Permission.Action.READ);
      acls.grant(Bytes.toBytes(READER.getShortName()),perm);
      perm=new TablePermission(TABLE,FAMILY,PUBLIC_COL,Permission.Action.READ);
      acls.grant(Bytes.toBytes(LIMITED.getShortName()),perm);
      return null;
    }
  }
);
  List<Put> puts=new ArrayList<Put>(100);
  for (int i=0; i < 100; i++) {
    Put p=new Put(Bytes.toBytes(i));
    p.add(FAMILY,PRIVATE_COL,Bytes.toBytes("secret " + i));
    p.add(FAMILY,PUBLIC_COL,Bytes.toBytes("info " + i));
    puts.add(p);
  }
  table.put(puts);
  READER.runAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
      conf.set("testkey",UUID.randomUUID().toString());
      HTable t=new HTable(conf,TABLE);
      ResultScanner rs=t.getScanner(new Scan());
      int rowcnt=0;
      for (      Result r : rs) {
        rowcnt++;
        int rownum=Bytes.toInt(r.getRow());
        assertTrue(r.containsColumn(FAMILY,PRIVATE_COL));
        assertEquals("secret " + rownum,Bytes.toString(r.getValue(FAMILY,PRIVATE_COL)));
        assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
        assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
      }
      assertEquals("Expected 100 rows returned",100,rowcnt);
      return null;
    }
  }
);
  LIMITED.runAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
      conf.set("testkey",UUID.randomUUID().toString());
      HTable t=new HTable(conf,TABLE);
      ResultScanner rs=t.getScanner(new Scan());
      int rowcnt=0;
      for (      Result r : rs) {
        rowcnt++;
        int rownum=Bytes.toInt(r.getRow());
        assertFalse(r.containsColumn(FAMILY,PRIVATE_COL));
        assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
        assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
      }
      assertEquals("Expected 100 rows returned",100,rowcnt);
      return null;
    }
  }
);
  DENIED.runAs(new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      try {
        Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
        conf.set("testkey",UUID.randomUUID().toString());
        HTable t=new HTable(conf,TABLE);
        ResultScanner rs=t.getScanner(new Scan());
        fail("Attempt to open scanner should have been denied");
      }
 catch (      AccessDeniedException ade) {
      }
      return null;
    }
  }
);
}
