{
  Preconditions.checkArgument(proc != null);
  validateClass(proc);
  final ProcedureProtos.Procedure.Builder builder=ProcedureProtos.Procedure.newBuilder().setClassName(proc.getClass().getName()).setProcId(proc.getProcId()).setState(proc.getState()).setStartTime(proc.getStartTime()).setLastUpdate(proc.getLastUpdate());
  if (proc.hasParent()) {
    builder.setParentId(proc.getParentProcId());
  }
  if (proc.hasTimeout()) {
    builder.setTimeout(proc.getTimeout());
  }
  if (proc.hasOwner()) {
    builder.setOwner(proc.getOwner());
  }
  final int[] stackIds=proc.getStackIndexes();
  if (stackIds != null) {
    for (int i=0; i < stackIds.length; ++i) {
      builder.addStackId(stackIds[i]);
    }
  }
  if (proc.hasException()) {
    RemoteProcedureException exception=proc.getException();
    builder.setException(RemoteProcedureException.toProto(exception.getSource(),exception.getCause()));
  }
  final byte[] result=proc.getResult();
  if (result != null) {
    builder.setResult(UnsafeByteOperations.unsafeWrap(result));
  }
  final ByteString.Output stateStream=ByteString.newOutput();
  try {
    proc.serializeStateData(stateStream);
    if (stateStream.size() > 0) {
      builder.setStateData(stateStream.toByteString());
    }
  }
  finally {
    stateStream.close();
  }
  if (proc.getNonceKey() != null) {
    builder.setNonceGroup(proc.getNonceKey().getNonceGroup());
    builder.setNonce(proc.getNonceKey().getNonce());
  }
  return builder.build();
}
