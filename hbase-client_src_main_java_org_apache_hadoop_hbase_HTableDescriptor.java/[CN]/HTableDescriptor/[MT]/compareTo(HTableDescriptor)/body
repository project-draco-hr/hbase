{
  int result=Bytes.compareTo(this.name,other.name);
  if (result == 0) {
    result=families.size() - other.families.size();
  }
  if (result == 0 && families.size() != other.families.size()) {
    result=Integer.valueOf(families.size()).compareTo(Integer.valueOf(other.families.size()));
  }
  if (result == 0) {
    for (Iterator<HColumnDescriptor> it=families.values().iterator(), it2=other.families.values().iterator(); it.hasNext(); ) {
      result=it.next().compareTo(it2.next());
      if (result != 0) {
        break;
      }
    }
  }
  if (result == 0) {
    result=this.values.hashCode() - other.values.hashCode();
    if (result < 0)     result=-1;
 else     if (result > 0)     result=1;
  }
  if (result == 0) {
    result=this.configuration.hashCode() - other.configuration.hashCode();
    if (result < 0)     result=-1;
 else     if (result > 0)     result=1;
  }
  return result;
}
