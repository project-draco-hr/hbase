{
  StringBuilder s=new StringBuilder();
  Set<Bytes> reservedKeys=new TreeSet<Bytes>();
  Set<Bytes> userKeys=new TreeSet<Bytes>();
  for (  Bytes k : values.keySet()) {
    if (k == null || k.get() == null)     continue;
    String key=Bytes.toString(k.get());
    if (!RESERVED_KEYWORDS.contains(k) && !key.startsWith("coprocessor$")) {
      userKeys.add(k);
      continue;
    }
    String value=Bytes.toString(values.get(k).get());
    if (key.equalsIgnoreCase(IS_ROOT) || key.equalsIgnoreCase(IS_META)) {
      if (Boolean.valueOf(value) == false)       continue;
    }
    if (printDefaults || !DEFAULT_VALUES.containsKey(key) || !DEFAULT_VALUES.get(key).equalsIgnoreCase(value)) {
      reservedKeys.add(k);
    }
  }
  boolean hasAttributes=!reservedKeys.isEmpty() || !userKeys.isEmpty();
  if (!hasAttributes && configuration.isEmpty())   return s;
  s.append(", {");
  if (hasAttributes) {
    s.append("TABLE_ATTRIBUTES => {");
    boolean printCommaForAttr=false;
    for (    Bytes k : reservedKeys) {
      String key=Bytes.toString(k.get());
      String value=Bytes.toStringBinary(values.get(k).get());
      if (printCommaForAttr)       s.append(", ");
      printCommaForAttr=true;
      s.append(key);
      s.append(" => ");
      s.append('\'').append(value).append('\'');
    }
    if (!userKeys.isEmpty()) {
      if (printCommaForAttr)       s.append(", ");
      printCommaForAttr=true;
      s.append(HConstants.METADATA).append(" => ");
      s.append("{");
      boolean printCommaForCfg=false;
      for (      Bytes k : userKeys) {
        String key=Bytes.toString(k.get());
        String value=Bytes.toStringBinary(values.get(k).get());
        if (printCommaForCfg)         s.append(", ");
        printCommaForCfg=true;
        s.append('\'').append(key).append('\'');
        s.append(" => ");
        s.append('\'').append(value).append('\'');
      }
      s.append("}");
    }
  }
  if (!configuration.isEmpty()) {
    if (hasAttributes) {
      s.append(", ");
    }
    s.append(HConstants.CONFIGURATION).append(" => ");
    s.append('{');
    boolean printCommaForConfig=false;
    for (    Map.Entry<String,String> e : configuration.entrySet()) {
      if (printCommaForConfig)       s.append(", ");
      printCommaForConfig=true;
      s.append('\'').append(e.getKey()).append('\'');
      s.append(" => ");
      s.append('\'').append(e.getValue()).append('\'');
    }
    s.append("}");
  }
  s.append("}");
  return s;
}
