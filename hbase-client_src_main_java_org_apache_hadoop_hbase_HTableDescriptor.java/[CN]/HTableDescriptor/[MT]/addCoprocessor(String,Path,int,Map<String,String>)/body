{
  if (hasCoprocessor(className)) {
    throw new IOException("Coprocessor " + className + " already exists.");
  }
  StringBuilder kvString=new StringBuilder();
  if (kvs != null) {
    for (    Map.Entry<String,String> e : kvs.entrySet()) {
      if (!e.getKey().matches(HConstants.CP_HTD_ATTR_VALUE_PARAM_KEY_PATTERN)) {
        throw new IOException("Illegal parameter key = " + e.getKey());
      }
      if (!e.getValue().matches(HConstants.CP_HTD_ATTR_VALUE_PARAM_VALUE_PATTERN)) {
        throw new IOException("Illegal parameter (" + e.getKey() + ") value = "+ e.getValue());
      }
      if (kvString.length() != 0) {
        kvString.append(',');
      }
      kvString.append(e.getKey());
      kvString.append('=');
      kvString.append(e.getValue());
    }
  }
  int maxCoprocessorNumber=0;
  Matcher keyMatcher;
  for (  Map.Entry<Bytes,Bytes> e : this.values.entrySet()) {
    keyMatcher=HConstants.CP_HTD_ATTR_KEY_PATTERN.matcher(Bytes.toString(e.getKey().get()));
    if (!keyMatcher.matches()) {
      continue;
    }
    maxCoprocessorNumber=Math.max(Integer.parseInt(keyMatcher.group(1)),maxCoprocessorNumber);
  }
  maxCoprocessorNumber++;
  String key="coprocessor$" + Integer.toString(maxCoprocessorNumber);
  String value=((jarFilePath == null) ? "" : jarFilePath.toString()) + "|" + className+ "|"+ Integer.toString(priority)+ "|"+ kvString.toString();
  setValue(key,value);
  return this;
}
