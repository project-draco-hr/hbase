{
  final int initialCorePoolSize=3;
  ChoreService service=new ChoreService("testCorePoolDecrease",initialCorePoolSize);
  final int chorePeriod=100;
  try {
    SlowChore slowChore1=new SlowChore("slowChore1",chorePeriod);
    SlowChore slowChore2=new SlowChore("slowChore2",chorePeriod);
    SlowChore slowChore3=new SlowChore("slowChore3",chorePeriod);
    service.scheduleChore(slowChore1);
    service.scheduleChore(slowChore2);
    service.scheduleChore(slowChore3);
    Thread.sleep(chorePeriod * 10);
    assertEquals("Should not create more pools than scheduled chores",service.getNumberOfScheduledChores(),service.getCorePoolSize());
    SlowChore slowChore4=new SlowChore("slowChore4",chorePeriod);
    service.scheduleChore(slowChore4);
    Thread.sleep(chorePeriod * 10);
    assertEquals("Chores are missing their start time. Should expand core pool size",service.getNumberOfScheduledChores(),service.getCorePoolSize());
    SlowChore slowChore5=new SlowChore("slowChore5",chorePeriod);
    service.scheduleChore(slowChore5);
    Thread.sleep(chorePeriod * 10);
    assertEquals("Chores are missing their start time. Should expand core pool size",service.getNumberOfScheduledChores(),service.getCorePoolSize());
    assertEquals(service.getNumberOfChoresMissingStartTime(),5);
    slowChore5.cancel();
    Thread.sleep(chorePeriod * 10);
    assertEquals(Math.max(ChoreService.MIN_CORE_POOL_SIZE,service.getNumberOfScheduledChores()),service.getCorePoolSize());
    assertEquals(service.getNumberOfChoresMissingStartTime(),4);
    slowChore4.cancel();
    Thread.sleep(chorePeriod * 10);
    assertEquals(Math.max(ChoreService.MIN_CORE_POOL_SIZE,service.getNumberOfScheduledChores()),service.getCorePoolSize());
    assertEquals(service.getNumberOfChoresMissingStartTime(),3);
    slowChore3.cancel();
    Thread.sleep(chorePeriod * 10);
    assertEquals(Math.max(ChoreService.MIN_CORE_POOL_SIZE,service.getNumberOfScheduledChores()),service.getCorePoolSize());
    assertEquals(service.getNumberOfChoresMissingStartTime(),2);
    slowChore2.cancel();
    Thread.sleep(chorePeriod * 10);
    assertEquals(Math.max(ChoreService.MIN_CORE_POOL_SIZE,service.getNumberOfScheduledChores()),service.getCorePoolSize());
    assertEquals(service.getNumberOfChoresMissingStartTime(),1);
    slowChore1.cancel();
    Thread.sleep(chorePeriod * 10);
    assertEquals(Math.max(ChoreService.MIN_CORE_POOL_SIZE,service.getNumberOfScheduledChores()),service.getCorePoolSize());
    assertEquals(service.getNumberOfChoresMissingStartTime(),0);
  }
  finally {
    shutdownService(service);
  }
}
