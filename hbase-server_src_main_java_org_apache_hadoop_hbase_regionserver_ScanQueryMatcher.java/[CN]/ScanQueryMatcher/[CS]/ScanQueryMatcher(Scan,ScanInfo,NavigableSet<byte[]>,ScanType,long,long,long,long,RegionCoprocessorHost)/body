{
  TimeRange timeRange=scan.getColumnFamilyTimeRange().get(scanInfo.getFamily());
  if (timeRange == null) {
    this.tr=scan.getTimeRange();
  }
 else {
    this.tr=timeRange;
  }
  this.rowComparator=scanInfo.getComparator();
  this.regionCoprocessorHost=regionCoprocessorHost;
  this.deletes=instantiateDeleteTracker();
  this.stopRow=scan.getStopRow();
  this.startKey=CellUtil.createFirstDeleteFamilyCellOnRow(scan.getStartRow(),scanInfo.getFamily());
  this.filter=scan.getFilter();
  this.earliestPutTs=earliestPutTs;
  this.oldestUnexpiredTS=oldestUnexpiredTS;
  this.now=now;
  this.maxReadPointToTrackVersions=readPointToUse;
  this.timeToPurgeDeletes=scanInfo.getTimeToPurgeDeletes();
  this.ttl=oldestUnexpiredTS;
  this.isUserScan=scanType == ScanType.USER_SCAN;
  this.keepDeletedCells=scan.isRaw() ? KeepDeletedCells.TRUE : isUserScan ? KeepDeletedCells.FALSE : scanInfo.getKeepDeletedCells();
  this.retainDeletesInOutput=scanType == ScanType.COMPACT_RETAIN_DELETES || scan.isRaw();
  this.seePastDeleteMarkers=scanInfo.getKeepDeletedCells() != KeepDeletedCells.FALSE && isUserScan;
  int maxVersions=scan.isRaw() ? scan.getMaxVersions() : Math.min(scan.getMaxVersions(),scanInfo.getMaxVersions());
  if (columns == null || columns.size() == 0) {
    hasNullColumn=true;
    this.columns=new ScanWildcardColumnTracker(scanInfo.getMinVersions(),maxVersions,oldestUnexpiredTS);
  }
 else {
    hasNullColumn=(columns.first().length == 0);
    this.columns=new ExplicitColumnTracker(columns,scanInfo.getMinVersions(),maxVersions,oldestUnexpiredTS);
  }
  this.isReversed=scan.isReversed();
}
