{
  this.tr=scan.getTimeRange();
  this.rowComparator=scanInfo.getComparator().getRawComparator();
  this.deletes=new ScanDeleteTracker();
  this.stopRow=scan.getStopRow();
  this.startKey=KeyValue.createFirstDeleteFamilyOnRow(scan.getStartRow(),scanInfo.getFamily());
  this.filter=scan.getFilter();
  this.earliestPutTs=earliestPutTs;
  this.maxReadPointToTrackVersions=readPointToUse;
  this.timeToPurgeDeletes=scanInfo.getTimeToPurgeDeletes();
  this.isUserScan=scanType == ScanType.USER_SCAN;
  this.keepDeletedCells=(scanInfo.getKeepDeletedCells() && !isUserScan) || scan.isRaw();
  this.retainDeletesInOutput=scanType == ScanType.MINOR_COMPACT || scan.isRaw();
  this.seePastDeleteMarkers=scanInfo.getKeepDeletedCells() && isUserScan;
  int maxVersions=Math.min(scan.getMaxVersions(),scanInfo.getMaxVersions());
  if (columns == null || columns.size() == 0) {
    hasNullColumn=true;
    this.columns=new ScanWildcardColumnTracker(scanInfo.getMinVersions(),maxVersions,oldestUnexpiredTS);
  }
 else {
    hasNullColumn=(columns.first().length == 0);
    this.columns=new ExplicitColumnTracker(columns,scanInfo.getMinVersions(),maxVersions,oldestUnexpiredTS);
  }
}
