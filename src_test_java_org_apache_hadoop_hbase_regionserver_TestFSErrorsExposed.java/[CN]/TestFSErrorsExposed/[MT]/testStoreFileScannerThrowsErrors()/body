{
  Path hfilePath=new Path(new Path(util.getDataTestDir("internalScannerExposesErrors"),"regionname"),"familyname");
  FaultyFileSystem fs=new FaultyFileSystem(util.getTestFileSystem());
  CacheConfig cacheConf=new CacheConfig(util.getConfiguration());
  StoreFile.Writer writer=new StoreFile.WriterBuilder(util.getConfiguration(),cacheConf,fs,2 * 1024).withOutputDir(hfilePath).build();
  TestStoreFile.writeStoreFile(writer,Bytes.toBytes("cf"),Bytes.toBytes("qual"));
  StoreFile sf=new StoreFile(fs,writer.getPath(),util.getConfiguration(),cacheConf,BloomType.NONE,NoOpDataBlockEncoder.INSTANCE);
  List<StoreFileScanner> scanners=StoreFileScanner.getScannersForStoreFiles(Collections.singletonList(sf),false,true,false);
  KeyValueScanner scanner=scanners.get(0);
  FaultyInputStream inStream=fs.inStreams.get(0).get();
  assertNotNull(inStream);
  scanner.seek(KeyValue.LOWESTKEY);
  assertNotNull(scanner.next());
  inStream.startFaults();
  try {
    int scanned=0;
    while (scanner.next() != null) {
      scanned++;
    }
    fail("Scanner didn't throw after faults injected");
  }
 catch (  IOException ioe) {
    LOG.info("Got expected exception",ioe);
    assertTrue(ioe.getMessage().contains("Could not iterate"));
  }
  scanner.close();
}
