{
  final Configuration conf=HBaseConfiguration.create();
  ServerManager sm=new ServerManager(new Server(){
    @Override public CatalogTracker getCatalogTracker(){
      return null;
    }
    @Override public Configuration getConfiguration(){
      return conf;
    }
    @Override public String getServerName(){
      return null;
    }
    @Override public ZooKeeperWatcher getZooKeeper(){
      return null;
    }
    @Override public void abort(    String why,    Throwable e){
    }
    @Override public boolean isStopped(){
      return false;
    }
    @Override public void stop(    String why){
    }
  }
,null,null);
  LOG.debug("regionServerStartup 1");
  HServerInfo hsi1=new HServerInfo(new HServerAddress("example.org:1234"),System.currentTimeMillis(),-1,"example.com");
  sm.regionServerStartup(hsi1,System.currentTimeMillis());
  long maxSkew=30000;
  try {
    LOG.debug("regionServerStartup 2");
    HServerInfo hsi2=new HServerInfo(new HServerAddress("example.org:1235"),System.currentTimeMillis(),-1,"example.com");
    sm.regionServerStartup(hsi2,System.currentTimeMillis() - maxSkew * 2);
    Assert.assertTrue("HMaster should have thrown an ClockOutOfSyncException " + "but didn't.",false);
  }
 catch (  ClockOutOfSyncException e) {
    LOG.info("Recieved expected exception: " + e);
  }
}
