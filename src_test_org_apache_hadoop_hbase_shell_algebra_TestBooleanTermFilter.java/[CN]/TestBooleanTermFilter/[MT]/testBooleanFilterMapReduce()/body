{
  try {
    HTableDescriptor desc=new HTableDescriptor(INPUT_TABLE);
    String[] columns=GROUP_COLUMN_FAMILIES.split(" ");
    for (int i=0; i < columns.length; i++) {
      desc.addFamily(new HColumnDescriptor(columns[i]));
    }
    HBaseAdmin admin=new HBaseAdmin(this.conf);
    admin.createTable(desc);
    HTable table=new HTable(conf,new Text(INPUT_TABLE));
    Random oRandom=new Random();
    for (int j=0; j < 200; j++) {
      int i=oRandom.nextInt(200) + 1;
      long lockid=table.startUpdate(new Text("rowKey" + j));
      table.put(lockid,COUNT_COLUMNFAMILY,Integer.toString(j).getBytes(HConstants.UTF8_ENCODING));
      table.put(lockid,RANDOMINT_COLUMNFAMILY,Integer.toString(i).getBytes(HConstants.UTF8_ENCODING));
      table.commit(lockid,System.currentTimeMillis());
    }
    long lockid=table.startUpdate(new Text("rowKey2001"));
    table.put(lockid,COUNT_COLUMNFAMILY,"12".getBytes(HConstants.UTF8_ENCODING));
    table.put(lockid,RANDOMINT_COLUMNFAMILY,"120".getBytes(HConstants.UTF8_ENCODING));
    table.commit(lockid,System.currentTimeMillis());
  }
 catch (  MasterNotRunningException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  try {
    HTableDescriptor output=new HTableDescriptor(OUTPUT_TABLE);
    String[] columns=GROUP_COLUMN_FAMILIES.split(" ");
    for (int i=0; i < columns.length; i++) {
      output.addFamily(new HColumnDescriptor(columns[i]));
    }
    HBaseAdmin admin=new HBaseAdmin(this.conf);
    admin.createTable(output);
  }
 catch (  MasterNotRunningException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  MiniMRCluster mrCluster=null;
  try {
    mrCluster=new MiniMRCluster(2,fs.getUri().toString(),1);
    JobConf jobConf=new JobConf(conf,TestBooleanTermFilter.class);
    jobConf.setJobName("process boolean term filter mapreduce");
    jobConf.setNumMapTasks(2);
    jobConf.setNumReduceTasks(1);
    IdentityFilterMap.initJob(INPUT_TABLE,GROUP_COLUMN_FAMILIES,BOOLEAN_TERM,IdentityFilterMap.class,jobConf);
    IdentityTableReduce.initJob(OUTPUT_TABLE,IdentityTableReduce.class,jobConf);
    JobClient.runJob(jobConf);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    mrCluster.shutdown();
  }
  try {
    verify(conf,OUTPUT_TABLE);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}
