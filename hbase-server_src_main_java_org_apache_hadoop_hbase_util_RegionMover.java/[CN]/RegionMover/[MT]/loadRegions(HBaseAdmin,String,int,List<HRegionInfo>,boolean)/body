{
  String server=null;
  List<HRegionInfo> movedRegions=Collections.synchronizedList(new ArrayList<HRegionInfo>());
  int maxWaitInSeconds=admin.getConfiguration().getInt(SERVERSTART_WAIT_MAX_KEY,DEFAULT_SERVERSTART_WAIT_MAX);
  long maxWait=EnvironmentEdgeManager.currentTimeMillis() + maxWaitInSeconds * 1000;
  while ((EnvironmentEdgeManager.currentTimeMillis() < maxWait) && (server == null)) {
    try {
      ArrayList<String> regionServers=getServers(admin);
      server=stripServer(regionServers,hostname,port);
      if (server != null) {
        break;
      }
    }
 catch (    IOException e) {
      LOG.warn("Could not get list of region servers",e);
    }
catch (    Exception e) {
      LOG.info("hostname=" + hostname + " is not up yet, waiting",e);
    }
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      LOG.error("Interrupted while waiting for " + hostname + " to be up.Quitting now",e);
      throw e;
    }
  }
  if (server == null) {
    LOG.error("Host:" + hostname + " is not up.Giving up.");
    throw new Exception("Host to load regions not online");
  }
  LOG.info("Moving" + regionsToMove.size() + " regions to "+ server+ " using "+ this.maxthreads+ " threads.Ack mode:"+ this.ack);
  ExecutorService moveRegionsPool=Executors.newFixedThreadPool(this.maxthreads);
  List<Future<Boolean>> taskList=new ArrayList<Future<Boolean>>();
  int counter=0;
  while (counter < regionsToMove.size()) {
    HRegionInfo region=regionsToMove.get(counter);
    String currentServer=getServerNameForRegion(admin,region);
    if (currentServer == null) {
      LOG.warn("Could not get server for Region:" + region.getEncodedName() + " moving on");
      counter++;
      continue;
    }
 else     if (server.equals(currentServer)) {
      LOG.info("Region " + region.getRegionNameAsString() + "already on target server="+ server);
      counter++;
      continue;
    }
    if (ack) {
      Future<Boolean> task=moveRegionsPool.submit(new MoveWithAck(admin,region,currentServer,server,movedRegions));
      taskList.add(task);
    }
 else {
      Future<Boolean> task=moveRegionsPool.submit(new MoveWithoutAck(admin,region,currentServer,server,movedRegions));
      taskList.add(task);
    }
    counter++;
  }
  moveRegionsPool.shutdown();
  long timeoutInSeconds=regionsToMove.size() * admin.getConfiguration().getInt(MOVE_WAIT_MAX_KEY,DEFAULT_MOVE_WAIT_MAX);
  try {
    if (!moveRegionsPool.awaitTermination(timeoutInSeconds,TimeUnit.SECONDS)) {
      moveRegionsPool.shutdownNow();
    }
  }
 catch (  InterruptedException e) {
    moveRegionsPool.shutdownNow();
    Thread.currentThread().interrupt();
  }
  for (  Future<Boolean> future : taskList) {
    try {
      if (!future.get(5,TimeUnit.SECONDS)) {
        LOG.error("Was Not able to move region....Exiting Now");
        throw new Exception("Could not move region Exception");
      }
    }
 catch (    InterruptedException e) {
      LOG.error("Interrupted while waiting for Thread to Complete " + e.getMessage(),e);
      throw e;
    }
catch (    ExecutionException e) {
      LOG.error("Got Exception From Thread While moving region " + e.getMessage(),e);
      throw e;
    }
catch (    CancellationException e) {
      LOG.error("Thread for moving region cancelled. Timeout for cancellation:" + timeoutInSeconds + "secs",e);
      throw e;
    }
  }
}
