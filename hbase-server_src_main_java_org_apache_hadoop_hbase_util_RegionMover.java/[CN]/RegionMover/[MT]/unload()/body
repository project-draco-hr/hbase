{
  setConf();
  deleteFile(this.filename);
  ExecutorService unloadPool=Executors.newFixedThreadPool(1);
  Future<Boolean> unloadTask=unloadPool.submit(new Unload(this));
  unloadPool.shutdown();
  try {
    if (!unloadPool.awaitTermination((long)this.timeout,TimeUnit.SECONDS)) {
      LOG.warn("Timed out before finishing the unloading operation. Timeout:" + this.timeout + "sec");
      unloadPool.shutdownNow();
    }
  }
 catch (  InterruptedException e) {
    unloadPool.shutdownNow();
    Thread.currentThread().interrupt();
  }
  try {
    return unloadTask.get(5,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    LOG.warn("Interrupted while unloading Regions from " + this.hostname,e);
    throw e;
  }
catch (  ExecutionException e) {
    LOG.error("Error while unloading regions from RegionServer " + this.hostname,e);
    throw e;
  }
}
