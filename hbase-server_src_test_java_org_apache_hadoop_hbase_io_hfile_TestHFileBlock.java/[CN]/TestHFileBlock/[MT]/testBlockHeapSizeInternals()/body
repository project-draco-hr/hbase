{
  if (ClassSize.is32BitJVM()) {
    assertEquals(64,HFileBlock.MULTI_BYTE_BUFFER_HEAP_SIZE);
  }
 else {
    assertEquals(72,HFileBlock.MULTI_BYTE_BUFFER_HEAP_SIZE);
  }
  for (  int size : new int[]{100,256,12345}) {
    byte[] byteArr=new byte[HConstants.HFILEBLOCK_HEADER_SIZE + size];
    ByteBuffer buf=ByteBuffer.wrap(byteArr,0,size);
    HFileContext meta=new HFileContextBuilder().withIncludesMvcc(includesMemstoreTS).withIncludesTags(includesTag).withHBaseCheckSum(false).withCompression(Algorithm.NONE).withBytesPerCheckSum(HFile.DEFAULT_BYTES_PER_CHECKSUM).withChecksumType(ChecksumType.NULL).build();
    HFileBlock block=new HFileBlock(BlockType.DATA,size,size,-1,buf,HFileBlock.FILL_HEADER,-1,0,-1,meta);
    long byteBufferExpectedSize=ClassSize.align(ClassSize.estimateBase(new MultiByteBuff(buf).getClass(),true) + HConstants.HFILEBLOCK_HEADER_SIZE + size);
    long hfileMetaSize=ClassSize.align(ClassSize.estimateBase(HFileContext.class,true));
    long hfileBlockExpectedSize=ClassSize.align(ClassSize.estimateBase(HFileBlock.class,true));
    long expected=hfileBlockExpectedSize + byteBufferExpectedSize + hfileMetaSize;
    assertEquals("Block data size: " + size + ", byte buffer expected "+ "size: "+ byteBufferExpectedSize+ ", HFileBlock class expected "+ "size: "+ hfileBlockExpectedSize+ ";",expected,block.heapSize());
  }
}
