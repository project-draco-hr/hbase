{
  if (ClassSize.is32BitJVM()) {
    assertTrue(HFileBlock.BYTE_BUFFER_HEAP_SIZE == 64);
  }
 else {
    assertTrue(HFileBlock.BYTE_BUFFER_HEAP_SIZE == 80);
  }
  for (  int size : new int[]{100,256,12345}) {
    byte[] byteArr=new byte[HConstants.HFILEBLOCK_HEADER_SIZE + size];
    ByteBuffer buf=ByteBuffer.wrap(byteArr,0,size);
    HFileContext meta=new HFileContext();
    meta.setIncludesMvcc(includesMemstoreTS);
    meta.setIncludesTags(includesTag);
    meta.setUsesHBaseChecksum(false);
    meta.setCompressAlgo(Algorithm.NONE);
    meta.setBytesPerChecksum(HFile.DEFAULT_BYTES_PER_CHECKSUM);
    meta.setChecksumType(ChecksumType.NULL);
    meta.setBytesPerChecksum(0);
    HFileBlock block=new HFileBlock(BlockType.DATA,size,size,-1,buf,HFileBlock.FILL_HEADER,-1,0,meta);
    long byteBufferExpectedSize=ClassSize.align(ClassSize.estimateBase(buf.getClass(),true) + HConstants.HFILEBLOCK_HEADER_SIZE + size);
    long hfileMetaSize=ClassSize.align(ClassSize.estimateBase(HFileContext.class,true));
    long hfileBlockExpectedSize=ClassSize.align(ClassSize.estimateBase(HFileBlock.class,true));
    long expected=hfileBlockExpectedSize + byteBufferExpectedSize + hfileMetaSize;
    assertEquals("Block data size: " + size + ", byte buffer expected "+ "size: "+ byteBufferExpectedSize+ ", HFileBlock class expected "+ "size: "+ hfileBlockExpectedSize+ ";",expected,block.heapSize());
  }
}
