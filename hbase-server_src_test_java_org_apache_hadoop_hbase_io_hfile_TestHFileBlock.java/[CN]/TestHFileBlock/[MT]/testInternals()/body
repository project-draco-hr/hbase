{
  final int numBlocks=5;
  if (includesTag) {
    TEST_UTIL.getConfiguration().setInt("hfile.format.version",3);
  }
  for (  Compression.Algorithm algo : COMPRESSION_ALGORITHMS) {
    for (    boolean pread : new boolean[]{false,true}) {
      for (      DataBlockEncoding encoding : DataBlockEncoding.values()) {
        Path path=new Path(TEST_UTIL.getDataTestDir(),"blocks_v2_" + algo + "_"+ encoding.toString());
        FSDataOutputStream os=fs.create(path);
        HFileDataBlockEncoder dataBlockEncoder=(encoding != DataBlockEncoding.NONE) ? new HFileDataBlockEncoderImpl(encoding) : NoOpDataBlockEncoder.INSTANCE;
        HFileContext meta=new HFileContextBuilder().withCompression(algo).withIncludesMvcc(includesMemstoreTS).withIncludesTags(includesTag).withBytesPerCheckSum(HFile.DEFAULT_BYTES_PER_CHECKSUM).build();
        HFileBlock.Writer hbw=new HFileBlock.Writer(dataBlockEncoder,meta);
        long totalSize=0;
        final List<Integer> encodedSizes=new ArrayList<Integer>();
        final List<ByteBuffer> encodedBlocks=new ArrayList<ByteBuffer>();
        for (int blockId=0; blockId < numBlocks; ++blockId) {
          hbw.startWriting(BlockType.DATA);
          writeTestKeyValues(hbw,blockId,includesMemstoreTS,includesTag);
          hbw.writeHeaderAndData(os);
          int headerLen=HConstants.HFILEBLOCK_HEADER_SIZE;
          byte[] encodedResultWithHeader=hbw.getUncompressedBufferWithHeader().array();
          final int encodedSize=encodedResultWithHeader.length - headerLen;
          if (encoding != DataBlockEncoding.NONE) {
            headerLen+=DataBlockEncoding.ID_SIZE;
          }
          byte[] encodedDataSection=new byte[encodedResultWithHeader.length - headerLen];
          System.arraycopy(encodedResultWithHeader,headerLen,encodedDataSection,0,encodedDataSection.length);
          final ByteBuffer encodedBuf=ByteBuffer.wrap(encodedDataSection);
          encodedSizes.add(encodedSize);
          encodedBlocks.add(encodedBuf);
          totalSize+=hbw.getOnDiskSizeWithHeader();
        }
        os.close();
        FSDataInputStream is=fs.open(path);
        meta=new HFileContextBuilder().withHBaseCheckSum(true).withCompression(algo).withIncludesMvcc(includesMemstoreTS).withIncludesTags(includesTag).build();
        HFileBlock.FSReaderImpl hbr=new HFileBlock.FSReaderImpl(is,totalSize,meta);
        hbr.setDataBlockEncoder(dataBlockEncoder);
        hbr.setIncludesMemstoreTS(includesMemstoreTS);
        HFileBlock blockFromHFile, blockUnpacked;
        int pos=0;
        for (int blockId=0; blockId < numBlocks; ++blockId) {
          blockFromHFile=hbr.readBlockData(pos,-1,-1,pread);
          assertEquals(0,HFile.getChecksumFailuresCount());
          blockFromHFile.sanityCheck();
          pos+=blockFromHFile.getOnDiskSizeWithHeader();
          assertEquals((int)encodedSizes.get(blockId),blockFromHFile.getUncompressedSizeWithoutHeader());
          assertEquals(meta.isCompressedOrEncrypted(),!blockFromHFile.isUnpacked());
          long packedHeapsize=blockFromHFile.heapSize();
          blockUnpacked=blockFromHFile.unpack(meta,hbr);
          assertTrue(blockUnpacked.isUnpacked());
          if (meta.isCompressedOrEncrypted()) {
            LOG.info("packedHeapsize=" + packedHeapsize + ", unpackedHeadsize="+ blockUnpacked.heapSize());
            assertFalse(packedHeapsize == blockUnpacked.heapSize());
            assertTrue("Packed heapSize should be < unpacked heapSize",packedHeapsize < blockUnpacked.heapSize());
          }
          ByteBuffer actualBuffer=blockUnpacked.getBufferWithoutHeader();
          if (encoding != DataBlockEncoding.NONE) {
            assertEquals("Unexpected first byte with " + buildMessageDetails(algo,encoding,pread),Long.toHexString(0),Long.toHexString(actualBuffer.get(0)));
            assertEquals("Unexpected second byte with " + buildMessageDetails(algo,encoding,pread),Long.toHexString(encoding.getId()),Long.toHexString(actualBuffer.get(1)));
            actualBuffer.position(2);
            actualBuffer=actualBuffer.slice();
          }
          ByteBuffer expectedBuffer=encodedBlocks.get(blockId);
          expectedBuffer.rewind();
          assertBuffersEqual(expectedBuffer,actualBuffer,algo,encoding,pread);
          for (          boolean reuseBuffer : new boolean[]{false,true}) {
            ByteBuffer serialized=ByteBuffer.allocate(blockFromHFile.getSerializedLength());
            blockFromHFile.serialize(serialized);
            HFileBlock deserialized=(HFileBlock)blockFromHFile.getDeserializer().deserialize(serialized,reuseBuffer);
            assertEquals("Serialization did not preserve block state. reuseBuffer=" + reuseBuffer,blockFromHFile,deserialized);
            if (blockFromHFile != blockUnpacked) {
              assertEquals("Deserializaed block cannot be unpacked correctly.",blockUnpacked,deserialized.unpack(meta,hbr));
            }
          }
        }
        is.close();
      }
    }
  }
}
