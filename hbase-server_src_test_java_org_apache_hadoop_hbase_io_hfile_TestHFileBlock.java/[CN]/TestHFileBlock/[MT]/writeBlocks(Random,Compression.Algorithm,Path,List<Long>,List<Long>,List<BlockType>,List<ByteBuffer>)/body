{
  boolean cacheOnWrite=expectedContents != null;
  FSDataOutputStream os=fs.create(path);
  HFileBlock.Writer hbw=new HFileBlock.Writer(compressAlgo,null,includesMemstoreTS,HFile.DEFAULT_CHECKSUM_TYPE,HFile.DEFAULT_BYTES_PER_CHECKSUM);
  Map<BlockType,Long> prevOffsetByType=new HashMap<BlockType,Long>();
  long totalSize=0;
  for (int i=0; i < NUM_TEST_BLOCKS; ++i) {
    long pos=os.getPos();
    int blockTypeOrdinal=rand.nextInt(BlockType.values().length);
    if (blockTypeOrdinal == BlockType.ENCODED_DATA.ordinal()) {
      blockTypeOrdinal=BlockType.DATA.ordinal();
    }
    BlockType bt=BlockType.values()[blockTypeOrdinal];
    DataOutputStream dos=hbw.startWriting(bt);
    for (int j=0; j < rand.nextInt(500); ++j) {
      dos.writeShort(i + 1);
      dos.writeInt(j + 1);
    }
    if (expectedOffsets != null)     expectedOffsets.add(os.getPos());
    if (expectedPrevOffsets != null) {
      Long prevOffset=prevOffsetByType.get(bt);
      expectedPrevOffsets.add(prevOffset != null ? prevOffset : -1);
      prevOffsetByType.put(bt,os.getPos());
    }
    expectedTypes.add(bt);
    hbw.writeHeaderAndData(os);
    totalSize+=hbw.getOnDiskSizeWithHeader();
    if (cacheOnWrite)     expectedContents.add(hbw.getUncompressedBufferWithHeader());
    if (detailedLogging) {
      LOG.info("Written block #" + i + " of type "+ bt+ ", uncompressed size "+ hbw.getUncompressedSizeWithoutHeader()+ " at offset "+ pos);
    }
  }
  os.close();
  LOG.info("Created a temporary file at " + path + ", "+ fs.getFileStatus(path).getLen()+ " byte, compression="+ compressAlgo);
  return totalSize;
}
