{
  List<KeyValue> keyValues=new ArrayList<KeyValue>();
  Random randomizer=new Random(42l + seed);
  for (int i=0; i < NUM_KEYVALUES; ++i) {
    byte[] row;
    long timestamp;
    byte[] family;
    byte[] qualifier;
    byte[] value;
    if (0 < i && randomizer.nextFloat() < CHANCE_TO_REPEAT) {
      row=CellUtil.cloneRow(keyValues.get(randomizer.nextInt(keyValues.size())));
    }
 else {
      row=new byte[FIELD_LENGTH];
      randomizer.nextBytes(row);
    }
    if (0 == i) {
      family=new byte[FIELD_LENGTH];
      randomizer.nextBytes(family);
    }
 else {
      family=CellUtil.cloneFamily(keyValues.get(0));
    }
    if (0 < i && randomizer.nextFloat() < CHANCE_TO_REPEAT) {
      qualifier=CellUtil.cloneQualifier(keyValues.get(randomizer.nextInt(keyValues.size())));
    }
 else {
      qualifier=new byte[FIELD_LENGTH];
      randomizer.nextBytes(qualifier);
    }
    if (0 < i && randomizer.nextFloat() < CHANCE_TO_REPEAT) {
      value=CellUtil.cloneValue(keyValues.get(randomizer.nextInt(keyValues.size())));
    }
 else {
      value=new byte[FIELD_LENGTH];
      randomizer.nextBytes(value);
    }
    if (0 < i && randomizer.nextFloat() < CHANCE_TO_REPEAT) {
      timestamp=keyValues.get(randomizer.nextInt(keyValues.size())).getTimestamp();
    }
 else {
      timestamp=randomizer.nextLong();
    }
    if (!useTag) {
      keyValues.add(new KeyValue(row,family,qualifier,timestamp,value));
    }
 else {
      keyValues.add(new KeyValue(row,family,qualifier,timestamp,value,new Tag[]{new ArrayBackedTag((byte)1,Bytes.toBytes("myTagVal"))}));
    }
  }
  int totalSize=0;
  Collections.sort(keyValues,CellComparator.COMPARATOR);
  for (  KeyValue kv : keyValues) {
    totalSize+=kv.getLength();
    if (includesMemstoreTS) {
      long memstoreTS=randomizer.nextLong();
      kv.setSequenceId(memstoreTS);
      totalSize+=WritableUtils.getVIntSize(memstoreTS);
    }
    hbw.write(kv);
  }
  return totalSize;
}
