{
  final int n=5;
  final int m=100000000;
  StringBuilder valueSB=new StringBuilder();
  for (int i=0; i < 100; i++) {
    valueSB.append((byte)(Math.random() * 10));
  }
  StringBuilder rowSB=new StringBuilder();
  for (int i=0; i < 50; i++) {
    rowSB.append((byte)(Math.random() * 10));
  }
  KeyValue[] kvs=genKVs(Bytes.toBytes(rowSB.toString()),family,Bytes.toBytes(valueSB.toString()),1,n);
  Arrays.sort(kvs,KeyValue.COMPARATOR);
  ByteBuffer loadValueBuffer=ByteBuffer.allocate(1024);
  Result r=new Result(kvs);
  byte[][] qfs=new byte[n][Bytes.SIZEOF_INT];
  for (int i=0; i < n; ++i) {
    System.arraycopy(qfs[i],0,Bytes.toBytes(i),0,Bytes.SIZEOF_INT);
  }
  for (int k=0; k < 100000; k++) {
    for (int i=0; i < n; ++i) {
      r.getValue(family,qfs[i]);
      loadValueBuffer.clear();
      r.loadValue(family,qfs[i],loadValueBuffer);
      loadValueBuffer.flip();
    }
  }
  System.gc();
  long start=System.nanoTime();
  for (int k=0; k < m; k++) {
    for (int i=0; i < n; ++i) {
      loadValueBuffer.clear();
      r.loadValue(family,qfs[i],loadValueBuffer);
      loadValueBuffer.flip();
    }
  }
  long stop=System.nanoTime();
  System.out.println("loadValue(): " + (stop - start));
  System.gc();
  start=System.nanoTime();
  for (int k=0; k < m; k++) {
    for (int i=0; i < n; i++) {
      r.getValue(family,qfs[i]);
    }
  }
  stop=System.nanoTime();
  System.out.println("getValue():  " + (stop - start));
}
