{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.startRow=iprot.readBinary();
    struct.setStartRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list509=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list509.size);
      for (int _i510=0; _i510 < _list509.size; ++_i510) {
        ByteBuffer _elem511;
        _elem511=iprot.readBinary();
        struct.columns.add(_elem511);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(3)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map512=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map512.size);
      for (int _i513=0; _i513 < _map512.size; ++_i513) {
        ByteBuffer _key514;
        ByteBuffer _val515;
        _key514=iprot.readBinary();
        _val515=iprot.readBinary();
        struct.attributes.put(_key514,_val515);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
