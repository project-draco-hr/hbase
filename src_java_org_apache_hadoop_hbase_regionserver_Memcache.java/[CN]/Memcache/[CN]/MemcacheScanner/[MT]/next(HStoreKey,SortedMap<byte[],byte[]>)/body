{
  if (this.scannerClosed) {
    return false;
  }
  Map<byte[],Long> deletes=new TreeMap<byte[],Long>(Bytes.BYTES_COMPARATOR);
  Map<byte[],Cell> rowResults=new TreeMap<byte[],Cell>(Bytes.BYTES_COMPARATOR);
  if (results.size() > 0) {
    results.clear();
  }
  long latestTimestamp=-1;
  while (results.size() <= 0 && this.currentRow != null) {
    if (deletes.size() > 0) {
      deletes.clear();
    }
    if (rowResults.size() > 0) {
      rowResults.clear();
    }
    key.setRow(this.currentRow);
    key.setVersion(this.timestamp);
    getFull(key,isWildcardScanner() ? null : this.columns,deletes,rowResults);
    for (    Map.Entry<byte[],Long> e : deletes.entrySet()) {
      rowResults.put(e.getKey(),new Cell(HLogEdit.deleteBytes.get(),e.getValue().longValue()));
    }
    for (    Map.Entry<byte[],Cell> e : rowResults.entrySet()) {
      byte[] column=e.getKey();
      Cell c=e.getValue();
      if (isWildcardScanner()) {
        if (!columnMatch(column)) {
          continue;
        }
      }
      if (c.getTimestamp() != HConstants.LATEST_TIMESTAMP && c.getTimestamp() > latestTimestamp) {
        latestTimestamp=c.getTimestamp();
      }
      results.put(column,c.getValue());
    }
    this.currentRow=getNextRow(this.currentRow);
  }
  if (key.getTimestamp() == HConstants.LATEST_TIMESTAMP) {
    key.setVersion(latestTimestamp);
  }
  return results.size() > 0;
}
