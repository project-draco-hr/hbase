{
  HStoreKey strippedKey=null;
  HStoreKey search_key=candidateKeys.isEmpty() ? new HStoreKey(key) : new HStoreKey(candidateKeys.firstKey().getRow());
  Iterator<HStoreKey> key_iterator=null;
  HStoreKey found_key=null;
  SortedMap<HStoreKey,byte[]> tailMap=map.tailMap(search_key);
  if (!tailMap.isEmpty() && tailMap.firstKey().getRow().compareTo(key) <= 0) {
    key_iterator=tailMap.keySet().iterator();
    do {
      found_key=key_iterator.next();
      if (found_key.getRow().compareTo(key) <= 0) {
        strippedKey=stripTimestamp(found_key);
        if (HLogEdit.isDeleted(tailMap.get(found_key))) {
          if (candidateKeys.containsKey(strippedKey)) {
            long bestCandidateTs=candidateKeys.get(strippedKey).longValue();
            if (bestCandidateTs <= found_key.getTimestamp()) {
              candidateKeys.remove(strippedKey);
            }
          }
        }
 else {
          candidateKeys.put(strippedKey,new Long(found_key.getTimestamp()));
        }
      }
    }
 while (found_key.getRow().compareTo(key) <= 0 && key_iterator.hasNext());
  }
 else {
    SortedMap<HStoreKey,byte[]> headMap=map.headMap(search_key);
    if (headMap.isEmpty()) {
      return;
    }
    if (candidateKeys.isEmpty()) {
      HStoreKey[] cells=headMap.keySet().toArray(new HStoreKey[headMap.keySet().size()]);
      Text lastRowFound=null;
      for (int i=cells.length - 1; i >= 0; i--) {
        HStoreKey thisKey=cells[i];
        if (lastRowFound != null && !lastRowFound.equals(thisKey.getRow())) {
          break;
        }
        if (!HLogEdit.isDeleted(headMap.get(thisKey))) {
          lastRowFound=thisKey.getRow();
          candidateKeys.put(stripTimestamp(thisKey),new Long(thisKey.getTimestamp()));
        }
      }
    }
 else {
      SortedMap<HStoreKey,byte[]> thisRowTailMap=headMap.tailMap(new HStoreKey(headMap.lastKey().getRow()));
      key_iterator=thisRowTailMap.keySet().iterator();
      do {
        found_key=key_iterator.next();
        if (HLogEdit.isDeleted(thisRowTailMap.get(found_key))) {
          strippedKey=stripTimestamp(found_key);
          if (candidateKeys.containsKey(strippedKey)) {
            long bestCandidateTs=candidateKeys.get(strippedKey).longValue();
            if (bestCandidateTs <= found_key.getTimestamp()) {
              candidateKeys.remove(strippedKey);
            }
          }
        }
 else {
          candidateKeys.put(stripTimestamp(found_key),found_key.getTimestamp());
        }
      }
 while (key_iterator.hasNext());
    }
  }
}
