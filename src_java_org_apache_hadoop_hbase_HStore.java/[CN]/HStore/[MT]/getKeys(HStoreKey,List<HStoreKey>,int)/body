{
  List<HStoreKey> keys=allKeys;
  if (keys == null) {
    keys=new ArrayList<HStoreKey>();
  }
  this.lock.obtainReadLock();
  try {
    MapFile.Reader[] maparray=getReaders();
    for (int i=maparray.length - 1; i >= 0; i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        map.reset();
        ImmutableBytesWritable readval=new ImmutableBytesWritable();
        HStoreKey readkey=(HStoreKey)map.getClosest(origin,readval);
        if (readkey == null) {
          continue;
        }
        if (!readkey.matchesRowCol(origin)) {
          continue;
        }
        if (!isDeleted(readkey,readval.get(),null,null) && !keys.contains(readkey)) {
          keys.add(new HStoreKey(readkey));
        }
        for (readval=new ImmutableBytesWritable(); map.next(readkey,readval) && readkey.matchesRowCol(origin); readval=new ImmutableBytesWritable()) {
          if (!isDeleted(readkey,readval.get(),null,null) && !keys.contains(readkey)) {
            keys.add(new HStoreKey(readkey));
            if (versions != ALL_VERSIONS && keys.size() >= versions) {
              break;
            }
          }
        }
      }
    }
    return keys;
  }
  finally {
    this.lock.releaseReadLock();
  }
}
