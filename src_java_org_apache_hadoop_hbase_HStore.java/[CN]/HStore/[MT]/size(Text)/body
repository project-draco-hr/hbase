{
  long maxSize=0L;
  long aggregateSize=0L;
  boolean splitable=true;
  if (this.storefiles.size() <= 0) {
    return new HStoreSize(0,0,splitable);
  }
  this.lock.readLock().lock();
  try {
    Long mapIndex=Long.valueOf(0L);
    for (    Map.Entry<Long,HStoreFile> e : storefiles.entrySet()) {
      HStoreFile curHSF=e.getValue();
      long size=curHSF.length();
      aggregateSize+=size;
      if (maxSize == 0L || size > maxSize) {
        maxSize=size;
        mapIndex=e.getKey();
      }
      if (splitable) {
        splitable=!curHSF.isReference();
      }
    }
    if (splitable) {
      MapFile.Reader r=this.readers.get(mapIndex);
      r.reset();
      HStoreKey firstKey=new HStoreKey();
      HStoreKey lastKey=new HStoreKey();
      Writable value=new ImmutableBytesWritable();
      r.next(firstKey,value);
      r.finalKey(lastKey);
      HStoreKey mk=(HStoreKey)r.midKey();
      if (mk != null) {
        if (mk.getRow().equals(firstKey.getRow()) && mk.getRow().equals(lastKey.getRow())) {
          return new HStoreSize(aggregateSize,maxSize,false);
        }
        midKey.set(mk.getRow());
      }
    }
  }
 catch (  IOException e) {
    LOG.warn("Failed getting store size for " + this.storeName,e);
  }
 finally {
    this.lock.readLock().unlock();
  }
  return new HStoreSize(aggregateSize,maxSize,splitable);
}
