{
  long maxSize=0L;
  long aggregateSize=0L;
  boolean splitable=true;
  if (this.storefiles.size() <= 0) {
    return new HStoreSize(0,0,splitable);
  }
  this.lock.obtainReadLock();
  try {
    Long mapIndex=Long.valueOf(0L);
    for (    Map.Entry<Long,HStoreFile> e : storefiles.entrySet()) {
      HStoreFile curHSF=e.getValue();
      long size=curHSF.length();
      aggregateSize+=size;
      if (maxSize == 0L || size > maxSize) {
        maxSize=size;
        mapIndex=e.getKey();
      }
      if (splitable) {
        splitable=!curHSF.isReference();
      }
    }
    MapFile.Reader r=this.readers.get(mapIndex);
    WritableComparable midkey=r.midKey();
    if (midkey != null) {
      midKey.set(((HStoreKey)midkey).getRow());
    }
  }
 catch (  IOException e) {
    LOG.warn("Failed getting store size",e);
  }
 finally {
    this.lock.releaseReadLock();
  }
  return new HStoreSize(aggregateSize,maxSize,splitable);
}
