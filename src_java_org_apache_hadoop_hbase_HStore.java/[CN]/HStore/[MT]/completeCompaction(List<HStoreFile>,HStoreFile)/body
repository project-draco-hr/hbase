{
  newScannerLock.writeLock().lock();
  try {
synchronized (activeScanners) {
      while (activeScanners.get() != 0) {
        try {
          activeScanners.wait();
        }
 catch (        InterruptedException e) {
        }
      }
      this.lock.writeLock().lock();
    }
    try {
      HStoreFile finalCompactedFile=new HStoreFile(conf,fs,basedir,info.getEncodedName(),family.getFamilyName(),-1,null);
      if (LOG.isDebugEnabled()) {
        LOG.debug("moving " + compactedFile.toString() + " in "+ this.compactionDir.toString()+ " to "+ finalCompactedFile.toString()+ " in "+ basedir.toString()+ " for "+ this.storeName);
      }
      if (!compactedFile.rename(this.fs,finalCompactedFile)) {
        LOG.error("Failed move of compacted file " + finalCompactedFile.toString() + " for "+ this.storeName);
        return;
      }
      List<Long> toDelete=new ArrayList<Long>();
      for (      Map.Entry<Long,HStoreFile> e : this.storefiles.entrySet()) {
        if (!compactedFiles.contains(e.getValue())) {
          continue;
        }
        Long key=e.getKey();
        MapFile.Reader reader=this.readers.remove(key);
        if (reader != null) {
          reader.close();
        }
        toDelete.add(key);
      }
      try {
        for (        Long key : toDelete) {
          HStoreFile hsf=this.storefiles.remove(key);
          hsf.delete();
        }
        Long orderVal=Long.valueOf(finalCompactedFile.loadInfo(fs));
        this.readers.put(orderVal,finalCompactedFile.getReader(this.fs,this.bloomFilter));
        this.storefiles.put(orderVal,finalCompactedFile);
      }
 catch (      IOException e) {
        e=RemoteExceptionHandler.checkIOException(e);
        LOG.error("Failed replacing compacted files for " + this.storeName + ". Compacted file is "+ finalCompactedFile.toString()+ ".  Files replaced are "+ compactedFiles.toString()+ " some of which may have been already removed",e);
      }
    }
  finally {
      this.lock.writeLock().unlock();
    }
  }
  finally {
    newScannerLock.writeLock().unlock();
  }
}
