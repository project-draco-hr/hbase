{
  if (numVersions <= 0) {
    throw new IllegalArgumentException("Number of versions must be > 0");
  }
  List<byte[]> results=new ArrayList<byte[]>();
  this.lock.obtainReadLock();
  try {
    MapFile.Reader[] maparray=maps.values().toArray(new MapFile.Reader[maps.size()]);
    for (int i=maparray.length - 1; i >= 0; i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        ImmutableBytesWritable readval=new ImmutableBytesWritable();
        map.reset();
        HStoreKey readkey=(HStoreKey)map.getClosest(key,readval);
        if (readkey == null) {
          continue;
        }
        if (readkey.matchesRowCol(key)) {
          if (readval.equals(HConstants.DELETE_BYTES)) {
            break;
          }
          results.add(readval.get());
          readval=new ImmutableBytesWritable();
          while (map.next(readkey,readval) && readkey.matchesRowCol(key)) {
            if ((numVersions > 0 && (results.size() >= numVersions)) || readval.equals(HConstants.DELETE_BYTES)) {
              break;
            }
            results.add(readval.get());
            readval=new ImmutableBytesWritable();
          }
        }
      }
      if (results.size() >= numVersions) {
        break;
      }
    }
    return results.size() == 0 ? null : ImmutableBytesWritable.toArray(results);
  }
  finally {
    this.lock.releaseReadLock();
  }
}
