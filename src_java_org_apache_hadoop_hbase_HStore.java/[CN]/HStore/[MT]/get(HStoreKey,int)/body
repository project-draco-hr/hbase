{
  if (numVersions <= 0) {
    throw new IllegalArgumentException("Number of versions must be > 0");
  }
  Vector<BytesWritable> results=new Vector<BytesWritable>();
  this.lock.obtainReadLock();
  try {
    MapFile.Reader[] maparray=maps.values().toArray(new MapFile.Reader[maps.size()]);
    for (int i=maparray.length - 1; i >= 0; i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        BytesWritable readval=new BytesWritable();
        map.reset();
        HStoreKey readkey=(HStoreKey)map.getClosest(key,readval);
        if (readkey.matchesRowCol(key)) {
          results.add(readval);
          readval=new BytesWritable();
          while (map.next(readkey,readval) && readkey.matchesRowCol(key)) {
            if (numVersions > 0 && (results.size() >= numVersions)) {
              break;
            }
 else {
              results.add(readval);
              readval=new BytesWritable();
            }
          }
        }
      }
      if (results.size() >= numVersions) {
        break;
      }
    }
    if (results.size() == 0) {
      return null;
    }
 else {
      return results.toArray(new BytesWritable[results.size()]);
    }
  }
  finally {
    this.lock.releaseReadLock();
  }
}
