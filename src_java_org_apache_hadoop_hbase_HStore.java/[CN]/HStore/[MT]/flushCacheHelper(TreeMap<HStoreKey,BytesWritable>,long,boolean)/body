{
synchronized (flushLock) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("flushing HStore " + this.regionName + "/"+ this.familyName);
    }
    HStoreFile flushedFile=HStoreFile.obtainNewHStoreFile(conf,dir,regionName,familyName,fs);
    Path mapfile=flushedFile.getMapFilePath();
    if (LOG.isDebugEnabled()) {
      LOG.debug("map file is: " + mapfile.toString());
    }
    MapFile.Writer out=new MapFile.Writer(conf,fs,mapfile.toString(),HStoreKey.class,BytesWritable.class,compression);
    try {
      for (      Map.Entry<HStoreKey,BytesWritable> es : inputCache.entrySet()) {
        HStoreKey curkey=es.getKey();
        if (this.familyName.equals(HStoreKey.extractFamily(curkey.getColumn()))) {
          out.append(curkey,es.getValue());
        }
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("HStore " + this.regionName + "/"+ this.familyName+ " flushed");
      }
    }
  finally {
      out.close();
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("writing log cache flush id");
    }
    flushedFile.writeInfo(fs,logCacheFlushId);
    if (addToAvailableMaps) {
      this.lock.obtainWriteLock();
      try {
        maps.put(logCacheFlushId,new MapFile.Reader(fs,mapfile.toString(),conf));
        mapFiles.put(logCacheFlushId,flushedFile);
        if (LOG.isDebugEnabled()) {
          LOG.debug("HStore available for " + this.regionName + "/"+ this.familyName+ " flush id="+ logCacheFlushId);
        }
      }
  finally {
        this.lock.releaseWriteLock();
      }
    }
    return getAllMapFiles();
  }
}
