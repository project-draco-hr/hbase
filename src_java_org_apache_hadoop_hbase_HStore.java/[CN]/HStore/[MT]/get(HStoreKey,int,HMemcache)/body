{
  if (numVersions <= 0) {
    throw new IllegalArgumentException("Number of versions must be > 0");
  }
  List<byte[]> results=new ArrayList<byte[]>();
  Map<Text,List<Long>> deletes=new HashMap<Text,List<Long>>();
  this.lock.obtainReadLock();
  try {
    MapFile.Reader[] maparray=getReaders();
    for (int i=maparray.length - 1; i >= 0; i--) {
      MapFile.Reader map=maparray[i];
synchronized (map) {
        map.reset();
        ImmutableBytesWritable readval=new ImmutableBytesWritable();
        HStoreKey readkey=(HStoreKey)map.getClosest(key,readval);
        if (readkey == null) {
          continue;
        }
        if (!readkey.matchesRowCol(key)) {
          continue;
        }
        if (!isDeleted(readkey,readval.get(),memcache,deletes)) {
          results.add(readval.get());
          if (hasEnoughVersions(numVersions,results)) {
            break;
          }
        }
        for (readval=new ImmutableBytesWritable(); map.next(readkey,readval) && readkey.matchesRowCol(key) && !hasEnoughVersions(numVersions,results); readval=new ImmutableBytesWritable()) {
          if (!isDeleted(readkey,readval.get(),memcache,deletes)) {
            results.add(readval.get());
          }
        }
      }
      if (hasEnoughVersions(numVersions,results)) {
        break;
      }
    }
    return results.size() == 0 ? null : ImmutableBytesWritable.toArray(results);
  }
  finally {
    this.lock.releaseReadLock();
  }
}
