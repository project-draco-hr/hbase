{
  this.lock.obtainWriteLock();
  Path curCompactStore=HStoreFile.getHStoreDir(compactdir,regionName,colFamily);
  try {
    Path doneFile=new Path(curCompactStore,COMPACTION_DONE);
    if (!fs.exists(doneFile)) {
      return;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("compaction starting");
    }
    Vector<HStoreFile> toCompactFiles=new Vector<HStoreFile>();
    Path filesToReplace=new Path(curCompactStore,COMPACTION_TO_REPLACE);
    DataInputStream in=new DataInputStream(fs.open(filesToReplace));
    try {
      int numfiles=in.readInt();
      for (int i=0; i < numfiles; i++) {
        HStoreFile hsf=new HStoreFile(conf);
        hsf.readFields(in);
        toCompactFiles.add(hsf);
      }
    }
  finally {
      in.close();
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("loaded files to be deleted");
    }
    Iterator<HStoreFile> it2=mapFiles.values().iterator();
    for (Iterator<MapFile.Reader> it=maps.values().iterator(); it.hasNext(); ) {
      MapFile.Reader curReader=it.next();
      HStoreFile curMapFile=it2.next();
      if (toCompactFiles.contains(curMapFile)) {
        curReader.close();
        it.remove();
      }
    }
    for (Iterator<HStoreFile> it=mapFiles.values().iterator(); it.hasNext(); ) {
      HStoreFile curMapFile=it.next();
      if (toCompactFiles.contains(curMapFile)) {
        it.remove();
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("unloaded existing MapFiles");
    }
    for (Iterator<HStoreFile> it=toCompactFiles.iterator(); it.hasNext(); ) {
      HStoreFile hsf=it.next();
      fs.delete(hsf.getMapFilePath());
      fs.delete(hsf.getInfoFilePath());
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("old files deleted");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("moving new MapFile into place");
    }
    HStoreFile compactedFile=new HStoreFile(conf,compactdir,regionName,colFamily,-1);
    HStoreFile finalCompactedFile=HStoreFile.obtainNewHStoreFile(conf,dir,regionName,colFamily,fs);
    fs.rename(compactedFile.getMapFilePath(),finalCompactedFile.getMapFilePath());
    fs.rename(compactedFile.getInfoFilePath(),finalCompactedFile.getInfoFilePath());
    long orderVal=finalCompactedFile.loadInfo(fs);
    if (LOG.isDebugEnabled()) {
      LOG.debug("loading new TreeMap");
    }
    mapFiles.put(orderVal,finalCompactedFile);
    maps.put(orderVal,new MapFile.Reader(fs,finalCompactedFile.getMapFilePath().toString(),conf));
  }
  finally {
    this.lock.releaseWriteLock();
  }
}
