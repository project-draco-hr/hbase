{
  Path curCompactStore=HStoreFile.getHStoreDir(this.compactionDir,regionName,familyName);
  this.lock.obtainWriteLock();
  try {
    Path doneFile=new Path(curCompactStore,COMPACTION_DONE);
    if (!fs.exists(doneFile)) {
      LOG.warn("Redoing a failed compaction");
      return;
    }
    Vector<HStoreFile> toCompactFiles=new Vector<HStoreFile>();
    Path filesToReplace=new Path(curCompactStore,COMPACTION_TO_REPLACE);
    DataInputStream in=new DataInputStream(fs.open(filesToReplace));
    try {
      int numfiles=in.readInt();
      for (int i=0; i < numfiles; i++) {
        HStoreFile hsf=new HStoreFile(conf);
        hsf.readFields(in);
        toCompactFiles.add(hsf);
      }
    }
  finally {
      in.close();
    }
    HStoreFile compactedFile=new HStoreFile(conf,this.compactionDir,regionName,familyName,-1);
    HStoreFile finalCompactedFile=HStoreFile.obtainNewHStoreFile(conf,dir,regionName,familyName,fs);
    if (LOG.isDebugEnabled()) {
      LOG.debug("moving " + compactedFile.toString() + " in "+ this.compactionDir.toString()+ " to "+ finalCompactedFile.toString()+ " in "+ dir.toString());
    }
    if (!compactedFile.rename(this.fs,finalCompactedFile)) {
      LOG.error("Failed move of compacted file " + finalCompactedFile.toString());
      return;
    }
    Vector<Long> toDelete=new Vector<Long>(toCompactFiles.size());
    for (    Map.Entry<Long,HStoreFile> e : this.storefiles.entrySet()) {
      if (!toCompactFiles.contains(e.getValue())) {
        continue;
      }
      Long key=e.getKey();
      MapFile.Reader reader=this.readers.remove(key);
      if (reader != null) {
        reader.close();
      }
      toDelete.add(key);
    }
    try {
      for (      Long key : toDelete) {
        HStoreFile hsf=this.storefiles.remove(key);
        hsf.delete();
      }
      Long orderVal=Long.valueOf(finalCompactedFile.loadInfo(fs));
      this.readers.put(orderVal,finalCompactedFile.getReader(this.fs,this.bloomFilter));
      this.storefiles.put(orderVal,finalCompactedFile);
    }
  finally {
      LOG.warn("Failed replacing compacted files.  Compacted fle is " + finalCompactedFile.toString() + ".  Files replaced are "+ toCompactFiles.toString()+ " some of which may have been removed");
    }
  }
  finally {
    this.lock.releaseWriteLock();
  }
}
