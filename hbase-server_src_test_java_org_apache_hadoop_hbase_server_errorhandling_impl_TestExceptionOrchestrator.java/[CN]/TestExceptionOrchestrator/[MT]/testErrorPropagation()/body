{
  ExceptionListener listener1=Mockito.mock(ExceptionListener.class);
  ExceptionListener listener2=Mockito.mock(ExceptionListener.class);
  ExceptionOrchestrator<Exception> orchestrator=new ExceptionOrchestrator<Exception>();
  orchestrator.addErrorListener(orchestrator.genericVisitor,listener1);
  orchestrator.addErrorListener(orchestrator.genericVisitor,listener2);
  String message="Some error";
  Object[] info=new Object[]{"info1"};
  Exception e=new ExceptionForTesting("error");
  orchestrator.receiveError(message,e,info);
  Mockito.verify(listener1,Mockito.times(1)).receiveError(message,e,info);
  Mockito.verify(listener2,Mockito.times(1)).receiveError(message,e,info);
  message="another error";
  e=new ExceptionForTesting("hello");
  info[0]="info2";
  orchestrator.receiveError(message,e,info);
  Mockito.verify(listener1,Mockito.times(1)).receiveError(message,e,info);
  Mockito.verify(listener2,Mockito.times(1)).receiveError(message,e,info);
  info[0]="timer";
  OperationAttemptTimer timer=new OperationAttemptTimer(orchestrator,1000,info);
  timer.start();
  timer.trigger();
  Mockito.verify(listener1,Mockito.times(1)).receiveError(Mockito.anyString(),Mockito.any(OperationAttemptTimeoutException.class),Mockito.argThat(new VarArgMatcher<Object>(Object.class,info)));
  Mockito.verify(listener2,Mockito.times(1)).receiveError(Mockito.anyString(),Mockito.any(OperationAttemptTimeoutException.class),Mockito.argThat(new VarArgMatcher<Object>(Object.class,info)));
}
