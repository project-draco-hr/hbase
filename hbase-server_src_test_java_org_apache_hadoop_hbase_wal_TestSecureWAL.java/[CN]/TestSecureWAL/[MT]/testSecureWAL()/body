{
  TableName tableName=TableName.valueOf("TestSecureWAL");
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor(tableName.getName()));
  HRegionInfo regioninfo=new HRegionInfo(tableName,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,false);
  final int total=10;
  final byte[] row=Bytes.toBytes("row");
  final byte[] family=Bytes.toBytes("family");
  final byte[] value=Bytes.toBytes("Test value");
  FileSystem fs=TEST_UTIL.getTestFileSystem();
  final WALFactory wals=new WALFactory(TEST_UTIL.getConfiguration(),null,"TestSecureWAL");
  final AtomicLong sequenceId=new AtomicLong(1);
  final WAL wal=wals.getWAL(regioninfo.getEncodedNameAsBytes());
  for (int i=0; i < total; i++) {
    WALEdit kvs=new WALEdit();
    kvs.add(new KeyValue(row,family,Bytes.toBytes(i),value));
    wal.append(htd,regioninfo,new WALKey(regioninfo.getEncodedNameAsBytes(),tableName,System.currentTimeMillis()),kvs,sequenceId,true,null);
  }
  wal.sync();
  final Path walPath=DefaultWALProvider.getCurrentFileName(wal);
  wals.shutdown();
  long length=fs.getFileStatus(walPath).getLen();
  FSDataInputStream in=fs.open(walPath);
  byte[] fileData=new byte[(int)length];
  IOUtils.readFully(in,fileData);
  in.close();
  assertFalse("Cells appear to be plaintext",Bytes.contains(fileData,value));
  WAL.Reader reader=wals.createReader(TEST_UTIL.getTestFileSystem(),walPath);
  int count=0;
  WAL.Entry entry=new WAL.Entry();
  while (reader.next(entry) != null) {
    count++;
    List<Cell> cells=entry.getEdit().getCells();
    assertTrue("Should be one KV per WALEdit",cells.size() == 1);
    for (    Cell cell : cells) {
      byte[] thisRow=cell.getRow();
      assertTrue("Incorrect row",Bytes.equals(thisRow,row));
      byte[] thisFamily=cell.getFamily();
      assertTrue("Incorrect family",Bytes.equals(thisFamily,family));
      byte[] thisValue=cell.getValue();
      assertTrue("Incorrect value",Bytes.equals(thisValue,value));
    }
  }
  assertEquals("Should have read back as many KVs as written",total,count);
  reader.close();
}
