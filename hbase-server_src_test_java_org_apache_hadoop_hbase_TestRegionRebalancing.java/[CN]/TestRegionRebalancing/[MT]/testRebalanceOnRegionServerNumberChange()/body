{
  Connection connection=ConnectionFactory.createConnection(UTIL.getConfiguration());
  Admin admin=connection.getAdmin();
  admin.createTable(this.desc,Arrays.copyOfRange(HBaseTestingUtility.KEYS,1,HBaseTestingUtility.KEYS.length));
  this.table=new HTable(UTIL.getConfiguration(),this.desc.getTableName());
  MetaTableAccessor.fullScanMetaAndPrint(admin.getConnection());
  assertEquals("Test table should have right number of regions",HBaseTestingUtility.KEYS.length,this.table.getStartKeys().length);
  assertRegionsAreBalanced();
  LOG.info("Started second server=" + UTIL.getHBaseCluster().startRegionServer().getRegionServer().getServerName());
  UTIL.getHBaseCluster().getMaster().balance();
  assertRegionsAreBalanced();
  assert(UTIL.getHBaseCluster().getMaster().balance() == true);
  LOG.info("Started third server=" + UTIL.getHBaseCluster().startRegionServer().getRegionServer().getServerName());
  assert(UTIL.getHBaseCluster().getMaster().balance() == true);
  assertRegionsAreBalanced();
  LOG.info("Stopped third server=" + UTIL.getHBaseCluster().stopRegionServer(2,false));
  UTIL.getHBaseCluster().waitOnRegionServer(2);
  UTIL.getHBaseCluster().getMaster().balance();
  assertRegionsAreBalanced();
  LOG.info("Readding third server=" + UTIL.getHBaseCluster().startRegionServer().getRegionServer().getServerName());
  LOG.info("Added fourth server=" + UTIL.getHBaseCluster().startRegionServer().getRegionServer().getServerName());
  assert(UTIL.getHBaseCluster().getMaster().balance() == true);
  assertRegionsAreBalanced();
  for (int i=0; i < 6; i++) {
    LOG.info("Adding " + (i + 5) + "th region server");
    UTIL.getHBaseCluster().startRegionServer();
  }
  assert(UTIL.getHBaseCluster().getMaster().balance() == true);
  assertRegionsAreBalanced();
  table.close();
  admin.close();
}
