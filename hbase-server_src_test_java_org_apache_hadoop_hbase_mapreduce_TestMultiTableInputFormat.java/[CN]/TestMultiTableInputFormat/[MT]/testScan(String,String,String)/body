{
  String jobName="Scan" + (start != null ? start.toUpperCase() : "Empty") + "To"+ (stop != null ? stop.toUpperCase() : "Empty");
  LOG.info("Before map/reduce startup - job " + jobName);
  Configuration c=new Configuration(TEST_UTIL.getConfiguration());
  c.set(KEY_STARTROW,start != null ? start : "");
  c.set(KEY_LASTROW,last != null ? last : "");
  List<Scan> scans=new ArrayList<Scan>();
  for (int i=0; i < 3; i++) {
    Scan scan=new Scan();
    scan.addFamily(INPUT_FAMILY);
    scan.setAttribute(Scan.SCAN_ATTRIBUTES_TABLE_NAME,Bytes.toBytes(TABLE_NAME + i));
    if (start != null) {
      scan.setStartRow(Bytes.toBytes(start));
    }
    if (stop != null) {
      scan.setStopRow(Bytes.toBytes(stop));
    }
    scans.add(scan);
    LOG.info("scan before: " + scan);
  }
  Job job=new Job(c,jobName);
  TableMapReduceUtil.initTableMapperJob(scans,ScanMapper.class,ImmutableBytesWritable.class,ImmutableBytesWritable.class,job);
  job.setReducerClass(ScanReducer.class);
  job.setNumReduceTasks(1);
  FileOutputFormat.setOutputPath(job,new Path(job.getJobName()));
  LOG.info("Started " + job.getJobName());
  job.waitForCompletion(true);
  assertTrue(job.isSuccessful());
  LOG.info("After map/reduce completion - job " + jobName);
}
