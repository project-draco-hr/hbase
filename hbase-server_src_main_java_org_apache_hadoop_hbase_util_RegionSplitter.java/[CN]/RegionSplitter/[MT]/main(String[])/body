{
  Configuration conf=HBaseConfiguration.create();
  Options opt=new Options();
  opt.addOption(OptionBuilder.withArgName("property=value").hasArg().withDescription("Override HBase Configuration Settings").create("D"));
  opt.addOption(OptionBuilder.withArgName("region count").hasArg().withDescription("Create a new table with a pre-split number of regions").create("c"));
  opt.addOption(OptionBuilder.withArgName("family:family:...").hasArg().withDescription("Column Families to create with new table.  Required with -c").create("f"));
  opt.addOption("h",false,"Print this usage help");
  opt.addOption("r",false,"Perform a rolling split of an existing region");
  opt.addOption(OptionBuilder.withArgName("count").hasArg().withDescription("Max outstanding splits that have unfinished major compactions").create("o"));
  opt.addOption(null,"firstrow",true,"First Row in Table for Split Algorithm");
  opt.addOption(null,"lastrow",true,"Last Row in Table for Split Algorithm");
  opt.addOption(null,"risky",false,"Skip verification steps to complete quickly." + "STRONGLY DISCOURAGED for production systems.  ");
  CommandLine cmd=new GnuParser().parse(opt,args);
  if (cmd.hasOption("D")) {
    for (    String confOpt : cmd.getOptionValues("D")) {
      String[] kv=confOpt.split("=",2);
      if (kv.length == 2) {
        conf.set(kv[0],kv[1]);
        LOG.debug("-D configuration override: " + kv[0] + "="+ kv[1]);
      }
 else {
        throw new ParseException("-D option format invalid: " + confOpt);
      }
    }
  }
  if (cmd.hasOption("risky")) {
    conf.setBoolean("split.verify",false);
  }
  boolean createTable=cmd.hasOption("c") && cmd.hasOption("f");
  boolean rollingSplit=cmd.hasOption("r");
  boolean oneOperOnly=createTable ^ rollingSplit;
  if (2 != cmd.getArgList().size() || !oneOperOnly || cmd.hasOption("h")) {
    new HelpFormatter().printHelp("RegionSplitter <TABLE> <SPLITALGORITHM>\n" + "SPLITALGORITHM is a java class name of a class implementing " + "SplitAlgorithm, or one of the special strings HexStringSplit "+ "or UniformSplit, which are built-in split algorithms. "+ "HexStringSplit treats keys as hexadecimal ASCII, and "+ "UniformSplit treats keys as arbitrary bytes.",opt);
    return;
  }
  TableName tableName=TableName.valueOf(cmd.getArgs()[0]);
  String splitClass=cmd.getArgs()[1];
  SplitAlgorithm splitAlgo=newSplitAlgoInstance(conf,splitClass);
  if (cmd.hasOption("firstrow")) {
    splitAlgo.setFirstRow(cmd.getOptionValue("firstrow"));
  }
  if (cmd.hasOption("lastrow")) {
    splitAlgo.setLastRow(cmd.getOptionValue("lastrow"));
  }
  if (createTable) {
    conf.set("split.count",cmd.getOptionValue("c"));
    createPresplitTable(tableName,splitAlgo,cmd.getOptionValue("f").split(":"),conf);
  }
  if (rollingSplit) {
    if (cmd.hasOption("o")) {
      conf.set("split.outstanding",cmd.getOptionValue("o"));
    }
    rollingSplit(tableName,splitAlgo,conf);
  }
}
