{
  LinkedList<Pair<byte[],byte[]>> finished=Lists.newLinkedList();
  LinkedList<Pair<byte[],byte[]>> logicalSplitting=Lists.newLinkedList();
  LinkedList<Pair<byte[],byte[]>> physicalSplitting=Lists.newLinkedList();
  Path rootDir=FSUtils.getRootDir(table.getConfiguration());
  Path tableDir=FSUtils.getTableDir(rootDir,table.getName());
  FileSystem fs=tableDir.getFileSystem(table.getConfiguration());
  HTableDescriptor htd=table.getTableDescriptor();
  table.clearRegionCache();
  for (  Pair<byte[],byte[]> region : regionList) {
    byte[] start=region.getFirst();
    byte[] split=region.getSecond();
    try {
      HRegionInfo dri=table.getRegionLocation(split).getRegionInfo();
      if (dri.isOffline() || !Bytes.equals(dri.getStartKey(),split)) {
        logicalSplitting.add(region);
        continue;
      }
    }
 catch (    NoServerForRegionException nsfre) {
      LOG.info(nsfre);
      logicalSplitting.add(region);
      continue;
    }
    try {
      LinkedList<HRegionInfo> check=Lists.newLinkedList();
      check.add(table.getRegionLocation(start).getRegionInfo());
      check.add(table.getRegionLocation(split).getRegionInfo());
      for (      HRegionInfo hri : check.toArray(new HRegionInfo[check.size()])) {
        byte[] sk=hri.getStartKey();
        if (sk.length == 0)         sk=splitAlgo.firstRow();
        String startKey=splitAlgo.rowToStr(sk);
        HRegionFileSystem regionFs=HRegionFileSystem.openRegionFromFileSystem(table.getConfiguration(),fs,tableDir,hri,true);
        boolean refFound=false;
        for (        HColumnDescriptor c : htd.getFamilies()) {
          if ((refFound=regionFs.hasReferences(htd.getTableName().getNameAsString()))) {
            break;
          }
        }
        if (!refFound) {
          check.remove(hri);
        }
      }
      if (check.isEmpty()) {
        finished.add(region);
      }
 else {
        physicalSplitting.add(region);
      }
    }
 catch (    NoServerForRegionException nsfre) {
      LOG.debug("No Server Exception thrown for: " + splitAlgo.rowToStr(start));
      physicalSplitting.add(region);
      table.clearRegionCache();
    }
  }
  LOG.debug("Split Scan: " + finished.size() + " finished / "+ logicalSplitting.size()+ " split wait / "+ physicalSplitting.size()+ " reference wait");
  return finished;
}
