{
  Class<?> splitClass;
  if (splitClassName.equals(HexStringSplit.class.getSimpleName())) {
    splitClass=HexStringSplit.class;
  }
 else   if (splitClassName.equals(UniformSplit.class.getSimpleName())) {
    splitClass=UniformSplit.class;
  }
 else {
    try {
      splitClass=conf.getClassByName(splitClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new IOException("Couldn't load split class " + splitClassName,e);
    }
    if (splitClass == null) {
      throw new IOException("Failed loading split class " + splitClassName);
    }
    if (!SplitAlgorithm.class.isAssignableFrom(splitClass)) {
      throw new IOException("Specified split class doesn't implement SplitAlgorithm");
    }
  }
  try {
    return splitClass.asSubclass(SplitAlgorithm.class).newInstance();
  }
 catch (  Exception e) {
    throw new IOException("Problem loading split algorithm: ",e);
  }
}
