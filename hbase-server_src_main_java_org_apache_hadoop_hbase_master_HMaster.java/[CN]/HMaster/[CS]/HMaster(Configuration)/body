{
  this.conf=new Configuration(conf);
  this.conf.setFloat(HConstants.HFILE_BLOCK_CACHE_SIZE_KEY,0.0f);
  HConnectionManager.setServerSideHConnectionRetries(this.conf,LOG);
  String hostname=Strings.domainNamePointerToHostName(DNS.getDefaultHost(conf.get("hbase.master.dns.interface","default"),conf.get("hbase.master.dns.nameserver","default")));
  int port=conf.getInt(HConstants.MASTER_PORT,HConstants.DEFAULT_MASTER_PORT);
  InetSocketAddress initialIsa=new InetSocketAddress(hostname,port);
  if (initialIsa.getAddress() == null) {
    throw new IllegalArgumentException("Failed resolve of " + initialIsa);
  }
  int numHandlers=conf.getInt("hbase.master.handler.count",conf.getInt("hbase.regionserver.handler.count",25));
  this.rpcServer=HBaseServerRPC.getServer(MasterMonitorProtocol.class,this,new Class<?>[]{MasterMonitorProtocol.class,MasterAdminProtocol.class,RegionServerStatusProtocol.class},initialIsa.getHostName(),initialIsa.getPort(),numHandlers,0,conf.getBoolean("hbase.rpc.verbose",false),conf,0);
  this.isa=this.rpcServer.getListenerAddress();
  this.serverName=new ServerName(this.isa.getHostName(),this.isa.getPort(),System.currentTimeMillis());
  this.rsFatals=new MemoryBoundedLogMessageBuffer(conf.getLong("hbase.master.buffer.for.rs.fatals",1 * 1024 * 1024));
  ZKUtil.loginClient(this.conf,"hbase.zookeeper.client.keytab.file","hbase.zookeeper.client.kerberos.principal",this.isa.getHostName());
  User.login(conf,"hbase.master.keytab.file","hbase.master.kerberos.principal",this.isa.getHostName());
  LOG.info("hbase.rootdir=" + FSUtils.getRootDir(this.conf) + ", hbase.cluster.distributed="+ this.conf.getBoolean("hbase.cluster.distributed",false));
  setName(MASTER + "-" + this.serverName.toString());
  Replication.decorateMasterConfiguration(this.conf);
  if (this.conf.get("mapred.task.id") == null) {
    this.conf.set("mapred.task.id","hb_m_" + this.serverName.toString());
  }
  this.zooKeeper=new ZooKeeperWatcher(conf,MASTER + ":" + isa.getPort(),this,true);
  this.rpcServer.startThreads();
  this.msgInterval=conf.getInt("hbase.regionserver.msginterval",3 * 1000);
  this.masterCheckCompression=conf.getBoolean("hbase.master.check.compression",true);
  this.metricsMaster=new MetricsMaster(new MetricsMasterWrapperImpl(this));
  int sleepTime=this.conf.getInt(HConstants.HEALTH_CHORE_WAKE_FREQ,HConstants.DEFAULT_THREAD_WAKE_FREQUENCY);
  if (isHealthCheckerConfigured()) {
    healthCheckChore=new HealthCheckChore(sleepTime,this,getConfiguration());
  }
  Class<? extends ClusterStatusPublisher.Publisher> publisherClass=conf.getClass(ClusterStatusPublisher.STATUS_PUBLISHER_CLASS,ClusterStatusPublisher.DEFAULT_STATUS_PUBLISHER_CLASS,ClusterStatusPublisher.Publisher.class);
  if (publisherClass != null) {
    clusterStatusPublisherChore=new ClusterStatusPublisher(this,conf,publisherClass);
    Threads.setDaemonThreadRunning(clusterStatusPublisherChore.getThread());
  }
}
