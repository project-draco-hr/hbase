{
  this.balancer=LoadBalancerFactory.getLoadBalancer(conf);
  this.loadBalancerTracker=new LoadBalancerTracker(zooKeeper,this);
  this.loadBalancerTracker.start();
  this.assignmentManager=new AssignmentManager(this,serverManager,this.balancer,this.service,this.metricsMaster,this.tableLockManager,tableStateManager);
  this.regionServerTracker=new RegionServerTracker(zooKeeper,this,this.serverManager);
  this.regionServerTracker.start();
  this.drainingServerTracker=new DrainingServerTracker(zooKeeper,this,this.serverManager);
  this.drainingServerTracker.start();
  boolean wasUp=this.clusterStatusTracker.isClusterUp();
  if (!wasUp)   this.clusterStatusTracker.setClusterUp();
  LOG.info("Server active/primary master=" + this.serverName + ", sessionid=0x"+ Long.toHexString(this.zooKeeper.getRecoverableZooKeeper().getSessionId())+ ", setting cluster-up flag (Was="+ wasUp+ ")");
  this.snapshotManager=new SnapshotManager();
  this.mpmHost=new MasterProcedureManagerHost();
  this.mpmHost.register(this.snapshotManager);
  this.mpmHost.register(new MasterFlushTableProcedureManager());
  this.mpmHost.loadProcedures(conf);
  this.mpmHost.initialize(this,this.metricsMaster);
  for (  Map.Entry<TableName,TableState.State> entry : ZKDataMigrator.queryForTableStates(getZooKeeper()).entrySet()) {
    LOG.info("Converting state from zk to new states:" + entry);
    tableStateManager.setTableState(entry.getKey(),entry.getValue());
  }
  ZKUtil.deleteChildrenRecursively(getZooKeeper(),getZooKeeper().tableZNode);
}
