{
  final String CONF_KEY="hbase.table.sanity.checks";
  boolean logWarn=false;
  if (!conf.getBoolean(CONF_KEY,true)) {
    logWarn=true;
  }
  String tableVal=htd.getConfigurationValue(CONF_KEY);
  if (tableVal != null && !Boolean.valueOf(tableVal)) {
    logWarn=true;
  }
  long maxFileSizeLowerLimit=2 * 1024 * 1024L;
  long maxFileSize=htd.getMaxFileSize();
  if (maxFileSize < 0) {
    maxFileSize=conf.getLong(HConstants.HREGION_MAX_FILESIZE,maxFileSizeLowerLimit);
  }
  if (maxFileSize < conf.getLong("hbase.hregion.max.filesize.limit",maxFileSizeLowerLimit)) {
    String message="MAX_FILESIZE for table descriptor or " + "\"hbase.hregion.max.filesize\" (" + maxFileSize + ") is too small, which might cause over splitting into unmanageable "+ "number of regions.";
    warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
  }
  long flushSizeLowerLimit=1024 * 1024L;
  long flushSize=htd.getMemStoreFlushSize();
  if (flushSize < 0) {
    flushSize=conf.getLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,flushSizeLowerLimit);
  }
  if (flushSize < conf.getLong("hbase.hregion.memstore.flush.size.limit",flushSizeLowerLimit)) {
    String message="MEMSTORE_FLUSHSIZE for table descriptor or " + "\"hbase.hregion.memstore.flush.size\" (" + flushSize + ") is too small, which might cause"+ " very frequent flushing.";
    warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
  }
  try {
    checkClassLoading(conf,htd);
  }
 catch (  Exception ex) {
    warnOrThrowExceptionForFailure(logWarn,CONF_KEY,ex.getMessage(),null);
  }
  try {
    checkCompression(htd);
  }
 catch (  IOException e) {
    warnOrThrowExceptionForFailure(logWarn,CONF_KEY,e.getMessage(),e);
  }
  try {
    checkEncryption(conf,htd);
  }
 catch (  IOException e) {
    warnOrThrowExceptionForFailure(logWarn,CONF_KEY,e.getMessage(),e);
  }
  if (htd.getColumnFamilies().length == 0) {
    String message="Table should have at least one column family.";
    warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
  }
  for (  HColumnDescriptor hcd : htd.getColumnFamilies()) {
    if (hcd.getTimeToLive() <= 0) {
      String message="TTL for column family " + hcd.getNameAsString() + " must be positive.";
      warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
    }
    if (hcd.getBlocksize() < 1024 || hcd.getBlocksize() > 16 * 1024 * 1024) {
      String message="Block size for column family " + hcd.getNameAsString() + "  must be between 1K and 16MB.";
      warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
    }
    if (hcd.getMinVersions() < 0) {
      String message="Min versions for column family " + hcd.getNameAsString() + "  must be positive.";
      warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
    }
    if (hcd.getMinVersions() > hcd.getMaxVersions()) {
      String message="Min versions for column family " + hcd.getNameAsString() + " must be less than the Max versions.";
      warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
    }
    if (hcd.getScope() < 0) {
      String message="Replication scope for column family " + hcd.getNameAsString() + "  must be positive.";
      warnOrThrowExceptionForFailure(logWarn,CONF_KEY,message,null);
    }
  }
}
