{
  List<String> backupMasterStrings;
  try {
    backupMasterStrings=ZKUtil.listChildrenNoWatch(this.zooKeeper,this.zooKeeper.backupMasterAddressesZNode);
  }
 catch (  KeeperException e) {
    LOG.warn(this.zooKeeper.prefix("Unable to list backup servers"),e);
    backupMasterStrings=new ArrayList<String>(0);
  }
  List<ServerName> backupMasters=new ArrayList<ServerName>(backupMasterStrings.size());
  for (  String s : backupMasterStrings) {
    try {
      byte[] bytes=ZKUtil.getData(this.zooKeeper,ZKUtil.joinZNode(this.zooKeeper.backupMasterAddressesZNode,s));
      if (bytes != null) {
        ServerName sn;
        try {
          sn=ServerName.parseFrom(bytes);
        }
 catch (        DeserializationException e) {
          LOG.warn("Failed parse, skipping registering backup server",e);
          continue;
        }
        backupMasters.add(sn);
      }
    }
 catch (    KeeperException e) {
      LOG.warn(this.zooKeeper.prefix("Unable to get information about " + "backup servers"),e);
    }
  }
  Collections.sort(backupMasters,new Comparator<ServerName>(){
    public int compare(    ServerName s1,    ServerName s2){
      return s1.getServerName().compareTo(s2.getServerName());
    }
  }
);
  return new ClusterStatus(VersionInfo.getVersion(),this.fileSystemManager.getClusterId().toString(),this.serverManager.getOnlineServers(),this.serverManager.getDeadServers(),this.serverName,backupMasters,this.assignmentManager.copyRegionsInTransition(),this.getCoprocessors());
}
