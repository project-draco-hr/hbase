{
  List<String> backupMasterStrings;
  try {
    backupMasterStrings=ZKUtil.listChildrenNoWatch(this.zooKeeper,this.zooKeeper.backupMasterAddressesZNode);
  }
 catch (  KeeperException e) {
    LOG.warn(this.zooKeeper.prefix("Unable to list backup servers"),e);
    backupMasterStrings=null;
  }
  List<ServerName> backupMasters=null;
  if (backupMasterStrings != null && !backupMasterStrings.isEmpty()) {
    backupMasters=new ArrayList<ServerName>(backupMasterStrings.size());
    for (    String s : backupMasterStrings) {
      try {
        byte[] bytes;
        try {
          bytes=ZKUtil.getData(this.zooKeeper,ZKUtil.joinZNode(this.zooKeeper.backupMasterAddressesZNode,s));
        }
 catch (        InterruptedException e) {
          throw new InterruptedIOException();
        }
        if (bytes != null) {
          ServerName sn;
          try {
            sn=ServerName.parseFrom(bytes);
          }
 catch (          DeserializationException e) {
            LOG.warn("Failed parse, skipping registering backup server",e);
            continue;
          }
          backupMasters.add(sn);
        }
      }
 catch (      KeeperException e) {
        LOG.warn(this.zooKeeper.prefix("Unable to get information about " + "backup servers"),e);
      }
    }
    Collections.sort(backupMasters,new Comparator<ServerName>(){
      @Override public int compare(      ServerName s1,      ServerName s2){
        return s1.getServerName().compareTo(s2.getServerName());
      }
    }
);
  }
  String clusterId=fileSystemManager != null ? fileSystemManager.getClusterId().toString() : null;
  Set<RegionState> regionsInTransition=assignmentManager != null ? assignmentManager.getRegionStates().getRegionsInTransition() : null;
  String[] coprocessors=cpHost != null ? getMasterCoprocessors() : null;
  boolean balancerOn=loadBalancerTracker != null ? loadBalancerTracker.isBalancerOn() : false;
  Map<ServerName,ServerLoad> onlineServers=null;
  Set<ServerName> deadServers=null;
  if (serverManager != null) {
    deadServers=serverManager.getDeadServers().copyServerNames();
    onlineServers=serverManager.getOnlineServers();
  }
  return new ClusterStatus(VersionInfo.getVersion(),clusterId,onlineServers,deadServers,serverName,backupMasters,regionsInTransition,coprocessors,balancerOn);
}
