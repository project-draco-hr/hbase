{
  isActiveMaster=true;
  status.setStatus("Initializing Master file system");
  this.masterActiveTime=System.currentTimeMillis();
  this.fileSystemManager=new MasterFileSystem(this,this,masterRecovery);
  this.tableDescriptors=new FSTableDescriptors(this.fileSystemManager.getFileSystem(),this.fileSystemManager.getRootDir());
  status.setStatus("Publishing Cluster ID in ZooKeeper");
  ZKClusterId.setClusterId(this.zooKeeper,fileSystemManager.getClusterId());
  if (!masterRecovery) {
    this.executorService=new ExecutorService(getServerName().toShortString());
    this.serverManager=createServerManager(this,this);
  }
  this.tableLockManager=TableLockManager.createTableLockManager(conf,zooKeeper,serverName);
  if (!masterRecovery) {
    this.tableLockManager.reapWriteLocks();
  }
  status.setStatus("Initializing ZK system trackers");
  initializeZKBasedSystemTrackers();
  if (!masterRecovery) {
    status.setStatus("Initializing master coprocessors");
    this.cpHost=new MasterCoprocessorHost(this,this.conf);
    spanReceiverHost=SpanReceiverHost.getInstance(getConfiguration());
    status.setStatus("Initializing master service threads");
    startServiceThreads();
  }
  this.serverManager.waitForRegionServers(status);
  for (  ServerName sn : this.regionServerTracker.getOnlineServers()) {
    if (!this.serverManager.isServerOnline(sn) && serverManager.checkAlreadySameHostPortAndRecordNewServer(sn,ServerLoad.EMPTY_SERVERLOAD)) {
      LOG.info("Registered server found up in zk but who has not yet " + "reported in: " + sn);
    }
  }
  if (!masterRecovery) {
    this.assignmentManager.startTimeOutMonitor();
  }
  Set<ServerName> previouslyFailedServers=this.fileSystemManager.getFailedServersFromLogFolders();
  this.fileSystemManager.removeStaleRecoveringRegionsFromZK(previouslyFailedServers);
  ServerName oldMetaServerLocation=this.catalogTracker.getMetaLocation();
  if (oldMetaServerLocation != null && previouslyFailedServers.contains(oldMetaServerLocation)) {
    splitMetaLogBeforeAssignment(oldMetaServerLocation);
  }
  Set<ServerName> previouslyFailedMetaRSs=getPreviouselyFailedMetaServersFromZK();
  this.initializationBeforeMetaAssignment=true;
  this.balancer.setClusterStatus(getClusterStatus());
  this.balancer.setMasterServices(this);
  this.balancer.initialize();
  status.setStatus("Assigning Meta Region");
  assignMeta(status);
  if (this.stopped)   return;
  if (this.distributedLogReplay && (!previouslyFailedMetaRSs.isEmpty())) {
    status.setStatus("replaying log for Meta Region");
    previouslyFailedMetaRSs.addAll(previouslyFailedServers);
    this.fileSystemManager.splitMetaLog(previouslyFailedMetaRSs);
  }
  status.setStatus("Assigning System tables");
  assignSystemTables(status);
  enableServerShutdownHandler();
  status.setStatus("Submitting log splitting work for previously failed region servers");
  for (  ServerName tmpServer : previouslyFailedServers) {
    this.serverManager.processDeadServer(tmpServer,true);
  }
  org.apache.hadoop.hbase.catalog.MetaMigrationConvertingToPB.updateMetaIfNecessary(this);
  status.setStatus("Starting assignment manager");
  this.assignmentManager.joinCluster();
  this.balancer.setClusterStatus(getClusterStatus());
  if (!masterRecovery) {
    status.setStatus("Starting balancer and catalog janitor");
    this.clusterStatusChore=getAndStartClusterStatusChore(this);
    this.balancerChore=getAndStartBalancerChore(this);
    this.catalogJanitorChore=new CatalogJanitor(this,this);
    this.namespaceJanitorChore=new NamespaceJanitor(this);
    startCatalogJanitorChore();
    startNamespaceJanitorChore();
  }
  if (this.cpHost != null) {
    try {
      this.cpHost.preMasterInitialization();
    }
 catch (    IOException e) {
      LOG.error("Coprocessor preMasterInitialization() hook failed",e);
    }
  }
  status.markComplete("Initialization successful");
  LOG.info("Master has completed initialization");
  initialized=true;
  this.serverManager.clearDeadServersWithSameHostNameAndPortOfOnlineServer();
  if (!masterRecovery) {
    if (this.cpHost != null) {
      try {
        this.cpHost.postStartMaster();
      }
 catch (      IOException ioe) {
        LOG.error("Coprocessor postStartMaster() hook failed",ioe);
      }
    }
  }
}
