{
  isActiveMaster=true;
  status.setStatus("Initializing Master file system");
  this.masterActiveTime=System.currentTimeMillis();
  this.fileSystemManager=new MasterFileSystem(this,this,metrics,masterRecovery);
  this.tableDescriptors=new FSTableDescriptors(this.fileSystemManager.getFileSystem(),this.fileSystemManager.getRootDir());
  status.setStatus("Publishing Cluster ID in ZooKeeper");
  ZKClusterId.setClusterId(this.zooKeeper,fileSystemManager.getClusterId());
  if (!masterRecovery) {
    this.executorService=new ExecutorService(getServerName().toString());
    this.serverManager=createServerManager(this,this);
  }
  status.setStatus("Initializing ZK system trackers");
  initializeZKBasedSystemTrackers();
  if (!masterRecovery) {
    status.setStatus("Initializing master coprocessors");
    this.cpHost=new MasterCoprocessorHost(this,this.conf);
    status.setStatus("Initializing master service threads");
    startServiceThreads();
  }
  this.serverManager.waitForRegionServers(status);
  for (  ServerName sn : this.regionServerTracker.getOnlineServers()) {
    if (!this.serverManager.isServerOnline(sn)) {
      LOG.info("Registering server found up in zk but who has not yet " + "reported in: " + sn);
      this.serverManager.recordNewServer(sn,ServerLoad.EMPTY_SERVERLOAD);
    }
  }
  if (!masterRecovery) {
    this.assignmentManager.startTimeOutMonitor();
  }
  status.setStatus("Splitting logs after master startup");
  splitLogAfterStartup(this.fileSystemManager);
  if (!assignRootAndMeta(status))   return;
  serverShutdownHandlerEnabled=true;
  this.serverManager.expireDeadNotExpiredServers();
  org.apache.hadoop.hbase.catalog.MetaMigrationRemovingHTD.updateMetaWithNewHRI(this);
  this.balancer.setMasterServices(this);
  status.setStatus("Starting assignment manager");
  this.assignmentManager.joinCluster();
  this.balancer.setClusterStatus(getClusterStatus());
  status.setStatus("Fixing up missing daughters");
  fixupDaughters(status);
  if (!masterRecovery) {
    status.setStatus("Starting balancer and catalog janitor");
    this.balancerChore=getAndStartBalancerChore(this);
    this.catalogJanitorChore=new CatalogJanitor(this,this);
    startCatalogJanitorChore();
    registerMBean();
  }
  status.markComplete("Initialization successful");
  LOG.info("Master has completed initialization");
  initialized=true;
  this.serverManager.clearDeadServersWithSameHostNameAndPortOfOnlineServer();
  if (!masterRecovery) {
    if (this.cpHost != null) {
      try {
        this.cpHost.postStartMaster();
      }
 catch (      IOException ioe) {
        LOG.error("Coprocessor postStartMaster() hook failed",ioe);
      }
    }
  }
}
