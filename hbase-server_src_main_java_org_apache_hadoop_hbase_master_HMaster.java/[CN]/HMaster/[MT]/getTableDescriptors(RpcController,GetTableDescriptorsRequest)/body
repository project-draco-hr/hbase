{
  List<HTableDescriptor> descriptors=new ArrayList<HTableDescriptor>();
  List<TableName> tableNameList=new ArrayList<TableName>();
  for (  HBaseProtos.TableName tableNamePB : req.getTableNamesList()) {
    tableNameList.add(ProtobufUtil.toTableName(tableNamePB));
  }
  boolean bypass=false;
  if (this.cpHost != null) {
    try {
      bypass=this.cpHost.preGetTableDescriptors(tableNameList,descriptors);
    }
 catch (    IOException ioe) {
      throw new ServiceException(ioe);
    }
  }
  if (!bypass) {
    if (req.getTableNamesCount() == 0) {
      Map<String,HTableDescriptor> descriptorMap=null;
      try {
        descriptorMap=this.tableDescriptors.getAll();
      }
 catch (      IOException e) {
        LOG.warn("Failed getting all descriptors",e);
      }
      if (descriptorMap != null) {
        for (        HTableDescriptor desc : descriptorMap.values()) {
          if (!HTableDescriptor.isSystemTable(desc.getTableName())) {
            descriptors.add(desc);
          }
        }
      }
    }
 else {
      for (      TableName s : tableNameList) {
        try {
          HTableDescriptor desc=this.tableDescriptors.get(s);
          if (desc != null) {
            descriptors.add(desc);
          }
        }
 catch (        IOException e) {
          LOG.warn("Failed getting descriptor for " + s,e);
        }
      }
    }
    if (this.cpHost != null) {
      try {
        this.cpHost.postGetTableDescriptors(descriptors);
      }
 catch (      IOException ioe) {
        throw new ServiceException(ioe);
      }
    }
  }
  GetTableDescriptorsResponse.Builder builder=GetTableDescriptorsResponse.newBuilder();
  for (  HTableDescriptor htd : descriptors) {
    builder.addTableSchema(htd.convert());
  }
  return builder.build();
}
