{
  isActiveMaster=true;
  Thread zombieDetector=new Thread(new InitializationMonitor(this));
  zombieDetector.start();
  status.setStatus("Initializing Master file system");
  this.masterActiveTime=System.currentTimeMillis();
  this.fileSystemManager=new MasterFileSystem(this,this);
  this.tableDescriptors.setCacheOn();
  this.tableDescriptors.get(TableName.META_TABLE_NAME).setRegionReplication(conf.getInt(HConstants.META_REPLICAS_NUM,HConstants.DEFAULT_META_REPLICA_NUM));
  if (preLoadTableDescriptors) {
    status.setStatus("Pre-loading table descriptors");
    this.tableDescriptors.getAll();
  }
  status.setStatus("Publishing Cluster ID in ZooKeeper");
  ZKClusterId.setClusterId(this.zooKeeper,fileSystemManager.getClusterId());
  this.serverManager=createServerManager(this,this);
  setupClusterConnection();
  this.tableLockManager.reapWriteLocks();
  this.tableStateManager=new TableStateManager(this);
  status.setStatus("Initializing ZK system trackers");
  initializeZKBasedSystemTrackers();
  status.setStatus("Initializing master coprocessors");
  this.cpHost=new MasterCoprocessorHost(this,this.conf);
  status.setStatus("Initializing master service threads");
  startServiceThreads();
  sleeper.skipSleepCycle();
  this.serverManager.waitForRegionServers(status);
  for (  ServerName sn : this.regionServerTracker.getOnlineServers()) {
    if (!this.serverManager.isServerOnline(sn) && serverManager.checkAndRecordNewServer(sn,ServerLoad.EMPTY_SERVERLOAD)) {
      LOG.info("Registered server found up in zk but who has not yet reported in: " + sn);
    }
  }
  Set<ServerName> previouslyFailedServers=this.fileSystemManager.getFailedServersFromLogFolders();
  this.fileSystemManager.removeStaleRecoveringRegionsFromZK(previouslyFailedServers);
  ServerName oldMetaServerLocation=metaTableLocator.getMetaRegionLocation(this.getZooKeeper());
  if (oldMetaServerLocation != null && previouslyFailedServers.contains(oldMetaServerLocation)) {
    splitMetaLogBeforeAssignment(oldMetaServerLocation);
  }
  Set<ServerName> previouslyFailedMetaRSs=getPreviouselyFailedMetaServersFromZK();
  previouslyFailedMetaRSs.addAll(previouslyFailedServers);
  this.initializationBeforeMetaAssignment=true;
  if (BaseLoadBalancer.tablesOnMaster(conf)) {
    waitForServerOnline();
  }
  this.balancer.setClusterStatus(getClusterStatus());
  this.balancer.setMasterServices(this);
  this.balancer.initialize();
  if (isStopped())   return;
  status.setStatus("Assigning Meta Region");
  assignMeta(status,previouslyFailedMetaRSs,HRegionInfo.DEFAULT_REPLICA_ID);
  if (isStopped())   return;
  status.setStatus("Submitting log splitting work for previously failed region servers");
  for (  ServerName tmpServer : previouslyFailedServers) {
    this.serverManager.processDeadServer(tmpServer,true);
  }
  status.setStatus("Starting assignment manager");
  this.assignmentManager.joinCluster();
  this.balancer.setClusterStatus(getClusterStatus());
  status.setStatus("Starting balancer and catalog janitor");
  this.clusterStatusChore=new ClusterStatusChore(this,balancer);
  getChoreService().scheduleChore(clusterStatusChore);
  this.balancerChore=new BalancerChore(this);
  getChoreService().scheduleChore(balancerChore);
  this.catalogJanitorChore=new CatalogJanitor(this,this);
  getChoreService().scheduleChore(catalogJanitorChore);
  status.setStatus("Starting namespace manager");
  initNamespace();
  if (this.cpHost != null) {
    try {
      this.cpHost.preMasterInitialization();
    }
 catch (    IOException e) {
      LOG.error("Coprocessor preMasterInitialization() hook failed",e);
    }
  }
  status.markComplete("Initialization successful");
  LOG.info("Master has completed initialization");
  configurationManager.registerObserver(this.balancer);
  initialized=true;
  Set<ServerName> EMPTY_SET=new HashSet<ServerName>();
  int numReplicas=conf.getInt(HConstants.META_REPLICAS_NUM,HConstants.DEFAULT_META_REPLICA_NUM);
  for (int i=1; i < numReplicas; i++) {
    assignMeta(status,EMPTY_SET,i);
  }
  unassignExcessMetaReplica(zooKeeper,numReplicas);
  status.setStatus("Starting quota manager");
  initQuotaManager();
  this.serverManager.clearDeadServersWithSameHostNameAndPortOfOnlineServer();
  if (this.cpHost != null) {
    try {
      this.cpHost.postStartMaster();
    }
 catch (    IOException ioe) {
      LOG.error("Coprocessor postStartMaster() hook failed",ioe);
    }
  }
  zombieDetector.interrupt();
}
