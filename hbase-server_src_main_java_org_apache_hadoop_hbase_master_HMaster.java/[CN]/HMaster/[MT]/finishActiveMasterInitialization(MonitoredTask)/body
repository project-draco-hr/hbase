{
  isActiveMaster=true;
  status.setStatus("Initializing Master file system");
  this.masterActiveTime=System.currentTimeMillis();
  this.fileSystemManager=new MasterFileSystem(this,this);
  status.setStatus("Publishing Cluster ID in ZooKeeper");
  ZKClusterId.setClusterId(this.zooKeeper,fileSystemManager.getClusterId());
  this.serverManager=createServerManager(this,this);
synchronized (this) {
    if (shortCircuitConnection == null) {
      shortCircuitConnection=createShortCircuitConnection();
      metaTableLocator=new MetaTableLocator();
    }
  }
  this.tableLockManager.reapWriteLocks();
  this.tableStateManager=new TableStateManager(this);
  this.tableStateManager.start();
  status.setStatus("Initializing ZK system trackers");
  initializeZKBasedSystemTrackers();
  status.setStatus("Initializing master coprocessors");
  this.cpHost=new MasterCoprocessorHost(this,this.conf);
  status.setStatus("Initializing master service threads");
  startServiceThreads();
  sleeper.skipSleepCycle();
  this.serverManager.waitForRegionServers(status);
  for (  ServerName sn : this.regionServerTracker.getOnlineServers()) {
    if (!this.serverManager.isServerOnline(sn) && serverManager.checkAndRecordNewServer(sn,ServerLoad.EMPTY_SERVERLOAD)) {
      LOG.info("Registered server found up in zk but who has not yet reported in: " + sn);
    }
  }
  Set<ServerName> previouslyFailedServers=this.fileSystemManager.getFailedServersFromLogFolders();
  this.fileSystemManager.removeStaleRecoveringRegionsFromZK(previouslyFailedServers);
  ServerName oldMetaServerLocation=metaTableLocator.getMetaRegionLocation(this.getZooKeeper());
  if (oldMetaServerLocation != null && previouslyFailedServers.contains(oldMetaServerLocation)) {
    splitMetaLogBeforeAssignment(oldMetaServerLocation);
  }
  Set<ServerName> previouslyFailedMetaRSs=getPreviouselyFailedMetaServersFromZK();
  previouslyFailedMetaRSs.addAll(previouslyFailedServers);
  this.initializationBeforeMetaAssignment=true;
  if (BaseLoadBalancer.tablesOnMaster(conf)) {
    waitForServerOnline();
  }
  this.balancer.setClusterStatus(getClusterStatus());
  this.balancer.setMasterServices(this);
  this.balancer.initialize();
  if (isStopped())   return;
  status.setStatus("Assigning Meta Region");
  assignMeta(status,previouslyFailedMetaRSs);
  if (isStopped())   return;
  status.setStatus("Submitting log splitting work for previously failed region servers");
  for (  ServerName tmpServer : previouslyFailedServers) {
    this.serverManager.processDeadServer(tmpServer,true);
  }
  status.setStatus("Starting assignment manager");
  this.assignmentManager.joinCluster();
  this.balancer.setClusterStatus(getClusterStatus());
  status.setStatus("Starting balancer and catalog janitor");
  this.clusterStatusChore=new ClusterStatusChore(this,balancer);
  Threads.setDaemonThreadRunning(clusterStatusChore.getThread());
  this.balancerChore=new BalancerChore(this);
  Threads.setDaemonThreadRunning(balancerChore.getThread());
  this.catalogJanitorChore=new CatalogJanitor(this,this);
  Threads.setDaemonThreadRunning(catalogJanitorChore.getThread());
  status.setStatus("Starting namespace manager");
  initNamespace();
  status.setStatus("Starting quota manager");
  initQuotaManager();
  if (this.cpHost != null) {
    try {
      this.cpHost.preMasterInitialization();
    }
 catch (    IOException e) {
      LOG.error("Coprocessor preMasterInitialization() hook failed",e);
    }
  }
  status.markComplete("Initialization successful");
  LOG.info("Master has completed initialization");
  initialized=true;
  this.serverManager.clearDeadServersWithSameHostNameAndPortOfOnlineServer();
  if (this.cpHost != null) {
    try {
      this.cpHost.postStartMaster();
    }
 catch (    IOException ioe) {
      LOG.error("Coprocessor postStartMaster() hook failed",ioe);
    }
  }
}
