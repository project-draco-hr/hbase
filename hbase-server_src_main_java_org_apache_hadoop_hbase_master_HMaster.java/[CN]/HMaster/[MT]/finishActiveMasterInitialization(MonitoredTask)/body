{
  isActiveMaster=true;
  Thread zombieDetector=new Thread(new InitializationMonitor(this));
  zombieDetector.start();
  status.setStatus("Initializing Master file system");
  this.masterActiveTime=System.currentTimeMillis();
  this.fileSystemManager=new MasterFileSystem(this);
  this.walManager=new MasterWalManager(this);
  this.tableDescriptors.setCacheOn();
  this.tableDescriptors.get(TableName.META_TABLE_NAME).setRegionReplication(conf.getInt(HConstants.META_REPLICAS_NUM,HConstants.DEFAULT_META_REPLICA_NUM));
  if (preLoadTableDescriptors) {
    status.setStatus("Pre-loading table descriptors");
    this.tableDescriptors.getAll();
  }
  status.setStatus("Publishing Cluster ID in ZooKeeper");
  ZKClusterId.setClusterId(this.zooKeeper,fileSystemManager.getClusterId());
  this.initLatch.countDown();
  this.serverManager=createServerManager(this);
  this.tableLockManager.reapWriteLocks();
  this.tableStateManager=new TableStateManager(this);
  status.setStatus("Initializing ZK system trackers");
  initializeZKBasedSystemTrackers();
  status.setStatus("Update TableCFs node in ZNode");
  TableCFsUpdater tableCFsUpdater=new TableCFsUpdater(zooKeeper,conf,this.clusterConnection);
  tableCFsUpdater.update();
  status.setStatus("Initializing master coprocessors");
  this.cpHost=new MasterCoprocessorHost(this,this.conf);
  status.setStatus("Initializing master service threads");
  startServiceThreads();
  sleeper.skipSleepCycle();
  status.setStatus("Wait for region servers to report in");
  waitForRegionServers(status);
  MasterMetaBootstrap metaBootstrap=createMetaBootstrap(this,status);
  metaBootstrap.splitMetaLogsBeforeAssignment();
  this.initializationBeforeMetaAssignment=true;
  if (BaseLoadBalancer.tablesOnMaster(conf)) {
    waitForServerOnline();
  }
  this.balancer.setClusterStatus(getClusterStatus());
  this.balancer.setMasterServices(this);
  this.balancer.initialize();
  if (isStopped())   return;
  status.setStatus("Assigning Meta Region");
  metaBootstrap.assignMeta();
  if (isStopped())   return;
  for (  Map.Entry<TableName,TableState.State> entry : ZKDataMigrator.queryForTableStates(getZooKeeper()).entrySet()) {
    LOG.info("Converting state from zk to new states:" + entry);
    tableStateManager.setTableState(entry.getKey(),entry.getValue());
  }
  ZKUtil.deleteChildrenRecursively(getZooKeeper(),getZooKeeper().tableZNode);
  status.setStatus("Submitting log splitting work for previously failed region servers");
  metaBootstrap.processDeadServers();
  status.setStatus("Starting assignment manager");
  this.assignmentManager.joinCluster();
  this.balancer.setClusterStatus(getClusterStatus());
  status.setStatus("Starting balancer and catalog janitor");
  this.clusterStatusChore=new ClusterStatusChore(this,balancer);
  getChoreService().scheduleChore(clusterStatusChore);
  this.balancerChore=new BalancerChore(this);
  getChoreService().scheduleChore(balancerChore);
  this.normalizerChore=new RegionNormalizerChore(this);
  getChoreService().scheduleChore(normalizerChore);
  this.catalogJanitorChore=new CatalogJanitor(this);
  getChoreService().scheduleChore(catalogJanitorChore);
  periodicDoMetricsChore=new PeriodicDoMetrics(msgInterval,this);
  getChoreService().scheduleChore(periodicDoMetricsChore);
  status.setStatus("Starting cluster schema service");
  initClusterSchemaService();
  if (this.cpHost != null) {
    try {
      this.cpHost.preMasterInitialization();
    }
 catch (    IOException e) {
      LOG.error("Coprocessor preMasterInitialization() hook failed",e);
    }
  }
  status.markComplete("Initialization successful");
  LOG.info("Master has completed initialization");
  configurationManager.registerObserver(this.balancer);
  setInitialized(true);
  status.setStatus("Assign meta replicas");
  metaBootstrap.assignMetaReplicas();
  status.setStatus("Starting quota manager");
  initQuotaManager();
  this.serverManager.clearDeadServersWithSameHostNameAndPortOfOnlineServer();
  status.setStatus("Checking ZNode ACLs");
  zooKeeper.checkAndSetZNodeAcls();
  status.setStatus("Initializing MOB Cleaner");
  initMobCleaner();
  status.setStatus("Calling postStartMaster coprocessors");
  if (this.cpHost != null) {
    try {
      this.cpHost.postStartMaster();
    }
 catch (    IOException ioe) {
      LOG.error("Coprocessor postStartMaster() hook failed",ioe);
    }
  }
  zombieDetector.interrupt();
}
