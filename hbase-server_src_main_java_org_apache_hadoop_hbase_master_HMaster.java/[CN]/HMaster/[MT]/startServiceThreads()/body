{
  this.service.startExecutorService(ExecutorType.MASTER_OPEN_REGION,conf.getInt("hbase.master.executor.openregion.threads",5));
  this.service.startExecutorService(ExecutorType.MASTER_CLOSE_REGION,conf.getInt("hbase.master.executor.closeregion.threads",5));
  this.service.startExecutorService(ExecutorType.MASTER_SERVER_OPERATIONS,conf.getInt("hbase.master.executor.serverops.threads",5));
  this.service.startExecutorService(ExecutorType.MASTER_META_SERVER_OPERATIONS,conf.getInt("hbase.master.executor.serverops.threads",5));
  this.service.startExecutorService(ExecutorType.M_LOG_REPLAY_OPS,conf.getInt("hbase.master.executor.logreplayops.threads",10));
  this.service.startExecutorService(ExecutorType.MASTER_TABLE_OPERATIONS,1);
  int cleanerInterval=conf.getInt("hbase.master.cleaner.interval",60 * 1000);
  this.logCleaner=new LogCleaner(cleanerInterval,this,conf,getMasterFileSystem().getFileSystem(),getMasterFileSystem().getOldLogDir());
  Threads.setDaemonThreadRunning(logCleaner.getThread(),getName() + ".oldLogCleaner");
  Path archiveDir=HFileArchiveUtil.getArchivePath(conf);
  this.hfileCleaner=new HFileCleaner(cleanerInterval,this,conf,getMasterFileSystem().getFileSystem(),archiveDir);
  Threads.setDaemonThreadRunning(hfileCleaner.getThread(),getName() + ".archivedHFileCleaner");
  serviceStarted=true;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Started service threads");
  }
}
