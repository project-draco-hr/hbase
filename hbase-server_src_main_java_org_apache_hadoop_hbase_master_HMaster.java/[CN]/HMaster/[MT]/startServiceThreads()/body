{
  this.executorService.startExecutorService(ExecutorType.MASTER_OPEN_REGION,conf.getInt("hbase.master.executor.openregion.threads",5));
  this.executorService.startExecutorService(ExecutorType.MASTER_CLOSE_REGION,conf.getInt("hbase.master.executor.closeregion.threads",5));
  this.executorService.startExecutorService(ExecutorType.MASTER_SERVER_OPERATIONS,conf.getInt("hbase.master.executor.serverops.threads",3));
  this.executorService.startExecutorService(ExecutorType.MASTER_META_SERVER_OPERATIONS,conf.getInt("hbase.master.executor.serverops.threads",5));
  this.executorService.startExecutorService(ExecutorType.MASTER_TABLE_OPERATIONS,1);
  String n=Thread.currentThread().getName();
  int cleanerInterval=conf.getInt("hbase.master.cleaner.interval",60 * 1000);
  this.logCleaner=new LogCleaner(cleanerInterval,this,conf,getMasterFileSystem().getFileSystem(),getMasterFileSystem().getOldLogDir());
  Threads.setDaemonThreadRunning(logCleaner.getThread(),n + ".oldLogCleaner");
  Path archiveDir=HFileArchiveUtil.getArchivePath(conf);
  this.hfileCleaner=new HFileCleaner(cleanerInterval,this,conf,getMasterFileSystem().getFileSystem(),archiveDir);
  Threads.setDaemonThreadRunning(hfileCleaner.getThread(),n + ".archivedHFileCleaner");
  if (this.healthCheckChore != null) {
    Threads.setDaemonThreadRunning(this.healthCheckChore.getThread(),n + ".healthChecker");
  }
  this.rpcServer.openServer();
  this.rpcServerOpen=true;
  if (LOG.isTraceEnabled()) {
    LOG.trace("Started service threads");
  }
}
