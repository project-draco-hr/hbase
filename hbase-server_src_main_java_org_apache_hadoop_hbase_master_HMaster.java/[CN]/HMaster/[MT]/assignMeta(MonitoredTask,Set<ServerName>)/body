{
  int assigned=0;
  long timeout=this.conf.getLong("hbase.catalog.verification.timeout",1000);
  status.setStatus("Assigning hbase:meta region");
  RegionStates regionStates=assignmentManager.getRegionStates();
  regionStates.createRegionState(HRegionInfo.FIRST_META_REGIONINFO);
  boolean rit=this.assignmentManager.processRegionInTransitionAndBlockUntilAssigned(HRegionInfo.FIRST_META_REGIONINFO);
  boolean metaRegionLocation=this.catalogTracker.verifyMetaRegionLocation(timeout);
  ServerName currentMetaServer=this.catalogTracker.getMetaLocation();
  if (!metaRegionLocation) {
    assigned++;
    if (!rit) {
      if (currentMetaServer != null) {
        if (serverManager.isServerOnline(currentMetaServer)) {
          LOG.info("Forcing expire of " + currentMetaServer);
          serverManager.expireServer(currentMetaServer);
        }
        splitMetaLogBeforeAssignment(currentMetaServer);
        previouslyFailedMetaRSs.add(currentMetaServer);
      }
      assignmentManager.assignMeta();
    }
  }
 else {
    regionStates.updateRegionState(HRegionInfo.FIRST_META_REGIONINFO,State.OPEN,currentMetaServer);
    this.assignmentManager.regionOnline(HRegionInfo.FIRST_META_REGIONINFO,currentMetaServer);
  }
  enableMeta(TableName.META_TABLE_NAME);
  if ((RecoveryMode.LOG_REPLAY == this.getMasterFileSystem().getLogRecoveryMode()) && (!previouslyFailedMetaRSs.isEmpty())) {
    status.setStatus("replaying log for Meta Region");
    this.fileSystemManager.splitMetaLog(previouslyFailedMetaRSs);
  }
  enableServerShutdownHandler(assigned != 0);
  LOG.info("hbase:meta assigned=" + assigned + ", rit="+ rit+ ", location="+ catalogTracker.getMetaLocation());
  status.setStatus("META assigned.");
}
