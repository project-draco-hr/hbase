{
  int assigned=0;
  long timeout=this.conf.getLong("hbase.catalog.verification.timeout",1000);
  status.setStatus("Assigning hbase:meta region");
  ServerName logReplayFailedMetaServer=null;
  RegionStates regionStates=assignmentManager.getRegionStates();
  regionStates.createRegionState(HRegionInfo.FIRST_META_REGIONINFO);
  boolean rit=this.assignmentManager.processRegionInTransitionAndBlockUntilAssigned(HRegionInfo.FIRST_META_REGIONINFO);
  boolean metaRegionLocation=this.catalogTracker.verifyMetaRegionLocation(timeout);
  ServerName currentMetaServer=this.catalogTracker.getMetaLocation();
  if (!metaRegionLocation) {
    assigned++;
    if (!rit) {
      if (!serverManager.isServerDead(currentMetaServer)) {
        LOG.info("Forcing expire of " + currentMetaServer);
        serverManager.expireServer(currentMetaServer);
        splitMetaLogBeforeAssignment(currentMetaServer);
        if (this.distributedLogReplay) {
          logReplayFailedMetaServer=currentMetaServer;
        }
      }
      assignmentManager.assignMeta();
    }
  }
 else {
    regionStates.updateRegionState(HRegionInfo.FIRST_META_REGIONINFO,State.OPEN,currentMetaServer);
    this.assignmentManager.regionOnline(HRegionInfo.FIRST_META_REGIONINFO,currentMetaServer);
  }
  enableMeta(TableName.META_TABLE_NAME);
  enableServerShutdownHandler(assigned != 0);
  if (logReplayFailedMetaServer != null) {
    this.fileSystemManager.splitMetaLog(logReplayFailedMetaServer);
  }
  LOG.info("hbase:meta assigned=" + assigned + ", rit="+ rit+ ", location="+ catalogTracker.getMetaLocation());
  status.setStatus("META assigned.");
}
