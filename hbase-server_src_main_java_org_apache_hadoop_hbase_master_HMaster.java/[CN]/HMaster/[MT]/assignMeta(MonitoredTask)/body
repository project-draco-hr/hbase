{
  int assigned=0;
  long timeout=this.conf.getLong("hbase.catalog.verification.timeout",1000);
  boolean beingExpired=false;
  status.setStatus("Assigning META region");
  assignmentManager.getRegionStates().createRegionState(HRegionInfo.FIRST_META_REGIONINFO);
  boolean rit=this.assignmentManager.processRegionInTransitionAndBlockUntilAssigned(HRegionInfo.FIRST_META_REGIONINFO);
  boolean metaRegionLocation=this.catalogTracker.verifyMetaRegionLocation(timeout);
  if (!rit && !metaRegionLocation) {
    ServerName currentMetaServer=this.catalogTracker.getMetaLocation();
    if (currentMetaServer != null) {
      beingExpired=expireIfOnline(currentMetaServer);
    }
    if (beingExpired) {
      splitMetaLogBeforeAssignment(currentMetaServer);
    }
    assignmentManager.assignMeta();
    enableSSHandWaitForMeta();
    assigned++;
    if (beingExpired && this.distributedLogReplay) {
      this.fileSystemManager.splitMetaLog(currentMetaServer);
    }
  }
 else   if (rit && !metaRegionLocation) {
    enableSSHandWaitForMeta();
    assigned++;
  }
 else {
    this.assignmentManager.regionOnline(HRegionInfo.FIRST_META_REGIONINFO,this.catalogTracker.getMetaLocation());
  }
  enableMeta(TableName.META_TABLE_NAME);
  LOG.info(".META. assigned=" + assigned + ", rit="+ rit+ ", location="+ catalogTracker.getMetaLocation());
  status.setStatus("META assigned.");
}
