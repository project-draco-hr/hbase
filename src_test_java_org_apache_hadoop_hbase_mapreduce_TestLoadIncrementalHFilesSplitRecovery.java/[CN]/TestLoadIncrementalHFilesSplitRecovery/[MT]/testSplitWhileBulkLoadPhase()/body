{
  final String table="bulkPhaseSplit";
  setupTable(table,10);
  LoadIncrementalHFiles lih=new LoadIncrementalHFiles(util.getConfiguration());
  Path dir=util.getDataTestDir(table);
  Path bulk1=new Path(dir,"normalBulkload");
  FileSystem fs=util.getTestFileSystem();
  buildHFiles(fs,bulk1,1);
  HTable t=new HTable(util.getConfiguration(),Bytes.toBytes(table));
  lih.doBulkLoad(bulk1,t);
  assertExpectedTable(table,ROWCOUNT,1);
  final AtomicInteger attmptedCalls=new AtomicInteger();
  LoadIncrementalHFiles lih2=new LoadIncrementalHFiles(util.getConfiguration()){
    protected List<LoadQueueItem> tryAtomicRegionLoad(    final HConnection conn,    byte[] tableName,    final byte[] first,    Collection<LoadQueueItem> lqis){
      int i=attmptedCalls.incrementAndGet();
      if (i == 1) {
        try {
          HRegionServer hrs=util.getRSForFirstRegionInTable(Bytes.toBytes(table));
          HRegionInfo region=null;
          for (          HRegionInfo hri : hrs.getOnlineRegions()) {
            if (Bytes.equals(hri.getTableName(),Bytes.toBytes(table))) {
              hrs.splitRegion(hri,rowkey(ROWCOUNT / 2));
            }
          }
          int regions;
          do {
            regions=0;
            for (            HRegionInfo hri : hrs.getOnlineRegions()) {
              if (Bytes.equals(hri.getTableName(),Bytes.toBytes(table))) {
                regions++;
              }
            }
            if (regions != 2) {
              LOG.info("Taking some time to complete split...");
              Thread.sleep(250);
            }
          }
 while (regions != 2);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      return super.tryAtomicRegionLoad(conn,tableName,first,lqis);
    }
  }
;
  Path bulk2=new Path(dir,"bulkload2");
  buildHFiles(fs,bulk2,2);
  lih2.doBulkLoad(bulk2,t);
  assertEquals(attmptedCalls.get(),3);
  assertExpectedTable(table,ROWCOUNT,2);
}
