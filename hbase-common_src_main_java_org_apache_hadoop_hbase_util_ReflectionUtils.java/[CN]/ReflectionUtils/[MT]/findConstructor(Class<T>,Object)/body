{
  Constructor<T>[] constructors=(Constructor<T>[])type.getConstructors();
  for (  Constructor<T> ctor : constructors) {
    Class<?>[] ctorParamTypes=ctor.getParameterTypes();
    if (ctorParamTypes.length != paramTypes.length) {
      continue;
    }
    boolean match=true;
    for (int i=0; i < ctorParamTypes.length && match; ++i) {
      Class<?> paramType=paramTypes[i].getClass();
      match=(!ctorParamTypes[i].isPrimitive()) ? ctorParamTypes[i].isAssignableFrom(paramType) : ((int.class.equals(ctorParamTypes[i]) && Integer.class.equals(paramType)) || (long.class.equals(ctorParamTypes[i]) && Long.class.equals(paramType)) || (double.class.equals(ctorParamTypes[i]) && Double.class.equals(paramType))|| (char.class.equals(ctorParamTypes[i]) && Character.class.equals(paramType))|| (short.class.equals(ctorParamTypes[i]) && Short.class.equals(paramType))|| (boolean.class.equals(ctorParamTypes[i]) && Boolean.class.equals(paramType))|| (byte.class.equals(ctorParamTypes[i]) && Byte.class.equals(paramType)));
    }
    if (match) {
      return ctor;
    }
  }
  throw new UnsupportedOperationException("Unable to find suitable constructor for class " + type.getName());
}
