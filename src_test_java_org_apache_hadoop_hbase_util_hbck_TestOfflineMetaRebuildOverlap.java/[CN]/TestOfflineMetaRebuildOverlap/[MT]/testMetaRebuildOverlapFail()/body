{
  byte[] startKey=splits[0];
  byte[] endKey=splits[2];
  createRegion(conf,htbl,startKey,endKey);
  wipeOutMeta();
  assertEquals(0,scanMeta());
  assertErrors(doFsck(conf,false),new ERROR_CODE[]{ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED});
  TEST_UTIL.shutdownMiniHBaseCluster();
  TEST_UTIL.shutdownMiniZKCluster();
  HBaseFsck fsck=new HBaseFsck(conf);
  assertFalse(fsck.rebuildMeta());
  Multimap<byte[],HbckInfo> problems=fsck.getOverlapGroups(table);
  assertEquals(1,problems.keySet().size());
  assertEquals(3,problems.size());
  TEST_UTIL.startMiniZKCluster();
  TEST_UTIL.restartHBaseCluster(3);
  assertEquals(0,scanMeta());
  HTableDescriptor[] htbls=TEST_UTIL.getHBaseAdmin().listTables();
  LOG.info("Tables present after restart: " + Arrays.toString(htbls));
  assertEquals(1,htbls.length);
  assertErrors(doFsck(conf,false),new ERROR_CODE[]{ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED,ERROR_CODE.NOT_IN_META_OR_DEPLOYED});
}
