{
  AbstractResponse res=null;
  CancellableRegionServerCallable callable=currentCallable;
  try {
    if (callable == null) {
      callable=createCallable(server,tableName,multiAction);
    }
    RpcRetryingCaller<AbstractResponse> caller=createCaller(callable);
    try {
      if (callsInProgress != null) {
        callsInProgress.add(callable);
      }
      res=caller.callWithoutRetries(callable,currentCallTotalTimeout);
      if (res == null) {
        return;
      }
    }
 catch (    IOException e) {
      receiveGlobalFailure(multiAction,server,numAttempt,e);
      return;
    }
catch (    Throwable t) {
      LOG.error("#" + id + ", Caught throwable while calling. This is unexpected."+ " Retrying. Server is "+ server+ ", tableName="+ tableName,t);
      receiveGlobalFailure(multiAction,server,numAttempt,t);
      return;
    }
    if (res.type() == AbstractResponse.ResponseType.MULTI) {
      receiveMultiAction(multiAction,server,(MultiResponse)res,numAttempt);
    }
 else {
      if (results != null) {
        SingleResponse singleResponse=(SingleResponse)res;
        results[0]=singleResponse.getEntry();
      }
      decActionCounter(1);
    }
  }
 catch (  Throwable t) {
    LOG.error("Internal AsyncProcess #" + id + " error for "+ tableName+ " processing for "+ server,t);
    throw new RuntimeException(t);
  }
 finally {
    decTaskCounters(multiAction.getRegions(),server);
    if (callsInProgress != null && callable != null && res != null) {
      callsInProgress.remove(callable);
    }
  }
}
