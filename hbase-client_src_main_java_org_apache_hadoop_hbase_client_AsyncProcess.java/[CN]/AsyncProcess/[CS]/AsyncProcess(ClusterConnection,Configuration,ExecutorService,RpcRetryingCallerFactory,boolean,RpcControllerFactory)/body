{
  if (hc == null) {
    throw new IllegalArgumentException("HConnection cannot be null.");
  }
  this.connection=hc;
  this.pool=pool;
  this.globalErrors=useGlobalErrors ? new BatchErrors() : null;
  this.id=COUNTER.incrementAndGet();
  this.pause=conf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  this.numTries=conf.getInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);
  this.timeout=conf.getInt(HConstants.HBASE_RPC_TIMEOUT_KEY,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  this.primaryCallTimeoutMicroseconds=conf.getInt(PRIMARY_CALL_TIMEOUT_KEY,10000);
  this.maxTotalConcurrentTasks=conf.getInt(HConstants.HBASE_CLIENT_MAX_TOTAL_TASKS,HConstants.DEFAULT_HBASE_CLIENT_MAX_TOTAL_TASKS);
  this.maxConcurrentTasksPerServer=conf.getInt(HConstants.HBASE_CLIENT_MAX_PERSERVER_TASKS,HConstants.DEFAULT_HBASE_CLIENT_MAX_PERSERVER_TASKS);
  this.maxConcurrentTasksPerRegion=conf.getInt(HConstants.HBASE_CLIENT_MAX_PERREGION_TASKS,HConstants.DEFAULT_HBASE_CLIENT_MAX_PERREGION_TASKS);
  this.startLogErrorsCnt=conf.getInt(START_LOG_ERRORS_AFTER_COUNT_KEY,DEFAULT_START_LOG_ERRORS_AFTER_COUNT);
  if (this.maxTotalConcurrentTasks <= 0) {
    throw new IllegalArgumentException("maxTotalConcurrentTasks=" + maxTotalConcurrentTasks);
  }
  if (this.maxConcurrentTasksPerServer <= 0) {
    throw new IllegalArgumentException("maxConcurrentTasksPerServer=" + maxConcurrentTasksPerServer);
  }
  if (this.maxConcurrentTasksPerRegion <= 0) {
    throw new IllegalArgumentException("maxConcurrentTasksPerRegion=" + maxConcurrentTasksPerRegion);
  }
  this.serverTrackerTimeout=0;
  for (int i=0; i < this.numTries; ++i) {
    serverTrackerTimeout+=ConnectionUtils.getPauseTime(this.pause,i);
  }
  this.rpcCallerFactory=rpcCaller;
  this.rpcFactory=rpcFactory;
}
