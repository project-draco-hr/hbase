{
  if (hc == null) {
    throw new IllegalArgumentException("HConnection cannot be null.");
  }
  this.hConnection=hc;
  this.tableName=tableName;
  this.pool=pool;
  this.callback=callback;
  this.pause=conf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  this.numTries=conf.getInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);
  this.maxTotalConcurrentTasks=conf.getInt("hbase.client.max.total.tasks",100);
  this.maxConcurrentTasksPerServer=conf.getInt("hbase.client.max.perserver.tasks",5);
  this.maxConcurrentTasksPerRegion=conf.getInt("hbase.client.max.perregion.tasks",1);
  if (this.maxTotalConcurrentTasks <= 0) {
    throw new IllegalArgumentException("maxTotalConcurrentTasks=" + maxTotalConcurrentTasks);
  }
  if (this.maxConcurrentTasksPerServer <= 0) {
    throw new IllegalArgumentException("maxConcurrentTasksPerServer=" + maxConcurrentTasksPerServer);
  }
  if (this.maxConcurrentTasksPerRegion <= 0) {
    throw new IllegalArgumentException("maxConcurrentTasksPerRegion=" + maxConcurrentTasksPerRegion);
  }
  this.useServerTrackerForRetries=conf.getBoolean(HConnectionManager.RETRIES_BY_SERVER_KEY,true);
  if (this.useServerTrackerForRetries) {
    this.serverTrackerTimeout=0;
    for (int i=0; i < this.numTries; ++i) {
      serverTrackerTimeout+=ConnectionUtils.getPauseTime(this.pause,i);
    }
  }
  this.rpcCallerFactory=rpcCaller;
}
