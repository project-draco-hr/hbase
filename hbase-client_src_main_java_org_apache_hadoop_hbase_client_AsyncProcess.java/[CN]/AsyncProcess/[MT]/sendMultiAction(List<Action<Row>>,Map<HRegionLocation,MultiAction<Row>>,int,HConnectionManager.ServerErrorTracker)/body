{
  for (  Map.Entry<HRegionLocation,MultiAction<Row>> e : actionsByServer.entrySet()) {
    final HRegionLocation loc=e.getKey();
    final MultiAction<Row> multi=e.getValue();
    incTaskCounters(multi.getRegions(),loc.getServerName());
    Runnable runnable=Trace.wrap("AsyncProcess.sendMultiAction",new Runnable(){
      @Override public void run(){
        MultiResponse res;
        try {
          MultiServerCallable<Row> callable=createCallable(loc,multi);
          try {
            res=createCaller(callable).callWithoutRetries(callable);
          }
 catch (          IOException e) {
            LOG.warn("The call to the region server failed, we don't know where we stand, " + loc.getServerName(),e);
            resubmitAll(initialActions,multi,loc,numAttempt + 1,e,errorsByServer);
            return;
          }
          receiveMultiAction(initialActions,multi,loc,res,numAttempt,errorsByServer);
        }
  finally {
          decTaskCounters(multi.getRegions(),loc.getServerName());
        }
      }
    }
);
    try {
      this.pool.submit(runnable);
    }
 catch (    RejectedExecutionException ree) {
      decTaskCounters(multi.getRegions(),loc.getServerName());
      LOG.warn("The task was rejected by the pool. This is unexpected." + " Server is " + loc.getServerName(),ree);
      resubmitAll(initialActions,multi,loc,numAttempt + 1,ree,errorsByServer);
    }
  }
}
