{
  for (  Map.Entry<ServerName,MultiAction<Row>> e : actionsByServer.entrySet()) {
    final ServerName server=e.getKey();
    final MultiAction<Row> multiAction=e.getValue();
    incTaskCounters(multiAction.getRegions(),server);
    Runnable runnable=Trace.wrap("AsyncProcess.sendMultiAction",new Runnable(){
      @Override public void run(){
        MultiResponse res;
        try {
          MultiServerCallable<Row> callable=createCallable(server,multiAction);
          try {
            res=createCaller(callable).callWithoutRetries(callable);
          }
 catch (          IOException e) {
            receiveGlobalFailure(initialActions,multiAction,server,numAttempt,e,errorsByServer);
            return;
          }
catch (          Throwable t) {
            LOG.error("#" + id + ", Caught throwable while calling. This is unexpected."+ " Retrying. Server is "+ server.getServerName()+ ", tableName="+ tableName,t);
            receiveGlobalFailure(initialActions,multiAction,server,numAttempt,t,errorsByServer);
            return;
          }
          receiveMultiAction(initialActions,multiAction,server,res,numAttempt,errorsByServer);
        }
  finally {
          decTaskCounters(multiAction.getRegions(),server);
        }
      }
    }
);
    try {
      this.pool.submit(runnable);
    }
 catch (    RejectedExecutionException ree) {
      decTaskCounters(multiAction.getRegions(),server);
      LOG.warn("#" + id + ", the task was rejected by the pool. This is unexpected."+ " Server is "+ server.getServerName(),ree);
      receiveGlobalFailure(initialActions,multiAction,server,numAttempt,ree,errorsByServer);
    }
  }
}
