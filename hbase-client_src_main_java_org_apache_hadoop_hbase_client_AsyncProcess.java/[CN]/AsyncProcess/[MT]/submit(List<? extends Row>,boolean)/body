{
  if (rows.isEmpty()) {
    return;
  }
  Map<ServerName,MultiAction<Row>> actionsByServer=new HashMap<ServerName,MultiAction<Row>>();
  List<Action<Row>> retainedActions=new ArrayList<Action<Row>>(rows.size());
  long currentTaskCnt=tasksDone.get();
  boolean alreadyLooped=false;
  NonceGenerator ng=this.hConnection.getNonceGenerator();
  do {
    if (alreadyLooped) {
      waitForNextTaskDone(currentTaskCnt);
      currentTaskCnt=tasksDone.get();
    }
 else {
      alreadyLooped=true;
    }
    waitForMaximumCurrentTasks(maxTotalConcurrentTasks - 1);
    Map<Long,Boolean> regionIncluded=new HashMap<Long,Boolean>();
    Map<ServerName,Boolean> serverIncluded=new HashMap<ServerName,Boolean>();
    int posInList=-1;
    Iterator<? extends Row> it=rows.iterator();
    while (it.hasNext()) {
      Row r=it.next();
      HRegionLocation loc=findDestLocation(r,posInList);
      if (loc == null) {
        it.remove();
      }
 else       if (canTakeOperation(loc,regionIncluded,serverIncluded)) {
        Action<Row> action=new Action<Row>(r,++posInList);
        setNonce(ng,r,action);
        retainedActions.add(action);
        addAction(loc,action,actionsByServer,ng);
        it.remove();
      }
    }
  }
 while (retainedActions.isEmpty() && atLeastOne && !hasError());
  HConnectionManager.ServerErrorTracker errorsByServer=createServerErrorTracker();
  sendMultiAction(retainedActions,actionsByServer,1,errorsByServer);
}
