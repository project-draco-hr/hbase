{
  String className=conf.get(MobConstants.MOB_COMPACTOR_CLASS_KEY,PartitionedMobCompactor.class.getName());
  MobCompactor compactor=null;
  try {
    compactor=ReflectionUtils.instantiateWithCustomCtor(className,new Class[]{Configuration.class,FileSystem.class,TableName.class,HColumnDescriptor.class,ExecutorService.class},new Object[]{conf,fs,tableName,hcd,pool});
  }
 catch (  Exception e) {
    throw new IOException("Unable to load configured mob file compactor '" + className + "'",e);
  }
  boolean tableLocked=false;
  TableLock lock=null;
  try {
    if (tableLockManager != null) {
      lock=tableLockManager.writeLock(MobUtils.getTableLockName(tableName),"Run MobCompactor");
      lock.acquire();
    }
    tableLocked=true;
    compactor.compact(allFiles);
  }
 catch (  Exception e) {
    LOG.error("Failed to compact the mob files for the column " + hcd.getNameAsString() + " in the table "+ tableName.getNameAsString(),e);
  }
 finally {
    if (lock != null && tableLocked) {
      try {
        lock.release();
      }
 catch (      IOException e) {
        LOG.error("Failed to release the write lock for the table " + tableName.getNameAsString(),e);
      }
    }
  }
}
