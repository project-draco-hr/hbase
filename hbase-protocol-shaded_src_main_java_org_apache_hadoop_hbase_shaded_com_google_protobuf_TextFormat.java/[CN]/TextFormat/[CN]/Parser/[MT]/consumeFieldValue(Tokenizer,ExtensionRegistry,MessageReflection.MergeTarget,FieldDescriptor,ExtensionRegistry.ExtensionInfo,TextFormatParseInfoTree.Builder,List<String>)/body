{
  Object value=null;
  if (field.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {
    final String endToken;
    if (tokenizer.tryConsume("<")) {
      endToken=">";
    }
 else {
      tokenizer.consume("{");
      endToken="}";
    }
    final MessageReflection.MergeTarget subField;
    subField=target.newMergeTargetForField(field,(extension == null) ? null : extension.defaultInstance);
    while (!tokenizer.tryConsume(endToken)) {
      if (tokenizer.atEnd()) {
        throw tokenizer.parseException("Expected \"" + endToken + "\".");
      }
      mergeField(tokenizer,extensionRegistry,subField,parseTreeBuilder,unknownFields);
    }
    value=subField.finish();
  }
 else {
switch (field.getType()) {
case INT32:
case SINT32:
case SFIXED32:
      value=tokenizer.consumeInt32();
    break;
case INT64:
case SINT64:
case SFIXED64:
  value=tokenizer.consumeInt64();
break;
case UINT32:
case FIXED32:
value=tokenizer.consumeUInt32();
break;
case UINT64:
case FIXED64:
value=tokenizer.consumeUInt64();
break;
case FLOAT:
value=tokenizer.consumeFloat();
break;
case DOUBLE:
value=tokenizer.consumeDouble();
break;
case BOOL:
value=tokenizer.consumeBoolean();
break;
case STRING:
value=tokenizer.consumeString();
break;
case BYTES:
value=tokenizer.consumeByteString();
break;
case ENUM:
final EnumDescriptor enumType=field.getEnumType();
if (tokenizer.lookingAtInteger()) {
final int number=tokenizer.consumeInt32();
value=enumType.findValueByNumber(number);
if (value == null) {
throw tokenizer.parseExceptionPreviousToken("Enum type \"" + enumType.getFullName() + "\" has no value with number "+ number+ '.');
}
}
 else {
final String id=tokenizer.consumeIdentifier();
value=enumType.findValueByName(id);
if (value == null) {
throw tokenizer.parseExceptionPreviousToken("Enum type \"" + enumType.getFullName() + "\" has no value named \""+ id+ "\".");
}
}
break;
case MESSAGE:
case GROUP:
throw new RuntimeException("Can't get here.");
}
}
if (field.isRepeated()) {
target.addRepeatedField(field,value);
}
 else if ((singularOverwritePolicy == SingularOverwritePolicy.FORBID_SINGULAR_OVERWRITES) && target.hasField(field)) {
throw tokenizer.parseExceptionPreviousToken("Non-repeated field \"" + field.getFullName() + "\" cannot be overwritten.");
}
 else if ((singularOverwritePolicy == SingularOverwritePolicy.FORBID_SINGULAR_OVERWRITES) && field.getContainingOneof() != null && target.hasOneof(field.getContainingOneof())) {
Descriptors.OneofDescriptor oneof=field.getContainingOneof();
throw tokenizer.parseExceptionPreviousToken("Field \"" + field.getFullName() + "\" is specified along with field \""+ target.getOneofFieldDescriptor(oneof).getFullName()+ "\", another member of oneof \""+ oneof.getName()+ "\".");
}
 else {
target.setField(field,value);
}
}
