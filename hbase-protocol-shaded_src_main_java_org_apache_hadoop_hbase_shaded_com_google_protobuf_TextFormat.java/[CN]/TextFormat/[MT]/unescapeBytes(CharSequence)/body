{
  ByteString input=ByteString.copyFromUtf8(charString.toString());
  final byte[] result=new byte[input.size()];
  int pos=0;
  for (int i=0; i < input.size(); i++) {
    byte c=input.byteAt(i);
    if (c == '\\') {
      if (i + 1 < input.size()) {
        ++i;
        c=input.byteAt(i);
        if (isOctal(c)) {
          int code=digitValue(c);
          if (i + 1 < input.size() && isOctal(input.byteAt(i + 1))) {
            ++i;
            code=code * 8 + digitValue(input.byteAt(i));
          }
          if (i + 1 < input.size() && isOctal(input.byteAt(i + 1))) {
            ++i;
            code=code * 8 + digitValue(input.byteAt(i));
          }
          result[pos++]=(byte)code;
        }
 else {
switch (c) {
case 'a':
            result[pos++]=0x07;
          break;
case 'b':
        result[pos++]='\b';
      break;
case 'f':
    result[pos++]='\f';
  break;
case 'n':
result[pos++]='\n';
break;
case 'r':
result[pos++]='\r';
break;
case 't':
result[pos++]='\t';
break;
case 'v':
result[pos++]=0x0b;
break;
case '\\':
result[pos++]='\\';
break;
case '\'':
result[pos++]='\'';
break;
case '"':
result[pos++]='\"';
break;
case 'x':
int code=0;
if (i + 1 < input.size() && isHex(input.byteAt(i + 1))) {
++i;
code=digitValue(input.byteAt(i));
}
 else {
throw new InvalidEscapeSequenceException("Invalid escape sequence: '\\x' with no digits");
}
if (i + 1 < input.size() && isHex(input.byteAt(i + 1))) {
++i;
code=code * 16 + digitValue(input.byteAt(i));
}
result[pos++]=(byte)code;
break;
default :
throw new InvalidEscapeSequenceException("Invalid escape sequence: '\\" + (char)c + '\'');
}
}
}
 else {
throw new InvalidEscapeSequenceException("Invalid escape sequence: '\\' at end of string.");
}
}
 else {
result[pos++]=c;
}
}
return result.length == pos ? ByteString.wrap(result) : ByteString.copyFrom(result,0,pos);
}
