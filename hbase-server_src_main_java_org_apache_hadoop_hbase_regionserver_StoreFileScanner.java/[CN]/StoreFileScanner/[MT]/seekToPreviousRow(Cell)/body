{
  try {
    try {
      boolean keepSeeking=false;
      Cell key=originalKey;
      do {
        Cell seekKey=CellUtil.createFirstOnRow(key);
        if (seekCount != null)         seekCount.increment();
        if (!hfs.seekBefore(seekKey)) {
          this.cur=null;
          return false;
        }
        Cell curCell=hfs.getCell();
        Cell firstKeyOfPreviousRow=CellUtil.createFirstOnRow(curCell);
        if (seekCount != null)         seekCount.increment();
        if (!seekAtOrAfter(hfs,firstKeyOfPreviousRow)) {
          this.cur=null;
          return false;
        }
        setCurrentCell(hfs.getCell());
        this.stopSkippingKVsIfNextRow=true;
        boolean resultOfSkipKVs;
        try {
          resultOfSkipKVs=skipKVsNewerThanReadpoint();
        }
  finally {
          this.stopSkippingKVsIfNextRow=false;
        }
        if (!resultOfSkipKVs || getComparator().compareRows(cur,firstKeyOfPreviousRow) > 0) {
          keepSeeking=true;
          key=firstKeyOfPreviousRow;
          continue;
        }
 else {
          keepSeeking=false;
        }
      }
 while (keepSeeking);
      return true;
    }
  finally {
      realSeekDone=true;
    }
  }
 catch (  FileNotFoundException e) {
    throw e;
  }
catch (  IOException ioe) {
    throw new IOException("Could not seekToPreviousRow " + this + " to key "+ originalKey,ioe);
  }
}
