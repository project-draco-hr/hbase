{
  try {
    try {
      KeyValue seekKey=KeyValueUtil.createFirstOnRow(key.getRowArray(),key.getRowOffset(),key.getRowLength());
      if (seekCount != null)       seekCount.incrementAndGet();
      if (!hfs.seekBefore(seekKey)) {
        close();
        return false;
      }
      KeyValue firstKeyOfPreviousRow=KeyValueUtil.createFirstOnRow(hfs.getKeyValue().getRowArray(),hfs.getKeyValue().getRowOffset(),hfs.getKeyValue().getRowLength());
      if (seekCount != null)       seekCount.incrementAndGet();
      if (!seekAtOrAfter(hfs,firstKeyOfPreviousRow)) {
        close();
        return false;
      }
      setCurrentCell(hfs.getKeyValue());
      this.stopSkippingKVsIfNextRow=true;
      boolean resultOfSkipKVs;
      try {
        resultOfSkipKVs=skipKVsNewerThanReadpoint();
      }
  finally {
        this.stopSkippingKVsIfNextRow=false;
      }
      if (!resultOfSkipKVs || getComparator().compareRows(cur,firstKeyOfPreviousRow) > 0) {
        return seekToPreviousRow(firstKeyOfPreviousRow);
      }
      return true;
    }
  finally {
      realSeekDone=true;
    }
  }
 catch (  FileNotFoundException e) {
    throw e;
  }
catch (  IOException ioe) {
    throw new IOException("Could not seekToPreviousRow " + this + " to key "+ key,ioe);
  }
}
