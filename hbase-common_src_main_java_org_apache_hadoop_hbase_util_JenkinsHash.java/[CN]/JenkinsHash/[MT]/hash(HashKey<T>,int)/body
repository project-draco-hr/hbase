{
  int length=hashKey.length();
  int a, b, c;
  a=b=c=0xdeadbeef + length + initval;
  int offset=0;
  for (; length > 12; offset+=12, length-=12) {
    a+=(hashKey.get(offset) & BYTE_MASK);
    a+=((hashKey.get(offset + 1) & BYTE_MASK) << 8);
    a+=((hashKey.get(offset + 2) & BYTE_MASK) << 16);
    a+=((hashKey.get(offset + 3) & BYTE_MASK) << 24);
    b+=(hashKey.get(offset + 4) & BYTE_MASK);
    b+=((hashKey.get(offset + 5) & BYTE_MASK) << 8);
    b+=((hashKey.get(offset + 6) & BYTE_MASK) << 16);
    b+=((hashKey.get(offset + 7) & BYTE_MASK) << 24);
    c+=(hashKey.get(offset + 8) & BYTE_MASK);
    c+=((hashKey.get(offset + 9) & BYTE_MASK) << 8);
    c+=((hashKey.get(offset + 10) & BYTE_MASK) << 16);
    c+=((hashKey.get(offset + 11) & BYTE_MASK) << 24);
    a-=c;
    a^=rotateLeft(c,4);
    c+=b;
    b-=a;
    b^=rotateLeft(a,6);
    a+=c;
    c-=b;
    c^=rotateLeft(b,8);
    b+=a;
    a-=c;
    a^=rotateLeft(c,16);
    c+=b;
    b-=a;
    b^=rotateLeft(a,19);
    a+=c;
    c-=b;
    c^=rotateLeft(b,4);
    b+=a;
  }
switch (length) {
case 12:
    c+=((hashKey.get(offset + 11) & BYTE_MASK) << 24);
case 11:
  c+=((hashKey.get(offset + 10) & BYTE_MASK) << 16);
case 10:
c+=((hashKey.get(offset + 9) & BYTE_MASK) << 8);
case 9:
c+=(hashKey.get(offset + 8) & BYTE_MASK);
case 8:
b+=((hashKey.get(offset + 7) & BYTE_MASK) << 24);
case 7:
b+=((hashKey.get(offset + 6) & BYTE_MASK) << 16);
case 6:
b+=((hashKey.get(offset + 5) & BYTE_MASK) << 8);
case 5:
b+=(hashKey.get(offset + 4) & BYTE_MASK);
case 4:
a+=((hashKey.get(offset + 3) & BYTE_MASK) << 24);
case 3:
a+=((hashKey.get(offset + 2) & BYTE_MASK) << 16);
case 2:
a+=((hashKey.get(offset + 1) & BYTE_MASK) << 8);
case 1:
a+=(hashKey.get(offset + 0) & BYTE_MASK);
break;
case 0:
return c;
}
c^=b;
c-=rotateLeft(b,14);
a^=c;
a-=rotateLeft(c,11);
b^=a;
b-=rotateLeft(a,25);
c^=b;
c-=rotateLeft(b,16);
a^=c;
a-=rotateLeft(c,4);
b^=a;
b-=rotateLeft(a,14);
c^=b;
c-=rotateLeft(b,24);
return c;
}
