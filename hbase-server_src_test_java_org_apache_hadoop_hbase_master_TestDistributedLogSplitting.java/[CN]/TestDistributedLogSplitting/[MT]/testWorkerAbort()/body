{
  LOG.info("testWorkerAbort");
  startCluster(3);
  final int NUM_LOG_LINES=10000;
  final SplitLogManager slm=master.getMasterFileSystem().splitLogManager;
  FileSystem fs=master.getMasterFileSystem().getFileSystem();
  final List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  HRegionServer hrs=findRSToKill(false,"table");
  Path rootdir=FSUtils.getRootDir(conf);
  final Path logDir=new Path(rootdir,DefaultWALProvider.getWALDirectoryName(hrs.getServerName().toString()));
  Table t=installTable(new ZooKeeperWatcher(conf,"table-creation",null),"table","family",40);
  try {
    makeWAL(hrs,ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices()),"table","family",NUM_LOG_LINES,100);
    new Thread(){
      @Override public void run(){
        waitForCounter(tot_wkr_task_acquired,0,1,1000);
        for (        RegionServerThread rst : rsts) {
          rst.getRegionServer().abort("testing");
          break;
        }
      }
    }
.start();
    FileStatus[] logfiles=fs.listStatus(logDir);
    TaskBatch batch=new TaskBatch();
    slm.enqueueSplitTask(logfiles[0].getPath().toString(),batch);
    long curt=System.currentTimeMillis();
    long waitTime=80000;
    long endt=curt + waitTime;
    while (curt < endt) {
      if ((tot_wkr_task_resigned.get() + tot_wkr_task_err.get() + tot_wkr_final_transition_failed.get()+ tot_wkr_task_done.get()+ tot_wkr_preempt_task.get()) == 0) {
        Thread.yield();
        curt=System.currentTimeMillis();
      }
 else {
        assertTrue(1 <= (tot_wkr_task_resigned.get() + tot_wkr_task_err.get() + tot_wkr_final_transition_failed.get()+ tot_wkr_task_done.get()+ tot_wkr_preempt_task.get()));
        return;
      }
    }
    fail("none of the following counters went up in " + waitTime + " milliseconds - "+ "tot_wkr_task_resigned, tot_wkr_task_err, "+ "tot_wkr_final_transition_failed, tot_wkr_task_done, "+ "tot_wkr_preempt_task");
  }
  finally {
    if (t != null)     t.close();
  }
}
