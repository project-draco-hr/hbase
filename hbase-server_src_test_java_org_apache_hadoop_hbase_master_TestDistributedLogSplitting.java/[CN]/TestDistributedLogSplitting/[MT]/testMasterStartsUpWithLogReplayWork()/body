{
  LOG.info("testMasterStartsUpWithLogReplayWork");
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,NUM_RS - 1);
  startCluster(NUM_RS);
  final int NUM_REGIONS_TO_CREATE=40;
  final int NUM_LOG_LINES=1000;
  master.balanceSwitch(false);
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  Table ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  try {
    HRegionServer hrs=findRSToKill(false,"table");
    List<HRegionInfo> regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
    makeWAL(hrs,regions,"table","family",NUM_LOG_LINES,100);
    abortMaster(cluster);
    LOG.info("Aborting region server: " + hrs.getServerName());
    hrs.abort("testing");
    TEST_UTIL.waitFor(120000,200,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return (cluster.getLiveRegionServerThreads().size() <= (NUM_RS - 1));
      }
    }
);
    Thread.sleep(2000);
    LOG.info("Current Open Regions:" + HBaseTestingUtility.getAllOnlineRegions(cluster).size());
    TEST_UTIL.waitFor(180000,200,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        List<String> recoveringRegions=zkw.getRecoverableZooKeeper().getChildren(zkw.znodePaths.recoveringRegionsZNode,false);
        boolean done=recoveringRegions != null && recoveringRegions.size() == 0;
        if (!done) {
          LOG.info("Recovering regions: " + recoveringRegions);
        }
        return done;
      }
    }
);
    LOG.info("Current Open Regions After Master Node Starts Up:" + HBaseTestingUtility.getAllOnlineRegions(cluster).size());
    assertEquals(NUM_LOG_LINES,TEST_UTIL.countRows(ht));
  }
  finally {
    if (ht != null)     ht.close();
    if (zkw != null)     zkw.close();
  }
}
