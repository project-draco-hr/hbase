{
  LOG.info("testMasterStartsUpWithLogReplayWork");
  Configuration curConf=HBaseConfiguration.create();
  curConf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  curConf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,NUM_RS - 1);
  startCluster(NUM_RS,curConf);
  final int NUM_REGIONS_TO_CREATE=40;
  final int NUM_LOG_LINES=1000;
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  HTable ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  List<HRegionInfo> regions=null;
  HRegionServer hrs=null;
  for (int i=0; i < NUM_RS; i++) {
    boolean isCarryingMeta=false;
    hrs=rsts.get(i).getRegionServer();
    regions=ProtobufUtil.getOnlineRegions(hrs);
    for (    HRegionInfo region : regions) {
      if (region.isMetaRegion()) {
        isCarryingMeta=true;
        break;
      }
    }
    if (isCarryingMeta) {
      continue;
    }
    break;
  }
  LOG.info("#regions = " + regions.size());
  Iterator<HRegionInfo> it=regions.iterator();
  while (it.hasNext()) {
    HRegionInfo region=it.next();
    if (region.isMetaTable()) {
      it.remove();
    }
  }
  makeHLog(hrs.getWAL(),regions,"table","family",NUM_LOG_LINES,100);
  abortMaster(cluster);
  LOG.info("Aborting region server: " + hrs.getServerName());
  hrs.abort("testing");
  TEST_UTIL.waitFor(120000,200,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return (cluster.getLiveRegionServerThreads().size() <= (NUM_RS - 1));
    }
  }
);
  Thread.sleep(2000);
  LOG.info("Current Open Regions:" + getAllOnlineRegions(cluster).size());
  startMasterAndWaitUntilLogSplit(cluster);
  TEST_UTIL.waitFor(180000,200,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      List<String> recoveringRegions=zkw.getRecoverableZooKeeper().getChildren(zkw.recoveringRegionsZNode,false);
      return (recoveringRegions != null && recoveringRegions.size() == 0);
    }
  }
);
  LOG.info("Current Open Regions After Master Node Starts Up:" + getAllOnlineRegions(cluster).size());
  assertEquals(NUM_LOG_LINES,TEST_UTIL.countRows(ht));
  ht.close();
}
