{
  LOG.info("testSameVersionUpdatesRecovery");
  conf.setLong("hbase.regionserver.hlog.blocksize",15 * 1024);
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  startCluster(NUM_RS);
  final AtomicLong sequenceId=new AtomicLong(100);
  final int NUM_REGIONS_TO_CREATE=40;
  final int NUM_LOG_LINES=1000;
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  Table ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  List<HRegionInfo> regions=null;
  HRegionServer hrs=null;
  for (int i=0; i < NUM_RS; i++) {
    boolean isCarryingMeta=false;
    hrs=rsts.get(i).getRegionServer();
    regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
    for (    HRegionInfo region : regions) {
      if (region.isMetaRegion()) {
        isCarryingMeta=true;
        break;
      }
    }
    if (isCarryingMeta) {
      continue;
    }
    break;
  }
  LOG.info("#regions = " + regions.size());
  Iterator<HRegionInfo> it=regions.iterator();
  while (it.hasNext()) {
    HRegionInfo region=it.next();
    if (region.isMetaTable() || region.getEncodedName().equals(HRegionInfo.FIRST_META_REGIONINFO.getEncodedName())) {
      it.remove();
    }
  }
  if (regions.size() == 0)   return;
  HRegionInfo curRegionInfo=regions.get(0);
  byte[] startRow=curRegionInfo.getStartKey();
  if (startRow == null || startRow.length == 0) {
    startRow=new byte[]{0,0,0,0,1};
  }
  byte[] row=Bytes.incrementBytes(startRow,1);
  row=Arrays.copyOfRange(row,3,8);
  long value=0;
  TableName tableName=TableName.valueOf("table");
  byte[] family=Bytes.toBytes("family");
  byte[] qualifier=Bytes.toBytes("c1");
  long timeStamp=System.currentTimeMillis();
  HTableDescriptor htd=new HTableDescriptor();
  htd.addFamily(new HColumnDescriptor(family));
  final WAL wal=hrs.getWAL(curRegionInfo);
  for (int i=0; i < NUM_LOG_LINES; i+=1) {
    WALEdit e=new WALEdit();
    value++;
    e.add(new KeyValue(row,family,qualifier,timeStamp,Bytes.toBytes(value)));
    wal.append(htd,curRegionInfo,new HLogKey(curRegionInfo.getEncodedNameAsBytes(),tableName,System.currentTimeMillis()),e,sequenceId,true,null);
  }
  wal.sync();
  wal.shutdown();
  this.abortRSAndWaitForRecovery(hrs,zkw,NUM_REGIONS_TO_CREATE);
  LOG.info("Verification Starts...");
  Get g=new Get(row);
  Result r=ht.get(g);
  long theStoredVal=Bytes.toLong(r.getValue(family,qualifier));
  assertEquals(value,theStoredVal);
  LOG.info("Verification after flush...");
  TEST_UTIL.getHBaseAdmin().flush(tableName);
  r=ht.get(g);
  theStoredVal=Bytes.toLong(r.getValue(family,qualifier));
  assertEquals(value,theStoredVal);
  ht.close();
}
