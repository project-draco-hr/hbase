{
  LOG.info("testRecoveredEdits");
  conf.setLong("hbase.regionserver.hlog.blocksize",30 * 1024);
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,false);
  startCluster(NUM_RS);
  final int NUM_LOG_LINES=1000;
  final SplitLogManager slm=master.getMasterFileSystem().splitLogManager;
  master.balanceSwitch(false);
  FileSystem fs=master.getMasterFileSystem().getFileSystem();
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  Path rootdir=FSUtils.getRootDir(conf);
  installTable(new ZooKeeperWatcher(conf,"table-creation",null),"table","family",40);
  TableName table=TableName.valueOf("table");
  List<HRegionInfo> regions=null;
  HRegionServer hrs=null;
  for (int i=0; i < NUM_RS; i++) {
    boolean foundRs=false;
    hrs=rsts.get(i).getRegionServer();
    regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
    for (    HRegionInfo region : regions) {
      if (region.getTable().getNameAsString().equalsIgnoreCase("table")) {
        foundRs=true;
        break;
      }
    }
    if (foundRs)     break;
  }
  final Path logDir=new Path(rootdir,DefaultWALProvider.getWALDirectoryName(hrs.getServerName().toString()));
  LOG.info("#regions = " + regions.size());
  Iterator<HRegionInfo> it=regions.iterator();
  while (it.hasNext()) {
    HRegionInfo region=it.next();
    if (region.getTable().getNamespaceAsString().equals(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR)) {
      it.remove();
    }
  }
  makeWAL(hrs,regions,"table","family",NUM_LOG_LINES,100);
  slm.splitLogDistributed(logDir);
  int count=0;
  for (  HRegionInfo hri : regions) {
    Path tdir=FSUtils.getTableDir(rootdir,table);
    Path editsdir=WALSplitter.getRegionDirRecoveredEditsDir(HRegion.getRegionDir(tdir,hri.getEncodedName()));
    LOG.debug("checking edits dir " + editsdir);
    FileStatus[] files=fs.listStatus(editsdir,new PathFilter(){
      @Override public boolean accept(      Path p){
        if (WALSplitter.isSequenceIdFile(p)) {
          return false;
        }
        return true;
      }
    }
);
    assertTrue("edits dir should have more than a single file in it. instead has " + files.length,files.length > 1);
    for (int i=0; i < files.length; i++) {
      int c=countWAL(files[i].getPath(),fs,conf);
      count+=c;
    }
    LOG.info(count + " edits in " + files.length+ " recovered edits files.");
  }
  assertFalse(fs.exists(logDir));
  assertEquals(NUM_LOG_LINES,count);
}
