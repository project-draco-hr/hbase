{
  LOG.info("testReplayCmd");
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  startCluster(NUM_RS);
  final int NUM_REGIONS_TO_CREATE=40;
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  Table ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  try {
    List<HRegionInfo> regions=null;
    HRegionServer hrs=null;
    for (int i=0; i < NUM_RS; i++) {
      boolean isCarryingMeta=false;
      hrs=rsts.get(i).getRegionServer();
      regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
      for (      HRegionInfo region : regions) {
        if (region.isMetaRegion()) {
          isCarryingMeta=true;
          break;
        }
      }
      if (isCarryingMeta) {
        continue;
      }
      if (regions.size() > 0)       break;
    }
    this.prepareData(ht,Bytes.toBytes("family"),Bytes.toBytes("c1"));
    String originalCheckSum=TEST_UTIL.checksumRows(ht);
    abortRSAndWaitForRecovery(hrs,zkw,NUM_REGIONS_TO_CREATE);
    assertEquals("Data should remain after reopening of regions",originalCheckSum,TEST_UTIL.checksumRows(ht));
  }
  finally {
    if (ht != null)     ht.close();
    if (zkw != null)     zkw.close();
  }
}
