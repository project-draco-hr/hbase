{
  LOG.info("testNonceRecovery");
  final String TABLE_NAME="table";
  final String FAMILY_NAME="family";
  final int NUM_REGIONS_TO_CREATE=40;
  conf.setLong("hbase.regionserver.hlog.blocksize",100 * 1024);
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  startCluster(NUM_RS);
  master.balanceSwitch(false);
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  Table ht=installTable(zkw,TABLE_NAME,FAMILY_NAME,NUM_REGIONS_TO_CREATE);
  NonceGeneratorWithDups ng=new NonceGeneratorWithDups();
  NonceGenerator oldNg=ConnectionUtils.injectNonceGeneratorForTesting((ClusterConnection)TEST_UTIL.getConnection(),ng);
  try {
    List<Increment> reqs=new ArrayList<Increment>();
    for (    RegionServerThread rst : cluster.getLiveRegionServerThreads()) {
      HRegionServer hrs=rst.getRegionServer();
      List<HRegionInfo> hris=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
      for (      HRegionInfo hri : hris) {
        if (TABLE_NAME.equalsIgnoreCase(hri.getTable().getNameAsString())) {
          byte[] key=hri.getStartKey();
          if (key == null || key.length == 0) {
            key=Bytes.copy(hri.getEndKey());
            --(key[key.length - 1]);
          }
          Increment incr=new Increment(key);
          incr.addColumn(Bytes.toBytes(FAMILY_NAME),Bytes.toBytes("q"),1);
          ht.increment(incr);
          reqs.add(incr);
        }
      }
    }
    HRegionServer hrs=findRSToKill(false,"table");
    abortRSAndWaitForRecovery(hrs,zkw,NUM_REGIONS_TO_CREATE);
    ng.startDups();
    for (    Increment incr : reqs) {
      try {
        ht.increment(incr);
        fail("should have thrown");
      }
 catch (      OperationConflictException ope) {
        LOG.debug("Caught as expected: " + ope.getMessage());
      }
    }
  }
  finally {
    ConnectionUtils.injectNonceGeneratorForTesting((ClusterConnection)TEST_UTIL.getConnection(),oldNg);
    ht.close();
    zkw.close();
  }
}
