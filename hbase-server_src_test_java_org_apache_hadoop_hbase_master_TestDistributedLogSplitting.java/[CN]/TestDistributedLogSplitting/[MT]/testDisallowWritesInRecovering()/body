{
  LOG.info("testDisallowWritesInRecovering");
  Configuration curConf=HBaseConfiguration.create();
  curConf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  curConf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,1);
  curConf.setBoolean(HConstants.DISALLOW_WRITES_IN_RECOVERING,true);
  startCluster(NUM_RS,curConf);
  final int NUM_REGIONS_TO_CREATE=40;
  final int NUM_LOG_LINES=30000;
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  HTable ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  HRegionServer hrs=findRSToKill(false,"table");
  List<HRegionInfo> regions=ProtobufUtil.getOnlineRegions(hrs);
  makeHLog(hrs.getWAL(),regions,"table","family",NUM_LOG_LINES,100);
  LOG.info("Aborting region server: " + hrs.getServerName());
  hrs.abort("testing");
  TEST_UTIL.waitFor(120000,200,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return (cluster.getLiveRegionServerThreads().size() <= (NUM_RS - 1));
    }
  }
);
  TEST_UTIL.waitFor(180000,100,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return (getAllOnlineRegions(cluster).size() >= (NUM_REGIONS_TO_CREATE + 1));
    }
  }
);
  try {
    HRegionInfo region=regions.get(0);
    byte[] key=region.getStartKey();
    if (key == null || key.length == 0) {
      key=new byte[]{0,0,0,0,1};
    }
    ht.setAutoFlush(true);
    Put put=new Put(key);
    put.add(Bytes.toBytes("family"),Bytes.toBytes("c1"),new byte[]{'b'});
    ht.put(put);
  }
 catch (  IOException ioe) {
    Assert.assertTrue(ioe instanceof RetriesExhaustedWithDetailsException);
    RetriesExhaustedWithDetailsException re=(RetriesExhaustedWithDetailsException)ioe;
    boolean foundRegionInRecoveryException=false;
    for (    Throwable t : re.getCauses()) {
      if (t instanceof RegionInRecoveryException) {
        foundRegionInRecoveryException=true;
        break;
      }
    }
    Assert.assertTrue("No RegionInRecoveryException. Following exceptions returned=" + re.getCauses(),foundRegionInRecoveryException);
  }
  ht.close();
  zkw.close();
}
