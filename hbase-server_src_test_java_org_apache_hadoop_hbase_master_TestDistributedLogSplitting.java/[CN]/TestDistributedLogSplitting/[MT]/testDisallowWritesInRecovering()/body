{
  LOG.info("testDisallowWritesInRecovering");
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,3);
  conf.setBoolean(HConstants.DISALLOW_WRITES_IN_RECOVERING,true);
  startCluster(NUM_RS);
  final int NUM_REGIONS_TO_CREATE=40;
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  Table ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  try {
    final SplitLogManager slm=master.getMasterWalManager().getSplitLogManager();
    Set<HRegionInfo> regionSet=new HashSet<HRegionInfo>();
    HRegionInfo region=null;
    HRegionServer hrs=null;
    HRegionServer dstRS=null;
    for (int i=0; i < NUM_RS; i++) {
      hrs=rsts.get(i).getRegionServer();
      List<HRegionInfo> regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
      if (regions.isEmpty())       continue;
      region=regions.get(0);
      regionSet.add(region);
      dstRS=rsts.get((i + 1) % NUM_RS).getRegionServer();
      break;
    }
    slm.markRegionsRecovering(hrs.getServerName(),regionSet);
    final HRegionInfo hri=region;
    final HRegionServer tmpRS=dstRS;
    TEST_UTIL.getHBaseAdmin().move(region.getEncodedNameAsBytes(),Bytes.toBytes(dstRS.getServerName().getServerName()));
    final RegionStates regionStates=TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager().getRegionStates();
    TEST_UTIL.waitFor(45000,200,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        ServerName sn=regionStates.getRegionServerOfRegion(hri);
        return (sn != null && sn.equals(tmpRS.getServerName()));
      }
    }
);
    try {
      byte[] key=region.getStartKey();
      if (key == null || key.length == 0) {
        key=new byte[]{0,0,0,0,1};
      }
      Put put=new Put(key);
      put.addColumn(Bytes.toBytes("family"),Bytes.toBytes("c1"),new byte[]{'b'});
      ht.put(put);
    }
 catch (    IOException ioe) {
      Assert.assertTrue(ioe instanceof RetriesExhaustedWithDetailsException);
      RetriesExhaustedWithDetailsException re=(RetriesExhaustedWithDetailsException)ioe;
      boolean foundRegionInRecoveryException=false;
      for (      Throwable t : re.getCauses()) {
        if (t instanceof RegionInRecoveryException) {
          foundRegionInRecoveryException=true;
          break;
        }
      }
      Assert.assertTrue("No RegionInRecoveryException. Following exceptions returned=" + re.getCauses(),foundRegionInRecoveryException);
    }
  }
  finally {
    if (ht != null)     ht.close();
    if (ht != null)     zkw.close();
  }
}
