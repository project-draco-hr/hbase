{
  LOG.info("testLogReplayWithNonMetaRSDown");
  Configuration curConf=HBaseConfiguration.create();
  curConf.setLong("hbase.regionserver.hlog.blocksize",100 * 1024);
  curConf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  startCluster(NUM_RS,curConf);
  final int NUM_REGIONS_TO_CREATE=40;
  final int NUM_LOG_LINES=1000;
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  HTable ht=installTable(zkw,"table","family",NUM_REGIONS_TO_CREATE);
  List<HRegionInfo> regions=null;
  HRegionServer hrs=null;
  for (int i=0; i < NUM_RS; i++) {
    boolean isCarryingMeta=false;
    hrs=rsts.get(i).getRegionServer();
    regions=ProtobufUtil.getOnlineRegions(hrs);
    for (    HRegionInfo region : regions) {
      if (region.isMetaRegion()) {
        isCarryingMeta=true;
        break;
      }
    }
    if (isCarryingMeta) {
      continue;
    }
    break;
  }
  LOG.info("#regions = " + regions.size());
  Iterator<HRegionInfo> it=regions.iterator();
  while (it.hasNext()) {
    HRegionInfo region=it.next();
    if (region.isMetaTable()) {
      it.remove();
    }
  }
  makeHLog(hrs.getWAL(),regions,"table","family",NUM_LOG_LINES,100);
  this.abortRSAndVerifyRecovery(hrs,ht,zkw,NUM_REGIONS_TO_CREATE,NUM_LOG_LINES);
  ht.close();
}
