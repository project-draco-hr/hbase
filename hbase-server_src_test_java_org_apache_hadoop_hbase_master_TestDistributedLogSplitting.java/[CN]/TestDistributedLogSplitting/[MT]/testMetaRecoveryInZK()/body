{
  LOG.info("testMetaRecoveryInZK");
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  startCluster(NUM_RS);
  master.balanceSwitch(false);
  final ZooKeeperWatcher zkw=new ZooKeeperWatcher(conf,"table-creation",null);
  HRegionServer hrs=findRSToKill(true,null);
  List<HRegionInfo> regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
  LOG.info("#regions = " + regions.size());
  Set<HRegionInfo> tmpRegions=new HashSet<HRegionInfo>();
  tmpRegions.add(HRegionInfo.FIRST_META_REGIONINFO);
  master.getMasterWalManager().prepareLogReplay(hrs.getServerName(),tmpRegions);
  Set<HRegionInfo> userRegionSet=new HashSet<HRegionInfo>();
  userRegionSet.addAll(regions);
  master.getMasterWalManager().prepareLogReplay(hrs.getServerName(),userRegionSet);
  boolean isMetaRegionInRecovery=false;
  List<String> recoveringRegions=zkw.getRecoverableZooKeeper().getChildren(zkw.recoveringRegionsZNode,false);
  for (  String curEncodedRegionName : recoveringRegions) {
    if (curEncodedRegionName.equals(HRegionInfo.FIRST_META_REGIONINFO.getEncodedName())) {
      isMetaRegionInRecovery=true;
      break;
    }
  }
  assertTrue(isMetaRegionInRecovery);
  master.getMasterWalManager().splitMetaLog(hrs.getServerName());
  isMetaRegionInRecovery=false;
  recoveringRegions=zkw.getRecoverableZooKeeper().getChildren(zkw.recoveringRegionsZNode,false);
  for (  String curEncodedRegionName : recoveringRegions) {
    if (curEncodedRegionName.equals(HRegionInfo.FIRST_META_REGIONINFO.getEncodedName())) {
      isMetaRegionInRecovery=true;
      break;
    }
  }
  assertFalse(isMetaRegionInRecovery);
  zkw.close();
}
