{
  LOG.info("testMarkRegionsRecoveringInZK");
  conf.setBoolean(HConstants.DISTRIBUTED_LOG_REPLAY_KEY,true);
  startCluster(NUM_RS);
  master.balanceSwitch(false);
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  final ZooKeeperWatcher zkw=master.getZooKeeper();
  HTable ht=installTable(zkw,"table","family",40);
  final SplitLogManager slm=master.getMasterFileSystem().splitLogManager;
  Set<HRegionInfo> regionSet=new HashSet<HRegionInfo>();
  HRegionInfo region=null;
  HRegionServer hrs=null;
  ServerName firstFailedServer=null;
  ServerName secondFailedServer=null;
  for (int i=0; i < NUM_RS; i++) {
    hrs=rsts.get(i).getRegionServer();
    List<HRegionInfo> regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
    if (regions.isEmpty())     continue;
    region=regions.get(0);
    regionSet.add(region);
    firstFailedServer=hrs.getServerName();
    secondFailedServer=rsts.get((i + 1) % NUM_RS).getRegionServer().getServerName();
    break;
  }
  slm.markRegionsRecovering(firstFailedServer,regionSet);
  slm.markRegionsRecovering(secondFailedServer,regionSet);
  List<String> recoveringRegions=ZKUtil.listChildrenNoWatch(zkw,ZKUtil.joinZNode(zkw.recoveringRegionsZNode,region.getEncodedName()));
  assertEquals(recoveringRegions.size(),2);
  final HRegionServer tmphrs=hrs;
  TEST_UTIL.waitFor(60000,1000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return (tmphrs.getRecoveringRegions().size() == 0);
    }
  }
);
  ht.close();
}
