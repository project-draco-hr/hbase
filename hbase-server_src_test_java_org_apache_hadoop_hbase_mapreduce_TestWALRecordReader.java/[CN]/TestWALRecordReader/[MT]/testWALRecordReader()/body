{
  final WALFactory walfactory=new WALFactory(conf,null,getName());
  WAL log=walfactory.getWAL(info.getEncodedNameAsBytes(),info.getTable().getNamespace());
  byte[] value=Bytes.toBytes("value");
  final AtomicLong sequenceId=new AtomicLong(0);
  WALEdit edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("1"),System.currentTimeMillis(),value));
  long txid=log.append(htd,info,getWalKey(System.currentTimeMillis()),edit,true);
  log.sync(txid);
  Thread.sleep(1);
  long secondTs=System.currentTimeMillis();
  log.rollWriter();
  edit=new WALEdit();
  edit.add(new KeyValue(rowName,family,Bytes.toBytes("2"),System.currentTimeMillis(),value));
  txid=log.append(htd,info,getWalKey(System.currentTimeMillis()),edit,true);
  log.sync(txid);
  log.shutdown();
  walfactory.shutdown();
  long thirdTs=System.currentTimeMillis();
  WALInputFormat input=new WALInputFormat();
  Configuration jobConf=new Configuration(conf);
  jobConf.set("mapreduce.input.fileinputformat.inputdir",logDir.toString());
  List<InputSplit> splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(2,splits.size());
  testSplit(splits.get(0),Bytes.toBytes("1"));
  testSplit(splits.get(1),Bytes.toBytes("2"));
  jobConf.setLong(WALInputFormat.END_TIME_KEY,secondTs - 1);
  splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(1,splits.size());
  testSplit(splits.get(0),Bytes.toBytes("1"));
  jobConf.setLong(WALInputFormat.END_TIME_KEY,Long.MAX_VALUE);
  jobConf.setLong(WALInputFormat.START_TIME_KEY,thirdTs);
  splits=input.getSplits(MapreduceTestingShim.createJobContext(jobConf));
  assertEquals(2,splits.size());
  testSplit(splits.get(0));
  testSplit(splits.get(1));
}
