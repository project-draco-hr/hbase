{
  servlet.getMetrics().incrementRequests(1);
  if (servlet.isReadOnly()) {
    return Response.status(Response.Status.FORBIDDEN).type(MIMETYPE_TEXT).entity("Forbidden" + CRLF).build();
  }
  byte[] endRow=model.hasEndRow() ? model.getEndRow() : null;
  RowSpec spec=new RowSpec(model.getStartRow(),endRow,model.getColumns(),model.getStartTime(),model.getEndTime(),model.getMaxVersions());
  try {
    Filter filter=ScannerResultGenerator.buildFilterFromModel(model);
    String tableName=tableResource.getName();
    ScannerResultGenerator gen=new ScannerResultGenerator(tableName,spec,filter);
    String id=gen.getID();
    ScannerInstanceResource instance=new ScannerInstanceResource(tableName,id,gen,model.getBatch());
    scanners.put(id,instance);
    if (LOG.isDebugEnabled()) {
      LOG.debug("new scanner: " + id);
    }
    UriBuilder builder=uriInfo.getAbsolutePathBuilder();
    URI uri=builder.path(id).build();
    servlet.getMetrics().incrementSucessfulPutRequests(1);
    return Response.created(uri).build();
  }
 catch (  RuntimeException e) {
    servlet.getMetrics().incrementFailedPutRequests(1);
    if (e.getCause() instanceof TableNotFoundException) {
      return Response.status(Response.Status.NOT_FOUND).type(MIMETYPE_TEXT).entity("Not found" + CRLF).build();
    }
    return Response.status(Response.Status.BAD_REQUEST).type(MIMETYPE_TEXT).entity("Bad request" + CRLF).build();
  }
catch (  Exception e) {
    servlet.getMetrics().incrementFailedPutRequests(1);
    return Response.status(Response.Status.SERVICE_UNAVAILABLE).type(MIMETYPE_TEXT).entity("Unavailable" + CRLF).build();
  }
}
