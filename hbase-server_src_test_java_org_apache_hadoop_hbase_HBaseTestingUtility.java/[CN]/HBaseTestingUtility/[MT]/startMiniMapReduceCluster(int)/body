{
  if (mrCluster != null) {
    throw new IllegalStateException("MiniMRCluster is already running");
  }
  LOG.info("Starting mini mapreduce cluster...");
  setupClusterTestDir();
  createDirsAndSetProperties();
  forceChangeTaskLogDir();
  conf.setFloat("yarn.nodemanager.vmem-pmem-ratio",8.0f);
  conf.setBoolean("mapreduce.map.speculative",false);
  conf.setBoolean("mapreduce.reduce.speculative",false);
  mrCluster=new MiniMRCluster(servers,FS_URI != null ? FS_URI : FileSystem.get(conf).getUri().toString(),1,null,null,new JobConf(this.conf));
  JobConf jobConf=MapreduceTestingShim.getJobConf(mrCluster);
  if (jobConf == null) {
    jobConf=mrCluster.createJobConf();
  }
  jobConf.set("mapreduce.cluster.local.dir",conf.get("mapreduce.cluster.local.dir"));
  LOG.info("Mini mapreduce cluster started");
  conf.set("mapreduce.jobtracker.address",jobConf.get("mapreduce.jobtracker.address"));
  conf.set("mapreduce.framework.name","yarn");
  conf.setBoolean("yarn.is.minicluster",true);
  String rmAddress=jobConf.get("yarn.resourcemanager.address");
  if (rmAddress != null) {
    conf.set("yarn.resourcemanager.address",rmAddress);
  }
  String historyAddress=jobConf.get("mapreduce.jobhistory.address");
  if (historyAddress != null) {
    conf.set("mapreduce.jobhistory.address",historyAddress);
  }
  String schedulerAddress=jobConf.get("yarn.resourcemanager.scheduler.address");
  if (schedulerAddress != null) {
    conf.set("yarn.resourcemanager.scheduler.address",schedulerAddress);
  }
  String mrJobHistoryWebappAddress=jobConf.get("mapreduce.jobhistory.webapp.address");
  if (mrJobHistoryWebappAddress != null) {
    conf.set("mapreduce.jobhistory.webapp.address",mrJobHistoryWebappAddress);
  }
  String yarnRMWebappAddress=jobConf.get("yarn.resourcemanager.webapp.address");
  if (yarnRMWebappAddress != null) {
    conf.set("yarn.resourcemanager.webapp.address",yarnRMWebappAddress);
  }
}
