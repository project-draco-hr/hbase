{
  LOG.info("\n\nCreating random table " + tableName + " with "+ numRegions+ " regions, "+ numFlushes+ " storefiles per region, "+ numRowsPerFlush+ " rows per flush, maxVersions="+ maxVersions+ "\n");
  final Random rand=new Random(tableName.hashCode() * 17L + 12938197137L);
  final int numCF=families.size();
  final byte[][] cfBytes=new byte[numCF][];
  final byte[] tableNameBytes=Bytes.toBytes(tableName);
{
    int cfIndex=0;
    for (    String cf : families) {
      cfBytes[cfIndex++]=Bytes.toBytes(cf);
    }
  }
  final int actualStartKey=0;
  final int actualEndKey=Integer.MAX_VALUE;
  final int keysPerRegion=(actualEndKey - actualStartKey) / numRegions;
  final int splitStartKey=actualStartKey + keysPerRegion;
  final int splitEndKey=actualEndKey - keysPerRegion;
  final String keyFormat="%08x";
  final HTable table=createTable(tableNameBytes,cfBytes,maxVersions,Bytes.toBytes(String.format(keyFormat,splitStartKey)),Bytes.toBytes(String.format(keyFormat,splitEndKey)),numRegions);
  if (hbaseCluster != null) {
    getMiniHBaseCluster().flushcache(HConstants.META_TABLE_NAME);
  }
  for (int iFlush=0; iFlush < numFlushes; ++iFlush) {
    for (int iRow=0; iRow < numRowsPerFlush; ++iRow) {
      final byte[] row=Bytes.toBytes(String.format(keyFormat,actualStartKey + rand.nextInt(actualEndKey - actualStartKey)));
      Put put=new Put(row);
      Delete del=new Delete(row);
      for (int iCol=0; iCol < numColsPerRow; ++iCol) {
        final byte[] cf=cfBytes[rand.nextInt(numCF)];
        final long ts=rand.nextInt();
        final byte[] qual=Bytes.toBytes("col" + iCol);
        if (rand.nextBoolean()) {
          final byte[] value=Bytes.toBytes("value_for_row_" + iRow + "_cf_"+ Bytes.toStringBinary(cf)+ "_col_"+ iCol+ "_ts_"+ ts+ "_random_"+ rand.nextLong());
          put.add(cf,qual,ts,value);
        }
 else         if (rand.nextDouble() < 0.8) {
          del.deleteColumn(cf,qual,ts);
        }
 else {
          del.deleteColumns(cf,qual,ts);
        }
      }
      if (!put.isEmpty()) {
        table.put(put);
      }
      if (!del.isEmpty()) {
        table.delete(del);
      }
    }
    LOG.info("Initiating flush #" + iFlush + " for table "+ tableName);
    table.flushCommits();
    if (hbaseCluster != null) {
      getMiniHBaseCluster().flushcache(tableNameBytes);
    }
  }
  return table;
}
