{
  boolean result=false;
  long mcTime=getNextMajorCompactTime();
  if (filesToCompact == null || filesToCompact.isEmpty() || mcTime == 0) {
    return result;
  }
  long lowTimestamp=getLowestTimestamp(filesToCompact);
  long now=System.currentTimeMillis();
  if (lowTimestamp > 0l && lowTimestamp < (now - mcTime)) {
    if (filesToCompact.size() == 1) {
      StoreFile sf=filesToCompact.get(0);
      long oldest=(sf.getReader().timeRangeTracker == null) ? Long.MIN_VALUE : now - sf.getReader().timeRangeTracker.minimumTimestamp;
      if (sf.isMajorCompaction() && (store.getTtl() == HConstants.FOREVER || oldest < store.getTtl())) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Skipping major compaction of " + this + " because one (major) compacted file only and oldestTime "+ oldest+ "ms is < ttl="+ store.getTtl());
        }
      }
 else       if (store.getTtl() != HConstants.FOREVER && oldest > store.getTtl()) {
        LOG.debug("Major compaction triggered on store " + this + ", because keyvalues outdated; time since last major compaction "+ (now - lowTimestamp)+ "ms");
        result=true;
      }
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Major compaction triggered on store " + this + "; time since last major compaction "+ (now - lowTimestamp)+ "ms");
      }
      result=true;
    }
  }
  return result;
}
