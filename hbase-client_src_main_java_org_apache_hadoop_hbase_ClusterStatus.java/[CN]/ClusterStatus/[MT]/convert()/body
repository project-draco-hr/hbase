{
  ClusterStatusProtos.ClusterStatus.Builder builder=ClusterStatusProtos.ClusterStatus.newBuilder();
  builder.setHbaseVersion(HBaseVersionFileContent.newBuilder().setVersion(getHBaseVersion()));
  if (liveServers != null) {
    for (    Map.Entry<ServerName,ServerLoad> entry : liveServers.entrySet()) {
      LiveServerInfo.Builder lsi=LiveServerInfo.newBuilder().setServer(ProtobufUtil.toServerName(entry.getKey()));
      lsi.setServerLoad(entry.getValue().obtainServerLoadPB());
      builder.addLiveServers(lsi.build());
    }
  }
  if (deadServers != null) {
    for (    ServerName deadServer : deadServers) {
      builder.addDeadServers(ProtobufUtil.toServerName(deadServer));
    }
  }
  if (intransition != null) {
    for (    Map.Entry<String,RegionState> rit : getRegionsInTransition().entrySet()) {
      ClusterStatusProtos.RegionState rs=rit.getValue().convert();
      RegionSpecifier.Builder spec=RegionSpecifier.newBuilder().setType(RegionSpecifierType.REGION_NAME);
      spec.setValue(ByteString.copyFrom(Bytes.toBytes(rit.getKey())));
      RegionInTransition pbRIT=RegionInTransition.newBuilder().setSpec(spec.build()).setRegionState(rs).build();
      builder.addRegionsInTransition(pbRIT);
    }
  }
  if (clusterId != null) {
    builder.setClusterId(new ClusterId(clusterId).convert());
  }
  if (masterCoprocessors != null) {
    for (    String coprocessor : masterCoprocessors) {
      builder.addMasterCoprocessors(HBaseProtos.Coprocessor.newBuilder().setName(coprocessor));
    }
  }
  if (master != null) {
    builder.setMaster(ProtobufUtil.toServerName(getMaster()));
  }
  if (backupMasters != null) {
    for (    ServerName backup : backupMasters) {
      builder.addBackupMasters(ProtobufUtil.toServerName(backup));
    }
  }
  if (balancerOn != null) {
    builder.setBalancerOn(balancerOn);
  }
  return builder.build();
}
