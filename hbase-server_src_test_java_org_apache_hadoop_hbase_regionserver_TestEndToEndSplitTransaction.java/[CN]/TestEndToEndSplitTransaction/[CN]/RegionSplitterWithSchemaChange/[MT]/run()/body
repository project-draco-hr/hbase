{
  try {
    Random random=new Random();
    for (int i=0; i < 5; i++) {
      NavigableMap<HRegionInfo,ServerName> regions=MetaScanner.allTableRegions(conf,null,tableName,false);
      if (regions.size() == 0) {
        continue;
      }
      int regionIndex=random.nextInt(regions.size());
      HRegionInfo region=Iterators.get(regions.keySet().iterator(),regionIndex);
      int start=0, end=Integer.MAX_VALUE;
      if (region.getStartKey().length > 0) {
        start=Bytes.toInt(region.getStartKey());
      }
      if (region.getEndKey().length > 0) {
        end=Bytes.toInt(region.getEndKey());
      }
      int mid=start + ((end - start) / 2);
      byte[] splitPoint=Bytes.toBytes(mid);
      addData(start);
      addData(mid);
      flushAndBlockUntilDone(admin,rs,region.getRegionName());
      compactAndBlockUntilDone(admin,rs,region.getRegionName());
      log("Initiating region split for:" + region.getRegionNameAsString());
      try {
        admin.split(region.getRegionName(),splitPoint);
        for (int j=0; j < 5; j++) {
          HTableDescriptor htd=null;
          try {
            htd=admin.getTableDescriptor(tableName);
          }
 catch (          IOException ioe) {
            ioe.printStackTrace();
            fail("Issue pulling table descriptor");
          }
          HColumnDescriptor hcd=null;
          assertTrue(htd != null);
          final int countOfFamilies=htd.getFamilies().size();
          assertTrue(countOfFamilies > 0);
          hcd=htd.getColumnFamilies()[0];
          boolean expectedException=false;
          assertFalse(expectedException);
          int initMaxVersions=hcd.getMaxVersions();
          int newMaxVersions=initMaxVersions + 1;
          hcd.setMaxVersions(newMaxVersions);
          admin.modifyColumn(tableName,hcd);
          try {
            int EXPECTED_NUM_REGIONS=TEST_UTIL.getHBaseAdmin().getTableRegions(tableName).size();
            assertEquals("The max version count was not updated",newMaxVersions,TestAdmin.waitForColumnSchemasToSettle(TEST_UTIL.getMiniHBaseCluster(),tableName,EXPECTED_NUM_REGIONS).getMaxVersions());
            Thread.sleep(2000);
          }
 catch (          TableNotFoundException e) {
            e.printStackTrace();
            fail("Table not found. Failing.");
          }
catch (          IOException e) {
            e.printStackTrace();
            fail("IO Issue while modifying column");
          }
catch (          InterruptedException e) {
            LOG.warn("Sleep was interrupted. This is unusual, but not grounds for TF");
            e.printStackTrace();
          }
        }
        blockUntilRegionSplit(conf,50000,region.getRegionName(),true);
      }
 catch (      NotServingRegionException ex) {
      }
    }
  }
 catch (  Throwable ex) {
    this.ex=ex;
  }
}
