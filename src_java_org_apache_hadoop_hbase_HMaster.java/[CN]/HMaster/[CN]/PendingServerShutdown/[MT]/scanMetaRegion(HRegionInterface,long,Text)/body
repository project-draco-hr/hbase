{
  ArrayList<ToDoEntry> toDoList=new ArrayList<ToDoEntry>();
  TreeMap<Text,HRegionInfo> regions=new TreeMap<Text,HRegionInfo>();
  try {
    while (true) {
      KeyedData[] values=null;
      try {
        values=server.next(scannerId);
      }
 catch (      IOException e) {
        if (e instanceof RemoteException) {
          e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
        }
        LOG.error("Shutdown scanning of meta region",e);
        break;
      }
      if (values == null || values.length == 0) {
        break;
      }
      TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
      Text row=null;
      for (int i=0; i < values.length; i++) {
        if (row == null) {
          row=values[i].getKey().getRow();
        }
 else {
          if (!row.equals(values[i].getKey().getRow())) {
            LOG.error("Multiple rows in same scanner result set. firstRow=" + row + ", currentRow="+ values[i].getKey().getRow());
          }
        }
        results.put(values[i].getKey().getColumn(),values[i].getData());
      }
      if (LOG.isDebugEnabled() && row != null) {
        LOG.debug("shutdown scanner looking at " + row.toString());
      }
      String serverName;
      try {
        serverName=Writables.bytesToString(results.get(COL_SERVER));
      }
 catch (      UnsupportedEncodingException e) {
        LOG.error("Server name",e);
        break;
      }
      if (serverName.length() > 0 && deadServerName.compareTo(serverName) != 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Server name " + serverName + " is not same as "+ deadServerName+ ": Passing");
        }
        continue;
      }
      HRegionInfo info=null;
      try {
        info=(HRegionInfo)Writables.getWritable(results.get(COL_REGIONINFO),new HRegionInfo());
      }
 catch (      IOException e) {
        LOG.error("Read fields",e);
        break;
      }
      LOG.info(info.getRegionName() + " was on shutdown server <" + serverName+ "> (or server is null). Marking unassigned if "+ "meta and clearing pendingRegions");
      if (info.tableDesc.getName().equals(META_TABLE_NAME)) {
        onlineMetaRegions.remove(info.getStartKey());
      }
      ToDoEntry todo=new ToDoEntry(row,info);
      toDoList.add(todo);
      if (killList.containsKey(deadServerName)) {
        HashMap<Text,HRegionInfo> regionsToKill=killList.get(deadServerName);
        if (regionsToKill.containsKey(info.regionName)) {
          regionsToKill.remove(info.regionName);
          killList.put(deadServerName,regionsToKill);
          unassignedRegions.remove(info.regionName);
          assignAttempts.remove(info.regionName);
          if (regionsToDelete.contains(info.regionName)) {
            regionsToDelete.remove(info.regionName);
            todo.deleteRegion=true;
          }
 else {
            todo.regionOffline=true;
          }
        }
      }
 else {
        regions.put(info.regionName,info);
        pendingRegions.remove(info.getRegionName());
      }
    }
  }
  finally {
    if (scannerId != -1L) {
      try {
        server.close(scannerId);
      }
 catch (      IOException e) {
        if (e instanceof RemoteException) {
          e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
        }
        LOG.error("Closing scanner",e);
      }
    }
  }
  for (  ToDoEntry e : toDoList) {
    BatchUpdate b=new BatchUpdate();
    long lockid=b.startUpdate(e.row);
    if (e.deleteRegion) {
      b.delete(lockid,COL_REGIONINFO);
    }
 else     if (e.regionOffline) {
      e.info.offLine=true;
      b.put(lockid,COL_REGIONINFO,Writables.getBytes(e.info));
    }
    b.delete(lockid,COL_SERVER);
    b.delete(lockid,COL_STARTCODE);
    server.batchUpdate(regionName,System.currentTimeMillis(),b);
  }
  for (  Map.Entry<Text,HRegionInfo> e : regions.entrySet()) {
    Text region=e.getKey();
    HRegionInfo regionInfo=e.getValue();
    unassignedRegions.put(region,regionInfo);
    assignAttempts.put(region,Long.valueOf(0L));
  }
}
