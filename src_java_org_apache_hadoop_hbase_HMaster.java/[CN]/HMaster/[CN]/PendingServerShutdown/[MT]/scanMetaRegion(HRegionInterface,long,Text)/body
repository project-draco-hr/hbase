{
  Vector<ToDoEntry> toDoList=new Vector<ToDoEntry>();
  TreeMap<Text,HRegionInfo> regions=new TreeMap<Text,HRegionInfo>();
  DataInputBuffer inbuf=new DataInputBuffer();
  try {
    while (true) {
      LabelledData[] values=null;
      HStoreKey key=new HStoreKey();
      try {
        values=server.next(scannerId,key);
      }
 catch (      NotServingRegionException e) {
        throw e;
      }
catch (      IOException e) {
        LOG.error(e);
        break;
      }
      if (values == null || values.length == 0) {
        break;
      }
      TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
      for (int i=0; i < values.length; i++) {
        byte[] bytes=new byte[values[i].getData().getSize()];
        System.arraycopy(values[i].getData().get(),0,bytes,0,bytes.length);
        results.put(values[i].getLabel(),bytes);
      }
      byte[] bytes=results.get(COL_SERVER);
      String serverName=null;
      if (bytes == null || bytes.length == 0) {
        continue;
      }
      try {
        serverName=new String(bytes,UTF8_ENCODING);
      }
 catch (      UnsupportedEncodingException e) {
        LOG.error(e);
        break;
      }
      if (deadServer.compareTo(serverName) != 0) {
        continue;
      }
      bytes=results.get(COL_STARTCODE);
      if (bytes == null || bytes.length == 0) {
        continue;
      }
      long startCode=-1L;
      try {
        startCode=Long.valueOf(new String(bytes,UTF8_ENCODING)).longValue();
      }
 catch (      UnsupportedEncodingException e) {
        LOG.error(e);
        break;
      }
      if (oldStartCode != startCode) {
        continue;
      }
      bytes=results.get(COL_REGIONINFO);
      if (bytes == null || bytes.length == 0) {
        throw new IOException("no value for " + COL_REGIONINFO);
      }
      inbuf.reset(bytes,bytes.length);
      HRegionInfo info=new HRegionInfo();
      try {
        info.readFields(inbuf);
      }
 catch (      IOException e) {
        LOG.error(e);
        break;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug(serverName + " was serving " + info.regionName);
      }
      ToDoEntry todo=new ToDoEntry(key,info);
      toDoList.add(todo);
      if (killList.containsKey(deadServer)) {
        TreeMap<Text,HRegionInfo> regionsToKill=killList.get(deadServer);
        if (regionsToKill.containsKey(info.regionName)) {
          regionsToKill.remove(info.regionName);
          killList.put(deadServer,regionsToKill);
          unassignedRegions.remove(info.regionName);
          assignAttempts.remove(info.regionName);
          if (regionsToDelete.contains(info.regionName)) {
            regionsToDelete.remove(info.regionName);
            todo.deleteRegion=true;
          }
 else {
            todo.regionOffline=true;
          }
        }
      }
 else {
        regions.put(info.regionName,info);
      }
    }
  }
  finally {
    if (scannerId != -1L) {
      try {
        server.close(scannerId);
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
  for (int i=0; i < toDoList.size(); i++) {
    ToDoEntry e=toDoList.get(i);
    long lockid=server.startUpdate(regionName,clientId,e.key.getRow());
    if (e.deleteRegion) {
      server.delete(regionName,clientId,lockid,COL_REGIONINFO);
    }
 else     if (e.regionOffline) {
      e.info.offLine=true;
      ByteArrayOutputStream byteValue=new ByteArrayOutputStream();
      DataOutputStream s=new DataOutputStream(byteValue);
      e.info.write(s);
      server.put(regionName,clientId,lockid,COL_REGIONINFO,new BytesWritable(byteValue.toByteArray()));
    }
    server.delete(regionName,clientId,lockid,COL_SERVER);
    server.delete(regionName,clientId,lockid,COL_STARTCODE);
    server.commit(regionName,clientId,lockid);
  }
  for (  Map.Entry<Text,HRegionInfo> e : regions.entrySet()) {
    Text region=e.getKey();
    HRegionInfo regionInfo=e.getValue();
    unassignedRegions.put(region,regionInfo);
    assignAttempts.put(region,0L);
  }
}
