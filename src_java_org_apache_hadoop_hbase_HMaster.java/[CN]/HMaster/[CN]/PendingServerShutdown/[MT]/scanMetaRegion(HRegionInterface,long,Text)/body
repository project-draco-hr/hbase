{
  Vector<HStoreKey> toDoList=new Vector<HStoreKey>();
  TreeMap<Text,HRegionInfo> regions=new TreeMap<Text,HRegionInfo>();
  DataInputBuffer inbuf=new DataInputBuffer();
  try {
    LabelledData[] values=null;
    while (true) {
      HStoreKey key=new HStoreKey();
      values=server.next(scannerId,key);
      if (values.length == 0) {
        break;
      }
      TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
      for (int i=0; i < values.length; i++) {
        results.put(values[i].getLabel(),values[i].getData().get());
      }
      String serverName=new String(results.get(META_COL_SERVER),UTF8_ENCODING);
      if (deadServer.compareTo(serverName) != 0) {
        continue;
      }
      long startCode=Long.valueOf(new String(results.get(META_COL_STARTCODE),UTF8_ENCODING));
      if (oldStartCode != startCode) {
        continue;
      }
      byte hRegionInfoBytes[]=results.get(META_COL_REGIONINFO);
      inbuf.reset(hRegionInfoBytes,hRegionInfoBytes.length);
      HRegionInfo info=new HRegionInfo();
      info.readFields(inbuf);
      LOG.debug(serverName + " was serving " + info.regionName);
      toDoList.add(key);
      regions.put(info.regionName,info);
    }
  }
  finally {
    if (scannerId != -1L) {
      try {
        server.close(scannerId);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    scannerId=-1L;
  }
  for (int i=0; i < toDoList.size(); i++) {
    long lockid=server.startUpdate(regionName,clientId,toDoList.get(i).getRow());
    server.delete(regionName,clientId,lockid,META_COL_SERVER);
    server.delete(regionName,clientId,lockid,META_COL_STARTCODE);
    server.commit(regionName,clientId,lockid);
  }
  for (Iterator<Map.Entry<Text,HRegionInfo>> i=regions.entrySet().iterator(); i.hasNext(); ) {
    Map.Entry<Text,HRegionInfo> e=i.next();
    Text region=e.getKey();
    HRegionInfo regionInfo=e.getValue();
    unassignedRegions.put(region,regionInfo);
    assignAttempts.put(region,0L);
  }
}
