{
  Vector<HStoreKey> toDoList=new Vector<HStoreKey>();
  TreeMap<Text,HRegionInfo> regions=new TreeMap<Text,HRegionInfo>();
  DataInputBuffer inbuf=new DataInputBuffer();
  try {
    HStoreKey key=new HStoreKey();
    TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
    while (scanner.next(key,results)) {
      byte serverBytes[]=results.get(META_COL_SERVER);
      String serverName=new String(serverBytes,UTF8_ENCODING);
      if (deadServer.compareTo(serverName) != 0) {
        continue;
      }
      byte startCodeBytes[]=results.get(META_COL_STARTCODE);
      long startCode=Long.decode(new String(startCodeBytes,UTF8_ENCODING));
      if (oldStartCode != startCode) {
        continue;
      }
      byte hRegionInfoBytes[]=results.get(META_COL_REGIONINFO);
      inbuf.reset(hRegionInfoBytes,hRegionInfoBytes.length);
      HRegionInfo info=new HRegionInfo();
      info.readFields(inbuf);
      toDoList.add(key);
      regions.put(info.regionName,info);
    }
  }
  finally {
    scanner.close();
  }
  for (int i=0; i < toDoList.size(); i++) {
    long lockid=server.startUpdate(regionName,clientId,toDoList.get(i).getRow());
    server.delete(regionName,clientId,lockid,META_COL_SERVER);
    server.delete(regionName,clientId,lockid,META_COL_STARTCODE);
    server.commit(regionName,clientId,lockid);
  }
  for (Iterator<Map.Entry<Text,HRegionInfo>> i=regions.entrySet().iterator(); i.hasNext(); ) {
    Map.Entry<Text,HRegionInfo> e=i.next();
    Text region=e.getKey();
    HRegionInfo regionInfo=e.getValue();
synchronized (unassignedRegions) {
      unassignedRegions.put(region,regionInfo);
      assignAttempts.put(region,0L);
    }
  }
}
