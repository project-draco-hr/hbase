{
  Vector<HMsg> returnMsgs=new Vector<HMsg>();
  TreeMap<Text,HRegionInfo> regionsToKill=killList.remove(info.getServerAddress().toString());
  for (int i=0; i < incomingMsgs.length; i++) {
    HRegionInfo region=incomingMsgs[i].getRegionInfo();
switch (incomingMsgs[i].getMsg()) {
case HMsg.MSG_REPORT_OPEN:
      HRegionInfo regionInfo=unassignedRegions.get(region.regionName);
    if (regionInfo == null) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("region server " + info.getServerAddress().toString() + " should not have opened region "+ region.regionName);
      }
      returnMsgs.add(new HMsg(HMsg.MSG_REGION_CLOSE_WITHOUT_REPORT,region));
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(info.getServerAddress().toString() + " serving " + region.regionName);
      }
      pendingRegions.add(region.regionName);
      unassignedRegions.remove(region.regionName);
      assignAttempts.remove(region.regionName);
      if (region.regionName.compareTo(HGlobals.rootRegionInfo.regionName) == 0) {
        rootRegionLocation=new HServerAddress(info.getServerAddress());
        rootRegionIsAvailable();
        break;
      }
 else       if (region.tableDesc.getName().equals(META_TABLE_NAME)) {
        MetaRegion r=new MetaRegion();
        r.server=info.getServerAddress();
        r.regionName=region.regionName;
        r.startKey=region.startKey;
synchronized (metaRegionsToScan) {
          metaRegionsToScan.add(r);
          metaRegionsToScan.notifyAll();
        }
      }
synchronized (msgQueue) {
        msgQueue.addLast(new PendingOpenReport(info,region));
        msgQueue.notifyAll();
      }
    }
  break;
case HMsg.MSG_REPORT_CLOSE:
if (LOG.isDebugEnabled()) {
  LOG.debug(info.getServerAddress().toString() + " no longer serving " + region.regionName);
}
if (region.regionName.compareTo(HGlobals.rootRegionInfo.regionName) == 0) {
rootRegionLocation=null;
unassignedRegions.put(region.regionName,region);
assignAttempts.put(region.regionName,0L);
}
 else {
boolean reassignRegion=true;
boolean deleteRegion=false;
if (killedRegions.remove(region.regionName)) {
  reassignRegion=false;
}
if (regionsToDelete.remove(region.regionName)) {
  reassignRegion=false;
  deleteRegion=true;
}
unassignedRegions.remove(region.regionName);
assignAttempts.remove(region.regionName);
synchronized (msgQueue) {
  msgQueue.addLast(new PendingCloseReport(region,reassignRegion,deleteRegion));
  msgQueue.notifyAll();
}
}
break;
case HMsg.MSG_NEW_REGION:
if (LOG.isDebugEnabled()) {
LOG.debug("new region " + region.regionName);
}
if (region.tableDesc.getName().equals(META_TABLE_NAME)) {
allMetaRegionsScanned=false;
}
break;
default :
throw new IOException("Impossible state during msg processing.  Instruction: " + incomingMsgs[i].getMsg());
}
}
if (regionsToKill != null) {
for (HRegionInfo i : regionsToKill.values()) {
returnMsgs.add(new HMsg(HMsg.MSG_REGION_CLOSE,i));
killedRegions.add(i.regionName);
}
}
if (unassignedRegions.size() > 0) {
int targetForServer=(int)Math.ceil(unassignedRegions.size() / (1.0 * serversToServerInfo.size()));
int counter=0;
long now=System.currentTimeMillis();
for (Text curRegionName : unassignedRegions.keySet()) {
HRegionInfo regionInfo=unassignedRegions.get(curRegionName);
long assignedTime=assignAttempts.get(curRegionName);
if (now - assignedTime > maxRegionOpenTime) {
if (LOG.isDebugEnabled()) {
LOG.debug("assigning region " + regionInfo.regionName + " to server "+ info.getServerAddress().toString());
}
returnMsgs.add(new HMsg(HMsg.MSG_REGION_OPEN,regionInfo));
assignAttempts.put(curRegionName,now);
counter++;
}
if (counter >= targetForServer) {
break;
}
}
}
return returnMsgs.toArray(new HMsg[returnMsgs.size()]);
}
