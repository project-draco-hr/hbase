{
  Thread.currentThread().setName("HMaster");
  try {
    this.rootScannerThread.start();
    this.metaScannerThread.start();
    this.server.start();
  }
 catch (  IOException e) {
    if (e instanceof RemoteException) {
      try {
        e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
      }
 catch (      IOException ex) {
        LOG.warn("",ex);
      }
    }
    this.closed=true;
    LOG.error("Failed startup",e);
  }
  for (PendingOperation op=null; !closed; ) {
    try {
      op=msgQueue.poll(threadWakeFrequency,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
    if (op == null || closed) {
      continue;
    }
    try {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Main processing loop: " + op.toString());
      }
      if (!op.process()) {
        if (msgQueue.size() == 0) {
          try {
            Thread.sleep(threadWakeFrequency);
          }
 catch (          InterruptedException e) {
          }
        }
        try {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Put " + op.toString() + " back on queue");
          }
          msgQueue.put(op);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException("Putting into msgQueue was " + "interrupted.",e);
        }
      }
    }
 catch (    Exception ex) {
      if (ex instanceof RemoteException) {
        try {
          ex=RemoteExceptionHandler.decodeRemoteException((RemoteException)ex);
        }
 catch (        IOException e) {
          LOG.warn("",e);
        }
      }
      LOG.warn("Processing pending operations: " + op.toString(),ex);
      try {
        msgQueue.put(op);
      }
 catch (      InterruptedException e) {
        throw new RuntimeException("Putting into msgQueue was interrupted.",e);
      }
    }
  }
  letRegionServersShutdown();
synchronized (rootScannerLock) {
    rootScannerThread.interrupt();
  }
synchronized (metaScannerLock) {
    metaScannerThread.interrupt();
  }
  server.stop();
  serverLeases.close();
  try {
    rootScannerThread.join();
  }
 catch (  Exception iex) {
    LOG.warn("root scanner",iex);
  }
  try {
    metaScannerThread.join();
  }
 catch (  Exception iex) {
    LOG.warn("meta scanner",iex);
  }
  try {
    server.join();
  }
 catch (  InterruptedException iex) {
    LOG.warn("server",iex);
  }
  LOG.info("HMaster main thread exiting");
}
