{
  final String threadName="HMaster";
  Thread.currentThread().setName(threadName);
  startAllServices();
  try {
    for (PendingOperation op=null; !closed.get(); ) {
      try {
        op=msgQueue.poll(threadWakeFrequency,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException e) {
      }
      if (op == null || closed.get()) {
        continue;
      }
      try {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Main processing loop: " + op.toString());
        }
        if (!op.process()) {
          if (msgQueue.size() == 0) {
            sleeper.sleep();
          }
          try {
            if (LOG.isDebugEnabled()) {
              LOG.debug("Put " + op.toString() + " back on queue");
            }
            msgQueue.put(op);
          }
 catch (          InterruptedException e) {
            throw new RuntimeException("Putting into msgQueue was interrupted.",e);
          }
        }
      }
 catch (      Exception ex) {
        if (ex instanceof RemoteException) {
          try {
            ex=RemoteExceptionHandler.decodeRemoteException((RemoteException)ex);
          }
 catch (          IOException e) {
            ex=e;
            LOG.warn("main processing loop: " + op.toString(),e);
          }
        }
        if (!checkFileSystem()) {
          break;
        }
        LOG.warn("Processing pending operations: " + op.toString(),ex);
        try {
          msgQueue.put(op);
        }
 catch (        InterruptedException e) {
          throw new RuntimeException("Putting into msgQueue was interrupted.",e);
        }
      }
    }
  }
 catch (  Throwable t) {
    LOG.fatal("Unhandled exception",t);
  }
  letRegionServersShutdown();
synchronized (rootScannerLock) {
    rootScannerThread.interrupt();
  }
synchronized (metaScannerLock) {
    metaScannerThread.interrupt();
  }
  server.stop();
  serverLeases.close();
  try {
    rootScannerThread.join();
  }
 catch (  Exception iex) {
    LOG.warn("root scanner",iex);
  }
  try {
    metaScannerThread.join();
  }
 catch (  Exception iex) {
    LOG.warn("meta scanner",iex);
  }
  try {
    server.join();
  }
 catch (  InterruptedException iex) {
    LOG.warn("server",iex);
  }
  LOG.info("HMaster main thread exiting");
}
