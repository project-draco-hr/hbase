{
  long now=System.currentTimeMillis();
  TreeSet<Text> regionsToAssign=new TreeSet<Text>();
  for (  Map.Entry<Text,Long> e : assignAttempts.entrySet()) {
    if (now - e.getValue() > maxRegionOpenTime) {
      regionsToAssign.add(e.getKey());
    }
  }
  int nRegionsToAssign=regionsToAssign.size();
  if (nRegionsToAssign > 0) {
    if (serversToServerInfo.size() == 1) {
      for (      Text regionName : regionsToAssign) {
        HRegionInfo regionInfo=unassignedRegions.get(regionName);
        LOG.info("assigning region " + regionName + " to server "+ serverName);
        assignAttempts.put(regionName,Long.valueOf(now));
        returnMsgs.add(new HMsg(HMsg.MSG_REGION_OPEN,regionInfo));
      }
    }
 else {
      HServerLoad thisServersLoad=info.getLoad();
synchronized (serversToServerInfo) {
        SortedMap<HServerLoad,Set<String>> lightServers=loadToServers.headMap(thisServersLoad);
        int nregions=0;
        for (        Map.Entry<HServerLoad,Set<String>> e : lightServers.entrySet()) {
          HServerLoad lightLoad=new HServerLoad(e.getKey().getNumberOfRequests(),e.getKey().getNumberOfRegions());
          do {
            lightLoad.setNumberOfRegions(lightLoad.getNumberOfRegions() + 1);
            nregions+=1;
          }
 while (lightLoad.compareTo(thisServersLoad) <= 0 && nregions < nRegionsToAssign);
          nregions*=e.getValue().size();
          if (nregions >= nRegionsToAssign) {
            break;
          }
        }
        nRegionsToAssign-=nregions;
        if (nRegionsToAssign > 0) {
          SortedMap<HServerLoad,Set<String>> heavyServers=loadToServers.tailMap(thisServersLoad);
          int nservers=0;
          HServerLoad heavierLoad=null;
          for (          Map.Entry<HServerLoad,Set<String>> e : heavyServers.entrySet()) {
            Set<String> servers=e.getValue();
            nservers+=servers.size();
            if (e.getKey().compareTo(thisServersLoad) == 0) {
              nservers-=1;
              continue;
            }
            heavierLoad=e.getKey();
            break;
          }
          nregions=0;
          if (heavierLoad != null) {
            for (HServerLoad load=new HServerLoad(thisServersLoad.getNumberOfRequests(),thisServersLoad.getNumberOfRegions()); load.compareTo(heavierLoad) <= 0 && nregions < nRegionsToAssign; load.setNumberOfRegions(load.getNumberOfRegions() + 1), nregions++) {
            }
          }
          if (nregions < nRegionsToAssign) {
            if (nservers > 0) {
              nregions=(int)Math.ceil((1.0 * nRegionsToAssign) / (1.0 * nservers));
            }
 else {
              nregions=(int)Math.ceil((1.0 * nRegionsToAssign) / (1.0 * serversToServerInfo.size()));
            }
          }
 else {
            nregions=nRegionsToAssign;
          }
          for (          Map.Entry<Text,HRegionInfo> e : unassignedRegions.entrySet()) {
            Text regionName=e.getKey();
            HRegionInfo regionInfo=e.getValue();
            LOG.info("assigning region " + regionName + " to server "+ serverName);
            assignAttempts.put(regionName,Long.valueOf(now));
            returnMsgs.add(new HMsg(HMsg.MSG_REGION_OPEN,regionInfo));
            if (--nregions <= 0) {
              break;
            }
          }
        }
      }
    }
  }
}
