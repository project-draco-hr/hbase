{
  String serverName=serverInfo.getServerAddress().toString().trim();
  long serverLabel=getServerLabel(serverName);
  if (msgs.length > 0) {
    if (msgs[0].getMsg() == HMsg.MSG_REPORT_EXITING) {
synchronized (serversToServerInfo) {
        try {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Region server " + serverName + ": MSG_REPORT_EXITING -- cancelling lease");
          }
          if (cancelLease(serverName,serverLabel)) {
            LOG.info("Region server " + serverName + ": MSG_REPORT_EXITING -- lease cancelled");
            if (!closed.get()) {
              for (int i=1; i < msgs.length; i++) {
                HRegionInfo info=msgs[i].getRegionInfo();
                if (info.isRootRegion()) {
                  rootRegionLocation.set(null);
                }
 else                 if (info.isMetaTable()) {
                  onlineMetaRegions.remove(info.getStartKey());
                }
                this.unassignedRegions.put(info,ZERO_L);
              }
            }
          }
          return new HMsg[0];
        }
  finally {
          serversToServerInfo.notifyAll();
        }
      }
    }
 else     if (msgs[0].getMsg() == HMsg.MSG_REPORT_QUIESCED) {
      LOG.info("Region server " + serverName + " quiesced");
      if (quiescedMetaServers.incrementAndGet() == serversToServerInfo.size()) {
        LOG.info("All user tables quiesced. Proceeding with shutdown");
        closed.set(true);
synchronized (toDoQueue) {
          toDoQueue.clear();
          delayedToDoQueue.clear();
          toDoQueue.notifyAll();
        }
      }
    }
  }
  if (shutdownRequested.get() && !closed.get()) {
    return new HMsg[]{new HMsg(HMsg.MSG_REGIONSERVER_QUIESCE)};
  }
  if (closed.get()) {
    return new HMsg[]{new HMsg(HMsg.MSG_REGIONSERVER_STOP)};
  }
  HServerInfo storedInfo=serversToServerInfo.get(serverName);
  if (storedInfo == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("received server report from unknown server: " + serverName);
    }
    return new HMsg[]{new HMsg(HMsg.MSG_CALL_SERVER_STARTUP)};
  }
 else   if (storedInfo.getStartCode() != serverInfo.getStartCode()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("region server race condition detected: " + serverName);
    }
    cancelLease(serverName,serverLabel);
    return new HMsg[]{new HMsg(HMsg.MSG_REGIONSERVER_STOP)};
  }
 else {
    serverLeases.renewLease(serverLabel,serverLabel);
    serversToServerInfo.put(serverName,serverInfo);
    HServerLoad load=serversToLoad.get(serverName);
    if (load != null && !load.equals(serverInfo.getLoad())) {
      Set<String> servers=loadToServers.get(load);
      servers.remove(serverName);
      loadToServers.put(load,servers);
    }
    load=serverInfo.getLoad();
    serversToLoad.put(serverName,load);
    Set<String> servers=loadToServers.get(load);
    if (servers == null) {
      servers=new HashSet<String>();
    }
    servers.add(serverName);
    loadToServers.put(load,servers);
    return processMsgs(serverInfo,msgs);
  }
}
