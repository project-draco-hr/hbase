{
  String s=serverInfo.getServerAddress().toString().trim();
  long serverLabel=getServerLabel(s);
  if (closed) {
    cancelLease(s,serverLabel);
    HMsg returnMsgs[]={new HMsg(HMsg.MSG_REGIONSERVER_STOP)};
    return returnMsgs;
  }
  if (msgs.length > 0 && msgs[0].getMsg() == HMsg.MSG_REPORT_EXITING) {
    cancelLease(s,serverLabel);
    for (int i=1; i < msgs.length; i++) {
      HRegionInfo info=msgs[i].getRegionInfo();
      if (info.tableDesc.getName().equals(ROOT_TABLE_NAME)) {
        rootRegionLocation=null;
      }
 else       if (info.tableDesc.getName().equals(META_TABLE_NAME)) {
        allMetaRegionsScanned=false;
      }
      unassignedRegions.put(info.regionName,info);
      assignAttempts.put(info.regionName,Long.valueOf(0L));
    }
    return new HMsg[0];
  }
  HServerInfo storedInfo=serversToServerInfo.get(s);
  if (storedInfo == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("received server report from unknown server: " + s);
    }
    HMsg returnMsgs[]=new HMsg[1];
    returnMsgs[0]=new HMsg(HMsg.MSG_CALL_SERVER_STARTUP);
    return returnMsgs;
  }
 else   if (storedInfo.getStartCode() != serverInfo.getStartCode()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("region server race condition detected: " + s);
    }
    HMsg returnMsgs[]={new HMsg(HMsg.MSG_REGIONSERVER_STOP)};
    return returnMsgs;
  }
 else {
    serverLeases.renewLease(serverLabel,serverLabel);
    serversToServerInfo.put(s,serverInfo);
    return processMsgs(serverInfo,msgs);
  }
}
