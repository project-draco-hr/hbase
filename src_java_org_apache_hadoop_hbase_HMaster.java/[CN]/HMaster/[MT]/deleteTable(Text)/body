{
  Text[] columns={META_COLUMN_FAMILY};
  metaScanner.waitForMetaScan();
  for (Iterator<MetaRegion> it=knownMetaRegions.tailMap(tableName).values().iterator(); it.hasNext(); ) {
    long clientId=rand.nextLong();
    MetaRegion m=it.next();
    HRegionInterface server=client.getHRegionConnection(m.server);
    long scannerId=-1L;
    try {
      scannerId=server.openScanner(m.regionName,columns,tableName);
      Vector<Text> rowsToDelete=new Vector<Text>();
      DataInputBuffer inbuf=new DataInputBuffer();
      while (true) {
        LabelledData[] values=null;
        HStoreKey key=new HStoreKey();
        values=server.next(scannerId,key);
        if (values.length == 0) {
          break;
        }
        TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
        for (int i=0; i < values.length; i++) {
          results.put(values[i].getLabel(),values[i].getData().get());
        }
        byte bytes[]=results.get(META_COL_REGIONINFO);
        inbuf.reset(bytes,bytes.length);
        HRegionInfo info=new HRegionInfo();
        info.readFields(inbuf);
        if (info.tableDesc.getName().compareTo(tableName) > 0) {
          break;
        }
        String serverName=new String(results.get(META_COL_SERVER),UTF8_ENCODING);
        long startCode=Long.valueOf(new String(results.get(META_COL_STARTCODE),UTF8_ENCODING));
        HServerInfo s=serversToServerInfo.get(serverName);
        if (s != null && s.getStartCode() == startCode) {
          TreeMap<Text,HRegionInfo> regionsToKill=killList.get(serverName);
          if (regionsToKill == null) {
            regionsToKill=new TreeMap<Text,HRegionInfo>();
          }
          regionsToKill.put(info.regionName,info);
          killList.put(serverName,regionsToKill);
        }
      }
      for (Iterator<Text> row=rowsToDelete.iterator(); row.hasNext(); ) {
        long lockid=server.startUpdate(m.regionName,clientId,row.next());
        server.delete(m.regionName,clientId,lockid,columns[0]);
        server.commit(m.regionName,clientId,lockid);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (scannerId != -1L) {
        try {
          server.close(scannerId);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      scannerId=-1L;
    }
  }
  LOG.debug("deleted table: " + tableName);
}
