{
  this.closed=true;
  this.dir=dir;
  this.conf=conf;
  this.fs=FileSystem.get(conf);
  this.rand=new Random();
  if (!fs.exists(dir)) {
    fs.mkdirs(dir);
  }
  Path rootRegionDir=HStoreFile.getHRegionDir(dir,HGlobals.rootRegionInfo.regionName);
  LOG.info("Root region dir: " + rootRegionDir.toString());
  if (!fs.exists(rootRegionDir)) {
    LOG.info("bootstrap: creating ROOT and first META regions");
    try {
      HRegion root=HRegion.createHRegion(0L,HGlobals.rootTableDesc,this.dir,this.conf);
      HRegion meta=HRegion.createHRegion(1L,HGlobals.metaTableDesc,this.dir,this.conf);
      HRegion.addRegionToMETA(root,meta);
      root.close();
      root.getLog().closeAndDelete();
      meta.close();
      meta.getLog().closeAndDelete();
    }
 catch (    IOException e) {
      if (e instanceof RemoteException) {
        e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
      }
      LOG.error(e);
    }
  }
  this.threadWakeFrequency=conf.getLong(THREAD_WAKE_FREQUENCY,10 * 1000);
  this.numRetries=conf.getInt("hbase.client.retries.number",2);
  this.maxRegionOpenTime=conf.getLong("hbase.hbasemaster.maxregionopen",30 * 1000);
  this.msgQueue=new LinkedBlockingQueue<PendingOperation>();
  this.serverLeases=new Leases(conf.getLong("hbase.master.lease.period",30 * 1000),conf.getLong("hbase.master.lease.thread.wakefrequency",15 * 1000));
  this.server=RPC.getServer(this,address.getBindAddress(),address.getPort(),conf.getInt("hbase.regionserver.handler.count",10),false,conf);
  this.address=new HServerAddress(server.getListenerAddress());
  conf.set(MASTER_ADDRESS,address.toString());
  this.connection=HConnectionManager.getConnection(conf);
  this.metaRescanInterval=conf.getLong("hbase.master.meta.thread.rescanfrequency",60 * 1000);
  this.rootRegionLocation=null;
  this.rootScanned=false;
  this.rootScanner=new RootScanner();
  this.rootScannerThread=new Thread(rootScanner,"HMaster.rootScanner");
  this.numberOfMetaRegions=new AtomicInteger();
  this.metaRegionsToScan=new LinkedBlockingQueue<MetaRegion>();
  this.onlineMetaRegions=Collections.synchronizedSortedMap(new TreeMap<Text,MetaRegion>());
  this.initialMetaScanComplete=false;
  this.metaScanner=new MetaScanner();
  this.metaScannerThread=new Thread(metaScanner,"HMaster.metaScanner");
  this.unassignedRegions=Collections.synchronizedSortedMap(new TreeMap<Text,HRegionInfo>());
  this.unassignedRegions.put(HGlobals.rootRegionInfo.regionName,HGlobals.rootRegionInfo);
  this.assignAttempts=Collections.synchronizedSortedMap(new TreeMap<Text,Long>());
  this.pendingRegions=Collections.synchronizedSortedSet(new TreeSet<Text>());
  this.assignAttempts.put(HGlobals.rootRegionInfo.regionName,Long.valueOf(0L));
  this.killList=Collections.synchronizedSortedMap(new TreeMap<String,TreeMap<Text,HRegionInfo>>());
  this.killedRegions=Collections.synchronizedSortedSet(new TreeSet<Text>());
  this.regionsToDelete=Collections.synchronizedSortedSet(new TreeSet<Text>());
  this.closed=false;
  LOG.info("HMaster initialized on " + this.address.toString());
}
