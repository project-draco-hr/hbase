{
  Class<?> implClass=null;
  LOG.debug("Loading coprocessor class " + className + " with path "+ path+ " and priority "+ priority);
  ClassLoader cl=null;
  if (path == null) {
    try {
      implClass=getClass().getClassLoader().loadClass(className);
    }
 catch (    ClassNotFoundException e) {
      throw new IOException("No jar path specified for " + className);
    }
  }
 else {
    cl=classLoadersCache.get(path);
    if (cl != null) {
      LOG.debug("Found classloader " + cl + "for "+ path.toString());
      try {
        implClass=cl.loadClass(className);
      }
 catch (      ClassNotFoundException e) {
        LOG.info("Class " + className + " needs to be loaded from a file - "+ path+ ".");
      }
    }
  }
  if (implClass == null) {
    if (path == null) {
      throw new IOException("No jar path specified for " + className);
    }
    if (!path.toString().endsWith(".jar")) {
      throw new IOException(path.toString() + ": not a jar file?");
    }
    FileSystem fs=path.getFileSystem(HBaseConfiguration.create());
    Path dst=new Path(System.getProperty("java.io.tmpdir") + java.io.File.separator + "."+ pathPrefix+ "."+ className+ "."+ System.currentTimeMillis()+ ".jar");
    fs.copyToLocalFile(path,dst);
    File tmpLocal=new File(dst.toString());
    tmpLocal.deleteOnExit();
    List<URL> paths=new ArrayList<URL>();
    URL url=new File(dst.toString()).getCanonicalFile().toURL();
    paths.add(url);
    JarFile jarFile=new JarFile(dst.toString());
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      if (entry.getName().matches("/lib/[^/]+\\.jar")) {
        File file=new File(System.getProperty("java.io.tmpdir") + java.io.File.separator + "."+ pathPrefix+ "."+ className+ "."+ System.currentTimeMillis()+ "."+ entry.getName().substring(5));
        IOUtils.copyBytes(jarFile.getInputStream(entry),new FileOutputStream(file),conf,true);
        file.deleteOnExit();
        paths.add(file.toURL());
      }
    }
    jarFile.close();
    cl=new CoprocessorClassLoader(paths,this.getClass().getClassLoader());
    ClassLoader prev=classLoadersCache.putIfAbsent(path,cl);
    if (prev != null) {
      cl=prev;
    }
    try {
      implClass=cl.loadClass(className);
    }
 catch (    ClassNotFoundException e) {
      throw new IOException("Cannot load external coprocessor class " + className,e);
    }
  }
  Thread currentThread=Thread.currentThread();
  ClassLoader hostClassLoader=currentThread.getContextClassLoader();
  try {
    currentThread.setContextClassLoader(cl);
    E cpInstance=loadInstance(implClass,priority,conf);
    return cpInstance;
  }
  finally {
    currentThread.setContextClassLoader(hostClassLoader);
  }
}
