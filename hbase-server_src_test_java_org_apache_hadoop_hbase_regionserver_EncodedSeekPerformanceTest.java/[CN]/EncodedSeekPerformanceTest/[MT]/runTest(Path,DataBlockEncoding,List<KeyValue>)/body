{
  StoreFile storeFile=new StoreFile(testingUtility.getTestFileSystem(),path,configuration,cacheConf,BloomType.NONE);
  long totalSize=0;
  StoreFile.Reader reader=storeFile.createReader();
  StoreFileScanner scanner=reader.getStoreFileScanner(true,false);
  long startReadingTime=System.nanoTime();
  KeyValue current;
  scanner.seek(KeyValue.LOWESTKEY);
  while (null != (current=scanner.next())) {
    if (current.getLength() < 0) {
      throw new IOException("Negative KV size: " + current);
    }
    totalSize+=current.getLength();
  }
  long finishReadingTime=System.nanoTime();
  long startSeeksTime=System.nanoTime();
  for (  KeyValue keyValue : seeks) {
    scanner.seek(keyValue);
    KeyValue toVerify=scanner.next();
    if (!keyValue.equals(toVerify)) {
      System.out.println(String.format("KeyValue doesn't match:\n" + "Orig key: %s\n" + "Ret key:  %s",keyValue.getKeyString(),toVerify.getKeyString()));
      break;
    }
  }
  long finishSeeksTime=System.nanoTime();
  if (finishSeeksTime < startSeeksTime) {
    throw new AssertionError("Finish time " + finishSeeksTime + " is earlier than start time "+ startSeeksTime);
  }
  double readInMbPerSec=(totalSize * NANOSEC_IN_SEC) / (BYTES_IN_MEGABYTES * (finishReadingTime - startReadingTime));
  double seeksPerSec=(seeks.size() * NANOSEC_IN_SEC) / (finishSeeksTime - startSeeksTime);
  storeFile.closeReader(cacheConf.shouldEvictOnClose());
  clearBlockCache();
  System.out.println(blockEncoding);
  System.out.printf("  Read speed:       %8.2f (MB/s)\n",readInMbPerSec);
  System.out.printf("  Seeks per second: %8.2f (#/s)\n",seeksPerSec);
  System.out.printf("  Total KV size:    %d\n",totalSize);
}
