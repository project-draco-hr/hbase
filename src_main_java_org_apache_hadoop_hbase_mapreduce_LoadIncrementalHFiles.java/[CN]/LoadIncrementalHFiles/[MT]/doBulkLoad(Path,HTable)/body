{
  HConnection conn=table.getConnection();
  if (!conn.isTableAvailable(table.getTableName())) {
    throw new TableNotFoundException("Table " + Bytes.toStringBinary(table.getTableName()) + "is not currently available.");
  }
  Deque<LoadQueueItem> queue=null;
  int nrThreads=cfg.getInt("hbase.loadincremental.threads.max",Runtime.getRuntime().availableProcessors());
  ThreadFactoryBuilder builder=new ThreadFactoryBuilder();
  builder.setNameFormat("LoadIncrementalHFiles-%1$d");
  ExecutorService pool=new ThreadPoolExecutor(nrThreads,nrThreads,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),builder.build());
  ((ThreadPoolExecutor)pool).allowCoreThreadTimeOut(true);
  try {
    queue=discoverLoadQueue(hfofDir);
    while (!queue.isEmpty() || futuresForSplittingHFile.size() > 0) {
      Pair<byte[][],byte[][]> startEndKeys=table.getStartEndKeys();
      while (!queue.isEmpty()) {
        LoadQueueItem item=queue.remove();
        tryLoad(item,conn,table,queue,startEndKeys,pool);
      }
      Iterator<Future> iter=futuresForSplittingHFile.iterator();
      while (iter.hasNext()) {
        boolean timeoutSeen=false;
        Future future=iter.next();
        try {
          future.get(20,TimeUnit.MILLISECONDS);
          break;
        }
 catch (        ExecutionException ee) {
          LOG.error(ee);
        }
catch (        InterruptedException ie) {
          LOG.error(ie);
        }
catch (        TimeoutException te) {
          timeoutSeen=true;
        }
 finally {
          if (!timeoutSeen)           iter.remove();
        }
      }
    }
    for (    Future<Void> future : futures) {
      try {
        future.get();
      }
 catch (      ExecutionException ee) {
        LOG.error(ee);
      }
catch (      InterruptedException ie) {
        LOG.error(ie);
      }
    }
  }
  finally {
    pool.shutdown();
    if (queue != null && !queue.isEmpty()) {
      StringBuilder err=new StringBuilder();
      err.append("-------------------------------------------------\n");
      err.append("Bulk load aborted with some files not yet loaded:\n");
      err.append("-------------------------------------------------\n");
      for (      LoadQueueItem q : queue) {
        err.append("  ").append(q.hfilePath).append('\n');
      }
      LOG.error(err);
    }
  }
}
