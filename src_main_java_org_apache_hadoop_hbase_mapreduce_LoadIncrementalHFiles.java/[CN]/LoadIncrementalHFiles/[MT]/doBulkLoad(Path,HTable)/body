{
  final HConnection conn=table.getConnection();
  if (!conn.isTableAvailable(table.getTableName())) {
    throw new TableNotFoundException("Table " + Bytes.toStringBinary(table.getTableName()) + "is not currently available.");
  }
  int nrThreads=cfg.getInt("hbase.loadincremental.threads.max",Runtime.getRuntime().availableProcessors());
  ThreadFactoryBuilder builder=new ThreadFactoryBuilder();
  builder.setNameFormat("LoadIncrementalHFiles-%1$d");
  ExecutorService pool=new ThreadPoolExecutor(nrThreads,nrThreads,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),builder.build());
  ((ThreadPoolExecutor)pool).allowCoreThreadTimeOut(true);
  Deque<LoadQueueItem> queue=new LinkedList<LoadQueueItem>();
  try {
    discoverLoadQueue(queue,hfofDir);
    int count=0;
    if (queue.isEmpty()) {
      LOG.warn("Bulk load operation did not find any files to load in " + "directory " + hfofDir.toUri() + ".  Does it contain files in "+ "subdirectories that correspond to column family names?");
      return;
    }
    while (!queue.isEmpty()) {
      final Pair<byte[][],byte[][]> startEndKeys=table.getStartEndKeys();
      if (count != 0) {
        LOG.info("Split occured while grouping HFiles, retry attempt " + +count + " with "+ queue.size()+ " files remaining to group or split");
      }
      int maxRetries=cfg.getInt("hbase.bulkload.retries.number",0);
      if (maxRetries != 0 && count >= maxRetries) {
        LOG.error("Retry attempted " + count + " times without completing, bailing out");
        return;
      }
      count++;
      Multimap<ByteBuffer,LoadQueueItem> regionGroups=groupOrSplitPhase(table,pool,queue,startEndKeys);
      bulkLoadPhase(table,conn,pool,queue,regionGroups);
    }
  }
  finally {
    pool.shutdown();
    if (queue != null && !queue.isEmpty()) {
      StringBuilder err=new StringBuilder();
      err.append("-------------------------------------------------\n");
      err.append("Bulk load aborted with some files not yet loaded:\n");
      err.append("-------------------------------------------------\n");
      for (      LoadQueueItem q : queue) {
        err.append("  ").append(q.hfilePath).append('\n');
      }
      LOG.error(err);
    }
  }
}
