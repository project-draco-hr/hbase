{
  Path hfofDir=new Path(dirPath);
  FileSystem fs=hfofDir.getFileSystem(getConf());
  if (!fs.exists(hfofDir)) {
    throw new FileNotFoundException("HFileOutputFormat dir " + hfofDir + " not found");
  }
  FileStatus[] familyDirStatuses=fs.listStatus(hfofDir);
  if (familyDirStatuses == null) {
    throw new FileNotFoundException("No families found in " + hfofDir);
  }
  HTableDescriptor htd=new HTableDescriptor(tableName);
  HColumnDescriptor hcd=null;
  byte[][] keys=null;
  TreeMap<byte[],Integer> map=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  for (  FileStatus stat : familyDirStatuses) {
    if (!stat.isDir()) {
      LOG.warn("Skipping non-directory " + stat.getPath());
      continue;
    }
    Path familyDir=stat.getPath();
    if (familyDir.getName().startsWith("_"))     continue;
    byte[] family=familyDir.getName().getBytes();
    hcd=new HColumnDescriptor(family);
    htd.addFamily(hcd);
    Path[] hfiles=FileUtil.stat2Paths(fs.listStatus(familyDir));
    for (    Path hfile : hfiles) {
      if (hfile.getName().startsWith("_"))       continue;
      HFile.Reader reader=HFile.createReader(fs,hfile,new CacheConfig(getConf()));
      final byte[] first, last;
      try {
        if (hcd.getCompressionType() != reader.getCompressionAlgorithm()) {
          hcd.setCompressionType(reader.getCompressionAlgorithm());
          LOG.info("Setting compression " + hcd.getCompressionType().name() + " for family "+ hcd.toString());
        }
        reader.loadFileInfo();
        first=reader.getFirstRowKey();
        last=reader.getLastRowKey();
        LOG.info("Trying to figure out region boundaries hfile=" + hfile + " first="+ Bytes.toStringBinary(first)+ " last="+ Bytes.toStringBinary(last));
        Integer value=map.containsKey(first) ? (Integer)map.get(first) : 0;
        map.put(first,value + 1);
        value=map.containsKey(last) ? (Integer)map.get(last) : 0;
        map.put(last,value - 1);
      }
  finally {
        reader.close();
      }
    }
  }
  keys=LoadIncrementalHFiles.inferBoundaries(map);
  this.hbAdmin.createTable(htd,keys);
  LOG.info("Table " + tableName + " is available!!");
}
