{
  Entry entry=new Entry(id);
  Entry existing;
  while ((existing=map.putIfAbsent(entry.id,entry)) != null) {
synchronized (existing) {
      if (existing.isLocked) {
        ++existing.numWaiters;
        while (existing.isLocked) {
          try {
            existing.wait();
          }
 catch (          InterruptedException e) {
            --existing.numWaiters;
            throw new InterruptedIOException("Interrupted waiting to acquire sparse lock");
          }
        }
        --existing.numWaiters;
        existing.isLocked=true;
        return existing;
      }
    }
  }
  return entry;
}
