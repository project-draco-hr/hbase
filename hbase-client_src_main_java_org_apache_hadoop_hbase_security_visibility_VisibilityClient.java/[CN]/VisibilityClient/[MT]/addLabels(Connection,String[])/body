{
  try (Table table=connection.getTable(LABELS_TABLE_NAME)){
    Batch.Call<VisibilityLabelsService,VisibilityLabelsResponse> callable=new Batch.Call<VisibilityLabelsService,VisibilityLabelsResponse>(){
      ServerRpcController controller=new ServerRpcController();
      CoprocessorRpcUtils.BlockingRpcCallback<VisibilityLabelsResponse> rpcCallback=new CoprocessorRpcUtils.BlockingRpcCallback<VisibilityLabelsResponse>();
      public VisibilityLabelsResponse call(      VisibilityLabelsService service) throws IOException {
        VisibilityLabelsRequest.Builder builder=VisibilityLabelsRequest.newBuilder();
        for (        String label : labels) {
          if (label.length() > 0) {
            VisibilityLabel.Builder newBuilder=VisibilityLabel.newBuilder();
            newBuilder.setLabel(ByteString.copyFrom(Bytes.toBytes(label)));
            builder.addVisLabel(newBuilder.build());
          }
        }
        service.addLabels(controller,builder.build(),rpcCallback);
        VisibilityLabelsResponse response=rpcCallback.get();
        if (controller.failedOnException()) {
          throw controller.getFailedOn();
        }
        return response;
      }
    }
;
    Map<byte[],VisibilityLabelsResponse> result=table.coprocessorService(VisibilityLabelsService.class,HConstants.EMPTY_BYTE_ARRAY,HConstants.EMPTY_BYTE_ARRAY,callable);
    return result.values().iterator().next();
  }
 }
