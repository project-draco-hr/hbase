{
  byte[] TEST_TABLE=Bytes.toBytes("observed_table");
  byte[] TEST_FAMILY=Bytes.toBytes("aaa");
  HTable table=TEST_UTIL.createTable(TEST_TABLE,TEST_FAMILY);
  TEST_UTIL.waitUntilAllRegionsAssigned(TEST_UTIL.createMultiRegions(table,TEST_FAMILY));
  final HRegionServer regionServer=TEST_UTIL.getRSForFirstRegionInTable(TEST_TABLE);
  ZooKeeperWatcher zkw=new ZooKeeperWatcher(TEST_UTIL.getConfiguration(),"unittest",new zkwAbortable());
  RSTracker rsTracker=new RSTracker(zkw,"/hbase/rs/" + regionServer.getServerName(),Thread.currentThread());
  rsTracker.start(true);
  zkw.registerListener(rsTracker);
  boolean caughtInterruption=false;
  try {
    final byte[] ROW=Bytes.toBytes("aaa");
    Put put=new Put(ROW);
    put.add(TEST_FAMILY,ROW,ROW);
    table.put(put);
  }
 catch (  IOException e) {
    if (e.getCause().getClass().equals(InterruptedException.class)) {
      LOG.debug("caught interruption here (during put()).");
      caughtInterruption=true;
    }
 else {
      fail("put() failed: " + e);
    }
  }
  if (caughtInterruption == false) {
    try {
      Thread.sleep(timeout);
      fail("RegionServer did not abort within 30 seconds.");
    }
 catch (    InterruptedException e) {
      LOG.debug("caught interruption here (during sleep()).");
      caughtInterruption=true;
    }
  }
  assertTrue("Main thread caught interruption.",caughtInterruption);
  assertTrue("RegionServer aborted on coprocessor exception, as expected.",rsTracker.regionZKNodeWasDeleted);
  table.close();
}
