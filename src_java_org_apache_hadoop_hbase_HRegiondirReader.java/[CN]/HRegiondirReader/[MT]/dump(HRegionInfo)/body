{
  HRegion r=new HRegion(this.parentdir,null,FileSystem.get(this.conf),conf,info,null,null);
  Text[] families=info.tableDesc.families().keySet().toArray(new Text[]{});
  HInternalScannerInterface scanner=r.getScanner(families,new Text());
  HStoreKey key=new HStoreKey();
  TreeMap<Text,BytesWritable> results=new TreeMap<Text,BytesWritable>();
  String s=info.startKey.toString();
  String startKey=(s == null || s.length() <= 0) ? "<>" : s;
  s=info.endKey.toString();
  String endKey=(s == null || s.length() <= 0) ? "<>" : s;
  String tableName=info.tableDesc.getName().toString();
  System.out.println("table: " + tableName + ", regionid: "+ info.regionId+ ", startkey: "+ startKey+ ", endkey: "+ endKey);
  while (scanner.next(key,results)) {
    for (    Map.Entry<Text,BytesWritable> es : results.entrySet()) {
      Text colname=es.getKey();
      BytesWritable colvalue=es.getValue();
      Object value=null;
      byte[] bytes=new byte[colvalue.getSize()];
      if (colname.toString().equals("info:regioninfo")) {
        System.arraycopy(colvalue,0,bytes,0,bytes.length);
        value=new HRegionInfo(bytes);
      }
 else {
        value=new String(bytes,HConstants.UTF8_ENCODING);
      }
      System.out.println(" " + key + ", "+ colname.toString()+ ": \""+ value.toString()+ "\"");
    }
  }
}
