{
  long baseline=1000;
  long time=baseline;
  MultiVersionConcurrencyControl mvcc=new MultiVersionConcurrencyControl();
  KeyValue kv=new KeyValue(r1,f1,r1);
  WALEdit edit=new WALEdit();
  edit.add(kv);
  List<WALActionsListener> listeners=new ArrayList<WALActionsListener>();
  listeners.add(replication);
  final WALFactory wals=new WALFactory(utility.getConfiguration(),listeners,URLEncoder.encode("regionserver:60020","UTF8"));
  final WAL wal=wals.getWAL(hri.getEncodedNameAsBytes(),hri.getTable().getNamespace());
  manager.init();
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("tableame"));
  htd.addFamily(new HColumnDescriptor(f1));
  for (long i=1; i < 101; i++) {
    if (i > 1 && i % 20 == 0) {
      wal.rollWriter();
    }
    LOG.info(i);
    final long txid=wal.append(htd,hri,new WALKey(hri.getEncodedNameAsBytes(),test,System.currentTimeMillis(),mvcc),edit,true);
    wal.sync(txid);
  }
  LOG.info(baseline + " and " + time);
  baseline+=101;
  time=baseline;
  LOG.info(baseline + " and " + time);
  for (int i=0; i < 3; i++) {
    wal.append(htd,hri,new WALKey(hri.getEncodedNameAsBytes(),test,System.currentTimeMillis(),mvcc),edit,true);
  }
  wal.sync();
  int logNumber=0;
  for (  Map.Entry<String,SortedSet<String>> entry : manager.getWALs().get(slaveId).entrySet()) {
    logNumber+=entry.getValue().size();
  }
  assertEquals(6,logNumber);
  wal.rollWriter();
  manager.logPositionAndCleanOldLogs(manager.getSources().get(0).getCurrentPath(),"1",0,false,false);
  wal.append(htd,hri,new WALKey(hri.getEncodedNameAsBytes(),test,System.currentTimeMillis(),mvcc),edit,true);
  wal.sync();
  assertEquals(1,manager.getWALs().size());
}
