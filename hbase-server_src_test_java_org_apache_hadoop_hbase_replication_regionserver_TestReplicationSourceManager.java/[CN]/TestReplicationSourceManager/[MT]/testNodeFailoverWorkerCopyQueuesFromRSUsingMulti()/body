{
  LOG.debug("testNodeFailoverWorkerCopyQueuesFromRSUsingMulti");
  conf.setBoolean(HConstants.ZOOKEEPER_USEMULTI,true);
  final Server server=new DummyServer("hostname0.example.org");
  AtomicBoolean replicating=new AtomicBoolean(true);
  ReplicationZookeeper rz=new ReplicationZookeeper(server,replicating);
  files.add("log1");
  files.add("log2");
  for (  String file : files) {
    rz.addLogToList(file,"1");
  }
  Server s1=new DummyServer("dummyserver1.example.org");
  Server s2=new DummyServer("dummyserver2.example.org");
  Server s3=new DummyServer("dummyserver3.example.org");
  DummyNodeFailoverWorker w1=new DummyNodeFailoverWorker(server.getServerName().getServerName(),s1);
  DummyNodeFailoverWorker w2=new DummyNodeFailoverWorker(server.getServerName().getServerName(),s2);
  DummyNodeFailoverWorker w3=new DummyNodeFailoverWorker(server.getServerName().getServerName(),s3);
  latch=new CountDownLatch(3);
  w1.start();
  w2.start();
  w3.start();
  int populatedMap=0;
  latch.await();
  populatedMap+=w1.isLogZnodesMapPopulated() + w2.isLogZnodesMapPopulated() + w3.isLogZnodesMapPopulated();
  assertEquals(1,populatedMap);
  rz.close();
  server.abort("",null);
}
