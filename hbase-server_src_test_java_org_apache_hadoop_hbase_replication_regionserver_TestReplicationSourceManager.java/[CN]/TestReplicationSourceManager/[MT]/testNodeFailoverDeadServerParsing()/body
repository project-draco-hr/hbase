{
  LOG.debug("testNodeFailoverDeadServerParsing");
  conf.setBoolean(HConstants.ZOOKEEPER_USEMULTI,true);
  final Server server=new DummyServer("ec2-54-234-230-108.compute-1.amazonaws.com");
  AtomicBoolean replicating=new AtomicBoolean(true);
  ReplicationZookeeper rz=new ReplicationZookeeper(server,replicating);
  files.add("log1");
  files.add("log2");
  for (  String file : files) {
    rz.addLogToList(file,"1");
  }
  Server s1=new DummyServer("ip-10-8-101-114.ec2.internal");
  Server s2=new DummyServer("ec2-107-20-52-47.compute-1.amazonaws.com");
  Server s3=new DummyServer("ec2-23-20-187-167.compute-1.amazonaws.com");
  ReplicationZookeeper rz1=new ReplicationZookeeper(s1,new AtomicBoolean(true));
  SortedMap<String,SortedSet<String>> testMap=rz1.claimQueues(server.getServerName().getServerName());
  rz1.close();
  ReplicationZookeeper rz2=new ReplicationZookeeper(s2,new AtomicBoolean(true));
  testMap=rz2.claimQueues(s1.getServerName().getServerName());
  rz2.close();
  ReplicationZookeeper rz3=new ReplicationZookeeper(s3,new AtomicBoolean(true));
  testMap=rz3.claimQueues(s2.getServerName().getServerName());
  rz3.close();
  ReplicationQueueInfo replicationQueueInfo=new ReplicationQueueInfo(testMap.firstKey());
  List<String> result=replicationQueueInfo.getDeadRegionServers();
  assertTrue(result.contains(server.getServerName().getServerName()));
  assertTrue(result.contains(s1.getServerName().getServerName()));
  assertTrue(result.contains(s2.getServerName().getServerName()));
  rz.close();
  server.abort("",null);
}
