{
  formatRowNum=true;
  PrefixTreeCodec encoder=new PrefixTreeCodec();
  int batchId=numBatchesWritten++;
  HFileContext meta=new HFileContextBuilder().withHBaseCheckSum(false).withIncludesMvcc(false).withIncludesTags(includesTag).withCompression(Algorithm.NONE).build();
  HFileBlockEncodingContext blkEncodingCtx=new HFileBlockDefaultEncodingContext(DataBlockEncoding.PREFIX_TREE,new byte[0],meta);
  ByteArrayOutputStream baosInMemory=new ByteArrayOutputStream();
  DataOutputStream userDataStream=new DataOutputStream(baosInMemory);
  generateFixedTestData(kvset,batchId,false,includesTag,encoder,blkEncodingCtx,userDataStream);
  EncodedSeeker seeker=encoder.createSeeker(CellComparator.COMPARATOR,encoder.newDataBlockDecodingContext(meta));
  byte[] onDiskBytes=baosInMemory.toByteArray();
  ByteBuffer readBuffer=ByteBuffer.wrap(onDiskBytes,DataBlockEncoding.ID_SIZE,onDiskBytes.length - DataBlockEncoding.ID_SIZE);
  seeker.setCurrentBuffer(new SingleByteBuff(readBuffer));
  Cell seekKey=CellUtil.createFirstDeleteFamilyCellOnRow(getRowKey(batchId,0),CF_BYTES);
  seeker.seekToKeyInBlock(seekKey,true);
  assertEquals(null,seeker.getCell());
  seekKey=CellUtil.createFirstDeleteFamilyCellOnRow(getRowKey(batchId,NUM_ROWS_PER_BATCH / 3),CF_BYTES);
  seeker.seekToKeyInBlock(seekKey,true);
  assertNotNull(seeker.getCell());
  assertArrayEquals(getRowKey(batchId,NUM_ROWS_PER_BATCH / 3 - 1),CellUtil.cloneRow(seeker.getCell()));
  seekKey=CellUtil.createFirstDeleteFamilyCellOnRow(Bytes.toBytes("zzzz"),CF_BYTES);
  seeker.seekToKeyInBlock(seekKey,true);
  assertNotNull(seeker.getCell());
  assertArrayEquals(getRowKey(batchId,NUM_ROWS_PER_BATCH - 1),CellUtil.cloneRow(seeker.getCell()));
}
