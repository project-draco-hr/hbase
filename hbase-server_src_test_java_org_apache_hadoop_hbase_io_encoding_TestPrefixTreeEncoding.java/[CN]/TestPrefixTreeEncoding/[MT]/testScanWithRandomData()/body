{
  PrefixTreeCodec encoder=new PrefixTreeCodec();
  ByteBuffer dataBuffer=generateRandomTestData(kvset,numBatchesWritten++);
  HFileBlockEncodingContext blkEncodingCtx=new HFileBlockDefaultEncodingContext(Algorithm.NONE,DataBlockEncoding.PREFIX_TREE,new byte[0]);
  encoder.encodeKeyValues(dataBuffer,false,blkEncodingCtx);
  EncodedSeeker seeker=encoder.createSeeker(KeyValue.KEY_COMPARATOR,false);
  byte[] onDiskBytes=blkEncodingCtx.getOnDiskBytesWithHeader();
  ByteBuffer readBuffer=ByteBuffer.wrap(onDiskBytes,DataBlockEncoding.ID_SIZE,onDiskBytes.length - DataBlockEncoding.ID_SIZE);
  seeker.setCurrentBuffer(readBuffer);
  KeyValue previousKV=null;
  do {
    KeyValue currentKV=seeker.getKeyValue();
    if (previousKV != null && KeyValue.COMPARATOR.compare(currentKV,previousKV) < 0) {
      dumpInputKVSet();
      fail("Current kv " + currentKV + " is smaller than previous keyvalue "+ previousKV);
    }
    previousKV=currentKV;
  }
 while (seeker.next());
}
