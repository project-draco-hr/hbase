{
  addRows(this.memstore);
  Thread.sleep(1);
  addRows(this.memstore);
  Cell closestToEmpty=this.memstore.getNextRow(KeyValue.LOWESTKEY);
  assertTrue(CellComparator.COMPARATOR.compareRows(closestToEmpty,new KeyValue(Bytes.toBytes(0),System.currentTimeMillis())) == 0);
  for (int i=0; i < ROW_COUNT; i++) {
    Cell nr=this.memstore.getNextRow(new KeyValue(Bytes.toBytes(i),System.currentTimeMillis()));
    if (i + 1 == ROW_COUNT) {
      assertEquals(nr,null);
    }
 else {
      assertTrue(CellComparator.COMPARATOR.compareRows(nr,new KeyValue(Bytes.toBytes(i + 1),System.currentTimeMillis())) == 0);
    }
  }
  Configuration conf=HBaseConfiguration.create();
  for (int startRowId=0; startRowId < ROW_COUNT; startRowId++) {
    ScanInfo scanInfo=new ScanInfo(conf,FAMILY,0,1,Integer.MAX_VALUE,KeepDeletedCells.FALSE,0,this.memstore.comparator);
    ScanType scanType=ScanType.USER_SCAN;
    InternalScanner scanner=new StoreScanner(new Scan(Bytes.toBytes(startRowId)),scanInfo,scanType,null,memstore.getScanners(0));
    List<Cell> results=new ArrayList<Cell>();
    for (int i=0; scanner.next(results); i++) {
      int rowId=startRowId + i;
      Cell left=results.get(0);
      byte[] row1=Bytes.toBytes(rowId);
      assertTrue("Row name",CellComparator.COMPARATOR.compareRows(left,row1,0,row1.length) == 0);
      assertEquals("Count of columns",QUALIFIER_COUNT,results.size());
      List<Cell> row=new ArrayList<Cell>();
      for (      Cell kv : results) {
        row.add(kv);
      }
      isExpectedRowWithoutTimestamps(rowId,row);
      results.clear();
    }
  }
}
