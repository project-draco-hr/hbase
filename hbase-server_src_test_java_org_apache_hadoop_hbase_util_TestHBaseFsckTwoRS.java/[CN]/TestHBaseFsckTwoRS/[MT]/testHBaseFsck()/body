{
  assertNoErrors(doFsck(conf,false));
  TableName table=TableName.valueOf("tableBadMetaAssign");
  HTableDescriptor desc=new HTableDescriptor(table);
  HColumnDescriptor hcd=new HColumnDescriptor(Bytes.toString(FAM));
  desc.addFamily(hcd);
  createTable(TEST_UTIL,desc,null);
  assertNoErrors(doFsck(conf,false));
  Table meta=connection.getTable(TableName.META_TABLE_NAME,tableExecutorService);
  Scan scan=new Scan();
  scan.setStartRow(Bytes.toBytes(table + ",,"));
  ResultScanner scanner=meta.getScanner(scan);
  HRegionInfo hri=null;
  Result res=scanner.next();
  ServerName currServer=ServerName.parseFrom(res.getValue(HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER));
  long startCode=Bytes.toLong(res.getValue(HConstants.CATALOG_FAMILY,HConstants.STARTCODE_QUALIFIER));
  for (  JVMClusterUtil.RegionServerThread rs : TEST_UTIL.getHBaseCluster().getRegionServerThreads()) {
    ServerName sn=rs.getRegionServer().getServerName();
    if (!currServer.getHostAndPort().equals(sn.getHostAndPort()) || startCode != sn.getStartcode()) {
      Put put=new Put(res.getRow());
      put.setDurability(Durability.SKIP_WAL);
      put.addColumn(HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER,Bytes.toBytes(sn.getHostAndPort()));
      put.addColumn(HConstants.CATALOG_FAMILY,HConstants.STARTCODE_QUALIFIER,Bytes.toBytes(sn.getStartcode()));
      meta.put(put);
      hri=MetaTableAccessor.getHRegionInfo(res);
      break;
    }
  }
  assertErrors(doFsck(conf,true),new HBaseFsck.ErrorReporter.ERROR_CODE[]{HBaseFsck.ErrorReporter.ERROR_CODE.SERVER_DOES_NOT_MATCH_META});
  TEST_UTIL.getHBaseCluster().getMaster().getAssignmentManager().waitForAssignment(hri);
  assertNoErrors(doFsck(conf,false));
  Table t=connection.getTable(table,tableExecutorService);
  ResultScanner s=t.getScanner(new Scan());
  s.close();
  t.close();
  scanner.close();
  meta.close();
}
