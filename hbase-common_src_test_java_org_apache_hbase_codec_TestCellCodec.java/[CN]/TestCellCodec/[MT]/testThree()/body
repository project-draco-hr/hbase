{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  CountingOutputStream cos=new CountingOutputStream(baos);
  DataOutputStream dos=new DataOutputStream(cos);
  Codec codec=new CellCodec();
  Codec.Encoder encoder=codec.getEncoder(dos);
  final KeyValue kv1=new KeyValue(Bytes.toBytes("r"),Bytes.toBytes("f"),Bytes.toBytes("1"),Bytes.toBytes("1"));
  final KeyValue kv2=new KeyValue(Bytes.toBytes("r"),Bytes.toBytes("f"),Bytes.toBytes("2"),Bytes.toBytes("2"));
  final KeyValue kv3=new KeyValue(Bytes.toBytes("r"),Bytes.toBytes("f"),Bytes.toBytes("3"),Bytes.toBytes("3"));
  encoder.write(kv1);
  encoder.write(kv2);
  encoder.write(kv3);
  encoder.flush();
  dos.close();
  long offset=cos.getCount();
  CountingInputStream cis=new CountingInputStream(new ByteArrayInputStream(baos.toByteArray()));
  DataInputStream dis=new DataInputStream(cis);
  Codec.Decoder decoder=codec.getDecoder(dis);
  assertTrue(decoder.advance());
  Cell c=decoder.current();
  assertTrue(CellComparator.equals(c,kv1));
  assertTrue(decoder.advance());
  c=decoder.current();
  assertTrue(CellComparator.equals(c,kv2));
  assertTrue(decoder.advance());
  c=decoder.current();
  assertTrue(CellComparator.equals(c,kv3));
  assertFalse(decoder.advance());
  dis.close();
  assertEquals(offset,cis.getCount());
}
