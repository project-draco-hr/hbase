{
  resetConf();
  int count=4;
  loadData(admin,hTable,tableName,count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  long tid=System.currentTimeMillis();
  byte[] snapshotName1=Bytes.toBytes("snaptb-" + tid);
  admin.snapshot(snapshotName1,tableName);
  createDelFile();
  assertEquals("Before compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(hTable));
  assertEquals("Before compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(hTable));
  assertEquals("Before compaction: family1 mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("Before compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("Before compaction: family1 del file count",regionNum,countFiles(tableName,false,family1));
  assertEquals("Before compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
  MobFileCompactor compactor=new PartitionedMobFileCompactor(conf,fs,tableName,hcd1,pool);
  compactor.compact();
  assertEquals("After first compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(hTable));
  assertEquals("After first compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(hTable));
  assertEquals("After first compaction: family1 mob file count",regionNum,countFiles(tableName,true,family1));
  assertEquals("After first compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("After first compaction: family1 del file count",0,countFiles(tableName,false,family1));
  assertEquals("After first compaction: family2 del file count",regionNum,countFiles(tableName,false,family2));
  assertEquals("After first compaction: family1 hfilelink count",0,countHFileLinks(family1));
  assertEquals("After first compaction: family2 hfilelink count",0,countHFileLinks(family2));
  admin.disableTable(tableName);
  admin.restoreSnapshot(snapshotName1);
  admin.enableTable(tableName);
  assertEquals("After restoring snapshot: mob rows count",regionNum * rowNumPerRegion,countMobRows(hTable));
  assertEquals("After restoring snapshot: mob cells count",regionNum * cellNumPerRow * rowNumPerRegion,countMobCells(hTable));
  assertEquals("After restoring snapshot: family1 mob file count",regionNum * count,countFiles(tableName,true,family1));
  assertEquals("After restoring snapshot: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("After restoring snapshot: family1 del file count",0,countFiles(tableName,false,family1));
  assertEquals("After restoring snapshot: family2 del file count",0,countFiles(tableName,false,family2));
  assertEquals("After restoring snapshot: family1 hfilelink count",regionNum * count,countHFileLinks(family1));
  assertEquals("After restoring snapshot: family2 hfilelink count",0,countHFileLinks(family2));
  compactor.compact();
  assertEquals("After second compaction: mob rows count",regionNum * rowNumPerRegion,countMobRows(hTable));
  assertEquals("After second compaction: mob cells count",regionNum * cellNumPerRow * rowNumPerRegion,countMobCells(hTable));
  assertEquals("After second compaction: family1 mob file count",regionNum,countFiles(tableName,true,family1));
  assertEquals("After second compaction: family2 mob file count",regionNum * count,countFiles(tableName,true,family2));
  assertEquals("After second compaction: family1 del file count",0,countFiles(tableName,false,family1));
  assertEquals("After second compaction: family2 del file count",0,countFiles(tableName,false,family2));
  assertEquals("After second compaction: family1 hfilelink count",0,countHFileLinks(family1));
  assertEquals("After second compaction: family2 hfilelink count",0,countHFileLinks(family2));
  assertRefFileNameEqual(family1);
}
