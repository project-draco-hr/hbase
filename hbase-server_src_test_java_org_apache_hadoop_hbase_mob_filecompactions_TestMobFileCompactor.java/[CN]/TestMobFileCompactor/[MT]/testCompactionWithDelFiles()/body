{
  resetConf();
  int count=4;
  loadData(count,rowNumPerFile);
  int rowNumPerRegion=count * rowNumPerFile;
  assertEquals("Before deleting: mob rows count",regionNum * rowNumPerRegion,countMobRows(hTable));
  assertEquals("Before deleting: mob cells count",regionNum * cellNumPerRow * rowNumPerRegion,countMobCells(hTable));
  assertEquals("Before deleting: family1 mob file count",regionNum * count,countFiles(true,family1));
  assertEquals("Before deleting: family2 mob file count",regionNum * count,countFiles(true,family2));
  createDelFile();
  assertEquals("Before compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(hTable));
  assertEquals("Before compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(hTable));
  assertEquals("Before compaction: family1 mob file count",regionNum * count,countFiles(true,family1));
  assertEquals("Before compaction: family2 file count",regionNum * count,countFiles(true,family2));
  assertEquals("Before compaction: family1 del file count",regionNum,countFiles(false,family1));
  assertEquals("Before compaction: family2 del file count",regionNum,countFiles(false,family2));
  MobFileCompactor compactor=new PartitionedMobFileCompactor(conf,fs,tableName,hcd1,pool);
  compactor.compact();
  assertEquals("After compaction: mob rows count",regionNum * (rowNumPerRegion - delRowNum),countMobRows(hTable));
  assertEquals("After compaction: mob cells count",regionNum * (cellNumPerRow * rowNumPerRegion - delCellNum),countMobCells(hTable));
  assertEquals("After compaction: family1 mob file count",regionNum,countFiles(true,family1));
  assertEquals("After compaction: family2 mob file count",regionNum * count,countFiles(true,family2));
  assertEquals("After compaction: family1 del file count",0,countFiles(false,family1));
  assertEquals("After compaction: family2 del file count",regionNum,countFiles(false,family2));
  assertRefFileNameEqual(family1);
}
