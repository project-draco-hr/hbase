{
  super(metricsName,metricsDescription,metricsContext,metricsJmxContext);
  this.rsWrap=rsWrap;
  putHisto=getMetricsRegistry().newTimeHistogram(MUTATE_KEY);
  slowPut=getMetricsRegistry().newCounter(SLOW_MUTATE_KEY,SLOW_MUTATE_DESC,0L);
  deleteHisto=getMetricsRegistry().newTimeHistogram(DELETE_KEY);
  slowDelete=getMetricsRegistry().newCounter(SLOW_DELETE_KEY,SLOW_DELETE_DESC,0L);
  getHisto=getMetricsRegistry().newTimeHistogram(GET_KEY);
  slowGet=getMetricsRegistry().newCounter(SLOW_GET_KEY,SLOW_GET_DESC,0L);
  incrementHisto=getMetricsRegistry().newTimeHistogram(INCREMENT_KEY);
  slowIncrement=getMetricsRegistry().newCounter(SLOW_INCREMENT_KEY,SLOW_INCREMENT_DESC,0L);
  appendHisto=getMetricsRegistry().newTimeHistogram(APPEND_KEY);
  slowAppend=getMetricsRegistry().newCounter(SLOW_APPEND_KEY,SLOW_APPEND_DESC,0L);
  replayHisto=getMetricsRegistry().newTimeHistogram(REPLAY_KEY);
  scanSizeHisto=getMetricsRegistry().newSizeHistogram(SCAN_SIZE_KEY);
  scanTimeHisto=getMetricsRegistry().newTimeHistogram(SCAN_TIME_KEY);
  flushTimeHisto=getMetricsRegistry().newTimeHistogram(FLUSH_TIME,FLUSH_TIME_DESC);
  flushMemstoreSizeHisto=getMetricsRegistry().newSizeHistogram(FLUSH_MEMSTORE_SIZE,FLUSH_MEMSTORE_SIZE_DESC);
  flushOutputSizeHisto=getMetricsRegistry().newSizeHistogram(FLUSH_OUTPUT_SIZE,FLUSH_OUTPUT_SIZE_DESC);
  flushedOutputBytes=getMetricsRegistry().newCounter(FLUSHED_OUTPUT_BYTES,FLUSHED_OUTPUT_BYTES_DESC,0L);
  flushedMemstoreBytes=getMetricsRegistry().newCounter(FLUSHED_MEMSTORE_BYTES,FLUSHED_MEMSTORE_BYTES_DESC,0L);
  compactionTimeHisto=getMetricsRegistry().newTimeHistogram(COMPACTION_TIME,COMPACTION_TIME_DESC);
  compactionInputFileCountHisto=getMetricsRegistry().newHistogram(COMPACTION_INPUT_FILE_COUNT,COMPACTION_INPUT_FILE_COUNT_DESC);
  compactionInputSizeHisto=getMetricsRegistry().newSizeHistogram(COMPACTION_INPUT_SIZE,COMPACTION_INPUT_SIZE_DESC);
  compactionOutputFileCountHisto=getMetricsRegistry().newHistogram(COMPACTION_OUTPUT_FILE_COUNT,COMPACTION_OUTPUT_FILE_COUNT_DESC);
  compactionOutputSizeHisto=getMetricsRegistry().newSizeHistogram(COMPACTION_OUTPUT_SIZE,COMPACTION_OUTPUT_SIZE_DESC);
  compactedInputBytes=getMetricsRegistry().newCounter(COMPACTED_INPUT_BYTES,COMPACTED_INPUT_BYTES_DESC,0L);
  compactedOutputBytes=getMetricsRegistry().newCounter(COMPACTED_OUTPUT_BYTES,COMPACTED_OUTPUT_BYTES_DESC,0L);
  majorCompactionTimeHisto=getMetricsRegistry().newTimeHistogram(MAJOR_COMPACTION_TIME,MAJOR_COMPACTION_TIME_DESC);
  majorCompactionInputFileCountHisto=getMetricsRegistry().newHistogram(MAJOR_COMPACTION_INPUT_FILE_COUNT,MAJOR_COMPACTION_INPUT_FILE_COUNT_DESC);
  majorCompactionInputSizeHisto=getMetricsRegistry().newSizeHistogram(MAJOR_COMPACTION_INPUT_SIZE,MAJOR_COMPACTION_INPUT_SIZE_DESC);
  majorCompactionOutputFileCountHisto=getMetricsRegistry().newHistogram(MAJOR_COMPACTION_OUTPUT_FILE_COUNT,MAJOR_COMPACTION_OUTPUT_FILE_COUNT_DESC);
  majorCompactionOutputSizeHisto=getMetricsRegistry().newSizeHistogram(MAJOR_COMPACTION_OUTPUT_SIZE,MAJOR_COMPACTION_OUTPUT_SIZE_DESC);
  majorCompactedInputBytes=getMetricsRegistry().newCounter(MAJOR_COMPACTED_INPUT_BYTES,MAJOR_COMPACTED_INPUT_BYTES_DESC,0L);
  majorCompactedOutputBytes=getMetricsRegistry().newCounter(MAJOR_COMPACTED_OUTPUT_BYTES,MAJOR_COMPACTED_OUTPUT_BYTES_DESC,0L);
  splitTimeHisto=getMetricsRegistry().newTimeHistogram(SPLIT_KEY);
  splitRequest=getMetricsRegistry().newCounter(SPLIT_REQUEST_KEY,SPLIT_REQUEST_DESC,0L);
  splitSuccess=getMetricsRegistry().newCounter(SPLIT_SUCCESS_KEY,SPLIT_SUCCESS_DESC,0L);
  infoPauseThresholdExceeded=getMetricsRegistry().newCounter(INFO_THRESHOLD_COUNT_KEY,INFO_THRESHOLD_COUNT_DESC,0L);
  warnPauseThresholdExceeded=getMetricsRegistry().newCounter(WARN_THRESHOLD_COUNT_KEY,WARN_THRESHOLD_COUNT_DESC,0L);
  pausesWithGc=getMetricsRegistry().newTimeHistogram(PAUSE_TIME_WITH_GC_KEY);
  pausesWithoutGc=getMetricsRegistry().newTimeHistogram(PAUSE_TIME_WITHOUT_GC_KEY);
}
