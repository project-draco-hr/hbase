{
  super(metricsName,metricsDescription,metricsContext,metricsJmxContext);
  this.rsWrap=rsWrap;
  putHisto=getMetricsRegistry().newTimeHistogram(MUTATE_KEY);
  slowPut=getMetricsRegistry().newCounter(SLOW_MUTATE_KEY,SLOW_MUTATE_DESC,0L);
  deleteHisto=getMetricsRegistry().newTimeHistogram(DELETE_KEY);
  slowDelete=getMetricsRegistry().newCounter(SLOW_DELETE_KEY,SLOW_DELETE_DESC,0L);
  getHisto=getMetricsRegistry().newTimeHistogram(GET_KEY);
  slowGet=getMetricsRegistry().newCounter(SLOW_GET_KEY,SLOW_GET_DESC,0L);
  incrementHisto=getMetricsRegistry().newTimeHistogram(INCREMENT_KEY);
  slowIncrement=getMetricsRegistry().newCounter(SLOW_INCREMENT_KEY,SLOW_INCREMENT_DESC,0L);
  appendHisto=getMetricsRegistry().newTimeHistogram(APPEND_KEY);
  slowAppend=getMetricsRegistry().newCounter(SLOW_APPEND_KEY,SLOW_APPEND_DESC,0L);
  replayHisto=getMetricsRegistry().newTimeHistogram(REPLAY_KEY);
  scanNextHisto=getMetricsRegistry().newTimeHistogram(SCAN_NEXT_KEY);
  splitTimeHisto=getMetricsRegistry().newTimeHistogram(SPLIT_KEY);
  flushTimeHisto=getMetricsRegistry().newTimeHistogram(FLUSH_KEY);
  splitRequest=getMetricsRegistry().newCounter(SPLIT_REQUEST_KEY,SPLIT_REQUEST_DESC,0L);
  splitSuccess=getMetricsRegistry().newCounter(SPLIT_SUCCESS_KEY,SPLIT_SUCCESS_DESC,0L);
}
