{
  this.fsOk=true;
  this.conf=conf;
  HFile.checkHFileVersion(this.conf);
  checkCodecs(this.conf);
  this.userProvider=UserProvider.instantiate(conf);
  Superusers.initialize(conf);
  FSUtils.setupShortCircuitRead(this.conf);
  this.conf.setBoolean(HConstants.USE_META_REPLICAS,false);
  this.numRetries=this.conf.getInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);
  this.threadWakeFrequency=conf.getInt(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000);
  this.msgInterval=conf.getInt("hbase.regionserver.msginterval",3 * 1000);
  this.sleeper=new Sleeper(this.msgInterval,this);
  boolean isNoncesEnabled=conf.getBoolean(HConstants.HBASE_RS_NONCES_ENABLED,true);
  this.nonceManager=isNoncesEnabled ? new ServerNonceManager(this.conf) : null;
  this.numRegionsToReport=conf.getInt("hbase.regionserver.numregionstoreport",10);
  this.operationTimeout=conf.getInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT,HConstants.DEFAULT_HBASE_CLIENT_OPERATION_TIMEOUT);
  this.shortOperationTimeout=conf.getInt(HConstants.HBASE_RPC_SHORTOPERATION_TIMEOUT_KEY,HConstants.DEFAULT_HBASE_RPC_SHORTOPERATION_TIMEOUT);
  this.abortRequested=false;
  this.stopped=false;
  rpcServices=createRpcServices();
  this.startcode=System.currentTimeMillis();
  if (this instanceof HMaster) {
    useThisHostnameInstead=conf.get(MASTER_HOSTNAME_KEY);
  }
 else {
    useThisHostnameInstead=conf.get(RS_HOSTNAME_KEY);
  }
  String hostName=shouldUseThisHostnameInstead() ? useThisHostnameInstead : rpcServices.isa.getHostName();
  serverName=ServerName.valueOf(hostName,rpcServices.isa.getPort(),startcode);
  rpcControllerFactory=RpcControllerFactory.instantiate(this.conf);
  rpcRetryingCallerFactory=RpcRetryingCallerFactory.instantiate(this.conf);
  ZKUtil.loginClient(this.conf,"hbase.zookeeper.client.keytab.file","hbase.zookeeper.client.kerberos.principal",hostName);
  login(userProvider,hostName);
  regionServerAccounting=new RegionServerAccounting();
  cacheConfig=new CacheConfig(conf);
  mobCacheConfig=new MobCacheConfig(conf);
  uncaughtExceptionHandler=new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      abort("Uncaught exception in service thread " + t.getName(),e);
    }
  }
;
  FSUtils.setFsDefault(this.conf,FSUtils.getRootDir(this.conf));
  boolean useHBaseChecksum=conf.getBoolean(HConstants.HBASE_CHECKSUM_VERIFICATION,true);
  this.fs=new HFileSystem(this.conf,useHBaseChecksum);
  this.rootDir=FSUtils.getRootDir(this.conf);
  this.tableDescriptors=getFsTableDescriptors();
  service=new ExecutorService(getServerName().toShortString());
  spanReceiverHost=SpanReceiverHost.getInstance(getConfiguration());
  if (!conf.getBoolean("hbase.testing.nocluster",false)) {
    zooKeeper=new ZooKeeperWatcher(conf,getProcessName() + ":" + rpcServices.isa.getPort(),this,canCreateBaseZNode());
    this.csm=(BaseCoordinatedStateManager)csm;
    this.csm.initialize(this);
    this.csm.start();
    tableLockManager=TableLockManager.createTableLockManager(conf,zooKeeper,serverName);
    masterAddressTracker=new MasterAddressTracker(getZooKeeper(),this);
    masterAddressTracker.start();
    clusterStatusTracker=new ClusterStatusTracker(zooKeeper,this);
    clusterStatusTracker.start();
  }
  this.configurationManager=new ConfigurationManager();
  rpcServices.start();
  putUpWebUI();
  this.walRoller=new LogRoller(this,this);
  this.choreService=new ChoreService(getServerName().toString());
}
