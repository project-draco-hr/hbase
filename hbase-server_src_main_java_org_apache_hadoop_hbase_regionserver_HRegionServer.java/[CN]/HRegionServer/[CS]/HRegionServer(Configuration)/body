{
  this.fsOk=true;
  this.conf=conf;
  HConnectionManager.setServerSideHConnectionRetries(this.conf,LOG);
  this.isOnline=false;
  checkCodecs(this.conf);
  this.useHBaseChecksum=conf.getBoolean(HConstants.HBASE_CHECKSUM_VERIFICATION,true);
  this.numRetries=conf.getInt("hbase.client.retries.number",10);
  this.threadWakeFrequency=conf.getInt(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000);
  this.msgInterval=conf.getInt("hbase.regionserver.msginterval",3 * 1000);
  this.sleeper=new Sleeper(this.msgInterval,this);
  this.maxScannerResultSize=conf.getLong(HConstants.HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY,HConstants.DEFAULT_HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE);
  this.numRegionsToReport=conf.getInt("hbase.regionserver.numregionstoreport",10);
  this.rpcTimeout=conf.getInt(HConstants.HBASE_RPC_TIMEOUT_KEY,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  this.abortRequested=false;
  this.stopped=false;
  this.rowLockLeaseTimeoutPeriod=conf.getInt(HConstants.HBASE_REGIONSERVER_ROWLOCK_TIMEOUT_PERIOD,HConstants.DEFAULT_HBASE_REGIONSERVER_ROWLOCK_TIMEOUT_PERIOD);
  this.scannerLeaseTimeoutPeriod=conf.getInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,HConstants.DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD);
  String hostname=Strings.domainNamePointerToHostName(DNS.getDefaultHost(conf.get("hbase.regionserver.dns.interface","default"),conf.get("hbase.regionserver.dns.nameserver","default")));
  int port=conf.getInt(HConstants.REGIONSERVER_PORT,HConstants.DEFAULT_REGIONSERVER_PORT);
  InetSocketAddress initialIsa=new InetSocketAddress(hostname,port);
  if (initialIsa.getAddress() == null) {
    throw new IllegalArgumentException("Failed resolve of " + initialIsa);
  }
  this.rpcServer=HBaseRPC.getServer(this,new Class<?>[]{ClientProtocol.class,AdminProtocol.class,HBaseRPCErrorHandler.class,OnlineRegions.class},initialIsa.getHostName(),initialIsa.getPort(),conf.getInt("hbase.regionserver.handler.count",10),conf.getInt("hbase.regionserver.metahandler.count",10),conf.getBoolean("hbase.rpc.verbose",false),conf,QOS_THRESHOLD);
  this.isa=this.rpcServer.getListenerAddress();
  this.rpcServer.setErrorHandler(this);
  this.rpcServer.setQosFunction(new QosFunction());
  this.startcode=System.currentTimeMillis();
  User.login(this.conf,"hbase.regionserver.keytab.file","hbase.regionserver.kerberos.principal",this.isa.getHostName());
  regionServerAccounting=new RegionServerAccounting();
  cacheConfig=new CacheConfig(conf);
}
