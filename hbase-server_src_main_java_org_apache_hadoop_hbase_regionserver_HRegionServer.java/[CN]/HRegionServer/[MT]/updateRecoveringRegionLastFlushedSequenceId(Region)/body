{
  if (!r.isRecovering()) {
    return;
  }
  HRegionInfo regionInfo=r.getRegionInfo();
  ZooKeeperWatcher zkw=getZooKeeper();
  String previousRSName=this.getLastFailedRSFromZK(regionInfo.getEncodedName());
  Map<byte[],Long> maxSeqIdInStores=r.getMaxStoreSeqId();
  long minSeqIdForLogReplay=-1;
  for (  Long storeSeqIdForReplay : maxSeqIdInStores.values()) {
    if (minSeqIdForLogReplay == -1 || storeSeqIdForReplay < minSeqIdForLogReplay) {
      minSeqIdForLogReplay=storeSeqIdForReplay;
    }
  }
  try {
    long lastRecordedFlushedSequenceId=-1;
    String nodePath=ZKUtil.joinZNode(this.zooKeeper.znodePaths.recoveringRegionsZNode,regionInfo.getEncodedName());
    byte[] data;
    try {
      data=ZKUtil.getData(zkw,nodePath);
    }
 catch (    InterruptedException e) {
      throw new InterruptedIOException();
    }
    if (data != null) {
      lastRecordedFlushedSequenceId=ZKSplitLog.parseLastFlushedSequenceIdFrom(data);
    }
    if (data == null || lastRecordedFlushedSequenceId < minSeqIdForLogReplay) {
      ZKUtil.setData(zkw,nodePath,ZKUtil.positionToByteArray(minSeqIdForLogReplay));
    }
    if (previousRSName != null) {
      nodePath=ZKUtil.joinZNode(nodePath,previousRSName);
      ZKUtil.setData(zkw,nodePath,ZKUtil.regionSequenceIdsToByteArray(minSeqIdForLogReplay,maxSeqIdInStores));
      LOG.debug("Update last flushed sequence id of region " + regionInfo.getEncodedName() + " for "+ previousRSName);
    }
 else {
      LOG.warn("Can't find failed region server for recovering region " + regionInfo.getEncodedName());
    }
  }
 catch (  NoNodeException ignore) {
    LOG.debug("Region " + regionInfo.getEncodedName() + " must have completed recovery because its recovery znode has been removed",ignore);
  }
}
