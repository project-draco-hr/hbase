{
  @SuppressWarnings("unchecked") Pair<Mutation,Integer>[] mutationsWithLocks=new Pair[mutates.size()];
  long before=EnvironmentEdgeManager.currentTimeMillis();
  boolean batchContainsPuts=false, batchContainsDelete=false;
  try {
    ActionResult.Builder resultBuilder=ActionResult.newBuilder();
    resultBuilder.setValue(ClientProtos.Result.newBuilder().build());
    ActionResult result=resultBuilder.build();
    int i=0;
    for (    Mutate m : mutates) {
      Mutation mutation=null;
      if (m.getMutateType() == MutateType.PUT) {
        mutation=ProtobufUtil.toPut(m);
        batchContainsPuts=true;
      }
 else {
        mutation=ProtobufUtil.toDelete(m);
        batchContainsDelete=true;
      }
      Integer lock=getLockFromId(mutation.getLockId());
      mutationsWithLocks[i++]=new Pair<Mutation,Integer>(mutation,lock);
      builder.addResult(result);
    }
    requestCount.add(mutates.size());
    if (!region.getRegionInfo().isMetaTable()) {
      cacheFlusher.reclaimMemStoreMemory();
    }
    OperationStatus codes[]=region.batchMutate(mutationsWithLocks);
    for (i=0; i < codes.length; i++) {
switch (codes[i].getOperationStatusCode()) {
case BAD_FAMILY:
        result=ResponseConverter.buildActionResult(new NoSuchColumnFamilyException(codes[i].getExceptionMsg()));
      builder.setResult(i,result);
    break;
case SANITY_CHECK_FAILURE:
  result=ResponseConverter.buildActionResult(new FailedSanityCheckException(codes[i].getExceptionMsg()));
builder.setResult(i,result);
break;
default :
result=ResponseConverter.buildActionResult(new DoNotRetryIOException(codes[i].getExceptionMsg()));
builder.setResult(i,result);
break;
case SUCCESS:
break;
}
}
}
 catch (IOException ie) {
ActionResult result=ResponseConverter.buildActionResult(ie);
for (int i=0, n=mutates.size(); i < n; i++) {
builder.setResult(i,result);
}
}
long after=EnvironmentEdgeManager.currentTimeMillis();
if (batchContainsPuts) {
metricsRegionServer.updatePut(after - before);
}
if (batchContainsDelete) {
metricsRegionServer.updateDelete(after - before);
}
}
