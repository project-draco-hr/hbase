{
  PayloadCarryingRpcController controller=(PayloadCarryingRpcController)rpcc;
  CellScanner cellScanner=controller != null ? controller.cellScanner() : null;
  controller.setCellScanner(null);
  try {
    requestCount.increment();
    HRegion region=getRegion(request.getRegion());
    MutateResponse.Builder builder=MutateResponse.newBuilder();
    MutationProto mutation=request.getMutation();
    if (!region.getRegionInfo().isMetaTable()) {
      cacheFlusher.reclaimMemStoreMemory();
    }
    Result r=null;
    Boolean processed=null;
    MutationType type=mutation.getMutateType();
switch (type) {
case APPEND:
      r=append(region,mutation,cellScanner);
    break;
case INCREMENT:
  r=increment(region,mutation,cellScanner);
break;
case PUT:
Put put=ProtobufUtil.toPut(mutation,cellScanner);
if (request.hasCondition()) {
Condition condition=request.getCondition();
byte[] row=condition.getRow().toByteArray();
byte[] family=condition.getFamily().toByteArray();
byte[] qualifier=condition.getQualifier().toByteArray();
CompareOp compareOp=CompareOp.valueOf(condition.getCompareType().name());
ByteArrayComparable comparator=ProtobufUtil.toComparator(condition.getComparator());
if (region.getCoprocessorHost() != null) {
processed=region.getCoprocessorHost().preCheckAndPut(row,family,qualifier,compareOp,comparator,put);
}
if (processed == null) {
boolean result=region.checkAndMutate(row,family,qualifier,compareOp,comparator,put,true);
if (region.getCoprocessorHost() != null) {
  result=region.getCoprocessorHost().postCheckAndPut(row,family,qualifier,compareOp,comparator,put,result);
}
processed=result;
}
}
 else {
region.put(put);
processed=Boolean.TRUE;
}
break;
case DELETE:
Delete delete=ProtobufUtil.toDelete(mutation,cellScanner);
if (request.hasCondition()) {
Condition condition=request.getCondition();
byte[] row=condition.getRow().toByteArray();
byte[] family=condition.getFamily().toByteArray();
byte[] qualifier=condition.getQualifier().toByteArray();
CompareOp compareOp=CompareOp.valueOf(condition.getCompareType().name());
ByteArrayComparable comparator=ProtobufUtil.toComparator(condition.getComparator());
if (region.getCoprocessorHost() != null) {
processed=region.getCoprocessorHost().preCheckAndDelete(row,family,qualifier,compareOp,comparator,delete);
}
if (processed == null) {
boolean result=region.checkAndMutate(row,family,qualifier,compareOp,comparator,delete,true);
if (region.getCoprocessorHost() != null) {
result=region.getCoprocessorHost().postCheckAndDelete(row,family,qualifier,compareOp,comparator,delete,result);
}
processed=result;
}
}
 else {
region.delete(delete);
processed=Boolean.TRUE;
}
break;
default :
throw new DoNotRetryIOException("Unsupported mutate type: " + type.name());
}
CellScannable cellsToReturn=null;
if (processed != null) {
builder.setProcessed(processed.booleanValue());
}
 else if (r != null) {
builder.setResult(ProtobufUtil.toResultNoData(r));
cellsToReturn=r;
}
if (cellsToReturn != null) {
controller.setCellScanner(cellsToReturn.cellScanner());
}
return builder.build();
}
 catch (IOException ie) {
checkFileSystem();
throw new ServiceException(ie);
}
}
