{
  Mutation[] mArray=new Mutation[mutations.size()];
  long before=EnvironmentEdgeManager.currentTimeMillis();
  boolean batchContainsPuts=false, batchContainsDelete=false;
  try {
    int i=0;
    for (    Pair<MutationType,Mutation> m : mutations) {
      if (m.getFirst() == MutationType.PUT) {
        batchContainsPuts=true;
      }
 else {
        batchContainsDelete=true;
      }
      mArray[i++]=m.getSecond();
    }
    requestCount.add(mutations.size());
    if (!region.getRegionInfo().isMetaTable()) {
      cacheFlusher.reclaimMemStoreMemory();
    }
    return region.batchMutate(mArray,isReplay);
  }
  finally {
    long after=EnvironmentEdgeManager.currentTimeMillis();
    if (batchContainsPuts) {
      metricsRegionServer.updatePut(after - before);
    }
    if (batchContainsDelete) {
      metricsRegionServer.updateDelete(after - before);
    }
  }
}
