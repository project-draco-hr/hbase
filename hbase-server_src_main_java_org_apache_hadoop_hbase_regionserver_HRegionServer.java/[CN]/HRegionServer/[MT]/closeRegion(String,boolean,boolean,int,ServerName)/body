{
  final HRegion actualRegion=this.getFromOnlineRegions(encodedName);
  if ((actualRegion != null) && (actualRegion.getCoprocessorHost() != null)) {
    try {
      actualRegion.getCoprocessorHost().preClose(false);
    }
 catch (    IOException exp) {
      LOG.warn("Unable to close region: the coprocessor launched an error ",exp);
      return false;
    }
  }
  final Boolean previous=this.regionsInTransitionInRS.putIfAbsent(encodedName.getBytes(),Boolean.FALSE);
  if (Boolean.TRUE.equals(previous)) {
    LOG.info("Received CLOSE for the region:" + encodedName + " , which we are already "+ "trying to OPEN. Cancelling OPENING.");
    if (!regionsInTransitionInRS.replace(encodedName.getBytes(),previous,Boolean.FALSE)) {
      LOG.warn("The opening for region " + encodedName + " was done before we could cancel it."+ " Doing a standard close now");
      return closeRegion(encodedName,abort,zk,versionOfClosingNode,sn);
    }
 else {
      LOG.info("The opening previously in progress has been cancelled by a CLOSE request.");
      throw new NotServingRegionException("The region " + encodedName + " was opening but not yet served. Opening is cancelled.");
    }
  }
 else   if (Boolean.FALSE.equals(previous)) {
    LOG.info("Received CLOSE for the region: " + encodedName + " ,which we are already trying to CLOSE");
    throw new NotServingRegionException("The region " + encodedName + " was already closing. New CLOSE request is ignored.");
  }
  if (actualRegion == null) {
    LOG.error("Received CLOSE for a region which is not online, and we're not opening.");
    this.regionsInTransitionInRS.remove(encodedName.getBytes());
    throw new NotServingRegionException("The region " + encodedName + " is not online, and is not opening.");
  }
  CloseRegionHandler crh;
  final HRegionInfo hri=actualRegion.getRegionInfo();
  if (hri.isRootRegion()) {
    crh=new CloseRootHandler(this,this,hri,abort,zk,versionOfClosingNode);
  }
 else   if (hri.isMetaRegion()) {
    crh=new CloseMetaHandler(this,this,hri,abort,zk,versionOfClosingNode);
  }
 else {
    crh=new CloseRegionHandler(this,this,hri,abort,zk,versionOfClosingNode,sn);
  }
  this.service.submit(crh);
  return true;
}
