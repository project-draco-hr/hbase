{
  try {
    for (    NameStringPair e : c.getMapEntriesList()) {
      String key=e.getName();
      if (key.equals(HConstants.KEY_FOR_HOSTNAME_SEEN_BY_MASTER)) {
        String hostnameFromMasterPOV=e.getValue();
        this.serverName=ServerName.valueOf(hostnameFromMasterPOV,rpcServices.isa.getPort(),this.startcode);
        if (shouldUseThisHostnameInstead() && !hostnameFromMasterPOV.equals(useThisHostnameInstead)) {
          String msg="Master passed us a different hostname to use; was=" + this.useThisHostnameInstead + ", but now="+ hostnameFromMasterPOV;
          LOG.error(msg);
          throw new IOException(msg);
        }
        if (!shouldUseThisHostnameInstead() && !hostnameFromMasterPOV.equals(rpcServices.isa.getHostName())) {
          String msg="Master passed us a different hostname to use; was=" + rpcServices.isa.getHostName() + ", but now="+ hostnameFromMasterPOV;
          LOG.error(msg);
        }
        continue;
      }
      String value=e.getValue();
      if (LOG.isDebugEnabled()) {
        LOG.info("Config from master: " + key + "="+ value);
      }
      this.conf.set(key,value);
    }
    if (this.conf.get("mapreduce.task.attempt.id") == null) {
      this.conf.set("mapreduce.task.attempt.id","hb_rs_" + this.serverName.toString());
    }
    ZNodeClearer.writeMyEphemeralNodeOnDisk(getMyEphemeralNodePath());
    this.cacheConfig=new CacheConfig(conf);
    this.walFactory=setupWALAndReplication();
    this.metricsRegionServer=new MetricsRegionServer(new MetricsRegionServerWrapperImpl(this));
    this.metricsTable=new MetricsTable(new MetricsTableWrapperAggregateImpl(this));
    startServiceThreads();
    startHeapMemoryManager();
    LOG.info("Serving as " + this.serverName + ", RpcServer on "+ rpcServices.isa+ ", sessionid=0x"+ Long.toHexString(this.zooKeeper.getRecoverableZooKeeper().getSessionId()));
synchronized (online) {
      online.set(true);
      online.notifyAll();
    }
  }
 catch (  Throwable e) {
    stop("Failed initialization");
    throw convertThrowableToIOE(cleanup(e,"Failed init"),"Region server startup failed");
  }
 finally {
    sleeper.skipSleepCycle();
  }
}
