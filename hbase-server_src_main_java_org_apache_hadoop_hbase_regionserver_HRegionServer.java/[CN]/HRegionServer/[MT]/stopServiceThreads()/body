{
  if (this.choreService != null)   choreService.shutdown();
  if (this.nonceManagerChore != null)   nonceManagerChore.cancel(true);
  if (this.compactionChecker != null)   compactionChecker.cancel(true);
  if (this.periodicFlusher != null)   periodicFlusher.cancel(true);
  if (this.healthCheckChore != null)   healthCheckChore.cancel(true);
  if (this.storefileRefresher != null)   storefileRefresher.cancel(true);
  if (this.movedRegionsCleaner != null)   movedRegionsCleaner.cancel(true);
  if (this.cacheFlusher != null) {
    this.cacheFlusher.join();
  }
  if (this.spanReceiverHost != null) {
    this.spanReceiverHost.closeReceivers();
  }
  if (this.walRoller != null) {
    Threads.shutdown(this.walRoller.getThread());
  }
  final LogRoller metawalRoller=this.metawalRoller.get();
  if (metawalRoller != null) {
    Threads.shutdown(metawalRoller.getThread());
  }
  if (this.compactSplitThread != null) {
    this.compactSplitThread.join();
  }
  if (this.service != null)   this.service.shutdown();
  if (this.replicationSourceHandler != null && this.replicationSourceHandler == this.replicationSinkHandler) {
    this.replicationSourceHandler.stopReplicationService();
  }
 else {
    if (this.replicationSourceHandler != null) {
      this.replicationSourceHandler.stopReplicationService();
    }
    if (this.replicationSinkHandler != null) {
      this.replicationSinkHandler.stopReplicationService();
    }
  }
}
