{
  try {
    ServerRpcController serviceController=new ServerRpcController();
    CoprocessorServiceCall call=serviceRequest.getCall();
    String serviceName=call.getServiceName();
    String methodName=call.getMethodName();
    if (!coprocessorServiceHandlers.containsKey(serviceName)) {
      throw new UnknownProtocolException(null,"No registered coprocessor service found for name " + serviceName);
    }
    Service service=coprocessorServiceHandlers.get(serviceName);
    Descriptors.ServiceDescriptor serviceDesc=service.getDescriptorForType();
    Descriptors.MethodDescriptor methodDesc=serviceDesc.findMethodByName(methodName);
    if (methodDesc == null) {
      throw new UnknownProtocolException(service.getClass(),"Unknown method " + methodName + " called on service "+ serviceName);
    }
    Message request=service.getRequestPrototype(methodDesc).newBuilderForType().mergeFrom(call.getRequest()).build();
    final Message.Builder responseBuilder=service.getResponsePrototype(methodDesc).newBuilderForType();
    service.callMethod(methodDesc,serviceController,request,new RpcCallback<Message>(){
      @Override public void run(      Message message){
        if (message != null) {
          responseBuilder.mergeFrom(message);
        }
      }
    }
);
    IOException exception=ResponseConverter.getControllerException(serviceController);
    if (exception != null) {
      throw exception;
    }
    Message execResult=responseBuilder.build();
    ClientProtos.CoprocessorServiceResponse.Builder builder=ClientProtos.CoprocessorServiceResponse.newBuilder();
    builder.setRegion(RequestConverter.buildRegionSpecifier(RegionSpecifierType.REGION_NAME,HConstants.EMPTY_BYTE_ARRAY));
    builder.setValue(builder.getValueBuilder().setName(execResult.getClass().getName()).setValue(execResult.toByteString()));
    return builder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
}
