{
  int versionOfClosingNode=-1;
  if (request.hasVersionOfClosingNode()) {
    versionOfClosingNode=request.getVersionOfClosingNode();
  }
  boolean zk=request.getTransitionInZK();
  final ServerName sn=(request.hasDestinationServer() ? ProtobufUtil.toServerName(request.getDestinationServer()) : null);
  try {
    checkOpen();
    final String encodedRegionName=ProtobufUtil.getRegionEncodedName(request.getRegion());
    final HRegion region=this.getFromOnlineRegions(encodedRegionName);
    if ((region != null) && (region.getCoprocessorHost() != null)) {
      region.getCoprocessorHost().preClose(false);
    }
    requestCount.increment();
    LOG.info("Received close region: " + encodedRegionName + "Transitioning in ZK: "+ (zk ? "yes" : "no")+ ". Version of ZK closing node:"+ versionOfClosingNode+ ". Destination server:"+ sn);
    boolean closed=closeRegion(encodedRegionName,false,zk,versionOfClosingNode,sn);
    CloseRegionResponse.Builder builder=CloseRegionResponse.newBuilder().setClosed(closed);
    return builder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
}
