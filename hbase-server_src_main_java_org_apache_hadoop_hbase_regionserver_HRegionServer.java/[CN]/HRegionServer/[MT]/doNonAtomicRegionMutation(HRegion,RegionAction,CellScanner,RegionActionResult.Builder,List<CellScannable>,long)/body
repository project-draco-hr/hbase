{
  List<ClientProtos.Action> mutations=null;
  for (  ClientProtos.Action action : actions.getActionList()) {
    ClientProtos.ResultOrException.Builder resultOrExceptionBuilder=null;
    try {
      Result r=null;
      if (action.hasGet()) {
        Get get=ProtobufUtil.toGet(action.getGet());
        r=region.get(get);
      }
 else       if (action.hasServiceCall()) {
        resultOrExceptionBuilder=ResultOrException.newBuilder();
        try {
          Message result=execServiceOnRegion(region,action.getServiceCall());
          ClientProtos.CoprocessorServiceResult.Builder serviceResultBuilder=ClientProtos.CoprocessorServiceResult.newBuilder();
          resultOrExceptionBuilder.setServiceResult(serviceResultBuilder.setValue(serviceResultBuilder.getValueBuilder().setName(result.getClass().getName()).setValue(result.toByteString())));
        }
 catch (        IOException ioe) {
          resultOrExceptionBuilder.setException(ResponseConverter.buildException(ioe));
        }
      }
 else       if (action.hasMutation()) {
        MutationType type=action.getMutation().getMutateType();
        if (type != MutationType.PUT && type != MutationType.DELETE && mutations != null && !mutations.isEmpty()) {
          doBatchOp(builder,region,mutations,cellScanner);
          mutations.clear();
        }
switch (type) {
case APPEND:
          r=append(region,action.getMutation(),cellScanner,nonceGroup);
        break;
case INCREMENT:
      r=increment(region,action.getMutation(),cellScanner,nonceGroup);
    break;
case PUT:
case DELETE:
  if (mutations == null) {
    mutations=new ArrayList<ClientProtos.Action>(actions.getActionCount());
  }
mutations.add(action);
break;
default :
throw new DoNotRetryIOException("Unsupported mutate type: " + type.name());
}
}
 else {
throw new HBaseIOException("Unexpected Action type");
}
if (r != null) {
ClientProtos.Result pbResult=null;
if (isClientCellBlockSupport()) {
pbResult=ProtobufUtil.toResultNoData(r);
if (cellsToReturn == null) cellsToReturn=new ArrayList<CellScannable>();
cellsToReturn.add(r);
}
 else {
pbResult=ProtobufUtil.toResult(r);
}
resultOrExceptionBuilder=ClientProtos.ResultOrException.newBuilder().setResult(pbResult);
}
}
 catch (IOException ie) {
resultOrExceptionBuilder=ResultOrException.newBuilder().setException(ResponseConverter.buildException(ie));
}
if (resultOrExceptionBuilder != null) {
resultOrExceptionBuilder.setIndex(action.getIndex());
builder.addResultOrException(resultOrExceptionBuilder.build());
}
}
if (mutations != null && !mutations.isEmpty()) {
doBatchOp(builder,region,mutations,cellScanner);
}
return cellsToReturn;
}
