{
  if (rssStub != null) {
    return masterAddressTracker.getMasterAddress();
  }
  ServerName sn=null;
  long previousLogTime=0;
  boolean refresh=false;
  RegionServerStatusService.BlockingInterface intf=null;
  boolean interrupted=false;
  try {
    while (keepLooping()) {
      sn=this.masterAddressTracker.getMasterAddress(refresh);
      if (sn == null) {
        if (!keepLooping()) {
          LOG.debug("No master found and cluster is stopped; bailing out");
          return null;
        }
        if (System.currentTimeMillis() > (previousLogTime + 1000)) {
          LOG.debug("No master found; retry");
          previousLogTime=System.currentTimeMillis();
        }
        refresh=true;
        if (sleep(200)) {
          interrupted=true;
        }
        continue;
      }
      if (this instanceof HMaster && sn.equals(getServerName())) {
        intf=((HMaster)this).getMasterRpcServices();
        break;
      }
      try {
        BlockingRpcChannel channel=this.rpcClient.createBlockingRpcChannel(sn,userProvider.getCurrent(),shortOperationTimeout);
        intf=RegionServerStatusService.newBlockingStub(channel);
        break;
      }
 catch (      IOException e) {
        if (System.currentTimeMillis() > (previousLogTime + 1000)) {
          e=e instanceof RemoteException ? ((RemoteException)e).unwrapRemoteException() : e;
          if (e instanceof ServerNotRunningYetException) {
            LOG.info("Master isn't available yet, retrying");
          }
 else {
            LOG.warn("Unable to connect to master. Retrying. Error was:",e);
          }
          previousLogTime=System.currentTimeMillis();
        }
        if (sleep(200)) {
          interrupted=true;
        }
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
  rssStub=intf;
  return sn;
}
