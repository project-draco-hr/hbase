{
  ServerName sn=null;
  long previousLogTime=0;
  RegionServerStatusService.BlockingInterface master=null;
  boolean refresh=false;
  RegionServerStatusService.BlockingInterface intf=null;
  boolean interrupted=false;
  try {
    while (keepLooping() && master == null) {
      sn=this.masterAddressTracker.getMasterAddress(refresh);
      if (sn == null) {
        if (!keepLooping()) {
          LOG.debug("No master found and cluster is stopped; bailing out");
          return null;
        }
        LOG.debug("No master found; retry");
        previousLogTime=System.currentTimeMillis();
        refresh=true;
        sleeper.sleep();
        continue;
      }
      if (this instanceof HMaster && sn.equals(getServerName())) {
        intf=((HMaster)this).getMasterRpcServices();
        break;
      }
      try {
        BlockingRpcChannel channel=this.rpcClient.createBlockingRpcChannel(sn,userProvider.getCurrent(),operationTimeout);
        intf=RegionServerStatusService.newBlockingStub(channel);
        break;
      }
 catch (      IOException e) {
        e=e instanceof RemoteException ? ((RemoteException)e).unwrapRemoteException() : e;
        if (e instanceof ServerNotRunningYetException) {
          if (System.currentTimeMillis() > (previousLogTime + 1000)) {
            LOG.info("Master isn't available yet, retrying");
            previousLogTime=System.currentTimeMillis();
          }
        }
 else {
          if (System.currentTimeMillis() > (previousLogTime + 1000)) {
            LOG.warn("Unable to connect to master. Retrying. Error was:",e);
            previousLogTime=System.currentTimeMillis();
          }
        }
        try {
          Thread.sleep(200);
        }
 catch (        InterruptedException ex) {
          interrupted=true;
          LOG.warn("Interrupted while sleeping");
        }
      }
    }
  }
  finally {
    if (interrupted) {
      Thread.currentThread().interrupt();
    }
  }
  return new Pair<ServerName,RegionServerStatusService.BlockingInterface>(sn,intf);
}
