{
  long before=EnvironmentEdgeManager.currentTimeMillis();
  try {
    requestCount.add(request.getGetCount());
    HRegion region=getRegion(request.getRegion());
    MultiGetResponse.Builder builder=MultiGetResponse.newBuilder();
    for (    ClientProtos.Get get : request.getGetList()) {
      Boolean existence=null;
      Result r=null;
      if (request.getClosestRowBefore()) {
        if (get.getColumnCount() != 1) {
          throw new DoNotRetryIOException("get ClosestRowBefore supports one and only one family now, not " + get.getColumnCount() + " families");
        }
        byte[] row=get.getRow().toByteArray();
        byte[] family=get.getColumn(0).getFamily().toByteArray();
        r=region.getClosestRowBefore(row,family);
      }
 else {
        Get clientGet=ProtobufUtil.toGet(get);
        if (request.getExistenceOnly() && region.getCoprocessorHost() != null) {
          existence=region.getCoprocessorHost().preExists(clientGet);
        }
        if (existence == null) {
          r=region.get(clientGet);
          if (request.getExistenceOnly()) {
            boolean exists=r != null && !r.isEmpty();
            if (region.getCoprocessorHost() != null) {
              exists=region.getCoprocessorHost().postExists(clientGet,exists);
            }
            existence=exists;
          }
        }
      }
      if (existence != null) {
        builder.addExists(existence.booleanValue());
      }
 else       if (r != null) {
        builder.addResult(ProtobufUtil.toResult(r));
      }
    }
    return builder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
 finally {
    metricsRegionServer.updateGet(EnvironmentEdgeManager.currentTimeMillis() - before);
  }
}
