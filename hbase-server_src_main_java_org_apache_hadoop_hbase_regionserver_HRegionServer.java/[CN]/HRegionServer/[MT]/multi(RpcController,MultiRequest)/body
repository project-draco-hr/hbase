{
  PayloadCarryingRpcController controller=(PayloadCarryingRpcController)rpcc;
  CellScanner cellScanner=controller != null ? controller.cellScanner() : null;
  if (controller != null)   controller.setCellScanner(null);
  List<CellScannable> cellsToReturn=null;
  MultiResponse.Builder responseBuilder=MultiResponse.newBuilder();
  for (  RegionAction regionAction : request.getRegionActionList()) {
    this.requestCount.add(regionAction.getActionCount());
    RegionActionResult.Builder regionActionResultBuilder=RegionActionResult.newBuilder();
    HRegion region;
    try {
      region=getRegion(regionAction.getRegion());
    }
 catch (    IOException e) {
      regionActionResultBuilder.setException(ResponseConverter.buildException(e));
      responseBuilder.addRegionActionResult(regionActionResultBuilder.build());
      continue;
    }
    if (regionAction.hasAtomic() && regionAction.getAtomic()) {
      try {
        mutateRows(region,regionAction.getActionList(),cellScanner);
      }
 catch (      IOException e) {
        regionActionResultBuilder.setException(ResponseConverter.buildException(e));
      }
    }
 else {
      cellsToReturn=doNonAtomicRegionMutation(region,regionAction,cellScanner,regionActionResultBuilder,cellsToReturn);
    }
    responseBuilder.addRegionActionResult(regionActionResultBuilder.build());
  }
  if (cellsToReturn != null && !cellsToReturn.isEmpty() && controller != null) {
    controller.setCellScanner(CellUtil.createCellScanner(cellsToReturn));
  }
  return responseBuilder.build();
}
