{
  PayloadCarryingRpcController controller=(PayloadCarryingRpcController)rpcc;
  CellScanner cellScanner=controller != null ? controller.cellScanner() : null;
  if (controller != null)   controller.setCellScanner(null);
  List<CellScannable> cellsToReturn=null;
  MultiResponse.Builder responseBuilder=MultiResponse.newBuilder();
  try {
    for (    RegionMutation regionMutation : request.getRegionMutationList()) {
      RegionMutationResult.Builder regionMutationResultBuilder=null;
      HRegion region=getRegion(regionMutation.getRegion());
      if (regionMutation.hasAtomic() && regionMutation.getAtomic()) {
        this.requestCount.increment();
        mutateRows(region,regionMutation.getMutationList(),cellScanner);
      }
 else {
        regionMutationResultBuilder=RegionMutationResult.newBuilder();
        cellsToReturn=doNonAtomicRegionMutation(region,regionMutation,cellScanner,regionMutationResultBuilder,cellsToReturn);
      }
      responseBuilder.addRegionMutationResult(regionMutationResultBuilder == null ? RegionMutationResult.getDefaultInstance() : regionMutationResultBuilder.build());
    }
    if (cellsToReturn != null && !cellsToReturn.isEmpty() && controller != null) {
      controller.setCellScanner(CellUtil.createCellScanner(cellsToReturn));
    }
    return responseBuilder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
}
