{
  this.cacheFlusher=new MemStoreFlusher(conf,this);
  this.compactSplitThread=new CompactSplitThread(this);
  this.compactionChecker=new CompactionChecker(this,this.threadWakeFrequency,this);
  this.periodicFlusher=new PeriodicMemstoreFlusher(this.threadWakeFrequency,this);
  int sleepTime=this.conf.getInt(HConstants.HEALTH_CHORE_WAKE_FREQ,HConstants.DEFAULT_THREAD_WAKE_FREQUENCY);
  if (isHealthCheckerConfigured()) {
    healthCheckChore=new HealthCheckChore(sleepTime,this,getConfiguration());
  }
  this.leases=new Leases(this.threadWakeFrequency);
  movedRegionsCleaner=MovedRegionsCleaner.createAndStart(this);
  if (this.nonceManager != null) {
    nonceManagerChore=this.nonceManager.createCleanupChore(this);
  }
  rpcClient=new RpcClient(conf,clusterId,new InetSocketAddress(rpcServices.isa.getAddress(),0));
  this.pauseMonitor=new JvmPauseMonitor(conf);
  pauseMonitor.start();
}
