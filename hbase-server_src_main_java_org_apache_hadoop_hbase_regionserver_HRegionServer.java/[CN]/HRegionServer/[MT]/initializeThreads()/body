{
  this.cacheFlusher=new MemStoreFlusher(conf,this);
  this.compactSplitThread=new CompactSplitThread(this);
  int multiplier=this.conf.getInt(HConstants.THREAD_WAKE_FREQUENCY + ".multiplier",1000);
  this.compactionChecker=new CompactionChecker(this,this.threadWakeFrequency * multiplier,this);
  int sleepTime=this.conf.getInt(HConstants.HEALTH_CHORE_WAKE_FREQ,HConstants.DEFAULT_THREAD_WAKE_FREQUENCY);
  if (isHealthCheckerConfigured()) {
    healthCheckChore=new HealthCheckChore(sleepTime,this,getConfiguration());
  }
  this.leases=new Leases(this.threadWakeFrequency);
  if (conf.getBoolean("hbase.regionserver.export.thrift",false)) {
    thriftServer=new HRegionThriftServer(this,conf);
    thriftServer.start();
    LOG.info("Started Thrift API from Region Server.");
  }
  movedRegionsCleaner=MovedRegionsCleaner.createAndStart(this);
}
