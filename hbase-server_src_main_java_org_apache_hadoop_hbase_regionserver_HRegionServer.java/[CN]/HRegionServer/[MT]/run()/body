{
  try {
    preRegistrationInitialization();
  }
 catch (  Throwable e) {
    abort("Fatal exception during initialization",e);
  }
  try {
    if (!isStopped() && !isAborted()) {
      ShutdownHook.install(conf,fs,this,Thread.currentThread());
      createMyEphemeralNode();
      this.rsHost=new RegionServerCoprocessorHost(this,this.conf);
    }
    while (keepLooping()) {
      RegionServerStartupResponse w=reportForDuty();
      if (w == null) {
        LOG.warn("reportForDuty failed; sleeping and then retrying.");
        this.sleeper.sleep();
      }
 else {
        handleReportForDutyResponse(w);
        break;
      }
    }
    if (!isStopped() && isHealthy()) {
      rspmHost.start();
      rsQuotaManager.start(getRpcServer().getScheduler());
    }
    long lastMsg=System.currentTimeMillis();
    long oldRequestCount=-1;
    while (!isStopped() && isHealthy()) {
      if (!isClusterUp()) {
        if (isOnlineRegionsEmpty()) {
          stop("Exiting; cluster shutdown set and not carrying any regions");
        }
 else         if (!this.stopping) {
          this.stopping=true;
          LOG.info("Closing user regions");
          closeUserRegions(this.abortRequested);
        }
 else         if (this.stopping) {
          boolean allUserRegionsOffline=areAllUserRegionsOffline();
          if (allUserRegionsOffline) {
            if (oldRequestCount == getWriteRequestCount()) {
              stop("Stopped; only catalog regions remaining online");
              break;
            }
            oldRequestCount=getWriteRequestCount();
          }
 else {
            closeUserRegions(this.abortRequested);
          }
          LOG.debug("Waiting on " + getOnlineRegionsAsPrintableString());
        }
      }
      long now=System.currentTimeMillis();
      if ((now - lastMsg) >= msgInterval) {
        tryRegionServerReport(lastMsg,now);
        lastMsg=System.currentTimeMillis();
        doMetrics();
      }
      if (!isStopped() && !isAborted()) {
        this.sleeper.sleep();
      }
    }
  }
 catch (  Throwable t) {
    if (!rpcServices.checkOOME(t)) {
      String prefix=t instanceof YouAreDeadException ? "" : "Unhandled: ";
      abort(prefix + t.getMessage(),t);
    }
  }
  if (mxBean != null) {
    MBeanUtil.unregisterMBean(mxBean);
    mxBean=null;
  }
  if (this.leases != null)   this.leases.closeAfterLeasesExpire();
  if (this.splitLogWorker != null) {
    splitLogWorker.stop();
  }
  if (this.infoServer != null) {
    LOG.info("Stopping infoServer");
    try {
      this.infoServer.stop();
    }
 catch (    Exception e) {
      LOG.error("Failed to stop infoServer",e);
    }
  }
  if (cacheConfig != null && cacheConfig.isBlockCacheEnabled()) {
    cacheConfig.getBlockCache().shutdown();
  }
  mobCacheConfig.getMobFileCache().shutdown();
  if (movedRegionsCleaner != null) {
    movedRegionsCleaner.stop("Region Server stopping");
  }
  if (this.hMemManager != null)   this.hMemManager.stop();
  if (this.cacheFlusher != null)   this.cacheFlusher.interruptIfNecessary();
  if (this.compactSplitThread != null)   this.compactSplitThread.interruptIfNecessary();
  if (this.compactionChecker != null)   this.compactionChecker.cancel(true);
  if (this.healthCheckChore != null)   this.healthCheckChore.cancel(true);
  if (this.nonceManagerChore != null)   this.nonceManagerChore.cancel(true);
  if (this.storefileRefresher != null)   this.storefileRefresher.cancel(true);
  sendShutdownInterrupt();
  if (rsQuotaManager != null) {
    rsQuotaManager.stop();
  }
  if (rspmHost != null) {
    rspmHost.stop(this.abortRequested || this.killed);
  }
  if (this.killed) {
  }
 else   if (abortRequested) {
    if (this.fsOk) {
      closeUserRegions(abortRequested);
    }
    LOG.info("aborting server " + this.serverName);
  }
 else {
    closeUserRegions(abortRequested);
    LOG.info("stopping server " + this.serverName);
  }
  if (this.metaTableLocator != null)   this.metaTableLocator.stop();
  if (this.clusterConnection != null && !clusterConnection.isClosed()) {
    try {
      this.clusterConnection.close();
    }
 catch (    IOException e) {
      LOG.warn("Attempt to close server's short circuit HConnection failed.",e);
    }
  }
  if (!this.killed && containsMetaTableRegions()) {
    if (!abortRequested || this.fsOk) {
      if (this.compactSplitThread != null) {
        this.compactSplitThread.join();
        this.compactSplitThread=null;
      }
      closeMetaTableRegions(abortRequested);
    }
  }
  if (!this.killed && this.fsOk) {
    waitOnAllRegionsToClose(abortRequested);
    LOG.info("stopping server " + this.serverName + "; all regions closed.");
  }
  if (this.fsOk) {
    shutdownWAL(!abortRequested);
  }
  if (this.rssStub != null) {
    this.rssStub=null;
  }
  if (this.rpcClient != null) {
    this.rpcClient.close();
  }
  if (this.leases != null) {
    this.leases.close();
  }
  if (this.pauseMonitor != null) {
    this.pauseMonitor.stop();
  }
  if (!killed) {
    stopServiceThreads();
  }
  if (this.rpcServices != null) {
    this.rpcServices.stop();
  }
  try {
    deleteMyEphemeralNode();
  }
 catch (  KeeperException.NoNodeException nn) {
  }
catch (  KeeperException e) {
    LOG.warn("Failed deleting my ephemeral node",e);
  }
  ZNodeClearer.deleteMyEphemeralNodeOnDisk();
  if (this.zooKeeper != null) {
    this.zooKeeper.close();
  }
  LOG.info("stopping server " + this.serverName + "; zookeeper connection closed.");
  LOG.info(Thread.currentThread().getName() + " exiting");
}
