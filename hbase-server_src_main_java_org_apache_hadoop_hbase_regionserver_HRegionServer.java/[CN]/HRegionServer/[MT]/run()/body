{
  try {
    preRegistrationInitialization();
  }
 catch (  Throwable e) {
    abort("Fatal exception during initialization",e);
  }
  try {
    while (keepLooping()) {
      RegionServerStartupResponse w=reportForDuty();
      if (w == null) {
        LOG.warn("reportForDuty failed; sleeping and then retrying.");
        this.sleeper.sleep();
      }
 else {
        handleReportForDutyResponse(w);
        break;
      }
    }
    if (!this.stopped && isHealthy()) {
      this.snapshotManager.start();
    }
    long lastMsg=0;
    long oldRequestCount=-1;
    while (!this.stopped && isHealthy()) {
      if (!isClusterUp()) {
        if (isOnlineRegionsEmpty()) {
          stop("Exiting; cluster shutdown set and not carrying any regions");
        }
 else         if (!this.stopping) {
          this.stopping=true;
          LOG.info("Closing user regions");
          closeUserRegions(this.abortRequested);
        }
 else         if (this.stopping) {
          boolean allUserRegionsOffline=areAllUserRegionsOffline();
          if (allUserRegionsOffline) {
            if (oldRequestCount == this.requestCount.get()) {
              stop("Stopped; only catalog regions remaining online");
              break;
            }
            oldRequestCount=this.requestCount.get();
          }
 else {
            closeUserRegions(this.abortRequested);
          }
          LOG.debug("Waiting on " + getOnlineRegionsAsPrintableString());
        }
      }
      long now=System.currentTimeMillis();
      if ((now - lastMsg) >= msgInterval) {
        tryRegionServerReport(lastMsg,now);
        lastMsg=System.currentTimeMillis();
      }
      if (!this.stopped)       this.sleeper.sleep();
    }
  }
 catch (  Throwable t) {
    if (!checkOOME(t)) {
      String prefix=t instanceof YouAreDeadException ? "" : "Unhandled: ";
      abort(prefix + t.getMessage(),t);
    }
  }
  if (mxBean != null) {
    MBeanUtil.unregisterMBean(mxBean);
    mxBean=null;
  }
  if (this.leases != null)   this.leases.closeAfterLeasesExpire();
  this.rpcServer.stop();
  if (this.splitLogWorker != null) {
    splitLogWorker.stop();
  }
  if (this.infoServer != null) {
    LOG.info("Stopping infoServer");
    try {
      this.infoServer.stop();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (cacheConfig.isBlockCacheEnabled()) {
    cacheConfig.getBlockCache().shutdown();
  }
  movedRegionsCleaner.stop("Region Server stopping");
  if (this.cacheFlusher != null)   this.cacheFlusher.interruptIfNecessary();
  if (this.compactSplitThread != null)   this.compactSplitThread.interruptIfNecessary();
  if (this.hlogRoller != null)   this.hlogRoller.interruptIfNecessary();
  if (this.metaHLogRoller != null)   this.metaHLogRoller.interruptIfNecessary();
  if (this.compactionChecker != null)   this.compactionChecker.interrupt();
  if (this.healthCheckChore != null) {
    this.healthCheckChore.interrupt();
  }
  try {
    if (snapshotManager != null)     snapshotManager.stop(this.abortRequested || this.killed);
  }
 catch (  IOException e) {
    LOG.warn("Failed to close snapshot handler cleanly",e);
  }
  if (this.killed) {
  }
 else   if (abortRequested) {
    if (this.fsOk) {
      closeUserRegions(abortRequested);
    }
    LOG.info("aborting server " + this.serverNameFromMasterPOV);
  }
 else {
    closeUserRegions(abortRequested);
    closeAllScanners();
    LOG.info("stopping server " + this.serverNameFromMasterPOV);
  }
  if (this.catalogTracker != null)   this.catalogTracker.stop();
  if (!this.killed && containsMetaTableRegions()) {
    if (!abortRequested || this.fsOk) {
      if (this.compactSplitThread != null) {
        this.compactSplitThread.join();
        this.compactSplitThread=null;
      }
      closeMetaTableRegions(abortRequested);
    }
  }
  if (!this.killed && this.fsOk) {
    waitOnAllRegionsToClose(abortRequested);
    LOG.info("stopping server " + this.serverNameFromMasterPOV + "; all regions closed.");
  }
  if (this.fsOk) {
    closeWAL(!abortRequested);
  }
  if (this.rssStub != null) {
    this.rssStub=null;
  }
  this.rpcClient.stop();
  this.leases.close();
  if (this.pauseMonitor != null) {
    this.pauseMonitor.stop();
  }
  if (!killed) {
    join();
  }
  try {
    deleteMyEphemeralNode();
  }
 catch (  KeeperException e) {
    LOG.warn("Failed deleting my ephemeral node",e);
  }
  ZNodeClearer.deleteMyEphemeralNodeOnDisk();
  this.zooKeeper.close();
  LOG.info("stopping server " + this.serverNameFromMasterPOV + "; zookeeper connection closed.");
  LOG.info(Thread.currentThread().getName() + " exiting");
}
