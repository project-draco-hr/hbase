{
  this.service.startExecutorService(ExecutorType.RS_OPEN_REGION,conf.getInt("hbase.regionserver.executor.openregion.threads",3));
  this.service.startExecutorService(ExecutorType.RS_OPEN_META,conf.getInt("hbase.regionserver.executor.openmeta.threads",1));
  this.service.startExecutorService(ExecutorType.RS_CLOSE_REGION,conf.getInt("hbase.regionserver.executor.closeregion.threads",3));
  this.service.startExecutorService(ExecutorType.RS_CLOSE_META,conf.getInt("hbase.regionserver.executor.closemeta.threads",1));
  if (conf.getBoolean(StoreScanner.STORESCANNER_PARALLEL_SEEK_ENABLE,false)) {
    this.service.startExecutorService(ExecutorType.RS_PARALLEL_SEEK,conf.getInt("hbase.storescanner.parallel.seek.threads",10));
  }
  this.service.startExecutorService(ExecutorType.RS_LOG_REPLAY_OPS,conf.getInt("hbase.regionserver.wal.max.splitters",SplitLogWorkerCoordination.DEFAULT_MAX_SPLITTERS));
  Threads.setDaemonThreadRunning(this.hlogRoller.getThread(),getName() + ".logRoller",uncaughtExceptionHandler);
  this.cacheFlusher.start(uncaughtExceptionHandler);
  Threads.setDaemonThreadRunning(this.compactionChecker.getThread(),getName() + ".compactionChecker",uncaughtExceptionHandler);
  Threads.setDaemonThreadRunning(this.periodicFlusher.getThread(),getName() + ".periodicFlusher",uncaughtExceptionHandler);
  if (this.healthCheckChore != null) {
    Threads.setDaemonThreadRunning(this.healthCheckChore.getThread(),getName() + ".healthChecker",uncaughtExceptionHandler);
  }
  if (this.nonceManagerChore != null) {
    Threads.setDaemonThreadRunning(this.nonceManagerChore.getThread(),getName() + ".nonceCleaner",uncaughtExceptionHandler);
  }
  if (this.storefileRefresher != null) {
    Threads.setDaemonThreadRunning(this.storefileRefresher.getThread(),getName() + ".storefileRefresher",uncaughtExceptionHandler);
  }
  this.leases.setName(getName() + ".leaseChecker");
  this.leases.start();
  if (this.replicationSourceHandler == this.replicationSinkHandler && this.replicationSourceHandler != null) {
    this.replicationSourceHandler.startReplicationService();
  }
 else {
    if (this.replicationSourceHandler != null) {
      this.replicationSourceHandler.startReplicationService();
    }
    if (this.replicationSinkHandler != null) {
      this.replicationSinkHandler.startReplicationService();
    }
  }
  rpcServices.rpcServer.start();
  Configuration sinkConf=HBaseConfiguration.create(conf);
  sinkConf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,conf.getInt("hbase.log.replay.retries.number",8));
  sinkConf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY,conf.getInt("hbase.log.replay.rpc.timeout",30000));
  sinkConf.setInt("hbase.client.serverside.retries.multiplier",1);
  this.splitLogWorker=new SplitLogWorker(this,sinkConf,this,this);
  splitLogWorker.start();
}
