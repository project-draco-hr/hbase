{
  MetricsRegionServerWrapper regionServerWrapper=this.metricsRegionServer.getRegionServerWrapper();
  Collection<HRegion> regions=getOnlineRegionsLocalContext();
  MemoryUsage memory=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
  ClusterStatusProtos.ServerLoad.Builder serverLoad=ClusterStatusProtos.ServerLoad.newBuilder();
  serverLoad.setNumberOfRequests((int)regionServerWrapper.getRequestsPerSecond());
  serverLoad.setTotalNumberOfRequests((int)regionServerWrapper.getTotalRequestCount());
  serverLoad.setUsedHeapMB((int)(memory.getUsed() / 1024 / 1024));
  serverLoad.setMaxHeapMB((int)(memory.getMax() / 1024 / 1024));
  Set<String> coprocessors=getWAL(null).getCoprocessorHost().getCoprocessors();
  for (  String coprocessor : coprocessors) {
    serverLoad.addCoprocessors(Coprocessor.newBuilder().setName(coprocessor).build());
  }
  RegionLoad.Builder regionLoadBldr=RegionLoad.newBuilder();
  RegionSpecifier.Builder regionSpecifier=RegionSpecifier.newBuilder();
  for (  HRegion region : regions) {
    serverLoad.addRegionLoads(createRegionLoad(region,regionLoadBldr,regionSpecifier));
    for (    String coprocessor : getWAL(region.getRegionInfo()).getCoprocessorHost().getCoprocessors()) {
      serverLoad.addCoprocessors(Coprocessor.newBuilder().setName(coprocessor).build());
    }
  }
  serverLoad.setReportStartTime(reportStartTime);
  serverLoad.setReportEndTime(reportEndTime);
  if (this.infoServer != null) {
    serverLoad.setInfoServerPort(this.infoServer.getPort());
  }
 else {
    serverLoad.setInfoServerPort(-1);
  }
  return serverLoad.build();
}
