{
  long before=EnvironmentEdgeManager.currentTimeMillis();
  try {
    checkOpen();
    requestCount.increment();
    HRegion region=getRegion(request.getRegion());
    GetResponse.Builder builder=GetResponse.newBuilder();
    ClientProtos.Get get=request.getGet();
    Boolean existence=null;
    Result r=null;
    if (get.hasClosestRowBefore() && get.getClosestRowBefore()) {
      if (get.getColumnCount() != 1) {
        throw new DoNotRetryIOException("get ClosestRowBefore supports one and only one family now, not " + get.getColumnCount() + " families");
      }
      byte[] row=get.getRow().toByteArray();
      byte[] family=get.getColumn(0).getFamily().toByteArray();
      r=region.getClosestRowBefore(row,family);
    }
 else {
      Get clientGet=ProtobufUtil.toGet(get);
      if (get.getExistenceOnly() && region.getCoprocessorHost() != null) {
        existence=region.getCoprocessorHost().preExists(clientGet);
      }
      if (existence == null) {
        r=region.get(clientGet);
        if (get.getExistenceOnly()) {
          boolean exists=r.getExists();
          if (region.getCoprocessorHost() != null) {
            exists=region.getCoprocessorHost().postExists(clientGet,exists);
          }
          existence=exists;
        }
      }
    }
    if (existence != null) {
      ClientProtos.Result pbr=ProtobufUtil.toResult(existence);
      builder.setResult(pbr);
    }
 else     if (r != null) {
      ClientProtos.Result pbr=ProtobufUtil.toResult(r);
      builder.setResult(pbr);
    }
    return builder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
 finally {
    metricsRegionServer.updateGet(EnvironmentEdgeManager.currentTimeMillis() - before);
  }
}
