{
  this.scope=conn.toString();
  this.registry=new MetricsRegistry();
  final ThreadPoolExecutor batchPool=(ThreadPoolExecutor)conn.getCurrentBatchPool();
  final ThreadPoolExecutor metaPool=(ThreadPoolExecutor)conn.getCurrentMetaLookupPool();
  this.registry.newGauge(this.getClass(),"executorPoolActiveThreads",scope,new RatioGauge(){
    @Override protected double getNumerator(){
      return batchPool.getActiveCount();
    }
    @Override protected double getDenominator(){
      return batchPool.getMaximumPoolSize();
    }
  }
);
  this.registry.newGauge(this.getClass(),"metaPoolActiveThreads",scope,new RatioGauge(){
    @Override protected double getNumerator(){
      return metaPool.getActiveCount();
    }
    @Override protected double getDenominator(){
      return metaPool.getMaximumPoolSize();
    }
  }
);
  this.metaCacheHits=registry.newCounter(this.getClass(),"metaCacheHits",scope);
  this.metaCacheMisses=registry.newCounter(this.getClass(),"metaCacheMisses",scope);
  this.getTracker=new CallTracker(this.registry,"Get",scope);
  this.scanTracker=new CallTracker(this.registry,"Scan",scope);
  this.appendTracker=new CallTracker(this.registry,"Mutate","Append",scope);
  this.deleteTracker=new CallTracker(this.registry,"Mutate","Delete",scope);
  this.incrementTracker=new CallTracker(this.registry,"Mutate","Increment",scope);
  this.putTracker=new CallTracker(this.registry,"Mutate","Put",scope);
  this.multiTracker=new CallTracker(this.registry,"Multi",scope);
  this.runnerStats=new RunnerStats(this.registry);
  this.reporter=new JmxReporter(this.registry);
  this.reporter.start();
}
