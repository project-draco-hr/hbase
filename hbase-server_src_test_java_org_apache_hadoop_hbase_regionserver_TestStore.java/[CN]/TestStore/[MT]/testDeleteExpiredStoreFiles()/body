{
  int storeFileNum=4;
  int ttl=4;
  IncrementingEnvironmentEdge edge=new IncrementingEnvironmentEdge();
  EnvironmentEdgeManagerTestHelper.injectEdge(edge);
  Configuration conf=HBaseConfiguration.create();
  conf.setBoolean("hbase.store.delete.expired.storefile",true);
  conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY,5);
  HColumnDescriptor hcd=new HColumnDescriptor(family);
  hcd.setTimeToLive(ttl);
  init(name.getMethodName(),conf,hcd);
  long storeTtl=this.store.getScanInfo().getTtl();
  long sleepTime=storeTtl / storeFileNum;
  long timeStamp;
  for (int i=1; i <= storeFileNum; i++) {
    LOG.info("Adding some data for the store file #" + i);
    timeStamp=EnvironmentEdgeManager.currentTime();
    this.store.add(new KeyValue(row,family,qf1,timeStamp,(byte[])null));
    this.store.add(new KeyValue(row,family,qf2,timeStamp,(byte[])null));
    this.store.add(new KeyValue(row,family,qf3,timeStamp,(byte[])null));
    flush(i);
    edge.incrementTime(sleepTime);
  }
  Assert.assertEquals(storeFileNum,this.store.getStorefiles().size());
  for (int i=1; i <= storeFileNum - 1; i++) {
    assertNull(this.store.requestCompaction());
    Collection<StoreFile> sfs=this.store.getStorefiles();
    assertEquals(storeFileNum - i,sfs.size());
    for (    StoreFile sf : sfs) {
      assertTrue(sf.getReader().getMaxTimestamp() >= (edge.currentTime() - storeTtl));
    }
    edge.incrementTime(sleepTime);
  }
  assertNull(this.store.requestCompaction());
  Collection<StoreFile> sfs=this.store.getStorefiles();
  assertEquals(1,sfs.size());
  long ts=sfs.iterator().next().getReader().getMaxTimestamp();
  assertTrue(ts < (edge.currentTime() - storeTtl));
}
