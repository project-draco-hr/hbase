{
  int storeFileNum=4;
  int ttl=4;
  IncrementingEnvironmentEdge edge=new IncrementingEnvironmentEdge();
  EnvironmentEdgeManagerTestHelper.injectEdge(edge);
  Configuration conf=HBaseConfiguration.create();
  conf.setBoolean("hbase.store.delete.expired.storefile",true);
  HColumnDescriptor hcd=new HColumnDescriptor(family);
  hcd.setTimeToLive(ttl);
  init(getName(),conf,hcd);
  long sleepTime=this.store.getScanInfo().getTtl() / storeFileNum;
  long timeStamp;
  for (int i=1; i <= storeFileNum; i++) {
    LOG.info("Adding some data for the store file #" + i);
    timeStamp=EnvironmentEdgeManager.currentTimeMillis();
    this.store.add(new KeyValue(row,family,qf1,timeStamp,(byte[])null));
    this.store.add(new KeyValue(row,family,qf2,timeStamp,(byte[])null));
    this.store.add(new KeyValue(row,family,qf3,timeStamp,(byte[])null));
    flush(i);
    edge.incrementTime(sleepTime);
  }
  assertEquals(storeFileNum,this.store.getStorefiles().size());
  for (int i=1; i <= storeFileNum; i++) {
    CompactionRequest cr=this.store.requestCompaction();
    assertEquals(Math.min(i,2),cr.getFiles().size());
    for (int j=0; j < cr.getFiles().size(); j++) {
      assertTrue(cr.getFiles().get(j).getReader().getMaxTimestamp() < (edge.currentTimeMillis() - this.store.getScanInfo().getTtl()));
    }
    StoreFile compactedFile=this.store.compact(cr).get(0);
    assertEquals(0,compactedFile.getReader().getEntries());
    edge.incrementTime(sleepTime);
  }
}
