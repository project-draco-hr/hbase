{
  if (event == InjectionEvent.STORESCANNER_COMPACTION_RACE) {
    if ((args instanceof Object[]) && (args.length == 1) && (args[0] instanceof Integer)) {
      StoreScannerCompactionRace sscr=StoreScannerCompactionRace.values()[(Integer)args[0]];
switch (sscr) {
case BEFORE_SEEK:
synchronized (beforeSeek) {
          if (!beforeSeek) {
            beforeSeek=true;
            f=Executors.newSingleThreadExecutor().submit(new Callable<Void>(){
              @Override public Void call() throws Exception {
                StoreScanner.enableLazySeekGlobally(false);
                ((HStore)store).compactRecentForTestingAssumingDefaultPolicy(store.getStorefiles().size() / 2);
                StoreScanner.enableLazySeekGlobally(true);
                return null;
              }
            }
);
            Threads.sleep(waitTime);
          }
        }
      break;
case AFTER_SEEK:
synchronized (afterSeek) {
      if (!afterSeek) {
        afterSeek=true;
        this.doneSeeking=true;
      }
    }
  break;
case COMPACT_COMPLETE:
synchronized (compactionComplete) {
  if (!compactionComplete) {
    compactionComplete=true;
    assertTrue(doneSeeking);
  }
}
break;
}
}
}
}
