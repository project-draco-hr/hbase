{
  checkMaster();
  HServerAddress rootRegionLocation=null;
  for (int tries=0; rootRegionLocation == null && tries < numRetries; tries++) {
    int localTimeouts=0;
    while (rootRegionLocation == null && localTimeouts < numTimeouts) {
      rootRegionLocation=master.findRootRegion();
      if (rootRegionLocation == null) {
        try {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Sleeping. Waiting for root region.");
          }
          Thread.sleep(this.clientTimeout);
          if (LOG.isDebugEnabled()) {
            LOG.debug("Wake. Retry finding root region.");
          }
        }
 catch (        InterruptedException iex) {
        }
        localTimeouts++;
      }
    }
    if (rootRegionLocation == null) {
      throw new IOException("Timed out trying to locate root region");
    }
    HRegionInterface rootRegion=getHRegionConnection(rootRegionLocation);
    try {
      rootRegion.getRegionInfo(HGlobals.rootRegionInfo.regionName);
      this.tableServers=new TreeMap<Text,TableInfo>();
      this.tableServers.put(EMPTY_START_ROW,new TableInfo(HGlobals.rootRegionInfo,rootRegionLocation));
      this.tablesToServers.put(ROOT_TABLE_NAME,this.tableServers);
      break;
    }
 catch (    NotServingRegionException e) {
      if (tries == numRetries - 1) {
        break;
      }
      try {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Root region location changed. Sleeping.");
        }
        Thread.sleep(this.clientTimeout);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Wake. Retry finding root region.");
        }
      }
 catch (      InterruptedException iex) {
      }
    }
    rootRegionLocation=null;
  }
  if (rootRegionLocation == null) {
    throw new IOException("unable to locate root region server");
  }
}
