{
  HRegionInterface server=getHRegionConnection(t.serverAddress);
  TreeMap<Text,RegionLocation> servers=new TreeMap<Text,RegionLocation>();
  for (int tries=0; servers.size() == 0 && tries < this.numRetries; tries++) {
    long scannerId=-1L;
    try {
      scannerId=server.openScanner(t.regionInfo.regionName,META_COLUMNS,tableName,System.currentTimeMillis(),null);
      DataInputBuffer inbuf=new DataInputBuffer();
      while (true) {
        HRegionInfo regionInfo=null;
        String serverAddress=null;
        KeyedData[] values=server.next(scannerId);
        if (values.length == 0) {
          if (servers.size() == 0) {
            throw new RegionNotFoundException("table '" + tableName + "' does not exist in "+ t);
          }
          if (LOG.isDebugEnabled()) {
            LOG.debug("Found " + servers.size() + " server(s) for "+ "location: "+ t+ " for tablename "+ tableName);
          }
          break;
        }
        byte[] bytes=null;
        TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
        for (int i=0; i < values.length; i++) {
          results.put(values[i].getKey().getColumn(),values[i].getData());
        }
        regionInfo=new HRegionInfo();
        bytes=results.get(COL_REGIONINFO);
        inbuf.reset(bytes,bytes.length);
        regionInfo.readFields(inbuf);
        if (!regionInfo.tableDesc.getName().equals(tableName)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Found " + tableName);
          }
          break;
        }
        if (regionInfo.offLine) {
          throw new IllegalStateException("table offline: " + tableName);
        }
        bytes=results.get(COL_SERVER);
        if (bytes == null || bytes.length == 0) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("no server address for " + regionInfo.toString());
          }
          servers.clear();
          break;
        }
        serverAddress=new String(bytes,UTF8_ENCODING);
        servers.put(regionInfo.startKey,new RegionLocation(regionInfo,new HServerAddress(serverAddress)));
      }
    }
 catch (    Exception e) {
      if (tries == numRetries - 1) {
        RemoteExceptionHandler.handleRemoteException(e);
      }
    }
 finally {
      if (scannerId != -1L) {
        try {
          server.close(scannerId);
        }
 catch (        Exception ex) {
          LOG.warn(ex);
        }
      }
    }
    if (servers.size() == 0 && tries == this.numRetries - 1) {
      throw new NoServerForRegionException("failed to find server for " + tableName + " after "+ this.numRetries+ " retries");
    }
    if (servers.size() <= 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Sleeping. Table " + tableName + " not currently being served.");
      }
      try {
        Thread.sleep(this.pause);
      }
 catch (      InterruptedException ie) {
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Wake. Retry finding table " + tableName);
      }
    }
  }
  return servers;
}
