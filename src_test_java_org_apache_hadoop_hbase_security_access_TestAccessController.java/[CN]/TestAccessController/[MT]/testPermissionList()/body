{
  final byte[] tableName=Bytes.toBytes("testPermissionList");
  final byte[] family1=Bytes.toBytes("f1");
  final byte[] family2=Bytes.toBytes("f2");
  final byte[] qualifier=Bytes.toBytes("q");
  final byte[] user=Bytes.toBytes("user");
  HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
  if (admin.tableExists(tableName)) {
    admin.disableTable(tableName);
    admin.deleteTable(tableName);
  }
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor(family1));
  htd.addFamily(new HColumnDescriptor(family2));
  htd.setOwnerString(USER_OWNER.getShortName());
  admin.createTable(htd);
  HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
  AccessControllerProtocol protocol=acl.coprocessorProxy(AccessControllerProtocol.class,tableName);
  List<UserPermission> perms=protocol.getUserPermissions(tableName);
  UserPermission up=new UserPermission(user,tableName,family1,qualifier,Permission.Action.READ);
  assertFalse("User should not be granted permission: " + up.toString(),hasFoundUserPermission(up,perms));
  UserPermission upToSet=new UserPermission(user,tableName,family1,qualifier,Permission.Action.READ);
  protocol.grant(upToSet);
  perms=protocol.getUserPermissions(tableName);
  UserPermission upToVerify=new UserPermission(user,tableName,family1,qualifier,Permission.Action.READ);
  assertTrue("User should be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  upToVerify=new UserPermission(user,tableName,family1,qualifier,Permission.Action.WRITE);
  assertFalse("User should not be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  upToSet=new UserPermission(user,tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
  protocol.grant(upToSet);
  perms=protocol.getUserPermissions(tableName);
  upToVerify=new UserPermission(user,tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
  assertTrue("User should be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  protocol.revoke(upToSet);
  perms=protocol.getUserPermissions(tableName);
  assertFalse("User should not be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  admin.disableTable(tableName);
  admin.deleteTable(tableName);
}
