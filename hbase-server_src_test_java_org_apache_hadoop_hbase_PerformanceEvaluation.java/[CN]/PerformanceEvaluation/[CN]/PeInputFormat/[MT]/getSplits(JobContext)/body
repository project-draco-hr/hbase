{
  List<InputSplit> splitList=new ArrayList<InputSplit>();
  for (  FileStatus file : listStatus(job)) {
    if (file.isDir()) {
      continue;
    }
    Path path=file.getPath();
    FileSystem fs=path.getFileSystem(job.getConfiguration());
    FSDataInputStream fileIn=fs.open(path);
    LineReader in=new LineReader(fileIn,job.getConfiguration());
    int lineLen=0;
    while (true) {
      Text lineText=new Text();
      lineLen=in.readLine(lineText);
      if (lineLen <= 0) {
        break;
      }
      Matcher m=LINE_PATTERN.matcher(lineText.toString());
      if ((m != null) && m.matches()) {
        TableName tableName=TableName.valueOf(m.group(1));
        int startRow=Integer.parseInt(m.group(2));
        int rows=Integer.parseInt(m.group(3));
        int totalRows=Integer.parseInt(m.group(4));
        float sampleRate=Float.parseFloat(m.group(5));
        int clients=Integer.parseInt(m.group(6));
        boolean flushCommits=Boolean.parseBoolean(m.group(7));
        boolean writeToWAL=Boolean.parseBoolean(m.group(8));
        boolean useTags=Boolean.parseBoolean(m.group(9));
        int noOfTags=Integer.parseInt(m.group(10));
        boolean reportLatency=Boolean.parseBoolean(m.group(11));
        int multiGet=Integer.parseInt(m.group(12));
        LOG.debug("tableName=" + tableName + " split["+ splitList.size()+ "] "+ " startRow="+ startRow+ " rows="+ rows+ " totalRows="+ totalRows+ " sampleRate="+ sampleRate+ " clients="+ clients+ " flushCommits="+ flushCommits+ " writeToWAL="+ writeToWAL+ " useTags="+ useTags+ " noOfTags="+ noOfTags+ " reportLatency="+ reportLatency+ " multiGet="+ multiGet);
        PeInputSplit newSplit=new PeInputSplit(tableName,startRow,rows,totalRows,sampleRate,clients,flushCommits,writeToWAL,useTags,noOfTags,reportLatency,multiGet);
        splitList.add(newSplit);
      }
    }
    in.close();
  }
  LOG.info("Total # of splits: " + splitList.size());
  return splitList;
}
