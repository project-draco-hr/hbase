{
  TestOptions opts=new TestOptions();
  String cmd=null;
  while ((cmd=args.poll()) != null) {
    if (cmd.equals("-h") || cmd.startsWith("--h")) {
      args.add(cmd);
      break;
    }
    final String nmr="--nomapred";
    if (cmd.startsWith(nmr)) {
      opts.nomapred=true;
      continue;
    }
    final String rows="--rows=";
    if (cmd.startsWith(rows)) {
      opts.perClientRunRows=Integer.parseInt(cmd.substring(rows.length()));
      continue;
    }
    final String cycles="--cycles=";
    if (cmd.startsWith(cycles)) {
      opts.cycles=Integer.parseInt(cmd.substring(cycles.length()));
      continue;
    }
    final String sampleRate="--sampleRate=";
    if (cmd.startsWith(sampleRate)) {
      opts.sampleRate=Float.parseFloat(cmd.substring(sampleRate.length()));
      continue;
    }
    final String table="--table=";
    if (cmd.startsWith(table)) {
      opts.tableName=cmd.substring(table.length());
      continue;
    }
    final String startRow="--startRow=";
    if (cmd.startsWith(startRow)) {
      opts.startRow=Integer.parseInt(cmd.substring(startRow.length()));
      continue;
    }
    final String compress="--compress=";
    if (cmd.startsWith(compress)) {
      opts.compression=Compression.Algorithm.valueOf(cmd.substring(compress.length()));
      continue;
    }
    final String traceRate="--traceRate=";
    if (cmd.startsWith(traceRate)) {
      opts.traceRate=Double.parseDouble(cmd.substring(traceRate.length()));
      continue;
    }
    final String blockEncoding="--blockEncoding=";
    if (cmd.startsWith(blockEncoding)) {
      opts.blockEncoding=DataBlockEncoding.valueOf(cmd.substring(blockEncoding.length()));
      continue;
    }
    final String flushCommits="--flushCommits=";
    if (cmd.startsWith(flushCommits)) {
      opts.flushCommits=Boolean.parseBoolean(cmd.substring(flushCommits.length()));
      continue;
    }
    final String writeToWAL="--writeToWAL=";
    if (cmd.startsWith(writeToWAL)) {
      opts.writeToWAL=Boolean.parseBoolean(cmd.substring(writeToWAL.length()));
      continue;
    }
    final String presplit="--presplit=";
    if (cmd.startsWith(presplit)) {
      opts.presplitRegions=Integer.parseInt(cmd.substring(presplit.length()));
      continue;
    }
    final String inMemory="--inmemory=";
    if (cmd.startsWith(inMemory)) {
      opts.inMemoryCF=Boolean.parseBoolean(cmd.substring(inMemory.length()));
      continue;
    }
    final String autoFlush="--autoFlush=";
    if (cmd.startsWith(autoFlush)) {
      opts.autoFlush=Boolean.parseBoolean(cmd.substring(autoFlush.length()));
      continue;
    }
    final String onceCon="--oneCon=";
    if (cmd.startsWith(onceCon)) {
      opts.oneCon=Boolean.parseBoolean(cmd.substring(onceCon.length()));
      continue;
    }
    final String latency="--latency";
    if (cmd.startsWith(latency)) {
      opts.reportLatency=true;
      continue;
    }
    final String multiGet="--multiGet=";
    if (cmd.startsWith(multiGet)) {
      opts.multiGet=Integer.parseInt(cmd.substring(multiGet.length()));
      continue;
    }
    final String useTags="--usetags=";
    if (cmd.startsWith(useTags)) {
      opts.useTags=Boolean.parseBoolean(cmd.substring(useTags.length()));
      continue;
    }
    final String noOfTags="--numoftags=";
    if (cmd.startsWith(noOfTags)) {
      opts.noOfTags=Integer.parseInt(cmd.substring(noOfTags.length()));
      continue;
    }
    final String replicas="--replicas=";
    if (cmd.startsWith(replicas)) {
      opts.replicas=Integer.parseInt(cmd.substring(replicas.length()));
      continue;
    }
    final String filterOutAll="--filterAll";
    if (cmd.startsWith(filterOutAll)) {
      opts.filterAll=true;
      continue;
    }
    final String size="--size=";
    if (cmd.startsWith(size)) {
      opts.size=Float.parseFloat(cmd.substring(size.length()));
      if (opts.size <= 1.0f)       throw new IllegalStateException("Size must be > 1; i.e. 1GB");
      continue;
    }
    final String splitPolicy="--splitPolicy=";
    if (cmd.startsWith(splitPolicy)) {
      opts.splitPolicy=cmd.substring(splitPolicy.length());
      continue;
    }
    final String randomSleep="--randomSleep=";
    if (cmd.startsWith(randomSleep)) {
      opts.randomSleep=Integer.parseInt(cmd.substring(randomSleep.length()));
      continue;
    }
    final String measureAfter="--measureAfter=";
    if (cmd.startsWith(measureAfter)) {
      opts.measureAfter=Integer.parseInt(cmd.substring(measureAfter.length()));
      continue;
    }
    final String bloomFilter="--bloomFilter=";
    if (cmd.startsWith(bloomFilter)) {
      opts.bloomType=BloomType.valueOf(cmd.substring(bloomFilter.length()));
      continue;
    }
    final String valueSize="--valueSize=";
    if (cmd.startsWith(valueSize)) {
      opts.valueSize=Integer.parseInt(cmd.substring(valueSize.length()));
      continue;
    }
    final String valueRandom="--valueRandom";
    if (cmd.startsWith(valueRandom)) {
      opts.valueRandom=true;
      if (opts.valueZipf) {
        throw new IllegalStateException("Either valueZipf or valueRandom but not both");
      }
      continue;
    }
    final String valueZipf="--valueZipf";
    if (cmd.startsWith(valueZipf)) {
      opts.valueZipf=true;
      if (opts.valueRandom) {
        throw new IllegalStateException("Either valueZipf or valueRandom but not both");
      }
      continue;
    }
    final String period="--period=";
    if (cmd.startsWith(period)) {
      opts.period=Integer.parseInt(cmd.substring(period.length()));
      continue;
    }
    final String addColumns="--addColumns=";
    if (cmd.startsWith(addColumns)) {
      opts.addColumns=Boolean.parseBoolean(cmd.substring(addColumns.length()));
      continue;
    }
    if (isCommandClass(cmd)) {
      opts.cmdName=cmd;
      opts.numClientThreads=Integer.parseInt(args.remove());
      if (opts.size != DEFAULT_OPTS.size && opts.perClientRunRows != DEFAULT_OPTS.perClientRunRows) {
        throw new IllegalArgumentException(rows + " and " + size+ " are mutually exclusive options");
      }
      opts=calculateRowsAndSize(opts);
      break;
    }
    System.err.println("Error: Wrong option or command: " + cmd);
    args.add(cmd);
    break;
  }
  return opts;
}
