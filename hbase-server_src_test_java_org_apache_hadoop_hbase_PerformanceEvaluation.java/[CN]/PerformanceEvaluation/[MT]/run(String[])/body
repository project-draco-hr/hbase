{
  int errCode=-1;
  if (args.length < 1) {
    printUsage();
    return errCode;
  }
  try {
    TestOptions opts=new TestOptions();
    for (int i=0; i < args.length; i++) {
      String cmd=args[i];
      if (cmd.equals("-h") || cmd.startsWith("--h")) {
        printUsage();
        errCode=0;
        break;
      }
      final String nmr="--nomapred";
      if (cmd.startsWith(nmr)) {
        opts.nomapred=true;
        continue;
      }
      final String rows="--rows=";
      if (cmd.startsWith(rows)) {
        opts.perClientRunRows=Integer.parseInt(cmd.substring(rows.length()));
        continue;
      }
      final String sampleRate="--sampleRate=";
      if (cmd.startsWith(sampleRate)) {
        opts.sampleRate=Float.parseFloat(cmd.substring(sampleRate.length()));
        continue;
      }
      final String table="--table=";
      if (cmd.startsWith(table)) {
        opts.tableName=cmd.substring(table.length());
        continue;
      }
      final String compress="--compress=";
      if (cmd.startsWith(compress)) {
        opts.compression=Compression.Algorithm.valueOf(cmd.substring(compress.length()));
        continue;
      }
      final String blockEncoding="--blockEncoding=";
      if (cmd.startsWith(blockEncoding)) {
        opts.blockEncoding=DataBlockEncoding.valueOf(cmd.substring(blockEncoding.length()));
        continue;
      }
      final String flushCommits="--flushCommits=";
      if (cmd.startsWith(flushCommits)) {
        opts.flushCommits=Boolean.parseBoolean(cmd.substring(flushCommits.length()));
        continue;
      }
      final String writeToWAL="--writeToWAL=";
      if (cmd.startsWith(writeToWAL)) {
        opts.writeToWAL=Boolean.parseBoolean(cmd.substring(writeToWAL.length()));
        continue;
      }
      final String autoFlush="--autoFlush=";
      if (cmd.startsWith(autoFlush)) {
        opts.autoFlush=Boolean.parseBoolean(cmd.substring(autoFlush.length()));
        continue;
      }
      final String presplit="--presplit=";
      if (cmd.startsWith(presplit)) {
        opts.presplitRegions=Integer.parseInt(cmd.substring(presplit.length()));
        continue;
      }
      final String inMemory="--inmemory=";
      if (cmd.startsWith(inMemory)) {
        opts.inMemoryCF=Boolean.parseBoolean(cmd.substring(inMemory.length()));
        continue;
      }
      final String latency="--latency";
      if (cmd.startsWith(latency)) {
        opts.reportLatency=true;
        continue;
      }
      final String multiGet="--multiGet=";
      if (cmd.startsWith(multiGet)) {
        opts.multiGet=Integer.parseInt(cmd.substring(multiGet.length()));
        continue;
      }
      final String useTags="--usetags=";
      if (cmd.startsWith(useTags)) {
        opts.useTags=Boolean.parseBoolean(cmd.substring(useTags.length()));
        continue;
      }
      final String noOfTags="--nooftags=";
      if (cmd.startsWith(noOfTags)) {
        opts.noOfTags=Integer.parseInt(cmd.substring(noOfTags.length()));
        continue;
      }
      final String filterOutAll="--filterAll";
      if (cmd.startsWith(filterOutAll)) {
        opts.filterAll=true;
        continue;
      }
      final String modulo="--modulo=";
      if (cmd.startsWith(modulo)) {
        opts.modulo=Integer.parseInt(cmd.substring(modulo.length()));
        continue;
      }
      final String size="--size=";
      if (cmd.startsWith(size)) {
        opts.size=Float.parseFloat(cmd.substring(size.length()));
        continue;
      }
      Class<? extends Test> cmdClass=determineCommandClass(cmd);
      if (cmdClass != null) {
        opts.numClientThreads=getNumClients(i + 1,args);
        if (opts.size != DEFAULT_OPTS.size && opts.perClientRunRows != DEFAULT_OPTS.perClientRunRows) {
          throw new IllegalArgumentException(rows + " and " + size+ " are mutually exclusive arguments.");
        }
        if (opts.size != DEFAULT_OPTS.size) {
          opts.totalRows=(int)opts.size * ROWS_PER_GB;
          opts.perClientRunRows=opts.totalRows / opts.numClientThreads;
        }
 else         if (opts.perClientRunRows != DEFAULT_OPTS.perClientRunRows) {
          opts.totalRows=opts.perClientRunRows * opts.numClientThreads;
          opts.size=opts.totalRows / ROWS_PER_GB;
        }
        if (opts.modulo == DEFAULT_OPTS.modulo)         opts.modulo=opts.totalRows;
        runTest(cmdClass,opts);
        errCode=0;
        break;
      }
      printUsage();
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return errCode;
}
