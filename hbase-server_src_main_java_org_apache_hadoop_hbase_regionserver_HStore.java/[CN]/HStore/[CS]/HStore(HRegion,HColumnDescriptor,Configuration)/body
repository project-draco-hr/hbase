{
  this.fs=region.getRegionFileSystem();
  fs.createStoreDir(family.getNameAsString());
  this.region=region;
  this.family=family;
  this.conf=new CompoundConfiguration().add(confParam).addStringMap(region.getTableDesc().getConfiguration()).addStringMap(family.getConfiguration()).addBytesMap(family.getValues());
  this.blocksize=family.getBlocksize();
  this.dataBlockEncoder=new HFileDataBlockEncoderImpl(family.getDataBlockEncoding());
  this.comparator=region.getCellCompartor();
  long timeToPurgeDeletes=Math.max(conf.getLong("hbase.hstore.time.to.purge.deletes",0),0);
  LOG.trace("Time to purge deletes set to " + timeToPurgeDeletes + "ms in store "+ this);
  long ttl=determineTTLFromFamily(family);
  scanInfo=new ScanInfo(conf,family,ttl,timeToPurgeDeletes,this.comparator);
  String className=conf.get(MEMSTORE_CLASS_NAME,DefaultMemStore.class.getName());
  this.memstore=ReflectionUtils.instantiateWithCustomCtor(className,new Class[]{Configuration.class,CellComparator.class},new Object[]{conf,this.comparator});
  this.offPeakHours=OffPeakHours.getInstance(conf);
  createCacheConf(family);
  this.verifyBulkLoads=conf.getBoolean("hbase.hstore.bulkload.verify",false);
  this.blockingFileCount=conf.getInt(BLOCKING_STOREFILES_KEY,DEFAULT_BLOCKING_STOREFILE_COUNT);
  this.compactionCheckMultiplier=conf.getInt(COMPACTCHECKER_INTERVAL_MULTIPLIER_KEY,DEFAULT_COMPACTCHECKER_INTERVAL_MULTIPLIER);
  if (this.compactionCheckMultiplier <= 0) {
    LOG.error("Compaction check period multiplier must be positive, setting default: " + DEFAULT_COMPACTCHECKER_INTERVAL_MULTIPLIER);
    this.compactionCheckMultiplier=DEFAULT_COMPACTCHECKER_INTERVAL_MULTIPLIER;
  }
  if (HStore.closeCheckInterval == 0) {
    HStore.closeCheckInterval=conf.getInt("hbase.hstore.close.check.interval",10 * 1000 * 1000);
  }
  this.storeEngine=createStoreEngine(this,this.conf,this.comparator);
  this.storeEngine.getStoreFileManager().loadFiles(loadStoreFiles());
  this.checksumType=getChecksumType(conf);
  this.bytesPerChecksum=getBytesPerChecksum(conf);
  flushRetriesNumber=conf.getInt("hbase.hstore.flush.retries.number",DEFAULT_FLUSH_RETRIES_NUMBER);
  pauseTime=conf.getInt(HConstants.HBASE_SERVER_PAUSE,HConstants.DEFAULT_HBASE_SERVER_PAUSE);
  if (flushRetriesNumber <= 0) {
    throw new IllegalArgumentException("hbase.hstore.flush.retries.number must be > 0, not " + flushRetriesNumber);
  }
  compactionCleanerthreadPoolExecutor=getThreadPoolExecutor(conf.getInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MAX_KEY,10));
  completionService=new ExecutorCompletionService<StoreFile>(compactionCleanerthreadPoolExecutor);
  cryptoContext=EncryptionUtil.createEncryptionContext(conf,family);
}
