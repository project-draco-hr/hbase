{
  if (cr == null || cr.getFiles().isEmpty())   return null;
  Preconditions.checkArgument(cr.getStore().toString().equals(this.toString()));
  List<StoreFile> filesToCompact=cr.getFiles();
synchronized (filesCompacting) {
    Preconditions.checkArgument(filesCompacting.containsAll(filesToCompact));
  }
  LOG.info("Starting compaction of " + filesToCompact.size() + " file(s) in "+ this+ " of "+ this.region.getRegionInfo().getRegionNameAsString()+ " into tmpdir="+ region.getTmpDir()+ ", totalSize="+ StringUtils.humanReadableInt(cr.getSize()));
  List<StoreFile> sfs=new ArrayList<StoreFile>();
  long compactionStartTime=EnvironmentEdgeManager.currentTimeMillis();
  try {
    List<Path> newFiles=this.compactor.compact(cr);
    if (this.conf.getBoolean("hbase.hstore.compaction.complete",true)) {
      for (      Path newFile : newFiles) {
        StoreFile sf=completeCompaction(filesToCompact,newFile);
        if (region.getCoprocessorHost() != null) {
          region.getCoprocessorHost().postCompact(this,sf,cr);
        }
        sfs.add(sf);
      }
    }
 else {
      for (      Path newFile : newFiles) {
        StoreFile sf=new StoreFile(this.fs,newFile,this.conf,this.cacheConf,this.family.getBloomFilterType(),this.dataBlockEncoder);
        sf.createReader();
        sfs.add(sf);
      }
    }
  }
  finally {
synchronized (filesCompacting) {
      filesCompacting.removeAll(filesToCompact);
    }
  }
  long now=EnvironmentEdgeManager.currentTimeMillis();
  StringBuilder message=new StringBuilder("Completed" + (cr.isMajor() ? " major " : " ") + "compaction of "+ filesToCompact.size()+ " file(s) in "+ this+ " of "+ this.region.getRegionInfo().getRegionNameAsString()+ " into ");
  if (sfs.isEmpty()) {
    message.append("none, ");
  }
 else {
    for (    StoreFile sf : sfs) {
      message.append(sf.getPath().getName());
      message.append("(size=");
      message.append(StringUtils.humanReadableInt(sf.getReader().length()));
      message.append("), ");
    }
  }
  message.append("total size for store is ").append(StringUtils.humanReadableInt(storeSize)).append(". This selection was in queue for ").append(StringUtils.formatTimeDiff(compactionStartTime,cr.getSelectionTime())).append(", and took ").append(StringUtils.formatTimeDiff(now,compactionStartTime)).append(" to execute.");
  LOG.info(message.toString());
  return sfs;
}
