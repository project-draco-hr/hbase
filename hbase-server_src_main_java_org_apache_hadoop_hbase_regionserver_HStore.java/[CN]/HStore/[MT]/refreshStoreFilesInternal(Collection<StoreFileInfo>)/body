{
  StoreFileManager sfm=storeEngine.getStoreFileManager();
  Collection<StoreFile> currentFiles=sfm.getStorefiles();
  if (currentFiles == null)   currentFiles=new ArrayList<StoreFile>(0);
  if (newFiles == null)   newFiles=new ArrayList<StoreFileInfo>(0);
  HashMap<StoreFileInfo,StoreFile> currentFilesSet=new HashMap<StoreFileInfo,StoreFile>(currentFiles.size());
  for (  StoreFile sf : currentFiles) {
    currentFilesSet.put(sf.getFileInfo(),sf);
  }
  HashSet<StoreFileInfo> newFilesSet=new HashSet<StoreFileInfo>(newFiles);
  Set<StoreFileInfo> toBeAddedFiles=Sets.difference(newFilesSet,currentFilesSet.keySet());
  Set<StoreFileInfo> toBeRemovedFiles=Sets.difference(currentFilesSet.keySet(),newFilesSet);
  if (toBeAddedFiles.isEmpty() && toBeRemovedFiles.isEmpty()) {
    return;
  }
  LOG.info("Refreshing store files for region " + this.getRegionInfo().getRegionNameAsString() + " files to add: "+ toBeAddedFiles+ " files to remove: "+ toBeRemovedFiles);
  Set<StoreFile> toBeRemovedStoreFiles=new HashSet<StoreFile>(toBeRemovedFiles.size());
  for (  StoreFileInfo sfi : toBeRemovedFiles) {
    toBeRemovedStoreFiles.add(currentFilesSet.get(sfi));
  }
  List<StoreFile> openedFiles=openStoreFiles(toBeAddedFiles);
  replaceStoreFiles(toBeRemovedStoreFiles,openedFiles);
  if (!toBeAddedFiles.isEmpty()) {
    region.getMVCC().advanceTo(this.getMaxSequenceId());
  }
  completeCompaction(toBeRemovedStoreFiles);
}
