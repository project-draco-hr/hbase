{
  LOG.debug("Completing compaction from the WAL marker");
  List<String> compactionInputs=compaction.getCompactionInputList();
  List<String> compactionOutputs=Lists.newArrayList(compaction.getCompactionOutputList());
  String familyName=this.getColumnFamilyName();
  List<String> inputFiles=new ArrayList<String>(compactionInputs.size());
  for (  String compactionInput : compactionInputs) {
    Path inputPath=fs.getStoreFilePath(familyName,compactionInput);
    inputFiles.add(inputPath.getName());
  }
  List<StoreFile> inputStoreFiles=new ArrayList<StoreFile>(compactionInputs.size());
  for (  StoreFile sf : this.getStorefiles()) {
    if (inputFiles.contains(sf.getPath().getName())) {
      inputStoreFiles.add(sf);
    }
  }
  List<StoreFile> outputStoreFiles=new ArrayList<StoreFile>(compactionOutputs.size());
  if (pickCompactionFiles) {
    for (    StoreFile sf : this.getStorefiles()) {
      compactionOutputs.remove(sf.getPath().getName());
    }
    for (    String compactionOutput : compactionOutputs) {
      StoreFileInfo storeFileInfo=fs.getStoreFileInfo(getColumnFamilyName(),compactionOutput);
      StoreFile storeFile=createStoreFileAndReader(storeFileInfo);
      outputStoreFiles.add(storeFile);
    }
  }
  if (!inputStoreFiles.isEmpty() || !outputStoreFiles.isEmpty()) {
    LOG.info("Replaying compaction marker, replacing input files: " + inputStoreFiles + " with output files : "+ outputStoreFiles);
    this.replaceStoreFiles(inputStoreFiles,outputStoreFiles);
    this.completeCompaction(inputStoreFiles,removeFiles);
  }
}
