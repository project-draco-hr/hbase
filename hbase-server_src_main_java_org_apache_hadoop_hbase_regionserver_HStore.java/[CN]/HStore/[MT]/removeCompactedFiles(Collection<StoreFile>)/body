{
  if (compactedfiles != null && !compactedfiles.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Removing the compacted store files " + compactedfiles);
    }
    for (    final StoreFile file : compactedfiles) {
      completionService.submit(new Callable<StoreFile>(){
        @Override public StoreFile call() throws IOException {
synchronized (file) {
            try {
              StoreFile.Reader r=file.getReader();
              if (r == null) {
                if (LOG.isDebugEnabled()) {
                  LOG.debug("The file " + file + " was closed but still not archived.");
                }
                return file;
              }
              if (r != null && r.isCompactedAway() && !r.isReferencedInReads()) {
                if (LOG.isTraceEnabled()) {
                  LOG.trace("Closing and archiving the file " + file.getPath());
                }
                r.close(true);
                return file;
              }
            }
 catch (            Exception e) {
              LOG.error("Exception while trying to close the compacted store file " + file.getPath().getName());
            }
          }
          return null;
        }
      }
);
    }
    final List<StoreFile> filesToRemove=new ArrayList<StoreFile>(compactedfiles.size());
    try {
      for (      final StoreFile file : compactedfiles) {
        Future<StoreFile> future=completionService.take();
        StoreFile closedFile=future.get();
        if (closedFile != null) {
          filesToRemove.add(closedFile);
        }
      }
    }
 catch (    InterruptedException ie) {
      LOG.error("Interrupted exception while closing the compacted files",ie);
    }
catch (    Exception e) {
      LOG.error("Exception occured while closing the compacted files",e);
    }
    if (isPrimaryReplicaStore()) {
      archiveAndRemoveCompactedFiles(filesToRemove);
    }
  }
}
