{
  long now=EnvironmentEdgeManager.currentTimeMillis();
  StringBuilder message=new StringBuilder("Completed" + (cr.isMajor() ? " major " : " ") + "compaction of "+ cr.getFiles().size()+ " file(s) in "+ this+ " of "+ this.getRegionInfo().getRegionNameAsString()+ " into ");
  if (sfs.isEmpty()) {
    message.append("none, ");
  }
 else {
    for (    StoreFile sf : sfs) {
      message.append(sf.getPath().getName());
      message.append("(size=");
      message.append(StringUtils.humanReadableInt(sf.getReader().length()));
      message.append("), ");
    }
  }
  message.append("total size for store is ").append(StringUtils.humanReadableInt(storeSize)).append(". This selection was in queue for ").append(StringUtils.formatTimeDiff(compactionStartTime,cr.getSelectionTime())).append(", and took ").append(StringUtils.formatTimeDiff(now,compactionStartTime)).append(" to execute.");
  LOG.info(message.toString());
  if (LOG.isTraceEnabled()) {
    int fileCount=storeEngine.getStoreFileManager().getStorefileCount();
    long resultSize=0;
    for (    StoreFile sf : sfs) {
      resultSize+=sf.getReader().length();
    }
    String traceMessage="COMPACTION start,end,size out,files in,files out,store size," + "store files [" + compactionStartTime + ","+ now+ ","+ resultSize+ ","+ cr.getFiles().size()+ ","+ sfs.size()+ ","+ storeSize+ ","+ fileCount+ "]";
    LOG.trace(traceMessage);
  }
}
