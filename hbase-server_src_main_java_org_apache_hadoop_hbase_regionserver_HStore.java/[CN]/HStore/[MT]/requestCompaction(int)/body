{
  if (!this.region.areWritesEnabled()) {
    return null;
  }
  CompactionRequest ret=null;
  this.lock.readLock().lock();
  try {
synchronized (filesCompacting) {
      List<StoreFile> candidates=Lists.newArrayList(storefiles);
      if (!filesCompacting.isEmpty()) {
        StoreFile last=filesCompacting.get(filesCompacting.size() - 1);
        int idx=candidates.indexOf(last);
        Preconditions.checkArgument(idx != -1);
        candidates.subList(0,idx + 1).clear();
      }
      boolean override=false;
      if (region.getCoprocessorHost() != null) {
        override=region.getCoprocessorHost().preCompactSelection(this,candidates);
      }
      CompactSelection filesToCompact;
      if (override) {
        filesToCompact=new CompactSelection(conf,candidates);
      }
 else {
        filesToCompact=compactSelection(candidates,priority);
      }
      if (region.getCoprocessorHost() != null) {
        region.getCoprocessorHost().postCompactSelection(this,ImmutableList.copyOf(filesToCompact.getFilesToCompact()));
      }
      if (filesToCompact.getFilesToCompact().isEmpty()) {
        return null;
      }
      if (!Collections.disjoint(filesCompacting,filesToCompact.getFilesToCompact())) {
        Preconditions.checkArgument(false,"%s overlaps with %s",filesToCompact,filesCompacting);
      }
      filesCompacting.addAll(filesToCompact.getFilesToCompact());
      Collections.sort(filesCompacting,StoreFile.Comparators.SEQ_ID);
      boolean isMajor=(filesToCompact.getFilesToCompact().size() == this.storefiles.size());
      if (isMajor) {
        this.forceMajor=false;
      }
      int pri=getCompactPriority(priority);
      ret=new CompactionRequest(region,this,filesToCompact,isMajor,pri);
    }
  }
  finally {
    this.lock.readLock().unlock();
  }
  if (ret != null) {
    CompactionRequest.preRequest(ret);
  }
  return ret;
}
