{
  List<StoreFile> filesToCompact;
  boolean isMajor;
  this.lock.readLock().lock();
  try {
synchronized (filesCompacting) {
      filesToCompact=Lists.newArrayList(storeEngine.getStoreFileManager().getStorefiles());
      if (!filesCompacting.isEmpty()) {
        StoreFile last=filesCompacting.get(filesCompacting.size() - 1);
        int idx=filesToCompact.indexOf(last);
        Preconditions.checkArgument(idx != -1);
        filesToCompact.subList(0,idx + 1).clear();
      }
      int count=filesToCompact.size();
      if (N > count) {
        throw new RuntimeException("Not enough files");
      }
      filesToCompact=filesToCompact.subList(count - N,count);
      isMajor=(filesToCompact.size() == storeEngine.getStoreFileManager().getStorefileCount());
      filesCompacting.addAll(filesToCompact);
      Collections.sort(filesCompacting,StoreFile.Comparators.SEQ_ID);
    }
  }
  finally {
    this.lock.readLock().unlock();
  }
  try {
    List<Path> newFiles=((DefaultCompactor)this.storeEngine.getCompactor()).compactForTesting(filesToCompact,isMajor);
    for (    Path newFile : newFiles) {
      StoreFile sf=moveFileIntoPlace(newFile);
      if (this.getCoprocessorHost() != null) {
        this.getCoprocessorHost().postCompact(this,sf,null);
      }
      replaceStoreFiles(filesToCompact,Lists.newArrayList(sf));
      completeCompaction(filesToCompact);
    }
  }
  finally {
synchronized (filesCompacting) {
      filesCompacting.removeAll(filesToCompact);
    }
  }
}
