{
  HFile.Reader reader=null;
  try {
    LOG.info("Validating hfile at " + srcPath + " for inclusion in "+ "store "+ this+ " region "+ this.getRegionInfo().getRegionNameAsString());
    reader=HFile.createReader(srcPath.getFileSystem(conf),srcPath,cacheConf,conf);
    reader.loadFileInfo();
    byte[] firstKey=reader.getFirstRowKey();
    Preconditions.checkState(firstKey != null,"First key can not be null");
    byte[] lk=reader.getLastKey();
    Preconditions.checkState(lk != null,"Last key can not be null");
    byte[] lastKey=KeyValue.createKeyValueFromKey(lk).getRow();
    LOG.debug("HFile bounds: first=" + Bytes.toStringBinary(firstKey) + " last="+ Bytes.toStringBinary(lastKey));
    LOG.debug("Region bounds: first=" + Bytes.toStringBinary(getRegionInfo().getStartKey()) + " last="+ Bytes.toStringBinary(getRegionInfo().getEndKey()));
    if (!this.getRegionInfo().containsRange(firstKey,lastKey)) {
      throw new WrongRegionException("Bulk load file " + srcPath.toString() + " does not fit inside region "+ this.getRegionInfo().getRegionNameAsString());
    }
    if (verifyBulkLoads) {
      long verificationStartTime=EnvironmentEdgeManager.currentTime();
      LOG.info("Full verification started for bulk load hfile: " + srcPath.toString());
      Cell prevCell=null;
      HFileScanner scanner=reader.getScanner(false,false,false);
      scanner.seekTo();
      do {
        Cell cell=scanner.getKeyValue();
        if (prevCell != null) {
          if (CellComparator.compareRows(prevCell,cell) > 0) {
            throw new InvalidHFileException("Previous row is greater than" + " current row: path=" + srcPath + " previous="+ CellUtil.getCellKeyAsString(prevCell)+ " current="+ CellUtil.getCellKeyAsString(cell));
          }
          if (CellComparator.compareFamilies(prevCell,cell) != 0) {
            throw new InvalidHFileException("Previous key had different" + " family compared to current key: path=" + srcPath + " previous="+ Bytes.toStringBinary(prevCell.getFamilyArray(),prevCell.getFamilyOffset(),prevCell.getFamilyLength())+ " current="+ Bytes.toStringBinary(cell.getFamilyArray(),cell.getFamilyOffset(),cell.getFamilyLength()));
          }
        }
        prevCell=cell;
      }
 while (scanner.next());
      LOG.info("Full verification complete for bulk load hfile: " + srcPath.toString() + " took "+ (EnvironmentEdgeManager.currentTime() - verificationStartTime)+ " ms");
    }
  }
  finally {
    if (reader != null)     reader.close();
  }
}
