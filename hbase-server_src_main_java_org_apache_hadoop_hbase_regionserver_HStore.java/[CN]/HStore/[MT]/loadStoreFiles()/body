{
  Collection<StoreFileInfo> files=fs.getStoreFiles(getColumnFamilyName());
  if (files == null || files.size() == 0) {
    return new ArrayList<StoreFile>();
  }
  ThreadPoolExecutor storeFileOpenerThreadPool=this.region.getStoreFileOpenAndCloseThreadPool("StoreFileOpenerThread-" + this.getColumnFamilyName());
  CompletionService<StoreFile> completionService=new ExecutorCompletionService<StoreFile>(storeFileOpenerThreadPool);
  int totalValidStoreFile=0;
  final FileSystem fs=this.getFileSystem();
  for (  final StoreFileInfo storeFileInfo : files) {
    completionService.submit(new Callable<StoreFile>(){
      public StoreFile call() throws IOException {
        StoreFile storeFile=new StoreFile(fs,storeFileInfo.getPath(),conf,cacheConf,family.getBloomFilterType(),dataBlockEncoder);
        storeFile.createReader();
        return storeFile;
      }
    }
);
    totalValidStoreFile++;
  }
  ArrayList<StoreFile> results=new ArrayList<StoreFile>(files.size());
  IOException ioe=null;
  try {
    for (int i=0; i < totalValidStoreFile; i++) {
      try {
        Future<StoreFile> future=completionService.take();
        StoreFile storeFile=future.get();
        long length=storeFile.getReader().length();
        this.storeSize+=length;
        this.totalUncompressedBytes+=storeFile.getReader().getTotalUncompressedBytes();
        if (LOG.isDebugEnabled()) {
          LOG.debug("loaded " + storeFile.toStringDetailed());
        }
        results.add(storeFile);
      }
 catch (      InterruptedException e) {
        if (ioe == null)         ioe=new InterruptedIOException(e.getMessage());
      }
catch (      ExecutionException e) {
        if (ioe == null)         ioe=new IOException(e.getCause());
      }
    }
  }
  finally {
    storeFileOpenerThreadPool.shutdownNow();
  }
  if (ioe != null) {
    try {
      for (      StoreFile file : results) {
        if (file != null)         file.closeReader(true);
      }
    }
 catch (    IOException e) {
    }
    throw ioe;
  }
  return results;
}
