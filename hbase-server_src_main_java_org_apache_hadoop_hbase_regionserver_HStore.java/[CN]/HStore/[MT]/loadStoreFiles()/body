{
  ArrayList<StoreFile> results=new ArrayList<StoreFile>();
  FileStatus files[]=getStoreFiles();
  if (files == null || files.length == 0) {
    return results;
  }
  ThreadPoolExecutor storeFileOpenerThreadPool=this.region.getStoreFileOpenAndCloseThreadPool("StoreFileOpenerThread-" + this.family.getNameAsString());
  CompletionService<StoreFile> completionService=new ExecutorCompletionService<StoreFile>(storeFileOpenerThreadPool);
  int totalValidStoreFile=0;
  for (int i=0; i < files.length; i++) {
    if (files[i].isDir()) {
      continue;
    }
    final Path p=files[i].getPath();
    if (!HFileLink.isHFileLink(p) && this.fs.getFileStatus(p).getLen() <= 0) {
      LOG.warn("Skipping " + p + " because its empty. HBASE-646 DATA LOSS?");
      continue;
    }
    completionService.submit(new Callable<StoreFile>(){
      public StoreFile call() throws IOException {
        StoreFile storeFile=new StoreFile(fs,p,conf,cacheConf,family.getBloomFilterType(),dataBlockEncoder);
        storeFile.createReader();
        return storeFile;
      }
    }
);
    totalValidStoreFile++;
  }
  try {
    for (int i=0; i < totalValidStoreFile; i++) {
      Future<StoreFile> future=completionService.take();
      StoreFile storeFile=future.get();
      long length=storeFile.getReader().length();
      this.storeSize+=length;
      this.totalUncompressedBytes+=storeFile.getReader().getTotalUncompressedBytes();
      if (LOG.isDebugEnabled()) {
        LOG.debug("loaded " + storeFile.toStringDetailed());
      }
      results.add(storeFile);
    }
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
catch (  ExecutionException e) {
    throw new IOException(e.getCause());
  }
 finally {
    storeFileOpenerThreadPool.shutdownNow();
  }
  return results;
}
