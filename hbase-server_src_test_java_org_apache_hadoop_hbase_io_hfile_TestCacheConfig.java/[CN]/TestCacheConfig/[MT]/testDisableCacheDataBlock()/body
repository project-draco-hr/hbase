{
  Configuration conf=HBaseConfiguration.create();
  CacheConfig cacheConfig=new CacheConfig(conf);
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
  assertFalse(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
  assertFalse(cacheConfig.shouldCacheDataCompressed());
  assertFalse(cacheConfig.shouldCacheDataOnWrite());
  assertTrue(cacheConfig.shouldCacheDataOnRead());
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
  assertFalse(cacheConfig.shouldCacheBloomsOnWrite());
  assertFalse(cacheConfig.shouldCacheIndexesOnWrite());
  conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY,true);
  conf.setBoolean(CacheConfig.CACHE_DATA_BLOCKS_COMPRESSED_KEY,true);
  conf.setBoolean(CacheConfig.CACHE_BLOOM_BLOCKS_ON_WRITE_KEY,true);
  conf.setBoolean(CacheConfig.CACHE_INDEX_BLOCKS_ON_WRITE_KEY,true);
  cacheConfig=new CacheConfig(conf);
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
  assertTrue(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
  assertTrue(cacheConfig.shouldCacheDataCompressed());
  assertTrue(cacheConfig.shouldCacheDataOnWrite());
  assertTrue(cacheConfig.shouldCacheDataOnRead());
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
  assertTrue(cacheConfig.shouldCacheBloomsOnWrite());
  assertTrue(cacheConfig.shouldCacheIndexesOnWrite());
  conf.setBoolean(CacheConfig.CACHE_DATA_ON_READ_KEY,false);
  conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY,false);
  cacheConfig=new CacheConfig(conf);
  assertFalse(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
  assertFalse(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
  assertFalse(cacheConfig.shouldCacheDataCompressed());
  assertFalse(cacheConfig.shouldCacheDataOnWrite());
  assertFalse(cacheConfig.shouldCacheDataOnRead());
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
  assertTrue(cacheConfig.shouldCacheBloomsOnWrite());
  assertTrue(cacheConfig.shouldCacheIndexesOnWrite());
  conf.setBoolean(CacheConfig.CACHE_DATA_ON_READ_KEY,true);
  conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY,false);
  HColumnDescriptor family=new HColumnDescriptor("testDisableCacheDataBlock");
  family.setBlockCacheEnabled(false);
  cacheConfig=new CacheConfig(conf,family);
  assertFalse(cacheConfig.shouldCacheBlockOnRead(BlockCategory.DATA));
  assertFalse(cacheConfig.shouldCacheCompressed(BlockCategory.DATA));
  assertFalse(cacheConfig.shouldCacheDataCompressed());
  assertFalse(cacheConfig.shouldCacheDataOnWrite());
  assertFalse(cacheConfig.shouldCacheDataOnRead());
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.INDEX));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.META));
  assertTrue(cacheConfig.shouldCacheBlockOnRead(BlockCategory.BLOOM));
  assertTrue(cacheConfig.shouldCacheBloomsOnWrite());
  assertTrue(cacheConfig.shouldCacheIndexesOnWrite());
}
