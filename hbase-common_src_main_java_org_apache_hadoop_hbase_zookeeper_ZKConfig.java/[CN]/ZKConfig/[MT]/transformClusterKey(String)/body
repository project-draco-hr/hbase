{
  String[] parts=key.split(":");
  if (parts.length == 3) {
    if (!parts[2].matches("/.*[^/]")) {
      throw new IOException("Cluster key passed " + key + " is invalid, the format should be:"+ HConstants.ZOOKEEPER_QUORUM+ ":"+ HConstants.ZOOKEEPER_CLIENT_PORT+ ":"+ HConstants.ZOOKEEPER_ZNODE_PARENT);
    }
    return new ZKClusterKey(parts[0],Integer.parseInt(parts[1]),parts[2]);
  }
  if (parts.length > 3) {
    String zNodeParent=parts[parts.length - 1];
    if (!zNodeParent.matches("/.*[^/]")) {
      throw new IOException("Cluster key passed " + key + " is invalid, the format should be:"+ HConstants.ZOOKEEPER_QUORUM+ ":"+ HConstants.ZOOKEEPER_CLIENT_PORT+ ":"+ HConstants.ZOOKEEPER_ZNODE_PARENT);
    }
    String clientPort=parts[parts.length - 2];
    int endQuorumIndex=key.length() - zNodeParent.length() - clientPort.length()- 2;
    String quorumStringInput=key.substring(0,endQuorumIndex);
    String[] serverHosts=quorumStringInput.split(",");
    if ((parts.length - 2) == (serverHosts.length + 1)) {
      return new ZKClusterKey(quorumStringInput,Integer.parseInt(clientPort),zNodeParent);
    }
    return new ZKClusterKey(buildZKQuorumServerString(serverHosts,clientPort),Integer.parseInt(clientPort),zNodeParent);
  }
  throw new IOException("Cluster key passed " + key + " is invalid, the format should be:"+ HConstants.ZOOKEEPER_QUORUM+ ":"+ HConstants.ZOOKEEPER_CLIENT_PORT+ ":"+ HConstants.ZOOKEEPER_ZNODE_PARENT);
}
