{
  Stat stat=new Stat();
  byte[] data;
synchronized (grabTaskLock) {
    currentTask=path;
    workerInGrabTask=true;
    if (Thread.interrupted()) {
      return;
    }
  }
  try {
    try {
      if ((data=ZKUtil.getDataNoWatch(watcher,path,stat)) == null) {
        SplitLogCounters.tot_wkr_failed_to_grab_task_no_data.incrementAndGet();
        return;
      }
    }
 catch (    KeeperException e) {
      LOG.warn("Failed to get data for znode " + path,e);
      SplitLogCounters.tot_wkr_failed_to_grab_task_exception.incrementAndGet();
      return;
    }
    SplitLogTask slt;
    try {
      slt=SplitLogTask.parseFrom(data);
    }
 catch (    DeserializationException e) {
      LOG.warn("Failed parse data for znode " + path,e);
      SplitLogCounters.tot_wkr_failed_to_grab_task_exception.incrementAndGet();
      return;
    }
    if (!slt.isUnassigned()) {
      SplitLogCounters.tot_wkr_failed_to_grab_task_owned.incrementAndGet();
      return;
    }
    currentVersion=attemptToOwnTask(true,watcher,server.getServerName(),path,slt.getMode(),stat.getVersion());
    if (currentVersion < 0) {
      SplitLogCounters.tot_wkr_failed_to_grab_task_lost_race.incrementAndGet();
      return;
    }
    if (ZKSplitLog.isRescanNode(watcher,currentTask)) {
      ZkSplitLogWorkerCoordination.ZkSplitTaskDetails splitTaskDetails=new ZkSplitLogWorkerCoordination.ZkSplitTaskDetails();
      splitTaskDetails.setTaskNode(currentTask);
      splitTaskDetails.setCurTaskZKVersion(new MutableInt(currentVersion));
      endTask(new SplitLogTask.Done(server.getServerName(),slt.getMode()),SplitLogCounters.tot_wkr_task_acquired_rescan,splitTaskDetails);
      return;
    }
    LOG.info("worker " + server.getServerName() + " acquired task "+ path);
    SplitLogCounters.tot_wkr_task_acquired.incrementAndGet();
    getDataSetWatchAsync();
    submitTask(path,slt.getMode(),currentVersion,reportPeriod);
    try {
      int sleepTime=RandomUtils.nextInt(500) + 500;
      Thread.sleep(sleepTime);
    }
 catch (    InterruptedException e) {
      LOG.warn("Interrupted while yielding for other region servers",e);
      Thread.currentThread().interrupt();
    }
  }
  finally {
synchronized (grabTaskLock) {
      workerInGrabTask=false;
      Thread.interrupted();
    }
  }
}
