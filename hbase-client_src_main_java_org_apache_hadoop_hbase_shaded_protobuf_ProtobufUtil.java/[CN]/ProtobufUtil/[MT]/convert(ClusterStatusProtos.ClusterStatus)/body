{
  Map<ServerName,ServerLoad> servers=null;
  servers=new HashMap<ServerName,ServerLoad>(proto.getLiveServersList().size());
  for (  LiveServerInfo lsi : proto.getLiveServersList()) {
    servers.put(ProtobufUtil.toServerName(lsi.getServer()),new ServerLoad(lsi.getServerLoad()));
  }
  Collection<ServerName> deadServers=null;
  deadServers=new ArrayList<ServerName>(proto.getDeadServersList().size());
  for (  HBaseProtos.ServerName sn : proto.getDeadServersList()) {
    deadServers.add(ProtobufUtil.toServerName(sn));
  }
  Collection<ServerName> backupMasters=null;
  backupMasters=new ArrayList<ServerName>(proto.getBackupMastersList().size());
  for (  HBaseProtos.ServerName sn : proto.getBackupMastersList()) {
    backupMasters.add(ProtobufUtil.toServerName(sn));
  }
  Set<RegionState> rit=null;
  rit=new HashSet<RegionState>(proto.getRegionsInTransitionList().size());
  for (  RegionInTransition region : proto.getRegionsInTransitionList()) {
    RegionState value=RegionState.convert(region.getRegionState());
    rit.add(value);
  }
  String[] masterCoprocessors=null;
  final int numMasterCoprocessors=proto.getMasterCoprocessorsCount();
  masterCoprocessors=new String[numMasterCoprocessors];
  for (int i=0; i < numMasterCoprocessors; i++) {
    masterCoprocessors[i]=proto.getMasterCoprocessors(i).getName();
  }
  return new ClusterStatus(proto.getHbaseVersion().getVersion(),ClusterId.convert(proto.getClusterId()).toString(),servers,deadServers,ProtobufUtil.toServerName(proto.getMaster()),backupMasters,rit,masterCoprocessors,proto.getBalancerOn());
}
