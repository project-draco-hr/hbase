{
  Iterator<Entry<Integer,Call>> itor=calls.entrySet().iterator();
  while (itor.hasNext()) {
    Call c=itor.next().getValue();
    long waitTime=System.currentTimeMillis() - c.getStartTime();
    if (waitTime >= rpcTimeout) {
      IOException ie=new CallTimeoutException("Call id=" + c.id + ", waitTime="+ waitTime+ ", rpcTimeout="+ rpcTimeout);
      c.setException(ie);
      itor.remove();
    }
 else {
      break;
    }
  }
  if (!calls.isEmpty()) {
    Call firstCall=calls.get(calls.firstKey());
    long maxWaitTime=System.currentTimeMillis() - firstCall.getStartTime();
    if (maxWaitTime < rpcTimeout) {
      rpcTimeout-=maxWaitTime;
    }
  }
  try {
    if (!shouldCloseConnection.get()) {
      setSocketTimeout(socket,(int)rpcTimeout);
    }
  }
 catch (  SocketException e) {
    LOG.warn("Couldn't lower timeout, which may result in longer than expected calls");
  }
}
