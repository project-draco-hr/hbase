{
  if (rpcTimeout == 0)   return;
  Iterator<Entry<Integer,Call>> itor=calls.entrySet().iterator();
  while (itor.hasNext()) {
    Call c=itor.next().getValue();
    long waitTime=EnvironmentEdgeManager.currentTimeMillis() - c.getStartTime();
    if (rpcTimeout < 0) {
      IOException ie=new IOException("Call id=" + c.id + ", waitTime="+ waitTime);
      c.setException(ie);
      itor.remove();
    }
 else     if (waitTime >= rpcTimeout) {
      IOException ie=new CallTimeoutException("Call id=" + c.id + ", waitTime="+ waitTime+ ", rpcTimeout="+ rpcTimeout);
      c.setException(ie);
      itor.remove();
    }
 else {
      rpcTimeout-=waitTime;
      break;
    }
  }
  if (!shouldCloseConnection.get() && socket != null && rpcTimeout > 0) {
    try {
      socket.setSoTimeout((int)rpcTimeout);
    }
 catch (    SocketException e) {
      LOG.warn("Couldn't change timeout, which may result in longer than expected calls");
    }
  }
}
