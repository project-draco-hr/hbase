{
  RequestHeader.Builder builder=RequestHeader.newBuilder();
  builder.setCallId(call.id);
  if (span != null) {
    builder.setTraceInfo(RPCTInfo.newBuilder().setParentId(span.getSpanId()).setTraceId(span.getTraceId()));
  }
  builder.setMethodName(call.md.getName());
  builder.setRequestParam(call.param != null);
  ByteBuffer cellBlock=ipcUtil.buildCellBlock(this.codec,this.compressor,call.cells);
  if (cellBlock != null) {
    CellBlockMeta.Builder cellBlockBuilder=CellBlockMeta.newBuilder();
    cellBlockBuilder.setLength(cellBlock.limit());
    builder.setCellBlockMeta(cellBlockBuilder.build());
  }
  if (priority != 0)   builder.setPriority(priority);
  RequestHeader header=builder.build();
  checkIsOpen();
  IOException writeException=null;
synchronized (this.out) {
    if (Thread.interrupted())     throw new InterruptedIOException();
    calls.put(call.id,call);
    checkIsOpen();
    try {
      IPCUtil.write(this.out,header,call.param,cellBlock);
    }
 catch (    IOException e) {
      shouldCloseConnection.set(true);
      writeException=e;
    }
  }
synchronized (this) {
    notifyAll();
  }
  if (writeException != null)   throw writeException;
  if (LOG.isDebugEnabled()) {
    LOG.debug(getName() + ": wrote request header " + TextFormat.shortDebugString(header));
  }
}
