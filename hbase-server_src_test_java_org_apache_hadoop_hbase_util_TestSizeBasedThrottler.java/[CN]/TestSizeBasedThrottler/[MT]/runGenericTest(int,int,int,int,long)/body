{
  SizeBasedThrottler throttler=new SizeBasedThrottler(threshold);
  AtomicBoolean failed=new AtomicBoolean(false);
  ArrayList<Thread> threads=new ArrayList<Thread>(numberOfThreads);
  CountDownLatch latch=new CountDownLatch(1);
  long timeElapsed=0;
  for (int i=0; i < numberOfThreads; ++i) {
    threads.add(makeThread(throttler,failed,delta,maxValueAllowed,latch));
  }
  latch.countDown();
  for (  Thread t : threads) {
    try {
      long beforeJoin=System.currentTimeMillis();
      t.join(timeout - timeElapsed);
      timeElapsed+=System.currentTimeMillis() - beforeJoin;
      if (t.isAlive() || timeElapsed >= timeout) {
        fail("Timeout reached.");
      }
    }
 catch (    InterruptedException e) {
      fail("Got InterruptedException");
    }
  }
  assertFalse(failed.get());
}
