{
  LOG.info("Starting test testMultiRowMutationMultiThreads");
  initHRegion(tableName,getName(),fam1);
  int numThreads=10;
  int opsPerThread=1000;
  AtomicOperation[] all=new AtomicOperation[numThreads];
  AtomicLong timeStamps=new AtomicLong(0);
  AtomicInteger failures=new AtomicInteger(0);
  final List<byte[]> rowsToLock=Arrays.asList(row,row2);
  for (int i=0; i < numThreads; i++) {
    all[i]=new AtomicOperation(region,opsPerThread,timeStamps,failures){
      @Override public void run(){
        boolean op=true;
        for (int i=0; i < numOps; i++) {
          try {
            if (i % 10 == 0) {
synchronized (region) {
                LOG.debug("flushing");
                region.flushcache();
              }
            }
            long ts=timeStamps.incrementAndGet();
            List<Mutation> mrm=new ArrayList<Mutation>();
            if (op) {
              Put p=new Put(row2,ts);
              p.add(fam1,qual1,value1);
              mrm.add(p);
              Delete d=new Delete(row);
              d.deleteColumns(fam1,qual1,ts);
              mrm.add(d);
            }
 else {
              Delete d=new Delete(row2);
              d.deleteColumns(fam1,qual1,ts);
              mrm.add(d);
              Put p=new Put(row,ts);
              p.add(fam1,qual1,value2);
              mrm.add(p);
            }
            region.mutateRowsWithLocks(mrm,rowsToLock);
            op^=true;
            Scan s=new Scan(row);
            RegionScanner rs=region.getScanner(s);
            List<KeyValue> r=new ArrayList<KeyValue>();
            while (rs.next(r))             ;
            rs.close();
            if (r.size() != 1) {
              LOG.debug(r);
              failures.incrementAndGet();
              fail();
            }
          }
 catch (          IOException e) {
            e.printStackTrace();
            failures.incrementAndGet();
            fail();
          }
        }
      }
    }
;
  }
  for (int i=0; i < numThreads; i++) {
    all[i].start();
  }
  for (int i=0; i < numThreads; i++) {
    try {
      all[i].join();
    }
 catch (    InterruptedException e) {
    }
  }
  assertEquals(0,failures.get());
}
