{
  processBaseOptions(cmd);
  sourceClusterIdString=cmd.getOptionValue(SOURCE_CLUSTER_OPT);
  sinkClusterIdString=cmd.getOptionValue(DEST_CLUSTER_OPT);
  outputDir=cmd.getOptionValue(OUTPUT_DIR_OPT);
  numMappers=parseInt(cmd.getOptionValue(NUM_MAPPERS_OPT,Integer.toString(DEFAULT_NUM_MAPPERS)),1,Integer.MAX_VALUE);
  numReducers=parseInt(cmd.getOptionValue(NUM_REDUCERS_OPT,Integer.toString(DEFAULT_NUM_REDUCERS)),1,Integer.MAX_VALUE);
  numNodes=parseInt(cmd.getOptionValue(NUM_NODES_OPT,Integer.toString(DEFAULT_NUM_NODES)),1,Integer.MAX_VALUE);
  generateVerifyGap=parseInt(cmd.getOptionValue(GENERATE_VERIFY_GAP_OPT,Integer.toString(DEFAULT_GENERATE_VERIFY_GAP)),1,Integer.MAX_VALUE);
  numIterations=parseInt(cmd.getOptionValue(ITERATIONS_OPT,Integer.toString(DEFAULT_NUM_ITERATIONS)),1,Integer.MAX_VALUE);
  width=parseInt(cmd.getOptionValue(WIDTH_OPT,Integer.toString(DEFAULT_WIDTH)),1,Integer.MAX_VALUE);
  wrapMultiplier=parseInt(cmd.getOptionValue(WRAP_MULTIPLIER_OPT,Integer.toString(DEFAULT_WRAP_MULTIPLIER)),1,Integer.MAX_VALUE);
  if (cmd.hasOption(NO_REPLICATION_SETUP_OPT)) {
    noReplicationSetup=true;
  }
  if (numNodes % (width * wrapMultiplier) != 0) {
    throw new RuntimeException("numNodes must be a multiple of width and wrap multiplier");
  }
}
