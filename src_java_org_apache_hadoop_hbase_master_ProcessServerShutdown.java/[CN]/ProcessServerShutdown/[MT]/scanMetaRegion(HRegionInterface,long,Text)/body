{
  ArrayList<ToDoEntry> toDoList=new ArrayList<ToDoEntry>();
  HashSet<HRegionInfo> regions=new HashSet<HRegionInfo>();
  try {
    while (true) {
      HbaseMapWritable values=null;
      try {
        values=server.next(scannerId);
      }
 catch (      IOException e) {
        LOG.error("Shutdown scanning of meta region",RemoteExceptionHandler.checkIOException(e));
        break;
      }
      if (values == null || values.size() == 0) {
        break;
      }
      RowMap rm=RowMap.fromHbaseMapWritable(values);
      Text row=rm.getRow();
      SortedMap<Text,byte[]> map=rm.getMap();
      if (LOG.isDebugEnabled() && row != null) {
        LOG.debug("shutdown scanner looking at " + row.toString());
      }
      String serverName;
      try {
        serverName=Writables.bytesToString(map.get(COL_SERVER));
      }
 catch (      UnsupportedEncodingException e) {
        LOG.error("Server name",e);
        break;
      }
      if (serverName.length() > 0 && deadServerName.compareTo(serverName) != 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Server name " + serverName + " is not same as "+ deadServerName+ ": Passing");
        }
        continue;
      }
      HRegionInfo info=master.getHRegionInfo(map);
      if (info == null) {
        continue;
      }
      LOG.info(info.getRegionName() + " was on shutdown server <" + serverName+ "> (or server is null). Marking unassigned in "+ "meta and clearing pendingRegions");
      if (info.isMetaTable()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("removing meta region " + info.getRegionName() + " from online meta regions");
        }
        master.regionManager.offlineMetaRegion(info.getStartKey());
      }
      ToDoEntry todo=new ToDoEntry(row,info);
      toDoList.add(todo);
      if (master.regionManager.isMarkedToClose(deadServerName,info.getRegionName())) {
        master.regionManager.noLongerMarkedToClose(deadServerName,info.getRegionName());
        master.regionManager.noLongerUnassigned(info);
        if (master.regionManager.isMarkedForDeletion(info.getRegionName())) {
          master.regionManager.regionDeleted(info.getRegionName());
          todo.deleteRegion=true;
        }
 else {
          todo.regionOffline=true;
        }
      }
 else {
        regions.add(info);
        master.regionManager.noLongerPending(info.getRegionName());
      }
    }
  }
  finally {
    if (scannerId != -1L) {
      try {
        server.close(scannerId);
      }
 catch (      IOException e) {
        LOG.error("Closing scanner",RemoteExceptionHandler.checkIOException(e));
      }
    }
  }
  for (  ToDoEntry e : toDoList) {
    if (e.deleteRegion) {
      HRegion.removeRegionFromMETA(server,regionName,e.row);
    }
 else     if (e.regionOffline) {
      HRegion.offlineRegionInMETA(server,regionName,e.info);
    }
  }
  for (  HRegionInfo info : regions) {
    master.regionManager.setUnassigned(info);
  }
}
