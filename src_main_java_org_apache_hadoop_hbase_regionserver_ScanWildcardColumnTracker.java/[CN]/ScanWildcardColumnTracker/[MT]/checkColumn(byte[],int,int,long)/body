{
  if (columnBuffer == null) {
    columnBuffer=bytes;
    columnOffset=offset;
    columnLength=length;
    currentCount=0;
    if (++currentCount > maxVersions) {
      return ScanQueryMatcher.MatchCode.SEEK_NEXT_COL;
    }
    setTS(timestamp);
    return ScanQueryMatcher.MatchCode.INCLUDE;
  }
  int cmp=Bytes.compareTo(bytes,offset,length,columnBuffer,columnOffset,columnLength);
  if (cmp == 0) {
    if (sameAsPreviousTS(timestamp)) {
      return ScanQueryMatcher.MatchCode.SKIP;
    }
    if (++currentCount > maxVersions) {
      return ScanQueryMatcher.MatchCode.SEEK_NEXT_COL;
    }
    setTS(timestamp);
    return ScanQueryMatcher.MatchCode.INCLUDE;
  }
  resetTS();
  if (cmp > 0) {
    columnBuffer=bytes;
    columnOffset=offset;
    columnLength=length;
    currentCount=0;
    if (++currentCount > maxVersions)     return ScanQueryMatcher.MatchCode.SEEK_NEXT_COL;
    setTS(timestamp);
    return ScanQueryMatcher.MatchCode.INCLUDE;
  }
  LOG.error("ScanWildcardColumnTracker.checkColumn ran " + "into a column actually smaller than the previous column: " + Bytes.toStringBinary(bytes,offset,length));
  columnBuffer=bytes;
  columnOffset=offset;
  columnLength=length;
  currentCount=0;
  if (++currentCount > maxVersions) {
    return ScanQueryMatcher.MatchCode.SEEK_NEXT_COL;
  }
  setTS(timestamp);
  return ScanQueryMatcher.MatchCode.INCLUDE;
}
