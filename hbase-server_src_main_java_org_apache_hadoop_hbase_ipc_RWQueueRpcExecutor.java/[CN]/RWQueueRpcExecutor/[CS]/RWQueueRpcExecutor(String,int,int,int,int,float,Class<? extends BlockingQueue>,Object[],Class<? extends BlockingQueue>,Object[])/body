{
  super(name,Math.max(writeHandlers,numWriteQueues) + Math.max(readHandlers,numReadQueues));
  int numScanQueues=Math.max(0,(int)Math.floor(numReadQueues * scanShare));
  int scanHandlers=Math.max(0,(int)Math.floor(readHandlers * scanShare));
  if ((numReadQueues - numScanQueues) > 0) {
    numReadQueues-=numScanQueues;
    readHandlers-=scanHandlers;
  }
 else {
    numScanQueues=0;
    scanHandlers=0;
  }
  this.writeHandlersCount=Math.max(writeHandlers,numWriteQueues);
  this.readHandlersCount=Math.max(readHandlers,numReadQueues);
  this.scanHandlersCount=Math.max(scanHandlers,numScanQueues);
  this.numWriteQueues=numWriteQueues;
  this.numReadQueues=numReadQueues;
  this.numScanQueues=numScanQueues;
  this.writeBalancer=getBalancer(numWriteQueues);
  this.readBalancer=getBalancer(numReadQueues);
  this.scanBalancer=getBalancer(numScanQueues);
  queues=new ArrayList<BlockingQueue<CallRunner>>(numWriteQueues + numReadQueues + numScanQueues);
  LOG.debug(name + " writeQueues=" + numWriteQueues+ " writeHandlers="+ writeHandlersCount+ " readQueues="+ numReadQueues+ " readHandlers="+ readHandlersCount+ ((numScanQueues == 0) ? "" : " scanQueues=" + numScanQueues + " scanHandlers="+ scanHandlersCount));
  if (writeQueueInitArgs.length > 0) {
    currentQueueLimit=(int)writeQueueInitArgs[0];
    writeQueueInitArgs[0]=Math.max((int)writeQueueInitArgs[0],DEFAULT_CALL_QUEUE_SIZE_HARD_LIMIT);
  }
  for (int i=0; i < numWriteQueues; ++i) {
    queues.add((BlockingQueue<CallRunner>)ReflectionUtils.newInstance(writeQueueClass,writeQueueInitArgs));
  }
  if (readQueueInitArgs.length > 0) {
    currentQueueLimit=(int)readQueueInitArgs[0];
    readQueueInitArgs[0]=Math.max((int)readQueueInitArgs[0],DEFAULT_CALL_QUEUE_SIZE_HARD_LIMIT);
  }
  for (int i=0; i < (numReadQueues + numScanQueues); ++i) {
    queues.add((BlockingQueue<CallRunner>)ReflectionUtils.newInstance(readQueueClass,readQueueInitArgs));
  }
}
