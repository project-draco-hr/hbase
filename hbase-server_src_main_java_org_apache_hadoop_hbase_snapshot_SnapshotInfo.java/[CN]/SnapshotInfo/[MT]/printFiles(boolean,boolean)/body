{
  if (showFiles) {
    System.out.println("Snapshot Files");
    System.out.println("----------------------------------------");
  }
  final String table=snapshotTableDesc.getTableName().getNameAsString();
  final SnapshotStats stats=new SnapshotStats(this.getConf(),this.fs,this.snapshotDesc);
  SnapshotReferenceUtil.visitReferencedFiles(fs,snapshotDir,new SnapshotReferenceUtil.FileVisitor(){
    public void storeFile(    final String region,    final String family,    final String hfile) throws IOException {
      SnapshotStats.FileInfo info=stats.addStoreFile(region,family,hfile);
      if (showFiles) {
        System.out.printf("%8s %s/%s/%s/%s %s%n",(info.isMissing() ? "-" : StringUtils.humanReadableInt(info.getSize())),table,region,family,hfile,(info.inArchive() ? "(archive)" : info.isMissing() ? "(NOT FOUND)" : ""));
      }
    }
    public void recoveredEdits(    final String region,    final String logfile) throws IOException {
      SnapshotStats.FileInfo info=stats.addRecoveredEdits(region,logfile);
      if (showFiles) {
        System.out.printf("%8s recovered.edits %s on region %s%n",StringUtils.humanReadableInt(info.getSize()),logfile,region);
      }
    }
    public void logFile(    final String server,    final String logfile) throws IOException {
      SnapshotStats.FileInfo info=stats.addLogFile(server,logfile);
      if (showFiles) {
        System.out.printf("%8s log %s on server %s %s%n",(info.isMissing() ? "-" : StringUtils.humanReadableInt(info.getSize())),logfile,server,(info.isMissing() ? "(NOT FOUND)" : ""));
      }
    }
  }
);
  System.out.println();
  if (stats.isSnapshotCorrupted()) {
    System.out.println("**************************************************************");
    System.out.printf("BAD SNAPSHOT: %d hfile(s) and %d log(s) missing.%n",stats.getMissingStoreFilesCount(),stats.getMissingLogsCount());
    System.out.println("**************************************************************");
  }
  if (showStats) {
    System.out.printf("%d HFiles (%d in archive), total size %s (%.2f%% %s shared with the source table)%n",stats.getStoreFilesCount(),stats.getArchivedStoreFilesCount(),StringUtils.humanReadableInt(stats.getStoreFilesSize()),stats.getSharedStoreFilePercentage(),StringUtils.humanReadableInt(stats.getSharedStoreFilesSize()));
    System.out.printf("%d Logs, total size %s%n",stats.getLogsCount(),StringUtils.humanReadableInt(stats.getLogsSize()));
    System.out.println();
  }
}
