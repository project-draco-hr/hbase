{
  if (showFiles) {
    System.out.println("Snapshot Files");
    System.out.println("----------------------------------------");
  }
  final SnapshotDescription snapshotDesc=snapshotManifest.getSnapshotDescription();
  final String table=snapshotDesc.getTable();
  final SnapshotStats stats=new SnapshotStats(this.getConf(),this.fs,snapshotDesc);
  SnapshotReferenceUtil.concurrentVisitReferencedFiles(getConf(),fs,snapshotManifest,new SnapshotReferenceUtil.SnapshotVisitor(){
    @Override public void storeFile(    final HRegionInfo regionInfo,    final String family,    final SnapshotRegionManifest.StoreFile storeFile) throws IOException {
      if (storeFile.hasReference())       return;
      SnapshotStats.FileInfo info=stats.addStoreFile(regionInfo,family,storeFile);
      if (showFiles) {
        String state=info.getStateToString();
        System.out.printf("%8s %s/%s/%s/%s %s%n",(info.isMissing() ? "-" : fileSizeToString(info.getSize())),table,regionInfo.getEncodedName(),family,storeFile.getName(),state == null ? "" : "(" + state + ")");
      }
    }
    @Override public void logFile(    final String server,    final String logfile) throws IOException {
      SnapshotStats.FileInfo info=stats.addLogFile(server,logfile);
      if (showFiles) {
        String state=info.getStateToString();
        System.out.printf("%8s log %s on server %s (%s)%n",(info.isMissing() ? "-" : fileSizeToString(info.getSize())),logfile,server,state == null ? "" : "(" + state + ")");
      }
    }
  }
);
  System.out.println();
  if (stats.isSnapshotCorrupted()) {
    System.out.println("**************************************************************");
    System.out.printf("BAD SNAPSHOT: %d hfile(s) and %d log(s) missing.%n",stats.getMissingStoreFilesCount(),stats.getMissingLogsCount());
    System.out.printf("              %d hfile(s) corrupted.%n",stats.getCorruptedStoreFilesCount());
    System.out.println("**************************************************************");
  }
  if (showStats) {
    System.out.printf("%d HFiles (%d in archive), total size %s (%.2f%% %s shared with the source table)%n",stats.getStoreFilesCount(),stats.getArchivedStoreFilesCount(),fileSizeToString(stats.getStoreFilesSize()),stats.getSharedStoreFilePercentage(),fileSizeToString(stats.getSharedStoreFilesSize()));
    System.out.printf("%d Logs, total size %s%n",stats.getLogsCount(),fileSizeToString(stats.getLogsSize()));
    System.out.println();
  }
}
