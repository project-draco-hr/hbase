{
  List<Cell> l1=new ArrayList<Cell>();
  l1.add(new KeyValue(row1,fam1,col5,data));
  l1.add(new KeyValue(row2,fam1,col1,data));
  l1.add(new KeyValue(row2,fam1,col2,data));
  Scanner s1=new Scanner(l1);
  scanners.add(s1);
  List<Cell> l2=new ArrayList<Cell>();
  l2.add(new KeyValue(row1,fam1,col1,data));
  l2.add(new KeyValue(row1,fam1,col2,data));
  Scanner s2=new Scanner(l2);
  scanners.add(s2);
  List<Cell> l3=new ArrayList<Cell>();
  l3.add(new KeyValue(row1,fam1,col3,data));
  l3.add(new KeyValue(row1,fam1,col4,data));
  l3.add(new KeyValue(row1,fam2,col1,data));
  l3.add(new KeyValue(row1,fam2,col2,data));
  l3.add(new KeyValue(row2,fam1,col3,data));
  Scanner s3=new Scanner(l3);
  scanners.add(s3);
  List<Cell> l4=new ArrayList<Cell>();
  Scanner s4=new Scanner(l4);
  scanners.add(s4);
  KeyValueHeap kvh=new KeyValueHeap(scanners,CellComparator.COMPARATOR);
  while (kvh.next() != null)   ;
  assertEquals(4,kvh.scannersForDelayedClose.size());
  assertTrue(kvh.scannersForDelayedClose.contains(s1));
  assertTrue(kvh.scannersForDelayedClose.contains(s2));
  assertTrue(kvh.scannersForDelayedClose.contains(s3));
  assertTrue(kvh.scannersForDelayedClose.contains(s4));
  kvh.close();
  for (  KeyValueScanner scanner : scanners) {
    assertTrue(((Scanner)scanner).isClosed());
  }
}
