{
  byte flag=source.readByte();
  int prevKeyLength=state.keyLength;
  if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
    state.keyLength=ByteBufferUtils.readCompressedInt(source);
  }
  if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
    state.valueLength=ByteBufferUtils.readCompressedInt(source);
  }
  int commonLength=ByteBufferUtils.readCompressedInt(source);
  ByteBufferUtils.ensureSpace(out,state.keyLength + state.valueLength + KeyValue.ROW_OFFSET);
  int kvPos=out.position();
  if (!state.isFirst()) {
    int common;
    int prevOffset;
    if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
      out.putInt(state.keyLength);
      out.putInt(state.valueLength);
      prevOffset=state.prevOffset + KeyValue.ROW_OFFSET;
      common=commonLength;
    }
 else {
      if ((flag & FLAG_SAME_KEY_LENGTH) != 0) {
        prevOffset=state.prevOffset;
        common=commonLength + KeyValue.ROW_OFFSET;
      }
 else {
        out.putInt(state.keyLength);
        prevOffset=state.prevOffset + KeyValue.KEY_LENGTH_SIZE;
        common=commonLength + KeyValue.KEY_LENGTH_SIZE;
      }
    }
    ByteBufferUtils.copyFromBufferToBuffer(out,out,prevOffset,common);
    int keyRestLength;
    if (commonLength < state.rowLength + KeyValue.ROW_LENGTH_SIZE) {
      int rowWithSizeLength;
      int rowRestLength;
      if (commonLength < KeyValue.ROW_LENGTH_SIZE) {
        ByteBufferUtils.copyFromStreamToBuffer(out,source,KeyValue.ROW_LENGTH_SIZE - commonLength);
        rowWithSizeLength=out.getShort(out.position() - KeyValue.ROW_LENGTH_SIZE) + KeyValue.ROW_LENGTH_SIZE;
        rowRestLength=rowWithSizeLength - KeyValue.ROW_LENGTH_SIZE;
      }
 else {
        rowWithSizeLength=out.getShort(kvPos + KeyValue.ROW_OFFSET) + KeyValue.ROW_LENGTH_SIZE;
        rowRestLength=rowWithSizeLength - commonLength;
      }
      ByteBufferUtils.copyFromStreamToBuffer(out,source,rowRestLength);
      ByteBufferUtils.copyFromBufferToBuffer(out,out,state.prevOffset + KeyValue.ROW_OFFSET + KeyValue.ROW_LENGTH_SIZE+ state.rowLength,state.familyLength + KeyValue.FAMILY_LENGTH_SIZE);
      state.rowLength=(short)(rowWithSizeLength - KeyValue.ROW_LENGTH_SIZE);
      keyRestLength=state.keyLength - rowWithSizeLength - state.familyLength- (KeyValue.FAMILY_LENGTH_SIZE + KeyValue.TIMESTAMP_TYPE_SIZE);
    }
 else {
      keyRestLength=state.keyLength - commonLength - KeyValue.TIMESTAMP_TYPE_SIZE;
    }
    ByteBufferUtils.copyFromStreamToBuffer(out,source,keyRestLength);
    int prefixTimestamp=(flag & MASK_TIMESTAMP_LENGTH) >>> SHIFT_TIMESTAMP_LENGTH;
    ByteBufferUtils.copyFromBufferToBuffer(out,out,state.prevTimestampOffset,prefixTimestamp);
    state.prevTimestampOffset=out.position() - prefixTimestamp;
    ByteBufferUtils.copyFromStreamToBuffer(out,source,KeyValue.TIMESTAMP_SIZE - prefixTimestamp);
    if ((flag & FLAG_SAME_TYPE) != 0) {
      out.put(state.type);
      if ((flag & FLAG_SAME_VALUE) != 0) {
        ByteBufferUtils.copyFromBufferToBuffer(out,out,state.prevOffset + KeyValue.ROW_OFFSET + prevKeyLength,state.valueLength);
      }
 else {
        ByteBufferUtils.copyFromStreamToBuffer(out,source,state.valueLength);
      }
    }
 else {
      if ((flag & FLAG_SAME_VALUE) != 0) {
        ByteBufferUtils.copyFromStreamToBuffer(out,source,KeyValue.TYPE_SIZE);
        ByteBufferUtils.copyFromBufferToBuffer(out,out,state.prevOffset + KeyValue.ROW_OFFSET + prevKeyLength,state.valueLength);
      }
 else {
        ByteBufferUtils.copyFromStreamToBuffer(out,source,state.valueLength + KeyValue.TYPE_SIZE);
      }
      state.type=out.get(state.prevTimestampOffset + KeyValue.TIMESTAMP_SIZE);
    }
  }
 else {
    state.decompressFirstKV(out,source);
  }
  state.prevOffset=kvPos;
}
