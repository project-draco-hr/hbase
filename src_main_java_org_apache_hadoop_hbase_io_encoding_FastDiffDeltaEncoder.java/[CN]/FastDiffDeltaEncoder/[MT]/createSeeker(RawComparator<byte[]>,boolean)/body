{
  return new BufferedEncodedSeeker(comparator){
    private byte[] prevTimestampAndType=new byte[Bytes.SIZEOF_LONG + Bytes.SIZEOF_BYTE];
    private int rowLengthWithSize;
    private int columnFamilyLengthWithSize;
    private void decode(    boolean isFirst){
      byte flag=currentBuffer.get();
      if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        if (!isFirst) {
          System.arraycopy(current.keyBuffer,current.keyLength - prevTimestampAndType.length,prevTimestampAndType,0,prevTimestampAndType.length);
        }
        current.keyLength=ByteBufferUtils.readCompressedInt(currentBuffer);
      }
      if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
        current.valueLength=ByteBufferUtils.readCompressedInt(currentBuffer);
      }
      current.lastCommonPrefix=ByteBufferUtils.readCompressedInt(currentBuffer);
      current.ensureSpaceForKey();
      if (isFirst) {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.keyLength - prevTimestampAndType.length);
        rowLengthWithSize=Bytes.toShort(current.keyBuffer,0) + Bytes.SIZEOF_SHORT;
        columnFamilyLengthWithSize=current.keyBuffer[rowLengthWithSize] + Bytes.SIZEOF_BYTE;
      }
 else       if (current.lastCommonPrefix < Bytes.SIZEOF_SHORT) {
        int oldRowLengthWithSize=rowLengthWithSize;
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,Bytes.SIZEOF_SHORT - current.lastCommonPrefix);
        rowLengthWithSize=Bytes.toShort(current.keyBuffer,0) + Bytes.SIZEOF_SHORT;
        System.arraycopy(current.keyBuffer,oldRowLengthWithSize,current.keyBuffer,rowLengthWithSize,columnFamilyLengthWithSize);
        currentBuffer.get(current.keyBuffer,Bytes.SIZEOF_SHORT,rowLengthWithSize - Bytes.SIZEOF_SHORT);
        currentBuffer.get(current.keyBuffer,rowLengthWithSize + columnFamilyLengthWithSize,current.keyLength - rowLengthWithSize - columnFamilyLengthWithSize- prevTimestampAndType.length);
      }
 else       if (current.lastCommonPrefix < rowLengthWithSize) {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,rowLengthWithSize - current.lastCommonPrefix);
        currentBuffer.get(current.keyBuffer,rowLengthWithSize + columnFamilyLengthWithSize,current.keyLength - rowLengthWithSize - columnFamilyLengthWithSize- prevTimestampAndType.length);
      }
 else {
        currentBuffer.get(current.keyBuffer,current.lastCommonPrefix,current.keyLength - prevTimestampAndType.length - current.lastCommonPrefix);
      }
      int pos=current.keyLength - prevTimestampAndType.length;
      int commonTimestampPrefix=(flag & MASK_TIMESTAMP_LENGTH) >>> SHIFT_TIMESTAMP_LENGTH;
      if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        System.arraycopy(prevTimestampAndType,0,current.keyBuffer,pos,commonTimestampPrefix);
      }
      pos+=commonTimestampPrefix;
      currentBuffer.get(current.keyBuffer,pos,Bytes.SIZEOF_LONG - commonTimestampPrefix);
      pos+=Bytes.SIZEOF_LONG - commonTimestampPrefix;
      if ((flag & FLAG_SAME_TYPE) == 0) {
        currentBuffer.get(current.keyBuffer,pos,Bytes.SIZEOF_BYTE);
      }
 else       if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
        current.keyBuffer[pos]=prevTimestampAndType[Bytes.SIZEOF_LONG];
      }
      if ((flag & FLAG_SAME_VALUE) == 0) {
        current.valueOffset=currentBuffer.position();
        ByteBufferUtils.skip(currentBuffer,current.valueLength);
      }
      if (includesMemstoreTS) {
        current.memstoreTS=ByteBufferUtils.readVLong(currentBuffer);
      }
 else {
        current.memstoreTS=0;
      }
      current.nextKvOffset=currentBuffer.position();
    }
    @Override protected void decodeFirst(){
      ByteBufferUtils.skip(currentBuffer,Bytes.SIZEOF_INT);
      decode(true);
    }
    @Override protected void decodeNext(){
      decode(false);
    }
  }
;
}
