{
  NetworkInterface ni=NetworkInterface.getByInetAddress(Addressing.getIpAddress());
  String mcAddress=conf.get(HConstants.STATUS_MULTICAST_ADDRESS,HConstants.DEFAULT_STATUS_MULTICAST_ADDRESS);
  int port=conf.getInt(HConstants.STATUS_MULTICAST_PORT,HConstants.DEFAULT_STATUS_MULTICAST_PORT);
  final InetAddress ina;
  try {
    ina=InetAddress.getByName(mcAddress);
  }
 catch (  UnknownHostException e) {
    close();
    throw new IOException("Can't connect to " + mcAddress,e);
  }
  final InetSocketAddress isa=new InetSocketAddress(mcAddress,port);
  InternetProtocolFamily family=InternetProtocolFamily.IPv4;
  if (ina instanceof Inet6Address) {
    family=InternetProtocolFamily.IPv6;
  }
  Bootstrap b=new Bootstrap();
  b.group(group).channelFactory(new HBaseDatagramChannelFactory<Channel>(NioDatagramChannel.class,family)).option(ChannelOption.SO_REUSEADDR,true).handler(new ClusterStatusEncoder(isa));
  try {
    channel=(DatagramChannel)b.bind(new InetSocketAddress(0)).sync().channel();
    channel.joinGroup(ina,ni,null,channel.newPromise()).sync();
    channel.connect(isa).sync();
  }
 catch (  InterruptedException e) {
    close();
    throw ExceptionUtil.asInterrupt(e);
  }
}
