{
  if (this.condition != null && this.condition.containsKey("error"))   return new ReturnMsg(0,"Syntax error : Please check 'Select' syntax.");
  try {
    client.openTable(new Text(this.table));
switch (getCondition()) {
case 0:
      HTableDescriptor[] tables=client.listTables();
    Text[] columns=null;
  if (this.table.equals(HConstants.ROOT_TABLE_NAME.toString()) || this.table.equals(HConstants.META_TABLE_NAME.toString())) {
    columns=HConstants.COLUMN_FAMILY_ARRAY;
  }
 else {
    for (int i=0; i < tables.length; i++) {
      if (tables[i].getName().toString().equals(this.table)) {
        columns=tables[i].families().keySet().toArray(new Text[]{});
      }
    }
  }
HScannerInterface scan=client.obtainScanner(columns,new Text(""));
HStoreKey key=new HStoreKey();
TreeMap<Text,byte[]> results=new TreeMap<Text,byte[]>();
ConsoleTable.selectHead();
int count=0;
while (scan.next(key,results)) {
Text rowKey=key.getRow();
for (Text columnKey : results.keySet()) {
byte[] value=results.get(columnKey);
String cellData=new String(value);
if (columnKey.equals(HConstants.COL_REGIONINFO)) {
DataInputBuffer inbuf=new DataInputBuffer();
HRegionInfo info=new HRegionInfo();
inbuf.reset(value,value.length);
info.readFields(inbuf);
cellData="ID : " + String.valueOf(info.getRegionId());
}
ConsoleTable.printLine(count,rowKey.toString(),columnKey.toString(),cellData);
count++;
}
results=new TreeMap<Text,byte[]>();
}
ConsoleTable.selectFoot();
scan.close();
break;
case 1:
count=0;
ConsoleTable.selectHead();
for (Map.Entry<Text,byte[]> entry : client.getRow(new Text(getRow())).entrySet()) {
byte[] value=entry.getValue();
String cellData=new String(value);
if (entry.getKey().equals(HConstants.COL_REGIONINFO)) {
DataInputBuffer inbuf=new DataInputBuffer();
HRegionInfo info=new HRegionInfo();
inbuf.reset(value,value.length);
info.readFields(inbuf);
cellData="ID : " + String.valueOf(info.getRegionId());
}
ConsoleTable.printLine(count,getRow().toString(),entry.getKey().toString(),cellData);
count++;
}
ConsoleTable.selectFoot();
break;
case 2:
Text[] column=new Text[]{new Text(getColumn())};
HScannerInterface scanner=client.obtainScanner(column,new Text(""));
HStoreKey k=new HStoreKey();
TreeMap<Text,byte[]> r=new TreeMap<Text,byte[]>();
ConsoleTable.selectHead();
count=0;
while (scanner.next(k,r)) {
Text rowKey=k.getRow();
for (Text columnKey : r.keySet()) {
byte[] value=r.get(columnKey);
String cellData=new String(value);
ConsoleTable.printLine(count,rowKey.toString(),columnKey.toString(),cellData);
count++;
}
results=new TreeMap<Text,byte[]>();
}
ConsoleTable.selectFoot();
scanner.close();
break;
case 3:
byte[] rs1=client.get(new Text(getRow()),new Text(getColumn()));
ConsoleTable.selectHead();
ConsoleTable.printLine(0,getRow(),getColumn(),new String(rs1,HConstants.UTF8_ENCODING));
ConsoleTable.selectFoot();
break;
case 4:
byte[][] rs2=client.get(new Text(getRow()),new Text(getColumn()),this.limit);
ConsoleTable.selectHead();
for (int i=0; i < rs2.length; i++) {
ConsoleTable.printLine(i,getRow(),getColumn(),new String(rs2[i],HConstants.UTF8_ENCODING));
}
ConsoleTable.selectFoot();
break;
case 5:
byte[][] rs3=client.get(new Text(getRow()),new Text(getColumn()),getTime(),this.limit);
ConsoleTable.selectHead();
for (int i=0; i < rs3.length; i++) {
ConsoleTable.printLine(i,getRow(),getColumn(),new String(rs3[i]));
}
ConsoleTable.selectFoot();
break;
}
return new ReturnMsg(1,"Successfully print out the selected data.");
}
 catch (IOException e) {
String[] msg=e.getMessage().split("[,]");
return new ReturnMsg(0,msg[0]);
}
}
