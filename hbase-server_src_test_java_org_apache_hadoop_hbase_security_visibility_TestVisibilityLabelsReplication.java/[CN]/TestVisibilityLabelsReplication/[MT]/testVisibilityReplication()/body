{
  int retry=0;
  try (Table table=writeData(TABLE_NAME,"(" + SECRET + "&"+ PUBLIC+ ")"+ "|("+ CONFIDENTIAL+ ")&("+ TOPSECRET+ ")","(" + PRIVATE + "|"+ CONFIDENTIAL+ ")&("+ PUBLIC+ "|"+ TOPSECRET+ ")","(" + SECRET + "|"+ CONFIDENTIAL+ ")"+ "&"+ "!"+ TOPSECRET,CellVisibility.quote(UNICODE_VIS_TAG) + "&" + SECRET)){
    Scan s=new Scan();
    s.setAuthorizations(new Authorizations(SECRET,CONFIDENTIAL,PRIVATE,TOPSECRET,UNICODE_VIS_TAG));
    ResultScanner scanner=table.getScanner(s);
    Result[] next=scanner.next(4);
    assertTrue(next.length == 4);
    CellScanner cellScanner=next[0].cellScanner();
    cellScanner.advance();
    Cell current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row1,0,row1.length));
    cellScanner=next[1].cellScanner();
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row2,0,row2.length));
    cellScanner=next[2].cellScanner();
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row3,0,row3.length));
    cellScanner=next[3].cellScanner();
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row4,0,row4.length));
    try (Table table2=TEST_UTIL1.getConnection().getTable(TABLE_NAME)){
      s=new Scan();
      scanner=table2.getScanner(s);
      next=scanner.next(4);
      while (next.length == 0 && retry <= 10) {
        scanner=table2.getScanner(s);
        next=scanner.next(4);
        Thread.sleep(2000);
        retry++;
      }
      assertTrue(next.length == 4);
      verifyGet(row1,expectedVisString[0],expected[0],false,TOPSECRET,CONFIDENTIAL);
      TestCoprocessorForTagsAtSink.tags.clear();
      verifyGet(row2,expectedVisString[1],expected[1],false,CONFIDENTIAL,PUBLIC);
      TestCoprocessorForTagsAtSink.tags.clear();
      verifyGet(row3,expectedVisString[2],expected[2],false,PRIVATE,SECRET);
      verifyGet(row3,"",expected[3],true,TOPSECRET,SECRET);
      verifyGet(row4,expectedVisString[3],expected[4],false,UNICODE_VIS_TAG,SECRET);
    }
   }
 }
