{
  int thisNodeDepthPlusLength=tokenStartOffset + token.getLength();
  if (CollectionUtils.isEmpty(children)) {
    if (thisNodeDepthPlusLength < keyLength) {
      resultHolder.set(TokenizerRowSearchPosition.NO_MATCH,null);
      return;
    }
  }
  for (int i=0; i < token.getLength(); ++i) {
    if (key[tokenStartOffset + keyOffset + i] != token.get(i)) {
      resultHolder.set(TokenizerRowSearchPosition.NO_MATCH,null);
      return;
    }
  }
  if (thisNodeDepthPlusLength == keyLength && numOccurrences > 0) {
    resultHolder.set(TokenizerRowSearchPosition.MATCH,this);
    return;
  }
  if (CollectionUtils.notEmpty(children)) {
    for (int i=0; i < children.size(); ++i) {
      TokenizerNode child=children.get(i);
      child.getNode(resultHolder,key,keyOffset,keyLength);
      if (resultHolder.isMatch()) {
        return;
      }
 else       if (resultHolder.getDifference() == TokenizerRowSearchPosition.BEFORE) {
        resultHolder.set(TokenizerRowSearchPosition.NO_MATCH,null);
        return;
      }
    }
  }
  resultHolder.set(TokenizerRowSearchPosition.NO_MATCH,null);
  return;
}
