{
  if (!region_a.getTableDesc().getTableName().equals(region_b.getTableDesc().getTableName())) {
    LOG.info("Can't merge regions " + region_a + ","+ region_b+ " because they do not belong to the same table");
    return false;
  }
  if (region_a.getRegionInfo().equals(region_b.getRegionInfo())) {
    LOG.info("Can't merge the same region " + region_a);
    return false;
  }
  if (!forcible && !HRegionInfo.areAdjacent(region_a.getRegionInfo(),region_b.getRegionInfo())) {
    String msg="Skip merging " + this.region_a.getRegionNameAsString() + " and "+ this.region_b.getRegionNameAsString()+ ", because they are not adjacent.";
    LOG.info(msg);
    return false;
  }
  if (!this.region_a.isMergeable() || !this.region_b.isMergeable()) {
    return false;
  }
  try {
    boolean regionAHasMergeQualifier=hasMergeQualifierInMeta(services,region_a.getRegionName());
    if (regionAHasMergeQualifier || hasMergeQualifierInMeta(services,region_b.getRegionName())) {
      LOG.debug("Region " + (regionAHasMergeQualifier ? region_a.getRegionNameAsString() : region_b.getRegionNameAsString()) + " is not mergeable because it has merge qualifier in META");
      return false;
    }
  }
 catch (  IOException e) {
    LOG.warn("Failed judging whether merge transaction is available for " + region_a.getRegionNameAsString() + " and "+ region_b.getRegionNameAsString(),e);
    return false;
  }
  this.mergedRegionInfo=getMergedRegionInfo(region_a.getRegionInfo(),region_b.getRegionInfo());
  return true;
}
