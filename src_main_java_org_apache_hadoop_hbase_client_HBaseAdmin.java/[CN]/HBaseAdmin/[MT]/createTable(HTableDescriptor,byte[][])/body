{
  HTableDescriptor.isLegalTableName(desc.getName());
  try {
    createTableAsync(desc,splitKeys);
  }
 catch (  SocketTimeoutException ste) {
    LOG.warn("Creating " + desc.getNameAsString() + " took too long",ste);
  }
  int numRegs=splitKeys == null ? 1 : splitKeys.length + 1;
  for (int tries=0; tries < numRetries; tries++) {
    try {
      final AtomicInteger actualRegCount=new AtomicInteger(0);
      MetaScannerVisitor visitor=new MetaScannerVisitor(){
        public boolean processRow(        Result rowResult) throws IOException {
          HRegionInfo info=Writables.getHRegionInfo(rowResult.getValue(HConstants.CATALOG_FAMILY,HConstants.REGIONINFO_QUALIFIER));
          if (!(Bytes.equals(info.getTableName(),desc.getName()))) {
            return false;
          }
          String hostAndPort=null;
          byte[] value=rowResult.getValue(HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER);
          if (value != null && value.length > 0) {
            hostAndPort=Bytes.toString(value);
          }
          if (!(info.isOffline() || info.isSplit()) && hostAndPort != null) {
            actualRegCount.incrementAndGet();
          }
          return true;
        }
      }
;
      MetaScanner.metaScan(conf,visitor,desc.getName());
      if (actualRegCount.get() == numRegs)       break;
    }
 catch (    RegionException e) {
      if (tries == numRetries - 1) {
        throw e;
      }
    }
    try {
      Thread.sleep(getPauseTime(tries));
    }
 catch (    InterruptedException e) {
    }
  }
}
