{
  HStoreKey[] keys={new HStoreKey(new Text("row1"),HConstants.COL_REGIONINFO),new HStoreKey(new Text("row2"),HConstants.COL_SERVER),new HStoreKey(new Text("row3"),HConstants.COL_STARTCODE)};
  ImmutableBytesWritable[] values={new ImmutableBytesWritable("value1".getBytes()),new ImmutableBytesWritable("value2".getBytes()),new ImmutableBytesWritable("value3".getBytes())};
  @SuppressWarnings("unchecked") MapWritable inMap=new MapWritable(HStoreKey.class,ImmutableBytesWritable.class,(Map)new TreeMap<HStoreKey,ImmutableBytesWritable>());
  for (int i=0; i < keys.length; i++) {
    inMap.put(keys[i],values[i]);
  }
  ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  DataOutput out=new DataOutputStream(bytes);
  try {
    inMap.write(out);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
  MapWritable outMap=new MapWritable();
  DataInput in=new DataInputStream(new ByteArrayInputStream(bytes.toByteArray()));
  try {
    outMap.readFields(in);
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw e;
  }
  if (outMap.size() != inMap.size()) {
    System.err.println("outMap.size()=" + outMap.size() + " != "+ "inMap.size()="+ inMap.size());
  }
  for (  Map.Entry<WritableComparable,Writable> e : inMap.entrySet()) {
    if (!outMap.containsKey(e.getKey())) {
      System.err.println("outMap does not contain key " + e.getKey().toString());
      continue;
    }
    if (((WritableComparable)outMap.get(e.getKey())).compareTo(e.getValue()) != 0) {
      System.err.println("output value for " + e.getKey().toString() + " != input value");
    }
  }
  System.out.println("it worked!");
}
