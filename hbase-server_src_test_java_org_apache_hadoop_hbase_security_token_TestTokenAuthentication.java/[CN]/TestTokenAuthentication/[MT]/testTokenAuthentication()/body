{
  UserGroupInformation testuser=UserGroupInformation.createUserForTesting("testuser",new String[]{"testgroup"});
  testuser.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.TOKEN);
  final Configuration conf=TEST_UTIL.getConfiguration();
  testuser.setConfiguration(conf);
  Token<AuthenticationTokenIdentifier> token=secretManager.generateToken("testuser");
  LOG.debug("Got token: " + token.toString());
  testuser.addToken(token);
  testuser.doAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration c=server.getConfiguration();
      c.set(HConstants.CLUSTER_ID,clusterId.toString());
      AuthenticationProtos.AuthenticationService.BlockingInterface proxy=(AuthenticationProtos.AuthenticationService.BlockingInterface)HBaseRPC.waitForProxy(BlockingAuthenticationService.class,BlockingAuthenticationService.VERSION,server.getAddress(),c,HConstants.DEFAULT_HBASE_CLIENT_RPC_MAXATTEMPTS,HConstants.DEFAULT_HBASE_RPC_TIMEOUT,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
      AuthenticationProtos.WhoAmIResponse response=proxy.whoami(null,AuthenticationProtos.WhoAmIRequest.getDefaultInstance());
      String myname=response.getUsername();
      assertEquals("testuser",myname);
      String authMethod=response.getAuthMethod();
      assertEquals("TOKEN",authMethod);
      return null;
    }
  }
);
}
