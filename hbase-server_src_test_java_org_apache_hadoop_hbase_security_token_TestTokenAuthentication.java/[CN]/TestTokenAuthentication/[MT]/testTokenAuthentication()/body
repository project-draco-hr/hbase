{
  UserGroupInformation testuser=UserGroupInformation.createUserForTesting("testuser",new String[]{"testgroup"});
  testuser.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.TOKEN);
  final Configuration conf=TEST_UTIL.getConfiguration();
  UserGroupInformation.setConfiguration(conf);
  Token<AuthenticationTokenIdentifier> token=secretManager.generateToken("testuser");
  LOG.debug("Got token: " + token.toString());
  testuser.addToken(token);
  testuser.doAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      Configuration c=server.getConfiguration();
      ProtobufRpcClientEngine rpcClient=new ProtobufRpcClientEngine(c,clusterId.toString());
      try {
        AuthenticationProtos.AuthenticationService.BlockingInterface proxy=HBaseClientRPC.waitForProxy(rpcClient,BlockingAuthenticationService.class,server.getAddress(),c,HConstants.DEFAULT_HBASE_CLIENT_RPC_MAXATTEMPTS,HConstants.DEFAULT_HBASE_RPC_TIMEOUT,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
        AuthenticationProtos.WhoAmIResponse response=proxy.whoami(null,AuthenticationProtos.WhoAmIRequest.getDefaultInstance());
        String myname=response.getUsername();
        assertEquals("testuser",myname);
        String authMethod=response.getAuthMethod();
        assertEquals("TOKEN",authMethod);
      }
  finally {
        rpcClient.close();
      }
      return null;
    }
  }
);
}
