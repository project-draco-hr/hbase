{
  this.conf=conf;
  this.startcode=EnvironmentEdgeManager.currentTime();
  String hostname=Strings.domainNamePointerToHostName(DNS.getDefaultHost("default","default"));
  int port=0;
  InetSocketAddress initialIsa=new InetSocketAddress(hostname,port);
  if (initialIsa.getAddress() == null) {
    throw new IllegalArgumentException("Failed resolve of " + initialIsa);
  }
  final List<BlockingServiceAndInterface> sai=new ArrayList<BlockingServiceAndInterface>(1);
  final BlockingService service=AuthenticationProtos.AuthenticationService.newReflectiveBlockingService(this);
  final org.apache.hadoop.hbase.shaded.com.google.protobuf.BlockingService proxy=new org.apache.hadoop.hbase.shaded.com.google.protobuf.BlockingService(){
    @Override public Message callBlockingMethod(    MethodDescriptor md,    org.apache.hadoop.hbase.shaded.com.google.protobuf.RpcController controller,    Message param) throws org.apache.hadoop.hbase.shaded.com.google.protobuf.ServiceException {
      com.google.protobuf.Descriptors.MethodDescriptor methodDescriptor=service.getDescriptorForType().findMethodByName(md.getName());
      com.google.protobuf.Message request=service.getRequestPrototype(methodDescriptor);
      com.google.protobuf.Message response=null;
      try {
        response=service.callBlockingMethod(methodDescriptor,null,request);
      }
 catch (      ServiceException e) {
        throw new org.apache.hadoop.hbase.shaded.com.google.protobuf.ServiceException(e);
      }
      return null;
    }
    @Override public ServiceDescriptor getDescriptorForType(){
      return null;
    }
    @Override public Message getRequestPrototype(    MethodDescriptor arg0){
      return null;
    }
    @Override public Message getResponsePrototype(    MethodDescriptor arg0){
      return null;
    }
  }
;
  sai.add(new BlockingServiceAndInterface(proxy,AuthenticationProtos.AuthenticationService.BlockingInterface.class));
  this.rpcServer=new RpcServer(this,"tokenServer",sai,initialIsa,conf,new FifoRpcScheduler(conf,1));
  InetSocketAddress address=rpcServer.getListenerAddress();
  if (address == null) {
    throw new IOException("Listener channel is closed");
  }
  this.isa=address;
  this.sleeper=new Sleeper(1000,this);
}
