{
  Configuration zkConf=new Configuration(conf);
  zkConf.set(User.HBASE_SECURITY_CONF_KEY,"simple");
  this.zookeeper=new ZooKeeperWatcher(zkConf,TokenServer.class.getSimpleName(),this,true);
  this.rpcServer.start();
  final RegionServerServices mockServices=TEST_UTIL.createMockRegionServerService(rpcServer);
  super.start(new RegionCoprocessorEnvironment(){
    @Override public HRegion getRegion(){
      return null;
    }
    @Override public RegionServerServices getRegionServerServices(){
      return mockServices;
    }
    @Override public ConcurrentMap<String,Object> getSharedData(){
      return null;
    }
    @Override public int getVersion(){
      return 0;
    }
    @Override public String getHBaseVersion(){
      return null;
    }
    @Override public Coprocessor getInstance(){
      return null;
    }
    @Override public int getPriority(){
      return 0;
    }
    @Override public int getLoadSequence(){
      return 0;
    }
    @Override public Configuration getConfiguration(){
      return conf;
    }
    @Override public HTableInterface getTable(    TableName tableName) throws IOException {
      return null;
    }
    @Override public HTableInterface getTable(    TableName tableName,    ExecutorService service) throws IOException {
      return null;
    }
    @Override public ClassLoader getClassLoader(){
      return Thread.currentThread().getContextClassLoader();
    }
    @Override public HRegionInfo getRegionInfo(){
      return null;
    }
  }
);
  started=true;
}
