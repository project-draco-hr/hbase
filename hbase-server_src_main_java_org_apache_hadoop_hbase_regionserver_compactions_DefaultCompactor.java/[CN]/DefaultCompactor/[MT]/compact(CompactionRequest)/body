{
  FileDetails fd=getFileDetails(request.getFiles(),request.isMajor());
  this.progress=new CompactionProgress(fd.maxKeyCount);
  List<StoreFileScanner> scanners=createFileScanners(request.getFiles());
  StoreFile.Writer writer=null;
  List<Path> newFiles=new ArrayList<Path>();
  long smallestReadPoint=setSmallestReadPoint();
  try {
    InternalScanner scanner=null;
    try {
      ScanType scanType=request.isMajor() ? ScanType.COMPACT_DROP_DELETES : ScanType.COMPACT_RETAIN_DELETES;
      scanner=preCreateCoprocScanner(request,scanType,fd.earliestPutTs,scanners);
      if (scanner == null) {
        scanner=createScanner(store,scanners,scanType,smallestReadPoint,fd.earliestPutTs);
      }
      scanner=postCreateCoprocScanner(request,scanType,scanner);
      if (scanner == null) {
        return newFiles;
      }
      writer=store.createWriterInTmp(fd.maxKeyCount,this.compactionCompression,true);
      boolean finished=performCompaction(scanner,writer,smallestReadPoint);
      if (!finished) {
        abortWriter(writer);
        writer=null;
        throw new InterruptedIOException("Aborting compaction of store " + store + " in region "+ store.getRegionInfo().getRegionNameAsString()+ " because it was interrupted.");
      }
    }
  finally {
      if (scanner != null) {
        scanner.close();
      }
    }
  }
  finally {
    if (writer != null) {
      writer.appendMetadata(fd.maxSeqId,request.isMajor());
      writer.close();
      newFiles.add(writer.getPath());
    }
  }
  return newFiles;
}
