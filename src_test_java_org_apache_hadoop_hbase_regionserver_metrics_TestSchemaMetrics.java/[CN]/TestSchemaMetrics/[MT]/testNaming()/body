{
  final String metricPrefix=(useTableName ? "tbl." + TABLE_NAME + "." : "") + "cf." + CF_NAME+ ".";
  SchemaMetrics schemaMetrics=SchemaMetrics.getInstance(TABLE_NAME,CF_NAME);
  SchemaMetrics ALL_CF_METRICS=SchemaMetrics.ALL_SCHEMA_METRICS;
  assertEquals(metricPrefix + "fsRead",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,false,BlockMetricType.READ_TIME));
  assertEquals(metricPrefix + "compactionRead",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,true,BlockMetricType.READ_TIME));
  assertEquals(metricPrefix + "fsBlockReadCnt",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,false,BlockMetricType.READ_COUNT));
  assertEquals(metricPrefix + "fsBlockReadCacheHitCnt",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,false,BlockMetricType.CACHE_HIT));
  assertEquals(metricPrefix + "fsBlockReadCacheMissCnt",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,false,BlockMetricType.CACHE_MISS));
  assertEquals(metricPrefix + "compactionBlockReadCnt",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,true,BlockMetricType.READ_COUNT));
  assertEquals(metricPrefix + "compactionBlockReadCacheHitCnt",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,true,BlockMetricType.CACHE_HIT));
  assertEquals(metricPrefix + "compactionBlockReadCacheMissCnt",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,true,BlockMetricType.CACHE_MISS));
  assertEquals("fsMetaBlockReadCnt",ALL_CF_METRICS.getBlockMetricName(BlockCategory.META,false,BlockMetricType.READ_COUNT));
  assertEquals("fsMetaBlockReadCacheHitCnt",ALL_CF_METRICS.getBlockMetricName(BlockCategory.META,false,BlockMetricType.CACHE_HIT));
  assertEquals("fsMetaBlockReadCacheMissCnt",ALL_CF_METRICS.getBlockMetricName(BlockCategory.META,false,BlockMetricType.CACHE_MISS));
  assertEquals(metricPrefix + "bt.Index.fsBlockReadCnt",schemaMetrics.getBlockMetricName(BlockCategory.INDEX,false,BlockMetricType.READ_COUNT));
  assertEquals(metricPrefix + "bt.Data.compactionBlockReadCacheHitCnt",schemaMetrics.getBlockMetricName(BlockCategory.DATA,true,BlockMetricType.CACHE_HIT));
  assertEquals(metricPrefix + "compactionMetaBlockReadCacheHitCnt",schemaMetrics.getBlockMetricName(BlockCategory.META,true,BlockMetricType.CACHE_HIT));
  assertEquals(metricPrefix + "blockCacheSize",schemaMetrics.getBlockMetricName(BlockCategory.ALL_CATEGORIES,false,BlockMetricType.CACHE_SIZE));
  assertEquals(metricPrefix + "bt.Index.blockCacheNumEvicted",schemaMetrics.getBlockMetricName(BlockCategory.INDEX,false,BlockMetricType.EVICTED));
  assertEquals("bt.Data.blockCacheNumCached",ALL_CF_METRICS.getBlockMetricName(BlockCategory.DATA,false,BlockMetricType.CACHED));
  assertEquals("blockCacheNumCached",ALL_CF_METRICS.getBlockMetricName(BlockCategory.ALL_CATEGORIES,false,BlockMetricType.CACHED));
  try {
    ALL_CF_METRICS.getBlockMetricName(BlockCategory.ALL_CATEGORIES,true,BlockMetricType.CACHE_SIZE);
    fail("Exception expected");
  }
 catch (  IllegalArgumentException ex) {
  }
  assertEquals("keyMaybeInBloomCnt",ALL_CF_METRICS.getBloomMetricName(true));
  assertEquals(metricPrefix + "keyNotInBloomCnt",schemaMetrics.getBloomMetricName(false));
  schemaMetrics.printMetricNames();
}
