{
  byte[] tableName=Bytes.toBytes("testBulkDeleteColumnVersionBasedOnTS");
  Table ht=createTable(tableName);
  List<Put> puts=new ArrayList<Put>(100);
  for (int j=0; j < 100; j++) {
    Put put=new Put(Bytes.toBytes(j));
    byte[] value="v1".getBytes();
    put.add(FAMILY1,QUALIFIER1,1000L,value);
    put.add(FAMILY1,QUALIFIER2,1000L,value);
    put.add(FAMILY1,QUALIFIER3,1000L,value);
    value="v2".getBytes();
    put.add(FAMILY1,QUALIFIER1,1234L,value);
    put.add(FAMILY1,QUALIFIER2,1234L,value);
    put.add(FAMILY1,QUALIFIER3,1234L,value);
    value="v3".getBytes();
    put.add(FAMILY1,QUALIFIER1,value);
    put.add(FAMILY1,QUALIFIER2,value);
    put.add(FAMILY1,QUALIFIER3,value);
    puts.add(put);
  }
  ht.put(puts);
  Scan scan=new Scan();
  scan.addColumn(FAMILY1,QUALIFIER3);
  long noOfRowsDeleted=invokeBulkDeleteProtocol(tableName,scan,500,DeleteType.VERSION,1234L);
  assertEquals(100,noOfRowsDeleted);
  int rows=0;
  scan=new Scan();
  scan.setMaxVersions();
  for (  Result result : ht.getScanner(scan)) {
    assertEquals(3,result.getFamilyMap(FAMILY1).size());
    assertEquals(3,result.getColumnCells(FAMILY1,QUALIFIER1).size());
    assertEquals(3,result.getColumnCells(FAMILY1,QUALIFIER2).size());
    List<Cell> column=result.getColumnCells(FAMILY1,QUALIFIER3);
    assertEquals(2,column.size());
    assertTrue(CellUtil.matchingValue(column.get(0),"v3".getBytes()));
    assertTrue(CellUtil.matchingValue(column.get(1),"v1".getBytes()));
    rows++;
  }
  assertEquals(100,rows);
  ht.close();
}
