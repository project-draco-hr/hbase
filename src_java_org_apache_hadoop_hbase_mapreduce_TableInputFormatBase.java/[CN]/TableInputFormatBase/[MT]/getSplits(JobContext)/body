{
  Pair<byte[][],byte[][]> keys=table.getStartEndKeys();
  if (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {
    throw new IOException("Expecting at least one region.");
  }
  if (table == null) {
    throw new IOException("No table was provided.");
  }
  int count=0;
  List<InputSplit> splits=new ArrayList<InputSplit>(keys.getFirst().length);
  for (int i=0; i < keys.getFirst().length; i++) {
    String regionLocation=table.getRegionLocation(keys.getFirst()[i]).getServerAddress().getHostname();
    byte[] startRow=scan.getStartRow();
    byte[] stopRow=scan.getStopRow();
    if ((startRow.length == 0 || keys.getSecond()[i].length == 0 || Bytes.compareTo(startRow,keys.getSecond()[i]) < 0) && (stopRow.length == 0 || Bytes.compareTo(stopRow,keys.getFirst()[i]) > 0)) {
      byte[] splitStart=startRow.length == 0 || Bytes.compareTo(keys.getFirst()[i],startRow) >= 0 ? keys.getFirst()[i] : startRow;
      byte[] splitStop=(stopRow.length == 0 || Bytes.compareTo(keys.getSecond()[i],stopRow) <= 0) && keys.getSecond()[i].length > 0 ? keys.getSecond()[i] : stopRow;
      InputSplit split=new TableSplit(table.getTableName(),splitStart,splitStop,regionLocation);
      splits.add(split);
      if (LOG.isDebugEnabled())       LOG.debug("getSplits: split -> " + (count++) + " -> "+ split);
    }
  }
  return splits;
}
