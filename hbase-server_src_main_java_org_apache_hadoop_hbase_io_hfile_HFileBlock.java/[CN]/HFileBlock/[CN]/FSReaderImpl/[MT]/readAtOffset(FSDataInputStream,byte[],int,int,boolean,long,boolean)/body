{
  if (peekIntoNextBlock && destOffset + size + hdrSize > dest.length) {
    throw new IOException("Attempted to read " + size + " bytes and "+ hdrSize+ " bytes of next header into a "+ dest.length+ "-byte array at offset "+ destOffset);
  }
  if (!pread && streamLock.tryLock()) {
    try {
      istream.seek(fileOffset);
      long realOffset=istream.getPos();
      if (realOffset != fileOffset) {
        throw new IOException("Tried to seek to " + fileOffset + " to "+ "read "+ size+ " bytes, but pos="+ realOffset+ " after seek");
      }
      if (!peekIntoNextBlock) {
        IOUtils.readFully(istream,dest,destOffset,size);
        return -1;
      }
      if (!readWithExtra(istream,dest,destOffset,size,hdrSize))       return -1;
    }
  finally {
      streamLock.unlock();
    }
  }
 else {
    int extraSize=peekIntoNextBlock ? hdrSize : 0;
    int ret=istream.read(fileOffset,dest,destOffset,size + extraSize);
    if (ret < size) {
      throw new IOException("Positional read of " + size + " bytes "+ "failed at offset "+ fileOffset+ " (returned "+ ret+ ")");
    }
    if (ret == size || ret < size + extraSize) {
      return -1;
    }
  }
  assert peekIntoNextBlock;
  return Bytes.toInt(dest,destOffset + size + BlockType.MAGIC_LENGTH) + hdrSize;
}
