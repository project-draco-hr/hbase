{
  buf.rewind();
{
    BlockType blockTypeFromBuf=BlockType.read(buf);
    if (blockTypeFromBuf != blockType) {
      throw new IOException("Block type stored in the buffer: " + blockTypeFromBuf + ", block type field: "+ blockType);
    }
  }
  sanityCheckAssertion(buf.getInt(),onDiskSizeWithoutHeader,"onDiskSizeWithoutHeader");
  sanityCheckAssertion(buf.getInt(),uncompressedSizeWithoutHeader,"uncompressedSizeWithoutHeader");
  sanityCheckAssertion(buf.getLong(),prevBlockOffset,"prevBlocKOffset");
  if (this.fileContext.isUseHBaseChecksum()) {
    sanityCheckAssertion(buf.get(),this.fileContext.getChecksumType().getCode(),"checksumType");
    sanityCheckAssertion(buf.getInt(),this.fileContext.getBytesPerChecksum(),"bytesPerChecksum");
    sanityCheckAssertion(buf.getInt(),onDiskDataSizeWithHeader,"onDiskDataSizeWithHeader");
  }
  int cksumBytes=totalChecksumBytes();
  int hdrSize=headerSize();
  int expectedBufLimit=uncompressedSizeWithoutHeader + headerSize() + cksumBytes;
  if (buf.limit() != expectedBufLimit) {
    throw new AssertionError("Expected buffer limit " + expectedBufLimit + ", got "+ buf.limit());
  }
  int size=uncompressedSizeWithoutHeader + hdrSize + cksumBytes;
  if (buf.capacity() != size && buf.capacity() != size + hdrSize) {
    throw new AssertionError("Invalid buffer capacity: " + buf.capacity() + ", expected "+ size+ " or "+ (size + hdrSize));
  }
}
