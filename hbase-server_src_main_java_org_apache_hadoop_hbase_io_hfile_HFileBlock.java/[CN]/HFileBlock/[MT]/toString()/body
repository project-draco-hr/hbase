{
  StringBuilder sb=new StringBuilder().append("HFileBlock [").append(" fileOffset=").append(offset).append(" headerSize()=").append(headerSize()).append(" blockType=").append(blockType).append(" onDiskSizeWithoutHeader=").append(onDiskSizeWithoutHeader).append(" uncompressedSizeWithoutHeader=").append(uncompressedSizeWithoutHeader).append(" prevBlockOffset=").append(prevBlockOffset).append(" isUseHBaseChecksum()=").append(fileContext.isUseHBaseChecksum());
  if (fileContext.isUseHBaseChecksum()) {
    sb.append(" checksumType=").append(ChecksumType.codeToType(this.buf.get(24))).append(" bytesPerChecksum=").append(this.buf.getInt(24 + 1)).append(" onDiskDataSizeWithHeader=").append(onDiskDataSizeWithHeader);
  }
 else {
    sb.append(" onDiskDataSizeWithHeader=").append(onDiskDataSizeWithHeader).append("(").append(onDiskSizeWithoutHeader).append("+").append(HConstants.HFILEBLOCK_HEADER_SIZE_NO_CHECKSUM).append(")");
  }
  sb.append(" getOnDiskSizeWithHeader()=").append(getOnDiskSizeWithHeader()).append(" totalChecksumBytes()=").append(totalChecksumBytes()).append(" isUnpacked()=").append(isUnpacked()).append(" buf=[ ").append(buf).append(", array().length=").append(buf.array().length).append(", arrayOffset()=").append(buf.arrayOffset()).append(" ]").append(" dataBeginsWith=").append(Bytes.toStringBinary(buf.array(),buf.arrayOffset() + headerSize(),Math.min(32,buf.limit() - buf.arrayOffset() - headerSize()))).append(" fileContext=").append(fileContext).append(" ]");
  return sb.toString();
}
