{
  this.fs=fs;
  this.path=p;
  this.cacheConf=cacheConf;
  this.dataBlockEncoder=dataBlockEncoder == null ? NoOpDataBlockEncoder.INSTANCE : dataBlockEncoder;
  if (HFileLink.isHFileLink(p)) {
    this.link=new HFileLink(conf,p);
    LOG.debug("Store file " + p + " is a link");
  }
 else   if (isReference(p)) {
    this.reference=Reference.read(fs,p);
    this.referencePath=getReferredToFile(this.path);
    if (HFileLink.isHFileLink(this.referencePath)) {
      this.link=new HFileLink(conf,this.referencePath);
    }
    LOG.debug("Store file " + p + " is a "+ reference.getFileRegion()+ " reference to "+ this.referencePath);
  }
 else   if (!isHFile(p)) {
    throw new IOException("path=" + path + " doesn't look like a valid StoreFile");
  }
  if (BloomFilterFactory.isGeneralBloomEnabled(conf)) {
    this.cfBloomType=cfBloomType;
  }
 else {
    LOG.info("Ignoring bloom filter check for file " + path + ": "+ "cfBloomType="+ cfBloomType+ " (disabled in config)");
    this.cfBloomType=BloomType.NONE;
  }
  FileStatus[] stats=FSUtils.listStatus(fs,p,null);
  if (stats != null && stats.length == 1) {
    this.modificationTimeStamp=stats[0].getModificationTime();
  }
 else {
    this.modificationTimeStamp=0;
  }
}
