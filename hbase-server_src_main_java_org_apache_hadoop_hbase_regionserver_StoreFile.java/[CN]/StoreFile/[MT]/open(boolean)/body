{
  if (this.reader != null) {
    throw new IllegalAccessError("Already open");
  }
  this.reader=fileInfo.open(this.fs,this.cacheConf,canUseDropBehind);
  metadataMap=Collections.unmodifiableMap(this.reader.loadFileInfo());
  byte[] b=metadataMap.get(MAX_SEQ_ID_KEY);
  if (b != null) {
    this.sequenceid=Bytes.toLong(b);
    if (fileInfo.isTopReference()) {
      this.sequenceid+=1;
    }
  }
  if (isBulkLoadResult()) {
    String fileName=this.getPath().getName();
    int startPos=fileName.lastIndexOf("SeqId_");
    if (startPos != -1) {
      this.sequenceid=Long.parseLong(fileName.substring(startPos + 6,fileName.indexOf('_',startPos + 6)));
      if (fileInfo.isTopReference()) {
        this.sequenceid+=1;
      }
    }
    this.reader.setSkipResetSeqId(isSkipResetSeqId(metadataMap.get(SKIP_RESET_SEQ_ID)));
    this.reader.setBulkLoaded(true);
  }
  this.reader.setSequenceID(this.sequenceid);
  b=metadataMap.get(HFile.Writer.MAX_MEMSTORE_TS_KEY);
  if (b != null) {
    this.maxMemstoreTS=Bytes.toLong(b);
  }
  b=metadataMap.get(MAJOR_COMPACTION_KEY);
  if (b != null) {
    boolean mc=Bytes.toBoolean(b);
    if (this.majorCompaction == null) {
      this.majorCompaction=new AtomicBoolean(mc);
    }
 else {
      this.majorCompaction.set(mc);
    }
  }
 else {
    this.majorCompaction=new AtomicBoolean(false);
  }
  b=metadataMap.get(EXCLUDE_FROM_MINOR_COMPACTION_KEY);
  this.excludeFromMinorCompaction=(b != null && Bytes.toBoolean(b));
  BloomType hfileBloomType=reader.getBloomFilterType();
  if (cfBloomType != BloomType.NONE) {
    reader.loadBloomfilter(BlockType.GENERAL_BLOOM_META);
    if (hfileBloomType != cfBloomType) {
      LOG.info("HFile Bloom filter type for " + reader.getHFileReader().getName() + ": "+ hfileBloomType+ ", but "+ cfBloomType+ " specified in column family "+ "configuration");
    }
  }
 else   if (hfileBloomType != BloomType.NONE) {
    LOG.info("Bloom filter turned off by CF config for " + reader.getHFileReader().getName());
  }
  reader.loadBloomfilter(BlockType.DELETE_FAMILY_BLOOM_META);
  try {
    byte[] timerangeBytes=metadataMap.get(TIMERANGE_KEY);
    if (timerangeBytes != null) {
      this.reader.timeRangeTracker=new TimeRangeTracker();
      Writables.copyWritable(timerangeBytes,this.reader.timeRangeTracker);
    }
  }
 catch (  IllegalArgumentException e) {
    LOG.error("Error reading timestamp range data from meta -- " + "proceeding without",e);
    this.reader.timeRangeTracker=null;
  }
  return this.reader;
}
