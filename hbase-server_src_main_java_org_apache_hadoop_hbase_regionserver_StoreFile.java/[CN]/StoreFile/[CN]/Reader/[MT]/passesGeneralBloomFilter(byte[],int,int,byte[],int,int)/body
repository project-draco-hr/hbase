{
  BloomFilter bloomFilter=this.generalBloomFilter;
  if (bloomFilter == null) {
    return true;
  }
  byte[] key=null;
  KeyValue kvKey=null;
switch (bloomFilterType) {
case ROW:
    if (col != null) {
      throw new RuntimeException("Row-only Bloom filter called with " + "column specified");
    }
  if (rowOffset != 0 || rowLen != row.length) {
    throw new AssertionError("For row-only Bloom filters the row " + "must occupy the whole array");
  }
key=row;
break;
case ROWCOL:
kvKey=KeyValueUtil.createFirstOnRow(row,rowOffset,rowLen,HConstants.EMPTY_BYTE_ARRAY,0,0,col,colOffset,colLen);
break;
default :
return true;
}
if (reader.getTrailer().getEntryCount() == 0) return false;
try {
boolean shouldCheckBloom;
ByteBuff bloom;
if (bloomFilter.supportsAutoLoading()) {
bloom=null;
shouldCheckBloom=true;
}
 else {
bloom=reader.getMetaBlock(HFile.BLOOM_FILTER_DATA_KEY,true);
shouldCheckBloom=bloom != null;
}
if (shouldCheckBloom) {
boolean exists;
boolean keyIsAfterLast=(lastBloomKey != null);
if (keyIsAfterLast) {
if (bloomFilterType == BloomType.ROW) {
keyIsAfterLast=(Bytes.BYTES_RAWCOMPARATOR.compare(key,lastBloomKey) > 0);
}
 else {
keyIsAfterLast=(CellComparator.COMPARATOR.compare(kvKey,lastBloomKeyOnlyKV)) > 0;
}
}
if (bloomFilterType == BloomType.ROWCOL) {
KeyValue rowBloomKey=KeyValueUtil.createFirstOnRow(row,rowOffset,rowLen,HConstants.EMPTY_BYTE_ARRAY,0,0,HConstants.EMPTY_BYTE_ARRAY,0,0);
if (keyIsAfterLast && (CellComparator.COMPARATOR.compare(rowBloomKey,lastBloomKeyOnlyKV)) > 0) {
exists=false;
}
 else {
exists=bloomFilter.contains(kvKey,bloom) || bloomFilter.contains(rowBloomKey,bloom);
}
}
 else {
exists=!keyIsAfterLast && bloomFilter.contains(key,0,key.length,bloom);
}
return exists;
}
}
 catch (IOException e) {
LOG.error("Error reading bloom filter data -- proceeding without",e);
setGeneralBloomFilterFaulty();
}
catch (IllegalArgumentException e) {
LOG.error("Bad bloom filter data -- proceeding without",e);
setGeneralBloomFilterFaulty();
}
return true;
}
