{
  final byte[] TEST_ROW1=Bytes.toBytes("r1");
  final byte[] TEST_Q1=Bytes.toBytes("q1");
  final byte[] TEST_Q2=Bytes.toBytes("q2");
  final byte[] ZERO=Bytes.toBytes(0L);
  final User user1=User.createUserForTesting(conf,"user1",new String[0]);
  final User user2=User.createUserForTesting(conf,"user2",new String[0]);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          Map<String,Permission> permsU1andOwner=prepareCellPermissions(new String[]{user1.getShortName(),USER_OWNER.getShortName()},Action.READ,Action.WRITE);
          Map<String,Permission> permsU2andGUandOwner=prepareCellPermissions(new String[]{user2.getShortName(),AuthUtil.toGroupEntry(GROUP),USER_OWNER.getShortName()},Action.READ,Action.WRITE);
          Put p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q1,(long)123,ZERO);
          p.setACL(permsU1andOwner);
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q2,(long)123,ZERO);
          p.setACL(permsU2andGUandOwner);
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q1,(long)127,ZERO);
          p.setACL(permsU2andGUandOwner);
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q2,(long)127,ZERO);
          p.setACL(permsU1andOwner);
          t.put(p);
        }
       }
       return null;
    }
  }
,USER_OWNER);
  user1.runAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          Increment inc=new Increment(TEST_ROW1);
          inc.setTimeRange(0,123);
          inc.addColumn(TEST_FAMILY1,TEST_Q1,2L);
          t.increment(inc);
          t.incrementColumnValue(TEST_ROW1,TEST_FAMILY1,TEST_Q2,1L);
        }
       }
       return null;
    }
  }
);
  verifyUserDeniedForIncrementMultipleVersions(user2,TEST_ROW1,TEST_Q2);
  verifyUserDeniedForIncrementMultipleVersions(GROUP_USER,TEST_ROW1,TEST_Q2);
}
