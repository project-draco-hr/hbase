{
  conf=TEST_UTIL.getConfiguration();
  conf.set("hbase.master.hfilecleaner.plugins","org.apache.hadoop.hbase.master.cleaner.HFileLinkCleaner," + "org.apache.hadoop.hbase.master.snapshot.SnapshotHFileCleaner");
  conf.set("hbase.master.logcleaner.plugins","org.apache.hadoop.hbase.master.snapshot.SnapshotLogCleaner");
  SecureTestUtil.enableSecurity(conf);
  verifyConfiguration(conf);
  conf.setBoolean(AccessController.EXEC_PERMISSION_CHECKS_KEY,true);
  TEST_UTIL.startMiniCluster();
  MasterCoprocessorHost cpHost=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterCoprocessorHost();
  cpHost.load(AccessController.class,Coprocessor.PRIORITY_HIGHEST,conf);
  ACCESS_CONTROLLER=(AccessController)cpHost.findCoprocessor(AccessController.class.getName());
  cpHost.createEnvironment(AccessController.class,ACCESS_CONTROLLER,Coprocessor.PRIORITY_HIGHEST,1,conf);
  RegionServerCoprocessorHost rsHost=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getRegionServerCoprocessorHost();
  rsHost.createEnvironment(AccessController.class,ACCESS_CONTROLLER,Coprocessor.PRIORITY_HIGHEST,1,conf);
  TEST_UTIL.waitTableEnabled(AccessControlLists.ACL_TABLE_NAME.getName());
  USER_OWNER=User.createUserForTesting(conf,"owner",new String[0]);
}
