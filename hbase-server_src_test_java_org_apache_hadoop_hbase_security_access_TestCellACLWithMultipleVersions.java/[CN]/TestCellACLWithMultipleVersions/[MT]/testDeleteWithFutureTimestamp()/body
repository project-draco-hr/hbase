{
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          Put p=new Put(TEST_ROW).add(TEST_FAMILY1,TEST_Q2,ONE);
          Map<String,Permission> readAndWritePerms=prepareCellPermissions(usersAndGroups,Action.READ,Action.WRITE);
          p.setACL(readAndWritePerms);
          t.put(p);
          p=new Put(TEST_ROW).add(TEST_FAMILY2,TEST_Q2,ONE);
          p.setACL(readAndWritePerms);
          t.put(p);
          LOG.info("Stored at current time");
          p=new Put(TEST_ROW).add(TEST_FAMILY1,TEST_Q1,EnvironmentEdgeManager.currentTime() + 1000000,ZERO);
          p.setACL(prepareCellPermissions(new String[]{USER_OTHER.getShortName(),AuthUtil.toGroupEntry(GROUP)},Action.READ));
          t.put(p);
        }
       }
       return null;
    }
  }
,USER_OWNER);
  AccessTestAction getQ1=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Get get=new Get(TEST_ROW).addColumn(TEST_FAMILY1,TEST_Q1);
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          return t.get(get).listCells();
        }
       }
     }
  }
;
  AccessTestAction getQ2=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Get get=new Get(TEST_ROW).addColumn(TEST_FAMILY1,TEST_Q2);
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          return t.get(get).listCells();
        }
       }
     }
  }
;
  verifyAllowed(getQ1,USER_OWNER,USER_OTHER,GROUP_USER);
  verifyAllowed(getQ2,USER_OWNER,USER_OTHER,GROUP_USER);
  AccessTestAction deleteFamily1=getDeleteFamilyAction(TEST_FAMILY1);
  AccessTestAction deleteFamily2=getDeleteFamilyAction(TEST_FAMILY2);
  verifyAllowed(deleteFamily1,USER_OTHER);
  verifyAllowed(deleteFamily2,GROUP_USER);
  verifyAllowed(getQ1,USER_OWNER,USER_OTHER,GROUP_USER);
  verifyIfNull(getQ2,USER_OTHER,GROUP_USER);
}
