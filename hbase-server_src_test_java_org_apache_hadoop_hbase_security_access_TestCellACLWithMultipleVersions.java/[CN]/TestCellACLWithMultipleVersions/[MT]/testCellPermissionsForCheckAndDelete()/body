{
  final byte[] TEST_ROW1=Bytes.toBytes("r1");
  final byte[] TEST_Q3=Bytes.toBytes("q3");
  final byte[] ZERO=Bytes.toBytes(0L);
  final User user1=User.createUserForTesting(conf,"user1",new String[0]);
  final User user2=User.createUserForTesting(conf,"user2",new String[0]);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          Map<String,Permission> permsU1andOwner=prepareCellPermissions(new String[]{user1.getShortName(),USER_OWNER.getShortName()},Action.READ,Action.WRITE);
          Map<String,Permission> permsU1andU2andGUandOwner=prepareCellPermissions(new String[]{user1.getShortName(),user2.getShortName(),AuthUtil.toGroupEntry(GROUP),USER_OWNER.getShortName()},Action.READ,Action.WRITE);
          Map<String,Permission> permsU1_U2andGU=prepareCellPermissions(new String[]{user1.getShortName(),user2.getShortName(),AuthUtil.toGroupEntry(GROUP)},Action.READ,Action.WRITE);
          Put p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q1,(long)120,ZERO);
          p.addColumn(TEST_FAMILY1,TEST_Q2,(long)120,ZERO);
          p.addColumn(TEST_FAMILY1,TEST_Q3,(long)120,ZERO);
          p.setACL(permsU1andU2andGUandOwner);
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q1,(long)123,ZERO);
          p.addColumn(TEST_FAMILY1,TEST_Q2,(long)123,ZERO);
          p.addColumn(TEST_FAMILY1,TEST_Q3,(long)123,ZERO);
          p.setACL(permsU1andOwner);
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q1,(long)127,ZERO);
          p.setACL(permsU1_U2andGU);
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q2,(long)127,ZERO);
          p.setACL(user2.getShortName(),new Permission(Permission.Action.READ));
          t.put(p);
          p=new Put(TEST_ROW1);
          p.addColumn(TEST_FAMILY1,TEST_Q3,127,ZERO);
          p.setACL(AuthUtil.toGroupEntry(GROUP),new Permission(Permission.Action.READ));
          t.put(p);
        }
       }
       return null;
    }
  }
,USER_OWNER);
  user1.runAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      try (Connection connection=ConnectionFactory.createConnection(conf)){
        try (Table t=connection.getTable(TEST_TABLE.getTableName())){
          Delete d=new Delete(TEST_ROW1);
          d.deleteColumns(TEST_FAMILY1,TEST_Q1,120);
          t.checkAndDelete(TEST_ROW1,TEST_FAMILY1,TEST_Q1,ZERO,d);
        }
       }
       return null;
    }
  }
);
  verifyUserDeniedForCheckAndDelete(user2,TEST_ROW1,ZERO);
  verifyUserDeniedForCheckAndDelete(GROUP_USER,TEST_ROW1,ZERO);
  verifyUserAllowedforCheckAndDelete(user2,TEST_ROW1,TEST_Q2,ZERO);
  verifyUserAllowedforCheckAndDelete(GROUP_USER,TEST_ROW1,TEST_Q3,ZERO);
}
