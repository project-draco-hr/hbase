{
  String rowKeyStr=Bytes.toString(result.getRow());
  if (result.isEmpty()) {
    LOG.error("Error checking data for key [" + rowKeyStr + "], no data returned");
    return false;
  }
  if (!verifyValues && !verifyCfAndColumnIntegrity) {
    return true;
  }
  byte[][] expectedCfs=dataGenerator.getColumnFamilies();
  if (verifyCfAndColumnIntegrity && (expectedCfs.length != result.getMap().size())) {
    LOG.error("Error checking data for key [" + rowKeyStr + "], bad family count: "+ result.getMap().size());
    return false;
  }
  for (  byte[] cf : result.getMap().keySet()) {
    String cfStr=Bytes.toString(cf);
    Map<byte[],byte[]> columnValues=result.getFamilyMap(cf);
    if (columnValues == null) {
      LOG.error("Error checking data for key [" + rowKeyStr + "], no data for family ["+ cfStr+ "]]");
      return false;
    }
    Map<String,MutationType> mutateInfo=null;
    if (verifyCfAndColumnIntegrity || verifyValues) {
      if (!columnValues.containsKey(MUTATE_INFO)) {
        LOG.error("Error checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column ["+ Bytes.toString(MUTATE_INFO)+ "]; value is not found");
        return false;
      }
      long cfHash=Arrays.hashCode(cf);
      byte[] mutateInfoValue=columnValues.remove(MUTATE_INFO);
      mutateInfo=parseMutateInfo(mutateInfoValue);
      for (      Map.Entry<String,MutationType> mutate : mutateInfo.entrySet()) {
        if (mutate.getValue() == MutationType.DELETE) {
          byte[] column=Bytes.toBytes(mutate.getKey());
          long columnHash=Arrays.hashCode(column);
          long hashCode=cfHash + columnHash;
          if (hashCode % 2 == 0) {
            if (columnValues.containsKey(column)) {
              LOG.error("Error checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column ["+ mutate.getKey()+ "]; should be deleted");
              return false;
            }
            byte[] hashCodeBytes=Bytes.toBytes(hashCode);
            columnValues.put(column,hashCodeBytes);
          }
        }
      }
      if (!columnValues.containsKey(INCREMENT)) {
        LOG.error("Error checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column ["+ Bytes.toString(INCREMENT)+ "]; value is not found");
        return false;
      }
      long currentValue=Bytes.toLong(columnValues.remove(INCREMENT));
      if (verifyValues) {
        long amount=mutateInfo.isEmpty() ? 0 : cfHash;
        long originalValue=Arrays.hashCode(result.getRow());
        long extra=currentValue - originalValue;
        if (extra != 0 && (amount == 0 || extra % amount != 0)) {
          LOG.error("Error checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column [increment], extra ["+ extra+ "], amount ["+ amount+ "]");
          return false;
        }
        if (amount != 0 && extra != amount) {
          LOG.warn("Warning checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column [increment], incremented ["+ (extra / amount)+ "] times");
        }
      }
      if (verifyCfAndColumnIntegrity && !dataGenerator.verify(result.getRow(),cf,columnValues.keySet())) {
        String colsStr="";
        for (        byte[] col : columnValues.keySet()) {
          if (colsStr.length() > 0) {
            colsStr+=", ";
          }
          colsStr+="[" + Bytes.toString(col) + "]";
        }
        LOG.error("Error checking data for key [" + rowKeyStr + "], bad columns for family ["+ cfStr+ "]: "+ colsStr);
        return false;
      }
      if (verifyValues) {
        for (        Map.Entry<byte[],byte[]> kv : columnValues.entrySet()) {
          String column=Bytes.toString(kv.getKey());
          MutationType mutation=mutateInfo.get(column);
          boolean verificationNeeded=true;
          byte[] bytes=kv.getValue();
          if (mutation != null) {
            boolean mutationVerified=true;
            long columnHash=Arrays.hashCode(kv.getKey());
            long hashCode=cfHash + columnHash;
            byte[] hashCodeBytes=Bytes.toBytes(hashCode);
            if (mutation == MutationType.APPEND) {
              int offset=bytes.length - hashCodeBytes.length;
              mutationVerified=offset > 0 && Bytes.equals(hashCodeBytes,0,hashCodeBytes.length,bytes,offset,hashCodeBytes.length);
              if (mutationVerified) {
                int n=1;
                while (true) {
                  int newOffset=offset - hashCodeBytes.length;
                  if (newOffset < 0 || !Bytes.equals(hashCodeBytes,0,hashCodeBytes.length,bytes,newOffset,hashCodeBytes.length)) {
                    break;
                  }
                  offset=newOffset;
                  n++;
                }
                if (n > 1) {
                  LOG.warn("Warning checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column ["+ column+ "], appended ["+ n+ "] times");
                }
                byte[] dest=new byte[offset];
                System.arraycopy(bytes,0,dest,0,offset);
                bytes=dest;
              }
            }
 else             if (hashCode % 2 == 0) {
              mutationVerified=Bytes.equals(bytes,hashCodeBytes);
              verificationNeeded=false;
            }
            if (!mutationVerified) {
              LOG.error("Error checking data for key [" + rowKeyStr + "], mutation checking failed for column family ["+ cfStr+ "], column ["+ column+ "]; mutation ["+ mutation+ "], hashCode ["+ hashCode+ "], verificationNeeded ["+ verificationNeeded+ "]");
              return false;
            }
          }
          if (verificationNeeded && !dataGenerator.verify(result.getRow(),cf,kv.getKey(),bytes)) {
            LOG.error("Error checking data for key [" + rowKeyStr + "], column family ["+ cfStr+ "], column ["+ column+ "], mutation ["+ mutation+ "]; value of length "+ bytes.length);
            return false;
          }
        }
      }
    }
  }
  return true;
}
