{
  Stoppable stop=new StoppableImplementation();
  Configuration conf=UTIL.getConfiguration();
  final Path testDir=UTIL.getDataTestDir();
  final FileSystem fs=UTIL.getTestFileSystem();
  String confKey="hbase.test.cleaner.delegates";
  conf.set(confKey,AlwaysDelete.class.getName());
  AllValidPaths chore=new AllValidPaths("test-file-cleaner",stop,conf,fs,testDir,confKey);
  AlwaysDelete delegate=(AlwaysDelete)chore.cleanersChain.get(0);
  AlwaysDelete spy=Mockito.spy(delegate);
  chore.cleanersChain.set(0,spy);
  final Path parent=new Path(testDir,"parent");
  Path file=new Path(parent,"someFile");
  fs.mkdirs(parent);
  fs.create(file).close();
  assertTrue("Test file didn't get created.",fs.exists(file));
  final Path addedFile=new Path(parent,"addedFile");
  Mockito.doAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      fs.create(addedFile).close();
      FSUtils.logFileSystemState(fs,testDir,LOG);
      return (Boolean)invocation.callRealMethod();
    }
  }
).when(spy).isFileDeletable(Mockito.any(Path.class));
  chore.chore();
  assertTrue("Added file unexpectedly deleted",fs.exists(addedFile));
  assertTrue("Parent directory deleted unexpectedly",fs.exists(parent));
  assertFalse("Original file unexpectedly retained",fs.exists(file));
  Mockito.verify(spy,Mockito.times(1)).isFileDeletable(Mockito.any(Path.class));
  Mockito.reset(spy);
}
