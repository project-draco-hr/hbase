{
  createStoreFile(r);
  assertFalse(r.compactIfNeeded());
  for (int i=0; i < COMPACTION_THRESHOLD; i++) {
    createStoreFile(r);
  }
  addContent(new HRegionIncommon(r),COLUMN_FAMILY);
  Cell[] cellValues=r.get(STARTROW,COLUMN_FAMILY_TEXT,100);
  assertTrue(cellValues.length >= 5);
  final HRegion region=this.r;
  Thread t1=new Thread(){
    @Override public void run(){
      try {
        region.flushcache();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
;
  Thread t2=new Thread(){
    @Override public void run(){
      try {
        assertTrue(region.compactIfNeeded());
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
;
  t1.setDaemon(true);
  t1.start();
  t2.setDaemon(true);
  t2.start();
  t1.join();
  t2.join();
  byte[] secondRowBytes=START_KEY.getBytes(HConstants.UTF8_ENCODING);
  secondRowBytes[START_KEY_BYTES.length - 1]++;
  Text secondRow=new Text(secondRowBytes);
  cellValues=r.get(secondRow,COLUMN_FAMILY_TEXT,100);
  LOG.info("Count of " + secondRow + ": "+ cellValues.length);
  assertTrue(cellValues.length == 3 || cellValues.length == 4);
  r.deleteAll(STARTROW,COLUMN_FAMILY_TEXT,System.currentTimeMillis());
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,100));
  r.flushcache();
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,100));
  createSmallerStoreFile(this.r);
  assertTrue(r.compactIfNeeded());
  cellValues=r.get(STARTROW,COLUMN_FAMILY_TEXT,100);
  assertNull(cellValues);
  for (  MapFile.Reader reader : this.r.stores.get(COLUMN_FAMILY_TEXT_MINUS_COLON).getReaders()) {
    reader.reset();
    HStoreKey key=new HStoreKey();
    ImmutableBytesWritable val=new ImmutableBytesWritable();
    while (reader.next(key,val)) {
      assertFalse(key.getRow().equals(STARTROW));
    }
  }
}
