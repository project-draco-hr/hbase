{
  createStoreFile(r);
  for (int i=0; i < COMPACTION_THRESHOLD; i++) {
    createStoreFile(r);
  }
  addContent(new HRegionIncommon(r),Bytes.toString(COLUMN_FAMILY));
  Cell[] cellValues=r.get(STARTROW,COLUMN_FAMILY_TEXT,100);
  assertTrue(cellValues.length == 3);
  r.flushcache();
  r.compactStores();
  byte[] secondRowBytes=START_KEY.getBytes(HConstants.UTF8_ENCODING);
  secondRowBytes[START_KEY_BYTES.length - 1]++;
  cellValues=r.get(secondRowBytes,COLUMN_FAMILY_TEXT,100);
  LOG.info("Count of " + Bytes.toString(secondRowBytes) + ": "+ cellValues.length);
  assertTrue(cellValues.length == 3 || cellValues.length == 4);
  r.deleteAll(STARTROW,COLUMN_FAMILY_TEXT,System.currentTimeMillis());
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,100));
  r.flushcache();
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,100));
  createSmallerStoreFile(this.r);
  r.flushcache();
  r.compactStores();
  cellValues=r.get(STARTROW,COLUMN_FAMILY_TEXT,100);
  assertNull(cellValues);
  for (  MapFile.Reader reader : this.r.stores.get(Bytes.mapKey(COLUMN_FAMILY_TEXT_MINUS_COLON)).getReaders()) {
    reader.reset();
    HStoreKey key=new HStoreKey();
    ImmutableBytesWritable val=new ImmutableBytesWritable();
    while (reader.next(key,val)) {
      assertFalse(Bytes.equals(key.getRow(),STARTROW));
    }
  }
}
