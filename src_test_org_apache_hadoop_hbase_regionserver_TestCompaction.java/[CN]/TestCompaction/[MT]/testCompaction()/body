{
  createStoreFile(r);
  for (int i=0; i < COMPACTION_THRESHOLD; i++) {
    createStoreFile(r);
  }
  addContent(new HRegionIncommon(r),Bytes.toString(COLUMN_FAMILY));
  Cell[] cellValues=r.get(STARTROW,COLUMN_FAMILY_TEXT,-1,100);
  assertTrue(cellValues.length == 3);
  r.flushcache();
  r.compactStores();
  byte[] secondRowBytes=START_KEY.getBytes(HConstants.UTF8_ENCODING);
  secondRowBytes[START_KEY_BYTES.length - 1]++;
  cellValues=r.get(secondRowBytes,COLUMN_FAMILY_TEXT,-1,100);
  LOG.info("Count of " + Bytes.toString(secondRowBytes) + ": "+ cellValues.length);
  assertTrue(cellValues.length == 3);
  r.deleteAll(STARTROW,COLUMN_FAMILY_TEXT,System.currentTimeMillis(),null);
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,-1,100));
  r.flushcache();
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,-1,100));
  createSmallerStoreFile(this.r);
  r.flushcache();
  cellValues=r.get(STARTROW,COLUMN_FAMILY_TEXT,-1,100);
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,-1,100));
  r.compactStores(true);
  assertEquals(r.getStore(COLUMN_FAMILY_TEXT).getStorefiles().size(),1);
  assertNull(r.get(STARTROW,COLUMN_FAMILY_TEXT,-1,100));
  boolean containsStartRow=false;
  for (  MapFile.Reader reader : this.r.stores.get(Bytes.mapKey(COLUMN_FAMILY_TEXT_MINUS_COLON)).getReaders()) {
    reader.reset();
    HStoreKey key=new HStoreKey();
    ImmutableBytesWritable val=new ImmutableBytesWritable();
    while (reader.next(key,val)) {
      if (Bytes.equals(key.getRow(),STARTROW)) {
        containsStartRow=true;
        break;
      }
    }
    if (containsStartRow) {
      break;
    }
  }
  assertTrue(containsStartRow);
  final int ttlInSeconds=1;
  for (  HStore store : this.r.stores.values()) {
    store.ttl=ttlInSeconds * 1000;
  }
  Thread.sleep(ttlInSeconds * 1000);
  r.compactStores(true);
  int count=0;
  for (  MapFile.Reader reader : this.r.stores.get(Bytes.mapKey(COLUMN_FAMILY_TEXT_MINUS_COLON)).getReaders()) {
    reader.reset();
    HStoreKey key=new HStoreKey();
    ImmutableBytesWritable val=new ImmutableBytesWritable();
    while (reader.next(key,val)) {
      count++;
    }
  }
  assertTrue(count == 0);
}
