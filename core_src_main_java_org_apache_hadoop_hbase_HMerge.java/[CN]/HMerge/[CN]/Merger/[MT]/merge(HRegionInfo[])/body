{
  if (info.length < 2) {
    LOG.info("only one region - nothing to merge");
    return false;
  }
  HRegion currentRegion=null;
  long currentSize=0;
  HRegion nextRegion=null;
  long nextSize=0;
  for (int i=0; i < info.length - 1; i++) {
    if (currentRegion == null) {
      currentRegion=HRegion.newHRegion(tabledir,hlog,fs,conf,info[i],null);
      currentRegion.initialize(null,null);
      currentSize=currentRegion.getLargestHStoreSize();
    }
    nextRegion=HRegion.newHRegion(tabledir,hlog,fs,conf,info[i + 1],null);
    nextRegion.initialize(null,null);
    nextSize=nextRegion.getLargestHStoreSize();
    if ((currentSize + nextSize) <= (maxFilesize / 2)) {
      LOG.info("merging regions " + Bytes.toString(currentRegion.getRegionName()) + " and "+ Bytes.toString(nextRegion.getRegionName()));
      HRegion mergedRegion=HRegion.mergeAdjacent(currentRegion,nextRegion);
      updateMeta(currentRegion.getRegionName(),nextRegion.getRegionName(),mergedRegion);
      break;
    }
    LOG.info("not merging regions " + Bytes.toString(currentRegion.getRegionName()) + " and "+ Bytes.toString(nextRegion.getRegionName()));
    currentRegion.close();
    currentRegion=nextRegion;
    currentSize=nextSize;
  }
  if (currentRegion != null) {
    currentRegion.close();
  }
  return true;
}
