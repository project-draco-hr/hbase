{
  final HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
  final AccessControllerProtocol protocol=acl.coprocessorProxy(AccessControllerProtocol.class,TEST_TABLE);
  PrivilegedExceptionAction<Void> globalAdmin=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkGlobalPerms(Permission.Action.ADMIN);
      return null;
    }
  }
;
  verifyGlobal(globalAdmin);
  PrivilegedExceptionAction<Void> globalReadWrite=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkGlobalPerms(Permission.Action.READ,Permission.Action.WRITE);
      return null;
    }
  }
;
  verifyGlobal(globalReadWrite);
  final byte[] TEST_Q1=Bytes.toBytes("q1");
  final byte[] TEST_Q2=Bytes.toBytes("q2");
  User userTable=User.createUserForTesting(conf,"user_check_perms_table",new String[0]);
  User userColumn=User.createUserForTesting(conf,"user_check_perms_family",new String[0]);
  User userQualifier=User.createUserForTesting(conf,"user_check_perms_q",new String[0]);
  grant(protocol,userTable,TEST_TABLE,null,null,Permission.Action.READ);
  grant(protocol,userColumn,TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
  grant(protocol,userQualifier,TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ);
  PrivilegedExceptionAction<Void> tableRead=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,null,null,Permission.Action.READ);
      return null;
    }
  }
;
  PrivilegedExceptionAction<Void> columnRead=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
      return null;
    }
  }
;
  PrivilegedExceptionAction<Void> qualifierRead=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ);
      return null;
    }
  }
;
  PrivilegedExceptionAction<Void> multiQualifierRead=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,new Permission[]{new TablePermission(TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ),new TablePermission(TEST_TABLE,TEST_FAMILY,TEST_Q2,Permission.Action.READ)});
      return null;
    }
  }
;
  PrivilegedExceptionAction<Void> globalAndTableRead=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,new Permission[]{new Permission(Permission.Action.READ),new TablePermission(TEST_TABLE,null,(byte[])null,Permission.Action.READ)});
      return null;
    }
  }
;
  PrivilegedExceptionAction<Void> noCheck=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,new Permission[0]);
      return null;
    }
  }
;
  verifyAllowed(tableRead,SUPERUSER,userTable);
  verifyDenied(tableRead,userColumn,userQualifier);
  verifyAllowed(columnRead,SUPERUSER,userTable,userColumn);
  verifyDenied(columnRead,userQualifier);
  verifyAllowed(qualifierRead,SUPERUSER,userTable,userColumn,userQualifier);
  verifyAllowed(multiQualifierRead,SUPERUSER,userTable,userColumn);
  verifyDenied(multiQualifierRead,userQualifier);
  verifyAllowed(globalAndTableRead,SUPERUSER);
  verifyDenied(globalAndTableRead,userTable,userColumn,userQualifier);
  verifyAllowed(noCheck,SUPERUSER,userTable,userColumn,userQualifier);
  PrivilegedExceptionAction<Void> familyReadWrite=new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      checkTablePerms(TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ,Permission.Action.WRITE);
      return null;
    }
  }
;
  verifyAllowed(familyReadWrite,SUPERUSER,USER_OWNER,USER_RW);
  verifyDenied(familyReadWrite,USER_NONE,USER_CREATE,USER_RO);
  try {
    protocol.checkPermissions(new Permission[]{(Permission)new TablePermission(TEST_TABLE,null,(byte[])null,Permission.Action.CREATE)});
    fail("this should have thrown CoprocessorException");
  }
 catch (  CoprocessorException ex) {
  }
}
