{
  PrivilegedExceptionAction grantAction=new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
      AccessControllerProtocol protocol=acl.coprocessorProxy(AccessControllerProtocol.class,TEST_TABLE);
      protocol.grant(new UserPermission(Bytes.toBytes(USER_RO.getShortName()),TEST_TABLE,TEST_FAMILY,(byte[])null,Action.READ));
      return null;
    }
  }
;
  PrivilegedExceptionAction revokeAction=new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
      AccessControllerProtocol protocol=acl.coprocessorProxy(AccessControllerProtocol.class,TEST_TABLE);
      protocol.revoke(new UserPermission(Bytes.toBytes(USER_RO.getShortName()),TEST_TABLE,TEST_FAMILY,(byte[])null,Action.READ));
      return null;
    }
  }
;
  PrivilegedExceptionAction getPermissionsAction=new PrivilegedExceptionAction(){
    public Object run() throws Exception {
      HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
      AccessControllerProtocol protocol=acl.coprocessorProxy(AccessControllerProtocol.class,TEST_TABLE);
      protocol.getUserPermissions(TEST_TABLE);
      return null;
    }
  }
;
  verifyAllowed(grantAction,SUPERUSER,USER_ADMIN,USER_OWNER);
  verifyDenied(grantAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
  verifyAllowed(revokeAction,SUPERUSER,USER_ADMIN,USER_OWNER);
  verifyDenied(revokeAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
  verifyAllowed(getPermissionsAction,SUPERUSER,USER_ADMIN,USER_OWNER);
  verifyDenied(getPermissionsAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
}
