{
  AccessTestAction grantAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getTableName().getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.grant(protocol,USER_RO.getShortName(),TEST_TABLE.getTableName(),TEST_FAMILY,null,Action.READ);
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  AccessTestAction revokeAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getTableName().getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.revoke(protocol,USER_RO.getShortName(),TEST_TABLE.getTableName(),TEST_FAMILY,null,Action.READ);
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  AccessTestAction getTablePermissionsAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getTableName().getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.getUserPermissions(protocol,TEST_TABLE.getTableName());
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  AccessTestAction getGlobalPermissionsAction=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Connection connection=ConnectionFactory.createConnection(conf);
      Table acl=connection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        ProtobufUtil.getUserPermissions(protocol);
      }
  finally {
        acl.close();
        connection.close();
      }
      return null;
    }
  }
;
  verifyAllowed(grantAction,SUPERUSER,USER_ADMIN,USER_OWNER);
  verifyDenied(grantAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
  verifyAllowed(revokeAction,SUPERUSER,USER_ADMIN,USER_OWNER);
  verifyDenied(revokeAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
  verifyAllowed(getTablePermissionsAction,SUPERUSER,USER_ADMIN,USER_OWNER);
  verifyDenied(getTablePermissionsAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
  verifyAllowed(getGlobalPermissionsAction,SUPERUSER,USER_ADMIN);
  verifyDeniedWithException(getGlobalPermissionsAction,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE);
}
