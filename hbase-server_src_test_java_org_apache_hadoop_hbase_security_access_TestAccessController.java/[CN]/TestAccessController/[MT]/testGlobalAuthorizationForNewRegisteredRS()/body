{
  LOG.debug("Test for global authorization for a new registered RegionServer.");
  MiniHBaseCluster hbaseCluster=TEST_UTIL.getHBaseCluster();
  String currentUser=User.getCurrent().getShortName();
  String activeUserForNewRs=currentUser + ".hfs." + hbaseCluster.getLiveRegionServerThreads().size();
  grantGlobal(TEST_UTIL,activeUserForNewRs,Permission.Action.ADMIN,Permission.Action.CREATE,Permission.Action.READ,Permission.Action.WRITE);
  final Admin admin=TEST_UTIL.getHBaseAdmin();
  HTableDescriptor htd=new HTableDescriptor(TEST_TABLE2);
  htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
  createTable(TEST_UTIL,htd);
  JVMClusterUtil.RegionServerThread newRsThread=hbaseCluster.startRegionServer();
  final HRegionServer newRs=newRsThread.getRegionServer();
  List<HRegionLocation> regions;
  try (RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(TEST_TABLE2)){
    regions=locator.getAllRegionLocations();
  }
   HRegionLocation location=regions.get(0);
  final HRegionInfo hri=location.getRegionInfo();
  final ServerName server=location.getServerName();
  try (HTable table=(HTable)TEST_UTIL.getConnection().getTable(TEST_TABLE2)){
    AccessTestAction moveAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        admin.move(hri.getEncodedNameAsBytes(),Bytes.toBytes(newRs.getServerName().getServerName()));
        return null;
      }
    }
;
    SUPERUSER.runAs(moveAction);
    final int RETRIES_LIMIT=10;
    int retries=0;
    while (newRs.getOnlineRegions(TEST_TABLE2).size() < 1 && retries < RETRIES_LIMIT) {
      LOG.debug("Waiting for region to be opened. Already retried " + retries + " times.");
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
      retries++;
      if (retries == RETRIES_LIMIT - 1) {
        fail("Retry exhaust for waiting region to be opened.");
      }
    }
    AccessTestAction putAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Put put=new Put(Bytes.toBytes("test"));
        put.add(TEST_FAMILY,Bytes.toBytes("qual"),Bytes.toBytes("value"));
        table.put(put);
        return null;
      }
    }
;
    USER_ADMIN.runAs(putAction);
  }
 }
