{
  LOG.debug("Test for global authorization for a new registered RegionServer.");
  MiniHBaseCluster hbaseCluster=TEST_UTIL.getHBaseCluster();
  HTable acl=new HTable(conf,AccessControlLists.ACL_TABLE_NAME);
  try {
    BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getTableName());
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    String currentUser=User.getCurrent().getShortName();
    String activeUserForNewRs=currentUser + ".hfs." + hbaseCluster.getLiveRegionServerThreads().size();
    ProtobufUtil.grant(protocol,activeUserForNewRs,null,null,null,Permission.Action.ADMIN,Permission.Action.CREATE,Permission.Action.READ,Permission.Action.WRITE);
  }
  finally {
    acl.close();
  }
  final HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
  HTableDescriptor htd=new HTableDescriptor(TEST_TABLE2);
  htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
  admin.createTable(htd);
  JVMClusterUtil.RegionServerThread newRsThread=hbaseCluster.startRegionServer();
  final HRegionServer newRs=newRsThread.getRegionServer();
  final HTable table=new HTable(TEST_UTIL.getConfiguration(),TEST_TABLE2);
  try {
    NavigableMap<HRegionInfo,ServerName> regions=table.getRegionLocations();
    final Map.Entry<HRegionInfo,ServerName> firstRegion=regions.entrySet().iterator().next();
    PrivilegedExceptionAction moveAction=new PrivilegedExceptionAction(){
      public Object run() throws Exception {
        admin.move(firstRegion.getKey().getEncodedNameAsBytes(),Bytes.toBytes(newRs.getServerName().getServerName()));
        return null;
      }
    }
;
    SUPERUSER.runAs(moveAction);
    final int RETRIES_LIMIT=10;
    int retries=0;
    while (newRs.getOnlineRegions(TEST_TABLE2).size() < 1 && retries < RETRIES_LIMIT) {
      LOG.debug("Waiting for region to be opened. Already retried " + retries + " times.");
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e) {
      }
      retries++;
      if (retries == RETRIES_LIMIT - 1) {
        fail("Retry exhaust for waiting region to be opened.");
      }
    }
    PrivilegedExceptionAction putAction=new PrivilegedExceptionAction(){
      public Object run() throws Exception {
        Put put=new Put(Bytes.toBytes("test"));
        put.add(TEST_FAMILY,Bytes.toBytes("qual"),Bytes.toBytes("value"));
        table.put(put);
        return null;
      }
    }
;
    USER_ADMIN.runAs(putAction);
  }
  finally {
    table.close();
  }
}
