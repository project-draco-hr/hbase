{
  final TableName tableName=TableName.valueOf("testPermissionList");
  final byte[] family1=Bytes.toBytes("f1");
  final byte[] family2=Bytes.toBytes("f2");
  final byte[] qualifier=Bytes.toBytes("q");
  Admin admin=TEST_UTIL.getHBaseAdmin();
  if (admin.tableExists(tableName)) {
    deleteTable(TEST_UTIL,tableName);
  }
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor(family1));
  htd.addFamily(new HColumnDescriptor(family2));
  htd.setOwner(USER_OWNER);
  createTable(TEST_UTIL,htd);
  List<UserPermission> perms;
  Table acl=TEST_UTIL.getConnection().getTable(AccessControlLists.ACL_TABLE_NAME);
  try {
    BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    perms=ProtobufUtil.getUserPermissions(protocol,tableName);
  }
  finally {
    acl.close();
  }
  UserPermission ownerperm=new UserPermission(Bytes.toBytes(USER_OWNER.getName()),tableName,null,Action.values());
  assertTrue("Owner should have all permissions on table",hasFoundUserPermission(ownerperm,perms));
  User user=User.createUserForTesting(TEST_UTIL.getConfiguration(),"user",new String[0]);
  byte[] userName=Bytes.toBytes(user.getShortName());
  UserPermission up=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.READ);
  assertFalse("User should not be granted permission: " + up.toString(),hasFoundUserPermission(up,perms));
  grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.READ);
  acl=TEST_UTIL.getConnection().getTable(AccessControlLists.ACL_TABLE_NAME);
  try {
    BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    perms=ProtobufUtil.getUserPermissions(protocol,tableName);
  }
  finally {
    acl.close();
  }
  UserPermission upToVerify=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.READ);
  assertTrue("User should be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  upToVerify=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.WRITE);
  assertFalse("User should not be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
  acl=TEST_UTIL.getConnection().getTable(AccessControlLists.ACL_TABLE_NAME);
  try {
    BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    perms=ProtobufUtil.getUserPermissions(protocol,tableName);
  }
  finally {
    acl.close();
  }
  upToVerify=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
  assertTrue("User should be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  revokeFromTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
  acl=TEST_UTIL.getConnection().getTable(AccessControlLists.ACL_TABLE_NAME);
  try {
    BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    perms=ProtobufUtil.getUserPermissions(protocol,tableName);
  }
  finally {
    acl.close();
  }
  assertFalse("User should not be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
  admin.disableTable(tableName);
  User newOwner=User.createUserForTesting(conf,"new_owner",new String[]{});
  htd.setOwner(newOwner);
  admin.modifyTable(tableName,htd);
  acl=TEST_UTIL.getConnection().getTable(AccessControlLists.ACL_TABLE_NAME);
  try {
    BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
    AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
    perms=ProtobufUtil.getUserPermissions(protocol,tableName);
  }
  finally {
    acl.close();
  }
  UserPermission newOwnerperm=new UserPermission(Bytes.toBytes(newOwner.getName()),tableName,null,Action.values());
  assertTrue("New owner should have all permissions on table",hasFoundUserPermission(newOwnerperm,perms));
  deleteTable(TEST_UTIL,tableName);
}
