{
  final byte[] TEST_ROW=Bytes.toBytes("cellpermtest");
  final byte[] TEST_Q1=Bytes.toBytes("q1");
  final byte[] TEST_Q2=Bytes.toBytes("q2");
  final byte[] TEST_Q3=Bytes.toBytes("q3");
  final byte[] TEST_Q4=Bytes.toBytes("q4");
  final byte[] ZERO=Bytes.toBytes(0L);
  final User userOther=User.createUserForTesting(conf,"user_check_cell_perms_other",new String[0]);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        Put p;
        p=new Put(TEST_ROW).add(TEST_FAMILY,TEST_Q1,ZERO);
        p.setACL(userOther.getShortName(),new Permission(Permission.Action.READ));
        t.put(p);
        p=new Put(TEST_ROW).add(TEST_FAMILY,TEST_Q2,ZERO);
        p.setACL(userOther.getShortName(),new Permission(Permission.Action.READ,Permission.Action.WRITE));
        t.put(p);
        p=new Put(TEST_ROW).add(TEST_FAMILY,TEST_Q3,ZERO).add(TEST_FAMILY,TEST_Q4,ZERO);
        t.put(p);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
,USER_OWNER);
  AccessTestAction getQ1=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Get get=new Get(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q1);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        return t.get(get).listCells();
      }
  finally {
        t.close();
      }
    }
  }
;
  AccessTestAction getQ2=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Get get=new Get(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q2);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        return t.get(get).listCells();
      }
  finally {
        t.close();
      }
    }
  }
;
  AccessTestAction getQ3=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Get get=new Get(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q3);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        return t.get(get).listCells();
      }
  finally {
        t.close();
      }
    }
  }
;
  AccessTestAction getQ4=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Get get=new Get(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q4);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        return t.get(get).listCells();
      }
  finally {
        t.close();
      }
    }
  }
;
  verifyAllowed(getQ1,userOther);
  verifyAllowed(getQ2,userOther);
  verifyDenied(getQ3,userOther);
  verifyDenied(getQ4,userOther);
  final List<Cell> scanResults=Lists.newArrayList();
  AccessTestAction scanAction=new AccessTestAction(){
    @Override public List<Cell> run() throws Exception {
      Scan scan=new Scan();
      scan.setStartRow(TEST_ROW);
      scan.setStopRow(Bytes.add(TEST_ROW,new byte[]{0}));
      scan.addFamily(TEST_FAMILY);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        ResultScanner scanner=t.getScanner(scan);
        Result result=null;
        do {
          result=scanner.next();
          if (result != null) {
            scanResults.addAll(result.listCells());
          }
        }
 while (result != null);
      }
  finally {
        t.close();
      }
      return scanResults;
    }
  }
;
  scanResults.clear();
  verifyAllowed(scanAction,USER_OWNER);
  assertEquals(4,scanResults.size());
  scanResults.clear();
  verifyAllowed(scanAction,userOther);
  assertEquals(2,scanResults.size());
  AccessTestAction incrementQ1=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Increment i=new Increment(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q1,1L);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        t.increment(i);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
;
  AccessTestAction incrementQ2=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Increment i=new Increment(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q2,1L);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        t.increment(i);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
;
  AccessTestAction incrementQ2newDenyACL=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Increment i=new Increment(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q2,1L);
      i.setACL(userOther.getShortName(),new Permission(Permission.Action.READ));
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        t.increment(i);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
;
  AccessTestAction incrementQ3=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Increment i=new Increment(TEST_ROW).addColumn(TEST_FAMILY,TEST_Q3,1L);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        t.increment(i);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
;
  verifyDenied(incrementQ1,userOther);
  verifyDenied(incrementQ3,userOther);
  verifyAllowed(incrementQ2,userOther);
  verifyAllowed(incrementQ2newDenyACL,userOther);
  verifyDenied(incrementQ2,userOther);
  AccessTestAction deleteFamily=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Delete delete=new Delete(TEST_ROW).deleteFamily(TEST_FAMILY);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        t.delete(delete);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
;
  AccessTestAction deleteQ1=new AccessTestAction(){
    @Override public Object run() throws Exception {
      Delete delete=new Delete(TEST_ROW).deleteColumn(TEST_FAMILY,TEST_Q1);
      HTable t=new HTable(conf,TEST_TABLE.getTableName());
      try {
        t.delete(delete);
      }
  finally {
        t.close();
      }
      return null;
    }
  }
;
  verifyDenied(deleteFamily,userOther);
  verifyDenied(deleteQ1,userOther);
  verifyAllowed(deleteQ1,USER_OWNER);
}
