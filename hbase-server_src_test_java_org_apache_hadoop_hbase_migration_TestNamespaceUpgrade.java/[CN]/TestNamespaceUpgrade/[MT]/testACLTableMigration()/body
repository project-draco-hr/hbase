{
  Path rootDir=TEST_UTIL.getDataTestDirOnTestFS("testACLTable");
  FileSystem fs=TEST_UTIL.getTestFileSystem();
  Configuration conf=TEST_UTIL.getConfiguration();
  byte[] FAMILY=Bytes.toBytes("l");
  byte[] QUALIFIER=Bytes.toBytes("testUser");
  byte[] VALUE=Bytes.toBytes("RWCA");
  HTableDescriptor aclTable=new HTableDescriptor(TableName.valueOf("testACLTable"));
  aclTable.addFamily(new HColumnDescriptor(FAMILY));
  FSTableDescriptors fstd=new FSTableDescriptors(fs,rootDir);
  fstd.createTableDescriptor(aclTable);
  HRegionInfo hriAcl=new HRegionInfo(aclTable.getTableName(),null,null);
  HRegion region=HRegion.createHRegion(hriAcl,rootDir,conf,aclTable);
  try {
    Put p=new Put(Bytes.toBytes("-ROOT-"));
    p.addImmutable(FAMILY,QUALIFIER,VALUE);
    region.put(p);
    p=new Put(Bytes.toBytes(".META."));
    p.addImmutable(FAMILY,QUALIFIER,VALUE);
    region.put(p);
    p=new Put(Bytes.toBytes("_acl_"));
    p.addImmutable(FAMILY,QUALIFIER,VALUE);
    region.put(p);
    NamespaceUpgrade upgrade=new NamespaceUpgrade();
    upgrade.updateAcls(region);
    Get g=new Get(Bytes.toBytes("-ROOT-"));
    Result r=region.get(g);
    assertTrue(r == null || r.size() == 0);
    g=new Get(AccessControlLists.ACL_TABLE_NAME.toBytes());
    r=region.get(g);
    assertTrue(r != null && r.size() == 1);
    assertTrue(Bytes.compareTo(VALUE,r.getValue(FAMILY,QUALIFIER)) == 0);
    g=new Get(TableName.META_TABLE_NAME.toBytes());
    r=region.get(g);
    assertTrue(r != null && r.size() == 1);
    assertTrue(Bytes.compareTo(VALUE,r.getValue(FAMILY,QUALIFIER)) == 0);
  }
  finally {
    region.close();
    HRegionFileSystem.deleteRegionFromFileSystem(conf,fs,FSUtils.getTableDir(rootDir,hriAcl.getTable()),hriAcl);
  }
}
