{
  int period=0;
  byte[][] families=new byte[][]{Bytes.toBytes("cf")};
  byte[] qf=Bytes.toBytes("cq");
  HRegionServer regionServer=mock(HRegionServer.class);
  List<Region> regions=new ArrayList<Region>();
  when(regionServer.getOnlineRegionsLocalContext()).thenReturn(regions);
  when(regionServer.getConfiguration()).thenReturn(TEST_UTIL.getConfiguration());
  HTableDescriptor htd=getTableDesc(TableName.valueOf("testIsStale"),families);
  Region primary=initHRegion(htd,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,0);
  Region replica1=initHRegion(htd,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,1);
  regions.add(primary);
  regions.add(replica1);
  StaleStorefileRefresherChore chore=new StaleStorefileRefresherChore(period,regionServer,new StoppableImplementation());
  putData(primary,0,100,qf,families);
  primary.flush(true);
  verifyData(primary,0,100,qf,families);
  try {
    verifyData(replica1,0,100,qf,families);
    Assert.fail("should have failed");
  }
 catch (  AssertionError ex) {
  }
  chore.chore();
  verifyData(replica1,0,100,qf,families);
  ((FailingHRegionFileSystem)((HRegion)replica1).getRegionFileSystem()).fail=true;
  putData(primary,100,100,qf,families);
  primary.flush(true);
  verifyData(primary,0,200,qf,families);
  chore.chore();
  verifyData(replica1,0,100,qf,families);
  try {
    verifyData(replica1,100,100,qf,families);
    Assert.fail("should have failed");
  }
 catch (  AssertionError ex) {
  }
  chore.isStale=true;
  chore.chore();
  try {
    verifyData(replica1,0,100,qf,families);
    Assert.fail("should have failed with IOException");
  }
 catch (  IOException ex) {
  }
}
