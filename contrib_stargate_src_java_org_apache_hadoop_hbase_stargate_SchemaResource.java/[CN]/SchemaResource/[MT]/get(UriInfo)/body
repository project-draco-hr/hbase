{
  if (LOG.isDebugEnabled()) {
    LOG.debug("GET " + uriInfo.getAbsolutePath());
  }
  try {
    HTableDescriptor htd=getTableSchema();
    TableSchemaModel model=new TableSchemaModel();
    model.setName(tableName);
    for (    Map.Entry<ImmutableBytesWritable,ImmutableBytesWritable> e : htd.getValues().entrySet()) {
      model.addAttribute(Bytes.toString(e.getKey().get()),Bytes.toString(e.getValue().get()));
    }
    for (    HColumnDescriptor hcd : htd.getFamilies()) {
      ColumnSchemaModel columnModel=new ColumnSchemaModel();
      columnModel.setName(hcd.getNameAsString());
      for (      Map.Entry<ImmutableBytesWritable,ImmutableBytesWritable> e : hcd.getValues().entrySet()) {
        columnModel.addAttribute(Bytes.toString(e.getKey().get()),Bytes.toString(e.getValue().get()));
      }
      model.addColumnFamily(columnModel);
    }
    ResponseBuilder response=Response.ok(model);
    response.cacheControl(cacheControl);
    return response.build();
  }
 catch (  TableNotFoundException e) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.SERVICE_UNAVAILABLE);
  }
}
