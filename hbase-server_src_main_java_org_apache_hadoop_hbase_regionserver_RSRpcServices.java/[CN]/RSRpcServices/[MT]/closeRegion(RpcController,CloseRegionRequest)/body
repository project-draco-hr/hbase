{
  final ServerName sn=(request.hasDestinationServer() ? ProtobufUtil.toServerName(request.getDestinationServer()) : null);
  try {
    checkOpen();
    if (request.hasServerStartCode()) {
      long serverStartCode=request.getServerStartCode();
      if (regionServer.serverName.getStartcode() != serverStartCode) {
        throw new ServiceException(new DoNotRetryIOException("This RPC was intended for a " + "different server with startCode: " + serverStartCode + ", this server is: "+ regionServer.serverName));
      }
    }
    final String encodedRegionName=ProtobufUtil.getRegionEncodedName(request.getRegion());
    final HRegion region=regionServer.getFromOnlineRegions(encodedRegionName);
    if ((region != null) && (region.getCoprocessorHost() != null)) {
      region.getCoprocessorHost().preClose(false);
    }
    requestCount.increment();
    LOG.info("Close " + encodedRegionName + ", moving to "+ sn);
    CloseRegionCoordination.CloseRegionDetails crd=regionServer.getCoordinatedStateManager().getCloseRegionCoordination().parseFromProtoRequest(request);
    boolean closed=regionServer.closeRegion(encodedRegionName,false,crd,sn);
    CloseRegionResponse.Builder builder=CloseRegionResponse.newBuilder().setClosed(closed);
    return builder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
}
