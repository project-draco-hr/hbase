{
  try {
    checkOpen();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
  PayloadCarryingRpcController controller=(PayloadCarryingRpcController)rpcc;
  CellScanner cellScanner=controller != null ? controller.cellScanner() : null;
  if (controller != null)   controller.setCellScanner(null);
  long nonceGroup=request.hasNonceGroup() ? request.getNonceGroup() : HConstants.NO_NONCE;
  List<CellScannable> cellsToReturn=null;
  MultiResponse.Builder responseBuilder=MultiResponse.newBuilder();
  RegionActionResult.Builder regionActionResultBuilder=RegionActionResult.newBuilder();
  Boolean processed=null;
  for (  RegionAction regionAction : request.getRegionActionList()) {
    this.requestCount.add(regionAction.getActionCount());
    OperationQuota quota;
    HRegion region;
    regionActionResultBuilder.clear();
    try {
      region=getRegion(regionAction.getRegion());
      quota=getQuotaManager().checkQuota(region,regionAction.getActionList());
    }
 catch (    IOException e) {
      regionActionResultBuilder.setException(ResponseConverter.buildException(e));
      responseBuilder.addRegionActionResult(regionActionResultBuilder.build());
      continue;
    }
    if (regionAction.hasAtomic() && regionAction.getAtomic()) {
      try {
        if (request.hasCondition()) {
          Condition condition=request.getCondition();
          byte[] row=condition.getRow().toByteArray();
          byte[] family=condition.getFamily().toByteArray();
          byte[] qualifier=condition.getQualifier().toByteArray();
          CompareOp compareOp=CompareOp.valueOf(condition.getCompareType().name());
          ByteArrayComparable comparator=ProtobufUtil.toComparator(condition.getComparator());
          processed=checkAndRowMutate(region,regionAction.getActionList(),cellScanner,row,family,qualifier,compareOp,comparator);
        }
 else {
          ClientProtos.RegionLoadStats stats=mutateRows(region,regionAction.getActionList(),cellScanner);
          if (stats != null) {
            responseBuilder.addRegionActionResult(RegionActionResult.newBuilder().addResultOrException(ResultOrException.newBuilder().setLoadStats(stats)));
          }
          processed=Boolean.TRUE;
        }
      }
 catch (      IOException e) {
        regionActionResultBuilder.setException(ResponseConverter.buildException(e));
      }
    }
 else {
      cellsToReturn=doNonAtomicRegionMutation(region,quota,regionAction,cellScanner,regionActionResultBuilder,cellsToReturn,nonceGroup);
    }
    responseBuilder.addRegionActionResult(regionActionResultBuilder.build());
    quota.close();
  }
  if (cellsToReturn != null && !cellsToReturn.isEmpty() && controller != null) {
    controller.setCellScanner(CellUtil.createCellScanner(cellsToReturn));
  }
  if (processed != null)   responseBuilder.setProcessed(processed);
  return responseBuilder.build();
}
