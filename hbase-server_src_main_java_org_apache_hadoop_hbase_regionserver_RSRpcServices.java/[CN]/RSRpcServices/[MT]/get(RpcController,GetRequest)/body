{
  long before=EnvironmentEdgeManager.currentTime();
  OperationQuota quota=null;
  try {
    checkOpen();
    requestCount.increment();
    Region region=getRegion(request.getRegion());
    GetResponse.Builder builder=GetResponse.newBuilder();
    ClientProtos.Get get=request.getGet();
    Boolean existence=null;
    Result r=null;
    RpcCallContext context=RpcServer.getCurrentCall();
    quota=getQuotaManager().checkQuota(region,OperationQuota.OperationType.GET);
    Get clientGet=ProtobufUtil.toGet(get);
    if (get.getExistenceOnly() && region.getCoprocessorHost() != null) {
      existence=region.getCoprocessorHost().preExists(clientGet);
    }
    if (existence == null) {
      if (context != null) {
        r=get(clientGet,((HRegion)region),null,context);
      }
 else {
        r=region.get(clientGet);
      }
      if (get.getExistenceOnly()) {
        boolean exists=r.getExists();
        if (region.getCoprocessorHost() != null) {
          exists=region.getCoprocessorHost().postExists(clientGet,exists);
        }
        existence=exists;
      }
    }
    if (existence != null) {
      ClientProtos.Result pbr=ProtobufUtil.toResult(existence,region.getRegionInfo().getReplicaId() != 0);
      builder.setResult(pbr);
    }
 else     if (r != null) {
      ClientProtos.Result pbr=ProtobufUtil.toResult(r);
      builder.setResult(pbr);
    }
    if (r != null) {
      quota.addGetResult(r);
    }
    return builder.build();
  }
 catch (  IOException ie) {
    throw new ServiceException(ie);
  }
 finally {
    if (regionServer.metricsRegionServer != null) {
      regionServer.metricsRegionServer.updateGet(EnvironmentEdgeManager.currentTime() - before);
    }
    if (quota != null) {
      quota.close();
    }
  }
}
