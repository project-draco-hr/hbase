{
  long before=EnvironmentEdgeManager.currentTime();
  boolean batchContainsPuts=false, batchContainsDelete=false;
  try {
    for (Iterator<HLogSplitter.MutationReplay> it=mutations.iterator(); it.hasNext(); ) {
      HLogSplitter.MutationReplay m=it.next();
      if (m.type == MutationType.PUT) {
        batchContainsPuts=true;
      }
 else {
        batchContainsDelete=true;
      }
      NavigableMap<byte[],List<Cell>> map=m.mutation.getFamilyCellMap();
      List<Cell> metaCells=map.get(WALEdit.METAFAMILY);
      if (metaCells != null && !metaCells.isEmpty()) {
        for (        Cell metaCell : metaCells) {
          CompactionDescriptor compactionDesc=WALEdit.getCompaction(metaCell);
          if (compactionDesc != null) {
            region.completeCompactionMarker(compactionDesc);
          }
        }
        it.remove();
      }
    }
    requestCount.add(mutations.size());
    if (!region.getRegionInfo().isMetaTable()) {
      regionServer.cacheFlusher.reclaimMemStoreMemory();
    }
    return region.batchReplay(mutations.toArray(new HLogSplitter.MutationReplay[mutations.size()]),replaySeqId);
  }
  finally {
    if (regionServer.metricsRegionServer != null) {
      long after=EnvironmentEdgeManager.currentTime();
      if (batchContainsPuts) {
        regionServer.metricsRegionServer.updatePut(after - before);
      }
      if (batchContainsDelete) {
        regionServer.metricsRegionServer.updateDelete(after - before);
      }
    }
  }
}
