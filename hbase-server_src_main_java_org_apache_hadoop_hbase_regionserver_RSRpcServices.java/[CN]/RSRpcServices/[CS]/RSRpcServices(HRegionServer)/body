{
  regionServer=rs;
  RpcSchedulerFactory rpcSchedulerFactory;
  try {
    Class<?> rpcSchedulerFactoryClass=rs.conf.getClass(REGION_SERVER_RPC_SCHEDULER_FACTORY_CLASS,SimpleRpcSchedulerFactory.class);
    rpcSchedulerFactory=((RpcSchedulerFactory)rpcSchedulerFactoryClass.newInstance());
  }
 catch (  InstantiationException e) {
    throw new IllegalArgumentException(e);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException(e);
  }
  String hostname=getHostname(rs.conf);
  int port=rs.conf.getInt(HConstants.REGIONSERVER_PORT,HConstants.DEFAULT_REGIONSERVER_PORT);
  if (this instanceof MasterRpcServices) {
    port=rs.conf.getInt(HConstants.MASTER_PORT,HConstants.DEFAULT_MASTER_PORT);
  }
  InetSocketAddress initialIsa=new InetSocketAddress(hostname,port);
  InetSocketAddress bindAddress=new InetSocketAddress(rs.conf.get("hbase.regionserver.ipc.address",hostname),port);
  if (initialIsa.getAddress() == null) {
    throw new IllegalArgumentException("Failed resolve of " + initialIsa);
  }
  priority=new AnnotationReadingPriorityFunction(this);
  String name=rs.getProcessName() + "/" + initialIsa.toString();
  ConnectionUtils.setServerSideHConnectionRetriesConfig(rs.conf,name,LOG);
  rpcServer=new RpcServer(rs,name,getServices(),bindAddress,rs.conf,rpcSchedulerFactory.create(rs.conf,this,rs));
  scannerLeaseTimeoutPeriod=rs.conf.getInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,HConstants.DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD);
  maxScannerResultSize=rs.conf.getLong(HConstants.HBASE_SERVER_SCANNER_MAX_RESULT_SIZE_KEY,HConstants.DEFAULT_HBASE_SERVER_SCANNER_MAX_RESULT_SIZE);
  rpcTimeout=rs.conf.getInt(HConstants.HBASE_RPC_TIMEOUT_KEY,HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
  minimumScanTimeLimitDelta=rs.conf.getLong(REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA,DEFAULT_REGION_SERVER_RPC_MINIMUM_SCAN_TIME_LIMIT_DELTA);
  isa=new InetSocketAddress(initialIsa.getHostName(),rpcServer.getListenerAddress().getPort());
  rpcServer.setErrorHandler(this);
  rs.setName(name);
}
