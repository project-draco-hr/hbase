{
  ExpressionNode notChild=nlExp.getChildExps().get(0);
  if (notChild instanceof LeafExpressionNode) {
    return nlExp;
  }
  NonLeafExpressionNode nlNotChild=(NonLeafExpressionNode)notChild;
  if (nlNotChild.getOperator() == Operator.NOT) {
    return nlNotChild.getChildExps().get(0);
  }
  Operator negateOp=nlNotChild.getOperator() == Operator.AND ? Operator.OR : Operator.AND;
  NonLeafExpressionNode newNode=new NonLeafExpressionNode(negateOp);
  for (  ExpressionNode expNode : nlNotChild.getChildExps()) {
    NonLeafExpressionNode negateNode=new NonLeafExpressionNode(Operator.NOT);
    negateNode.addChildExp(expNode.deepClone());
    newNode.addChildExp(expand(negateNode));
  }
  return newNode;
}
