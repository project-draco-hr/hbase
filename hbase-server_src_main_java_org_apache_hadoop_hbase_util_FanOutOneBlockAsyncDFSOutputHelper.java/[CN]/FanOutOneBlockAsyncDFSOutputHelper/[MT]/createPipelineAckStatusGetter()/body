{
  try {
    final Method getFlagListMethod=PipelineAckProto.class.getMethod("getFlagList");
    @SuppressWarnings("rawtypes") Class<? extends Enum> ecnClass;
    try {
      ecnClass=Class.forName("org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck$ECN").asSubclass(Enum.class);
    }
 catch (    ClassNotFoundException e) {
      throw new Error(e);
    }
    @SuppressWarnings("unchecked") final Enum<?> disabledECN=Enum.valueOf(ecnClass,"DISABLED");
    final Method getReplyMethod=PipelineAckProto.class.getMethod("getReply",int.class);
    final Method combineHeaderMethod=PipelineAck.class.getMethod("combineHeader",ecnClass,Status.class);
    final Method getStatusFromHeaderMethod=PipelineAck.class.getMethod("getStatusFromHeader",int.class);
    return new PipelineAckStatusGetter(){
      @Override public Status get(      PipelineAckProto ack){
        try {
          @SuppressWarnings("unchecked") List<Integer> flagList=(List<Integer>)getFlagListMethod.invoke(ack);
          Integer headerFlag;
          if (flagList.isEmpty()) {
            Status reply=(Status)getReplyMethod.invoke(ack,0);
            headerFlag=(Integer)combineHeaderMethod.invoke(null,disabledECN,reply);
          }
 else {
            headerFlag=flagList.get(0);
          }
          return (Status)getStatusFromHeaderMethod.invoke(null,headerFlag);
        }
 catch (        IllegalAccessException|InvocationTargetException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  NoSuchMethodException e) {
    LOG.warn("Can not get expected methods, should be hadoop 2.6-",e);
  }
  try {
    final Method getStatusMethod=PipelineAckProto.class.getMethod("getStatus",int.class);
    return new PipelineAckStatusGetter(){
      @Override public Status get(      PipelineAckProto ack){
        try {
          return (Status)getStatusMethod.invoke(ack,0);
        }
 catch (        IllegalAccessException|InvocationTargetException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 catch (  NoSuchMethodException e) {
    throw new Error(e);
  }
}
