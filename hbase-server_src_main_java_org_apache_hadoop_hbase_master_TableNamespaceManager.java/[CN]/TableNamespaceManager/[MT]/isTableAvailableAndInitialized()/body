{
  if (isTableNamespaceManagerInitialized()) {
    return true;
  }
  if (isTableAssigned() && isTableEnabled()) {
    try {
      boolean initGoodSofar=true;
      nsTable=this.masterServices.getConnection().getTable(TableName.NAMESPACE_TABLE_NAME);
      zkNamespaceManager=new ZKNamespaceManager(masterServices.getZooKeeper());
      zkNamespaceManager.start();
      if (get(nsTable,NamespaceDescriptor.DEFAULT_NAMESPACE.getName()) == null) {
        createNamespace(NamespaceDescriptor.DEFAULT_NAMESPACE);
      }
      if (get(nsTable,NamespaceDescriptor.SYSTEM_NAMESPACE.getName()) == null) {
        createNamespace(NamespaceDescriptor.SYSTEM_NAMESPACE);
      }
      if (!initGoodSofar) {
        return false;
      }
      ResultScanner scanner=nsTable.getScanner(HTableDescriptor.NAMESPACE_FAMILY_INFO_BYTES);
      try {
        for (        Result result : scanner) {
          byte[] val=CellUtil.cloneValue(result.getColumnLatestCell(HTableDescriptor.NAMESPACE_FAMILY_INFO_BYTES,HTableDescriptor.NAMESPACE_COL_DESC_BYTES));
          NamespaceDescriptor ns=ProtobufUtil.toNamespaceDescriptor(HBaseProtos.NamespaceDescriptor.parseFrom(val));
          zkNamespaceManager.update(ns);
        }
      }
  finally {
        scanner.close();
      }
      initialized=true;
      return true;
    }
 catch (    IOException ie) {
      LOG.warn("Caught exception in initializing namespace table manager",ie);
      if (nsTable != null) {
        nsTable.close();
      }
      throw ie;
    }
  }
  return false;
}
