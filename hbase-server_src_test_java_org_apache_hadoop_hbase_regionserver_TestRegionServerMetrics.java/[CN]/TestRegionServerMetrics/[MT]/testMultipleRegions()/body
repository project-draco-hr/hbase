{
  TEST_UTIL.createRandomTable(TABLE_NAME,Arrays.asList(FAMILIES),MAX_VERSIONS,NUM_COLS_PER_ROW,NUM_FLUSHES,NUM_REGIONS,1000);
  final HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
  assertEquals(NUM_REGIONS + META_AND_ROOT,ProtobufUtil.getOnlineRegions(rs).size());
  rs.doMetrics();
  for (  HRegion r : TEST_UTIL.getMiniHBaseCluster().getRegions(Bytes.toBytes(TABLE_NAME))) {
    for (    Map.Entry<byte[],Store> storeEntry : r.getStores().entrySet()) {
      LOG.info("For region " + r.getRegionNameAsString() + ", CF "+ Bytes.toStringBinary(storeEntry.getKey())+ " found store files "+ ": "+ storeEntry.getValue().getStorefiles());
    }
  }
  assertStoreMetricEquals(NUM_FLUSHES * NUM_REGIONS * FAMILIES.length + META_AND_ROOT,ALL_METRICS,StoreMetricType.STORE_FILE_COUNT);
  for (  String cf : FAMILIES) {
    SchemaMetrics schemaMetrics=SchemaMetrics.getInstance(TABLE_NAME,cf);
    assertStoreMetricEquals(NUM_FLUSHES * NUM_REGIONS,schemaMetrics,StoreMetricType.STORE_FILE_COUNT);
  }
  final String storeMetricName=ALL_METRICS.getStoreMetricNameMax(StoreMetricType.STORE_FILE_COUNT);
  assertEquals("Invalid value for store metric " + storeMetricName,NUM_FLUSHES,RegionMetricsStorage.getNumericMetric(storeMetricName));
}
