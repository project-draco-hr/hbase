{
  String root_dir=TEST_UTIL.getDataTestDir().toString();
  Path p=new Path(root_dir,"test");
  Configuration conf=TEST_UTIL.getConfiguration();
  FileSystem fs=FileSystem.get(conf);
  CacheConfig cacheConf=new CacheConfig(conf);
  HFileContext meta=new HFileContext();
  meta.setBlocksize(1024);
  HFile.Writer w=HFile.getWriterFactory(conf,cacheConf).withPath(fs,p).withFileContext(meta).create();
  List<KeyValue> items=genSomeKeys();
  for (  KeyValue kv : items) {
    w.append(kv);
  }
  w.close();
  HFile.Reader r=HFile.createReader(fs,p,cacheConf);
  r.loadFileInfo();
  byte[] midkey=r.midkey();
  KeyValue midKV=KeyValue.createKeyValueFromKey(midkey);
  midkey=midKV.getRow();
  Reference bottom=new Reference(midkey,Reference.Range.bottom);
  Reference top=new Reference(midkey,Reference.Range.top);
  KeyValue beforeMidKey=null;
  for (  KeyValue item : items) {
    if (KeyValue.COMPARATOR.compare(item,midKV) >= 0) {
      break;
    }
    beforeMidKey=item;
  }
  System.out.println("midkey: " + midKV + " or: "+ Bytes.toStringBinary(midkey));
  System.out.println("beforeMidKey: " + beforeMidKey);
  KeyValue foundKeyValue=doTestOfSeekBefore(p,fs,bottom,midKV,cacheConf);
  assertEquals(beforeMidKey,foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,top,items.get(items.size() - 1),cacheConf);
  assertEquals(items.get(items.size() - 2),foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,bottom,items.get(items.size() - 1),cacheConf);
  assertEquals(beforeMidKey,foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,top,items.get(0),cacheConf);
  assertNull(foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,bottom,items.get(0),cacheConf);
  assertNull(foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,top,items.get(1),cacheConf);
  assertNull(foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,bottom,items.get(1),cacheConf);
  assertEquals(items.get(0),foundKeyValue);
  foundKeyValue=doTestOfSeekBefore(p,fs,top,midKV,cacheConf);
  assertNull(foundKeyValue);
}
