{
  LOG.info("Closing the following queue " + id + ", currently have "+ sources.size()+ " and another "+ oldsources.size()+ " that were recovered");
  String terminateMessage="Replication stream was removed by a user";
  List<ReplicationSourceInterface> oldSourcesToDelete=new ArrayList<ReplicationSourceInterface>();
synchronized (oldsources) {
    for (    ReplicationSourceInterface src : oldsources) {
      if (id.equals(src.getPeerClusterId())) {
        oldSourcesToDelete.add(src);
      }
    }
    for (    ReplicationSourceInterface src : oldSourcesToDelete) {
      src.terminate(terminateMessage);
      closeRecoveredQueue(src);
    }
  }
  LOG.info("Number of deleted recovered sources for " + id + ": "+ oldSourcesToDelete.size());
  List<ReplicationSourceInterface> srcToRemove=new ArrayList<ReplicationSourceInterface>();
synchronized (this.replicationPeers) {
    for (    ReplicationSourceInterface src : this.sources) {
      if (id.equals(src.getPeerClusterId())) {
        srcToRemove.add(src);
      }
    }
    if (srcToRemove.isEmpty()) {
      LOG.error("The peer we wanted to remove is missing a ReplicationSourceInterface. " + "This could mean that ReplicationSourceInterface initialization failed for this peer " + "and that replication on this peer may not be caught up. peerId="+ id);
    }
    for (    ReplicationSourceInterface toRemove : srcToRemove) {
      toRemove.terminate(terminateMessage);
      if (toRemove instanceof ReplicationSource) {
        ((ReplicationSource)toRemove).getSourceMetrics().clear();
      }
      this.sources.remove(toRemove);
    }
    deleteSource(id,true);
  }
}
