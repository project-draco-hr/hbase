{
  if (this.rq.isThisOurRegionServer(rsZnode)) {
    return;
  }
  try {
    Thread.sleep(sleepBeforeFailover + (long)(rand.nextFloat() * sleepBeforeFailover));
  }
 catch (  InterruptedException e) {
    LOG.warn("Interrupted while waiting before transferring a queue.");
    Thread.currentThread().interrupt();
  }
  if (server.isStopped()) {
    LOG.info("Not transferring queue since we are shutting down");
    return;
  }
  Map<String,Set<String>> newQueues=new HashMap<>();
  List<String> peers=rq.getUnClaimedQueueIds(rsZnode);
  while (peers != null && !peers.isEmpty()) {
    Pair<String,SortedSet<String>> peer=this.rq.claimQueue(rsZnode,peers.get(rand.nextInt(peers.size())));
    long sleep=sleepBeforeFailover / 2;
    if (peer != null) {
      newQueues.put(peer.getFirst(),peer.getSecond());
      sleep=sleepBeforeFailover;
    }
    try {
      Thread.sleep(sleep);
    }
 catch (    InterruptedException e) {
      LOG.warn("Interrupted while waiting before transferring a queue.");
      Thread.currentThread().interrupt();
    }
    peers=rq.getUnClaimedQueueIds(rsZnode);
  }
  if (peers != null) {
    rq.removeReplicatorIfQueueIsEmpty(rsZnode);
  }
  if (newQueues.isEmpty()) {
    return;
  }
  for (  Map.Entry<String,Set<String>> entry : newQueues.entrySet()) {
    String peerId=entry.getKey();
    Set<String> walsSet=entry.getValue();
    try {
      ReplicationQueueInfo replicationQueueInfo=new ReplicationQueueInfo(peerId);
      String actualPeerId=replicationQueueInfo.getPeerId();
      ReplicationPeer peer=replicationPeers.getConnectedPeer(actualPeerId);
      ReplicationPeerConfig peerConfig=null;
      try {
        peerConfig=replicationPeers.getReplicationPeerConfig(actualPeerId);
      }
 catch (      ReplicationException ex) {
        LOG.warn("Received exception while getting replication peer config, skipping replay" + ex);
      }
      if (peer == null || peerConfig == null) {
        LOG.warn("Skipping failover for peer:" + actualPeerId + " of node"+ rsZnode);
        replicationQueues.removeQueue(peerId);
        continue;
      }
      Map<String,SortedSet<String>> walsByGroup=new HashMap<String,SortedSet<String>>();
      walsByIdRecoveredQueues.put(peerId,walsByGroup);
      for (      String wal : walsSet) {
        String walPrefix=AbstractFSWALProvider.getWALPrefixFromWALName(wal);
        SortedSet<String> wals=walsByGroup.get(walPrefix);
        if (wals == null) {
          wals=new TreeSet<String>();
          walsByGroup.put(walPrefix,wals);
        }
        wals.add(wal);
      }
      ReplicationSourceInterface src=getReplicationSource(conf,fs,ReplicationSourceManager.this,this.rq,this.rp,server,peerId,this.clusterId,peerConfig,peer);
synchronized (oldsources) {
        if (!this.rp.getConnectedPeerIds().contains(src.getPeerClusterId())) {
          src.terminate("Recovered queue doesn't belong to any current peer");
          closeRecoveredQueue(src);
          continue;
        }
        oldsources.add(src);
        for (        String wal : walsSet) {
          src.enqueueLog(new Path(oldLogDir,wal));
        }
        src.startup();
      }
    }
 catch (    IOException e) {
      LOG.error("Failed creating a source",e);
    }
  }
}
