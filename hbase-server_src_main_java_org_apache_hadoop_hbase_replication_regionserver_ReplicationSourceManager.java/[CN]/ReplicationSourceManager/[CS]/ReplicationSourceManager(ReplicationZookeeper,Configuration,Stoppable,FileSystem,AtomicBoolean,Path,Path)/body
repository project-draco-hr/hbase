{
  this.sources=new ArrayList<ReplicationSourceInterface>();
  this.replicating=replicating;
  this.zkHelper=zkHelper;
  this.stopper=stopper;
  this.hlogsById=new HashMap<String,SortedSet<String>>();
  this.oldsources=new ArrayList<ReplicationSourceInterface>();
  this.conf=conf;
  this.fs=fs;
  this.logDir=logDir;
  this.oldLogDir=oldLogDir;
  this.sleepBeforeFailover=conf.getLong("replication.sleep.before.failover",2000);
  this.zkHelper.registerRegionServerListener(new OtherRegionServerWatcher(this.zkHelper.getZookeeperWatcher()));
  List<String> otherRSs=this.zkHelper.getRegisteredRegionServers();
  this.zkHelper.registerRegionServerListener(new PeersWatcher(this.zkHelper.getZookeeperWatcher()));
  this.zkHelper.listPeersIdsAndWatch();
  this.otherRegionServers=otherRSs == null ? new ArrayList<String>() : otherRSs;
  int nbWorkers=conf.getInt("replication.executor.workers",1);
  this.executor=new ThreadPoolExecutor(nbWorkers,nbWorkers,100,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());
  ThreadFactoryBuilder tfb=new ThreadFactoryBuilder();
  tfb.setNameFormat("ReplicationExecutor-%d");
  this.executor.setThreadFactory(tfb.build());
}
