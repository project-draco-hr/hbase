{
  StringBuilder sb=new StringBuilder();
  if (!deletedQueues.isEmpty()) {
    sb.append("Found " + deletedQueues.size() + " deleted queues"+ ", run hbck -fixReplication in order to remove the deleted replication queues\n");
    for (    String deletedQueue : deletedQueues) {
      sb.append("    " + deletedQueue + "\n");
    }
  }
  if (!deadRegionServers.isEmpty()) {
    sb.append("Found " + deadRegionServers.size() + " dead regionservers"+ ", restart one regionserver to transfer the queues of dead regionservers\n");
    for (    String deadRs : deadRegionServers) {
      sb.append("    " + deadRs + "\n");
    }
  }
  if (!peersQueueSize.isEmpty()) {
    sb.append("Dumping all peers's number of WALs in replication queue\n");
    for (    Map.Entry<String,Long> entry : peersQueueSize.asMap().entrySet()) {
      sb.append("    PeerId: " + entry.getKey() + " , sizeOfLogQueue: "+ entry.getValue()+ "\n");
    }
  }
  sb.append("    Total size of WALs on HDFS: " + StringUtils.humanSize(totalSizeOfWALs) + "\n");
  if (numWalsNotFound > 0) {
    sb.append("    ERROR: There are " + numWalsNotFound + " WALs not found!!!\n");
  }
  return sb.toString();
}
