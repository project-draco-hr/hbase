{
  StringBuilder sb=new StringBuilder();
  List<String> deadServers;
  sb.append("Dumping replication queue info for RegionServer: [" + regionserver + "]"+ "\n");
  sb.append("    Queue znode: " + queueId + "\n");
  sb.append("    PeerID: " + queueInfo.getPeerId() + "\n");
  sb.append("    Recovered: " + queueInfo.isQueueRecovered() + "\n");
  deadServers=queueInfo.getDeadRegionServers();
  if (deadServers.isEmpty()) {
    sb.append("    No dead RegionServers found in this queue." + "\n");
  }
 else {
    sb.append("    Dead RegionServers: " + deadServers + "\n");
  }
  sb.append("    Was deleted: " + isDeleted + "\n");
  sb.append("    Number of WALs in replication queue: " + wals.size() + "\n");
  peersQueueSize.addAndGet(queueInfo.getPeerId(),wals.size());
  for (  String wal : wals) {
    long position=replicationQueues.getLogPosition(queueInfo.getPeerId(),wal);
    sb.append("    Replication position for " + wal + ": "+ (position > 0 ? position : "0" + " (not started or nothing to replicate)")+ "\n");
  }
  if (hdfs) {
    FileSystem fs=FileSystem.get(getConf());
    sb.append("    Total size of WALs on HDFS for this queue: " + StringUtils.humanSize(getTotalWALSize(fs,wals,regionserver)) + "\n");
  }
  return sb.toString();
}
