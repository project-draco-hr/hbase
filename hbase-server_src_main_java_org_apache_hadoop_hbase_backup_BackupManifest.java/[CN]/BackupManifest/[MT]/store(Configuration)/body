{
  Properties props=new Properties();
  props.setProperty(TAG_VERSION,this.version);
  props.setProperty(TAG_BACKUPID,this.token);
  props.setProperty(TAG_BACKUPTYPE,this.type);
  props.setProperty(TAG_TABLESET,this.getTableSetStr());
  LOG.debug("convert will be supported in future jira");
  props.setProperty(TAG_STARTTS,Long.toString(this.startTs));
  props.setProperty(TAG_COMPLETETS,Long.toString(this.completeTs));
  props.setProperty(TAG_TABLEBYTES,Long.toString(this.tableBytes));
  if (this.type.equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
    props.setProperty(TAG_LOGBYTES,Long.toString(this.logBytes));
  }
  props.setProperty(TAG_INCRTIMERANGE,this.getIncrTimestampStr());
  props.setProperty(TAG_DEPENDENCY,this.getDependencyStr());
  props.setProperty(TAG_IMAGESTATE,this.getImageState());
  props.setProperty(TAG_COMPACTION,this.isCompacted ? "TRUE" : "FALSE");
  LOG.debug("merge will be supported in future jira");
  LOG.debug("backup from existing snapshot will be supported in future jira");
  Path manifestFilePath=new Path((this.tableBackupDir != null ? this.tableBackupDir : this.logBackupDir) + File.separator + FILE_NAME);
  try {
    FSDataOutputStream out=manifestFilePath.getFileSystem(conf).create(manifestFilePath,true);
    props.store(out,"HBase backup manifest.");
    out.close();
  }
 catch (  IOException e) {
    throw new BackupException(e.getMessage());
  }
  LOG.debug("Manifest file stored to " + this.tableBackupDir != null ? this.tableBackupDir : this.logBackupDir + File.separator + FILE_NAME);
}
