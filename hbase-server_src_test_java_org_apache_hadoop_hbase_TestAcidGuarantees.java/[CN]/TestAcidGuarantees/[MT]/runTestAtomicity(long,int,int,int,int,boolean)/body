{
  createTableIfMissing();
  TestContext ctx=new TestContext(util.getConfiguration());
  byte rows[][]=new byte[numUniqueRows][];
  for (int i=0; i < numUniqueRows; i++) {
    rows[i]=Bytes.toBytes("test_row_" + i);
  }
  List<AtomicityWriter> writers=Lists.newArrayList();
  for (int i=0; i < numWriters; i++) {
    AtomicityWriter writer=new AtomicityWriter(ctx,rows,FAMILIES);
    writers.add(writer);
    ctx.addThread(writer);
  }
  ctx.addThread(new RepeatingTestThread(ctx){
    HBaseAdmin admin=util.getHBaseAdmin();
    public void doAnAction() throws Exception {
      try {
        admin.flush(TABLE_NAME);
      }
 catch (      IOException ioe) {
        LOG.warn("Ignoring exception while flushing: " + StringUtils.stringifyException(ioe));
      }
      if (systemTest)       Thread.sleep(60000);
    }
  }
);
  List<AtomicGetReader> getters=Lists.newArrayList();
  for (int i=0; i < numGetters; i++) {
    AtomicGetReader getter=new AtomicGetReader(ctx,rows[i % numUniqueRows],FAMILIES);
    getters.add(getter);
    ctx.addThread(getter);
  }
  List<AtomicScanReader> scanners=Lists.newArrayList();
  for (int i=0; i < numScanners; i++) {
    AtomicScanReader scanner=new AtomicScanReader(ctx,FAMILIES);
    scanners.add(scanner);
    ctx.addThread(scanner);
  }
  ctx.startThreads();
  ctx.waitFor(millisToRun);
  ctx.stop();
  LOG.info("Finished test. Writers:");
  for (  AtomicityWriter writer : writers) {
    LOG.info("  wrote " + writer.numWritten.get());
  }
  LOG.info("Readers:");
  for (  AtomicGetReader reader : getters) {
    LOG.info("  read " + reader.numRead.get());
  }
  LOG.info("Scanners:");
  for (  AtomicScanReader scanner : scanners) {
    LOG.info("  scanned " + scanner.numScans.get());
    LOG.info("  verified " + scanner.numRowsScanned.get() + " rows");
  }
}
