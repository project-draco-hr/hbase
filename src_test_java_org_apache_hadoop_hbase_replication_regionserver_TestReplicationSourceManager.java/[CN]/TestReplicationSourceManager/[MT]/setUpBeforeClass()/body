{
  conf=HBaseConfiguration.create();
  conf.set("replication.replicationsource.implementation",ReplicationSourceDummy.class.getCanonicalName());
  conf.setBoolean(HConstants.REPLICATION_ENABLE_KEY,true);
  utility=new HBaseTestingUtility(conf);
  utility.startMiniZKCluster();
  zkw=new ZooKeeperWatcher(conf,"test",null);
  ZKUtil.createWithParents(zkw,"/hbase/replication");
  ZKUtil.createWithParents(zkw,"/hbase/replication/peers/1");
  ZKUtil.setData(zkw,"/hbase/replication/peers/1",Bytes.toBytes(conf.get(HConstants.ZOOKEEPER_QUORUM) + ":" + conf.get(HConstants.ZOOKEEPER_CLIENT_PORT)+ ":/1"));
  ZKUtil.createWithParents(zkw,"/hbase/replication/state");
  ZKUtil.setData(zkw,"/hbase/replication/state",Bytes.toBytes("true"));
  replication=new Replication(new DummyServer(),fs,logDir,oldLogDir);
  manager=replication.getReplicationManager();
  fs=FileSystem.get(conf);
  oldLogDir=new Path(utility.getDataTestDir(),HConstants.HREGION_OLDLOGDIR_NAME);
  logDir=new Path(utility.getDataTestDir(),HConstants.HREGION_LOGDIR_NAME);
  manager.addSource(slaveId);
  htd=new HTableDescriptor(test);
  HColumnDescriptor col=new HColumnDescriptor("f1");
  col.setScope(HConstants.REPLICATION_SCOPE_GLOBAL);
  htd.addFamily(col);
  col=new HColumnDescriptor("f2");
  col.setScope(HConstants.REPLICATION_SCOPE_LOCAL);
  htd.addFamily(col);
  hri=new HRegionInfo(htd.getName(),r1,r2);
}
