{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.tableName=iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.startRow=iprot.readBinary();
    struct.setStartRowIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list452=iprot.readListBegin();
  struct.columns=new ArrayList<ByteBuffer>(_list452.size);
  for (int _i453=0; _i453 < _list452.size; ++_i453) {
    ByteBuffer _elem454;
    _elem454=iprot.readBinary();
    struct.columns.add(_elem454);
  }
  iprot.readListEnd();
}
struct.setColumnsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map455=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map455.size);
for (int _i456=0; _i456 < _map455.size; ++_i456) {
ByteBuffer _key457;
ByteBuffer _val458;
_key457=iprot.readBinary();
_val458=iprot.readBinary();
struct.attributes.put(_key457,_val458);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
