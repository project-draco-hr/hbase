{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.startRow=iprot.readBinary();
    struct.setStartRowIsSet(true);
  }
  if (incoming.get(2)) {
    struct.stopRow=iprot.readBinary();
    struct.setStopRowIsSet(true);
  }
  if (incoming.get(3)) {
{
      org.apache.thrift.protocol.TList _list481=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list481.size);
      for (int _i482=0; _i482 < _list481.size; ++_i482) {
        ByteBuffer _elem483;
        _elem483=iprot.readBinary();
        struct.columns.add(_elem483);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map484=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map484.size);
      for (int _i485=0; _i485 < _map484.size; ++_i485) {
        ByteBuffer _key486;
        ByteBuffer _val487;
        _key486=iprot.readBinary();
        _val487=iprot.readBinary();
        struct.attributes.put(_key486,_val487);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
