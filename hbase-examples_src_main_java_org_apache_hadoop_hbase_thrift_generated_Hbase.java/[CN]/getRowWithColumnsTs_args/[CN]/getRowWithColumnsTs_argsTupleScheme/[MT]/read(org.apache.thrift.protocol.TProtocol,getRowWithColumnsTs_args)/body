{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  BitSet incoming=iprot.readBitSet(5);
  if (incoming.get(0)) {
    struct.tableName=iprot.readBinary();
    struct.setTableNameIsSet(true);
  }
  if (incoming.get(1)) {
    struct.row=iprot.readBinary();
    struct.setRowIsSet(true);
  }
  if (incoming.get(2)) {
{
      org.apache.thrift.protocol.TList _list187=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.columns=new ArrayList<ByteBuffer>(_list187.size);
      for (int _i188=0; _i188 < _list187.size; ++_i188) {
        ByteBuffer _elem189;
        _elem189=iprot.readBinary();
        struct.columns.add(_elem189);
      }
    }
    struct.setColumnsIsSet(true);
  }
  if (incoming.get(3)) {
    struct.timestamp=iprot.readI64();
    struct.setTimestampIsSet(true);
  }
  if (incoming.get(4)) {
{
      org.apache.thrift.protocol.TMap _map190=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map190.size);
      for (int _i191=0; _i191 < _map190.size; ++_i191) {
        ByteBuffer _key192;
        ByteBuffer _val193;
        _key192=iprot.readBinary();
        _val193=iprot.readBinary();
        struct.attributes.put(_key192,_val193);
      }
    }
    struct.setAttributesIsSet(true);
  }
}
