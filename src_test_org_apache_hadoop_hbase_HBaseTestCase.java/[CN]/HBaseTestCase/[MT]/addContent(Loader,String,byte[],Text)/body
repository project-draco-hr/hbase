{
  char secondCharStart=(char)startKeyBytes[1];
  char thirdCharStart=(char)startKeyBytes[2];
  EXIT:   for (char c=(char)startKeyBytes[0]; c <= LAST_CHAR; c++) {
    for (char d=secondCharStart; d <= LAST_CHAR; d++) {
      for (char e=thirdCharStart; e <= LAST_CHAR; e++) {
        byte[] bytes=new byte[]{(byte)c,(byte)d,(byte)e};
        Text t=new Text(new String(bytes,HConstants.UTF8_ENCODING));
        if (endKey != null && endKey.getLength() > 0 && endKey.compareTo(t) <= 0) {
          break EXIT;
        }
        long lockid=updater.startBatchUpdate(t);
        try {
          updater.put(lockid,new Text(column),bytes);
          updater.commit(lockid);
          lockid=-1;
        }
  finally {
          if (lockid != -1) {
            updater.abort(lockid);
          }
        }
      }
      thirdCharStart=FIRST_CHAR;
    }
    secondCharStart=FIRST_CHAR;
  }
}
