{
  long count=0;
  char secondCharStart=(char)startKeyBytes[1];
  char thirdCharStart=(char)startKeyBytes[2];
  EXIT:   for (char c=(char)startKeyBytes[0]; c <= LAST_CHAR; c++) {
    for (char d=secondCharStart; d <= LAST_CHAR; d++) {
      for (char e=thirdCharStart; e <= LAST_CHAR; e++) {
        byte[] t=new byte[]{(byte)c,(byte)d,(byte)e};
        if (endKey != null && endKey.length > 0 && Bytes.compareTo(endKey,t) <= 0) {
          break EXIT;
        }
        try {
          Put put=new Put(t);
          if (ts != -1) {
            put.setTimeStamp(ts);
          }
          try {
            byte[][] split=KeyValue.parseColumn(Bytes.toBytes(column));
            put.add(split[0],split[1],t);
            updater.put(put);
            count++;
          }
 catch (          RuntimeException ex) {
            ex.printStackTrace();
            throw ex;
          }
catch (          IOException ex) {
            ex.printStackTrace();
            throw ex;
          }
        }
 catch (        RuntimeException ex) {
          ex.printStackTrace();
          throw ex;
        }
catch (        IOException ex) {
          ex.printStackTrace();
          throw ex;
        }
      }
      thirdCharStart=FIRST_CHAR;
    }
    secondCharStart=FIRST_CHAR;
  }
  return count;
}
