{
  String[] porportions=conf.getStrings("hbase.offheapcache.slab.proportions","0.80","0.20");
  String[] sizes=conf.getStrings("hbase.offheapcache.slab.sizes",new Long(avgBlockSize * 11 / 10).toString(),new Long(avgBlockSize * 21 / 10).toString());
  if (porportions.length != sizes.length) {
    throw new IllegalArgumentException("SlabCache conf not " + "initialized, error in configuration. hbase.offheap.slab.proportions specifies " + porportions.length + " slabs while hbase.offheap.slab.sizes specifies "+ sizes.length+ " slabs "+ "offheapslabporportions and offheapslabsizes");
  }
  BigDecimal[] parsedProportions=stringArrayToBigDecimalArray(porportions);
  BigDecimal[] parsedSizes=stringArrayToBigDecimalArray(sizes);
  BigDecimal sumProportions=new BigDecimal(0);
  for (  BigDecimal b : parsedProportions) {
    Preconditions.checkArgument(b.compareTo(BigDecimal.ZERO) == 1,"Proportions in hbase.offheap.slab.proportions must be greater than 0!");
    sumProportions=sumProportions.add(b);
  }
  Preconditions.checkArgument(sumProportions.compareTo(BigDecimal.ONE) != 1,"Sum of all proportions in hbase.offheap.slab.proportions must be less than 1");
  if (sumProportions.compareTo(new BigDecimal("0.99")) == -1) {
    LOG.warn("Sum of hbase.offheap.slab.proportions is less than 0.99! Memory is being wasted");
  }
  for (int i=0; i < parsedProportions.length; i++) {
    int blockSize=parsedSizes[i].intValue();
    int numBlocks=new BigDecimal(this.size).multiply(parsedProportions[i]).divide(parsedSizes[i],BigDecimal.ROUND_DOWN).intValue();
    addSlab(blockSize,numBlocks);
  }
}
