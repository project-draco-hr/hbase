{
  final AsyncRpcChannel connection;
  try {
    connection=createRpcChannel(md.getService().getName(),addr,ticket);
    ResponseFutureListener<Message> listener=new ResponseFutureListener<Message>(){
      @Override public void operationComplete(      Future<Message> future) throws Exception {
        if (!future.isSuccess()) {
          Throwable cause=future.cause();
          if (cause instanceof IOException) {
            pcrc.setFailed((IOException)cause);
          }
 else {
            pcrc.setFailed(new IOException(cause));
          }
        }
 else {
          try {
            done.run(future.get());
          }
 catch (          ExecutionException e) {
            Throwable cause=e.getCause();
            if (cause instanceof IOException) {
              pcrc.setFailed((IOException)cause);
            }
 else {
              pcrc.setFailed(new IOException(cause));
            }
          }
catch (          InterruptedException e) {
            pcrc.setFailed(new IOException(e));
          }
        }
      }
    }
;
    connection.callMethod(md,param,pcrc.cellScanner(),returnType,getMessageConverterWithRpcController(pcrc),null,pcrc.getCallTimeout(),pcrc.getPriority()).addListener(listener);
  }
 catch (  StoppedRpcClientException|FailedServerException e) {
    pcrc.setFailed(e);
  }
}
