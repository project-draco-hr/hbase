{
  TableName tableName=TableName.valueOf(args[0]);
  conf.set(TABLE_NAME,tableName.getNameAsString());
  Path inputDir=new Path(args[1]);
  Job job=Job.getInstance(conf,conf.get(JOB_NAME_CONF_KEY,NAME + "_" + tableName));
  job.setJarByClass(Importer.class);
  FileInputFormat.setInputPaths(job,inputDir);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  String hfileOutPath=conf.get(BULK_OUTPUT_CONF_KEY);
  try {
    Class<? extends Filter> filter=conf.getClass(FILTER_CLASS_CONF_KEY,null,Filter.class);
    if (filter != null) {
      TableMapReduceUtil.addDependencyJarsForClasses(conf,filter);
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  if (hfileOutPath != null && conf.getBoolean(HAS_LARGE_RESULT,false)) {
    LOG.info("Use Large Result!!");
    try (Connection conn=ConnectionFactory.createConnection(conf);Table table=conn.getTable(tableName);RegionLocator regionLocator=conn.getRegionLocator(tableName)){
      HFileOutputFormat2.configureIncrementalLoad(job,table.getTableDescriptor(),regionLocator);
      job.setMapperClass(KeyValueSortImporter.class);
      job.setReducerClass(KeyValueReducer.class);
      Path outputDir=new Path(hfileOutPath);
      FileOutputFormat.setOutputPath(job,outputDir);
      job.setMapOutputKeyClass(KeyValueWritableComparable.class);
      job.setMapOutputValueClass(KeyValue.class);
      job.getConfiguration().setClass("mapreduce.job.output.key.comparator.class",KeyValueWritableComparable.KeyValueWritableComparator.class,RawComparator.class);
      Path partitionsPath=new Path(TotalOrderPartitioner.getPartitionFile(job.getConfiguration()));
      FileSystem fs=FileSystem.get(job.getConfiguration());
      fs.deleteOnExit(partitionsPath);
      job.setPartitionerClass(KeyValueWritableComparablePartitioner.class);
      job.setNumReduceTasks(regionLocator.getStartKeys().length);
      TableMapReduceUtil.addDependencyJarsForClasses(job.getConfiguration(),com.google.common.base.Preconditions.class);
    }
   }
 else   if (hfileOutPath != null) {
    LOG.info("writing to hfiles for bulk load.");
    job.setMapperClass(KeyValueImporter.class);
    try (Connection conn=ConnectionFactory.createConnection(conf);Table table=conn.getTable(tableName);RegionLocator regionLocator=conn.getRegionLocator(tableName)){
      job.setReducerClass(KeyValueSortReducer.class);
      Path outputDir=new Path(hfileOutPath);
      FileOutputFormat.setOutputPath(job,outputDir);
      job.setMapOutputKeyClass(ImmutableBytesWritable.class);
      job.setMapOutputValueClass(KeyValue.class);
      HFileOutputFormat2.configureIncrementalLoad(job,table.getTableDescriptor(),regionLocator);
      TableMapReduceUtil.addDependencyJarsForClasses(job.getConfiguration(),com.google.common.base.Preconditions.class);
    }
   }
 else {
    LOG.info("writing directly to table from Mapper.");
    job.setMapperClass(Importer.class);
    TableMapReduceUtil.initTableReducerJob(tableName.getNameAsString(),null,job);
    job.setNumReduceTasks(0);
  }
  return job;
}
