{
  final AtomicInteger noEx=new AtomicInteger(0);
  final AtomicInteger badEx=new AtomicInteger(0);
  final AtomicInteger noInt=new AtomicInteger(0);
  final AtomicInteger done=new AtomicInteger(0);
  List<Thread> threads=new ArrayList<Thread>();
  final int nbThread=100;
  for (int i=0; i < nbThread; i++) {
    Thread t=new Thread(){
      @Override public void run(){
        try {
          Table ht=util.getConnection().getTable(tableName);
          Result r=ht.get(new Get(row1));
          noEx.incrementAndGet();
        }
 catch (        IOException e) {
          LOG.info("exception",e);
          if (!(e instanceof InterruptedIOException) || (e instanceof SocketTimeoutException)) {
            badEx.incrementAndGet();
          }
 else {
            if (Thread.currentThread().isInterrupted()) {
              noInt.incrementAndGet();
              LOG.info("The thread should NOT be with the 'interrupt' status.");
            }
          }
        }
 finally {
          done.incrementAndGet();
        }
      }
    }
;
    t.setName("TestClientOperationInterrupt #" + i);
    threads.add(t);
    t.start();
  }
  for (int i=0; i < nbThread / 2; i++) {
    threads.get(i).interrupt();
  }
  boolean stillAlive=true;
  while (stillAlive) {
    stillAlive=false;
    for (    Thread t : threads) {
      if (t.isAlive()) {
        stillAlive=true;
      }
    }
    Threads.sleep(10);
  }
  Assert.assertFalse(Thread.currentThread().isInterrupted());
  Assert.assertTrue(" noEx: " + noEx.get() + ", badEx="+ badEx.get()+ ", noInt="+ noInt.get(),noEx.get() == nbThread / 2 && badEx.get() == 0);
  while (done.get() != nbThread) {
    Thread.sleep(1);
  }
  Table ht=util.getConnection().getTable(tableName);
  Result r=ht.get(new Get(row1));
  Assert.assertFalse(r.isEmpty());
}
