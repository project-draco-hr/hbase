{
  this.lastRecoveringNodeCreationTime=EnvironmentEdgeManager.currentTime();
  for (  HRegionInfo region : userRegions) {
    String regionEncodeName=region.getEncodedName();
    long retries=this.zkretries;
    do {
      String nodePath=ZKUtil.joinZNode(watcher.recoveringRegionsZNode,regionEncodeName);
      long lastRecordedFlushedSequenceId=-1;
      try {
        long lastSequenceId=this.details.getMaster().getServerManager().getLastFlushedSequenceId(regionEncodeName.getBytes());
        byte[] data=ZKUtil.getData(this.watcher,nodePath);
        if (data == null) {
          ZKUtil.createSetData(this.watcher,nodePath,ZKUtil.positionToByteArray(lastSequenceId));
        }
 else {
          lastRecordedFlushedSequenceId=ZKSplitLog.parseLastFlushedSequenceIdFrom(data);
          if (lastRecordedFlushedSequenceId < lastSequenceId) {
            ZKUtil.setData(this.watcher,nodePath,ZKUtil.positionToByteArray(lastSequenceId));
          }
        }
        nodePath=ZKUtil.joinZNode(nodePath,serverName.getServerName());
        if (lastSequenceId <= lastRecordedFlushedSequenceId) {
          lastSequenceId=lastRecordedFlushedSequenceId;
        }
        ZKUtil.createSetData(this.watcher,nodePath,ZKUtil.regionSequenceIdsToByteArray(lastSequenceId,null));
        if (LOG.isDebugEnabled()) {
          LOG.debug("Marked " + regionEncodeName + " as recovering from "+ serverName+ ": "+ nodePath);
        }
        break;
      }
 catch (      KeeperException e) {
        if (retries <= 1) {
          throw new IOException(e);
        }
        try {
          Thread.sleep(20);
        }
 catch (        InterruptedException e1) {
          throw new InterruptedIOException();
        }
      }
catch (      InterruptedException e) {
        throw new InterruptedIOException();
      }
    }
 while ((--retries) > 0 && (!this.stopper.isStopped()));
  }
}
