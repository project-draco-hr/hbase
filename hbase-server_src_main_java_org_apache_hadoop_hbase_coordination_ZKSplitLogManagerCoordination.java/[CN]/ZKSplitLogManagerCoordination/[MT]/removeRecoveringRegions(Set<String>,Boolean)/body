{
  final String metaEncodeRegionName=HRegionInfo.FIRST_META_REGIONINFO.getEncodedName();
  int count=0;
  try {
    List<String> tasks=ZKUtil.listChildrenNoWatch(watcher,watcher.splitLogZNode);
    if (tasks != null) {
      int listSize=tasks.size();
      for (int i=0; i < listSize; i++) {
        if (!ZKSplitLog.isRescanNode(tasks.get(i))) {
          count++;
        }
      }
    }
    if (count == 0 && this.details.getMaster().isInitialized() && !this.details.getMaster().getServerManager().areDeadServersInProgress()) {
      ZKSplitLog.deleteRecoveringRegionZNodes(watcher,null);
      lastRecoveringNodeCreationTime=Long.MAX_VALUE;
    }
 else     if (!recoveredServerNameSet.isEmpty()) {
      List<String> regions=ZKUtil.listChildrenNoWatch(watcher,watcher.recoveringRegionsZNode);
      if (regions != null) {
        int listSize=regions.size();
        if (LOG.isDebugEnabled()) {
          LOG.debug("Processing recovering " + regions + " and servers "+ recoveredServerNameSet+ ", isMetaRecovery="+ isMetaRecovery);
        }
        for (int i=0; i < listSize; i++) {
          String region=regions.get(i);
          if (isMetaRecovery != null) {
            if ((isMetaRecovery && !region.equalsIgnoreCase(metaEncodeRegionName)) || (!isMetaRecovery && region.equalsIgnoreCase(metaEncodeRegionName))) {
              continue;
            }
          }
          String nodePath=ZKUtil.joinZNode(watcher.recoveringRegionsZNode,region);
          List<String> failedServers=ZKUtil.listChildrenNoWatch(watcher,nodePath);
          if (failedServers == null || failedServers.isEmpty()) {
            ZKUtil.deleteNode(watcher,nodePath);
            continue;
          }
          if (recoveredServerNameSet.containsAll(failedServers)) {
            ZKUtil.deleteNodeRecursively(watcher,nodePath);
          }
 else {
            int tmpFailedServerSize=failedServers.size();
            for (int j=0; j < tmpFailedServerSize; j++) {
              String failedServer=failedServers.get(j);
              if (recoveredServerNameSet.contains(failedServer)) {
                String tmpPath=ZKUtil.joinZNode(nodePath,failedServer);
                ZKUtil.deleteNode(watcher,tmpPath);
              }
            }
          }
        }
      }
    }
  }
 catch (  KeeperException ke) {
    LOG.warn("removeRecoveringRegionsFromZK got zookeeper exception. Will retry",ke);
    throw new IOException(ke);
  }
}
