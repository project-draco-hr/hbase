{
  byte[] qualifier=Arrays.copyOfRange(buffer,qualifierOffset,qualifierLength + qualifierOffset);
  TreeSet<byte[]> lesserOrEqualPrefixes=(TreeSet<byte[]>)sortedPrefixes.headSet(qualifier,true);
  if (lesserOrEqualPrefixes.size() != 0) {
    byte[] largestPrefixSmallerThanQualifier=lesserOrEqualPrefixes.last();
    if (Bytes.startsWith(qualifier,largestPrefixSmallerThanQualifier)) {
      return ReturnCode.INCLUDE;
    }
    if (lesserOrEqualPrefixes.size() == sortedPrefixes.size()) {
      return ReturnCode.NEXT_ROW;
    }
 else {
      hint=sortedPrefixes.higher(largestPrefixSmallerThanQualifier);
      return ReturnCode.SEEK_NEXT_USING_HINT;
    }
  }
 else {
    hint=sortedPrefixes.first();
    return ReturnCode.SEEK_NEXT_USING_HINT;
  }
}
