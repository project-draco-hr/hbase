{
  if (table == null) {
    initialize(job);
  }
  try {
    if (getTable() == null) {
      throw new IOException(INITIALIZATION_ERROR);
    }
  }
 catch (  IllegalStateException exception) {
    throw new IOException(INITIALIZATION_ERROR,exception);
  }
  TableSplit tSplit=(TableSplit)split;
  final TableRecordReader trr=this.tableRecordReader == null ? new TableRecordReader() : this.tableRecordReader;
  trr.setStartRow(tSplit.getStartRow());
  trr.setEndRow(tSplit.getEndRow());
  trr.setHTable(this.table);
  trr.setInputColumns(this.inputColumns);
  trr.setRowFilter(this.rowFilter);
  trr.init();
  return new RecordReader<ImmutableBytesWritable,Result>(){
    @Override public void close() throws IOException {
      trr.close();
      closeTable();
    }
    @Override public ImmutableBytesWritable createKey(){
      return trr.createKey();
    }
    @Override public Result createValue(){
      return trr.createValue();
    }
    @Override public long getPos() throws IOException {
      return trr.getPos();
    }
    @Override public float getProgress() throws IOException {
      return trr.getProgress();
    }
    @Override public boolean next(    ImmutableBytesWritable key,    Result value) throws IOException {
      return trr.next(key,value);
    }
  }
;
}
