{
  super.serializeStateData(stream);
  MasterProcedureProtos.RestoreSnapshotStateData.Builder restoreSnapshotMsg=MasterProcedureProtos.RestoreSnapshotStateData.newBuilder().setUserInfo(MasterProcedureUtil.toProtoUserInfo(getUser())).setSnapshot(this.snapshot).setModifiedTableSchema(ProtobufUtil.convertToTableSchema(modifiedHTableDescriptor));
  if (regionsToRestore != null) {
    for (    HRegionInfo hri : regionsToRestore) {
      restoreSnapshotMsg.addRegionInfoForRestore(HRegionInfo.convert(hri));
    }
  }
  if (regionsToRemove != null) {
    for (    HRegionInfo hri : regionsToRemove) {
      restoreSnapshotMsg.addRegionInfoForRemove(HRegionInfo.convert(hri));
    }
  }
  if (regionsToAdd != null) {
    for (    HRegionInfo hri : regionsToAdd) {
      restoreSnapshotMsg.addRegionInfoForAdd(HRegionInfo.convert(hri));
    }
  }
  if (!parentsToChildrenPairMap.isEmpty()) {
    final Iterator<Map.Entry<String,Pair<String,String>>> it=parentsToChildrenPairMap.entrySet().iterator();
    while (it.hasNext()) {
      final Map.Entry<String,Pair<String,String>> entry=it.next();
      MasterProcedureProtos.RestoreParentToChildRegionsPair.Builder parentToChildrenPair=MasterProcedureProtos.RestoreParentToChildRegionsPair.newBuilder().setParentRegionName(entry.getKey()).setChild1RegionName(entry.getValue().getFirst()).setChild2RegionName(entry.getValue().getSecond());
      restoreSnapshotMsg.addParentToChildRegionsPairList(parentToChildrenPair);
    }
  }
  restoreSnapshotMsg.build().writeDelimitedTo(stream);
}
