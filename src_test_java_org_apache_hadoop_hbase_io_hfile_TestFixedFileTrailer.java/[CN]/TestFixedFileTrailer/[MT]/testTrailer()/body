{
  FixedFileTrailer t=new FixedFileTrailer(version);
  t.setDataIndexCount(3);
  t.setEntryCount(((long)Integer.MAX_VALUE) + 1);
  if (version == 1) {
    t.setFileInfoOffset(876);
  }
  if (version == 2) {
    t.setLastDataBlockOffset(291);
    t.setNumDataIndexLevels(3);
    t.setComparatorClass(KeyValue.KEY_COMPARATOR.getClass());
    t.setFirstDataBlockOffset(9081723123L);
    t.setUncompressedDataIndexSize(827398717L);
  }
  t.setLoadOnOpenOffset(128);
  t.setMetaIndexCount(7);
  t.setTotalUncompressedBytes(129731987);
{
    DataOutputStream dos=new DataOutputStream(baos);
    t.serialize(dos);
    dos.flush();
    assertEquals(dos.size(),FixedFileTrailer.getTrailerSize(version));
  }
  byte[] bytes=baos.toByteArray();
  baos.reset();
  assertEquals(bytes.length,FixedFileTrailer.getTrailerSize(version));
  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
{
    DataInputStream dis=new DataInputStream(bais);
    FixedFileTrailer t2=new FixedFileTrailer(version);
    t2.deserialize(dis);
    assertEquals(-1,bais.read());
    checkLoadedTrailer(version,t,t2);
  }
  Path trailerPath=new Path(util.getDataTestDir(),"trailer_" + version);
{
    for (    byte invalidVersion : new byte[]{HFile.MIN_FORMAT_VERSION - 1,HFile.MAX_FORMAT_VERSION + 1}) {
      bytes[bytes.length - 1]=invalidVersion;
      writeTrailer(trailerPath,null,bytes);
      try {
        readTrailer(trailerPath);
        fail("Exception expected");
      }
 catch (      IOException ex) {
        String msg=ex.getMessage();
        String cleanMsg=msg.replaceAll("^(java(\\.[a-zA-Z]+)+:\\s+)?|\\s+\\(.*\\)\\s*$","");
        assertEquals("Actual exception message is \"" + msg + "\".\n"+ "Cleaned-up message","Invalid HFile version: " + invalidVersion,cleanMsg);
        LOG.info("Got an expected exception: " + msg);
      }
    }
  }
  writeTrailer(trailerPath,t,null);
  FixedFileTrailer t4=readTrailer(trailerPath);
  checkLoadedTrailer(version,t,t4);
  String trailerStr=t.toString();
  assertEquals("Invalid number of fields in the string representation " + "of the trailer: " + trailerStr,NUM_FIELDS_BY_VERSION[version - 1],trailerStr.split(", ").length);
  assertEquals(trailerStr,t4.toString());
}
