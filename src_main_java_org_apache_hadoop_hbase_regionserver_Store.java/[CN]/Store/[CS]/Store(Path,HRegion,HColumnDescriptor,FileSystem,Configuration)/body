{
  super(conf,region.getTableDesc().getNameAsString(),Bytes.toString(family.getName()));
  HRegionInfo info=region.regionInfo;
  this.fs=fs;
  this.homedir=getStoreHomedir(basedir,info.getEncodedName(),family.getName());
  if (!this.fs.exists(this.homedir)) {
    if (!this.fs.mkdirs(this.homedir))     throw new IOException("Failed create of: " + this.homedir.toString());
  }
  this.region=region;
  this.family=family;
  this.conf=conf;
  this.blocksize=family.getBlocksize();
  this.compression=family.getCompression();
  this.compactionCompression=(family.getCompactionCompression() != Compression.Algorithm.NONE) ? family.getCompactionCompression() : this.compression;
  this.comparator=info.getComparator();
  this.ttl=family.getTimeToLive();
  if (ttl == HConstants.FOREVER) {
    ttl=Long.MAX_VALUE;
  }
 else   if (ttl == -1) {
    ttl=Long.MAX_VALUE;
  }
 else {
    this.ttl*=1000;
  }
  scanInfo=new ScanInfo(family.getName(),family.getMinVersions(),family.getMaxVersions(),ttl,family.getKeepDeletedCells(),this.comparator);
  this.memstore=new MemStore(conf,this.comparator);
  this.storeNameStr=getColumnFamilyName();
  this.minFilesToCompact=Math.max(2,conf.getInt("hbase.hstore.compaction.min",conf.getInt("hbase.hstore.compactionThreshold",3)));
  this.cacheConf=new CacheConfig(conf,family);
  this.blockingStoreFileCount=conf.getInt("hbase.hstore.blockingStoreFiles",7);
  this.majorCompactionTime=getNextMajorCompactTime();
  this.maxFilesToCompact=conf.getInt("hbase.hstore.compaction.max",10);
  this.minCompactSize=conf.getLong("hbase.hstore.compaction.min.size",this.region.memstoreFlushSize);
  this.maxCompactSize=conf.getLong("hbase.hstore.compaction.max.size",Long.MAX_VALUE);
  this.compactRatio=conf.getFloat("hbase.hstore.compaction.ratio",1.2F);
  this.compactionKVMax=conf.getInt("hbase.hstore.compaction.kv.max",10);
  if (Store.closeCheckInterval == 0) {
    Store.closeCheckInterval=conf.getInt("hbase.hstore.close.check.interval",10 * 1000 * 1000);
  }
  this.storefiles=sortAndClone(loadStoreFiles());
}
