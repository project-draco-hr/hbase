{
  HRegionInfo info=region.regionInfo;
  this.fs=fs;
  this.homedir=getStoreHomedir(basedir,info.getEncodedName(),family.getName());
  if (!this.fs.exists(this.homedir)) {
    if (!this.fs.mkdirs(this.homedir))     throw new IOException("Failed create of: " + this.homedir.toString());
  }
  this.region=region;
  this.family=family;
  this.conf=conf;
  this.blockcache=family.isBlockCacheEnabled();
  this.blocksize=family.getBlocksize();
  this.compression=family.getCompression();
  this.comparator=info.getComparator();
  this.ttl=family.getTimeToLive();
  if (ttl == HConstants.FOREVER) {
    ttl=Long.MAX_VALUE;
  }
 else   if (ttl == -1) {
    ttl=Long.MAX_VALUE;
  }
 else {
    this.ttl*=1000;
  }
  this.memstore=new MemStore(this.comparator);
  this.storeNameStr=Bytes.toString(this.family.getName());
  this.compactionThreshold=conf.getInt("hbase.hstore.compactionThreshold",3);
  this.inMemory=family.isInMemory();
  long maxFileSize=info.getTableDesc().getMaxFileSize();
  if (maxFileSize == HConstants.DEFAULT_MAX_FILE_SIZE) {
    maxFileSize=conf.getLong("hbase.hregion.max.filesize",HConstants.DEFAULT_MAX_FILE_SIZE);
  }
  this.desiredMaxFileSize=maxFileSize;
  this.majorCompactionTime=conf.getLong(HConstants.MAJOR_COMPACTION_PERIOD,86400000);
  if (family.getValue(HConstants.MAJOR_COMPACTION_PERIOD) != null) {
    String strCompactionTime=family.getValue(HConstants.MAJOR_COMPACTION_PERIOD);
    this.majorCompactionTime=(new Long(strCompactionTime)).longValue();
  }
  this.maxFilesToCompact=conf.getInt("hbase.hstore.compaction.max",10);
  this.storefiles=ImmutableList.copyOf(loadStoreFiles());
}
