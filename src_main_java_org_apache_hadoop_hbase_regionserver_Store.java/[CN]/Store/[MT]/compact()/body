{
  boolean forceSplit=this.region.shouldForceSplit();
synchronized (compactLock) {
    this.lastCompactSize=0;
    for (    StoreFile sf : this.storefiles) {
      if (sf.getPath() == null || sf.getReader() == null) {
        boolean np=sf.getPath() == null;
        LOG.debug("StoreFile " + sf + " has null "+ (np ? "Path" : "Reader"));
        return null;
      }
    }
    boolean references=hasReferences(this.storefiles);
    if (forceSplit && !this.forceMajor && !references) {
      return checkSplit(forceSplit);
    }
    Collection<StoreFile> filesToCompact=compactSelection(this.storefiles,this.forceMajor);
    if (filesToCompact.isEmpty()) {
      return checkSplit(forceSplit);
    }
    long totalSize=0;
    for (    StoreFile sf : filesToCompact) {
      totalSize+=sf.getReader().length();
    }
    this.lastCompactSize=totalSize;
    boolean majorcompaction=(filesToCompact.size() == this.storefiles.size());
    if (majorcompaction) {
      this.forceMajor=false;
    }
    long maxId=StoreFile.getMaxSequenceIdInList(filesToCompact);
    LOG.info("Started compaction of " + filesToCompact.size() + " file(s) in cf="+ this.storeNameStr+ (hasReferences(filesToCompact) ? ", hasReferences=true," : " ")+ " into "+ region.getTmpDir()+ ", seqid="+ maxId+ ", totalSize="+ StringUtils.humanReadableInt(totalSize));
    StoreFile.Writer writer=compactStore(filesToCompact,majorcompaction,maxId);
    StoreFile sf=completeCompaction(filesToCompact,writer);
    if (LOG.isInfoEnabled()) {
      LOG.info("Completed" + (majorcompaction ? " major " : " ") + "compaction of "+ filesToCompact.size()+ " file(s), new file="+ (sf == null ? "none" : sf.toString())+ ", size="+ (sf == null ? "none" : StringUtils.humanReadableInt(sf.getReader().length()))+ "; total size for store is "+ StringUtils.humanReadableInt(storeSize));
    }
  }
  return checkSplit(forceSplit);
}
