{
  StoreFile result=null;
  if (compactedFile != null) {
    validateStoreFile(compactedFile.getPath());
    Path origPath=compactedFile.getPath();
    Path destPath=new Path(homedir,origPath.getName());
    LOG.info("Renaming compacted file at " + origPath + " to "+ destPath);
    if (!fs.rename(origPath,destPath)) {
      LOG.error("Failed move of compacted file " + origPath + " to "+ destPath);
      throw new IOException("Failed move of compacted file " + origPath + " to "+ destPath);
    }
    result=new StoreFile(this.fs,destPath,this.conf,this.cacheConf,this.family.getBloomFilterType());
    passSchemaMetricsTo(result);
    result.createReader();
  }
  try {
    this.lock.writeLock().lock();
    try {
      ArrayList<StoreFile> newStoreFiles=Lists.newArrayList(storefiles);
      newStoreFiles.removeAll(compactedFiles);
      filesCompacting.removeAll(compactedFiles);
      if (result != null) {
        newStoreFiles.add(result);
      }
      this.storefiles=sortAndClone(newStoreFiles);
    }
  finally {
      this.lock.writeLock().unlock();
    }
    notifyChangedReadersObservers();
    for (    StoreFile hsf : compactedFiles) {
      hsf.deleteReader();
    }
  }
 catch (  IOException e) {
    e=RemoteExceptionHandler.checkIOException(e);
    LOG.error("Failed replacing compacted files in " + this.storeNameStr + ". Compacted file is "+ (result == null ? "none" : result.toString())+ ".  Files replaced "+ compactedFiles.toString()+ " some of which may have been already removed",e);
  }
  this.storeSize=0L;
  this.totalUncompressedBytes=0L;
  for (  StoreFile hsf : this.storefiles) {
    StoreFile.Reader r=hsf.getReader();
    if (r == null) {
      LOG.warn("StoreFile " + hsf + " has a null Reader");
      continue;
    }
    this.storeSize+=r.length();
    this.totalUncompressedBytes+=r.getTotalUncompressedBytes();
  }
  return result;
}
