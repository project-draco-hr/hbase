{
  int maxKeyCount=0;
  for (  StoreFile file : filesToCompact) {
    StoreFile.Reader r=file.getReader();
    if (r != null) {
      long keyCount=(r.getBloomFilterType() == family.getBloomFilterType()) ? r.getFilterEntries() : r.getEntries();
      maxKeyCount+=keyCount;
      if (LOG.isDebugEnabled()) {
        LOG.debug("Compacting: " + file + "; keyCount = "+ keyCount+ "; Bloom Type = "+ r.getBloomFilterType().toString()+ "; Size = "+ StringUtils.humanReadableInt(r.length()));
      }
    }
  }
  List<StoreFileScanner> scanners=StoreFileScanner.getScannersForStoreFiles(filesToCompact,false,false);
  StoreFile.Writer writer=null;
  try {
    InternalScanner scanner=null;
    try {
      Scan scan=new Scan();
      scan.setMaxVersions(family.getMaxVersions());
      scanner=new StoreScanner(this,scan,scanners,!majorCompaction);
      int bytesWritten=0;
      ArrayList<KeyValue> kvs=new ArrayList<KeyValue>();
      while (scanner.next(kvs)) {
        if (writer == null && !kvs.isEmpty()) {
          writer=createWriterInTmp(maxKeyCount,this.compactionCompression);
        }
        if (writer != null) {
          for (          KeyValue kv : kvs) {
            writer.append(kv);
            if (Store.closeCheckInterval > 0) {
              bytesWritten+=kv.getLength();
              if (bytesWritten > Store.closeCheckInterval) {
                bytesWritten=0;
                if (!this.region.areWritesEnabled()) {
                  writer.close();
                  fs.delete(writer.getPath(),false);
                  throw new InterruptedIOException("Aborting compaction of store " + this + " in region "+ this.region+ " because user requested stop.");
                }
              }
            }
          }
        }
        kvs.clear();
      }
    }
  finally {
      if (scanner != null) {
        scanner.close();
      }
    }
  }
  finally {
    if (writer != null) {
      writer.appendMetadata(maxId,majorCompaction);
      writer.close();
    }
  }
  return writer;
}
