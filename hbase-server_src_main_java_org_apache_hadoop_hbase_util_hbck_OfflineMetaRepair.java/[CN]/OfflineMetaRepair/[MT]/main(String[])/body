{
  Configuration conf=HBaseConfiguration.create();
  conf.set("fs.defaultFS",conf.get(HConstants.HBASE_DIR));
  conf.set("fs.default.name",conf.get(HConstants.HBASE_DIR));
  HBaseFsck fsck=new HBaseFsck(conf);
  boolean fixHoles=false;
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    if (cmd.equals("-details")) {
      fsck.setDisplayFullReport();
    }
 else     if (cmd.equals("-base")) {
      if (i == args.length - 1) {
        System.err.println("OfflineMetaRepair: -base needs an HDFS path.");
        printUsageAndExit();
      }
      i++;
      String path=args[i];
      conf.set(HConstants.HBASE_DIR,path);
      conf.set("fs.defaultFS",conf.get(HConstants.HBASE_DIR));
      conf.set("fs.default.name",conf.get(HConstants.HBASE_DIR));
    }
 else     if (cmd.equals("-sidelineDir")) {
      if (i == args.length - 1) {
        System.err.println("OfflineMetaRepair: -sidelineDir needs an HDFS path.");
        printUsageAndExit();
      }
      i++;
      fsck.setSidelineDir(args[i]);
    }
 else     if (cmd.equals("-fixHoles")) {
      fixHoles=true;
    }
 else     if (cmd.equals("-fix")) {
      fixHoles=true;
    }
 else {
      String str="Unknown command line option : " + cmd;
      LOG.info(str);
      System.out.println(str);
      printUsageAndExit();
    }
  }
  boolean success=false;
  try {
    success=fsck.rebuildMeta(fixHoles);
  }
 catch (  MultipleIOException mioes) {
    for (    IOException ioe : mioes.getExceptions()) {
      LOG.error("Bailed out due to:",ioe);
    }
  }
catch (  Exception e) {
    LOG.error("Bailed out due to: ",e);
  }
 finally {
    System.exit(success ? 0 : 1);
  }
}
