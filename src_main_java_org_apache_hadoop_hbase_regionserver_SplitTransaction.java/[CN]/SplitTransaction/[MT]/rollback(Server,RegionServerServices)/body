{
  boolean result=true;
  FileSystem fs=this.parent.getFilesystem();
  ListIterator<JournalEntry> iterator=this.journal.listIterator(this.journal.size());
  while (iterator.hasPrevious()) {
    JournalEntry je=iterator.previous();
switch (je) {
case SET_SPLITTING_IN_ZK:
      if (server != null && server.getZooKeeper() != null) {
        cleanZK(server,this.parent.getRegionInfo());
      }
    break;
case CREATE_SPLIT_DIR:
  this.parent.writestate.writesEnabled=true;
cleanupSplitDir(fs,this.splitdir);
break;
case CLOSED_PARENT_REGION:
try {
this.parent.initialize();
}
 catch (IOException e) {
LOG.error("Failed rollbacking CLOSED_PARENT_REGION of region " + this.parent.getRegionNameAsString(),e);
throw new RuntimeException(e);
}
break;
case STARTED_REGION_A_CREATION:
cleanupDaughterRegion(fs,this.parent.getTableDir(),this.hri_a.getEncodedName());
break;
case STARTED_REGION_B_CREATION:
cleanupDaughterRegion(fs,this.parent.getTableDir(),this.hri_b.getEncodedName());
break;
case OFFLINED_PARENT:
if (services != null) services.addToOnlineRegions(this.parent);
break;
case PONR:
return false;
default :
throw new RuntimeException("Unhandled journal entry: " + je);
}
}
return result;
}
