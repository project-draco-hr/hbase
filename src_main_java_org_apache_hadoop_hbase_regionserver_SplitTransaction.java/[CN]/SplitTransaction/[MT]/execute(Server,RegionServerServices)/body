{
  LOG.info("Starting split of region " + this.parent);
  if (!this.parent.lock.writeLock().isHeldByCurrentThread()) {
    throw new SplitAndCloseWriteLockNotHeld();
  }
  boolean testing=server.getConfiguration().getBoolean("hbase.testing.nocluster",false);
  createSplitDir(this.parent.getFilesystem(),this.splitdir);
  this.journal.add(JournalEntry.CREATE_SPLIT_DIR);
  List<StoreFile> hstoreFilesToSplit=this.parent.close(false);
  this.journal.add(JournalEntry.CLOSED_PARENT_REGION);
  if (!testing) {
    services.removeFromOnlineRegions(this.parent.getRegionInfo().getEncodedName());
  }
  this.journal.add(JournalEntry.OFFLINED_PARENT);
  splitStoreFiles(this.splitdir,hstoreFilesToSplit);
  this.journal.add(JournalEntry.STARTED_REGION_A_CREATION);
  HRegion a=createDaughterRegion(this.hri_a,this.parent.flushRequester);
  this.journal.add(JournalEntry.STARTED_REGION_B_CREATION);
  HRegion b=createDaughterRegion(this.hri_b,this.parent.flushRequester);
  if (!testing) {
    MetaEditor.offlineParentInMeta(server.getCatalogTracker(),this.parent.getRegionInfo(),a.getRegionInfo(),b.getRegionInfo());
  }
  if (!testing) {
    DaughterOpener aOpener=new DaughterOpener(server,services,a);
    DaughterOpener bOpener=new DaughterOpener(server,services,b);
    aOpener.start();
    bOpener.start();
    try {
      aOpener.join();
      bOpener.join();
    }
 catch (    InterruptedException e) {
      server.abort("Exception running daughter opens",e);
    }
  }
  this.parent.lock.writeLock().unlock();
  return new PairOfSameType<HRegion>(a,b);
}
