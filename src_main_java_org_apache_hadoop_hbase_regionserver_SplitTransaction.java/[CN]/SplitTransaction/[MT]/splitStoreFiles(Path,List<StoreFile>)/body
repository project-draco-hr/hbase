{
  if (hstoreFilesToSplit == null) {
    throw new IOException("Close returned empty list of StoreFiles");
  }
  int nbFiles=hstoreFilesToSplit.size();
  ThreadFactoryBuilder builder=new ThreadFactoryBuilder();
  builder.setNameFormat("StoreFileSplitter-%1$d");
  ThreadFactory factory=builder.build();
  ThreadPoolExecutor threadPool=(ThreadPoolExecutor)Executors.newFixedThreadPool(nbFiles,factory);
  List<Future<Void>> futures=new ArrayList<Future<Void>>(nbFiles);
  for (  StoreFile sf : hstoreFilesToSplit) {
    StoreFileSplitter sfs=new StoreFileSplitter(sf,splitdir);
    futures.add(threadPool.submit(sfs));
  }
  threadPool.shutdown();
  try {
    boolean stillRunning=!threadPool.awaitTermination(this.fileSplitTimeout,TimeUnit.MILLISECONDS);
    if (stillRunning) {
      threadPool.shutdownNow();
      throw new IOException("Took too long to split the" + " files and create the references, aborting split");
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new IOException("Interrupted while waiting for file splitters",e);
  }
  for (  Future<Void> future : futures) {
    try {
      future.get();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException("Interrupted while trying to get the results of file splitters",e);
    }
catch (    ExecutionException e) {
      throw new IOException(e);
    }
  }
}
