{
  int index=-1;
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    if (cmd.startsWith("-")) {
      if (index >= 0) {
        System.err.println("Invalid command line options");
        printUsageAndExit();
      }
      if (cmd.equals("-help")) {
        printUsageAndExit();
      }
 else       if (cmd.equals("-daemon") && interval == 0) {
        interval=DEFAULT_INTERVAL;
      }
 else       if (cmd.equals("-interval")) {
        i++;
        if (i == args.length) {
          System.err.println("-interval needs a numeric value argument.");
          printUsageAndExit();
        }
        try {
          interval=Long.parseLong(args[i]) * 1000;
        }
 catch (        NumberFormatException e) {
          System.err.println("-interval needs a numeric value argument.");
          printUsageAndExit();
        }
      }
 else       if (cmd.equals("-regionserver")) {
        this.regionServerMode=true;
      }
 else       if (cmd.equals("-e")) {
        this.useRegExp=true;
      }
 else       if (cmd.equals("-t")) {
        i++;
        if (i == args.length) {
          System.err.println("-t needs a numeric value argument.");
          printUsageAndExit();
        }
        try {
          this.timeout=Long.parseLong(args[i]);
        }
 catch (        NumberFormatException e) {
          System.err.println("-t needs a numeric value argument.");
          printUsageAndExit();
        }
      }
 else       if (cmd.equals("-f")) {
        i++;
        if (i == args.length) {
          System.err.println("-f needs a boolean value argument (true|false).");
          printUsageAndExit();
        }
        this.failOnError=Boolean.parseBoolean(args[i]);
      }
 else {
        System.err.println(cmd + " options is invalid.");
        printUsageAndExit();
      }
    }
 else     if (index < 0) {
      index=i;
    }
  }
  Monitor monitor=null;
  Thread monitorThread=null;
  long startTime=0;
  long currentTimeLength=0;
  do {
    monitor=this.newMonitor(index,args);
    monitorThread=new Thread(monitor);
    startTime=System.currentTimeMillis();
    monitorThread.start();
    while (!monitor.isDone()) {
      Thread.sleep(1000);
      if (this.failOnError && monitor.hasError()) {
        monitorThread.interrupt();
        System.exit(monitor.errorCode);
      }
      currentTimeLength=System.currentTimeMillis() - startTime;
      if (currentTimeLength > this.timeout) {
        LOG.error("The monitor is running too long (" + currentTimeLength + ") after timeout limit:"+ this.timeout+ " will be killed itself !!");
        monitor.errorCode=TIMEOUT_ERROR_EXIT_CODE;
        break;
      }
    }
    if (this.failOnError && monitor.hasError()) {
      monitorThread.interrupt();
      System.exit(monitor.errorCode);
    }
    Thread.sleep(interval);
  }
 while (interval > 0);
  return (monitor.errorCode);
}
