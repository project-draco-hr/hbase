{
  int index=parseArgs(args);
  ChoreService choreService=null;
  final ScheduledChore authChore=AuthUtil.getAuthChore(conf);
  if (authChore != null) {
    choreService=new ChoreService("CANARY_TOOL");
    choreService.scheduleChore(authChore);
  }
  Monitor monitor=null;
  Thread monitorThread=null;
  long startTime=0;
  long currentTimeLength=0;
  try (Connection connection=ConnectionFactory.createConnection(this.conf)){
    do {
      try {
        monitor=this.newMonitor(connection,index,args);
        monitorThread=new Thread(monitor);
        startTime=System.currentTimeMillis();
        monitorThread.start();
        while (!monitor.isDone()) {
          Thread.sleep(1000);
          if (this.failOnError && monitor.hasError()) {
            monitorThread.interrupt();
            if (monitor.initialized) {
              System.exit(monitor.errorCode);
            }
 else {
              System.exit(INIT_ERROR_EXIT_CODE);
            }
          }
          currentTimeLength=System.currentTimeMillis() - startTime;
          if (currentTimeLength > this.timeout) {
            LOG.error("The monitor is running too long (" + currentTimeLength + ") after timeout limit:"+ this.timeout+ " will be killed itself !!");
            if (monitor.initialized) {
              System.exit(TIMEOUT_ERROR_EXIT_CODE);
            }
 else {
              System.exit(INIT_ERROR_EXIT_CODE);
            }
            break;
          }
        }
        if (this.failOnError && monitor.finalCheckForErrors()) {
          monitorThread.interrupt();
          System.exit(monitor.errorCode);
        }
      }
  finally {
        if (monitor != null)         monitor.close();
      }
      Thread.sleep(interval);
    }
 while (interval > 0);
  }
   if (choreService != null) {
    choreService.shutdown();
  }
  return (monitor.errorCode);
}
