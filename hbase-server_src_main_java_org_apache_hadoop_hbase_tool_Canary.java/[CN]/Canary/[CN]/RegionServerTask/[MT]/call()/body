{
  TableName tableName=null;
  Table table=null;
  Get get=null;
  byte[] startKey=null;
  Scan scan=null;
  StopWatch stopWatch=new StopWatch();
  stopWatch.reset();
  try {
    tableName=region.getTable();
    table=connection.getTable(tableName);
    startKey=region.getStartKey();
    if (startKey.length > 0) {
      get=new Get(startKey);
      get.setCacheBlocks(false);
      get.setFilter(new FirstKeyOnlyFilter());
      stopWatch.start();
      table.get(get);
      stopWatch.stop();
    }
 else {
      scan=new Scan();
      scan.setCacheBlocks(false);
      scan.setFilter(new FirstKeyOnlyFilter());
      scan.setCaching(1);
      scan.setMaxResultSize(1L);
      stopWatch.start();
      ResultScanner s=table.getScanner(scan);
      s.close();
      stopWatch.stop();
    }
    successes.incrementAndGet();
    sink.publishReadTiming(tableName.getNameAsString(),serverName,stopWatch.getTime());
  }
 catch (  TableNotFoundException tnfe) {
    LOG.error("Table may be deleted",tnfe);
  }
catch (  TableNotEnabledException tnee) {
    successes.incrementAndGet();
    LOG.debug("The targeted table was disabled.  Assuming success.");
  }
catch (  DoNotRetryIOException dnrioe) {
    sink.publishReadFailure(tableName.getNameAsString(),serverName);
    LOG.error(dnrioe);
  }
catch (  IOException e) {
    sink.publishReadFailure(tableName.getNameAsString(),serverName);
    LOG.error(e);
  }
 finally {
    if (table != null) {
      try {
        table.close();
      }
 catch (      IOException e) {
        LOG.error("Close table failed",e);
      }
    }
    scan=null;
    get=null;
    startKey=null;
  }
  return null;
}
