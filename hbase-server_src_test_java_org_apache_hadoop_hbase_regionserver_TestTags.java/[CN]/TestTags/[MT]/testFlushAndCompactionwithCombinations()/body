{
  HTable table=null;
  try {
    TableName tableName=TableName.valueOf("testFlushAndCompactionwithCombinations");
    byte[] fam=Bytes.toBytes("info");
    byte[] row=Bytes.toBytes("rowa");
    byte[] qual=Bytes.toBytes("qual");
    byte[] row1=Bytes.toBytes("rowb");
    byte[] row2=Bytes.toBytes("rowc");
    byte[] rowd=Bytes.toBytes("rowd");
    byte[] rowe=Bytes.toBytes("rowe");
    HTableDescriptor desc=new HTableDescriptor(tableName);
    HColumnDescriptor colDesc=new HColumnDescriptor(fam);
    colDesc.setBlockCacheEnabled(true);
    colDesc.setDataBlockEncoding(DataBlockEncoding.PREFIX_TREE);
    desc.addFamily(colDesc);
    HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
    admin.createTable(desc);
    table=new HTable(TEST_UTIL.getConfiguration(),tableName);
    Put put=new Put(row);
    byte[] value=Bytes.toBytes("value");
    Tag[] tags=new Tag[1];
    tags[0]=new Tag((byte)1,"ram");
    put.add(fam,qual,HConstants.LATEST_TIMESTAMP,value,tags);
    table.put(put);
    Put put1=new Put(row1);
    byte[] value1=Bytes.toBytes("1000dfsdf");
    put1.add(fam,qual,HConstants.LATEST_TIMESTAMP,value1);
    table.put(put1);
    admin.flush(tableName.getName());
    List<HRegion> regions=TEST_UTIL.getHBaseCluster().getRegions(tableName.getName());
    for (    HRegion region : regions) {
      Store store=region.getStore(fam);
      while (!(store.getStorefilesCount() > 0)) {
        Thread.sleep(10);
      }
    }
    put1=new Put(row2);
    value1=Bytes.toBytes("1000dfsdf");
    put1.add(fam,qual,HConstants.LATEST_TIMESTAMP,value1);
    table.put(put1);
    admin.flush(tableName.getName());
    regions=TEST_UTIL.getHBaseCluster().getRegions(tableName.getName());
    for (    HRegion region : regions) {
      Store store=region.getStore(fam);
      while (!(store.getStorefilesCount() > 1)) {
        Thread.sleep(10);
      }
    }
    Put put2=new Put(rowd);
    byte[] value2=Bytes.toBytes("1000dfsdf");
    put2.add(fam,qual,HConstants.LATEST_TIMESTAMP,value2);
    table.put(put2);
    put2=new Put(rowe);
    value2=Bytes.toBytes("1000dfsddfdf");
    put2.add(fam,qual,HConstants.LATEST_TIMESTAMP,value2,tags);
    table.put(put2);
    admin.flush(tableName.getName());
    regions=TEST_UTIL.getHBaseCluster().getRegions(tableName.getName());
    for (    HRegion region : regions) {
      Store store=region.getStore(fam);
      while (!(store.getStorefilesCount() > 2)) {
        Thread.sleep(10);
      }
    }
    Scan s=new Scan(row);
    ResultScanner scanner=table.getScanner(s);
    try {
      Result[] next=scanner.next(5);
      for (      Result result : next) {
        CellScanner cellScanner=result.cellScanner();
        boolean advance=cellScanner.advance();
        KeyValue current=(KeyValue)cellScanner.current();
        int tagsLength=current.getTagsLength();
        if (tagsLength == 0) {
          assertTrue(current.getValueOffset() + current.getValueLength() == current.getLength());
        }
 else {
          assertTrue(current.getValueOffset() + current.getValueLength() != current.getLength());
        }
      }
    }
  finally {
      if (scanner != null) {
        scanner.close();
      }
    }
    while (admin.getCompactionState(tableName.getName()) != CompactionState.NONE) {
      Thread.sleep(10);
    }
    s=new Scan(row);
    scanner=table.getScanner(s);
    try {
      Result[] next=scanner.next(5);
      for (      Result result : next) {
        CellScanner cellScanner=result.cellScanner();
        boolean advance=cellScanner.advance();
        KeyValue current=(KeyValue)cellScanner.current();
        if (current.getTagsLength() == 0) {
          assertTrue(current.getValueOffset() + current.getValueLength() == current.getLength());
        }
 else {
          assertTrue(current.getValueOffset() + current.getValueLength() != current.getLength());
        }
      }
    }
  finally {
      if (scanner != null) {
        scanner.close();
      }
    }
  }
  finally {
    if (table != null) {
      table.close();
    }
  }
}
