{
  TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
  byte[] fam=Bytes.toBytes("info");
  byte[] row=Bytes.toBytes("rowa");
  byte[] qual=Bytes.toBytes("qual");
  byte[] row1=Bytes.toBytes("rowb");
  byte[] row2=Bytes.toBytes("rowc");
  byte[] rowd=Bytes.toBytes("rowd");
  byte[] rowe=Bytes.toBytes("rowe");
  HTable table=null;
  for (  DataBlockEncoding encoding : DataBlockEncoding.values()) {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    HColumnDescriptor colDesc=new HColumnDescriptor(fam);
    colDesc.setBlockCacheEnabled(true);
    colDesc.setDataBlockEncoding(encoding);
    desc.addFamily(colDesc);
    Admin admin=TEST_UTIL.getHBaseAdmin();
    admin.createTable(desc);
    try {
      table=new HTable(TEST_UTIL.getConfiguration(),tableName);
      Put put=new Put(row);
      byte[] value=Bytes.toBytes("value");
      put.add(fam,qual,HConstants.LATEST_TIMESTAMP,value);
      int bigTagLen=Short.MAX_VALUE + 5;
      put.setAttribute("visibility",new byte[bigTagLen]);
      table.put(put);
      Put put1=new Put(row1);
      byte[] value1=Bytes.toBytes("1000dfsdf");
      put1.add(fam,qual,HConstants.LATEST_TIMESTAMP,value1);
      table.put(put1);
      admin.flush(tableName);
      List<HRegion> regions=TEST_UTIL.getHBaseCluster().getRegions(tableName.getName());
      for (      HRegion region : regions) {
        Store store=region.getStore(fam);
        while (!(store.getStorefilesCount() > 0)) {
          Thread.sleep(10);
        }
      }
      put1=new Put(row2);
      value1=Bytes.toBytes("1000dfsdf");
      put1.add(fam,qual,HConstants.LATEST_TIMESTAMP,value1);
      table.put(put1);
      admin.flush(tableName);
      regions=TEST_UTIL.getHBaseCluster().getRegions(tableName);
      for (      HRegion region : regions) {
        Store store=region.getStore(fam);
        while (!(store.getStorefilesCount() > 1)) {
          Thread.sleep(10);
        }
      }
      Put put2=new Put(rowd);
      byte[] value2=Bytes.toBytes("1000dfsdf");
      put2.add(fam,qual,HConstants.LATEST_TIMESTAMP,value2);
      table.put(put2);
      put2=new Put(rowe);
      value2=Bytes.toBytes("1000dfsddfdf");
      put2.add(fam,qual,HConstants.LATEST_TIMESTAMP,value2);
      put.setAttribute("visibility",Bytes.toBytes("ram"));
      table.put(put2);
      admin.flush(tableName);
      regions=TEST_UTIL.getHBaseCluster().getRegions(tableName);
      for (      HRegion region : regions) {
        Store store=region.getStore(fam);
        while (!(store.getStorefilesCount() > 2)) {
          Thread.sleep(10);
        }
      }
      TestCoprocessorForTags.checkTagPresence=true;
      Scan s=new Scan(row);
      s.setCaching(1);
      ResultScanner scanner=table.getScanner(s);
      try {
        Result next=null;
        while ((next=scanner.next()) != null) {
          CellScanner cellScanner=next.cellScanner();
          cellScanner.advance();
          KeyValue current=(KeyValue)cellScanner.current();
          if (CellUtil.matchingRow(current,row)) {
            assertEquals(1,TestCoprocessorForTags.tags.size());
            Tag tag=TestCoprocessorForTags.tags.get(0);
            assertEquals(bigTagLen,tag.getTagLength());
          }
 else {
            assertEquals(0,TestCoprocessorForTags.tags.size());
          }
        }
      }
  finally {
        if (scanner != null) {
          scanner.close();
        }
        TestCoprocessorForTags.checkTagPresence=false;
      }
      while (admin.getCompactionState(tableName) != CompactionState.NONE) {
        Thread.sleep(10);
      }
      TestCoprocessorForTags.checkTagPresence=true;
      scanner=table.getScanner(s);
      try {
        Result next=null;
        while ((next=scanner.next()) != null) {
          CellScanner cellScanner=next.cellScanner();
          cellScanner.advance();
          KeyValue current=(KeyValue)cellScanner.current();
          if (CellUtil.matchingRow(current,row)) {
            assertEquals(1,TestCoprocessorForTags.tags.size());
            Tag tag=TestCoprocessorForTags.tags.get(0);
            assertEquals(bigTagLen,tag.getTagLength());
          }
 else {
            assertEquals(0,TestCoprocessorForTags.tags.size());
          }
        }
      }
  finally {
        if (scanner != null) {
          scanner.close();
        }
        TestCoprocessorForTags.checkTagPresence=false;
      }
    }
  finally {
      if (table != null) {
        table.close();
      }
      admin.disableTable(tableName);
      admin.deleteTable(tableName);
    }
  }
}
