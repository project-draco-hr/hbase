{
  Scan s=new Scan();
  int versions=args.length > 2 ? Integer.parseInt(args[2]) : 1;
  s.setMaxVersions(versions);
  long startTime=args.length > 3 ? Long.parseLong(args[3]) : 0L;
  long endTime=args.length > 4 ? Long.parseLong(args[4]) : Long.MAX_VALUE;
  s.setTimeRange(startTime,endTime);
  s.setCacheBlocks(false);
  if (conf.get(TableInputFormat.SCAN_ROW_START) != null) {
    s.setStartRow(Bytes.toBytesBinary(conf.get(TableInputFormat.SCAN_ROW_START)));
  }
  if (conf.get(TableInputFormat.SCAN_ROW_STOP) != null) {
    s.setStopRow(Bytes.toBytesBinary(conf.get(TableInputFormat.SCAN_ROW_STOP)));
  }
  boolean raw=Boolean.parseBoolean(conf.get(RAW_SCAN));
  if (raw) {
    s.setRaw(raw);
  }
  if (conf.get(TableInputFormat.SCAN_COLUMN_FAMILY) != null) {
    s.addFamily(Bytes.toBytes(conf.get(TableInputFormat.SCAN_COLUMN_FAMILY)));
  }
  Filter exportFilter=getExportFilter(args);
  if (exportFilter != null) {
    LOG.info("Setting Scan Filter for Export.");
    s.setFilter(exportFilter);
  }
  int batching=conf.getInt(EXPORT_BATCHING,-1);
  if (batching != -1) {
    try {
      s.setBatch(batching);
    }
 catch (    IncompatibleFilterException e) {
      LOG.error("Batching could not be set",e);
    }
  }
  LOG.info("versions=" + versions + ", starttime="+ startTime+ ", endtime="+ endTime+ ", keepDeletedCells="+ raw);
  return s;
}
