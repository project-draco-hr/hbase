{
  HRegionLocation location;
  if (useCache) {
    location=getCachedLocation(tableName,row);
    if (location != null) {
      return location;
    }
  }
  byte[] metaKey=HRegionInfo.createRegionName(tableName,row,HConstants.NINES,false);
  for (int tries=0; true; tries++) {
    if (tries >= numRetries) {
      throw new NoServerForRegionException("Unable to find region for " + Bytes.toStringBinary(row) + " after "+ numRetries+ " tries.");
    }
    HRegionLocation metaLocation=null;
    try {
      metaLocation=locateRegion(parentTable,metaKey);
      if (metaLocation == null)       continue;
      HRegionInterface server=getHRegionConnection(metaLocation.getHostname(),metaLocation.getPort());
      Result regionInfoRow=null;
synchronized (regionLockObject) {
        if (Bytes.equals(parentTable,HConstants.META_TABLE_NAME) && (getRegionCachePrefetch(tableName))) {
          prefetchRegionCache(tableName,row);
        }
        if (useCache) {
          location=getCachedLocation(tableName,row);
          if (location != null) {
            return location;
          }
        }
 else {
          deleteCachedLocation(tableName,row);
        }
        regionInfoRow=server.getClosestRowBefore(metaLocation.getRegionInfo().getRegionName(),metaKey,HConstants.CATALOG_FAMILY);
      }
      if (regionInfoRow == null) {
        throw new TableNotFoundException(Bytes.toString(tableName));
      }
      byte[] value=regionInfoRow.getValue(HConstants.CATALOG_FAMILY,HConstants.REGIONINFO_QUALIFIER);
      if (value == null || value.length == 0) {
        throw new IOException("HRegionInfo was null or empty in " + Bytes.toString(parentTable) + ", row="+ regionInfoRow);
      }
      HRegionInfo regionInfo=(HRegionInfo)Writables.getWritable(value,new HRegionInfo());
      if (!Bytes.equals(regionInfo.getTableName(),tableName)) {
        throw new TableNotFoundException("Table '" + Bytes.toString(tableName) + "' was not found.");
      }
      if (regionInfo.isOffline()) {
        throw new RegionOfflineException("region offline: " + regionInfo.getRegionNameAsString());
      }
      value=regionInfoRow.getValue(HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER);
      String hostAndPort="";
      if (value != null) {
        hostAndPort=Bytes.toString(value);
      }
      if (hostAndPort.equals("")) {
        throw new NoServerForRegionException("No server address listed " + "in " + Bytes.toString(parentTable) + " for region "+ regionInfo.getRegionNameAsString());
      }
      String hostname=Addressing.parseHostname(hostAndPort);
      int port=Addressing.parsePort(hostAndPort);
      location=new HRegionLocation(regionInfo,hostname,port);
      cacheLocation(tableName,location);
      return location;
    }
 catch (    TableNotFoundException e) {
      throw e;
    }
catch (    IOException e) {
      if (e instanceof RemoteException) {
        e=RemoteExceptionHandler.decodeRemoteException((RemoteException)e);
      }
      if (tries < numRetries - 1) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("locateRegionInMeta parentTable=" + Bytes.toString(parentTable) + ", metaLocation="+ ((metaLocation == null) ? "null" : metaLocation)+ ", attempt="+ tries+ " of "+ this.numRetries+ " failed; retrying after sleep of "+ getPauseTime(tries)+ " because: "+ e.getMessage());
        }
      }
 else {
        throw e;
      }
      if (!(e instanceof RegionOfflineException || e instanceof NoServerForRegionException)) {
        relocateRegion(parentTable,metaKey);
      }
    }
    try {
      Thread.sleep(getPauseTime(tries));
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException("Giving up trying to location region in " + "meta: thread is interrupted.");
    }
  }
}
