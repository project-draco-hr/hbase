{
  byte[] STARTROW=Bytes.toBytes(START_KEY);
  byte[] COLUMN_FAMILY=fam1;
  Configuration conf=UTIL.getConfiguration();
  conf.setInt(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,1024 * 1024);
  conf.setInt("hbase.hregion.memstore.block.multiplier",100);
  conf.set(DefaultStoreEngine.DEFAULT_COMPACTOR_CLASS_KEY,BlockedCompactor.class.getName());
  int compactionThreshold=conf.getInt("hbase.hstore.compactionThreshold",3);
  final HRegion r=UTIL.createLocalHRegion(UTIL.createTableDescriptor("TestCompactionIO"),null,null);
  int jmax=(int)Math.ceil(15.0 / compactionThreshold);
  byte[] pad=new byte[1000];
  for (int i=0; i < compactionThreshold; i++) {
    Put p=new Put(Bytes.add(STARTROW,Bytes.toBytes(i)));
    p.setDurability(Durability.SKIP_WAL);
    for (int j=0; j < jmax; j++) {
      p.add(COLUMN_FAMILY,Bytes.toBytes(j),pad);
    }
    UTIL.loadRegion(r,COLUMN_FAMILY);
    r.put(p);
    r.flushcache();
  }
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        latch.await();
        Thread.sleep(1000);
        r.close();
      }
 catch (      Exception x) {
        throw new RuntimeException(x);
      }
    }
  }
).start();
  r.compactStores();
  Store s=r.stores.get(COLUMN_FAMILY);
  assertEquals(compactionThreshold,s.getStorefilesCount());
  assertTrue(s.getStorefilesSize() > 15 * 1000);
  FileStatus[] ls=r.getFilesystem().listStatus(r.getRegionFileSystem().getTempDir());
  assertEquals(1,ls.length);
}
