{
  try {
    HRegionInfo hri=newState.getRegion();
    if (hri.isMetaRegion()) {
      try {
        MetaTableLocator.setMetaLocation(server.getZooKeeper(),newState.getServerName(),hri.getReplicaId(),newState.getState());
        return;
      }
 catch (      KeeperException e) {
        throw new IOException("Failed to update meta ZNode",e);
      }
    }
    if (!initialized || !shouldPersistStateChange(hri,newState,oldState)) {
      return;
    }
    ServerName oldServer=oldState != null ? oldState.getServerName() : null;
    ServerName serverName=newState.getServerName();
    State state=newState.getState();
    int replicaId=hri.getReplicaId();
    Put metaPut=new Put(MetaTableAccessor.getMetaKeyForRegion(hri));
    StringBuilder info=new StringBuilder("Updating hbase:meta row ");
    info.append(hri.getRegionNameAsString()).append(" with state=").append(state);
    if (serverName != null && !serverName.equals(oldServer)) {
      metaPut.addImmutable(HConstants.CATALOG_FAMILY,getServerNameColumn(replicaId),Bytes.toBytes(serverName.getServerName()));
      info.append(", sn=").append(serverName);
    }
    if (openSeqNum >= 0) {
      Preconditions.checkArgument(state == State.OPEN && serverName != null,"Open region should be on a server");
      MetaTableAccessor.addLocation(metaPut,serverName,openSeqNum,-1,replicaId);
      info.append(", openSeqNum=").append(openSeqNum);
      info.append(", server=").append(serverName);
    }
    metaPut.addImmutable(HConstants.CATALOG_FAMILY,getStateColumn(replicaId),Bytes.toBytes(state.name()));
    LOG.info(info);
    HTableDescriptor descriptor=server.getTableDescriptors().get(hri.getTable());
    boolean serial=false;
    if (descriptor != null) {
      serial=server.getTableDescriptors().get(hri.getTable()).hasSerialReplicationScope();
    }
    boolean shouldPutBarrier=serial && state == State.OPEN;
    if (metaRegion != null) {
      try {
        metaRegion.put(metaPut);
        if (shouldPutBarrier) {
          Put barrierPut=MetaTableAccessor.makeBarrierPut(hri.getEncodedNameAsBytes(),openSeqNum,hri.getTable().getName());
          metaRegion.put(barrierPut);
        }
        return;
      }
 catch (      Throwable t) {
synchronized (this) {
          if (metaRegion != null) {
            LOG.info("Meta region shortcut failed",t);
            if (multiHConnection == null) {
              multiHConnection=new MultiHConnection(server.getConfiguration(),1);
            }
            metaRegion=null;
          }
        }
      }
    }
    List<Put> list=shouldPutBarrier ? Arrays.asList(metaPut,MetaTableAccessor.makeBarrierPut(hri.getEncodedNameAsBytes(),openSeqNum,hri.getTable().getName())) : Arrays.asList(metaPut);
    multiHConnection.processBatchCallback(list,TableName.META_TABLE_NAME,null,null);
  }
 catch (  IOException ioe) {
    LOG.error("Failed to persist region state " + newState,ioe);
    server.abort("Failed to update region location",ioe);
  }
}
