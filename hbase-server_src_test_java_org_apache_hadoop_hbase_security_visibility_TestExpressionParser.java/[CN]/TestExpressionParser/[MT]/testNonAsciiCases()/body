{
  ExpressionNode node=parser.parse(CellVisibility.quote("\u0027") + "&" + CellVisibility.quote("\u002b")+ "|"+ CellVisibility.quote("\u002d")+ "&"+ CellVisibility.quote("\u003f"));
  assertTrue(node instanceof NonLeafExpressionNode);
  NonLeafExpressionNode nlNode=(NonLeafExpressionNode)node;
  assertEquals(Operator.AND,nlNode.getOperator());
  assertEquals(2,nlNode.getChildExps().size());
  assertEquals("\u003f",((LeafExpressionNode)nlNode.getChildExps().get(1)).getIdentifier());
  assertTrue(nlNode.getChildExps().get(0) instanceof NonLeafExpressionNode);
  nlNode=(NonLeafExpressionNode)nlNode.getChildExps().get(0);
  assertEquals(Operator.OR,nlNode.getOperator());
  assertEquals(2,nlNode.getChildExps().size());
  assertEquals("\u002d",((LeafExpressionNode)nlNode.getChildExps().get(1)).getIdentifier());
  assertTrue(nlNode.getChildExps().get(0) instanceof NonLeafExpressionNode);
  nlNode=(NonLeafExpressionNode)nlNode.getChildExps().get(0);
  assertEquals(Operator.AND,nlNode.getOperator());
  assertEquals(2,nlNode.getChildExps().size());
  assertEquals("\u002b",((LeafExpressionNode)nlNode.getChildExps().get(1)).getIdentifier());
  assertEquals("\u0027",((LeafExpressionNode)nlNode.getChildExps().get(0)).getIdentifier());
  node=parser.parse(CellVisibility.quote("\u0027") + "&" + CellVisibility.quote("\u002b")+ "|"+ CellVisibility.quote("\u002d")+ "&"+ CellVisibility.quote("\u003f"));
  assertTrue(node instanceof NonLeafExpressionNode);
  nlNode=(NonLeafExpressionNode)node;
  assertEquals(Operator.AND,nlNode.getOperator());
  assertEquals(2,nlNode.getChildExps().size());
  assertEquals("\u003f",((LeafExpressionNode)nlNode.getChildExps().get(1)).getIdentifier());
  assertTrue(nlNode.getChildExps().get(0) instanceof NonLeafExpressionNode);
  nlNode=(NonLeafExpressionNode)nlNode.getChildExps().get(0);
  assertEquals(Operator.OR,nlNode.getOperator());
  assertEquals(2,nlNode.getChildExps().size());
  assertEquals("\u002d",((LeafExpressionNode)nlNode.getChildExps().get(1)).getIdentifier());
  assertTrue(nlNode.getChildExps().get(0) instanceof NonLeafExpressionNode);
  nlNode=(NonLeafExpressionNode)nlNode.getChildExps().get(0);
  assertEquals(Operator.AND,nlNode.getOperator());
  assertEquals(2,nlNode.getChildExps().size());
  assertEquals("\u002b",((LeafExpressionNode)nlNode.getChildExps().get(1)).getIdentifier());
  assertEquals("\u0027",((LeafExpressionNode)nlNode.getChildExps().get(0)).getIdentifier());
}
