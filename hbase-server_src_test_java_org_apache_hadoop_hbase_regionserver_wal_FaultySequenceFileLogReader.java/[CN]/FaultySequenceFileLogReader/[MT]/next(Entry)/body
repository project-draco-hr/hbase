{
  this.entryStart=this.getPosition();
  boolean b=true;
  if (nextQueue.isEmpty()) {
    while (b == true) {
      Entry e=new Entry(new HLogKey(),new WALEdit());
      if (compressionContext != null) {
        e.setCompressionContext(compressionContext);
      }
      b=readNext(e);
      nextQueue.offer(e);
      numberOfFileEntries++;
    }
  }
  if (nextQueue.size() == this.numberOfFileEntries && getFailureType() == FailureType.BEGINNING) {
    throw this.addFileInfoToException(new IOException("fake Exception"));
  }
 else   if (nextQueue.size() == this.numberOfFileEntries / 2 && getFailureType() == FailureType.MIDDLE) {
    throw this.addFileInfoToException(new IOException("fake Exception"));
  }
 else   if (nextQueue.size() == 1 && getFailureType() == FailureType.END) {
    throw this.addFileInfoToException(new IOException("fake Exception"));
  }
  if (nextQueue.peek() != null) {
    edit++;
  }
  Entry e=nextQueue.poll();
  if (e.getEdit().isEmpty()) {
    return null;
  }
  return e;
}
