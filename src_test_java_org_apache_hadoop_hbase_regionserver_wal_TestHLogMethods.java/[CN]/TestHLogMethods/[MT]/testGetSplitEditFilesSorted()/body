{
  FileSystem fs=FileSystem.get(util.getConfiguration());
  Path regiondir=HBaseTestingUtility.getTestDir("regiondir");
  fs.delete(regiondir,true);
  fs.mkdirs(regiondir);
  Path recoverededits=HLog.getRegionDirRecoveredEditsDir(regiondir);
  String first=HLog.formatRecoveredEditsFileName(-1);
  createFile(fs,recoverededits,first);
  createFile(fs,recoverededits,HLog.formatRecoveredEditsFileName(0));
  createFile(fs,recoverededits,HLog.formatRecoveredEditsFileName(1));
  createFile(fs,recoverededits,HLog.formatRecoveredEditsFileName(11));
  createFile(fs,recoverededits,HLog.formatRecoveredEditsFileName(2));
  createFile(fs,recoverededits,HLog.formatRecoveredEditsFileName(50));
  String last=HLog.formatRecoveredEditsFileName(Long.MAX_VALUE);
  createFile(fs,recoverededits,last);
  createFile(fs,recoverededits,Long.toString(Long.MAX_VALUE) + "." + System.currentTimeMillis());
  NavigableSet<Path> files=HLog.getSplitEditFilesSorted(fs,regiondir);
  assertEquals(7,files.size());
  assertEquals(files.pollFirst().getName(),first);
  assertEquals(files.pollLast().getName(),last);
  assertEquals(files.pollFirst().getName(),HLog.formatRecoveredEditsFileName(0));
  assertEquals(files.pollFirst().getName(),HLog.formatRecoveredEditsFileName(1));
  assertEquals(files.pollFirst().getName(),HLog.formatRecoveredEditsFileName(2));
  assertEquals(files.pollFirst().getName(),HLog.formatRecoveredEditsFileName(11));
}
