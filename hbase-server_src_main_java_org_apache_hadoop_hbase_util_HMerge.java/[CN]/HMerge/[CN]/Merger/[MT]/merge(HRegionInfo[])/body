{
  if (info.length < 2) {
    LOG.info("only one region - nothing to merge");
    return false;
  }
  HRegion currentRegion=null;
  long currentSize=0;
  HRegion nextRegion=null;
  long nextSize=0;
  for (int i=0; i < info.length - 1; i++) {
    if (currentRegion == null) {
      currentRegion=HRegion.openHRegion(conf,fs,this.rootDir,info[i],this.htd,walFactory.getWAL(info[i].getEncodedNameAsBytes()));
      currentSize=currentRegion.getLargestHStoreSize();
    }
    nextRegion=HRegion.openHRegion(conf,fs,this.rootDir,info[i + 1],this.htd,walFactory.getWAL(info[i + 1].getEncodedNameAsBytes()));
    nextSize=nextRegion.getLargestHStoreSize();
    if ((currentSize + nextSize) <= (maxFilesize / 2)) {
      LOG.info("Merging regions " + currentRegion.getRegionInfo().getRegionNameAsString() + " and "+ nextRegion.getRegionInfo().getRegionNameAsString());
      HRegion mergedRegion=HRegion.mergeAdjacent(currentRegion,nextRegion);
      updateMeta(currentRegion.getRegionInfo().getRegionName(),nextRegion.getRegionInfo().getRegionName(),mergedRegion);
      break;
    }
    LOG.info("not merging regions " + Bytes.toStringBinary(currentRegion.getRegionInfo().getRegionName()) + " and "+ Bytes.toStringBinary(nextRegion.getRegionInfo().getRegionName()));
    currentRegion.close();
    currentRegion=nextRegion;
    currentSize=nextSize;
  }
  if (currentRegion != null) {
    currentRegion.close();
  }
  return true;
}
