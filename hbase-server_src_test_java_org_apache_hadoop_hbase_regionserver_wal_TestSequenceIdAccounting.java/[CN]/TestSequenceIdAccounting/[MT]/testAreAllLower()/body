{
  SequenceIdAccounting sida=new SequenceIdAccounting();
  sida.getOrCreateLowestSequenceIds(ENCODED_REGION_NAME);
  Map<byte[],Long> m=new HashMap<byte[],Long>();
  m.put(ENCODED_REGION_NAME,HConstants.NO_SEQNUM);
  assertTrue(sida.areAllLower(m));
  long sequenceid=1;
  sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid,true);
  sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
  sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
  assertTrue(sida.areAllLower(m));
  m.put(ENCODED_REGION_NAME,sequenceid);
  assertFalse(sida.areAllLower(m));
  long lowest=sida.getLowestSequenceId(ENCODED_REGION_NAME);
  assertEquals("Lowest should be first sequence id inserted",1,lowest);
  m.put(ENCODED_REGION_NAME,lowest);
  assertFalse(sida.areAllLower(m));
  sida.startCacheFlush(ENCODED_REGION_NAME,FAMILIES);
  assertFalse(sida.areAllLower(m));
  m.put(ENCODED_REGION_NAME,HConstants.NO_SEQNUM);
  assertTrue(sida.areAllLower(m));
  sida.completeCacheFlush(ENCODED_REGION_NAME);
  m.put(ENCODED_REGION_NAME,sequenceid);
  assertTrue(sida.areAllLower(m));
  sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
  sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
  sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
  lowest=sida.getLowestSequenceId(ENCODED_REGION_NAME);
  m.put(ENCODED_REGION_NAME,lowest);
  assertFalse(sida.areAllLower(m));
  sida.startCacheFlush(ENCODED_REGION_NAME,FAMILIES);
  assertEquals(HConstants.NO_SEQNUM,sida.getLowestSequenceId(ENCODED_REGION_NAME));
  sida.completeCacheFlush(ENCODED_REGION_NAME);
  assertEquals(HConstants.NO_SEQNUM,sida.getLowestSequenceId(ENCODED_REGION_NAME));
  m.put(ENCODED_REGION_NAME,sequenceid);
  sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
  sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
  sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
  assertTrue(sida.areAllLower(m));
}
