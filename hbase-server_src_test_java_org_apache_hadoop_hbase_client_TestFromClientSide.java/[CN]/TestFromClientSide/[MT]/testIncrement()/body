{
  LOG.info("Starting testIncrement");
  final byte[] TABLENAME=Bytes.toBytes("testIncrement");
  Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
  byte[][] ROWS=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c"),Bytes.toBytes("d"),Bytes.toBytes("e"),Bytes.toBytes("f"),Bytes.toBytes("g"),Bytes.toBytes("h"),Bytes.toBytes("i")};
  byte[][] QUALIFIERS=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c"),Bytes.toBytes("d"),Bytes.toBytes("e"),Bytes.toBytes("f"),Bytes.toBytes("g"),Bytes.toBytes("h"),Bytes.toBytes("i")};
  ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[0],1);
  ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[1],2);
  ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[2],3);
  ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[3],4);
  Increment inc=new Increment(ROW);
  inc.addColumn(FAMILY,QUALIFIERS[1],1);
  inc.addColumn(FAMILY,QUALIFIERS[3],1);
  inc.addColumn(FAMILY,QUALIFIERS[4],1);
  ht.increment(inc);
  Result r=ht.get(new Get(ROW));
  Cell[] kvs=r.rawCells();
  assertEquals(5,kvs.length);
  assertIncrementKey(kvs[0],ROW,FAMILY,QUALIFIERS[0],1);
  assertIncrementKey(kvs[1],ROW,FAMILY,QUALIFIERS[1],3);
  assertIncrementKey(kvs[2],ROW,FAMILY,QUALIFIERS[2],3);
  assertIncrementKey(kvs[3],ROW,FAMILY,QUALIFIERS[3],5);
  assertIncrementKey(kvs[4],ROW,FAMILY,QUALIFIERS[4],1);
  inc=new Increment(ROWS[0]);
  for (int i=0; i < QUALIFIERS.length; i++) {
    inc.addColumn(FAMILY,QUALIFIERS[i],i + 1);
  }
  ht.increment(inc);
  r=ht.get(new Get(ROWS[0]));
  kvs=r.rawCells();
  assertEquals(QUALIFIERS.length,kvs.length);
  for (int i=0; i < QUALIFIERS.length; i++) {
    assertIncrementKey(kvs[i],ROWS[0],FAMILY,QUALIFIERS[i],i + 1);
  }
  inc=new Increment(ROWS[0]);
  for (int i=0; i < QUALIFIERS.length; i++) {
    inc.addColumn(FAMILY,QUALIFIERS[i],i + 1);
  }
  ht.increment(inc);
  r=ht.get(new Get(ROWS[0]));
  kvs=r.rawCells();
  assertEquals(QUALIFIERS.length,kvs.length);
  for (int i=0; i < QUALIFIERS.length; i++) {
    assertIncrementKey(kvs[i],ROWS[0],FAMILY,QUALIFIERS[i],2 * (i + 1));
  }
}
