{
  final TableName tableAname=TableName.valueOf("testGetClosestRowBefore");
  final byte[] firstRow=Bytes.toBytes("row111");
  final byte[] secondRow=Bytes.toBytes("row222");
  final byte[] thirdRow=Bytes.toBytes("row333");
  final byte[] forthRow=Bytes.toBytes("row444");
  final byte[] beforeFirstRow=Bytes.toBytes("row");
  final byte[] beforeSecondRow=Bytes.toBytes("row22");
  final byte[] beforeThirdRow=Bytes.toBytes("row33");
  final byte[] beforeForthRow=Bytes.toBytes("row44");
  HTable table=TEST_UTIL.createTable(tableAname,new byte[][]{HConstants.CATALOG_FAMILY,Bytes.toBytes("info2")},1,1024);
  String regionName=table.getRegionLocations().firstKey().getEncodedName();
  HRegion region=TEST_UTIL.getRSForFirstRegionInTable(tableAname).getFromOnlineRegions(regionName);
  Put put1=new Put(firstRow);
  Put put2=new Put(secondRow);
  Put put3=new Put(thirdRow);
  Put put4=new Put(forthRow);
  byte[] one=new byte[]{1};
  byte[] two=new byte[]{2};
  byte[] three=new byte[]{3};
  byte[] four=new byte[]{4};
  put1.add(HConstants.CATALOG_FAMILY,null,one);
  put2.add(HConstants.CATALOG_FAMILY,null,two);
  put3.add(HConstants.CATALOG_FAMILY,null,three);
  put4.add(HConstants.CATALOG_FAMILY,null,four);
  table.put(put1);
  table.put(put2);
  table.put(put3);
  table.put(put4);
  region.flushcache();
  Result result=null;
  result=table.getRowOrBefore(beforeFirstRow,HConstants.CATALOG_FAMILY);
  assertTrue(result == null);
  result=table.getRowOrBefore(firstRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),firstRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),one));
  result=table.getRowOrBefore(beforeSecondRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),firstRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),one));
  result=table.getRowOrBefore(secondRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),secondRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),two));
  result=table.getRowOrBefore(beforeThirdRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),secondRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),two));
  result=table.getRowOrBefore(thirdRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),thirdRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),three));
  result=table.getRowOrBefore(beforeForthRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),thirdRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),three));
  result=table.getRowOrBefore(forthRow,HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),forthRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),four));
  result=table.getRowOrBefore(Bytes.add(forthRow,one),HConstants.CATALOG_FAMILY);
  assertTrue(result.containsColumn(HConstants.CATALOG_FAMILY,null));
  assertTrue(Bytes.equals(result.getRow(),forthRow));
  assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,null),four));
  table.close();
}
