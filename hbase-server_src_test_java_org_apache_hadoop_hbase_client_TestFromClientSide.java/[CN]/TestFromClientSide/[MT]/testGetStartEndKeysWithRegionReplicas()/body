{
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("testGetStartEndKeys"));
  HColumnDescriptor fam=new HColumnDescriptor(FAMILY);
  htd.addFamily(fam);
  byte[][] KEYS=HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE;
  TEST_UTIL.getHBaseAdmin().createTable(htd,KEYS);
  List<HRegionInfo> regions=TEST_UTIL.getHBaseAdmin().getTableRegions(htd.getTableName());
  for (int regionReplication=1; regionReplication < 4; regionReplication++) {
    List<RegionLocations> regionLocations=new ArrayList<RegionLocations>();
    for (    HRegionInfo region : regions) {
      HRegionLocation[] arr=new HRegionLocation[regionReplication];
      for (int i=0; i < arr.length; i++) {
        arr[i]=new HRegionLocation(RegionReplicaUtil.getRegionInfoForReplica(region,i),null);
      }
      regionLocations.add(new RegionLocations(arr));
    }
    HTable table=spy(new HTable(TEST_UTIL.getConfiguration(),htd.getTableName()));
    when(table.listRegionLocations()).thenReturn(regionLocations);
    Pair<byte[][],byte[][]> startEndKeys=table.getStartEndKeys();
    assertEquals(KEYS.length + 1,startEndKeys.getFirst().length);
    for (int i=0; i < KEYS.length + 1; i++) {
      byte[] startKey=i == 0 ? HConstants.EMPTY_START_ROW : KEYS[i - 1];
      byte[] endKey=i == KEYS.length ? HConstants.EMPTY_END_ROW : KEYS[i];
      assertArrayEquals(startKey,startEndKeys.getFirst()[i]);
      assertArrayEquals(endKey,startEndKeys.getSecond()[i]);
    }
    table.close();
  }
}
