{
  byte[] TABLE=Bytes.toBytes("testKeyOnlyFilter");
  HTable ht=TEST_UTIL.createTable(TABLE,FAMILY);
  byte[][] ROWS=makeN(ROW,10);
  byte[][] QUALIFIERS={Bytes.toBytes("col0-<d2v1>-<d3v2>"),Bytes.toBytes("col1-<d2v1>-<d3v2>"),Bytes.toBytes("col2-<d2v1>-<d3v2>"),Bytes.toBytes("col3-<d2v1>-<d3v2>"),Bytes.toBytes("col4-<d2v1>-<d3v2>"),Bytes.toBytes("col5-<d2v1>-<d3v2>"),Bytes.toBytes("col6-<d2v1>-<d3v2>"),Bytes.toBytes("col7-<d2v1>-<d3v2>"),Bytes.toBytes("col8-<d2v1>-<d3v2>"),Bytes.toBytes("col9-<d2v1>-<d3v2>")};
  for (int i=0; i < 10; i++) {
    Put put=new Put(ROWS[i]);
    put.setDurability(Durability.SKIP_WAL);
    put.add(FAMILY,QUALIFIERS[i],VALUE);
    ht.put(put);
  }
  Scan scan=new Scan();
  scan.addFamily(FAMILY);
  Filter filter=new KeyOnlyFilter(true);
  scan.setFilter(filter);
  ResultScanner scanner=ht.getScanner(scan);
  int count=0;
  for (  Result result : ht.getScanner(scan)) {
    assertEquals(result.size(),1);
    assertEquals(result.rawCells()[0].getValueLength(),Bytes.SIZEOF_INT);
    assertEquals(Bytes.toInt(CellUtil.getValueArray(result.rawCells()[0])),VALUE.length);
    count++;
  }
  assertEquals(count,10);
  scanner.close();
}
