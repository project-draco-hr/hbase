{
  TableName TABLE=TableName.valueOf("testRawScan");
  Table table=TEST_UTIL.createTable(TABLE,FAMILY);
  byte[] row=Bytes.toBytes("row");
  Put p=new Put(row);
  p.addColumn(FAMILY,QUALIFIER,(long)10,VALUE);
  table.put(p);
  p=new Put(row);
  p.addColumn(FAMILY,QUALIFIER,(long)11,ArrayUtils.add(VALUE,(byte)2));
  table.put(p);
  p=new Put(row);
  p.addColumn(FAMILY,QUALIFIER,(long)12,ArrayUtils.add(VALUE,(byte)3));
  table.put(p);
  p=new Put(row);
  p.addColumn(FAMILY,QUALIFIER,(long)13,ArrayUtils.add(VALUE,(byte)4));
  table.put(p);
  int versions=4;
  Scan s=new Scan(row);
  s.setMaxVersions();
  s.setRaw(true);
  ResultScanner scanner=table.getScanner(s);
  int count=0;
  for (  Result r : scanner) {
    assertEquals("Found an unexpected number of results for the row!",versions,r.listCells().size());
    count++;
  }
  assertEquals("Found more than a single row when raw scanning the table with a single row!",1,count);
  scanner.close();
  versions=2;
  s.setMaxVersions(versions);
  scanner=table.getScanner(s);
  count=0;
  for (  Result r : scanner) {
    assertEquals("Found an unexpected number of results for the row!",versions,r.listCells().size());
    count++;
  }
  assertEquals("Found more than a single row when raw scanning the table with a single row!",1,count);
  scanner.close();
  versions=3;
  s.setMaxVersions(versions);
  scanner=table.getScanner(s);
  count=0;
  for (  Result r : scanner) {
    assertEquals("Found an unexpected number of results for the row!",versions,r.listCells().size());
    count++;
  }
  assertEquals("Found more than a single row when raw scanning the table with a single row!",1,count);
  scanner.close();
  table.close();
  TEST_UTIL.deleteTable(TABLE);
}
