{
  Table table=TEST_UTIL.createTable(TableName.valueOf("testNegativeTimestamp"),FAMILY);
  try {
    Put put=new Put(ROW,-1);
    put.addColumn(FAMILY,QUALIFIER,VALUE);
    table.put(put);
    fail("Negative timestamps should not have been allowed");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getMessage().contains("negative"));
  }
  try {
    Put put=new Put(ROW);
    long ts=-1;
    put.addColumn(FAMILY,QUALIFIER,ts,VALUE);
    table.put(put);
    fail("Negative timestamps should not have been allowed");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getMessage().contains("negative"));
  }
  try {
    Delete delete=new Delete(ROW,-1);
    table.delete(delete);
    fail("Negative timestamps should not have been allowed");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getMessage().contains("negative"));
  }
  try {
    Delete delete=new Delete(ROW);
    delete.deleteFamily(FAMILY,-1);
    table.delete(delete);
    fail("Negative timestamps should not have been allowed");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getMessage().contains("negative"));
  }
  try {
    Scan scan=new Scan();
    scan.setTimeRange(-1,1);
    table.getScanner(scan);
    fail("Negative timestamps should not have been allowed");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getMessage().contains("negative"));
  }
  try {
    new KeyValue(Bytes.toBytes(42),Bytes.toBytes(42),Bytes.toBytes(42),-1,Bytes.toBytes(42));
  }
 catch (  IllegalArgumentException ex) {
    fail("KeyValue SHOULD allow negative timestamps");
  }
  table.close();
}
