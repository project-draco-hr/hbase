{
  final byte[] CONTENTS_FAMILY=Bytes.toBytes("contents");
  final byte[] SMALL_FAMILY=Bytes.toBytes("smallfam");
  final byte[] value=Bytes.toBytes("abcd");
  final int NB_BATCH_ROWS=10;
  Table t=TEST_UTIL.createTable(TableName.valueOf("testRowsPutBufferedOneFlush"),new byte[][]{CONTENTS_FAMILY,SMALL_FAMILY});
  if (t instanceof HTableInterface) {
    HTable table=(HTable)t;
    table.setAutoFlush(false);
    ArrayList<Put> rowsUpdate=new ArrayList<Put>();
    for (int i=0; i < NB_BATCH_ROWS * 10; i++) {
      byte[] row=Bytes.toBytes("row" + i);
      Put put=new Put(row);
      put.setDurability(Durability.SKIP_WAL);
      put.add(CONTENTS_FAMILY,null,value);
      rowsUpdate.add(put);
    }
    table.put(rowsUpdate);
    Scan scan=new Scan();
    scan.addFamily(CONTENTS_FAMILY);
    ResultScanner scanner=table.getScanner(scan);
    int nbRows=0;
    for (    @SuppressWarnings("unused") Result row : scanner)     nbRows++;
    assertEquals(0,nbRows);
    scanner.close();
    table.flushCommits();
    scan=new Scan();
    scan.addFamily(CONTENTS_FAMILY);
    scanner=table.getScanner(scan);
    nbRows=0;
    for (    @SuppressWarnings("unused") Result row : scanner)     nbRows++;
    assertEquals(NB_BATCH_ROWS * 10,nbRows);
    table.close();
  }
}
