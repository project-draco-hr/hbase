{
  byte[] startKey=Bytes.toBytes("ddc");
  byte[] endKey=Bytes.toBytes("mmm");
  TableName TABLE=TableName.valueOf("testGetRegionsInRange");
  Table t=TEST_UTIL.createMultiRegionTable(TABLE,new byte[][]{FAMILY},10);
  if (t instanceof HTable) {
    HTable table=(HTable)t;
    int numOfRegions=-1;
    try (RegionLocator r=table.getRegionLocator()){
      numOfRegions=r.getStartKeys().length;
    }
     assertEquals(26,numOfRegions);
    List<HRegionLocation> regionsList=getRegionsInRange(TABLE,startKey,endKey);
    assertEquals(10,regionsList.size());
    startKey=Bytes.toBytes("fff");
    regionsList=getRegionsInRange(TABLE,startKey,endKey);
    assertEquals(7,regionsList.size());
    endKey=Bytes.toBytes("nnn");
    regionsList=getRegionsInRange(TABLE,startKey,endKey);
    assertEquals(8,regionsList.size());
    regionsList=getRegionsInRange(TABLE,HConstants.EMPTY_START_ROW,endKey);
    assertEquals(13,regionsList.size());
    regionsList=getRegionsInRange(TABLE,startKey,HConstants.EMPTY_END_ROW);
    assertEquals(21,regionsList.size());
    regionsList=getRegionsInRange(TABLE,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW);
    assertEquals(26,regionsList.size());
    endKey=Bytes.toBytes("zzz1");
    regionsList=getRegionsInRange(TABLE,startKey,endKey);
    assertEquals(21,regionsList.size());
    startKey=Bytes.toBytes("aac");
    regionsList=getRegionsInRange(TABLE,startKey,endKey);
    assertEquals(26,regionsList.size());
    startKey=endKey=Bytes.toBytes("ccc");
    regionsList=getRegionsInRange(TABLE,startKey,endKey);
    assertEquals(1,regionsList.size());
  }
}
