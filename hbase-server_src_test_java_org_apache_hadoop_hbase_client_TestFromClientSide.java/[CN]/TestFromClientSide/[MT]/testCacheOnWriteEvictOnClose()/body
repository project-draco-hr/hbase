{
  TableName tableName=TableName.valueOf("testCOWEOCfromClient");
  byte[] data=Bytes.toBytes("data");
  HTable table=TEST_UTIL.createTable(tableName,FAMILY);
  String regionName=table.getRegionLocations().firstKey().getEncodedName();
  Region region=TEST_UTIL.getRSForFirstRegionInTable(tableName).getFromOnlineRegions(regionName);
  Store store=region.getStores().iterator().next();
  CacheConfig cacheConf=store.getCacheConfig();
  cacheConf.setCacheDataOnWrite(true);
  cacheConf.setEvictOnClose(true);
  BlockCache cache=cacheConf.getBlockCache();
  long startBlockCount=cache.getBlockCount();
  long startBlockHits=cache.getStats().getHitCount();
  long startBlockMiss=cache.getStats().getMissCount();
  for (int i=0; i < 5; i++) {
    Thread.sleep(100);
    if (startBlockCount != cache.getBlockCount() || startBlockHits != cache.getStats().getHitCount() || startBlockMiss != cache.getStats().getMissCount()) {
      startBlockCount=cache.getBlockCount();
      startBlockHits=cache.getStats().getHitCount();
      startBlockMiss=cache.getStats().getMissCount();
      i=-1;
    }
  }
  Put put=new Put(ROW);
  put.add(FAMILY,QUALIFIER,data);
  table.put(put);
  assertTrue(Bytes.equals(table.get(new Get(ROW)).value(),data));
  assertEquals(startBlockCount,cache.getBlockCount());
  assertEquals(startBlockHits,cache.getStats().getHitCount());
  assertEquals(startBlockMiss,cache.getStats().getMissCount());
  System.out.println("Flushing cache");
  region.flush(true);
  long expectedBlockCount=startBlockCount + 1;
  long expectedBlockHits=startBlockHits;
  long expectedBlockMiss=startBlockMiss;
  assertEquals(expectedBlockCount,cache.getBlockCount());
  assertEquals(expectedBlockHits,cache.getStats().getHitCount());
  assertEquals(expectedBlockMiss,cache.getStats().getMissCount());
  assertTrue(Bytes.equals(table.get(new Get(ROW)).value(),data));
  assertEquals(expectedBlockCount,cache.getBlockCount());
  assertEquals(++expectedBlockHits,cache.getStats().getHitCount());
  assertEquals(expectedBlockMiss,cache.getStats().getMissCount());
  byte[] QUALIFIER2=Bytes.add(QUALIFIER,QUALIFIER);
  byte[] data2=Bytes.add(data,data);
  put=new Put(ROW);
  put.add(FAMILY,QUALIFIER2,data2);
  table.put(put);
  Result r=table.get(new Get(ROW));
  assertTrue(Bytes.equals(r.getValue(FAMILY,QUALIFIER),data));
  assertTrue(Bytes.equals(r.getValue(FAMILY,QUALIFIER2),data2));
  assertEquals(expectedBlockCount,cache.getBlockCount());
  assertEquals(++expectedBlockHits,cache.getStats().getHitCount());
  assertEquals(expectedBlockMiss,cache.getStats().getMissCount());
  System.out.println("Flushing cache");
  region.flush(true);
  assertEquals(++expectedBlockCount,cache.getBlockCount());
  assertEquals(expectedBlockHits,cache.getStats().getHitCount());
  assertEquals(expectedBlockMiss,cache.getStats().getMissCount());
  System.out.println("Compacting");
  assertEquals(2,store.getStorefilesCount());
  store.triggerMajorCompaction();
  region.compact(true);
  waitForStoreFileCount(store,1,10000);
  assertEquals(1,store.getStorefilesCount());
  expectedBlockCount-=2;
  assertEquals(expectedBlockCount,cache.getBlockCount());
  expectedBlockHits+=2;
  assertEquals(expectedBlockMiss,cache.getStats().getMissCount());
  assertEquals(expectedBlockHits,cache.getStats().getHitCount());
  r=table.get(new Get(ROW));
  assertTrue(Bytes.equals(r.getValue(FAMILY,QUALIFIER),data));
  assertTrue(Bytes.equals(r.getValue(FAMILY,QUALIFIER2),data2));
  expectedBlockCount+=1;
  assertEquals(expectedBlockCount,cache.getBlockCount());
  assertEquals(expectedBlockHits,cache.getStats().getHitCount());
  assertEquals(++expectedBlockMiss,cache.getStats().getMissCount());
}
