{
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("testIllegalTableDescriptor"));
  HColumnDescriptor hcd=new HColumnDescriptor(FAMILY);
  checkTableIsIllegal(htd);
  htd.addFamily(hcd);
  checkTableIsLegal(htd);
  htd.setMaxFileSize(1024);
  checkTableIsIllegal(htd);
  htd.setMaxFileSize(0);
  checkTableIsIllegal(htd);
  htd.setMaxFileSize(1024 * 1024 * 1024);
  checkTableIsLegal(htd);
  htd.setMemStoreFlushSize(1024);
  checkTableIsIllegal(htd);
  htd.setMemStoreFlushSize(0);
  checkTableIsIllegal(htd);
  htd.setMemStoreFlushSize(128 * 1024 * 1024);
  checkTableIsLegal(htd);
  htd.setRegionSplitPolicyClassName("nonexisting.foo.class");
  checkTableIsIllegal(htd);
  htd.setRegionSplitPolicyClassName(null);
  checkTableIsLegal(htd);
  hcd.setBlocksize(0);
  checkTableIsIllegal(htd);
  hcd.setBlocksize(1024 * 1024 * 128);
  checkTableIsIllegal(htd);
  hcd.setBlocksize(1024);
  checkTableIsLegal(htd);
  hcd.setTimeToLive(0);
  checkTableIsIllegal(htd);
  hcd.setTimeToLive(-1);
  checkTableIsIllegal(htd);
  hcd.setTimeToLive(1);
  checkTableIsLegal(htd);
  hcd.setMinVersions(-1);
  checkTableIsIllegal(htd);
  hcd.setMinVersions(3);
  try {
    hcd.setMaxVersions(2);
    fail();
  }
 catch (  IllegalArgumentException ex) {
    hcd.setMaxVersions(10);
  }
  checkTableIsLegal(htd);
  hcd.setScope(-1);
  checkTableIsIllegal(htd);
  hcd.setScope(0);
  checkTableIsLegal(htd);
  htd.setMemStoreFlushSize(0);
  htd.setConfiguration("hbase.table.sanity.checks",Boolean.FALSE.toString());
  checkTableIsLegal(htd);
}
