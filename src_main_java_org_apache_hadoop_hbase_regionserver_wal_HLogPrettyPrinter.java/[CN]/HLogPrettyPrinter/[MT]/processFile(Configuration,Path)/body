{
  FileSystem fs=FileSystem.get(conf);
  if (!fs.exists(p)) {
    throw new FileNotFoundException(p.toString());
  }
  if (!fs.isFile(p)) {
    throw new IOException(p + " is not a file");
  }
  if (outputJSON && !persistentOutput) {
    out.print("[");
    firstTxn=true;
  }
  Reader log=HLog.getReader(fs,p,conf);
  try {
    HLog.Entry entry;
    while ((entry=log.next()) != null) {
      HLogKey key=entry.getKey();
      WALEdit edit=entry.getEdit();
      JSONObject txn=new JSONObject(key.toStringMap());
      if (sequence >= 0 && ((Long)txn.get("sequence")) != sequence)       continue;
      if (region != null && !((String)txn.get("region")).equals(region))       continue;
      JSONArray actions=new JSONArray();
      for (      KeyValue kv : edit.getKeyValues()) {
        JSONObject op=new JSONObject(kv.toStringMap());
        if (outputValues)         op.put("value",Bytes.toStringBinary(kv.getValue()));
        if (row == null || ((String)op.get("row")).equals(row))         actions.put(op);
      }
      if (actions.length() == 0)       continue;
      txn.put("actions",actions);
      if (outputJSON) {
        if (firstTxn)         firstTxn=false;
 else         out.print(",");
        out.print(txn);
      }
 else {
        out.println("Sequence " + txn.getLong("sequence") + " "+ "from region "+ txn.getString("region")+ " "+ "in table "+ txn.getString("table"));
        for (int i=0; i < actions.length(); i++) {
          JSONObject op=actions.getJSONObject(i);
          out.println("  Action:");
          out.println("    row: " + op.getString("row"));
          out.println("    column: " + op.getString("family") + ":"+ op.getString("qualifier"));
          out.println("    at time: " + (new Date(op.getLong("timestamp"))));
          if (outputValues)           out.println("    value: " + op.get("value"));
        }
      }
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
 finally {
    log.close();
  }
  if (outputJSON && !persistentOutput) {
    out.print("]");
  }
}
