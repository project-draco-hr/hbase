{
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  HMaster m=cluster.getMaster();
  HBaseAdmin admin=TEST_UTIL.getHBaseAdmin();
  HTable ht=TEST_UTIL.createTable(TABLENAME,FAMILYNAME);
  TEST_UTIL.loadTable(ht,FAMILYNAME);
  ht.close();
  List<Pair<HRegionInfo,ServerName>> tableRegions=MetaReader.getTableRegionsAndLocations(m.getCatalogTracker(),Bytes.toString(TABLENAME));
  LOG.info("Regions after load: " + Joiner.on(',').join(tableRegions));
  assertEquals(1,tableRegions.size());
  assertArrayEquals(HConstants.EMPTY_START_ROW,tableRegions.get(0).getFirst().getStartKey());
  assertArrayEquals(HConstants.EMPTY_END_ROW,tableRegions.get(0).getFirst().getEndKey());
  CountDownLatch split=new CountDownLatch(1);
  CountDownLatch proceed=new CountDownLatch(1);
  RegionSplitListener list=new RegionSplitListener(split,proceed);
  cluster.getMaster().executorService.registerListener(EventType.RS_ZK_REGION_SPLIT,list);
  LOG.info("Splitting table");
  admin.split(TABLENAME);
  LOG.info("Waiting for split result to be about to open");
  split.await(60,TimeUnit.SECONDS);
  try {
    LOG.info("Making sure we can call getTableRegions while opening");
    tableRegions=MetaReader.getTableRegionsAndLocations(m.getCatalogTracker(),TABLENAME,false);
    LOG.info("Regions: " + Joiner.on(',').join(tableRegions));
    assertEquals(3,tableRegions.size());
    LOG.info("Making sure we can call getTableRegionClosest while opening");
    Pair<HRegionInfo,ServerName> pair=m.getTableRegionForRow(TABLENAME,Bytes.toBytes("cde"));
    LOG.info("Result is: " + pair);
    Pair<HRegionInfo,ServerName> tableRegionFromName=MetaReader.getRegion(m.getCatalogTracker(),pair.getFirst().getRegionName());
    assertEquals(tableRegionFromName.getFirst(),pair.getFirst());
  }
  finally {
    proceed.countDown();
  }
  admin.close();
}
