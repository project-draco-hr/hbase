{
  RequestHeader header=headerAndParam.getFirst();
  String methodName=header.getMethodName();
  Integer priorityByAnnotation=annotatedQos.get(header.getMethodName());
  if (priorityByAnnotation != null) {
    return priorityByAnnotation;
  }
  Message param=headerAndParam.getSecond();
  if (param == null) {
    return HConstants.NORMAL_QOS;
  }
  String cls=param.getClass().getName();
  Class<? extends Message> rpcArgClass=argumentToClassMap.get(cls);
  RegionSpecifier regionSpecifier=null;
  try {
    Method hasRegion=methodMap.get("hasRegion").get(rpcArgClass);
    if (hasRegion != null && (Boolean)hasRegion.invoke(param,(Object[])null)) {
      Method getRegion=methodMap.get("getRegion").get(rpcArgClass);
      regionSpecifier=(RegionSpecifier)getRegion.invoke(param,(Object[])null);
      HRegion region=hRegionServer.getRegion(regionSpecifier);
      if (region.getRegionInfo().isMetaTable()) {
        if (LOG.isTraceEnabled()) {
          LOG.trace("High priority because region=" + region.getRegionNameAsString());
        }
        return HConstants.HIGH_QOS;
      }
    }
  }
 catch (  Exception ex) {
    if (LOG.isTraceEnabled())     LOG.trace("Marking normal priority after getting exception=" + ex);
    return HConstants.NORMAL_QOS;
  }
  if (methodName.equals("scan")) {
    ScanRequest request=(ScanRequest)param;
    if (!request.hasScannerId()) {
      return HConstants.NORMAL_QOS;
    }
    RegionScanner scanner=hRegionServer.getScanner(request.getScannerId());
    if (scanner != null && scanner.getRegionInfo().isMetaRegion()) {
      if (LOG.isTraceEnabled()) {
        LOG.trace("High priority scanner request " + TextFormat.shortDebugString(request));
      }
      return HConstants.HIGH_QOS;
    }
  }
  return HConstants.NORMAL_QOS;
}
