{
  try {
    setupProcedureStore();
    ExecutorService executor=Executors.newFixedThreadPool(numThreads);
    Future<Integer>[] futures=(Future<Integer>[])new Object[numThreads];
    long start=System.currentTimeMillis();
    for (int i=0; i < numThreads; i++) {
      futures[i]=executor.submit(this.new Worker(start));
    }
    boolean failure=false;
    try {
      for (      Future<Integer> future : futures) {
        long timeout=start + WORKER_THREADS_TIMEOUT_SEC * 1000 - System.currentTimeMillis();
        failure|=(future.get(timeout,TimeUnit.MILLISECONDS).equals(EXIT_FAILURE));
      }
    }
 catch (    Exception e) {
      System.err.println("Exception in worker thread.");
      e.printStackTrace();
      return EXIT_FAILURE;
    }
    executor.shutdown();
    if (failure) {
      return EXIT_FAILURE;
    }
    long timeTaken=System.currentTimeMillis() - start;
    System.out.println("******************************************");
    System.out.println("Num threads    : " + numThreads);
    System.out.println("Num procedures : " + numProcs);
    System.out.println("Sync type      : " + syncType);
    System.out.println("Time taken     : " + (timeTaken / 1000.0f) + "sec");
    System.out.println("******************************************");
    return EXIT_SUCCESS;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return EXIT_FAILURE;
  }
 finally {
    tearDownProcedureStore();
  }
}
