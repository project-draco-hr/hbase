{
  initBlockCache();
  initMobFileCache();
  cacheStats=blockCache.getStats();
  HDFSBlocksDistribution hdfsBlocksDistribution=new HDFSBlocksDistribution();
  long tempNumStores=0;
  long tempNumStoreFiles=0;
  long tempMemstoreSize=0;
  long tempStoreFileSize=0;
  long tempReadRequestsCount=0;
  long tempWriteRequestsCount=0;
  long tempCheckAndMutateChecksFailed=0;
  long tempCheckAndMutateChecksPassed=0;
  long tempStorefileIndexSize=0;
  long tempTotalStaticIndexSize=0;
  long tempTotalStaticBloomSize=0;
  long tempNumMutationsWithoutWAL=0;
  long tempDataInMemoryWithoutWAL=0;
  int tempPercentFileLocal=0;
  long tempFlushedCellsCount=0;
  long tempCompactedCellsCount=0;
  long tempMajorCompactedCellsCount=0;
  long tempFlushedCellsSize=0;
  long tempCompactedCellsSize=0;
  long tempMajorCompactedCellsSize=0;
  long tempMobCompactedIntoMobCellsCount=0;
  long tempMobCompactedFromMobCellsCount=0;
  long tempMobCompactedIntoMobCellsSize=0;
  long testMobCompactedFromMobCellsSize=0;
  long tempMobFlushCount=0;
  long tempMobFlushedCellsCount=0;
  long tempMobFlushedCellsSize=0;
  long tempMobScanCellsCount=0;
  long tempMobScanCellsSize=0;
  for (  HRegion r : regionServer.getOnlineRegionsLocalContext()) {
    tempNumMutationsWithoutWAL+=r.numMutationsWithoutWAL.get();
    tempDataInMemoryWithoutWAL+=r.dataInMemoryWithoutWAL.get();
    tempReadRequestsCount+=r.readRequestsCount.get();
    tempWriteRequestsCount+=r.writeRequestsCount.get();
    tempCheckAndMutateChecksFailed+=r.checkAndMutateChecksFailed.get();
    tempCheckAndMutateChecksPassed+=r.checkAndMutateChecksPassed.get();
    tempNumStores+=r.stores.size();
    for (    Store store : r.stores.values()) {
      tempNumStoreFiles+=store.getStorefilesCount();
      tempMemstoreSize+=store.getMemStoreSize();
      tempStoreFileSize+=store.getStorefilesSize();
      tempStorefileIndexSize+=store.getStorefilesIndexSize();
      tempTotalStaticBloomSize+=store.getTotalStaticBloomSize();
      tempTotalStaticIndexSize+=store.getTotalStaticIndexSize();
      tempFlushedCellsCount+=store.getFlushedCellsCount();
      tempCompactedCellsCount+=store.getCompactedCellsCount();
      tempMajorCompactedCellsCount+=store.getMajorCompactedCellsCount();
      tempFlushedCellsSize+=store.getFlushedCellsSize();
      tempCompactedCellsSize+=store.getCompactedCellsSize();
      tempMajorCompactedCellsSize+=store.getMajorCompactedCellsSize();
      if (store instanceof HMobStore) {
        HMobStore mobStore=(HMobStore)store;
        tempMobCompactedIntoMobCellsCount+=mobStore.getMobCompactedIntoMobCellsCount();
        tempMobCompactedFromMobCellsCount+=mobStore.getMobCompactedFromMobCellsCount();
        tempMobCompactedIntoMobCellsSize+=mobStore.getMobCompactedIntoMobCellsSize();
        testMobCompactedFromMobCellsSize+=mobStore.getMobCompactedFromMobCellsSize();
        tempMobFlushCount+=mobStore.getMobFlushCount();
        tempMobFlushedCellsCount+=mobStore.getMobFlushedCellsCount();
        tempMobFlushedCellsSize+=mobStore.getMobFlushedCellsSize();
        tempMobScanCellsCount+=mobStore.getMobScanCellsCount();
        tempMobScanCellsSize+=mobStore.getMobScanCellsSize();
      }
    }
    hdfsBlocksDistribution.add(r.getHDFSBlocksDistribution());
  }
  float localityIndex=hdfsBlocksDistribution.getBlockLocalityIndex(regionServer.getServerName().getHostname());
  tempPercentFileLocal=(int)(localityIndex * 100);
  long currentTime=EnvironmentEdgeManager.currentTime();
  if (lastRan == 0) {
    lastRan=currentTime - period;
  }
  if ((currentTime - lastRan) > 0) {
    long currentRequestCount=getTotalRequestCount();
    requestsPerSecond=(currentRequestCount - lastRequestCount) / ((currentTime - lastRan) / 1000.0);
    lastRequestCount=currentRequestCount;
  }
  lastRan=currentTime;
  numStores=tempNumStores;
  long tempNumHLogFiles=regionServer.hlog.getNumLogFiles();
  if (regionServer.hlogForMeta != null) {
    tempNumHLogFiles+=regionServer.hlogForMeta.getNumLogFiles();
  }
  numHLogFiles=tempNumHLogFiles;
  long tempHlogFileSize=regionServer.hlog.getLogFileSize();
  if (regionServer.hlogForMeta != null) {
    tempHlogFileSize+=regionServer.hlogForMeta.getLogFileSize();
  }
  hlogFileSize=tempHlogFileSize;
  numStoreFiles=tempNumStoreFiles;
  memstoreSize=tempMemstoreSize;
  storeFileSize=tempStoreFileSize;
  readRequestsCount=tempReadRequestsCount;
  writeRequestsCount=tempWriteRequestsCount;
  checkAndMutateChecksFailed=tempCheckAndMutateChecksFailed;
  checkAndMutateChecksPassed=tempCheckAndMutateChecksPassed;
  storefileIndexSize=tempStorefileIndexSize;
  totalStaticIndexSize=tempTotalStaticIndexSize;
  totalStaticBloomSize=tempTotalStaticBloomSize;
  numMutationsWithoutWAL=tempNumMutationsWithoutWAL;
  dataInMemoryWithoutWAL=tempDataInMemoryWithoutWAL;
  percentFileLocal=tempPercentFileLocal;
  flushedCellsCount=tempFlushedCellsCount;
  compactedCellsCount=tempCompactedCellsCount;
  majorCompactedCellsCount=tempMajorCompactedCellsCount;
  flushedCellsSize=tempFlushedCellsSize;
  compactedCellsSize=tempCompactedCellsSize;
  majorCompactedCellsSize=tempMajorCompactedCellsSize;
  mobCompactedIntoMobCellsCount=tempMobCompactedIntoMobCellsCount;
  mobCompactedFromMobCellsCount=tempMobCompactedFromMobCellsCount;
  mobCompactedIntoMobCellsSize=tempMobCompactedIntoMobCellsSize;
  mobCompactedFromMobCellsSize=testMobCompactedFromMobCellsSize;
  mobFlushCount=tempMobFlushCount;
  mobFlushedCellsCount=tempMobFlushedCellsCount;
  mobFlushedCellsSize=tempMobFlushedCellsSize;
  mobScanCellsCount=tempMobScanCellsCount;
  mobScanCellsSize=tempMobScanCellsSize;
  mobFileCacheAccessCount=mobFileCache.getAccessCount();
  mobFileCacheMissCount=mobFileCache.getMissCount();
  mobFileCacheHitRatio=mobFileCache.getHitRatio();
  mobFileCacheEvictedCount=mobFileCache.getEvictedFileCount();
  mobFileCacheCount=mobFileCache.getCacheSize();
}
