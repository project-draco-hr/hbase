{
  Class<?> keyProviderFactoryClass;
  try {
    keyProviderFactoryClass=Class.forName("org.apache.hadoop.crypto.key.KeyProviderFactory");
  }
 catch (  ClassNotFoundException e) {
    TEST_TRANSPARENT_ENCRYPTION=false;
    return;
  }
  URI keyProviderUri=new URI("jceks://file" + TEST_UTIL.getDataTestDir("test.jks").toUri().toString());
  conf.set("dfs.encryption.key.provider.uri",keyProviderUri.toString());
  Method getKeyProviderMethod=keyProviderFactoryClass.getMethod("get",URI.class,Configuration.class);
  Object keyProvider=getKeyProviderMethod.invoke(null,keyProviderUri,conf);
  Class<?> keyProviderClass=Class.forName("org.apache.hadoop.crypto.key.KeyProvider");
  Class<?> keyProviderOptionsClass=Class.forName("org.apache.hadoop.crypto.key.KeyProvider$Options");
  Method createKeyMethod=keyProviderClass.getMethod("createKey",String.class,keyProviderOptionsClass);
  Object options=keyProviderOptionsClass.getConstructor(Configuration.class).newInstance(conf);
  createKeyMethod.invoke(keyProvider,TEST_KEY_NAME,options);
  Method flushMethod=keyProviderClass.getMethod("flush");
  flushMethod.invoke(keyProvider);
  Method closeMethod=keyProviderClass.getMethod("close");
  closeMethod.invoke(keyProvider);
}
