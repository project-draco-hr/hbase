{
  TableName tableName=TableName.valueOf(TEST_TABLE);
  final HTableDescriptor htd=createBasic3FamilyHTD(Bytes.toString(TEST_TABLE));
  final HRegionInfo hri=new HRegionInfo(tableName,null,null);
  final AtomicLong sequenceId=new AtomicLong(0);
  fs.mkdirs(new Path(FSUtils.getTableDir(hbaseRootDir,tableName),hri.getEncodedName()));
  final Configuration newConf=HBaseConfiguration.create(this.conf);
  final WAL wal=wals.getWAL(UNSPECIFIED_REGION,null);
  final SampleRegionWALObserver newApi=getCoprocessor(wal,SampleRegionWALObserver.class);
  newApi.setTestValues(TEST_TABLE,TEST_ROW,null,null,null,null,null,null);
  final SampleRegionWALObserver oldApi=getCoprocessor(wal,SampleRegionWALObserver.Legacy.class);
  oldApi.setTestValues(TEST_TABLE,TEST_ROW,null,null,null,null,null,null);
  LOG.debug("ensuring wal entries haven't happened before we start");
  assertFalse(newApi.isPreWALWriteCalled());
  assertFalse(newApi.isPostWALWriteCalled());
  assertFalse(newApi.isPreWALWriteDeprecatedCalled());
  assertFalse(newApi.isPostWALWriteDeprecatedCalled());
  assertFalse(oldApi.isPreWALWriteCalled());
  assertFalse(oldApi.isPostWALWriteCalled());
  assertFalse(oldApi.isPreWALWriteDeprecatedCalled());
  assertFalse(oldApi.isPostWALWriteDeprecatedCalled());
  LOG.debug("writing to WAL with non-legacy keys.");
  final int countPerFamily=5;
  for (  HColumnDescriptor hcd : htd.getFamilies()) {
    addWALEdits(tableName,hri,TEST_ROW,hcd.getName(),countPerFamily,EnvironmentEdgeManager.getDelegate(),wal,htd,sequenceId);
  }
  LOG.debug("Verify that only the non-legacy CP saw edits.");
  assertTrue(newApi.isPreWALWriteCalled());
  assertTrue(newApi.isPostWALWriteCalled());
  assertFalse(newApi.isPreWALWriteDeprecatedCalled());
  assertFalse(newApi.isPostWALWriteDeprecatedCalled());
  assertFalse(oldApi.isPreWALWriteCalled());
  assertFalse(oldApi.isPostWALWriteCalled());
  assertFalse(oldApi.isPreWALWriteDeprecatedCalled());
  assertFalse(oldApi.isPostWALWriteDeprecatedCalled());
  LOG.debug("reseting cp state.");
  newApi.setTestValues(TEST_TABLE,TEST_ROW,null,null,null,null,null,null);
  oldApi.setTestValues(TEST_TABLE,TEST_ROW,null,null,null,null,null,null);
  LOG.debug("write a log edit that supports legacy cps.");
  final long now=EnvironmentEdgeManager.currentTime();
  final WALKey legacyKey=new HLogKey(hri.getEncodedNameAsBytes(),hri.getTable(),now);
  final WALEdit edit=new WALEdit();
  final byte[] nonce=Bytes.toBytes("1772");
  edit.add(new KeyValue(TEST_ROW,TEST_FAMILY[0],nonce,now,nonce));
  final long txid=wal.append(htd,hri,legacyKey,edit,sequenceId,true,null);
  wal.sync(txid);
  LOG.debug("Make sure legacy cps can see supported edits after having been skipped.");
  assertTrue("non-legacy WALObserver didn't see pre-write.",newApi.isPreWALWriteCalled());
  assertTrue("non-legacy WALObserver didn't see post-write.",newApi.isPostWALWriteCalled());
  assertFalse("non-legacy WALObserver shouldn't have seen legacy pre-write.",newApi.isPreWALWriteDeprecatedCalled());
  assertFalse("non-legacy WALObserver shouldn't have seen legacy post-write.",newApi.isPostWALWriteDeprecatedCalled());
  assertTrue("legacy WALObserver didn't see pre-write.",oldApi.isPreWALWriteCalled());
  assertTrue("legacy WALObserver didn't see post-write.",oldApi.isPostWALWriteCalled());
  assertTrue("legacy WALObserver didn't see legacy pre-write.",oldApi.isPreWALWriteDeprecatedCalled());
  assertTrue("legacy WALObserver didn't see legacy post-write.",oldApi.isPostWALWriteDeprecatedCalled());
}
