{
  AdminProtos.GetRegionInfoResponse.CompactionState state=AdminProtos.GetRegionInfoResponse.CompactionState.NONE;
  checkTableExists(tableName);
  final PayloadCarryingRpcController rpcController=rpcControllerFactory.newController();
switch (compactType) {
case MOB:
    final AdminProtos.AdminService.BlockingInterface masterAdmin=this.connection.getAdmin(getMasterAddress());
  Callable<AdminProtos.GetRegionInfoResponse.CompactionState> callable=new Callable<AdminProtos.GetRegionInfoResponse.CompactionState>(){
    @Override public AdminProtos.GetRegionInfoResponse.CompactionState call() throws Exception {
      HRegionInfo info=getMobRegionInfo(tableName);
      GetRegionInfoRequest request=RequestConverter.buildGetRegionInfoRequest(info.getRegionName(),true);
      GetRegionInfoResponse response=masterAdmin.getRegionInfo(rpcController,request);
      return response.getCompactionState();
    }
  }
;
state=ProtobufUtil.call(callable);
break;
case NORMAL:
default :
ZooKeeperWatcher zookeeper=null;
try {
List<Pair<HRegionInfo,ServerName>> pairs;
if (TableName.META_TABLE_NAME.equals(tableName)) {
zookeeper=new ZooKeeperWatcher(conf,ZK_IDENTIFIER_PREFIX + connection.toString(),new ThrowableAbortable());
pairs=new MetaTableLocator().getMetaRegionsAndLocations(zookeeper);
}
 else {
pairs=MetaTableAccessor.getTableRegionsAndLocations(connection,tableName);
}
for (Pair<HRegionInfo,ServerName> pair : pairs) {
if (pair.getFirst().isOffline()) continue;
if (pair.getSecond() == null) continue;
final ServerName sn=pair.getSecond();
final byte[] regionName=pair.getFirst().getRegionName();
final AdminService.BlockingInterface snAdmin=this.connection.getAdmin(sn);
try {
Callable<GetRegionInfoResponse> regionInfoCallable=new Callable<GetRegionInfoResponse>(){
  @Override public GetRegionInfoResponse call() throws Exception {
    GetRegionInfoRequest request=RequestConverter.buildGetRegionInfoRequest(regionName,true);
    return snAdmin.getRegionInfo(rpcController,request);
  }
}
;
GetRegionInfoResponse response=ProtobufUtil.call(regionInfoCallable);
switch (response.getCompactionState()) {
case MAJOR_AND_MINOR:
  return CompactionState.MAJOR_AND_MINOR;
case MAJOR:
if (state == AdminProtos.GetRegionInfoResponse.CompactionState.MINOR) {
  return CompactionState.MAJOR_AND_MINOR;
}
state=AdminProtos.GetRegionInfoResponse.CompactionState.MAJOR;
break;
case MINOR:
if (state == AdminProtos.GetRegionInfoResponse.CompactionState.MAJOR) {
return CompactionState.MAJOR_AND_MINOR;
}
state=AdminProtos.GetRegionInfoResponse.CompactionState.MINOR;
break;
case NONE:
default :
}
}
 catch (NotServingRegionException e) {
if (LOG.isDebugEnabled()) {
LOG.debug("Trying to get compaction state of " + pair.getFirst() + ": "+ StringUtils.stringifyException(e));
}
}
catch (RemoteException e) {
if (e.getMessage().indexOf(NotServingRegionException.class.getName()) >= 0) {
if (LOG.isDebugEnabled()) {
LOG.debug("Trying to get compaction state of " + pair.getFirst() + ": "+ StringUtils.stringifyException(e));
}
}
 else {
throw e;
}
}
}
}
  finally {
if (zookeeper != null) {
zookeeper.close();
}
}
break;
}
if (state != null) {
return ProtobufUtil.createCompactionState(state);
}
return null;
}
