{
  HTableDescriptor.isLegalTableName(tableName);
  HRegionLocation firstMetaServer=getFirstMetaServerForTable(tableName);
  boolean tableExists=true;
  executeCallable(new MasterAdminCallable<Void>(getConnection()){
    @Override public Void call() throws ServiceException {
      DeleteTableRequest req=RequestConverter.buildDeleteTableRequest(tableName);
      masterAdmin.deleteTable(null,req);
      return null;
    }
  }
);
  for (int tries=0; tries < (this.numRetries * this.retryLongerMultiplier); tries++) {
    try {
      Scan scan=MetaReader.getScanForTableName(tableName);
      scan.addColumn(HConstants.CATALOG_FAMILY,HConstants.REGIONINFO_QUALIFIER);
      ScanRequest request=RequestConverter.buildScanRequest(firstMetaServer.getRegionInfo().getRegionName(),scan,1,true);
      Result[] values=null;
      ClientService.BlockingInterface server=connection.getClient(firstMetaServer.getServerName());
      PayloadCarryingRpcController controller=new PayloadCarryingRpcController();
      try {
        ScanResponse response=server.scan(controller,request);
        values=ResponseConverter.getResults(controller.cellScanner(),response);
      }
 catch (      ServiceException se) {
        throw ProtobufUtil.getRemoteException(se);
      }
      if (values == null || values.length == 0) {
        tableExists=false;
        GetTableDescriptorsResponse htds;
        MasterMonitorKeepAliveConnection master=connection.getKeepAliveMasterMonitorService();
        try {
          GetTableDescriptorsRequest req=RequestConverter.buildGetTableDescriptorsRequest(tableName);
          htds=master.getTableDescriptors(null,req);
        }
 catch (        ServiceException se) {
          throw ProtobufUtil.getRemoteException(se);
        }
 finally {
          master.close();
        }
        tableExists=!htds.getTableSchemaList().isEmpty();
        if (!tableExists) {
          break;
        }
      }
    }
 catch (    IOException ex) {
      if (tries == numRetries - 1) {
        if (ex instanceof RemoteException) {
          throw ((RemoteException)ex).unwrapRemoteException();
        }
 else {
          throw ex;
        }
      }
    }
    try {
      Thread.sleep(getPauseTime(tries));
    }
 catch (    InterruptedException e) {
    }
  }
  if (tableExists) {
    throw new IOException("Retries exhausted, it took too long to wait" + " for the table " + Bytes.toString(tableName) + " to be deleted.");
  }
  this.connection.clearRegionCache(tableName);
  LOG.info("Deleted " + Bytes.toString(tableName));
}
