{
  try {
    createTableAsync(desc,splitKeys);
  }
 catch (  SocketTimeoutException ste) {
    LOG.warn("Creating " + desc.getTableName() + " took too long",ste);
  }
  int numRegs=(splitKeys == null ? 1 : splitKeys.length + 1) * desc.getRegionReplication();
  int prevRegCount=0;
  boolean doneWithMetaScan=false;
  for (int tries=0; tries < this.numRetries * this.retryLongerMultiplier; ++tries) {
    if (!doneWithMetaScan) {
      final AtomicInteger actualRegCount=new AtomicInteger(0);
      MetaScannerVisitor visitor=new MetaScannerVisitorBase(){
        @Override public boolean processRow(        Result rowResult) throws IOException {
          RegionLocations list=MetaTableAccessor.getRegionLocations(rowResult);
          if (list == null) {
            LOG.warn("No serialized HRegionInfo in " + rowResult);
            return true;
          }
          HRegionLocation l=list.getRegionLocation();
          if (l == null) {
            return true;
          }
          if (!l.getRegionInfo().getTable().equals(desc.getTableName())) {
            return false;
          }
          if (l.getRegionInfo().isOffline() || l.getRegionInfo().isSplit())           return true;
          HRegionLocation[] locations=list.getRegionLocations();
          for (          HRegionLocation location : locations) {
            if (location == null)             continue;
            ServerName serverName=location.getServerName();
            if (serverName != null && serverName.getHostAndPort() != null) {
              actualRegCount.incrementAndGet();
            }
          }
          return true;
        }
      }
;
      MetaScanner.metaScan(connection,visitor,desc.getTableName());
      if (actualRegCount.get() < numRegs) {
        if (tries == this.numRetries * this.retryLongerMultiplier - 1) {
          throw new RegionOfflineException("Only " + actualRegCount.get() + " of "+ numRegs+ " regions are online; retries exhausted.");
        }
        try {
          Thread.sleep(getPauseTime(tries));
        }
 catch (        InterruptedException e) {
          throw new InterruptedIOException("Interrupted when opening" + " regions; " + actualRegCount.get() + " of "+ numRegs+ " regions processed so far");
        }
        if (actualRegCount.get() > prevRegCount) {
          prevRegCount=actualRegCount.get();
          tries=-1;
        }
      }
 else {
        doneWithMetaScan=true;
        tries=-1;
      }
    }
 else     if (isTableEnabled(desc.getTableName())) {
      return;
    }
 else {
      try {
        Thread.sleep(getPauseTime(tries));
      }
 catch (      InterruptedException e) {
        throw new InterruptedIOException("Interrupted when waiting" + " for table to be enabled; meta scan was done");
      }
    }
  }
  throw new TableNotEnabledException("Retries exhausted while still waiting for table: " + desc.getTableName() + " to be enabled");
}
