{
  final byte[] encodedNameOfRegionA=isEncodedRegionName(nameOfRegionA) ? nameOfRegionA : HRegionInfo.encodeRegionName(nameOfRegionA).getBytes();
  final byte[] encodedNameOfRegionB=isEncodedRegionName(nameOfRegionB) ? nameOfRegionB : HRegionInfo.encodeRegionName(nameOfRegionB).getBytes();
  Pair<HRegionInfo,ServerName> pair=getRegion(nameOfRegionA);
  if (pair != null && pair.getFirst().getReplicaId() != HRegionInfo.DEFAULT_REPLICA_ID)   throw new IllegalArgumentException("Can't invoke merge on non-default regions directly");
  pair=getRegion(nameOfRegionB);
  if (pair != null && pair.getFirst().getReplicaId() != HRegionInfo.DEFAULT_REPLICA_ID)   throw new IllegalArgumentException("Can't invoke merge on non-default regions directly");
  executeCallable(new MasterCallable<Void>(getConnection()){
    @Override public Void call(    int callTimeout) throws ServiceException {
      try {
        DispatchMergingRegionsRequest request=RequestConverter.buildDispatchMergingRegionsRequest(encodedNameOfRegionA,encodedNameOfRegionB,forcible);
        master.dispatchMergingRegions(null,request);
      }
 catch (      DeserializationException de) {
        LOG.error("Could not parse destination server name: " + de);
      }
      return null;
    }
  }
);
}
