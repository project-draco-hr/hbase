{
  TableName tableName=getTableNameBeforeRestoreSnapshot(snapshotName);
  if (!tableExists(tableName)) {
    cloneSnapshot(snapshotName,tableName);
    return;
  }
  if (!isTableDisabled(tableName)) {
    throw new TableNotDisabledException(tableName);
  }
  String failSafeSnapshotSnapshotName=null;
  if (takeFailSafeSnapshot) {
    failSafeSnapshotSnapshotName=conf.get("hbase.snapshot.restore.failsafe.name","hbase-failsafe-{snapshot.name}-{restore.timestamp}");
    failSafeSnapshotSnapshotName=failSafeSnapshotSnapshotName.replace("{snapshot.name}",snapshotName).replace("{table.name}",tableName.toString().replace(TableName.NAMESPACE_DELIM,'.')).replace("{restore.timestamp}",String.valueOf(EnvironmentEdgeManager.currentTime()));
    LOG.info("Taking restore-failsafe snapshot: " + failSafeSnapshotSnapshotName);
    snapshot(failSafeSnapshotSnapshotName,tableName);
  }
  try {
    get(internalRestoreSnapshotAsync(snapshotName,tableName),syncWaitTimeout,TimeUnit.MILLISECONDS);
  }
 catch (  IOException e) {
    if (takeFailSafeSnapshot) {
      try {
        get(internalRestoreSnapshotAsync(failSafeSnapshotSnapshotName,tableName),syncWaitTimeout,TimeUnit.MILLISECONDS);
        String msg="Restore snapshot=" + snapshotName + " failed. Rollback to snapshot="+ failSafeSnapshotSnapshotName+ " succeeded.";
        LOG.error(msg,e);
        throw new RestoreSnapshotException(msg,e);
      }
 catch (      IOException ex) {
        String msg="Failed to restore and rollback to snapshot=" + failSafeSnapshotSnapshotName;
        LOG.error(msg,ex);
        throw new RestoreSnapshotException(msg,e);
      }
    }
 else {
      throw new RestoreSnapshotException("Failed to restore snapshot=" + snapshotName,e);
    }
  }
  if (takeFailSafeSnapshot) {
    try {
      LOG.info("Deleting restore-failsafe snapshot: " + failSafeSnapshotSnapshotName);
      deleteSnapshot(failSafeSnapshotSnapshotName);
    }
 catch (    IOException e) {
      LOG.error("Unable to remove the failsafe snapshot: " + failSafeSnapshotSnapshotName,e);
    }
  }
}
