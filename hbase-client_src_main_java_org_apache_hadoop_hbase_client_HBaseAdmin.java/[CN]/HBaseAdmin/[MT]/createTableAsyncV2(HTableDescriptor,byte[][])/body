{
  if (desc.getTableName() == null) {
    throw new IllegalArgumentException("TableName cannot be null");
  }
  if (splitKeys != null && splitKeys.length > 0) {
    Arrays.sort(splitKeys,Bytes.BYTES_COMPARATOR);
    byte[] lastKey=null;
    for (    byte[] splitKey : splitKeys) {
      if (Bytes.compareTo(splitKey,HConstants.EMPTY_BYTE_ARRAY) == 0) {
        throw new IllegalArgumentException("Empty split key must not be passed in the split keys.");
      }
      if (lastKey != null && Bytes.equals(splitKey,lastKey)) {
        throw new IllegalArgumentException("All split keys must be unique, " + "found duplicate: " + Bytes.toStringBinary(splitKey) + ", "+ Bytes.toStringBinary(lastKey));
      }
      lastKey=splitKey;
    }
  }
  CreateTableResponse response=executeCallable(new MasterCallable<CreateTableResponse>(getConnection()){
    @Override public CreateTableResponse call(    int callTimeout) throws ServiceException {
      CreateTableRequest request=RequestConverter.buildCreateTableRequest(desc,splitKeys);
      return master.createTable(null,request);
    }
  }
);
  return new CreateTableFuture(this,desc,splitKeys,response);
}
