{
  ProcedureDescription.Builder builder=ProcedureDescription.newBuilder();
  builder.setSignature(signature).setInstance(instance);
  for (  Entry<String,String> entry : props.entrySet()) {
    NameStringPair pair=NameStringPair.newBuilder().setName(entry.getKey()).setValue(entry.getValue()).build();
    builder.addConfiguration(pair);
  }
  final ExecProcedureRequest request=ExecProcedureRequest.newBuilder().setProcedure(builder.build()).build();
  ExecProcedureResponse response=executeCallable(new MasterCallable<ExecProcedureResponse>(getConnection(),getRpcControllerFactory()){
    @Override protected ExecProcedureResponse call(    PayloadCarryingRpcController rpcController) throws Exception {
      return master.execProcedure(rpcController,request);
    }
  }
);
  long start=EnvironmentEdgeManager.currentTime();
  long max=response.getExpectedTimeout();
  long maxPauseTime=max / this.numRetries;
  int tries=0;
  LOG.debug("Waiting a max of " + max + " ms for procedure '"+ signature+ " : "+ instance+ "'' to complete. (max "+ maxPauseTime+ " ms per retry)");
  boolean done=false;
  while (tries == 0 || ((EnvironmentEdgeManager.currentTime() - start) < max && !done)) {
    try {
      long sleep=getPauseTime(tries++);
      sleep=sleep > maxPauseTime ? maxPauseTime : sleep;
      LOG.debug("(#" + tries + ") Sleeping: "+ sleep+ "ms while waiting for procedure completion.");
      Thread.sleep(sleep);
    }
 catch (    InterruptedException e) {
      throw (InterruptedIOException)new InterruptedIOException("Interrupted").initCause(e);
    }
    LOG.debug("Getting current status of procedure from master...");
    done=isProcedureFinished(signature,instance,props);
  }
  if (!done) {
    throw new IOException("Procedure '" + signature + " : "+ instance+ "' wasn't completed in expectedTime:"+ max+ " ms");
  }
}
