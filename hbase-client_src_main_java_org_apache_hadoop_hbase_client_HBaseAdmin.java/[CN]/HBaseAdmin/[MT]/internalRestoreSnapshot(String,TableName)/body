{
  SnapshotDescription snapshot=SnapshotDescription.newBuilder().setName(snapshotName).setTable(tableName.getNameAsString()).build();
  internalRestoreSnapshotAsync(snapshot);
  final IsRestoreSnapshotDoneRequest request=IsRestoreSnapshotDoneRequest.newBuilder().setSnapshot(snapshot).build();
  IsRestoreSnapshotDoneResponse done=IsRestoreSnapshotDoneResponse.newBuilder().setDone(false).buildPartial();
  final long maxPauseTime=5000;
  int tries=0;
  while (!done.getDone()) {
    try {
      long sleep=getPauseTime(tries++);
      sleep=sleep > maxPauseTime ? maxPauseTime : sleep;
      LOG.debug(tries + ") Sleeping: " + sleep+ " ms while we wait for snapshot restore to complete.");
      Thread.sleep(sleep);
    }
 catch (    InterruptedException e) {
      throw (InterruptedIOException)new InterruptedIOException("Interrupted").initCause(e);
    }
    LOG.debug("Getting current status of snapshot restore from master...");
    done=executeCallable(new MasterCallable<IsRestoreSnapshotDoneResponse>(getConnection()){
      @Override public IsRestoreSnapshotDoneResponse call(      int callTimeout) throws ServiceException {
        PayloadCarryingRpcController controller=rpcControllerFactory.newController();
        controller.setCallTimeout(callTimeout);
        return master.isRestoreSnapshotDone(controller,request);
      }
    }
);
  }
  if (!done.getDone()) {
    throw new RestoreSnapshotException("Snapshot '" + snapshot.getName() + "' wasn't restored.");
  }
}
