{
  String msg="Running " + snapshot.getType() + " table snapshot "+ snapshot.getName()+ " "+ eventType+ " on table "+ snapshotTable;
  LOG.info(msg);
  status.setStatus(msg);
  try {
    SnapshotDescriptionUtils.writeSnapshotInfo(snapshot,workingDir,fs);
    snapshotManifest.addTableDescriptor(this.htd);
    monitor.rethrowException();
    List<Pair<HRegionInfo,ServerName>> regionsAndLocations=MetaReader.getTableRegionsAndLocations(this.server.getCatalogTracker(),snapshotTable,false);
    snapshotRegions(regionsAndLocations);
    monitor.rethrowException();
    Set<String> serverNames=new HashSet<String>();
    for (    Pair<HRegionInfo,ServerName> p : regionsAndLocations) {
      if (p != null && p.getFirst() != null && p.getSecond() != null) {
        HRegionInfo hri=p.getFirst();
        if (hri.isOffline() && (hri.isSplit() || hri.isSplitParent()))         continue;
        serverNames.add(p.getSecond().toString());
      }
    }
    status.setStatus("Consolidate snapshot: " + snapshot.getName());
    snapshotManifest.consolidate();
    status.setStatus("Verifying snapshot: " + snapshot.getName());
    verifier.verifySnapshot(this.workingDir,serverNames);
    completeSnapshot(this.snapshotDir,this.workingDir,this.fs);
    msg="Snapshot " + snapshot.getName() + " of table "+ snapshotTable+ " completed";
    status.markComplete(msg);
    LOG.info(msg);
    metricsSnapshot.addSnapshot(status.getCompletionTimestamp() - status.getStartTime());
  }
 catch (  Exception e) {
    status.abort("Failed to complete snapshot " + snapshot.getName() + " on table "+ snapshotTable+ " because "+ e.getMessage());
    String reason="Failed taking snapshot " + ClientSnapshotDescriptionUtils.toString(snapshot) + " due to exception:"+ e.getMessage();
    LOG.error(reason,e);
    ForeignException ee=new ForeignException(reason,e);
    monitor.receive(ee);
    cancel(reason);
  }
 finally {
    LOG.debug("Launching cleanup of working dir:" + workingDir);
    try {
      if (fs.exists(workingDir) && !this.fs.delete(workingDir,true)) {
        LOG.error("Couldn't delete snapshot working directory:" + workingDir);
      }
    }
 catch (    IOException e) {
      LOG.error("Couldn't delete snapshot working directory:" + workingDir);
    }
    releaseTableLock();
  }
}
