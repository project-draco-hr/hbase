{
  Admin admin=TEST_UTIL.getHBaseAdmin();
  HTableDescriptor beforehtd=admin.getTableDescriptor(TABLENAME);
  String cfToDelete="cf1";
  FileSystem fs=TEST_UTIL.getDFSCluster().getFileSystem();
  assertTrue(admin.isTableAvailable(TABLENAME));
  HColumnDescriptor[] families=beforehtd.getColumnFamilies();
  Boolean foundCF=false;
  int i;
  for (i=0; i < families.length; i++) {
    if (families[i].getNameAsString().equals(cfToDelete)) {
      foundCF=true;
      break;
    }
  }
  assertTrue(foundCF);
  Path tableDir=FSUtils.getTableDir(TEST_UTIL.getDefaultRootDirPath(),TABLENAME);
  assertTrue(fs.exists(tableDir));
  FileStatus[] fileStatus=fs.listStatus(tableDir);
  foundCF=false;
  for (i=0; i < fileStatus.length; i++) {
    if (fileStatus[i].isDirectory() == true) {
      FileStatus[] cf=fs.listStatus(fileStatus[i].getPath(),new PathFilter(){
        @Override public boolean accept(        Path p){
          if (p.getName().contains(HConstants.RECOVERED_EDITS_DIR)) {
            return false;
          }
          return true;
        }
      }
);
      for (int j=0; j < cf.length; j++) {
        if (cf[j].isDirectory() == true && cf[j].getPath().getName().equals(cfToDelete)) {
          foundCF=true;
          break;
        }
      }
    }
    if (foundCF) {
      break;
    }
  }
  assertTrue(foundCF);
  if (admin.isTableEnabled(TABLENAME)) {
    admin.disableTable(TABLENAME);
  }
  admin.deleteColumnFamily(TABLENAME,Bytes.toBytes(cfToDelete));
  fileStatus=fs.listStatus(tableDir);
  for (i=0; i < fileStatus.length; i++) {
    if (fileStatus[i].isDirectory() == true) {
      FileStatus[] cf=fs.listStatus(fileStatus[i].getPath(),new PathFilter(){
        @Override public boolean accept(        Path p){
          if (WALSplitter.isSequenceIdFile(p)) {
            return false;
          }
          return true;
        }
      }
);
      for (int j=0; j < cf.length; j++) {
        if (cf[j].isDirectory() == true) {
          assertFalse(cf[j].getPath().getName().equals(cfToDelete));
        }
      }
    }
  }
  try {
    admin.deleteColumnFamily(TABLENAME,Bytes.toBytes(cfToDelete));
    Assert.fail("Delete a non-exist column family should fail");
  }
 catch (  InvalidFamilyOperationException e) {
  }
}
