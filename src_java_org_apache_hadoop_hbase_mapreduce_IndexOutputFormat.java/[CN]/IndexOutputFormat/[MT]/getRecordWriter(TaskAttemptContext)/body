{
  final Path perm=new Path(FileOutputFormat.getOutputPath(context),FileOutputFormat.getUniqueFile(context,"part",""));
  final Path temp=context.getConfiguration().getLocalPath("mapred.local.dir","index/_" + Integer.toString(random.nextInt()));
  LOG.info("To index into " + perm);
  FileSystem fs=FileSystem.get(context.getConfiguration());
  fs.delete(perm,true);
  final IndexConfiguration indexConf=new IndexConfiguration();
  String content=context.getConfiguration().get("hbase.index.conf");
  if (content != null) {
    indexConf.addFromXML(content);
  }
  String analyzerName=indexConf.getAnalyzerName();
  Analyzer analyzer;
  try {
    Class<?> analyzerClass=Class.forName(analyzerName);
    analyzer=(Analyzer)analyzerClass.newInstance();
  }
 catch (  Exception e) {
    throw new IOException("Error in creating an analyzer object " + analyzerName);
  }
  final IndexWriter writer=new IndexWriter(FSDirectory.open(new File(fs.startLocalOutput(perm,temp).toString())),analyzer,true,MaxFieldLength.LIMITED);
  writer.setMaxBufferedDocs(indexConf.getMaxBufferedDocs());
  writer.setMaxFieldLength(indexConf.getMaxFieldLength());
  writer.setMaxMergeDocs(indexConf.getMaxMergeDocs());
  writer.setMergeFactor(indexConf.getMergeFactor());
  String similarityName=indexConf.getSimilarityName();
  if (similarityName != null) {
    try {
      Similarity similarity=Class.forName(similarityName).asSubclass(Similarity.class).newInstance();
      writer.setSimilarity(similarity);
    }
 catch (    Exception e) {
      throw new IOException("Error in creating a similarity object " + similarityName);
    }
  }
  writer.setUseCompoundFile(indexConf.isUseCompoundFile());
  return new IndexRecordWriter(context,fs,writer,indexConf,perm,temp);
}
