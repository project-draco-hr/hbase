{
  if (job == null) {
    throw new IllegalStateException("You should call run() first");
  }
  Counters counters=job.getCounters();
  Counter referenced=counters.findCounter(Counts.REFERENCED);
  Counter unreferenced=counters.findCounter(Counts.UNREFERENCED);
  Counter undefined=counters.findCounter(Counts.UNDEFINED);
  Counter multiref=counters.findCounter(Counts.EXTRAREFERENCES);
  boolean success=true;
  if (expectedReferenced != referenced.getValue()) {
    LOG.error("Expected referenced count does not match with actual referenced count. " + "expected referenced=" + expectedReferenced + " ,actual="+ referenced.getValue());
    success=false;
  }
  if (unreferenced.getValue() > 0) {
    boolean couldBeMultiRef=(multiref.getValue() == unreferenced.getValue());
    LOG.error("Unreferenced nodes were not expected. Unreferenced count=" + unreferenced.getValue() + (couldBeMultiRef ? "; could be due to duplicate random numbers" : ""));
    success=false;
  }
  if (undefined.getValue() > 0) {
    LOG.error("Found an undefined node. Undefined count=" + undefined.getValue());
    success=false;
  }
  if (!success) {
    Configuration conf=job.getConfiguration();
    HConnection conn=HConnectionManager.getConnection(conf);
    TableName tableName=getTableName(conf);
    CounterGroup g=counters.getGroup("undef");
    Iterator<Counter> it=g.iterator();
    while (it.hasNext()) {
      String keyString=it.next().getName();
      byte[] key=Bytes.toBytes(keyString);
      HRegionLocation loc=conn.relocateRegion(tableName,key);
      LOG.error("undefined row " + keyString + ", "+ loc);
    }
    g=counters.getGroup("unref");
    it=g.iterator();
    while (it.hasNext()) {
      String keyString=it.next().getName();
      byte[] key=Bytes.toBytes(keyString);
      HRegionLocation loc=conn.relocateRegion(tableName,key);
      LOG.error("unreferred row " + keyString + ", "+ loc);
    }
  }
  return success;
}
