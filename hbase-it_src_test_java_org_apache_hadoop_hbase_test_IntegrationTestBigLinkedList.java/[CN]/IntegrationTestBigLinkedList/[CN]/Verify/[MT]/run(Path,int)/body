{
  LOG.info("Running Verify with outputDir=" + outputDir + ", numReducers="+ numReducers);
  job=Job.getInstance(getConf());
  job.setJobName("Link Verifier");
  job.setNumReduceTasks(numReducers);
  job.setJarByClass(getClass());
  setJobScannerConf(job);
  Scan scan=new Scan();
  scan.addColumn(FAMILY_NAME,COLUMN_PREV);
  scan.setCaching(10000);
  scan.setCacheBlocks(false);
  if (isMultiUnevenColumnFamilies(getConf())) {
    scan.addColumn(BIG_FAMILY_NAME,BIG_FAMILY_NAME);
    scan.addColumn(TINY_FAMILY_NAME,TINY_FAMILY_NAME);
  }
  TableMapReduceUtil.initTableMapperJob(getTableName(getConf()).getName(),scan,VerifyMapper.class,BytesWritable.class,BytesWritable.class,job);
  TableMapReduceUtil.addDependencyJars(job.getConfiguration(),AbstractHBaseTool.class);
  job.getConfiguration().setBoolean("mapreduce.map.speculative",false);
  job.setReducerClass(VerifyReducer.class);
  job.setOutputFormatClass(SequenceFileAsBinaryOutputFormat.class);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(BytesWritable.class);
  TextOutputFormat.setOutputPath(job,outputDir);
  boolean success=job.waitForCompletion(true);
  if (success) {
    Counters counters=job.getCounters();
    if (null == counters) {
      LOG.warn("Counters were null, cannot verify Job completion");
      return 0;
    }
    if (verifyUnexpectedValues(counters)) {
      return 0;
    }
  }
  return 1;
}
