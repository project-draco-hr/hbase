{
  Options options=new Options();
  options.addOption("s","start",true,"start key");
  options.addOption("e","end",true,"end key");
  options.addOption("l","limit",true,"number to print");
  GnuParser parser=new GnuParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
    if (cmd.getArgs().length != 0) {
      throw new ParseException("Command takes no arguments");
    }
  }
 catch (  ParseException e) {
    System.err.println("Failed to parse command line " + e.getMessage());
    System.err.println();
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(getClass().getSimpleName(),options);
    System.exit(-1);
  }
  Table table=new HTable(getConf(),getTableName(getConf()));
  Scan scan=new Scan();
  scan.setBatch(10000);
  if (cmd.hasOption("s"))   scan.setStartRow(Bytes.toBytesBinary(cmd.getOptionValue("s")));
  if (cmd.hasOption("e"))   scan.setStopRow(Bytes.toBytesBinary(cmd.getOptionValue("e")));
  int limit=0;
  if (cmd.hasOption("l"))   limit=Integer.parseInt(cmd.getOptionValue("l"));
 else   limit=100;
  ResultScanner scanner=table.getScanner(scan);
  CINode node=new CINode();
  Result result=scanner.next();
  int count=0;
  while (result != null && count++ < limit) {
    node=getCINode(result,node);
    System.out.printf("%s:%s:%012d:%s\n",Bytes.toStringBinary(node.key),Bytes.toStringBinary(node.prev),node.count,node.client);
    result=scanner.next();
  }
  scanner.close();
  table.close();
  return 0;
}
