{
  TableName table=TableName.valueOf("testHbckWithExcessReplica");
  try {
    setupTableWithRegionReplica(table,2);
    admin.flush(table);
    assertNoErrors(doFsck(conf,false));
    assertEquals(ROWKEYS.length,countRows());
    Table meta=connection.getTable(TableName.META_TABLE_NAME,tableExecutorService);
    List<HRegionInfo> regions=admin.getTableRegions(table);
    byte[] startKey=Bytes.toBytes("B");
    byte[] endKey=Bytes.toBytes("C");
    byte[] metaKey=null;
    HRegionInfo newHri=null;
    for (    HRegionInfo h : regions) {
      if (Bytes.compareTo(h.getStartKey(),startKey) == 0 && Bytes.compareTo(h.getEndKey(),endKey) == 0 && h.getReplicaId() == HRegionInfo.DEFAULT_REPLICA_ID) {
        metaKey=h.getRegionName();
        newHri=RegionReplicaUtil.getRegionInfoForReplica(h,2);
        break;
      }
    }
    Put put=new Put(metaKey);
    Collection<ServerName> var=admin.getClusterStatus().getServers();
    ServerName sn=var.toArray(new ServerName[var.size()])[0];
    MetaTableAccessor.addLocation(put,sn,sn.getStartcode(),-1,2);
    meta.put(put);
    HBaseFsckRepair.fixUnassigned(admin,newHri);
    HBaseFsckRepair.waitUntilAssigned(admin,newHri);
    Delete delete=new Delete(metaKey);
    delete.addColumns(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(2));
    delete.addColumns(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(2));
    delete.addColumns(HConstants.CATALOG_FAMILY,MetaTableAccessor.getSeqNumColumn(2));
    meta.delete(delete);
    meta.close();
    HBaseFsck hbck=doFsck(conf,false);
    assertErrors(hbck,new HBaseFsck.ErrorReporter.ERROR_CODE[]{HBaseFsck.ErrorReporter.ERROR_CODE.NOT_IN_META});
    hbck=doFsck(conf,true);
    hbck=doFsck(conf,false);
    assertErrors(hbck,new HBaseFsck.ErrorReporter.ERROR_CODE[]{});
  }
  finally {
    cleanupTable(table);
  }
}
