{
  for (  byte[] ROW : ROWS_THREE) {
    Put p=new Put(ROW);
    p.setDurability(Durability.SKIP_WAL);
    for (    byte[] QUALIFIER : QUALIFIERS_THREE) {
      p.add(FAMILIES[0],QUALIFIER,VALUES[0]);
    }
    this.region.put(p);
  }
  for (  byte[] ROW : ROWS_FOUR) {
    Put p=new Put(ROW);
    p.setDurability(Durability.SKIP_WAL);
    for (    byte[] QUALIFIER : QUALIFIERS_FOUR) {
      p.add(FAMILIES[1],QUALIFIER,VALUES[1]);
    }
    this.region.put(p);
  }
  this.region.flushcache();
  for (  byte[] ROW : ROWS_THREE) {
    Put p=new Put(ROW);
    p.setDurability(Durability.SKIP_WAL);
    for (    byte[] QUALIFIER : QUALIFIERS_THREE) {
      p.add(FAMILIES[1],QUALIFIER,VALUES[0]);
    }
    this.region.put(p);
  }
  for (  byte[] ROW : ROWS_FOUR) {
    Put p=new Put(ROW);
    p.setDurability(Durability.SKIP_WAL);
    for (    byte[] QUALIFIER : QUALIFIERS_FOUR) {
      p.add(FAMILIES[0],QUALIFIER,VALUES[1]);
    }
    this.region.put(p);
  }
  Scan s=new Scan();
  s.setStartRow(ROWS_FOUR[1]);
  RegionScanner scanner=region.getScanner(s);
  scanner.reseek(ROWS_THREE[1]);
  List<KeyValue> results=new ArrayList<KeyValue>();
  scanner.next(results);
  for (  KeyValue keyValue : results) {
    assertEquals("The rows with ROWS_TWO as row key should be appearing.",Bytes.toString(keyValue.getRow()),Bytes.toString(ROWS_THREE[1]));
  }
  scanner.reseek(ROWS_ONE[1]);
  results=new ArrayList<KeyValue>();
  scanner.next(results);
  for (  KeyValue keyValue : results) {
    assertFalse("Cannot rewind back to a value less than previous reseek.",Bytes.toString(keyValue.getRow()).contains("testRowOne"));
  }
}
