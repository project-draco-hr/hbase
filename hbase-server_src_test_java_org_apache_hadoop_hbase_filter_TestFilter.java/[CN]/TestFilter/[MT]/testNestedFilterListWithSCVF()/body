{
  byte[] columnStatus=Bytes.toBytes("S");
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("testNestedFilterListWithSCVF"));
  htd.addFamily(new HColumnDescriptor(FAMILIES[0]));
  HRegionInfo info=new HRegionInfo(htd.getTableName(),null,null,false);
  HRegion testRegion=HRegion.createHRegion(info,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
  for (int i=0; i < 10; i++) {
    Put p=new Put(Bytes.toBytes("row" + i));
    p.setDurability(Durability.SKIP_WAL);
    p.add(FAMILIES[0],columnStatus,Bytes.toBytes(i % 2));
    testRegion.put(p);
  }
  testRegion.flushcache();
  Filter rowFilter=new RowFilter(CompareOp.GREATER,new BinaryComparator(Bytes.toBytes("row4")));
  Scan s1=new Scan();
  s1.setFilter(rowFilter);
  InternalScanner scanner=testRegion.getScanner(s1);
  List<Cell> results=new ArrayList<Cell>();
  int i=5;
  for (boolean done=true; done; i++) {
    done=scanner.next(results);
    assertTrue(CellUtil.matchingRow(results.get(0),Bytes.toBytes("row" + i)));
    assertEquals(Bytes.toInt(CellUtil.getValueArray(results.get(0))),i % 2);
    results.clear();
  }
  FilterList subFilterList=new FilterList(FilterList.Operator.MUST_PASS_ALL);
  Filter subFilter1=new RowFilter(CompareOp.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("row4")));
  subFilterList.addFilter(subFilter1);
  Filter subFilter2=new SingleColumnValueFilter(FAMILIES[0],columnStatus,CompareOp.EQUAL,Bytes.toBytes(0));
  subFilterList.addFilter(subFilter2);
  s1=new Scan();
  s1.setFilter(subFilterList);
  scanner=testRegion.getScanner(s1);
  results=new ArrayList<Cell>();
  for (i=0; i <= 4; i+=2) {
    scanner.next(results);
    assertTrue(CellUtil.matchingRow(results.get(0),Bytes.toBytes("row" + i)));
    assertEquals(Bytes.toInt(CellUtil.getValueArray(results.get(0))),i % 2);
    results.clear();
  }
  assertFalse(scanner.next(results));
  FilterList filterList=new FilterList(FilterList.Operator.MUST_PASS_ONE);
  filterList.addFilter(rowFilter);
  filterList.addFilter(subFilterList);
  s1=new Scan();
  s1.setFilter(filterList);
  scanner=testRegion.getScanner(s1);
  results=new ArrayList<Cell>();
  for (i=0; i <= 4; i+=2) {
    scanner.next(results);
    assertTrue(CellUtil.matchingRow(results.get(0),Bytes.toBytes("row" + i)));
    assertEquals(Bytes.toInt(CellUtil.getValueArray(results.get(0))),i % 2);
    results.clear();
  }
  for (i=5; i <= 9; i++) {
    scanner.next(results);
    assertTrue(CellUtil.matchingRow(results.get(0),Bytes.toBytes("row" + i)));
    assertEquals(Bytes.toInt(CellUtil.getValueArray(results.get(0))),i % 2);
    results.clear();
  }
  assertFalse(scanner.next(results));
  filterList=new FilterList(FilterList.Operator.MUST_PASS_ONE);
  filterList.addFilter(subFilterList);
  filterList.addFilter(rowFilter);
  s1=new Scan();
  s1.setFilter(filterList);
  scanner=testRegion.getScanner(s1);
  results=new ArrayList<Cell>();
  for (i=0; i <= 4; i+=2) {
    scanner.next(results);
    assertTrue(CellUtil.matchingRow(results.get(0),Bytes.toBytes("row" + i)));
    assertEquals(Bytes.toInt(CellUtil.getValueArray(results.get(0))),i % 2);
    results.clear();
  }
  for (i=5; i <= 9; i++) {
    scanner.next(results);
    assertTrue(CellUtil.matchingRow(results.get(0),Bytes.toBytes("row" + i)));
    assertEquals(Bytes.toInt(CellUtil.getValueArray(results.get(0))),i % 2);
    results.clear();
  }
  assertFalse(scanner.next(results));
  HLog hlog=testRegion.getLog();
  testRegion.close();
  hlog.closeAndDelete();
}
