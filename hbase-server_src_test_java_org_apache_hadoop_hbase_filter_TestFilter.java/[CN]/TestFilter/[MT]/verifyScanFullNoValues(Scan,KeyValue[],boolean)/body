{
  InternalScanner scanner=this.region.getScanner(s);
  List<Cell> results=new ArrayList<Cell>();
  int row=0;
  int idx=0;
  for (boolean more=true; more; row++) {
    more=NextState.hasMoreValues(scanner.next(results));
    Arrays.sort(results.toArray(new KeyValue[results.size()]),KeyValue.COMPARATOR);
    if (results.isEmpty())     break;
    assertTrue("Scanned too many keys! Only expected " + kvs.length + " total but already scanned "+ (results.size() + idx)+ (results.isEmpty() ? "" : "(" + results.get(0).toString() + ")"),kvs.length >= idx + results.size());
    for (    Cell kv : results) {
      LOG.info("row=" + row + ", result="+ kv.toString()+ ", match="+ kvs[idx].toString());
      assertTrue("Row mismatch",CellUtil.matchingRow(kv,kvs[idx]));
      assertTrue("Family mismatch",CellUtil.matchingFamily(kv,kvs[idx]));
      assertTrue("Qualifier mismatch",CellUtil.matchingQualifier(kv,kvs[idx]));
      assertFalse("Should not have returned whole value",CellUtil.matchingValue(kv,kvs[idx]));
      if (useLen) {
        assertEquals("Value in result is not SIZEOF_INT",kv.getValueLength(),Bytes.SIZEOF_INT);
        LOG.info("idx = " + idx + ", len="+ kvs[idx].getValueLength()+ ", actual="+ Bytes.toInt(CellUtil.cloneValue(kv)));
        assertEquals("Scan value should be the length of the actual value. ",kvs[idx].getValueLength(),Bytes.toInt(CellUtil.cloneValue(kv)));
        LOG.info("good");
      }
 else {
        assertEquals("Value in result is not empty",kv.getValueLength(),0);
      }
      idx++;
    }
    results.clear();
  }
  LOG.info("Looked at " + row + " rows with "+ idx+ " keys");
  assertEquals("Expected " + kvs.length + " total keys but scanned "+ idx,kvs.length,idx);
}
