{
  KeyValue currentKv;
  scanner.seek(KeyValue.LOWESTKEY);
  List<Iterator<KeyValue>> codecIterators=new ArrayList<Iterator<KeyValue>>();
  for (  EncodedDataBlock codec : codecs) {
    codecIterators.add(codec.getIterator(HFileBlock.headerSize(minorVersion)));
  }
  int j=0;
  while ((currentKv=scanner.next()) != null && j < kvLimit) {
    ++j;
    for (    Iterator<KeyValue> it : codecIterators) {
      KeyValue codecKv=it.next();
      if (codecKv == null || 0 != Bytes.compareTo(codecKv.getBuffer(),codecKv.getOffset(),codecKv.getLength(),currentKv.getBuffer(),currentKv.getOffset(),currentKv.getLength())) {
        if (codecKv == null) {
          LOG.error("There is a bug in codec " + it + " it returned null KeyValue,");
        }
 else {
          int prefix=0;
          int limitLength=2 * Bytes.SIZEOF_INT + Math.min(codecKv.getLength(),currentKv.getLength());
          while (prefix < limitLength && codecKv.getBuffer()[prefix + codecKv.getOffset()] == currentKv.getBuffer()[prefix + currentKv.getOffset()]) {
            prefix++;
          }
          LOG.error("There is bug in codec " + it.toString() + "\n on element "+ j+ "\n codecKv.getKeyLength() "+ codecKv.getKeyLength()+ "\n codecKv.getValueLength() "+ codecKv.getValueLength()+ "\n codecKv.getLength() "+ codecKv.getLength()+ "\n currentKv.getKeyLength() "+ currentKv.getKeyLength()+ "\n currentKv.getValueLength() "+ currentKv.getValueLength()+ "\n codecKv.getLength() "+ currentKv.getLength()+ "\n currentKV rowLength "+ currentKv.getRowLength()+ " familyName "+ currentKv.getFamilyLength()+ " qualifier "+ currentKv.getQualifierLength()+ "\n prefix "+ prefix+ "\n codecKv   '"+ Bytes.toStringBinary(codecKv.getBuffer(),codecKv.getOffset(),prefix)+ "' diff '"+ Bytes.toStringBinary(codecKv.getBuffer(),codecKv.getOffset() + prefix,codecKv.getLength() - prefix)+ "'"+ "\n currentKv '"+ Bytes.toStringBinary(currentKv.getBuffer(),currentKv.getOffset(),prefix)+ "' diff '"+ Bytes.toStringBinary(currentKv.getBuffer(),currentKv.getOffset() + prefix,currentKv.getLength() - prefix)+ "'");
        }
        return false;
      }
    }
  }
  LOG.info("Verification was successful!");
  return true;
}
