{
  final String comprAlgo=compressionAlgorithmName.toUpperCase(Locale.ROOT);
  long rawBytes=totalKeyLength + totalPrefixLength + totalValueLength;
  System.out.println("Raw data size:");
  outputTuple("Raw bytes",INT_FORMAT,rawBytes);
  outputTuplePct("Key bytes",totalKeyLength);
  outputTuplePct("Value bytes",totalValueLength);
  outputTuplePct("KV infrastructure",totalPrefixLength);
  outputTuplePct("CF overhead",totalCFLength);
  outputTuplePct("Total key redundancy",totalKeyRedundancyLength);
  int compressedSize=EncodedDataBlock.getCompressedSize(compressionAlgorithm,compressor,rawKVs,0,rawKVs.length);
  outputTuple(comprAlgo + " only size",INT_FORMAT,compressedSize);
  outputSavings(comprAlgo + " only",compressedSize,rawBytes);
  System.out.println();
  for (  EncodedDataBlock codec : codecs) {
    System.out.println(codec.toString());
    long encodedBytes=codec.getSize();
    outputTuple("Encoded bytes",INT_FORMAT,encodedBytes);
    outputSavings("Key encoding",encodedBytes - totalValueLength,rawBytes - totalValueLength);
    outputSavings("Total encoding",encodedBytes,rawBytes);
    int encodedCompressedSize=codec.getEncodedCompressedSize(compressionAlgorithm,compressor);
    outputTuple("Encoding + " + comprAlgo + " size",INT_FORMAT,encodedCompressedSize);
    outputSavings("Encoding + " + comprAlgo,encodedCompressedSize,rawBytes);
    outputSavings("Encoding with " + comprAlgo,encodedCompressedSize,compressedSize);
    System.out.println();
  }
}
