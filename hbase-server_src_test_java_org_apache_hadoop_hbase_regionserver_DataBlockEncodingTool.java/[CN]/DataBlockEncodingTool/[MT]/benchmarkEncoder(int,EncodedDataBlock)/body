{
  int prevTotalSize=previousTotalSize;
  int totalSize=0;
  List<Long> durations=new ArrayList<Long>();
  for (int itTime=0; itTime < benchmarkNTimes; ++itTime) {
    totalSize=0;
    Iterator<Cell> it;
    it=codec.getIterator(HFileBlock.headerSize(useHBaseChecksum));
    final long startTime=System.nanoTime();
    while (it.hasNext()) {
      totalSize+=KeyValueUtil.ensureKeyValue(it.next()).getLength();
    }
    final long finishTime=System.nanoTime();
    if (itTime >= benchmarkNOmit) {
      durations.add(finishTime - startTime);
    }
    if (prevTotalSize != -1 && prevTotalSize != totalSize) {
      throw new IllegalStateException(String.format("Algorithm '%s' decoded data to different size",codec.toString()));
    }
    prevTotalSize=totalSize;
  }
  List<Long> encodingDurations=new ArrayList<Long>();
  for (int itTime=0; itTime < benchmarkNTimes; ++itTime) {
    final long startTime=System.nanoTime();
    codec.encodeData();
    final long finishTime=System.nanoTime();
    if (itTime >= benchmarkNOmit) {
      encodingDurations.add(finishTime - startTime);
    }
  }
  System.out.println(codec.toString() + ":");
  printBenchmarkResult(totalSize,encodingDurations,Manipulation.ENCODING);
  printBenchmarkResult(totalSize,durations,Manipulation.DECODING);
  System.out.println();
  return prevTotalSize;
}
