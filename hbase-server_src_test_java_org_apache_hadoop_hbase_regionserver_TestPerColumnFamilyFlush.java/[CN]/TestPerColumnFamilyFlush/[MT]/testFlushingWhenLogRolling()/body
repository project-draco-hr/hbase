{
  TableName tableName=TableName.valueOf("testFlushingWhenLogRolling");
  Configuration conf=TEST_UTIL.getConfiguration();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,300000);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushLargeStoresPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND,100000);
  conf.setLong("hbase.regionserver.logroll.period",2000);
  conf.setLong("hbase.regionserver.hlog.blocksize",6144);
  final int walcount=10;
  conf.setInt("hbase.regionserver.maxlogs",walcount);
  int maxLogs=conf.getInt("hbase.regionserver.maxlogs",walcount);
  final int numRegionServers=4;
  try {
    TEST_UTIL.startMiniCluster(numRegionServers);
    HTable table=null;
    table=TEST_UTIL.createTable(tableName,FAMILIES);
    try (Admin admin=TEST_UTIL.getConnection().getAdmin()){
      admin.flush(TableName.NAMESPACE_TABLE_NAME);
    }
     HRegion desiredRegion=getRegionWithName(tableName).getFirst();
    assertTrue("Could not find a region which hosts the new region.",desiredRegion != null);
    LOG.info("Writing to region=" + desiredRegion);
    for (int i=1; i <= 10000; i++) {
      table.put(createPut(1,i));
      if (i <= 200) {
        table.put(createPut(2,i));
        table.put(createPut(3,i));
      }
      table.flushCommits();
      int currentNumLogFiles=((FSHLog)(desiredRegion.getWAL())).getNumLogFiles();
      if (currentNumLogFiles > maxLogs) {
        LOG.info("The number of log files is now: " + currentNumLogFiles + ". Expect a log roll and memstore flush.");
        break;
      }
    }
    table.close();
    while (((FSHLog)(desiredRegion.getWAL())).getNumLogFiles() > maxLogs)     Threads.sleep(100);
    LOG.info("Finished waiting on flush after too many WALs...");
    assertEquals(DefaultMemStore.DEEP_OVERHEAD,desiredRegion.getStore(FAMILY1).getMemStoreSize());
    assertEquals(DefaultMemStore.DEEP_OVERHEAD,desiredRegion.getStore(FAMILY2).getMemStoreSize());
    assertEquals(DefaultMemStore.DEEP_OVERHEAD,desiredRegion.getStore(FAMILY3).getMemStoreSize());
    assertEquals(0,desiredRegion.getMemstoreSize().get());
  }
  finally {
    TEST_UTIL.shutdownMiniCluster();
  }
}
