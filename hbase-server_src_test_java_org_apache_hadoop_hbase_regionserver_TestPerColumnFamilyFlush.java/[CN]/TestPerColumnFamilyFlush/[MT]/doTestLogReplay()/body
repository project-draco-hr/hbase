{
  Configuration conf=TEST_UTIL.getConfiguration();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,20000);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushAllLargeStoresPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,10000);
  final int numRegionServers=4;
  try {
    TEST_UTIL.startMiniCluster(numRegionServers);
    TEST_UTIL.getHBaseAdmin().createNamespace(NamespaceDescriptor.create(TABLENAME.getNamespaceAsString()).build());
    Table table=TEST_UTIL.createTable(TABLENAME,FAMILIES);
    HTableDescriptor htd=table.getTableDescriptor();
    for (    byte[] family : FAMILIES) {
      if (!htd.hasFamily(family)) {
        htd.addFamily(new HColumnDescriptor(family));
      }
    }
    for (int i=1; i <= 80; i++) {
      table.put(createPut(1,i));
      if (i <= 10) {
        table.put(createPut(2,i));
        table.put(createPut(3,i));
      }
    }
    Thread.sleep(1000);
    Pair<Region,HRegionServer> desiredRegionAndServer=getRegionWithName(TABLENAME);
    Region desiredRegion=desiredRegionAndServer.getFirst();
    assertTrue("Could not find a region which hosts the new region.",desiredRegion != null);
    desiredRegion.flush(false);
    long totalMemstoreSize;
    long cf1MemstoreSize, cf2MemstoreSize, cf3MemstoreSize;
    totalMemstoreSize=desiredRegion.getMemstoreSize();
    cf1MemstoreSize=desiredRegion.getStore(FAMILY1).getMemStoreSize();
    cf2MemstoreSize=desiredRegion.getStore(FAMILY2).getMemStoreSize();
    cf3MemstoreSize=desiredRegion.getStore(FAMILY3).getMemStoreSize();
    assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSize);
    assertTrue(cf2MemstoreSize > 0);
    assertTrue(cf3MemstoreSize > 0);
    assertEquals(totalMemstoreSize + 2 * DefaultMemStore.DEEP_OVERHEAD,cf2MemstoreSize + cf3MemstoreSize);
    Thread.sleep(2000);
    HRegionServer rs=desiredRegionAndServer.getSecond();
    rs.abort("testing");
    for (int i=1; i <= 80; i++) {
      verifyEdit(1,i,table);
      if (i <= 10) {
        verifyEdit(2,i,table);
        verifyEdit(3,i,table);
      }
    }
  }
  finally {
    TEST_UTIL.shutdownMiniCluster();
  }
}
