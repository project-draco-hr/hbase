{
  Configuration conf=HBaseConfiguration.create();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,200 * 1024);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushLargeStoresPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,100 * 1024);
  Region region=initHRegion("testSelectiveFlushWhenEnabled",conf);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  long totalMemstoreSize=region.getMemstoreSize();
  long smallestSeqCF1=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3=region.getOldestSeqIdOfStore(FAMILY3);
  long cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  long cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  long cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstore=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(smallestSeqCF1,smallestSeqInRegionCurrentMemstore);
  assertTrue(smallestSeqCF1 < smallestSeqCF2);
  assertTrue(smallestSeqCF2 < smallestSeqCF3);
  assertTrue(cf1MemstoreSize > 0);
  assertTrue(cf2MemstoreSize > 0);
  assertTrue(cf3MemstoreSize > 0);
  assertEquals(totalMemstoreSize + 3 * DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSize + cf2MemstoreSize + cf3MemstoreSize);
  region.flush(false);
  long oldCF2MemstoreSize=cf2MemstoreSize;
  long oldCF3MemstoreSize=cf3MemstoreSize;
  cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  totalMemstoreSize=region.getMemstoreSize();
  smallestSeqInRegionCurrentMemstore=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSize);
  assertEquals(cf2MemstoreSize,oldCF2MemstoreSize);
  assertEquals(cf3MemstoreSize,oldCF3MemstoreSize);
  assertEquals(smallestSeqInRegionCurrentMemstore,smallestSeqCF2);
  assertEquals(totalMemstoreSize + 2 * DefaultMemStore.DEEP_OVERHEAD,cf2MemstoreSize + cf3MemstoreSize);
  for (int i=1200; i < 2400; i++) {
    region.put(createPut(2,i));
    if (i - 1200 < 100) {
      region.put(createPut(3,i));
    }
  }
  oldCF3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  region.flush(false);
  cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  totalMemstoreSize=region.getMemstoreSize();
  smallestSeqInRegionCurrentMemstore=getWAL(region).getEarliestMemstoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf1MemstoreSize);
  assertEquals(DefaultMemStore.DEEP_OVERHEAD,cf2MemstoreSize);
  assertEquals(cf3MemstoreSize,oldCF3MemstoreSize);
  assertEquals(totalMemstoreSize + DefaultMemStore.DEEP_OVERHEAD,cf3MemstoreSize);
  assertEquals(smallestSeqInRegionCurrentMemstore,smallestSeqCF3);
  region.flush(true);
  for (int i=1; i <= 300; i++) {
    region.put(createPut(1,i));
    region.put(createPut(2,i));
    region.put(createPut(3,i));
    region.put(createPut(4,i));
    region.put(createPut(5,i));
  }
  region.flush(false);
  assertEquals(0,region.getMemstoreSize());
  HBaseTestingUtility.closeRegionAndWAL(region);
}
