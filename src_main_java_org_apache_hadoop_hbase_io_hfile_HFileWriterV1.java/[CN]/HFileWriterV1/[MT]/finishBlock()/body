{
  if (this.out == null)   return;
  long startTimeNs=System.nanoTime();
  int size=releaseCompressingStream(this.out);
  this.out=null;
  blockKeys.add(firstKeyInBlock);
  blockOffsets.add(Long.valueOf(blockBegin));
  blockDataSizes.add(Integer.valueOf(size));
  this.totalUncompressedBytes+=size;
  HFile.writeTimeNano.addAndGet(System.nanoTime() - startTimeNs);
  HFile.writeOps.incrementAndGet();
  if (cacheConf.shouldCacheDataOnWrite()) {
    baosDos.flush();
    byte[] bytes=baos.toByteArray();
    HFileBlock cBlock=new HFileBlock(BlockType.DATA,(int)(outputStream.getPos() - blockBegin),bytes.length,-1,ByteBuffer.wrap(bytes,0,bytes.length),HFileBlock.FILL_HEADER,blockBegin,MemStore.NO_PERSISTENT_TS);
    HFileBlock codedBlock=blockEncoder.beforeBlockCache(cBlock,false);
    passSchemaMetricsTo(codedBlock);
    cacheConf.getBlockCache().cacheBlock(HFile.getBlockCacheKey(name,blockBegin),codedBlock);
    baosDos.close();
  }
  blockNumber++;
}
