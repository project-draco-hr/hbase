{
  Configuration conf=new Configuration();
  conf.setInt("io.file.buffer.size",64 * 1024);
  RawLocalFileSystem rlfs=new RawLocalFileSystem();
  rlfs.setConf(conf);
  LocalFileSystem lfs=new LocalFileSystem(rlfs);
  Path path=new Path("/Users/ryan/rfile.big.txt");
  long start=System.currentTimeMillis();
  SimpleBlockCache cache=new SimpleBlockCache();
  Reader reader=new HFile.Reader(lfs,path,cache);
  reader.loadFileInfo();
  System.out.println(reader.trailer);
  long end=System.currentTimeMillis();
  System.out.println("Index read time: " + (end - start));
  List<String> keys=slurp("/Users/ryan/xaa.50k");
  HFileScanner scanner=reader.getScanner();
  int count;
  long totalBytes=0;
  int notFound=0;
  start=System.nanoTime();
  for (count=0; count < 500000; ++count) {
    String key=randKey(keys);
    byte[] bkey=Bytes.toBytes(key);
    int res=scanner.seekTo(bkey);
    if (res == 0) {
      ByteBuffer k=scanner.getKey();
      ByteBuffer v=scanner.getValue();
      totalBytes+=k.limit();
      totalBytes+=v.limit();
    }
 else {
      ++notFound;
    }
    if (res == -1) {
      scanner.seekTo();
    }
    for (int i=0; i < 1000; ++i) {
      if (!scanner.next())       break;
      ByteBuffer k=scanner.getKey();
      ByteBuffer v=scanner.getValue();
      totalBytes+=k.limit();
      totalBytes+=v.limit();
    }
    if (count % 1000 == 0) {
      end=System.nanoTime();
      System.out.println("Cache block count: " + cache.size() + " dumped: "+ cache.dumps);
      double msTime=((end - start) / 1000000.0);
      System.out.println("Seeked: " + count + " in "+ msTime+ " (ms) "+ (1000.0 / msTime)+ " seeks/ms "+ (msTime / 1000.0)+ " ms/seek");
      start=System.nanoTime();
    }
  }
  System.out.println("Total bytes: " + totalBytes + " not found: "+ notFound);
}
