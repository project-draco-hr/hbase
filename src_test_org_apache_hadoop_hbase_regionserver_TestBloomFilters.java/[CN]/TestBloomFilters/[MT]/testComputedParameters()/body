{
  try {
    HTable table=null;
    HTableDescriptor desc=new HTableDescriptor(getName());
    desc.addFamily(new HColumnDescriptor(CONTENTS,1,HColumnDescriptor.CompressionType.NONE,HColumnDescriptor.DEFAULT_IN_MEMORY,HColumnDescriptor.DEFAULT_BLOCKCACHE,HColumnDescriptor.DEFAULT_LENGTH,HColumnDescriptor.DEFAULT_TTL,true));
    HBaseAdmin admin=new HBaseAdmin(conf);
    admin.createTable(desc);
    table=new HTable(conf,desc.getName());
    for (int i=0; i < 100; i++) {
      byte[] row=rows[i];
      String value=row.toString();
      BatchUpdate b=new BatchUpdate(row);
      b.put(CONTENTS,value.getBytes(HConstants.UTF8_ENCODING));
      table.commit(b);
    }
    Map<HRegionInfo,HServerAddress> regions=table.getRegionsInfo();
    assertEquals(1,regions.size());
    HRegionInfo info=null;
    for (    HRegionInfo hri : regions.keySet()) {
      info=hri;
      break;
    }
    HRegionServer hrs=cluster.getRegionServer(0);
    hrs.getFlushRequester().request(hrs.getOnlineRegion(info.getRegionName()));
    try {
      Thread.sleep(conf.getLong(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000) * 10);
    }
 catch (    InterruptedException e) {
    }
    for (int i=0; i < testKeys.length; i++) {
      Cell value=table.get(testKeys[i],CONTENTS);
      if (value != null && value.getValue().length != 0) {
        LOG.error("non existant key: " + testKeys[i] + " returned value: "+ new String(value.getValue(),HConstants.UTF8_ENCODING));
        fail();
      }
    }
    for (int i=0; i < rows.length; i++) {
      Cell value=table.get(rows[i],CONTENTS);
      if (value == null || value.getValue().length == 0) {
        LOG.error("No value returned for row " + Bytes.toString(rows[i]));
        fail();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (e instanceof IOException) {
      IOException i=(IOException)e;
      throw i;
    }
    fail();
  }
}
