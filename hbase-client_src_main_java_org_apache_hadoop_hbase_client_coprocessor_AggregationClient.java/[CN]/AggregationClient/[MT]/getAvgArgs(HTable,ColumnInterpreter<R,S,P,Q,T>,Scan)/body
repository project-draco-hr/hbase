{
  final AggregateRequest requestArg=validateArgAndGetPB(scan,ci);
class AvgCallBack implements Batch.Callback<Pair<S,Long>> {
    S sum=null;
    Long rowCount=0l;
    public Pair<S,Long> getAvgArgs(){
      return new Pair<S,Long>(sum,rowCount);
    }
    @Override public synchronized void update(    byte[] region,    byte[] row,    Pair<S,Long> result){
      sum=ci.add(sum,result.getFirst());
      rowCount+=result.getSecond();
    }
  }
  AvgCallBack avgCallBack=new AvgCallBack();
  table.coprocessorService(AggregateService.class,scan.getStartRow(),scan.getStopRow(),new Batch.Call<AggregateService,Pair<S,Long>>(){
    @Override public Pair<S,Long> call(    AggregateService instance) throws IOException {
      ServerRpcController controller=new ServerRpcController();
      BlockingRpcCallback<AggregateResponse> rpcCallback=new BlockingRpcCallback<AggregateResponse>();
      instance.getAvg(controller,requestArg,rpcCallback);
      AggregateResponse response=rpcCallback.get();
      if (controller.failedOnException()) {
        throw controller.getFailedOn();
      }
      Pair<S,Long> pair=new Pair<S,Long>(null,0L);
      if (response.getFirstPartCount() == 0) {
        return pair;
      }
      ByteString b=response.getFirstPart(0);
      T t=ProtobufUtil.getParsedGenericInstance(ci.getClass(),4,b);
      S s=ci.getPromotedValueFromProto(t);
      pair.setFirst(s);
      ByteBuffer bb=ByteBuffer.allocate(8).put(getBytesFromResponse(response.getSecondPart()));
      bb.rewind();
      pair.setSecond(bb.getLong());
      return pair;
    }
  }
,avgCallBack);
  return avgCallBack.getAvgArgs();
}
