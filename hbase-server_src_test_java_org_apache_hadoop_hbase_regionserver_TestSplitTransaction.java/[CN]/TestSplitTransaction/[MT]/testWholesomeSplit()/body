{
  final int rowcount=TEST_UTIL.loadRegion(this.parent,CF,true);
  assertTrue(rowcount > 0);
  int parentRowCount=countRows(this.parent);
  assertEquals(rowcount,parentRowCount);
  CacheConfig cacheConf=new CacheConfig(TEST_UTIL.getConfiguration());
  ((LruBlockCache)cacheConf.getBlockCache()).clearCache();
  SplitTransaction st=prepareGOOD_SPLIT_ROW();
  Server mockServer=Mockito.mock(Server.class);
  when(mockServer.getConfiguration()).thenReturn(TEST_UTIL.getConfiguration());
  PairOfSameType<HRegion> daughters=st.execute(mockServer,null);
  assertTrue(this.fs.exists(this.parent.getRegionFileSystem().getSplitsDir()));
  assertTrue(this.parent.isClosed());
  assertEquals(0,this.fs.listStatus(this.parent.getRegionFileSystem().getSplitsDir()).length);
  assertTrue(Bytes.equals(this.parent.getStartKey(),daughters.getFirst().getStartKey()));
  assertTrue(Bytes.equals(GOOD_SPLIT_ROW,daughters.getFirst().getEndKey()));
  assertTrue(Bytes.equals(daughters.getSecond().getStartKey(),GOOD_SPLIT_ROW));
  assertTrue(Bytes.equals(this.parent.getEndKey(),daughters.getSecond().getEndKey()));
  int daughtersRowCount=0;
  for (  HRegion openRegion : daughters) {
    try {
      int count=countRows(openRegion);
      assertTrue(count > 0 && count != rowcount);
      daughtersRowCount+=count;
    }
  finally {
      HRegion.closeHRegion(openRegion);
    }
  }
  assertEquals(rowcount,daughtersRowCount);
  assertTrue(!this.parent.lock.writeLock().isHeldByCurrentThread());
}
