{
  TableSchema.Builder builder=TableSchema.newBuilder();
  builder.setName(name);
  for (  Map.Entry<QName,Object> e : attrs.entrySet()) {
    TableSchema.Attribute.Builder attrBuilder=TableSchema.Attribute.newBuilder();
    attrBuilder.setName(e.getKey().getLocalPart());
    attrBuilder.setValue(e.getValue().toString());
    builder.addAttrs(attrBuilder);
  }
  for (  ColumnSchemaModel family : columns) {
    Map<QName,Object> familyAttrs=family.getAny();
    ColumnSchema.Builder familyBuilder=ColumnSchema.newBuilder();
    familyBuilder.setName(family.getName());
    for (    Map.Entry<QName,Object> e : familyAttrs.entrySet()) {
      ColumnSchema.Attribute.Builder attrBuilder=ColumnSchema.Attribute.newBuilder();
      attrBuilder.setName(e.getKey().getLocalPart());
      attrBuilder.setValue(e.getValue().toString());
      familyBuilder.addAttrs(attrBuilder);
    }
    if (familyAttrs.containsKey(TTL)) {
      familyBuilder.setTtl(Integer.valueOf(familyAttrs.get(TTL).toString()));
    }
    if (familyAttrs.containsKey(VERSIONS)) {
      familyBuilder.setMaxVersions(Integer.valueOf(familyAttrs.get(VERSIONS).toString()));
    }
    if (familyAttrs.containsKey(COMPRESSION)) {
      familyBuilder.setCompression(familyAttrs.get(COMPRESSION).toString());
    }
    builder.addColumns(familyBuilder);
  }
  if (attrs.containsKey(IN_MEMORY)) {
    builder.setInMemory(Boolean.valueOf(attrs.get(IN_MEMORY).toString()));
  }
  if (attrs.containsKey(READONLY)) {
    builder.setReadOnly(Boolean.valueOf(attrs.get(READONLY).toString()));
  }
  return builder.build().toByteArray();
}
