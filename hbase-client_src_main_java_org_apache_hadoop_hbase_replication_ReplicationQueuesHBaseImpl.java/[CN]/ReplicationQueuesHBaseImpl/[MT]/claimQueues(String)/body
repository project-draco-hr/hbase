{
  Map<String,Set<String>> queues=new HashMap<>();
  if (isThisOurRegionServer(regionserver)) {
    return queues;
  }
  ResultScanner queuesToClaim=null;
  try {
    queuesToClaim=this.getQueuesBelongingToServer(regionserver);
    for (    Result queue : queuesToClaim) {
      if (attemptToClaimQueue(queue,regionserver)) {
        String rowKey=Bytes.toString(queue.getRow());
        ReplicationQueueInfo replicationQueueInfo=new ReplicationQueueInfo(rowKey);
        if (peerExists(replicationQueueInfo.getPeerId())) {
          Set<String> sortedLogs=new HashSet<String>();
          List<String> logs=getLogsInQueue(queue.getRow());
          for (          String log : logs) {
            sortedLogs.add(log);
          }
          queues.put(rowKey,sortedLogs);
          LOG.info(serverName + " has claimed queue " + rowKey+ " from "+ regionserver);
        }
 else {
          removeQueue(Bytes.toString(queue.getRow()));
          LOG.info(serverName + " has deleted abandoned queue " + rowKey+ " from "+ regionserver);
        }
      }
    }
  }
 catch (  IOException|KeeperException e) {
    String errMsg="Failed claiming queues for regionserver=" + regionserver;
    abortable.abort(errMsg,e);
    queues.clear();
  }
 finally {
    if (queuesToClaim != null) {
      queuesToClaim.close();
    }
  }
  return queues;
}
