{
  ZooKeeperWatcher zkw=util.getZooKeeperWatcher();
  Configuration conf=util.getConfiguration();
  conf.setBoolean(HConstants.USE_META_REPLICAS,true);
  String baseZNode=conf.get(HConstants.ZOOKEEPER_ZNODE_PARENT,HConstants.DEFAULT_ZOOKEEPER_ZNODE_PARENT);
  String primaryMetaZnode=ZKUtil.joinZNode(baseZNode,conf.get("zookeeper.znode.metaserver","meta-region-server"));
  byte[] data=ZKUtil.getData(zkw,primaryMetaZnode);
  ServerName primary=ServerName.parseFrom(data);
  TableName TABLE=TableName.valueOf("testShutdownHandling");
  byte[][] FAMILIES=new byte[][]{Bytes.toBytes("foo")};
  if (util.getHBaseAdmin().tableExists(TABLE)) {
    util.getHBaseAdmin().disableTable(TABLE);
    util.getHBaseAdmin().deleteTable(TABLE);
  }
  Table htable=util.createTable(TABLE,FAMILIES);
  util.getHBaseAdmin().flush(TableName.META_TABLE_NAME);
  Thread.sleep(conf.getInt(StorefileRefresherChore.REGIONSERVER_STOREFILE_REFRESH_PERIOD,30000) * 6);
  Connection c=ConnectionFactory.createConnection(util.getConfiguration());
  List<HRegionInfo> regions=MetaTableAccessor.getTableRegions(c,TABLE);
  HRegionLocation hrl=MetaTableAccessor.getRegionLocation(c,regions.get(0));
  if (hrl.getServerName().equals(primary)) {
    util.getHBaseAdmin().move(hrl.getRegionInfo().getEncodedNameAsBytes(),null);
    do {
      Thread.sleep(10);
      hrl=MetaTableAccessor.getRegionLocation(c,regions.get(0));
    }
 while (primary.equals(hrl.getServerName()));
    util.getHBaseAdmin().flush(TableName.META_TABLE_NAME);
    Thread.sleep(conf.getInt(StorefileRefresherChore.REGIONSERVER_STOREFILE_REFRESH_PERIOD,30000) * 3);
  }
  ServerName master=util.getHBaseClusterInterface().getClusterStatus().getMaster();
  util.getHBaseClusterInterface().stopMaster(master);
  util.getHBaseClusterInterface().waitForMasterToStop(master,60000);
  if (!master.equals(primary)) {
    util.getHBaseClusterInterface().killRegionServer(primary);
    util.getHBaseClusterInterface().waitForRegionServerToStop(primary,60000);
  }
  ((ClusterConnection)c).clearRegionCache();
  htable.close();
  htable=c.getTable(TABLE);
  byte[] row="test".getBytes();
  Put put=new Put(row);
  put.addColumn("foo".getBytes(),row,row);
  BufferedMutator m=c.getBufferedMutator(TABLE);
  m.mutate(put);
  m.flush();
  Get get=new Get(row);
  Result r=htable.get(get);
  assertTrue(Arrays.equals(r.getRow(),row));
  util.getHBaseClusterInterface().startMaster(master.getHostname(),0);
  util.getHBaseClusterInterface().startRegionServer(primary.getHostname(),0);
  util.getHBaseClusterInterface().waitForActiveAndReadyMaster();
  ((ClusterConnection)c).clearRegionCache();
  htable.close();
  conf.setBoolean(HConstants.USE_META_REPLICAS,false);
  htable=c.getTable(TABLE);
  r=htable.get(get);
  assertTrue(Arrays.equals(r.getRow(),row));
}
