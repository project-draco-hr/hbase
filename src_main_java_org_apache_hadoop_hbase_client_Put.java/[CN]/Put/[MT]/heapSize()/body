{
  long heapsize=OVERHEAD;
  heapsize+=ClassSize.align(ClassSize.ARRAY + this.row.length);
  heapsize+=ClassSize.align(this.familyMap.size() * ClassSize.MAP_ENTRY);
  for (  Map.Entry<byte[],List<KeyValue>> entry : this.familyMap.entrySet()) {
    heapsize+=ClassSize.align(ClassSize.ARRAY + entry.getKey().length);
    heapsize+=ClassSize.align(ClassSize.ARRAYLIST);
    int size=entry.getValue().size();
    heapsize+=ClassSize.align(ClassSize.ARRAY + size * ClassSize.REFERENCE);
    for (    KeyValue kv : entry.getValue()) {
      heapsize+=kv.heapSize();
    }
  }
  if (attributes != null) {
    heapsize+=ClassSize.align(this.attributes.size() * ClassSize.MAP_ENTRY);
    for (    Map.Entry<String,byte[]> entry : this.attributes.entrySet()) {
      heapsize+=ClassSize.align(ClassSize.STRING + entry.getKey().length());
      heapsize+=ClassSize.align(ClassSize.ARRAY + entry.getValue().length);
    }
  }
  return ClassSize.align((int)heapsize);
}
