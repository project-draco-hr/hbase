{
  LOG.info("Start to scan the hbase:meta for the current region assignment " + "snappshot");
  Visitor v=new Visitor(){
    @Override public boolean visit(    Result result) throws IOException {
      try {
        if (result == null || result.isEmpty())         return true;
        RegionLocations rl=MetaTableAccessor.getRegionLocations(result);
        if (rl == null)         return true;
        HRegionInfo hri=rl.getRegionLocation(0).getRegionInfo();
        if (hri == null)         return true;
        if (hri.getTable() == null)         return true;
        if (disabledTables.contains(hri.getTable())) {
          return true;
        }
        if (excludeOfflinedSplitParents && hri.isSplit())         return true;
        HRegionLocation[] hrls=rl.getRegionLocations();
        for (int i=0; i < hrls.length; i++) {
          if (hrls[i] == null)           continue;
          hri=hrls[i].getRegionInfo();
          if (hri == null)           continue;
          addAssignment(hri,hrls[i].getServerName());
          addRegion(hri);
        }
        byte[] favoredNodes=result.getValue(HConstants.CATALOG_FAMILY,FavoredNodeAssignmentHelper.FAVOREDNODES_QUALIFIER);
        if (favoredNodes == null)         return true;
        ServerName[] favoredServerList=FavoredNodeAssignmentHelper.getFavoredNodesList(favoredNodes);
        existingAssignmentPlan.updateFavoredNodesMap(hri,Arrays.asList(favoredServerList));
        return true;
      }
 catch (      RuntimeException e) {
        LOG.error("Catche remote exception " + e.getMessage() + " when processing"+ result);
        throw e;
      }
    }
  }
;
  MetaTableAccessor.fullScan(hConnection,v);
  LOG.info("Finished to scan the hbase:meta for the current region assignment" + "snapshot");
}
