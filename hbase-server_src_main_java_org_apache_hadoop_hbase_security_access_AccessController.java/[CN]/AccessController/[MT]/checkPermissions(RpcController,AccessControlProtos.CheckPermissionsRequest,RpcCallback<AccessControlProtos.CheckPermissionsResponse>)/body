{
  Permission[] permissions=new Permission[request.getPermissionCount()];
  for (int i=0; i < request.getPermissionCount(); i++) {
    permissions[i]=ProtobufUtil.toPermission(request.getPermission(i));
  }
  AccessControlProtos.CheckPermissionsResponse response=null;
  try {
    byte[] tableName=regionEnv.getRegion().getTableDesc().getName();
    for (    Permission permission : permissions) {
      if (permission instanceof TablePermission) {
        TablePermission tperm=(TablePermission)permission;
        for (        Permission.Action action : permission.getActions()) {
          if (!Arrays.equals(tperm.getTable(),tableName)) {
            throw new CoprocessorException(AccessController.class,String.format("This method " + "can only execute at the table specified in TablePermission. " + "Table of the region:%s , requested table:%s",Bytes.toString(tableName),Bytes.toString(tperm.getTable())));
          }
          HashMap<byte[],Set<byte[]>> familyMap=Maps.newHashMapWithExpectedSize(1);
          if (tperm.getFamily() != null) {
            if (tperm.getQualifier() != null) {
              familyMap.put(tperm.getFamily(),Sets.newHashSet(tperm.getQualifier()));
            }
 else {
              familyMap.put(tperm.getFamily(),null);
            }
          }
          requirePermission("checkPermissions",action,regionEnv,familyMap);
        }
      }
 else {
        for (        Permission.Action action : permission.getActions()) {
          requirePermission("checkPermissions",action);
        }
      }
    }
    response=AccessControlProtos.CheckPermissionsResponse.getDefaultInstance();
  }
 catch (  IOException ioe) {
    ResponseConverter.setControllerException(controller,ioe);
  }
  done.run(response);
}
