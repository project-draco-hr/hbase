{
  Permission[] permissions=new Permission[request.getPermissionCount()];
  for (int i=0; i < request.getPermissionCount(); i++) {
    permissions[i]=ProtobufUtil.toPermission(request.getPermission(i));
  }
  AccessControlProtos.CheckPermissionsResponse response=null;
  try {
    User user=getActiveUser();
    TableName tableName=regionEnv.getRegion().getTableDesc().getTableName();
    for (    Permission permission : permissions) {
      if (permission instanceof TablePermission) {
        TablePermission tperm=(TablePermission)permission;
        for (        Action action : permission.getActions()) {
          if (!tperm.getTableName().equals(tableName)) {
            throw new CoprocessorException(AccessController.class,String.format("This method " + "can only execute at the table specified in TablePermission. " + "Table of the region:%s , requested table:%s",tableName,tperm.getTableName()));
          }
          Map<byte[],Set<byte[]>> familyMap=new TreeMap<byte[],Set<byte[]>>(Bytes.BYTES_COMPARATOR);
          if (tperm.getFamily() != null) {
            if (tperm.getQualifier() != null) {
              Set<byte[]> qualifiers=Sets.newTreeSet(Bytes.BYTES_COMPARATOR);
              qualifiers.add(tperm.getQualifier());
              familyMap.put(tperm.getFamily(),qualifiers);
            }
 else {
              familyMap.put(tperm.getFamily(),null);
            }
          }
          AuthResult result=permissionGranted("checkPermissions",user,action,regionEnv,familyMap);
          logResult(result);
          if (!result.isAllowed()) {
            throw new AccessDeniedException("Insufficient permissions (table=" + tableName + (familyMap.size() > 0 ? ", family: " + result.toFamilyString() : "")+ ", action="+ action.toString()+ ")");
          }
        }
      }
 else {
        for (        Action action : permission.getActions()) {
          AuthResult result;
          if (authManager.authorize(user,action)) {
            result=AuthResult.allow("checkPermissions","Global action allowed",user,action,null,null);
          }
 else {
            result=AuthResult.deny("checkPermissions","Global action denied",user,action,null,null);
          }
          logResult(result);
          if (!result.isAllowed()) {
            throw new AccessDeniedException("Insufficient permissions (action=" + action.toString() + ")");
          }
        }
      }
    }
    response=AccessControlProtos.CheckPermissionsResponse.getDefaultInstance();
  }
 catch (  IOException ioe) {
    ResponseConverter.setControllerException(controller,ioe);
  }
  done.run(response);
}
