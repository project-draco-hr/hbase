{
  ThriftHBaseServiceHandler handler=createHandler();
  byte[] rowName="testDelete".getBytes();
  ByteBuffer table=ByteBuffer.wrap(tableAname);
  List<TColumnValue> columnValues=new ArrayList<TColumnValue>();
  TColumnValue columnValueA=new TColumnValue(ByteBuffer.wrap(familyAname),ByteBuffer.wrap(qualifierAname),ByteBuffer.wrap(valueAname));
  TColumnValue columnValueB=new TColumnValue(ByteBuffer.wrap(familyBname),ByteBuffer.wrap(qualifierBname),ByteBuffer.wrap(valueBname));
  columnValues.add(columnValueA);
  columnValues.add(columnValueB);
  TPut put=new TPut(ByteBuffer.wrap(rowName),columnValues);
  put.setColumnValues(columnValues);
  handler.put(table,put);
  TDelete delete=new TDelete(ByteBuffer.wrap(rowName));
  List<TColumn> deleteColumns=new ArrayList<TColumn>();
  TColumn deleteColumn=new TColumn(ByteBuffer.wrap(familyAname));
  deleteColumn.setQualifier(qualifierAname);
  deleteColumns.add(deleteColumn);
  delete.setColumns(deleteColumns);
  handler.deleteSingle(table,delete);
  TGet get=new TGet(ByteBuffer.wrap(rowName));
  TResult result=handler.get(table,get);
  assertArrayEquals(rowName,result.getRow());
  List<TColumnValue> returnedColumnValues=result.getColumnValues();
  List<TColumnValue> expectedColumnValues=new ArrayList<TColumnValue>();
  expectedColumnValues.add(columnValueB);
  assertTColumnValuesEqual(expectedColumnValues,returnedColumnValues);
}
