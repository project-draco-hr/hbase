{
  if (initialCapacity < 1) {
    throw new IllegalArgumentException("Initial capacity must be > 0");
  }
  if (initialCapacity > MAXIMUM_CAPACITY) {
    throw new IllegalArgumentException("Initial capacity is too large");
  }
  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {
    throw new IllegalArgumentException("Load factor must be > 0");
  }
  if (maxMemUsage <= (OVERHEAD + initialCapacity * HeapSize.REFERENCE)) {
    throw new IllegalArgumentException("Max memory usage too small to " + "support base overhead");
  }
  int capacity=calculateCapacity(initialCapacity);
  this.loadFactor=loadFactor;
  this.threshold=calculateThreshold(capacity,loadFactor);
  this.entries=new Entry[capacity];
  this.memFree=maxMemUsage;
  this.memTotal=maxMemUsage;
  init();
}
