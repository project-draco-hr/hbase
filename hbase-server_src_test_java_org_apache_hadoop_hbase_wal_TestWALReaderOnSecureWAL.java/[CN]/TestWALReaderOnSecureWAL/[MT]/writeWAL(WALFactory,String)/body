{
  Configuration conf=TEST_UTIL.getConfiguration();
  String clsName=conf.get(WALCellCodec.WAL_CELL_CODEC_CLASS_KEY,WALCellCodec.class.getName());
  conf.setClass(WALCellCodec.WAL_CELL_CODEC_CLASS_KEY,SecureWALCellCodec.class,WALCellCodec.class);
  try {
    TableName tableName=TableName.valueOf(tblName);
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor(tableName.getName()));
    NavigableMap<byte[],Integer> scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
    for (    byte[] fam : htd.getFamiliesKeys()) {
      scopes.put(fam,0);
    }
    HRegionInfo regioninfo=new HRegionInfo(tableName,HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,false);
    final int total=10;
    final byte[] row=Bytes.toBytes("row");
    final byte[] family=Bytes.toBytes("family");
    final MultiVersionConcurrencyControl mvcc=new MultiVersionConcurrencyControl(1);
    WAL wal=wals.getWAL(regioninfo.getEncodedNameAsBytes(),regioninfo.getTable().getNamespace());
    for (int i=0; i < total; i++) {
      WALEdit kvs=new WALEdit();
      kvs.add(new KeyValue(row,family,Bytes.toBytes(i),value));
      wal.append(regioninfo,new WALKey(regioninfo.getEncodedNameAsBytes(),tableName,System.currentTimeMillis(),mvcc,scopes),kvs,true);
    }
    wal.sync();
    final Path walPath=AbstractFSWALProvider.getCurrentFileName(wal);
    wal.shutdown();
    return walPath;
  }
  finally {
    conf.set(WALCellCodec.WAL_CELL_CODEC_CLASS_KEY,clsName);
  }
}
