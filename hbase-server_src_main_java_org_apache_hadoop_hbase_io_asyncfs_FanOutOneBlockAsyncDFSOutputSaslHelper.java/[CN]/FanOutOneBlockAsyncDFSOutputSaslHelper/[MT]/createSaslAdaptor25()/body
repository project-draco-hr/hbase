{
  final Field trustedChannelResolverField=DFSClient.class.getDeclaredField("trustedChannelResolver");
  trustedChannelResolverField.setAccessible(true);
  final Method getDataEncryptionKeyMethod=DFSClient.class.getMethod("getDataEncryptionKey");
  return new SaslAdaptor(){
    @Override public TrustedChannelResolver getTrustedChannelResolver(    DFSClient client){
      try {
        return (TrustedChannelResolver)trustedChannelResolverField.get(client);
      }
 catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public SaslPropertiesResolver getSaslPropsResolver(    DFSClient client){
      return null;
    }
    @Override public AtomicBoolean getFallbackToSimpleAuth(    DFSClient client){
      return null;
    }
    @Override public DataEncryptionKey createDataEncryptionKey(    DFSClient client){
      try {
        return (DataEncryptionKey)getDataEncryptionKeyMethod.invoke(client);
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}
