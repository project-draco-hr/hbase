{
  final Field saslPropsResolverField=saslDataTransferClientClass.getDeclaredField("saslPropsResolver");
  saslPropsResolverField.setAccessible(true);
  final Field trustedChannelResolverField=saslDataTransferClientClass.getDeclaredField("trustedChannelResolver");
  trustedChannelResolverField.setAccessible(true);
  final Field fallbackToSimpleAuthField=saslDataTransferClientClass.getDeclaredField("fallbackToSimpleAuth");
  fallbackToSimpleAuthField.setAccessible(true);
  final Method getSaslDataTransferClientMethod=DFSClient.class.getMethod("getSaslDataTransferClient");
  final Method newDataEncryptionKeyMethod=DFSClient.class.getMethod("newDataEncryptionKey");
  return new SaslAdaptor(){
    @Override public TrustedChannelResolver getTrustedChannelResolver(    DFSClient client){
      try {
        return (TrustedChannelResolver)trustedChannelResolverField.get(getSaslDataTransferClientMethod.invoke(client));
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public SaslPropertiesResolver getSaslPropsResolver(    DFSClient client){
      try {
        return (SaslPropertiesResolver)saslPropsResolverField.get(getSaslDataTransferClientMethod.invoke(client));
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public AtomicBoolean getFallbackToSimpleAuth(    DFSClient client){
      try {
        return (AtomicBoolean)fallbackToSimpleAuthField.get(getSaslDataTransferClientMethod.invoke(client));
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public DataEncryptionKey createDataEncryptionKey(    DFSClient client){
      try {
        return (DataEncryptionKey)newDataEncryptionKeyMethod.invoke(client);
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
}
