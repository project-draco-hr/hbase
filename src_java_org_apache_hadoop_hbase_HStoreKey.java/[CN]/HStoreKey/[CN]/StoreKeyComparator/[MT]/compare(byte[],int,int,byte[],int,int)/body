{
  byte firstByte1=b1[o1];
  int vint1=firstByte1;
  int vintWidth1=WritableUtils.decodeVIntSize(firstByte1);
  if (vintWidth1 != 1) {
    vint1=getBigVint(vintWidth1,firstByte1,b1,o1);
  }
  byte firstByte2=b2[o2];
  int vint2=firstByte2;
  int vintWidth2=WritableUtils.decodeVIntSize(firstByte2);
  if (vintWidth2 != 1) {
    vint2=getBigVint(vintWidth2,firstByte2,b2,o2);
  }
  int result=compareRows(b1,o1 + vintWidth1,vint1,b2,o2 + vintWidth2,vint2);
  if (result != 0) {
    return result;
  }
  int diff1=vintWidth1 + vint1;
  o1+=diff1;
  l1-=diff1;
  int diff2=vintWidth2 + vint2;
  o2+=diff2;
  l2-=diff2;
  firstByte1=b1[o1];
  vint1=firstByte1;
  vintWidth1=WritableUtils.decodeVIntSize(firstByte1);
  if (vintWidth1 != 1) {
    vint1=getBigVint(vintWidth1,firstByte1,b1,o1);
  }
  firstByte2=b2[o2];
  vint2=firstByte2;
  vintWidth2=WritableUtils.decodeVIntSize(firstByte2);
  if (vintWidth2 != 1) {
    vint2=getBigVint(vintWidth2,firstByte2,b2,o2);
  }
  result=Bytes.compareTo(b1,o1 + vintWidth1,vint1,b2,o2 + vintWidth2,vint2);
  if (result != 0) {
    return result;
  }
  diff1=vintWidth1 + vint1;
  o1+=diff1;
  l1-=diff1;
  diff2=vintWidth2 + vint2;
  o2+=diff2;
  l2-=diff2;
  for (int i=0; i < l1; i++) {
    int leftb=b1[o1 + i] & 0xff;
    int rightb=b2[o2 + i] & 0xff;
    if (leftb < rightb) {
      return 1;
    }
 else     if (leftb > rightb) {
      return -1;
    }
  }
  return 0;
}
