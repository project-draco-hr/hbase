{
  HFileReaderV2 reader=(HFileReaderV2)HFile.createReader(fs,storeFilePath,cacheConf,encoderType.getEncoder());
  LOG.info("HFile information: " + reader);
  HFileScanner scanner=reader.getScanner(false,false);
  assertTrue(testDescription,scanner.seekTo());
  long offset=0;
  HFileBlock prevBlock=null;
  EnumMap<BlockType,Integer> blockCountByType=new EnumMap<BlockType,Integer>(BlockType.class);
  while (offset < reader.getTrailer().getLoadOnOpenDataOffset()) {
    long onDiskSize=-1;
    if (prevBlock != null) {
      onDiskSize=prevBlock.getNextBlockOnDiskSizeWithHeader();
    }
    HFileBlock block=reader.readBlock(offset,onDiskSize,false,true,false);
    BlockCacheKey blockCacheKey=HFile.getBlockCacheKey(reader.getName(),offset);
    boolean isCached=blockCache.getBlock(blockCacheKey,true) != null;
    boolean shouldBeCached=cowType.shouldBeCached(block.getBlockType());
    assertEquals(testDescription + " " + block,shouldBeCached,isCached);
    prevBlock=block;
    offset+=block.getOnDiskSizeWithHeader();
    BlockType bt=block.getBlockType();
    Integer count=blockCountByType.get(bt);
    blockCountByType.put(bt,(count == null ? 0 : count) + 1);
  }
  LOG.info("Block count by type: " + blockCountByType);
  String countByType=blockCountByType.toString();
  BlockType cachedDataBlockType=encoderType.encodeInCache ? BlockType.ENCODED_DATA : BlockType.DATA;
  assertEquals("{" + cachedDataBlockType + "=1379, LEAF_INDEX=173, BLOOM_CHUNK=9, INTERMEDIATE_INDEX=24}",countByType);
  reader.close();
}
