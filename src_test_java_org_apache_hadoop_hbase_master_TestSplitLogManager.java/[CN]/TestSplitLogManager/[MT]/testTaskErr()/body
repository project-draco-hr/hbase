{
  LOG.info("TestTaskErr - cleanup task node once in ERR state");
  conf.setInt("hbase.splitlog.max.resubmit",0);
  slm=new SplitLogManager(zkw,conf,stopper,"dummy-master",null);
  slm.finishInitialization();
  TaskBatch batch=new TaskBatch();
  String tasknode=submitTaskAndWait(batch,"foo/1");
  ZKUtil.setData(zkw,tasknode,TaskState.TASK_ERR.get("worker"));
synchronized (batch) {
    while (batch.installed != batch.error) {
      batch.wait();
    }
  }
  waitForCounter(tot_mgr_task_deleted,0,1,1000);
  assertTrue(ZKUtil.checkExists(zkw,tasknode) == -1);
  conf.setInt("hbase.splitlog.max.resubmit",0);
  slm.stopTrackingTasks(batch);
  batch=new TaskBatch();
  resetCounters();
  ZKUtil.createAndWatch(zkw,tasknode,TaskState.TASK_ERR.get("worker"));
  slm.enqueueSplitTask("foo/1",batch);
  assertEquals(1,batch.installed);
  assertTrue(slm.findOrCreateOrphanTask(tasknode).batch == batch);
  waitForCounter(tot_mgr_node_already_exists,0,1,1000);
synchronized (batch) {
    while (batch.installed != batch.error) {
      batch.wait();
    }
  }
  waitForCounter(tot_mgr_task_deleted,0,1,1000);
  assertTrue(ZKUtil.checkExists(zkw,tasknode) == -1);
  conf.setInt("hbase.splitlog.max.resubmit",ZKSplitLog.DEFAULT_MAX_RESUBMIT);
}
