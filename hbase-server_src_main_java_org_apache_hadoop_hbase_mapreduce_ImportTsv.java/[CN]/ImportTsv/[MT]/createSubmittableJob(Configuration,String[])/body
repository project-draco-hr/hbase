{
  HBaseAdmin admin=new HBaseAdmin(conf);
  String actualSeparator=conf.get(SEPARATOR_CONF_KEY);
  if (actualSeparator != null) {
    conf.set(SEPARATOR_CONF_KEY,Base64.encodeBytes(actualSeparator.getBytes()));
  }
  String mapperClassName=conf.get(MAPPER_CONF_KEY);
  Class mapperClass=mapperClassName != null ? Class.forName(mapperClassName) : DEFAULT_MAPPER;
  TableName tableName=TableName.valueOf(args[0]);
  Path inputDir=new Path(args[1]);
  String jobName=conf.get(JOB_NAME_CONF_KEY,NAME + "_" + tableName.getNameAsString());
  Job job=Job.getInstance(conf,jobName);
  job.setJarByClass(mapperClass);
  FileInputFormat.setInputPaths(job,inputDir);
  job.setInputFormatClass(TextInputFormat.class);
  job.setMapperClass(mapperClass);
  String hfileOutPath=conf.get(BULK_OUTPUT_CONF_KEY);
  String columns[]=conf.getStrings(COLUMNS_CONF_KEY);
  if (StringUtils.isNotEmpty(conf.get(CREDENTIALS_LOCATION))) {
    String fileLoc=conf.get(CREDENTIALS_LOCATION);
    Credentials cred=Credentials.readTokenStorageFile(new File(fileLoc),conf);
    job.getCredentials().addAll(cred);
  }
  if (hfileOutPath != null) {
    if (!admin.tableExists(tableName)) {
      LOG.warn(format("Table '%s' does not exist.",tableName));
      createTable(admin,tableName,columns);
    }
    HTable table=new HTable(conf,tableName);
    job.setReducerClass(PutSortReducer.class);
    Path outputDir=new Path(hfileOutPath);
    FileOutputFormat.setOutputPath(job,outputDir);
    job.setMapOutputKeyClass(ImmutableBytesWritable.class);
    if (mapperClass.equals(TsvImporterTextMapper.class)) {
      job.setMapOutputValueClass(Text.class);
      job.setReducerClass(TextSortReducer.class);
    }
 else {
      job.setMapOutputValueClass(Put.class);
      job.setCombinerClass(PutCombiner.class);
    }
    HFileOutputFormat.configureIncrementalLoad(job,table);
  }
 else {
    if (mapperClass.equals(TsvImporterTextMapper.class)) {
      usage(TsvImporterTextMapper.class.toString() + " should not be used for non bulkloading case. use " + TsvImporterMapper.class.toString()+ " or custom mapper whose value type is Put.");
      System.exit(-1);
    }
    TableMapReduceUtil.initTableReducerJob(tableName.getNameAsString(),null,job);
    job.setNumReduceTasks(0);
  }
  TableMapReduceUtil.addDependencyJars(job);
  TableMapReduceUtil.addDependencyJars(job.getConfiguration(),com.google.common.base.Function.class);
  return job;
}
