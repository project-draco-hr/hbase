{
  List<KeyValue> sampleKv=generator.generateTestKeyValues(NUMBER_OF_KV,includesTags);
  List<DataBlockEncoder.EncodedSeeker> encodedSeekers=new ArrayList<DataBlockEncoder.EncodedSeeker>();
  for (  DataBlockEncoding encoding : DataBlockEncoding.values()) {
    DataBlockEncoder encoder=encoding.getEncoder();
    if (encoder == null) {
      continue;
    }
    ByteBuffer encodedBuffer=encodeKeyValues(encoding,sampleKv,getEncodingContext(Compression.Algorithm.NONE,encoding));
    HFileContext meta=new HFileContextBuilder().withHBaseCheckSum(false).withIncludesMvcc(includesMemstoreTS).withIncludesTags(includesTags).withCompression(Compression.Algorithm.NONE).build();
    DataBlockEncoder.EncodedSeeker seeker=encoder.createSeeker(KeyValue.COMPARATOR,encoder.newDataBlockDecodingContext(meta));
    seeker.setCurrentBuffer(encodedBuffer);
    encodedSeekers.add(seeker);
  }
  for (  boolean seekBefore : new boolean[]{false,true}) {
    for (int i=0; i < NUM_RANDOM_SEEKS; ++i) {
      int keyValueId;
      if (!seekBefore) {
        keyValueId=randomizer.nextInt(sampleKv.size());
      }
 else {
        keyValueId=randomizer.nextInt(sampleKv.size() - 1) + 1;
      }
      KeyValue keyValue=sampleKv.get(keyValueId);
      checkSeekingConsistency(encodedSeekers,seekBefore,keyValue);
    }
  }
  checkSeekingConsistency(encodedSeekers,false,sampleKv.get(0));
  for (  boolean seekBefore : new boolean[]{false,true}) {
    checkSeekingConsistency(encodedSeekers,seekBefore,sampleKv.get(sampleKv.size() - 1));
    KeyValue midKv=sampleKv.get(sampleKv.size() / 2);
    KeyValue lastMidKv=KeyValueUtil.createLastOnRowCol(midKv);
    checkSeekingConsistency(encodedSeekers,seekBefore,lastMidKv);
  }
}
