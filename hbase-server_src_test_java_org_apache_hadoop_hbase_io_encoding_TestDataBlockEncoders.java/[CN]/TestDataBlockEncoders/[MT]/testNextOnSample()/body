{
  List<KeyValue> sampleKv=generator.generateTestKeyValues(NUMBER_OF_KV,includesTags);
  for (  DataBlockEncoding encoding : DataBlockEncoding.values()) {
    if (this.useOffheapData && encoding == DataBlockEncoding.PREFIX_TREE)     continue;
    if (encoding.getEncoder() == null) {
      continue;
    }
    DataBlockEncoder encoder=encoding.getEncoder();
    ByteBuffer encodedBuffer=encodeKeyValues(encoding,sampleKv,getEncodingContext(Compression.Algorithm.NONE,encoding),this.useOffheapData);
    HFileContext meta=new HFileContextBuilder().withHBaseCheckSum(false).withIncludesMvcc(includesMemstoreTS).withIncludesTags(includesTags).withCompression(Compression.Algorithm.NONE).build();
    DataBlockEncoder.EncodedSeeker seeker=encoder.createSeeker(CellComparator.COMPARATOR,encoder.newDataBlockDecodingContext(meta));
    seeker.setCurrentBuffer(new SingleByteBuff(encodedBuffer));
    int i=0;
    do {
      KeyValue expectedKeyValue=sampleKv.get(i);
      Cell cell=seeker.getCell();
      if (CellComparator.COMPARATOR.compareKeyIgnoresMvcc(expectedKeyValue,cell) != 0) {
        int commonPrefix=CellUtil.findCommonPrefixInFlatKey(expectedKeyValue,cell,false,true);
        fail(String.format("next() produces wrong results " + "encoder: %s i: %d commonPrefix: %d" + "\n expected %s\n actual      %s",encoder.toString(),i,commonPrefix,Bytes.toStringBinary(expectedKeyValue.getBuffer(),expectedKeyValue.getKeyOffset(),expectedKeyValue.getKeyLength()),CellUtil.toString(cell,false)));
      }
      i++;
    }
 while (seeker.next());
  }
}
