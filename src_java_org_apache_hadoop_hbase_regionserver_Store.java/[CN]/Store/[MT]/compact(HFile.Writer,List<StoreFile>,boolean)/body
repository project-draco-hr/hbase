{
  StoreFile[] files=reverse(pReaders);
  HFileScanner[] rdrs=new HFileScanner[files.length];
  KeyValue[] kvs=new KeyValue[rdrs.length];
  boolean[] done=new boolean[rdrs.length];
  int numDone=0;
  for (int i=0; i < rdrs.length; i++) {
    rdrs[i]=files[i].getReader().getScanner();
    done[i]=!rdrs[i].seekTo();
    if (done[i]) {
      numDone++;
    }
 else {
      kvs[i]=rdrs[i].getKeyValue();
    }
  }
  long now=System.currentTimeMillis();
  int timesSeen=0;
  KeyValue lastSeen=KeyValue.LOWESTKEY;
  KeyValue lastDelete=null;
  int maxVersions=family.getMaxVersions();
  while (numDone < done.length) {
    int lowestKey=getLowestKey(rdrs,kvs,done);
    KeyValue kv=kvs[lowestKey];
    if (this.comparator.matchingRowColumn(lastSeen,kv)) {
      timesSeen++;
      if (lastDelete != null && lastDelete.getTimestamp() != kv.getTimestamp()) {
        lastDelete=null;
      }
    }
 else {
      timesSeen=1;
      lastDelete=null;
    }
    if (kv.nonNullRowAndColumn()) {
      if (!majorCompaction) {
        compactedOut.append(kv);
      }
 else {
        boolean expired=false;
        boolean deleted=false;
        if (timesSeen <= maxVersions && !(expired=isExpired(kv,ttl,now))) {
          if (lastDelete != null && this.comparatorIgnoringType.compare(kv,lastDelete) == 0) {
            deleted=true;
          }
 else           if (kv.isDeleteType()) {
            deleted=true;
            lastDelete=kv;
          }
 else {
            compactedOut.append(kv);
          }
        }
        if (expired || deleted) {
          timesSeen--;
        }
      }
    }
    lastSeen=kv;
    if (!rdrs[lowestKey].next()) {
      done[lowestKey]=true;
      rdrs[lowestKey]=null;
      numDone++;
    }
 else {
      kvs[lowestKey]=rdrs[lowestKey].getKeyValue();
    }
  }
}
