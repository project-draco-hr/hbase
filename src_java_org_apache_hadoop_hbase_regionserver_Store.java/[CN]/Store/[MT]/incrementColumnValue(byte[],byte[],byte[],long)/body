{
  long value=0;
  List<KeyValue> result=new ArrayList<KeyValue>();
  KeyComparator keyComparator=this.comparator.getRawComparator();
  Get get=new Get(row);
  NavigableSet<byte[]> qualifiers=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
  qualifiers.add(qualifier);
  QueryMatcher matcher=new QueryMatcher(get,f,qualifiers,this.ttl,keyComparator,1);
  if (this.memcache.get(matcher,result)) {
    KeyValue kv=result.get(0);
    byte[] buffer=kv.getBuffer();
    int valueOffset=kv.getValueOffset();
    value=Bytes.toLong(buffer,valueOffset,Bytes.SIZEOF_LONG) + amount;
    Bytes.putBytes(buffer,valueOffset,Bytes.toBytes(value),0,Bytes.SIZEOF_LONG);
    return new ValueAndSize(value,0);
  }
  if (this.storefiles.isEmpty()) {
    return addNewKeyValue(row,f,qualifier,value,amount);
  }
  List<HFileScanner> storefileScanners=new ArrayList<HFileScanner>();
  for (  StoreFile sf : this.storefiles.descendingMap().values()) {
    storefileScanners.add(sf.getReader().getScanner());
  }
  StoreFileGetScan scanner=new StoreFileGetScan(storefileScanners,matcher);
  scanner.get(result);
  if (result.size() > 0) {
    value=Bytes.toLong(result.get(0).getValue());
  }
  return addNewKeyValue(row,f,qualifier,value,amount);
}
