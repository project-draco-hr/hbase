{
  if (key == null) {
    return;
  }
  int versions=versionsToReturn(numVersions);
  NavigableSet<KeyValue> deletes=new TreeSet<KeyValue>(this.comparatorIgnoringType);
  this.lock.readLock().lock();
  try {
    if (this.memcache.getFull(key,columns,columnPattern,versions,versionsCounter,deletes,keyvalues,now)) {
      return;
    }
    Map<Long,StoreFile> m=this.storefiles.descendingMap();
    for (Iterator<Map.Entry<Long,StoreFile>> i=m.entrySet().iterator(); i.hasNext(); ) {
      if (getFullFromStoreFile(i.next().getValue(),key,columns,columnPattern,versions,versionsCounter,deletes,keyvalues)) {
        return;
      }
    }
  }
  finally {
    this.lock.readLock().unlock();
  }
}
