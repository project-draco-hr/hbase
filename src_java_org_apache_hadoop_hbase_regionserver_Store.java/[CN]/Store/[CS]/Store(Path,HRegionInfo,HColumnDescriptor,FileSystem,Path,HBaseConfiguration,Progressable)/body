{
  this.homedir=getStoreHomedir(basedir,info.getEncodedName(),family.getName());
  this.regioninfo=info;
  this.family=family;
  this.fs=fs;
  this.conf=conf;
  this.bloomfilter=family.isBloomfilter();
  this.blocksize=family.getBlocksize();
  this.compression=family.getCompression();
  this.comparator=info.getComparator();
  this.comparatorIgnoringType=this.comparator.getComparatorIgnoringType();
  this.ttl=family.getTimeToLive();
  if (ttl == HConstants.FOREVER) {
    ttl=Long.MAX_VALUE;
  }
 else   if (ttl == -1) {
    ttl=Long.MAX_VALUE;
  }
 else {
    this.ttl*=1000;
  }
  this.memcache=new Memcache(this.ttl,this.comparator);
  this.compactionDir=HRegion.getCompactionDir(basedir);
  this.storeName=this.family.getName();
  this.storeNameStr=Bytes.toString(this.storeName);
  this.compactionThreshold=conf.getInt("hbase.hstore.compactionThreshold",3);
  long maxFileSize=info.getTableDesc().getMaxFileSize();
  if (maxFileSize == HConstants.DEFAULT_MAX_FILE_SIZE) {
    maxFileSize=conf.getLong("hbase.hregion.max.filesize",HConstants.DEFAULT_MAX_FILE_SIZE);
  }
  this.desiredMaxFileSize=maxFileSize;
  this.majorCompactionTime=conf.getLong(HConstants.MAJOR_COMPACTION_PERIOD,86400000);
  if (family.getValue(HConstants.MAJOR_COMPACTION_PERIOD) != null) {
    String strCompactionTime=family.getValue(HConstants.MAJOR_COMPACTION_PERIOD);
    this.majorCompactionTime=(new Long(strCompactionTime)).longValue();
  }
  this.maxFilesToCompact=conf.getInt("hbase.hstore.compaction.max",10);
  this.storefiles.putAll(loadStoreFiles());
  runReconstructionLog(reconstructionLog,this.maxSeqId,reporter);
}
