{
  HColumnDescriptor hcd=new HColumnDescriptor(FAMILY_BYTES).setMaxVersions(Integer.MAX_VALUE).setTimeToLive(TTL_SECONDS);
  HTableDescriptor htd=new HTableDescriptor(TABLE);
  htd.addFamily(hcd);
  HRegionInfo info=new HRegionInfo(Bytes.toBytes(TABLE));
  HRegion region=HRegion.createHRegion(info,TEST_UTIL.getClusterTestDir(),TEST_UTIL.getConfiguration(),htd);
  for (int iFile=0; iFile < totalNumFiles; ++iFile) {
    if (iFile == NUM_EXPIRED_FILES) {
      Threads.sleepWithoutInterrupt(TTL_MS);
    }
    for (int iRow=0; iRow < NUM_ROWS; ++iRow) {
      Put put=new Put(Bytes.toBytes("row" + iRow));
      for (int iCol=0; iCol < NUM_COLS_PER_ROW; ++iCol) {
        put.add(FAMILY_BYTES,Bytes.toBytes("col" + iCol),Bytes.toBytes("value" + iFile + "_"+ iRow+ "_"+ iCol));
      }
      region.put(put);
    }
    region.flushcache();
  }
  Scan scan=new Scan();
  scan.setMaxVersions(Integer.MAX_VALUE);
  CacheConfig cacheConf=new CacheConfig(TEST_UTIL.getConfiguration());
  LruBlockCache cache=(LruBlockCache)cacheConf.getBlockCache();
  cache.clearCache();
  InternalScanner scanner=region.getScanner(scan);
  List<KeyValue> results=new ArrayList<KeyValue>();
  final int expectedKVsPerRow=numFreshFiles * NUM_COLS_PER_ROW;
  int numReturnedRows=0;
  LOG.info("Scanning the entire table");
  while (scanner.next(results) || results.size() > 0) {
    assertEquals(expectedKVsPerRow,results.size());
    ++numReturnedRows;
    results.clear();
  }
  assertEquals(NUM_ROWS,numReturnedRows);
  Set<String> accessedFiles=cache.getCachedFileNamesForTest();
  LOG.debug("Files accessed during scan: " + accessedFiles);
  Map<String,Long> metricsBeforeCompaction=SchemaMetrics.getMetricsSnapshot();
  if (explicitCompaction) {
    region.getStore(FAMILY_BYTES).compactRecentForTesting(totalNumFiles);
  }
 else {
    region.compactStores();
  }
  SchemaMetrics.validateMetricChanges(metricsBeforeCompaction);
  Map<String,Long> compactionMetrics=SchemaMetrics.diffMetrics(metricsBeforeCompaction,SchemaMetrics.getMetricsSnapshot());
  long compactionDataBlocksRead=SchemaMetrics.getLong(compactionMetrics,SchemaMetrics.getInstance(TABLE,FAMILY).getBlockMetricName(BlockCategory.DATA,true,BlockMetricType.READ_COUNT));
  assertEquals("Invalid number of blocks accessed during compaction. " + "We only expect non-expired files to be accessed.",numFreshFiles,compactionDataBlocksRead);
  region.close();
}
