{
  if (subproc == null) {
    LOG.warn("Submitted null subprocedure, nothing to run here.");
    return false;
  }
  String procName=subproc.getName();
  if (procName == null || procName.length() == 0) {
    LOG.error("Subproc name cannot be null or the empty string");
    return false;
  }
  Subprocedure rsub=subprocs.get(procName);
  if (rsub != null) {
    if (!rsub.isComplete()) {
      LOG.error("Subproc '" + procName + "' is already running. Bailing out");
      return false;
    }
    LOG.warn("A completed old subproc " + procName + " is still present, removing");
    if (!subprocs.remove(procName,rsub)) {
      LOG.error("Another thread has replaced existing subproc '" + procName + "'. Bailing out");
      return false;
    }
  }
  LOG.debug("Submitting new Subprocedure:" + procName);
  try {
    if (subprocs.putIfAbsent(procName,subproc) == null) {
      this.pool.submit(subproc);
      return true;
    }
 else {
      LOG.error("Another thread has submitted subproc '" + procName + "'. Bailing out");
      return false;
    }
  }
 catch (  RejectedExecutionException e) {
    subprocs.remove(procName,subproc);
    String msg="Subprocedure pool is full!";
    subproc.cancel(msg,e.getCause());
  }
  LOG.error("Failed to start subprocedure '" + procName + "'");
  return false;
}
