{
  CellScannerPosition p;
  searcher.resetToBeforeFirstEntry();
  searcher.next();
  Cell first=searcher.getCurrent();
  Assert.assertTrue(CellComparator.equals(d.get(0),first));
  Assert.assertTrue(searcher.positionAt(d.get(3)));
  Assert.assertTrue(CellComparator.equals(d.get(3),searcher.getCurrent()));
  Cell between4And5=new KeyValue(rowB,cf,cq1,ts - 2,v0);
  Assert.assertFalse(searcher.positionAt(between4And5));
  p=searcher.positionAtOrBefore(between4And5);
  Assert.assertEquals(CellScannerPosition.BEFORE,p);
  Assert.assertTrue(CellComparator.equals(searcher.getCurrent(),d.get(4)));
  p=searcher.positionAtOrAfter(between4And5);
  Assert.assertEquals(CellScannerPosition.AFTER,p);
  Assert.assertTrue(CellComparator.equals(searcher.getCurrent(),d.get(5)));
  Cell beforeFirst=new KeyValue(Bytes.toBytes("A"),cf,cq0,ts,v0);
  Assert.assertFalse(searcher.positionAt(beforeFirst));
  p=searcher.positionAtOrBefore(beforeFirst);
  Assert.assertEquals(CellScannerPosition.BEFORE_FIRST,p);
  p=searcher.positionAtOrAfter(beforeFirst);
  Assert.assertEquals(CellScannerPosition.AFTER,p);
  Assert.assertTrue(CellComparator.equals(searcher.getCurrent(),d.get(0)));
  Assert.assertEquals(d.get(0),searcher.getCurrent());
  Cell afterLast=new KeyValue(Bytes.toBytes("z"),cf,cq0,ts,v0);
  Assert.assertFalse(searcher.positionAt(afterLast));
  p=searcher.positionAtOrAfter(afterLast);
  Assert.assertEquals(CellScannerPosition.AFTER_LAST,p);
  p=searcher.positionAtOrBefore(afterLast);
  Assert.assertEquals(CellScannerPosition.BEFORE,p);
  Assert.assertTrue(CellComparator.equals(searcher.getCurrent(),CollectionUtils.getLast(d)));
}
