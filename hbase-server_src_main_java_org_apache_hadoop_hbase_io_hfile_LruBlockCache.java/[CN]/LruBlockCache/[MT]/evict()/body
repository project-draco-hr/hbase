{
  if (!evictionLock.tryLock())   return;
  try {
    evictionInProgress=true;
    long currentSize=this.size.get();
    long bytesToFree=currentSize - minSize();
    if (LOG.isTraceEnabled()) {
      LOG.trace("Block cache LRU eviction started; Attempting to free " + StringUtils.byteDesc(bytesToFree) + " of total="+ StringUtils.byteDesc(currentSize));
    }
    if (bytesToFree <= 0)     return;
    BlockBucket bucketSingle=new BlockBucket("single",bytesToFree,blockSize,singleSize());
    BlockBucket bucketMulti=new BlockBucket("multi",bytesToFree,blockSize,multiSize());
    BlockBucket bucketMemory=new BlockBucket("memory",bytesToFree,blockSize,memorySize());
    for (    LruCachedBlock cachedBlock : map.values()) {
switch (cachedBlock.getPriority()) {
case SINGLE:
{
          bucketSingle.add(cachedBlock);
          break;
        }
case MULTI:
{
        bucketMulti.add(cachedBlock);
        break;
      }
case MEMORY:
{
      bucketMemory.add(cachedBlock);
      break;
    }
}
}
long bytesFreed=0;
if (forceInMemory || memoryFactor > 0.999f) {
long s=bucketSingle.totalSize();
long m=bucketMulti.totalSize();
if (bytesToFree > (s + m)) {
  bytesFreed=bucketSingle.free(s);
  bytesFreed+=bucketMulti.free(m);
  if (LOG.isTraceEnabled()) {
    LOG.trace("freed " + StringUtils.byteDesc(bytesFreed) + " from single and multi buckets");
  }
  bytesFreed+=bucketMemory.free(bytesToFree - bytesFreed);
  if (LOG.isTraceEnabled()) {
    LOG.trace("freed " + StringUtils.byteDesc(bytesFreed) + " total from all three buckets ");
  }
}
 else {
  long bytesRemain=s + m - bytesToFree;
  if (3 * s <= bytesRemain) {
    bytesFreed=bucketMulti.free(bytesToFree);
  }
 else   if (3 * m <= 2 * bytesRemain) {
    bytesFreed=bucketSingle.free(bytesToFree);
  }
 else {
    bytesFreed=bucketSingle.free(s - bytesRemain / 3);
    if (bytesFreed < bytesToFree) {
      bytesFreed+=bucketMulti.free(bytesToFree - bytesFreed);
    }
  }
}
}
 else {
PriorityQueue<BlockBucket> bucketQueue=new PriorityQueue<BlockBucket>(3);
bucketQueue.add(bucketSingle);
bucketQueue.add(bucketMulti);
bucketQueue.add(bucketMemory);
int remainingBuckets=3;
BlockBucket bucket;
while ((bucket=bucketQueue.poll()) != null) {
  long overflow=bucket.overflow();
  if (overflow > 0) {
    long bucketBytesToFree=Math.min(overflow,(bytesToFree - bytesFreed) / remainingBuckets);
    bytesFreed+=bucket.free(bucketBytesToFree);
  }
  remainingBuckets--;
}
}
if (LOG.isTraceEnabled()) {
long single=bucketSingle.totalSize();
long multi=bucketMulti.totalSize();
long memory=bucketMemory.totalSize();
LOG.trace("Block cache LRU eviction completed; " + "freed=" + StringUtils.byteDesc(bytesFreed) + ", "+ "total="+ StringUtils.byteDesc(this.size.get())+ ", "+ "single="+ StringUtils.byteDesc(single)+ ", "+ "multi="+ StringUtils.byteDesc(multi)+ ", "+ "memory="+ StringUtils.byteDesc(memory));
}
}
  finally {
stats.evict();
evictionInProgress=false;
evictionLock.unlock();
}
}
