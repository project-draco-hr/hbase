{
  if (singleFactor + multiFactor + memoryFactor != 1 || singleFactor < 0 || multiFactor < 0 || memoryFactor < 0) {
    throw new IllegalArgumentException("Single, multi, and memory factors " + " should be non-negative and total 1.0");
  }
  if (minFactor >= acceptableFactor) {
    throw new IllegalArgumentException("minFactor must be smaller than acceptableFactor");
  }
  if (minFactor >= 1.0f || acceptableFactor >= 1.0f) {
    throw new IllegalArgumentException("all factors must be < 1");
  }
  this.maxSize=maxSize;
  this.blockSize=blockSize;
  this.forceInMemory=forceInMemory;
  map=new ConcurrentHashMap<BlockCacheKey,LruCachedBlock>(mapInitialSize,mapLoadFactor,mapConcurrencyLevel);
  this.minFactor=minFactor;
  this.acceptableFactor=acceptableFactor;
  this.singleFactor=singleFactor;
  this.multiFactor=multiFactor;
  this.memoryFactor=memoryFactor;
  this.stats=new CacheStats();
  this.count=new AtomicLong(0);
  this.elements=new AtomicLong(0);
  this.overhead=calculateOverhead(maxSize,blockSize,mapConcurrencyLevel);
  this.size=new AtomicLong(this.overhead);
  if (evictionThread) {
    this.evictionThread=new EvictionThread(this);
    this.evictionThread.start();
  }
 else {
    this.evictionThread=null;
  }
  this.scheduleThreadPool.scheduleAtFixedRate(new StatisticsThread(this),statThreadPeriod,statThreadPeriod,TimeUnit.SECONDS);
}
