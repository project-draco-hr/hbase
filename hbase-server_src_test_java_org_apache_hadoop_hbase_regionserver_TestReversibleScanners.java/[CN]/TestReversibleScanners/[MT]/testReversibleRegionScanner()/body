{
  byte[] FAMILYNAME2=Bytes.toBytes("testCf2");
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("testtable")).addFamily(new HColumnDescriptor(FAMILYNAME)).addFamily(new HColumnDescriptor(FAMILYNAME2));
  Region region=TEST_UTIL.createLocalHRegion(htd,null,null);
  loadDataToRegion(region,FAMILYNAME2);
  Scan scan=new Scan();
  InternalScanner scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,ROWSIZE * QUALSIZE * 2,ROWSIZE,true);
  scan.setReversed(true);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,ROWSIZE * QUALSIZE * 2,ROWSIZE,false);
  scan=new Scan();
  scan.setReversed(true);
  scan.addFamily(FAMILYNAME);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,ROWSIZE * QUALSIZE,ROWSIZE,false);
  byte[][] specifiedQualifiers={QUALS[1],QUALS[2]};
  for (  byte[] specifiedQualifier : specifiedQualifiers)   scan.addColumn(FAMILYNAME,specifiedQualifier);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,ROWSIZE * 2,ROWSIZE,false);
  for (  byte[] specifiedQualifier : specifiedQualifiers)   scan.addColumn(FAMILYNAME2,specifiedQualifier);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,ROWSIZE * 2 * 2,ROWSIZE,false);
  int startRowNum=ROWSIZE * 3 / 4;
  scan.setStartRow(ROWS[startRowNum]);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,(startRowNum + 1) * 2 * 2,(startRowNum + 1),false);
  int stopRowNum=ROWSIZE / 4;
  scan.setStartRow(HConstants.EMPTY_BYTE_ARRAY);
  scan.setStopRow(ROWS[stopRowNum]);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,(ROWSIZE - stopRowNum - 1) * 2 * 2,(ROWSIZE - stopRowNum - 1),false);
  scan.setStartRow(ROWS[startRowNum]);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,(startRowNum - stopRowNum) * 2 * 2,(startRowNum - stopRowNum),false);
  int valueNum=startRowNum % VALUESIZE;
  Filter filter=new SingleColumnValueFilter(FAMILYNAME,specifiedQualifiers[0],CompareOp.EQUAL,VALUES[valueNum]);
  scan.setFilter(filter);
  scanner=region.getScanner(scan);
  int unfilteredRowNum=(startRowNum - stopRowNum) / VALUESIZE + (stopRowNum / VALUESIZE == valueNum ? 0 : 1);
  verifyCountAndOrder(scanner,unfilteredRowNum * 2 * 2,unfilteredRowNum,false);
  int pageSize=10;
  filter=new PageFilter(pageSize);
  scan.setFilter(filter);
  scanner=region.getScanner(scan);
  int expectedRowNum=pageSize;
  verifyCountAndOrder(scanner,expectedRowNum * 2 * 2,expectedRowNum,false);
  SingleColumnValueFilter scvFilter1=new SingleColumnValueFilter(FAMILYNAME,specifiedQualifiers[0],CompareOp.EQUAL,VALUES[0]);
  SingleColumnValueFilter scvFilter2=new SingleColumnValueFilter(FAMILYNAME,specifiedQualifiers[0],CompareOp.EQUAL,VALUES[1]);
  expectedRowNum=0;
  for (int i=startRowNum; i > stopRowNum; i--) {
    if (i % VALUESIZE == 0 || i % VALUESIZE == 1) {
      expectedRowNum++;
    }
  }
  filter=new FilterList(Operator.MUST_PASS_ONE,scvFilter1,scvFilter2);
  scan.setFilter(filter);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,expectedRowNum * 2 * 2,expectedRowNum,false);
  filter=new FilterList(Operator.MUST_PASS_ALL,scvFilter1,scvFilter2);
  expectedRowNum=0;
  scan.setFilter(filter);
  scanner=region.getScanner(scan);
  verifyCountAndOrder(scanner,expectedRowNum * 2 * 2,expectedRowNum,false);
}
