{
  FileSystem fs=TEST_UTIL.getTestFileSystem();
  Path hfilePath=new Path(new Path(TEST_UTIL.getDataTestDir("testReversibleStoreScanner"),"regionname"),"familyname");
  CacheConfig cacheConf=new CacheConfig(TEST_UTIL.getConfiguration());
  HFileContextBuilder hcBuilder=new HFileContextBuilder();
  hcBuilder.withBlockSize(2 * 1024);
  HFileContext hFileContext=hcBuilder.build();
  StoreFile.Writer writer1=new StoreFile.WriterBuilder(TEST_UTIL.getConfiguration(),cacheConf,fs).withOutputDir(hfilePath).withFileContext(hFileContext).build();
  StoreFile.Writer writer2=new StoreFile.WriterBuilder(TEST_UTIL.getConfiguration(),cacheConf,fs).withOutputDir(hfilePath).withFileContext(hFileContext).build();
  MemStore memstore=new DefaultMemStore();
  writeMemstoreAndStoreFiles(memstore,new StoreFile.Writer[]{writer1,writer2});
  StoreFile sf1=new StoreFile(fs,writer1.getPath(),TEST_UTIL.getConfiguration(),cacheConf,BloomType.NONE);
  StoreFile sf2=new StoreFile(fs,writer2.getPath(),TEST_UTIL.getConfiguration(),cacheConf,BloomType.NONE);
  ScanType scanType=ScanType.USER_SCAN;
  ScanInfo scanInfo=new ScanInfo(TEST_UTIL.getConfiguration(),FAMILYNAME,0,Integer.MAX_VALUE,Long.MAX_VALUE,KeepDeletedCells.FALSE,0,CellComparator.COMPARATOR);
  Scan scan=new Scan();
  scan.setReversed(true);
  StoreScanner storeScanner=getReversibleStoreScanner(memstore,sf1,sf2,scan,scanType,scanInfo,MAXMVCC);
  verifyCountAndOrder(storeScanner,QUALSIZE * ROWSIZE,ROWSIZE,false);
  int startRowNum=ROWSIZE / 2;
  byte[] startRow=ROWS[startRowNum];
  scan.setStartRow(startRow);
  storeScanner=getReversibleStoreScanner(memstore,sf1,sf2,scan,scanType,scanInfo,MAXMVCC);
  verifyCountAndOrder(storeScanner,QUALSIZE * (startRowNum + 1),startRowNum + 1,false);
  assertTrue(QUALSIZE > 2);
  scan.addColumn(FAMILYNAME,QUALS[0]);
  scan.addColumn(FAMILYNAME,QUALS[2]);
  storeScanner=getReversibleStoreScanner(memstore,sf1,sf2,scan,scanType,scanInfo,MAXMVCC);
  verifyCountAndOrder(storeScanner,2 * (startRowNum + 1),startRowNum + 1,false);
  for (int readPoint=0; readPoint < MAXMVCC; readPoint++) {
    LOG.info("Setting read point to " + readPoint);
    storeScanner=getReversibleStoreScanner(memstore,sf1,sf2,scan,scanType,scanInfo,readPoint);
    int expectedRowCount=0;
    int expectedKVCount=0;
    for (int i=startRowNum; i >= 0; i--) {
      int kvCount=0;
      if (makeMVCC(i,0) <= readPoint) {
        kvCount++;
      }
      if (makeMVCC(i,2) <= readPoint) {
        kvCount++;
      }
      if (kvCount > 0) {
        expectedRowCount++;
        expectedKVCount+=kvCount;
      }
    }
    verifyCountAndOrder(storeScanner,expectedKVCount,expectedRowCount,false);
  }
}
