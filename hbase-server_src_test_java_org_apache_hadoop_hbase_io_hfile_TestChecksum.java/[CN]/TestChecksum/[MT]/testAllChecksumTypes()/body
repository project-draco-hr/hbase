{
  List<ChecksumType> cktypes=new ArrayList<>(Arrays.asList(ChecksumType.values()));
  for (Iterator<ChecksumType> itr=cktypes.iterator(); itr.hasNext(); ) {
    ChecksumType cktype=itr.next();
    Path path=new Path(TEST_UTIL.getDataTestDir(),"checksum" + cktype.getName());
    FSDataOutputStream os=fs.create(path);
    HFileContext meta=new HFileContextBuilder().withChecksumType(cktype).build();
    HFileBlock.Writer hbw=new HFileBlock.Writer(null,meta);
    DataOutputStream dos=hbw.startWriting(BlockType.DATA);
    for (int i=0; i < 1000; ++i) {
      dos.writeInt(i);
    }
    hbw.writeHeaderAndData(os);
    int totalSize=hbw.getOnDiskSizeWithHeader();
    os.close();
    assertEquals(true,hfs.useHBaseChecksum());
    FSDataInputStreamWrapper is=new FSDataInputStreamWrapper(fs,path);
    meta=new HFileContextBuilder().withHBaseCheckSum(true).build();
    HFileBlock.FSReader hbr=new HFileBlock.FSReaderImpl(is,totalSize,(HFileSystem)fs,path,meta);
    HFileBlock b=hbr.readBlockData(0,-1,false);
    ByteBuff data=b.getBufferWithoutHeader();
    for (int i=0; i < 1000; i++) {
      assertEquals(i,data.getInt());
    }
    boolean exception_thrown=false;
    try {
      data.getInt();
    }
 catch (    BufferUnderflowException e) {
      exception_thrown=true;
    }
    assertTrue(exception_thrown);
    assertEquals(0,HFile.getChecksumFailuresCount());
  }
}
