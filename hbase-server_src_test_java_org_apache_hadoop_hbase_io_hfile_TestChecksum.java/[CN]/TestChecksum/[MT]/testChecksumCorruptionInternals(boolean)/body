{
  for (  Compression.Algorithm algo : COMPRESSION_ALGORITHMS) {
    for (    boolean pread : new boolean[]{false,true}) {
      LOG.info("testChecksumCorruption: Compression algorithm: " + algo + ", pread="+ pread);
      Path path=new Path(TEST_UTIL.getDataTestDir(),"blocks_v2_" + algo);
      FSDataOutputStream os=fs.create(path);
      HFileContext meta=new HFileContextBuilder().withCompression(algo).withIncludesMvcc(true).withIncludesTags(useTags).withBytesPerCheckSum(HFile.DEFAULT_BYTES_PER_CHECKSUM).build();
      HFileBlock.Writer hbw=new HFileBlock.Writer(null,meta);
      long totalSize=0;
      for (int blockId=0; blockId < 2; ++blockId) {
        DataOutputStream dos=hbw.startWriting(BlockType.DATA);
        for (int i=0; i < 1234; ++i)         dos.writeInt(i);
        hbw.writeHeaderAndData(os);
        totalSize+=hbw.getOnDiskSizeWithHeader();
      }
      os.close();
      assertEquals(true,hfs.useHBaseChecksum());
      FSDataInputStreamWrapper is=new FSDataInputStreamWrapper(fs,path);
      meta=new HFileContextBuilder().withCompression(algo).withIncludesMvcc(true).withIncludesTags(useTags).withHBaseCheckSum(true).build();
      HFileBlock.FSReader hbr=new FSReaderImplTest(is,totalSize,fs,path,meta);
      HFileBlock b=hbr.readBlockData(0,-1,pread);
      b.sanityCheck();
      assertEquals(4936,b.getUncompressedSizeWithoutHeader());
      assertEquals(algo == GZ ? 2173 : 4936,b.getOnDiskSizeWithoutHeader() - b.totalChecksumBytes());
      ByteBuff bb=b.unpack(meta,hbr).getBufferWithoutHeader();
      DataInputStream in=new DataInputStream(new ByteArrayInputStream(bb.array(),bb.arrayOffset(),bb.limit()));
      assertEquals(1,HFile.getChecksumFailuresCount());
      validateData(in);
      for (int i=0; i < HFileBlock.CHECKSUM_VERIFICATION_NUM_IO_THRESHOLD + 1; i++) {
        b=hbr.readBlockData(0,-1,pread);
        assertEquals(0,HFile.getChecksumFailuresCount());
      }
      b=hbr.readBlockData(0,-1,pread);
      assertEquals(1,HFile.getChecksumFailuresCount());
      b=hbr.readBlockData(0,-1,pread);
      assertEquals(0,HFile.getChecksumFailuresCount());
      is.close();
      HFileSystem newfs=new HFileSystem(TEST_UTIL.getConfiguration(),false);
      assertEquals(false,newfs.useHBaseChecksum());
      is=new FSDataInputStreamWrapper(newfs,path);
      hbr=new FSReaderImplTest(is,totalSize,newfs,path,meta);
      b=hbr.readBlockData(0,-1,pread);
      is.close();
      b.sanityCheck();
      b=b.unpack(meta,hbr);
      assertEquals(4936,b.getUncompressedSizeWithoutHeader());
      assertEquals(algo == GZ ? 2173 : 4936,b.getOnDiskSizeWithoutHeader() - b.totalChecksumBytes());
      bb=b.getBufferWithoutHeader();
      in=new DataInputStream(new ByteArrayInputStream(bb.array(),bb.arrayOffset(),bb.limit()));
      assertEquals(0,HFile.getChecksumFailuresCount());
      validateData(in);
    }
  }
}
