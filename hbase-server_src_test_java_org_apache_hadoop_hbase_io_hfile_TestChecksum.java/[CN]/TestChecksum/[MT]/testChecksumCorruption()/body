{
  for (  Compression.Algorithm algo : COMPRESSION_ALGORITHMS) {
    for (    boolean pread : new boolean[]{false,true}) {
      LOG.info("testChecksumCorruption: Compression algorithm: " + algo + ", pread="+ pread);
      Path path=new Path(TEST_UTIL.getDataTestDir(),"blocks_v2_" + algo);
      FSDataOutputStream os=fs.create(path);
      HFileBlock.Writer hbw=new HFileBlock.Writer(algo,null,true,HFile.DEFAULT_CHECKSUM_TYPE,HFile.DEFAULT_BYTES_PER_CHECKSUM);
      long totalSize=0;
      for (int blockId=0; blockId < 2; ++blockId) {
        DataOutputStream dos=hbw.startWriting(BlockType.DATA);
        for (int i=0; i < 1234; ++i)         dos.writeInt(i);
        hbw.writeHeaderAndData(os);
        totalSize+=hbw.getOnDiskSizeWithHeader();
      }
      os.close();
      assertEquals(true,hfs.useHBaseChecksum());
      FSDataInputStream is=fs.open(path);
      HFileBlock.FSReader hbr=new FSReaderV2Test(is,algo,totalSize,HFile.MAX_FORMAT_VERSION,fs,path);
      HFileBlock b=hbr.readBlockData(0,-1,-1,pread);
      b.sanityCheck();
      assertEquals(4936,b.getUncompressedSizeWithoutHeader());
      assertEquals(algo == GZ ? 2173 : 4936,b.getOnDiskSizeWithoutHeader() - b.totalChecksumBytes());
      ByteBuffer bb=b.getBufferWithoutHeader();
      DataInputStream in=new DataInputStream(new ByteArrayInputStream(bb.array(),bb.arrayOffset(),bb.limit()));
      assertEquals(1,HFile.getChecksumFailuresCount());
      validateData(in);
      for (int i=0; i < HFileBlock.CHECKSUM_VERIFICATION_NUM_IO_THRESHOLD + 1; i++) {
        b=hbr.readBlockData(0,-1,-1,pread);
        assertEquals(0,HFile.getChecksumFailuresCount());
      }
      b=hbr.readBlockData(0,-1,-1,pread);
      assertEquals(1,HFile.getChecksumFailuresCount());
      b=hbr.readBlockData(0,-1,-1,pread);
      assertEquals(0,HFile.getChecksumFailuresCount());
      is.close();
      HFileSystem newfs=new HFileSystem(TEST_UTIL.getConfiguration(),false);
      assertEquals(false,newfs.useHBaseChecksum());
      is=newfs.open(path);
      hbr=new FSReaderV2Test(is,algo,totalSize,HFile.MAX_FORMAT_VERSION,newfs,path);
      b=hbr.readBlockData(0,-1,-1,pread);
      is.close();
      b.sanityCheck();
      assertEquals(4936,b.getUncompressedSizeWithoutHeader());
      assertEquals(algo == GZ ? 2173 : 4936,b.getOnDiskSizeWithoutHeader() - b.totalChecksumBytes());
      bb=b.getBufferWithoutHeader();
      in=new DataInputStream(new ByteArrayInputStream(bb.array(),bb.arrayOffset(),bb.limit()));
      assertEquals(0,HFile.getChecksumFailuresCount());
      validateData(in);
    }
  }
}
