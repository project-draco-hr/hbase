{
  return new Iterator<Row>(){
    private final Iterator<Mutation> iter=writeAsyncBuffer.iterator();
    private int countDown=remainder;
    private Mutation last=null;
    @Override public boolean hasNext(){
      if (countDown <= 0) {
        return false;
      }
      return iter.hasNext();
    }
    @Override public Row next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      last=iter.next();
      if (last == null) {
        throw new NoSuchElementException();
      }
      --countDown;
      return last;
    }
    @Override public void remove(){
      if (last == null) {
        throw new IllegalStateException();
      }
      iter.remove();
      currentWriteBufferSize.addAndGet(-last.heapSize());
      --remainder;
    }
  }
;
}
