{
  try {
    String[] args=getQuery();
    String usage="JAR jarFile [mainClass] args...;\n";
    if (args.length < 1) {
      return new ReturnMsg(0,usage);
    }
    int firstArg=0;
    String fileName=args[firstArg++];
    File file=new File(fileName);
    String mainClassName=null;
    JarFile jarFile;
    try {
      jarFile=new JarFile(fileName);
    }
 catch (    IOException io) {
      throw new IOException("Error opening job jar: " + fileName + "\n").initCause(io);
    }
    Manifest manifest=jarFile.getManifest();
    if (manifest != null) {
      mainClassName=manifest.getMainAttributes().getValue("Main-Class");
    }
    jarFile.close();
    if (mainClassName == null) {
      if (args.length < 2) {
        return new ReturnMsg(0,usage);
      }
      mainClassName=args[firstArg++];
    }
    mainClassName=mainClassName.replaceAll("/",".");
    File tmpDir=new File(new Configuration().get("hadoop.tmp.dir"));
    tmpDir.mkdirs();
    if (!tmpDir.isDirectory()) {
      return new ReturnMsg(0,"Mkdirs failed to create " + tmpDir + "\n");
    }
    final File workDir=File.createTempFile("hadoop-unjar","",tmpDir);
    workDir.delete();
    workDir.mkdirs();
    if (!workDir.isDirectory()) {
      return new ReturnMsg(0,"Mkdirs failed to create " + workDir + "\n");
    }
    Runtime.getRuntime().addShutdownHook(new Thread(){
      public void run(){
        try {
          FileUtil.fullyDelete(workDir);
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
);
    RunJar.unJar(file,workDir);
    ArrayList<URL> classPath=new ArrayList<URL>();
    classPath.add(new File(workDir + "/").toURL());
    classPath.add(file.toURL());
    classPath.add(new File(workDir,"classes/").toURL());
    File[] libs=new File(workDir,"lib").listFiles();
    if (libs != null) {
      for (int i=0; i < libs.length; i++) {
        classPath.add(libs[i].toURL());
      }
    }
    ClassLoader loader=new URLClassLoader(classPath.toArray(new URL[0]));
    Thread.currentThread().setContextClassLoader(loader);
    Class<?> mainClass=Class.forName(mainClassName,true,loader);
    Method main=mainClass.getMethod("main",new Class[]{Array.newInstance(String.class,0).getClass()});
    String[] newArgs=Arrays.asList(args).subList(firstArg,args.length).toArray(new String[0]);
    try {
      main.invoke(null,new Object[]{newArgs});
    }
 catch (    InvocationTargetException e) {
      throw e.getTargetException();
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return null;
}
