{
  TableName tn=TableName.valueOf(tableName);
  byte[] mobValueBytes=new byte[100];
  Path mobFamilyPath=MobUtils.getMobFamilyPath(TEST_UTIL.getConfiguration(),tn,family);
  Put put=new Put(Bytes.toBytes(row));
  put.addColumn(Bytes.toBytes(family),Bytes.toBytes(qf),1,mobValueBytes);
  Put put2=new Put(Bytes.toBytes(row + "ignore"));
  put2.addColumn(Bytes.toBytes(family),Bytes.toBytes(qf),1,mobValueBytes);
  table.mutate(put);
  table.mutate(put2);
  table.flush();
  admin.flush(tn);
  FileStatus[] fileStatuses=TEST_UTIL.getTestFileSystem().listStatus(mobFamilyPath);
  assertEquals(1,fileStatuses.length);
  String mobFile1=fileStatuses[0].getPath().getName();
  Configuration configuration=new Configuration(TEST_UTIL.getConfiguration());
  configuration.setFloat(MobConstants.MOB_SWEEP_TOOL_COMPACTION_RATIO,0.6f);
  configuration.setStrings(TableInputFormat.INPUT_TABLE,tableName);
  configuration.setStrings(TableInputFormat.SCAN_COLUMN_FAMILY,family);
  configuration.setStrings(SweepJob.WORKING_VISITED_DIR_KEY,"jobWorkingNamesDir");
  configuration.setStrings(SweepJob.WORKING_FILES_DIR_KEY,"compactionFileDir");
  configuration.setStrings(CommonConfigurationKeys.IO_SERIALIZATIONS_KEY,JavaSerialization.class.getName());
  configuration.set(SweepJob.WORKING_VISITED_DIR_KEY,"compactionVisitedDir");
  configuration.setLong(MobConstants.MOB_SWEEP_TOOL_COMPACTION_START_DATE,System.currentTimeMillis() + 24 * 3600 * 1000);
  ZooKeeperWatcher zkw=new ZooKeeperWatcher(configuration,"1",new DummyMobAbortable());
  TableName lockName=MobUtils.getTableLockName(tn);
  String znode=ZKUtil.joinZNode(zkw.znodePaths.tableLockZNode,lockName.getNameAsString());
  configuration.set(SweepJob.SWEEP_JOB_ID,"1");
  configuration.set(SweepJob.SWEEP_JOB_TABLE_NODE,znode);
  ServerName serverName=SweepJob.getCurrentServerName(configuration);
  configuration.set(SweepJob.SWEEP_JOB_SERVERNAME,serverName.toString());
  TableLockManager tableLockManager=TableLockManager.createTableLockManager(configuration,zkw,serverName);
  TableLock lock=tableLockManager.writeLock(lockName,"Run sweep tool");
  lock.acquire();
  try {
    Counter counter=new GenericCounter();
    Reducer<Text,KeyValue,Writable,Writable>.Context ctx=mock(Reducer.Context.class);
    when(ctx.getConfiguration()).thenReturn(configuration);
    when(ctx.getCounter(Matchers.any(SweepCounter.class))).thenReturn(counter);
    when(ctx.nextKey()).thenReturn(true).thenReturn(false);
    when(ctx.getCurrentKey()).thenReturn(new Text(mobFile1));
    byte[] refBytes=Bytes.toBytes(mobFile1);
    long valueLength=refBytes.length;
    byte[] newValue=Bytes.add(Bytes.toBytes(valueLength),refBytes);
    KeyValue kv2=new KeyValue(Bytes.toBytes(row),Bytes.toBytes(family),Bytes.toBytes(qf),1,KeyValue.Type.Put,newValue);
    List<KeyValue> list=new ArrayList<KeyValue>();
    list.add(kv2);
    when(ctx.getValues()).thenReturn(list);
    SweepReducer reducer=new SweepReducer();
    reducer.run(ctx);
  }
  finally {
    lock.release();
  }
  FileStatus[] filsStatuses2=TEST_UTIL.getTestFileSystem().listStatus(mobFamilyPath);
  String mobFile2=filsStatuses2[0].getPath().getName();
  assertEquals(1,filsStatuses2.length);
  assertEquals(false,mobFile2.equalsIgnoreCase(mobFile1));
  String workingPath=configuration.get(SweepJob.WORKING_VISITED_DIR_KEY);
  FileStatus[] statuses=TEST_UTIL.getTestFileSystem().listStatus(new Path(workingPath));
  Set<String> files=new TreeSet<String>();
  for (  FileStatus st : statuses) {
    files.addAll(getKeyFromSequenceFile(TEST_UTIL.getTestFileSystem(),st.getPath(),configuration));
  }
  assertEquals(1,files.size());
  assertEquals(true,files.contains(mobFile1));
}
