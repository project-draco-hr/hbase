{
  final String tableName="testConcurrentInstantSchemaChangeForModifyTable";
  conf=TEST_UTIL.getConfiguration();
  LOG.info("Start testConcurrentInstantSchemaChangeForModifyTable()");
  HTable ht=createTableAndValidate(tableName);
  Runnable run1=new Runnable(){
    public void run(){
      HColumnDescriptor hcd=new HColumnDescriptor("family1");
      try {
        admin.addColumn(Bytes.toBytes(tableName),hcd);
      }
 catch (      IOException ioe) {
        ioe.printStackTrace();
      }
    }
  }
;
  Runnable run2=new Runnable(){
    public void run(){
      HColumnDescriptor hcd=new HColumnDescriptor("family2");
      try {
        admin.addColumn(Bytes.toBytes(tableName),hcd);
      }
 catch (      IOException ioe) {
        ioe.printStackTrace();
      }
    }
  }
;
  run1.run();
  Thread.sleep(100);
  run2.run();
  waitForSchemaChangeProcess(tableName);
  Put put1=new Put(row);
  put1.add(Bytes.toBytes("family1"),qualifier,value);
  ht.put(put1);
  Get get1=new Get(row);
  get1.addColumn(Bytes.toBytes("family1"),qualifier);
  Result r=ht.get(get1);
  byte[] tvalue=r.getValue(Bytes.toBytes("family1"),qualifier);
  int result=Bytes.compareTo(value,tvalue);
  assertEquals(result,0);
  Thread.sleep(10000);
  Put put2=new Put(row);
  put2.add(Bytes.toBytes("family2"),qualifier,value);
  ht.put(put2);
  Get get2=new Get(row);
  get2.addColumn(Bytes.toBytes("family2"),qualifier);
  Result r2=ht.get(get2);
  byte[] tvalue2=r2.getValue(Bytes.toBytes("family2"),qualifier);
  int result2=Bytes.compareTo(value,tvalue2);
  assertEquals(result2,0);
  LOG.info("END testConcurrentInstantSchemaChangeForModifyTable()");
  ht.close();
}
