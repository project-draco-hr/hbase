{
  if (running.getAndSet(true)) {
    LOG.warn("Already running");
    return;
  }
  this.corePoolSize=numThreads;
  LOG.info("Starting procedure executor threads=" + corePoolSize);
  threadGroup=new ThreadGroup("ProcedureExecutor");
  timeoutExecutor=new TimeoutExecutorThread(threadGroup);
  workerId.set(0);
  workerThreads=new CopyOnWriteArrayList<WorkerThread>();
  for (int i=0; i < corePoolSize; ++i) {
    workerThreads.add(new WorkerThread(threadGroup));
  }
  long st, et;
  st=EnvironmentEdgeManager.currentTime();
  store.recoverLease();
  et=EnvironmentEdgeManager.currentTime();
  LOG.info(String.format("recover procedure store (%s) lease: %s",store.getClass().getSimpleName(),StringUtils.humanTimeDiff(et - st)));
  scheduler.start();
  st=EnvironmentEdgeManager.currentTime();
  load(abortOnCorruption);
  et=EnvironmentEdgeManager.currentTime();
  LOG.info(String.format("load procedure store (%s): %s",store.getClass().getSimpleName(),StringUtils.humanTimeDiff(et - st)));
  LOG.debug("start workers " + workerThreads.size());
  timeoutExecutor.start();
  for (  WorkerThread worker : workerThreads) {
    worker.start();
  }
  timeoutExecutor.add(new WorkerMonitor());
  addChore(new CompletedProcedureCleaner(conf,store,completed,nonceKeysToProcIdsMap));
}
