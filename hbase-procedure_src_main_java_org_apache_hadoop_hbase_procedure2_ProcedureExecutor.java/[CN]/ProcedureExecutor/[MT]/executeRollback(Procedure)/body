{
  try {
    proc.doRollback(getEnvironment());
  }
 catch (  IOException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("rollback attempt failed for " + proc,e);
    }
    return false;
  }
catch (  InterruptedException e) {
    handleInterruptedException(proc,e);
    return false;
  }
catch (  Throwable e) {
    LOG.fatal("CODE-BUG: Uncatched runtime exception for procedure: " + proc,e);
  }
  if (testing != null && testing.shouldKillBeforeStoreUpdate()) {
    LOG.debug("TESTING: Kill before store update");
    stop();
    return false;
  }
  if (proc.removeStackIndex()) {
    proc.setState(ProcedureState.ROLLEDBACK);
    if (proc.hasParent()) {
      store.delete(proc.getProcId());
      procedures.remove(proc.getProcId());
    }
 else {
      final long[] childProcIds=rollbackStack.get(proc.getProcId()).getSubprocedureIds();
      if (childProcIds != null) {
        store.delete(proc,childProcIds);
      }
 else {
        store.update(proc);
      }
    }
  }
 else {
    store.update(proc);
  }
  return true;
}
