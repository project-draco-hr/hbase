{
  if (completed.isEmpty()) {
    if (LOG.isTraceEnabled()) {
      LOG.trace("No completed procedures to cleanup.");
    }
    return;
  }
  final long evictTtl=conf.getInt(EVICT_TTL_CONF_KEY,DEFAULT_EVICT_TTL);
  final long evictAckTtl=conf.getInt(EVICT_ACKED_TTL_CONF_KEY,DEFAULT_ACKED_EVICT_TTL);
  final int batchSize=conf.getInt(BATCH_SIZE_CONF_KEY,DEFAULT_BATCH_SIZE);
  final long[] batchIds=new long[batchSize];
  int batchCount=0;
  final long now=EnvironmentEdgeManager.currentTime();
  final Iterator<Map.Entry<Long,ProcedureInfo>> it=completed.entrySet().iterator();
  final boolean isDebugEnabled=LOG.isDebugEnabled();
  while (it.hasNext() && store.isRunning()) {
    final Map.Entry<Long,ProcedureInfo> entry=it.next();
    final ProcedureInfo procInfo=entry.getValue();
    if ((procInfo.hasClientAckTime() && (now - procInfo.getClientAckTime()) >= evictAckTtl) || (now - procInfo.getLastUpdate()) >= evictTtl) {
      if (isDebugEnabled) {
        LOG.debug("Evict completed procedure: " + procInfo);
      }
      batchIds[batchCount++]=entry.getKey();
      if (batchCount == batchIds.length) {
        store.delete(batchIds,0,batchCount);
        batchCount=0;
      }
      it.remove();
      final NonceKey nonceKey=procInfo.getNonceKey();
      if (nonceKey != null) {
        nonceKeysToProcIdsMap.remove(nonceKey);
      }
    }
  }
  if (batchCount > 0) {
    store.delete(batchIds,0,batchCount);
  }
}
