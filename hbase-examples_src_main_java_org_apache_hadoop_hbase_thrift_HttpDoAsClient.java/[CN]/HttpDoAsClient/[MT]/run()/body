{
  TTransport transport=new TSocket(host,port);
  transport.open();
  String url="http://" + host + ":"+ port;
  THttpClient httpClient=new THttpClient(url);
  httpClient.open();
  TProtocol protocol=new TBinaryProtocol(httpClient);
  Hbase.Client client=new Hbase.Client(protocol);
  byte[] t=bytes("demo_table");
  System.out.println("scanning tables...");
  for (  ByteBuffer name : refresh(client,httpClient).getTableNames()) {
    System.out.println("  found: " + utf8(name.array()));
    if (utf8(name.array()).equals(utf8(t))) {
      if (client.isTableEnabled(name)) {
        System.out.println("    disabling table: " + utf8(name.array()));
        refresh(client,httpClient).disableTable(name);
      }
      System.out.println("    deleting table: " + utf8(name.array()));
      refresh(client,httpClient).deleteTable(name);
    }
  }
  ArrayList<ColumnDescriptor> columns=new ArrayList<ColumnDescriptor>();
  ColumnDescriptor col;
  col=new ColumnDescriptor();
  col.name=ByteBuffer.wrap(bytes("entry:"));
  col.timeToLive=Integer.MAX_VALUE;
  col.maxVersions=10;
  columns.add(col);
  col=new ColumnDescriptor();
  col.name=ByteBuffer.wrap(bytes("unused:"));
  col.timeToLive=Integer.MAX_VALUE;
  columns.add(col);
  System.out.println("creating table: " + utf8(t));
  try {
    refresh(client,httpClient).createTable(ByteBuffer.wrap(t),columns);
  }
 catch (  AlreadyExists ae) {
    System.out.println("WARN: " + ae.message);
  }
  System.out.println("column families in " + utf8(t) + ": ");
  Map<ByteBuffer,ColumnDescriptor> columnMap=refresh(client,httpClient).getColumnDescriptors(ByteBuffer.wrap(t));
  for (  ColumnDescriptor col2 : columnMap.values()) {
    System.out.println("  column: " + utf8(col2.name.array()) + ", maxVer: "+ Integer.toString(col2.maxVersions));
  }
  transport.close();
  httpClient.close();
}
