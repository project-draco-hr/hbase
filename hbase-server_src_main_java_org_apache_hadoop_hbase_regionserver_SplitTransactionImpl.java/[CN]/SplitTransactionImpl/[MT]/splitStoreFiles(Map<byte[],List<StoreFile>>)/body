{
  if (hstoreFilesToSplit == null) {
    throw new IOException("Close returned empty list of StoreFiles");
  }
  int nbFiles=0;
  for (  Map.Entry<byte[],List<StoreFile>> entry : hstoreFilesToSplit.entrySet()) {
    nbFiles+=entry.getValue().size();
  }
  if (nbFiles == 0) {
    return new Pair<Integer,Integer>(0,0);
  }
  int defMaxThreads=Math.min(parent.conf.getInt(HStore.BLOCKING_STOREFILES_KEY,HStore.DEFAULT_BLOCKING_STOREFILE_COUNT),Runtime.getRuntime().availableProcessors());
  int maxThreads=Math.min(parent.conf.getInt(HConstants.REGION_SPLIT_THREADS_MAX,defMaxThreads),nbFiles);
  LOG.info("Preparing to split " + nbFiles + " storefiles for region "+ this.parent+ " using "+ maxThreads+ " threads");
  ThreadFactoryBuilder builder=new ThreadFactoryBuilder();
  builder.setNameFormat("StoreFileSplitter-%1$d");
  ThreadFactory factory=builder.build();
  ThreadPoolExecutor threadPool=(ThreadPoolExecutor)Executors.newFixedThreadPool(maxThreads,factory);
  List<Future<Pair<Path,Path>>> futures=new ArrayList<Future<Pair<Path,Path>>>(nbFiles);
  for (  Map.Entry<byte[],List<StoreFile>> entry : hstoreFilesToSplit.entrySet()) {
    for (    StoreFile sf : entry.getValue()) {
      StoreFileSplitter sfs=new StoreFileSplitter(entry.getKey(),sf);
      futures.add(threadPool.submit(sfs));
    }
  }
  threadPool.shutdown();
  try {
    boolean stillRunning=!threadPool.awaitTermination(this.fileSplitTimeout,TimeUnit.MILLISECONDS);
    if (stillRunning) {
      threadPool.shutdownNow();
      while (!threadPool.isTerminated()) {
        Thread.sleep(50);
      }
      throw new IOException("Took too long to split the" + " files and create the references, aborting split");
    }
  }
 catch (  InterruptedException e) {
    throw (InterruptedIOException)new InterruptedIOException().initCause(e);
  }
  int created_a=0;
  int created_b=0;
  for (  Future<Pair<Path,Path>> future : futures) {
    try {
      Pair<Path,Path> p=future.get();
      created_a+=p.getFirst() != null ? 1 : 0;
      created_b+=p.getSecond() != null ? 1 : 0;
    }
 catch (    InterruptedException e) {
      throw (InterruptedIOException)new InterruptedIOException().initCause(e);
    }
catch (    ExecutionException e) {
      throw new IOException(e);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Split storefiles for region " + this.parent + " Daughter A: "+ created_a+ " storefiles, Daughter B: "+ created_b+ " storefiles.");
  }
  return new Pair<Integer,Integer>(created_a,created_b);
}
