{
  LOG.info(String.format("Performing action: Rolling batch restarting %d%% of region servers",(int)(ratio * 100)));
  List<ServerName> selectedServers=PolicyBasedChaosMonkey.selectRandomItems(getCurrentServers(),ratio);
  Queue<ServerName> serversToBeKilled=new LinkedList<ServerName>(selectedServers);
  Queue<ServerName> deadServers=new LinkedList<ServerName>();
  while (!serversToBeKilled.isEmpty() || !deadServers.isEmpty()) {
    boolean action=true;
    if (serversToBeKilled.isEmpty() || deadServers.isEmpty()) {
      action=deadServers.isEmpty();
    }
 else {
      action=RandomUtils.nextBoolean();
    }
    if (action) {
      ServerName server=serversToBeKilled.remove();
      try {
        killRs(server);
      }
 catch (      org.apache.hadoop.util.Shell.ExitCodeException e) {
        LOG.info("Problem killing but presume successful; code=" + e.getExitCode(),e);
      }
      deadServers.add(server);
    }
 else {
      try {
        ServerName server=deadServers.remove();
        startRs(server);
      }
 catch (      org.apache.hadoop.util.Shell.ExitCodeException e) {
        LOG.info("Problem starting, will retry; code=" + e.getExitCode(),e);
      }
    }
    sleep(RandomUtils.nextInt((int)sleepTime));
  }
}
