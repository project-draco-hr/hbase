{
  final List<Pair<byte[],String>> familyPaths=new ArrayList<Pair<byte[],String>>();
  for (  ClientProtos.BulkLoadHFileRequest.FamilyPath el : request.getFamilyPathList()) {
    familyPaths.add(new Pair(el.getFamily().toByteArray(),el.getPath()));
  }
  final Token userToken=new Token(request.getFsToken().getIdentifier().toByteArray(),request.getFsToken().getPassword().toByteArray(),new Text(request.getFsToken().getKind()),new Text(request.getFsToken().getService()));
  final String bulkToken=request.getBulkToken();
  User user=getActiveUser();
  final UserGroupInformation ugi=user.getUGI();
  if (userToken != null) {
    ugi.addToken(userToken);
  }
 else   if (userProvider.isHadoopSecurityEnabled()) {
    ResponseConverter.setControllerException(controller,new DoNotRetryIOException("User token cannot be null"));
    return;
  }
  HRegion region=env.getRegion();
  boolean bypass=false;
  if (region.getCoprocessorHost() != null) {
    try {
      bypass=region.getCoprocessorHost().preBulkLoadHFile(familyPaths);
    }
 catch (    IOException e) {
      ResponseConverter.setControllerException(controller,e);
      done.run(null);
      return;
    }
  }
  boolean loaded=false;
  if (!bypass) {
    FsDelegationToken targetfsDelegationToken=new FsDelegationToken(userProvider,"renewer");
    try {
      targetfsDelegationToken.acquireDelegationToken(fs);
    }
 catch (    IOException e) {
      ResponseConverter.setControllerException(controller,e);
      done.run(null);
      return;
    }
    Token<?> targetFsToken=targetfsDelegationToken.getUserToken();
    if (targetFsToken != null && (userToken == null || !targetFsToken.getService().equals(userToken.getService()))) {
      ugi.addToken(targetFsToken);
    }
    loaded=ugi.doAs(new PrivilegedAction<Boolean>(){
      @Override public Boolean run(){
        FileSystem fs=null;
        try {
          Configuration conf=env.getConfiguration();
          fs=FileSystem.get(conf);
          for (          Pair<byte[],String> el : familyPaths) {
            Path p=new Path(el.getSecond());
            LOG.trace("Setting permission for: " + p);
            fs.setPermission(p,PERM_ALL_ACCESS);
            Path stageFamily=new Path(bulkToken,Bytes.toString(el.getFirst()));
            if (!fs.exists(stageFamily)) {
              fs.mkdirs(stageFamily);
              fs.setPermission(stageFamily,PERM_ALL_ACCESS);
            }
          }
          return env.getRegion().bulkLoadHFiles(familyPaths,true,new SecureBulkLoadListener(fs,bulkToken,conf));
        }
 catch (        Exception e) {
          LOG.error("Failed to complete bulk load",e);
        }
        return false;
      }
    }
);
  }
  if (region.getCoprocessorHost() != null) {
    try {
      loaded=region.getCoprocessorHost().postBulkLoadHFile(familyPaths,loaded);
    }
 catch (    IOException e) {
      ResponseConverter.setControllerException(controller,e);
      done.run(null);
      return;
    }
  }
  done.run(SecureBulkLoadHFilesResponse.newBuilder().setLoaded(loaded).build());
}
