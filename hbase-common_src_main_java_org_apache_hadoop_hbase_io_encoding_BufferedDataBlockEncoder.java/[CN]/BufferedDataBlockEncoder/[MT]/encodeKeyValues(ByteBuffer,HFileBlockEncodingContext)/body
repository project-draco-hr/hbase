{
  if (blkEncodingCtx.getClass() != HFileBlockDefaultEncodingContext.class) {
    throw new IOException(this.getClass().getName() + " only accepts " + HFileBlockDefaultEncodingContext.class.getName()+ " as the "+ "encoding context.");
  }
  HFileBlockDefaultEncodingContext encodingCtx=(HFileBlockDefaultEncodingContext)blkEncodingCtx;
  encodingCtx.prepareEncoding();
  DataOutputStream dataOut=((HFileBlockDefaultEncodingContext)encodingCtx).getOutputStreamForEncoder();
  if (encodingCtx.getHFileContext().isCompressTags()) {
    try {
      TagCompressionContext tagCompressionContext=new TagCompressionContext(LRUDictionary.class);
      encodingCtx.setTagCompressionContext(tagCompressionContext);
    }
 catch (    Exception e) {
      throw new IOException("Failed to initialize TagCompressionContext",e);
    }
  }
  internalEncodeKeyValues(dataOut,in,encodingCtx);
  if (encodingCtx.getDataBlockEncoding() != DataBlockEncoding.NONE) {
    encodingCtx.postEncoding(BlockType.ENCODED_DATA);
  }
 else {
    encodingCtx.postEncoding(BlockType.DATA);
  }
}
