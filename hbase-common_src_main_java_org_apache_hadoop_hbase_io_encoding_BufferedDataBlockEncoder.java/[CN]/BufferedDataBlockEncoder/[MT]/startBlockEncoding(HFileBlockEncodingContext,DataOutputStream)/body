{
  if (blkEncodingCtx.getClass() != HFileBlockDefaultEncodingContext.class) {
    throw new IOException(this.getClass().getName() + " only accepts " + HFileBlockDefaultEncodingContext.class.getName()+ " as the "+ "encoding context.");
  }
  HFileBlockDefaultEncodingContext encodingCtx=(HFileBlockDefaultEncodingContext)blkEncodingCtx;
  encodingCtx.prepareEncoding(out);
  if (encodingCtx.getHFileContext().isIncludesTags() && encodingCtx.getHFileContext().isCompressTags()) {
    if (encodingCtx.getTagCompressionContext() != null) {
      encodingCtx.getTagCompressionContext().clear();
    }
 else {
      try {
        TagCompressionContext tagCompressionContext=new TagCompressionContext(LRUDictionary.class,Byte.MAX_VALUE);
        encodingCtx.setTagCompressionContext(tagCompressionContext);
      }
 catch (      Exception e) {
        throw new IOException("Failed to initialize TagCompressionContext",e);
      }
    }
  }
  ByteBufferUtils.putInt(out,0);
  blkEncodingCtx.setEncodingState(new BufferedDataBlockEncodingState());
}
