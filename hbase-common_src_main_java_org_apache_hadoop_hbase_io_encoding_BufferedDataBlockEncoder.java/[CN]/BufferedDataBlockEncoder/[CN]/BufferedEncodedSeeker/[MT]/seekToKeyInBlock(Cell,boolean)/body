{
  int rowCommonPrefix=0;
  int familyCommonPrefix=0;
  int qualCommonPrefix=0;
  previous.invalidate();
  do {
    int comp;
    keyOnlyKV.setKey(current.keyBuffer,0,current.keyLength);
    if (current.lastCommonPrefix != 0) {
      rowCommonPrefix=Math.min(rowCommonPrefix,current.lastCommonPrefix - 2);
    }
    if (current.lastCommonPrefix <= 2) {
      rowCommonPrefix=0;
    }
    rowCommonPrefix+=findCommonPrefixInRowPart(seekCell,keyOnlyKV,rowCommonPrefix);
    comp=compareCommonRowPrefix(seekCell,keyOnlyKV,rowCommonPrefix);
    if (comp == 0) {
      comp=compareTypeBytes(seekCell,keyOnlyKV);
      if (comp == 0) {
        familyCommonPrefix=Math.max(0,Math.min(familyCommonPrefix,current.lastCommonPrefix - (3 + keyOnlyKV.getRowLength())));
        familyCommonPrefix+=findCommonPrefixInFamilyPart(seekCell,keyOnlyKV,familyCommonPrefix);
        comp=compareCommonFamilyPrefix(seekCell,keyOnlyKV,familyCommonPrefix);
        if (comp == 0) {
          qualCommonPrefix=Math.max(0,Math.min(qualCommonPrefix,current.lastCommonPrefix - (3 + keyOnlyKV.getRowLength() + keyOnlyKV.getFamilyLength())));
          qualCommonPrefix+=findCommonPrefixInQualifierPart(seekCell,keyOnlyKV,qualCommonPrefix);
          comp=compareCommonQualifierPrefix(seekCell,keyOnlyKV,qualCommonPrefix);
          if (comp == 0) {
            comp=CellComparator.compareTimestamps(seekCell,keyOnlyKV);
            if (comp == 0) {
              comp=(0xff & keyOnlyKV.getTypeByte()) - (0xff & seekCell.getTypeByte());
            }
          }
        }
      }
    }
    if (comp == 0) {
      if (seekBefore) {
        if (!previous.isValid()) {
          throw new IllegalStateException("Cannot seekBefore if " + "positioned at the first key in the block: key=" + Bytes.toStringBinary(seekCell.getRowArray()));
        }
        moveToPrevious();
        return 1;
      }
      return 0;
    }
    if (comp < 0) {
      if (previous.isValid()) {
        moveToPrevious();
      }
 else {
        return HConstants.INDEX_KEY_MAGIC;
      }
      return 1;
    }
    if (currentBuffer.hasRemaining()) {
      previous.copyFromNext(current);
      decodeNext();
      current.setKey(current.keyBuffer,current.memstoreTS);
    }
 else {
      break;
    }
  }
 while (true);
  return 1;
}
