{
  int rowCommonPrefix=0;
  int familyCommonPrefix=0;
  int qualCommonPrefix=0;
  previous.invalidate();
  KeyValue.KeyOnlyKeyValue currentCell=new KeyValue.KeyOnlyKeyValue();
  do {
    int comp;
    if (samePrefixComparator != null) {
      currentCell.setKey(current.keyBuffer,0,current.keyLength);
      if (current.lastCommonPrefix != 0) {
        rowCommonPrefix=Math.min(rowCommonPrefix,current.lastCommonPrefix - 2);
      }
      if (current.lastCommonPrefix <= 2) {
        rowCommonPrefix=0;
      }
      rowCommonPrefix+=CellComparator.findCommonPrefixInRowPart(seekCell,currentCell,rowCommonPrefix);
      comp=CellComparator.compareCommonRowPrefix(seekCell,currentCell,rowCommonPrefix);
      if (comp == 0) {
        comp=compareTypeBytes(seekCell,currentCell);
        if (comp == 0) {
          familyCommonPrefix=Math.max(0,Math.min(familyCommonPrefix,current.lastCommonPrefix - (3 + currentCell.getRowLength())));
          familyCommonPrefix+=CellComparator.findCommonPrefixInFamilyPart(seekCell,currentCell,familyCommonPrefix);
          comp=CellComparator.compareCommonFamilyPrefix(seekCell,currentCell,familyCommonPrefix);
          if (comp == 0) {
            qualCommonPrefix=Math.max(0,Math.min(qualCommonPrefix,current.lastCommonPrefix - (3 + currentCell.getRowLength() + currentCell.getFamilyLength())));
            qualCommonPrefix+=CellComparator.findCommonPrefixInQualifierPart(seekCell,currentCell,qualCommonPrefix);
            comp=CellComparator.compareCommonQualifierPrefix(seekCell,currentCell,qualCommonPrefix);
            if (comp == 0) {
              comp=CellComparator.compareTimestamps(seekCell,currentCell);
              if (comp == 0) {
                comp=(0xff & currentCell.getTypeByte()) - (0xff & seekCell.getTypeByte());
              }
            }
          }
        }
      }
    }
 else {
      Cell r=new KeyValue.KeyOnlyKeyValue(current.keyBuffer,0,current.keyLength);
      comp=comparator.compareOnlyKeyPortion(seekCell,r);
    }
    if (comp == 0) {
      if (seekBefore) {
        if (!previous.isValid()) {
          throw new IllegalStateException("Cannot seekBefore if " + "positioned at the first key in the block: key=" + Bytes.toStringBinary(seekCell.getRowArray()));
        }
        moveToPrevious();
        return 1;
      }
      return 0;
    }
    if (comp < 0) {
      if (previous.isValid()) {
        moveToPrevious();
      }
 else {
        return HConstants.INDEX_KEY_MAGIC;
      }
      return 1;
    }
    if (currentBuffer.hasRemaining()) {
      previous.copyFromNext(current);
      decodeNext();
    }
 else {
      break;
    }
  }
 while (true);
  return 1;
}
