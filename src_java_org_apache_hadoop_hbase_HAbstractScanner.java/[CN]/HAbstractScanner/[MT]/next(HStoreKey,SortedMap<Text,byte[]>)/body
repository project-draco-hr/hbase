{
  if (scannerClosed) {
    return false;
  }
  Text chosenRow=null;
  long chosenTimestamp=-1;
  for (int i=0; i < keys.length; i++) {
    if ((keys[i] != null) && (columnMatch(i)) && (keys[i].getTimestamp() <= this.timestamp)&& ((chosenRow == null) || (keys[i].getRow().compareTo(chosenRow) < 0) || ((keys[i].getRow().compareTo(chosenRow) == 0) && (keys[i].getTimestamp() > chosenTimestamp)))) {
      chosenRow=new Text(keys[i].getRow());
      chosenTimestamp=keys[i].getTimestamp();
    }
  }
  boolean insertedItem=false;
  if (chosenRow != null) {
    key.setRow(chosenRow);
    key.setVersion(chosenTimestamp);
    key.setColumn(new Text(""));
    for (int i=0; i < keys.length; i++) {
      while ((keys[i] != null) && (keys[i].getRow().compareTo(chosenRow) == 0)) {
        if (!wildcardMatch && !multipleMatchers && (keys[i].getTimestamp() != chosenTimestamp)) {
          break;
        }
        if (columnMatch(i)) {
          if (!results.containsKey(keys[i].getColumn())) {
            results.put(new Text(keys[i].getColumn()),vals[i]);
            insertedItem=true;
          }
        }
        if (!getNext(i)) {
          closeSubScanner(i);
        }
      }
      while ((keys[i] != null) && ((keys[i].getRow().compareTo(chosenRow) <= 0) || (keys[i].getTimestamp() > this.timestamp) || (!columnMatch(i)))) {
        getNext(i);
      }
    }
  }
  return insertedItem;
}
