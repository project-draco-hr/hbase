{
  Text chosenRow=null;
  long chosenTimestamp=-1;
  for (int i=0; i < keys.length; i++) {
    while ((keys[i] != null) && (columnMatch(i)) && (keys[i].getTimestamp() <= this.timestamp)&& ((chosenRow == null) || (keys[i].getRow().compareTo(chosenRow) < 0) || ((keys[i].getRow().compareTo(chosenRow) == 0) && (keys[i].getTimestamp() > chosenTimestamp)))) {
      chosenRow=new Text(keys[i].getRow());
      chosenTimestamp=keys[i].getTimestamp();
    }
  }
  boolean insertedItem=false;
  if (chosenRow != null) {
    key.setRow(chosenRow);
    key.setVersion(chosenTimestamp);
    key.setColumn(new Text(""));
    for (int i=0; i < keys.length; i++) {
      while ((keys[i] != null) && (keys[i].getRow().compareTo(chosenRow) == 0) && (keys[i].getTimestamp() == chosenTimestamp)) {
        if (columnMatch(i)) {
          outbuf.reset();
          vals[i].write(outbuf);
          byte byteresults[]=outbuf.getData();
          inbuf.reset(byteresults,outbuf.getLength());
          BytesWritable tmpval=new BytesWritable();
          tmpval.readFields(inbuf);
          results.put(new Text(keys[i].getColumn()),tmpval.get());
          insertedItem=true;
        }
        if (!getNext(i)) {
          closeSubScanner(i);
        }
      }
      while ((keys[i] != null) && ((keys[i].getRow().compareTo(chosenRow) <= 0) || (keys[i].getTimestamp() > this.timestamp) || (!columnMatch(i)))) {
        getNext(i);
      }
    }
  }
  return insertedItem;
}
