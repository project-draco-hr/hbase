{
  Mutate.Builder mutateBuilder=Mutate.newBuilder();
  mutateBuilder.setRow(ByteString.copyFromUtf8("row"));
  mutateBuilder.setMutateType(MutateType.APPEND);
  mutateBuilder.setTimestamp(111111);
  ColumnValue.Builder valueBuilder=ColumnValue.newBuilder();
  valueBuilder.setFamily(ByteString.copyFromUtf8("f1"));
  QualifierValue.Builder qualifierBuilder=QualifierValue.newBuilder();
  qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c1"));
  qualifierBuilder.setValue(ByteString.copyFromUtf8("v1"));
  valueBuilder.addQualifierValue(qualifierBuilder.build());
  qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c2"));
  qualifierBuilder.setValue(ByteString.copyFromUtf8("v2"));
  valueBuilder.addQualifierValue(qualifierBuilder.build());
  mutateBuilder.addColumnValue(valueBuilder.build());
  Mutate proto=mutateBuilder.build();
  assertEquals(true,proto.getWriteToWAL());
  mutateBuilder=Mutate.newBuilder(proto);
  mutateBuilder.setWriteToWAL(true);
  Append append=ProtobufUtil.toAppend(proto);
  long timestamp=append.getTimeStamp();
  mutateBuilder.setTimestamp(timestamp);
  for (  ColumnValue.Builder column : mutateBuilder.getColumnValueBuilderList()) {
    for (    QualifierValue.Builder qualifier : column.getQualifierValueBuilderList()) {
      qualifier.setTimestamp(timestamp);
    }
  }
  assertEquals(mutateBuilder.build(),ProtobufUtil.toMutate(MutateType.APPEND,append));
}
