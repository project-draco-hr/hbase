{
  conf.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY,BusyRegionSplitPolicy.class.getName());
  conf.setLong("hbase.busy.policy.minAge",1000000L);
  conf.setFloat("hbase.busy.policy.blockedRequests",0.1f);
  RegionServerServices rss=Mockito.mock(RegionServerServices.class);
  final List<Region> regions=new ArrayList<Region>();
  Mockito.when(rss.getOnlineRegions(TABLENAME)).thenReturn(regions);
  Mockito.when(mockRegion.getRegionServerServices()).thenReturn(rss);
  Mockito.when(mockRegion.getBlockedRequestsCount()).thenReturn(0L);
  Mockito.when(mockRegion.getWriteRequestsCount()).thenReturn(0L);
  BusyRegionSplitPolicy policy=(BusyRegionSplitPolicy)RegionSplitPolicy.create(mockRegion,conf);
  Mockito.when(mockRegion.getBlockedRequestsCount()).thenReturn(10L);
  Mockito.when(mockRegion.getWriteRequestsCount()).thenReturn(10L);
  assertFalse(policy.shouldSplit());
  conf.setLong("hbase.busy.policy.minAge",0L);
  conf.setLong("hbase.busy.policy.aggWindow",500L);
  policy=(BusyRegionSplitPolicy)RegionSplitPolicy.create(mockRegion,conf);
  long start=EnvironmentEdgeManager.currentTime();
  Mockito.when(mockRegion.getBlockedRequestsCount()).thenReturn(10L);
  Mockito.when(mockRegion.getWriteRequestsCount()).thenReturn(20L);
  Thread.sleep(300);
  assertFalse(policy.shouldSplit());
  Mockito.when(mockRegion.getBlockedRequestsCount()).thenReturn(12L);
  Mockito.when(mockRegion.getWriteRequestsCount()).thenReturn(30L);
  Thread.sleep(2);
  if (EnvironmentEdgeManager.currentTime() - start < 500) {
    assertFalse(policy.shouldSplit());
  }
  Mockito.when(mockRegion.getBlockedRequestsCount()).thenReturn(14L);
  Mockito.when(mockRegion.getWriteRequestsCount()).thenReturn(40L);
  Thread.sleep(200);
  assertTrue(policy.shouldSplit());
}
