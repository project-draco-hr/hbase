{
  isActiveMaster=true;
  status.setStatus("Initializing Master file system");
  this.fileSystemManager=new MasterFileSystem(this,this,metrics);
  this.tableDescriptors=new FSTableDescriptors(this.fileSystemManager.getFileSystem(),this.fileSystemManager.getRootDir());
  status.setStatus("Publishing Cluster ID in ZooKeeper");
  ClusterId.setClusterId(this.zooKeeper,fileSystemManager.getClusterId());
  this.executorService=new ExecutorService(getServerName().toString());
  this.serverManager=new ServerManager(this,this);
  status.setStatus("Initializing ZK system trackers");
  initializeZKBasedSystemTrackers();
  status.setStatus("Initializing master coprocessors");
  this.cpHost=new MasterCoprocessorHost(this,this.conf);
  status.setStatus("Initializing master service threads");
  startServiceThreads();
  this.serverManager.waitForRegionServers(status);
  for (  ServerName sn : this.regionServerTracker.getOnlineServers()) {
    if (!this.serverManager.isServerOnline(sn)) {
      LOG.info("Registering server found up in zk: " + sn);
      this.serverManager.recordNewServer(sn,HServerLoad.EMPTY_HSERVERLOAD);
    }
  }
  status.setStatus("Splitting logs after master startup");
  this.fileSystemManager.splitLogAfterStartup(this.serverManager.getOnlineServers().keySet());
  assignRootAndMeta(status);
  org.apache.hadoop.hbase.catalog.MetaMigrationRemovingHTD.updateMetaWithNewHRI(this);
  status.setStatus("Starting assignment manager");
  this.assignmentManager.joinCluster();
  this.balancer.setClusterStatus(getClusterStatus());
  this.balancer.setMasterServices(this);
  status.setStatus("Starting balancer and catalog janitor");
  this.balancerChore=getAndStartBalancerChore(this);
  this.catalogJanitorChore=Threads.setDaemonThreadRunning(new CatalogJanitor(this,this));
  status.markComplete("Initialization successful");
  LOG.info("Master has completed initialization");
  initialized=true;
  if (this.cpHost != null) {
    try {
      this.cpHost.postStartMaster();
    }
 catch (    IOException ioe) {
      LOG.error("Coprocessor postStartMaster() hook failed",ioe);
    }
  }
}
