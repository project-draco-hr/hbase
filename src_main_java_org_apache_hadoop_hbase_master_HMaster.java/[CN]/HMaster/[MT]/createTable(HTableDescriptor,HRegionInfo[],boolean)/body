{
  String tableName=newRegions[0].getTableNameAsString();
  if (MetaReader.tableExists(catalogTracker,tableName)) {
    throw new TableExistsException(tableName);
  }
  FSUtils.createTableDescriptor(hTableDescriptor,conf);
  try {
    assignmentManager.getZKTable().setEnabledTable(tableName);
  }
 catch (  KeeperException e) {
    throw new IOException("Unable to ensure that the table will be" + " enabled because of a ZooKeeper issue",e);
  }
  List<HRegionInfo> regionInfos=new ArrayList<HRegionInfo>();
  final int batchSize=this.conf.getInt("hbase.master.createtable.batchsize",100);
  HLog hlog=null;
  for (int regionIdx=0; regionIdx < newRegions.length; regionIdx++) {
    HRegionInfo newRegion=newRegions[regionIdx];
    HRegion region=HRegion.createHRegion(newRegion,fileSystemManager.getRootDir(),conf,hTableDescriptor,hlog);
    if (hlog == null) {
      hlog=region.getLog();
    }
    regionInfos.add(region.getRegionInfo());
    if (regionIdx % batchSize == 0) {
      MetaEditor.addRegionsToMeta(catalogTracker,regionInfos);
      regionInfos.clear();
    }
    region.close();
  }
  hlog.closeAndDelete();
  if (regionInfos.size() > 0) {
    MetaEditor.addRegionsToMeta(catalogTracker,regionInfos);
  }
  List<ServerName> servers=serverManager.getOnlineServersList();
  try {
    this.assignmentManager.assignUserRegions(Arrays.asList(newRegions),servers);
  }
 catch (  InterruptedException ie) {
    LOG.error("Caught " + ie + " during round-robin assignment");
    throw new IOException(ie);
  }
  if (sync) {
    LOG.debug("Waiting for " + newRegions.length + " region(s) to be assigned");
    for (    HRegionInfo regionInfo : newRegions) {
      try {
        this.assignmentManager.waitForAssignment(regionInfo);
      }
 catch (      InterruptedException e) {
        LOG.info("Interrupted waiting for region to be assigned during " + "create table call",e);
        Thread.currentThread().interrupt();
        return;
      }
    }
  }
  if (cpHost != null) {
    cpHost.postCreateTable(newRegions,sync);
  }
}
