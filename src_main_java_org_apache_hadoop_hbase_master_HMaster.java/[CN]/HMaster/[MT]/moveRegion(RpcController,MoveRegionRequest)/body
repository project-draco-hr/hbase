{
  final byte[] encodedRegionName=req.getRegion().getValue().toByteArray();
  RegionSpecifierType type=req.getRegion().getType();
  final byte[] destServerName=(req.hasDestServerName()) ? Bytes.toBytes(ProtobufUtil.toServerName(req.getDestServerName()).getServerName()) : null;
  MoveRegionResponse mrr=MoveRegionResponse.newBuilder().build();
  if (type != RegionSpecifierType.ENCODED_REGION_NAME) {
    LOG.warn("moveRegion specifier type: expected: " + RegionSpecifierType.ENCODED_REGION_NAME + " actual: "+ RegionSpecifierType.REGION_NAME);
  }
  Pair<HRegionInfo,ServerName> p=this.assignmentManager.getAssignment(encodedRegionName);
  if (p == null) {
    throw new ServiceException(new UnknownRegionException(Bytes.toStringBinary(encodedRegionName)));
  }
  HRegionInfo hri=p.getFirst();
  ServerName dest;
  if (destServerName == null || destServerName.length == 0) {
    LOG.info("Passed destination servername is null/empty so " + "choosing a server at random");
    final List<ServerName> destServers=this.serverManager.createDestinationServersList(p.getSecond());
    dest=balancer.randomAssignment(hri,destServers);
  }
 else {
    dest=new ServerName(Bytes.toString(destServerName));
    if (dest.equals(p.getSecond())) {
      LOG.debug("Skipping move of region " + hri.getRegionNameAsString() + " because region already assigned to the same server "+ dest+ ".");
      return mrr;
    }
  }
  RegionPlan rp=new RegionPlan(p.getFirst(),p.getSecond(),dest);
  try {
    if (this.cpHost != null) {
      if (this.cpHost.preMove(hri,rp.getSource(),rp.getDestination())) {
        return mrr;
      }
    }
    LOG.info("Added move plan " + rp + ", running balancer");
    this.assignmentManager.balance(rp);
    if (this.cpHost != null) {
      this.cpHost.postMove(hri,rp.getSource(),rp.getDestination());
    }
  }
 catch (  IOException ioe) {
    UnknownRegionException ure=new UnknownRegionException(Bytes.toStringBinary(encodedRegionName));
    ure.initCause(ioe);
    throw new ServiceException(ure);
  }
  return mrr;
}
