{
  if (!this.balanceSwitch)   return false;
  int maximumBalanceTime=getBalancerCutoffTime();
  long cutoffTime=System.currentTimeMillis() + maximumBalanceTime;
  boolean balancerRan=false;
synchronized (this.balancer) {
    if (loadBalancerRunning) {
      LOG.debug("Load balancer is currently running. Skipping the current execution.");
      return false;
    }
    if (this.assignmentManager.isRegionsInTransition()) {
      LOG.debug("Not running balancer because " + this.assignmentManager.getRegionsInTransition().size() + " region(s) in transition: "+ org.apache.commons.lang.StringUtils.abbreviate(this.assignmentManager.getRegionsInTransition().toString(),256));
      return false;
    }
    if (this.serverManager.areDeadServersInProgress()) {
      LOG.debug("Not running balancer because processing dead regionserver(s): " + this.serverManager.getDeadServers());
      return false;
    }
    if (schemaChangeTracker.isSchemaChangeInProgress()) {
      LOG.debug("Schema change operation is in progress. Waiting for " + "it to complete before running the load balancer.");
      return false;
    }
    loadBalancerRunning=true;
    if (this.cpHost != null) {
      try {
        if (this.cpHost.preBalance()) {
          LOG.debug("Coprocessor bypassing balancer request");
          return false;
        }
      }
 catch (      IOException ioe) {
        LOG.error("Error invoking master coprocessor preBalance()",ioe);
        return false;
      }
    }
    Map<String,Map<ServerName,List<HRegionInfo>>> assignmentsByTable=this.assignmentManager.getAssignmentsByTable();
    List<RegionPlan> plans=new ArrayList<RegionPlan>();
    for (    Map<ServerName,List<HRegionInfo>> assignments : assignmentsByTable.values()) {
      List<RegionPlan> partialPlans=this.balancer.balanceCluster(assignments);
      if (partialPlans != null)       plans.addAll(partialPlans);
    }
    int rpCount=0;
    long totalRegPlanExecTime=0;
    balancerRan=plans != null;
    if (plans != null && !plans.isEmpty()) {
      for (      RegionPlan plan : plans) {
        LOG.info("balance " + plan);
        long balStartTime=System.currentTimeMillis();
        this.assignmentManager.balance(plan);
        totalRegPlanExecTime+=System.currentTimeMillis() - balStartTime;
        rpCount++;
        if (rpCount < plans.size() && (System.currentTimeMillis() + (totalRegPlanExecTime / rpCount)) > cutoffTime) {
          LOG.debug("No more balancing till next balance run; maximumBalanceTime=" + maximumBalanceTime);
          break;
        }
      }
    }
    if (this.cpHost != null) {
      try {
        this.cpHost.postBalance();
      }
 catch (      IOException ioe) {
        LOG.error("Error invoking master coprocessor postBalance()",ioe);
      }
    }
    loadBalancerRunning=false;
  }
  return balancerRan;
}
