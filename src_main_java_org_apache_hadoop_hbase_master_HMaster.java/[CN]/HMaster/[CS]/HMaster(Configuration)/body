{
  this.conf=conf;
  String hostname=DNS.getDefaultHost(conf.get("hbase.master.dns.interface","default"),conf.get("hbase.master.dns.nameserver","default"));
  int port=conf.getInt(HConstants.MASTER_PORT,HConstants.DEFAULT_MASTER_PORT);
  InetSocketAddress initialIsa=new InetSocketAddress(hostname,port);
  if (initialIsa.getAddress() == null) {
    throw new IllegalArgumentException("Failed resolve of " + this.isa);
  }
  int numHandlers=conf.getInt("hbase.master.handler.count",conf.getInt("hbase.regionserver.handler.count",25));
  this.rpcServer=HBaseRPC.getServer(this,new Class<?>[]{HMasterInterface.class,HMasterRegionInterface.class},initialIsa.getHostName(),initialIsa.getPort(),numHandlers,0,conf.getBoolean("hbase.rpc.verbose",false),conf,0);
  this.isa=this.rpcServer.getListenerAddress();
  this.serverName=new ServerName(this.isa.getHostName(),this.isa.getPort(),System.currentTimeMillis());
  User.login(conf,"hbase.master.keytab.file","hbase.master.kerberos.principal",this.isa.getHostName());
  setName(MASTER + "-" + this.serverName.toString());
  Replication.decorateMasterConfiguration(this.conf);
  this.rpcServer.startThreads();
  if (this.conf.get("mapred.task.id") == null) {
    this.conf.set("mapred.task.id","hb_m_" + this.serverName.toString());
  }
  this.zooKeeper=new ZooKeeperWatcher(conf,MASTER + ":" + isa.getPort(),this,true);
  this.metrics=new MasterMetrics(getServerName().toString());
}
