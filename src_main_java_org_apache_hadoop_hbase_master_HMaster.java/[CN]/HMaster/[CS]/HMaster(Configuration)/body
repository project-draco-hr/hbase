{
  this.conf=conf;
  HServerAddress a=new HServerAddress(getMyAddress(this.conf));
  int numHandlers=conf.getInt("hbase.regionserver.handler.count",10);
  this.rpcServer=HBaseRPC.getServer(this,new Class<?>[]{HMasterInterface.class,HMasterRegionInterface.class},a.getBindAddress(),a.getPort(),numHandlers,0,false,conf,0);
  this.address=new HServerAddress(rpcServer.getListenerAddress());
  setName(MASTER + "-" + this.address);
  if (this.conf.get("mapred.task.id") == null) {
    this.conf.set("mapred.task.id","hb_m_" + this.address.toString() + "_"+ System.currentTimeMillis());
  }
  this.zooKeeper=new ZooKeeperWatcher(conf,MASTER,this);
  int count=ZKUtil.getNumberOfChildren(zooKeeper,zooKeeper.rsZNode);
  this.activeMasterManager=new ActiveMasterManager(zooKeeper,address,this);
  this.zooKeeper.registerListener(activeMasterManager);
  stallIfBackupMaster(this.conf,this.activeMasterManager);
  activeMasterManager.blockUntilBecomingActiveMaster();
  this.fileSystemManager=new MasterFileSystem(this);
  this.connection=HConnectionManager.getConnection(conf);
  this.executorService=new ExecutorService(getServerName());
  this.serverManager=new ServerManager(this,this);
  this.catalogTracker=new CatalogTracker(this.zooKeeper,this.connection,this,conf.getInt("hbase.master.catalog.timeout",Integer.MAX_VALUE));
  this.catalogTracker.start();
  this.assignmentManager=new AssignmentManager(this,serverManager,this.catalogTracker,this.executorService);
  zooKeeper.registerListener(assignmentManager);
  this.regionServerTracker=new RegionServerTracker(zooKeeper,this,this.serverManager);
  this.regionServerTracker.start();
  this.clusterStatusTracker=new ClusterStatusTracker(getZooKeeper(),this);
  boolean wasUp=this.clusterStatusTracker.isClusterUp();
  if (!wasUp)   this.clusterStatusTracker.setClusterUp();
  this.clusterStatusTracker.start();
  LOG.info("Server active/primary master; " + this.address + ", sessionid=0x"+ Long.toHexString(this.zooKeeper.getZooKeeper().getSessionId())+ ", ephemeral nodes still up in zk="+ count+ ", cluster-up flag was="+ wasUp);
}
