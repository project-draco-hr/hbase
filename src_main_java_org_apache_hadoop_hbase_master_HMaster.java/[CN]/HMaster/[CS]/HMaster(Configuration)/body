{
  this.conf=conf;
  HServerAddress a=new HServerAddress(getMyAddress(this.conf));
  int numHandlers=conf.getInt("hbase.regionserver.handler.count",10);
  this.rpcServer=HBaseRPC.getServer(this,new Class<?>[]{HMasterInterface.class,HMasterRegionInterface.class},a.getBindAddress(),a.getPort(),numHandlers,0,false,conf,0);
  this.address=new HServerAddress(rpcServer.getListenerAddress());
  setName(MASTER + "-" + this.address);
  if (this.conf.get("mapred.task.id") == null) {
    this.conf.set("mapred.task.id","hb_m_" + this.address.toString() + "_"+ System.currentTimeMillis());
  }
  this.zooKeeper=new ZooKeeperWatcher(conf,MASTER + "-" + getMasterAddress(),this);
  this.clusterStarter=0 == ZKUtil.getNumberOfChildren(zooKeeper,zooKeeper.rsZNode);
  this.activeMasterManager=new ActiveMasterManager(zooKeeper,address,this);
  this.zooKeeper.registerListener(activeMasterManager);
  if (conf.getBoolean(HConstants.MASTER_TYPE_BACKUP,HConstants.DEFAULT_MASTER_TYPE_BACKUP)) {
    while (!this.activeMasterManager.isActiveMaster()) {
      try {
        LOG.debug("Waiting for master address ZNode to be written " + "(Also watching cluster state node)");
        Thread.sleep(conf.getInt("zookeeper.session.timeout",60 * 1000));
      }
 catch (      InterruptedException e) {
        throw new IOException("Interrupted waiting for master address");
      }
    }
  }
  clusterStarter=activeMasterManager.blockUntilBecomingActiveMaster();
  this.fileSystemManager=new MasterFileSystem(this);
  this.connection=HConnectionManager.getConnection(conf);
  this.executorService=new ExecutorService(getServerName());
  this.serverManager=new ServerManager(this,this);
  this.catalogTracker=new CatalogTracker(this.zooKeeper,this.connection,this,conf.getInt("hbase.master.catalog.timeout",Integer.MAX_VALUE));
  this.catalogTracker.start();
  this.assignmentManager=new AssignmentManager(this,serverManager,this.catalogTracker,this.executorService);
  zooKeeper.registerListener(assignmentManager);
  this.regionServerTracker=new RegionServerTracker(zooKeeper,this,this.serverManager);
  regionServerTracker.start();
  this.clusterStatusTracker=new ClusterStatusTracker(getZooKeeper(),this);
  this.clusterStatusTracker.setClusterUp();
  this.clusterStatusTracker.start();
  LOG.info("Server active/primary master; " + this.address + "; clusterStarter="+ this.clusterStarter+ ", sessionid=0x"+ Long.toHexString(this.zooKeeper.getZooKeeper().getSessionId()));
}
