{
  if (asyncProcess.connection.getStatisticsTracker() == null) {
    if (asyncProcess.connection.getConnectionMetrics() != null) {
      asyncProcess.connection.getConnectionMetrics().incrNormalRunners();
    }
    asyncProcess.incTaskCounters(multiAction.getRegions(),server);
    SingleServerRequestRunnable runnable=addSingleServerRequestHeapSize(server,new SingleServerRequestRunnable(multiAction,numAttempt,server,callsInProgress));
    return Collections.singletonList(Trace.wrap("AsyncProcess.sendMultiAction",runnable));
  }
  Map<Long,DelayingRunner> actions=new HashMap<Long,DelayingRunner>(multiAction.size());
  for (  Map.Entry<byte[],List<Action<Row>>> e : multiAction.actions.entrySet()) {
    Long backoff=getBackoff(server,e.getKey());
    DelayingRunner runner=actions.get(backoff);
    if (runner == null) {
      actions.put(backoff,new DelayingRunner(backoff,e));
    }
 else {
      runner.add(e);
    }
  }
  List<Runnable> toReturn=new ArrayList<Runnable>(actions.size());
  for (  DelayingRunner runner : actions.values()) {
    asyncProcess.incTaskCounters(runner.getActions().getRegions(),server);
    String traceText="AsyncProcess.sendMultiAction";
    Runnable runnable=addSingleServerRequestHeapSize(server,new SingleServerRequestRunnable(runner.getActions(),numAttempt,server,callsInProgress));
    if (runner.getSleepTime() > 0) {
      runner.setRunner(runnable);
      traceText="AsyncProcess.clientBackoff.sendMultiAction";
      runnable=runner;
      if (asyncProcess.connection.getConnectionMetrics() != null) {
        asyncProcess.connection.getConnectionMetrics().incrDelayRunners();
        asyncProcess.connection.getConnectionMetrics().updateDelayInterval(runner.getSleepTime());
      }
    }
 else {
      if (asyncProcess.connection.getConnectionMetrics() != null) {
        asyncProcess.connection.getConnectionMetrics().incrNormalRunners();
      }
    }
    runnable=Trace.wrap(traceText,runnable);
    toReturn.add(runnable);
  }
  return toReturn;
}
