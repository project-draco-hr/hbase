{
  ExpressionNode node=null;
  try {
    node=parser.parse(visibilityLabelsExp);
  }
 catch (  ParseException e) {
    throw new BadTsvLineException(e.getMessage());
  }
  node=expander.expand(node);
  List<Tag> tags=new ArrayList<Tag>();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  if (node.isSingleNode()) {
    writeLabelOrdinalsToStream(node,dos);
    tags.add(new Tag(VisibilityUtils.VISIBILITY_TAG_TYPE,baos.toByteArray()));
    baos.reset();
  }
 else {
    NonLeafExpressionNode nlNode=(NonLeafExpressionNode)node;
    if (nlNode.getOperator() == Operator.OR) {
      for (      ExpressionNode child : nlNode.getChildExps()) {
        writeLabelOrdinalsToStream(child,dos);
        tags.add(new Tag(VisibilityUtils.VISIBILITY_TAG_TYPE,baos.toByteArray()));
        baos.reset();
      }
    }
 else {
      writeLabelOrdinalsToStream(nlNode,dos);
      tags.add(new Tag(VisibilityUtils.VISIBILITY_TAG_TYPE,baos.toByteArray()));
      baos.reset();
    }
  }
  return tags;
}
