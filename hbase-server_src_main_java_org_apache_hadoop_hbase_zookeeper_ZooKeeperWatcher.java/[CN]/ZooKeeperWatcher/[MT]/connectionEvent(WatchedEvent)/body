{
switch (event.getState()) {
case SyncConnected:
    long finished=System.currentTimeMillis() + this.conf.getLong("hbase.zookeeper.watcher.sync.connected.wait",2000);
  while (System.currentTimeMillis() < finished) {
    Threads.sleep(1);
    if (this.recoverableZooKeeper != null)     break;
  }
if (this.recoverableZooKeeper == null) {
  LOG.error("ZK is null on connection event -- see stack trace " + "for the stack trace when constructor was called on this zkw",this.constructorCaller);
  throw new NullPointerException("ZK is null");
}
this.identifier=this.identifier + "-0x" + Long.toHexString(this.recoverableZooKeeper.getSessionId());
LOG.debug(this.identifier + " connected");
break;
case SaslAuthenticated:
if (ZKUtil.isSecureZooKeeper(this.conf)) {
saslLatch.countDown();
}
break;
case AuthFailed:
if (ZKUtil.isSecureZooKeeper(this.conf)) {
saslLatch.countDown();
}
break;
case Disconnected:
LOG.debug(prefix("Received Disconnected from ZooKeeper, ignoring"));
break;
case Expired:
if (ZKUtil.isSecureZooKeeper(this.conf)) {
saslLatch.countDown();
}
String msg=prefix(this.identifier + " received expired from " + "ZooKeeper, aborting");
if (this.abortable != null) this.abortable.abort(msg,new KeeperException.SessionExpiredException());
break;
case ConnectedReadOnly:
break;
default :
throw new IllegalStateException("Received event is not valid.");
}
}
