{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
    _Fields fieldId=_Fields.findByThriftId(field.id);
    if (fieldId == null) {
      TProtocolUtil.skip(iprot,field.type);
    }
 else {
switch (fieldId) {
case TABLE_NAME:
        if (field.type == TType.STRING) {
          this.tableName=iprot.readBinary();
        }
 else {
          TProtocolUtil.skip(iprot,field.type);
        }
      break;
case ROW:
    if (field.type == TType.STRING) {
      this.row=iprot.readBinary();
    }
 else {
      TProtocolUtil.skip(iprot,field.type);
    }
  break;
case MUTATIONS:
if (field.type == TType.LIST) {
{
    TList _list66=iprot.readListBegin();
    this.mutations=new ArrayList<Mutation>(_list66.size);
    for (int _i67=0; _i67 < _list66.size; ++_i67) {
      Mutation _elem68;
      _elem68=new Mutation();
      _elem68.read(iprot);
      this.mutations.add(_elem68);
    }
    iprot.readListEnd();
  }
}
 else {
  TProtocolUtil.skip(iprot,field.type);
}
break;
case TIMESTAMP:
if (field.type == TType.I64) {
this.timestamp=iprot.readI64();
setTimestampIsSet(true);
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
}
iprot.readFieldEnd();
}
}
iprot.readStructEnd();
validate();
}
