{
  ConnectionImplementation c=Mockito.mock(ConnectionImplementation.class);
  Mockito.when(c.getConfiguration()).thenReturn(conf);
  Mockito.doNothing().when(c).close();
  final HRegionLocation loc=new HRegionLocation(hri,sn);
  Mockito.when(c.getRegionLocation((TableName)Mockito.any(),(byte[])Mockito.any(),Mockito.anyBoolean())).thenReturn(loc);
  Mockito.when(c.locateRegion((TableName)Mockito.any(),(byte[])Mockito.any())).thenReturn(loc);
  Mockito.when(c.locateRegion((TableName)Mockito.any(),(byte[])Mockito.any(),Mockito.anyBoolean(),Mockito.anyBoolean(),Mockito.anyInt())).thenReturn(new RegionLocations(loc));
  if (admin != null) {
    Mockito.when(c.getAdmin(Mockito.any(ServerName.class))).thenReturn(admin);
  }
  if (client != null) {
    Mockito.when(c.getClient(Mockito.any(ServerName.class))).thenReturn(client);
  }
  NonceGenerator ng=Mockito.mock(NonceGenerator.class);
  Mockito.when(c.getNonceGenerator()).thenReturn(ng);
  Mockito.when(c.getAsyncProcess()).thenReturn(new AsyncProcess(c,conf,null,RpcRetryingCallerFactory.instantiate(conf),false,RpcControllerFactory.instantiate(conf)));
  Mockito.when(c.getNewRpcRetryingCallerFactory(conf)).thenReturn(RpcRetryingCallerFactory.instantiate(conf,RetryingCallerInterceptorFactory.NO_OP_INTERCEPTOR,null));
  HTableInterface t=Mockito.mock(HTableInterface.class);
  Mockito.when(c.getTable((TableName)Mockito.any())).thenReturn(t);
  ResultScanner rs=Mockito.mock(ResultScanner.class);
  Mockito.when(t.getScanner((Scan)Mockito.any())).thenReturn(rs);
  return c;
}
