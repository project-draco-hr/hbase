{
  final byte[] FAMILY=Bytes.toBytes("f1");
  final byte[] QUALIFIER=Bytes.toBytes("q1");
  final byte[] VALUE=Bytes.toBytes("v");
  int kvCount=1000000;
  List<KeyValue> kvs=new ArrayList<KeyValue>(kvCount);
  int totalSize=0;
  Tag[] tags=new Tag[]{new ArrayBackedTag((byte)1,"tag1")};
  for (int i=0; i < kvCount; i++) {
    KeyValue kv=new KeyValue(Bytes.toBytes(i),FAMILY,QUALIFIER,i,VALUE,tags);
    kv.setSequenceId(i);
    kvs.add(kv);
    totalSize+=kv.getLength() + Bytes.SIZEOF_LONG;
  }
  PositionedByteRange pbr=new SimplePositionedMutableByteRange(totalSize);
  for (  KeyValue kv : kvs) {
    writeCell(pbr,kv);
  }
  PositionedByteRange pbr1=new SimplePositionedMutableByteRange(pbr.getBytes(),0,pbr.getPosition());
  for (int i=0; i < kvCount; i++) {
    KeyValue kv=readCell(pbr1);
    KeyValue kv1=kvs.get(i);
    Assert.assertTrue(kv.equals(kv1));
    Assert.assertTrue(Bytes.equals(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength(),kv1.getValueArray(),kv1.getValueOffset(),kv1.getValueLength()));
    Assert.assertTrue(Bytes.equals(kv.getTagsArray(),kv.getTagsOffset(),kv.getTagsLength(),kv1.getTagsArray(),kv1.getTagsOffset(),kv1.getTagsLength()));
    Assert.assertEquals(kv1.getSequenceId(),kv.getSequenceId());
  }
}
