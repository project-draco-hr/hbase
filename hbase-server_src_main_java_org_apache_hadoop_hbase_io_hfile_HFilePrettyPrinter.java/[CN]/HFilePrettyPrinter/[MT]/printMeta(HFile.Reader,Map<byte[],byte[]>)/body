{
  System.out.println("Block index size as per heapsize: " + reader.indexSize());
  System.out.println(asSeparateLines(reader.toString()));
  System.out.println("Trailer:\n    " + asSeparateLines(reader.getTrailer().toString()));
  System.out.println("Fileinfo:");
  for (  Map.Entry<byte[],byte[]> e : fileInfo.entrySet()) {
    System.out.print(FOUR_SPACES + Bytes.toString(e.getKey()) + " = ");
    if (Bytes.compareTo(e.getKey(),Bytes.toBytes("MAX_SEQ_ID_KEY")) == 0) {
      long seqid=Bytes.toLong(e.getValue());
      System.out.println(seqid);
    }
 else     if (Bytes.compareTo(e.getKey(),Bytes.toBytes("TIMERANGE")) == 0) {
      TimeRangeTracker timeRangeTracker=new TimeRangeTracker();
      Writables.copyWritable(e.getValue(),timeRangeTracker);
      System.out.println(timeRangeTracker.getMinimumTimestamp() + "...." + timeRangeTracker.getMaximumTimestamp());
    }
 else     if (Bytes.compareTo(e.getKey(),FileInfo.AVG_KEY_LEN) == 0 || Bytes.compareTo(e.getKey(),FileInfo.AVG_VALUE_LEN) == 0) {
      System.out.println(Bytes.toInt(e.getValue()));
    }
 else {
      System.out.println(Bytes.toStringBinary(e.getValue()));
    }
  }
  try {
    System.out.println("Mid-key: " + Bytes.toStringBinary(reader.midkey()));
  }
 catch (  Exception e) {
    System.out.println("Unable to retrieve the midkey");
  }
  DataInput bloomMeta=reader.getGeneralBloomFilterMetadata();
  BloomFilter bloomFilter=null;
  if (bloomMeta != null)   bloomFilter=BloomFilterFactory.createFromMeta(bloomMeta,reader);
  System.out.println("Bloom filter:");
  if (bloomFilter != null) {
    System.out.println(FOUR_SPACES + bloomFilter.toString().replaceAll(BloomFilterUtil.STATS_RECORD_SEP,"\n" + FOUR_SPACES));
  }
 else {
    System.out.println(FOUR_SPACES + "Not present");
  }
  bloomMeta=reader.getDeleteBloomFilterMetadata();
  bloomFilter=null;
  if (bloomMeta != null)   bloomFilter=BloomFilterFactory.createFromMeta(bloomMeta,reader);
  System.out.println("Delete Family Bloom filter:");
  if (bloomFilter != null) {
    System.out.println(FOUR_SPACES + bloomFilter.toString().replaceAll(BloomFilterUtil.STATS_RECORD_SEP,"\n" + FOUR_SPACES));
  }
 else {
    System.out.println(FOUR_SPACES + "Not present");
  }
}
