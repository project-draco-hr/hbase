{
  if (args.length == 0) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp("HFile",options,true);
    return false;
  }
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=parser.parse(options,args);
  verbose=cmd.hasOption("v");
  printValue=cmd.hasOption("p");
  printKey=cmd.hasOption("e") || printValue;
  shouldPrintMeta=cmd.hasOption("m");
  printBlocks=cmd.hasOption("b");
  printStats=cmd.hasOption("s");
  checkRow=cmd.hasOption("k");
  checkFamily=cmd.hasOption("a");
  if (cmd.hasOption("f")) {
    files.add(new Path(cmd.getOptionValue("f")));
  }
  if (cmd.hasOption("w")) {
    String key=cmd.getOptionValue("w");
    if (key != null && key.length() != 0) {
      row=key.getBytes();
      isSeekToRow=true;
    }
 else {
      System.err.println("Invalid row is specified.");
      System.exit(-1);
    }
  }
  if (cmd.hasOption("r")) {
    String regionName=cmd.getOptionValue("r");
    byte[] rn=Bytes.toBytes(regionName);
    byte[][] hri=HRegionInfo.parseRegionName(rn);
    Path rootDir=FSUtils.getRootDir(getConf());
    Path tableDir=FSUtils.getTableDir(rootDir,TableName.valueOf(hri[0]));
    String enc=HRegionInfo.encodeRegionName(rn);
    Path regionDir=new Path(tableDir,enc);
    if (verbose)     System.out.println("region dir -> " + regionDir);
    List<Path> regionFiles=HFile.getStoreFiles(FileSystem.get(getConf()),regionDir);
    if (verbose)     System.out.println("Number of region files found -> " + regionFiles.size());
    if (verbose) {
      int i=1;
      for (      Path p : regionFiles) {
        if (verbose)         System.out.println("Found file[" + i++ + "] -> "+ p);
      }
    }
    files.addAll(regionFiles);
  }
  return true;
}
