{
  Cell pCell=null;
  FileSystem fs=FileSystem.get(getConf());
  Set<String> foundMobFiles=new LinkedHashSet<String>(FOUND_MOB_FILES_CACHE_CAPACITY);
  Set<String> missingMobFiles=new LinkedHashSet<String>(MISSING_MOB_FILES_CACHE_CAPACITY);
  do {
    Cell cell=scanner.getCell();
    if (row != null && row.length != 0) {
      int result=CellComparator.COMPARATOR.compareRows(cell,row,0,row.length);
      if (result > 0) {
        break;
      }
 else       if (result < 0) {
        continue;
      }
    }
    if (printStats) {
      fileStats.collect(cell);
    }
    if (printKey) {
      System.out.print("K: " + cell);
      if (printValue) {
        System.out.print(" V: " + Bytes.toStringBinary(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()));
        int i=0;
        List<Tag> tags=Tag.asList(cell.getTagsArray(),cell.getTagsOffset(),cell.getTagsLength());
        for (        Tag tag : tags) {
          System.out.print(String.format(" T[%d]: %s",i++,Bytes.toStringBinary(tag.getBuffer(),tag.getTagOffset(),tag.getTagLength())));
        }
      }
      System.out.println();
    }
    if (checkRow && pCell != null) {
      if (CellComparator.COMPARATOR.compareRows(pCell,cell) > 0) {
        System.err.println("WARNING, previous row is greater then" + " current row\n\tfilename -> " + file + "\n\tprevious -> "+ CellUtil.getCellKeyAsString(pCell)+ "\n\tcurrent  -> "+ CellUtil.getCellKeyAsString(cell));
      }
    }
    if (checkFamily) {
      String fam=Bytes.toString(cell.getFamilyArray(),cell.getFamilyOffset(),cell.getFamilyLength());
      if (!file.toString().contains(fam)) {
        System.err.println("WARNING, filename does not match kv family," + "\n\tfilename -> " + file + "\n\tkeyvalue -> "+ CellUtil.getCellKeyAsString(cell));
      }
      if (pCell != null && CellComparator.compareFamilies(pCell,cell) != 0) {
        System.err.println("WARNING, previous kv has different family" + " compared to current key\n\tfilename -> " + file + "\n\tprevious -> "+ CellUtil.getCellKeyAsString(pCell)+ "\n\tcurrent  -> "+ CellUtil.getCellKeyAsString(cell));
      }
    }
    if (checkMobIntegrity && MobUtils.isMobReferenceCell(cell)) {
      Tag tnTag=MobUtils.getTableNameTag(cell);
      if (tnTag == null) {
        System.err.println("ERROR, wrong tag format in mob reference cell " + CellUtil.getCellKeyAsString(cell));
      }
 else       if (!MobUtils.hasValidMobRefCellValue(cell)) {
        System.err.println("ERROR, wrong value format in mob reference cell " + CellUtil.getCellKeyAsString(cell));
      }
 else {
        TableName tn=TableName.valueOf(tnTag.getValue());
        String mobFileName=MobUtils.getMobFileName(cell);
        boolean exist=mobFileExists(fs,tn,mobFileName,Bytes.toString(CellUtil.cloneFamily(cell)),foundMobFiles,missingMobFiles);
        if (!exist) {
          System.err.println("ERROR, the mob file [" + mobFileName + "] is missing referenced by cell "+ CellUtil.getCellKeyAsString(cell));
        }
      }
    }
    pCell=cell;
    ++count;
  }
 while (scanner.next());
}
