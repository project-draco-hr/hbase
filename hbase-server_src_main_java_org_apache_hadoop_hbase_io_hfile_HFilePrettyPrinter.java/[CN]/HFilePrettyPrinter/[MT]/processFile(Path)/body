{
  if (verbose)   out.println("Scanning -> " + file);
  Path rootPath=FSUtils.getRootDir(getConf());
  String rootString=rootPath + rootPath.SEPARATOR;
  if (!file.toString().startsWith(rootString)) {
    FileSystem rootFS=rootPath.getFileSystem(getConf());
    String qualifiedFile=rootFS.getUri().toString() + file.toString();
    if (!qualifiedFile.startsWith(rootString)) {
      err.println("ERROR, file (" + file + ") is not in HBase's root directory ("+ rootString+ ")");
      return -2;
    }
  }
  FileSystem fs=file.getFileSystem(getConf());
  if (!fs.exists(file)) {
    err.println("ERROR, file doesnt exist: " + file);
    return -2;
  }
  HFile.Reader reader=HFile.createReader(fs,file,new CacheConfig(getConf()),getConf());
  Map<byte[],byte[]> fileInfo=reader.loadFileInfo();
  KeyValueStatsCollector fileStats=null;
  if (verbose || printKey || checkRow|| checkFamily|| printStats|| checkMobIntegrity) {
    HFileScanner scanner=reader.getScanner(false,false,false);
    fileStats=new KeyValueStatsCollector();
    boolean shouldScanKeysValues=false;
    if (this.isSeekToRow) {
      shouldScanKeysValues=(scanner.seekTo(KeyValueUtil.createFirstOnRow(this.row)) != -1);
    }
 else {
      shouldScanKeysValues=scanner.seekTo();
    }
    if (shouldScanKeysValues)     scanKeysValues(file,fileStats,scanner,row);
  }
  if (shouldPrintMeta) {
    printMeta(reader,fileInfo);
  }
  if (printBlockIndex) {
    out.println("Block Index:");
    out.println(reader.getDataBlockIndexReader());
  }
  if (printBlockHeaders) {
    out.println("Block Headers:");
    FSDataInputStreamWrapper fsdis=new FSDataInputStreamWrapper(fs,file);
    long fileSize=fs.getFileStatus(file).getLen();
    FixedFileTrailer trailer=FixedFileTrailer.readFromStream(fsdis.getStream(false),fileSize);
    long offset=trailer.getFirstDataBlockOffset(), max=trailer.getLastDataBlockOffset();
    HFileBlock block;
    while (offset <= max) {
      block=reader.readBlock(offset,-1,false,false,false,false,null,null);
      offset+=block.getOnDiskSizeWithHeader();
      out.println(block);
    }
  }
  if (printStats) {
    fileStats.finish();
    out.println("Stats:\n" + fileStats);
  }
  reader.close();
  return 0;
}
