{
  if (isTraceEnabled()) {
    LOG.trace(this + " execute state=" + state);
  }
  LOG.info(this + " execute state=" + state);
  try {
switch (state) {
case DELETE_NAMESPACE_PREPARE:
      prepareDelete(env);
    setNextState(DeleteNamespaceState.DELETE_NAMESPACE_DELETE_FROM_NS_TABLE);
  break;
case DELETE_NAMESPACE_DELETE_FROM_NS_TABLE:
deleteFromNSTable(env,namespaceName);
setNextState(DeleteNamespaceState.DELETE_NAMESPACE_REMOVE_FROM_ZK);
break;
case DELETE_NAMESPACE_REMOVE_FROM_ZK:
removeFromZKNamespaceManager(env,namespaceName);
setNextState(DeleteNamespaceState.DELETE_NAMESPACE_DELETE_DIRECTORIES);
break;
case DELETE_NAMESPACE_DELETE_DIRECTORIES:
deleteDirectory(env,namespaceName);
setNextState(DeleteNamespaceState.DELETE_NAMESPACE_REMOVE_NAMESPACE_QUOTA);
break;
case DELETE_NAMESPACE_REMOVE_NAMESPACE_QUOTA:
removeNamespaceQuota(env,namespaceName);
return Flow.NO_MORE_STATE;
default :
throw new UnsupportedOperationException(this + " unhandled state=" + state);
}
}
 catch (IOException e) {
if (isRollbackSupported(state)) {
setFailure("master-delete-namespace",e);
}
 else {
LOG.warn("Retriable error trying to delete namespace " + namespaceName + " (in state="+ state+ ")",e);
}
}
return Flow.HAS_MORE_STATE;
}
