{
  this.qualifier=new byte[qualifier.remaining()];
  qualifier.duplicate().get(this.qualifier);
  this.qualifierAsString=Bytes.toString(this.qualifier);
  if (qualifierAsString.equals(OLD_ROOT_STR)) {
    throw new IllegalArgumentException(OLD_ROOT_STR + " has been deprecated.");
  }
  if (qualifierAsString.equals(OLD_META_STR)) {
    throw new IllegalArgumentException(OLD_META_STR + " no longer exists. The table has been " + "renamed to "+ META_TABLE_NAME);
  }
  if (Bytes.equals(NamespaceDescriptor.DEFAULT_NAMESPACE_NAME,namespace)) {
    this.namespace=NamespaceDescriptor.DEFAULT_NAMESPACE_NAME;
    this.namespaceAsString=NamespaceDescriptor.DEFAULT_NAMESPACE_NAME_STR;
    this.systemTable=false;
    this.nameAsString=qualifierAsString;
    this.name=this.qualifier;
  }
 else {
    if (Bytes.equals(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME,namespace)) {
      this.namespace=NamespaceDescriptor.SYSTEM_NAMESPACE_NAME;
      this.namespaceAsString=NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR;
      this.systemTable=true;
    }
 else {
      this.namespace=new byte[namespace.remaining()];
      namespace.duplicate().get(this.namespace);
      this.namespaceAsString=Bytes.toString(this.namespace);
      this.systemTable=false;
    }
    this.nameAsString=namespaceAsString + NAMESPACE_DELIM + qualifierAsString;
    this.name=Bytes.toBytes(nameAsString);
  }
  this.hashCode=nameAsString.hashCode();
  isLegalNamespaceName(this.namespace);
  isLegalTableQualifierName(this.qualifier);
}
