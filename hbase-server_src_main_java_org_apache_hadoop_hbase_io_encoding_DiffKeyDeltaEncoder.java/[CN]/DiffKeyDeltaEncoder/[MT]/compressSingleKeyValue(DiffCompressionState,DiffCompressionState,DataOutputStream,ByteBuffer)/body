{
  byte flag=0;
  int kvPos=in.position();
  int keyLength=in.getInt();
  int valueLength=in.getInt();
  long timestamp;
  long diffTimestamp=0;
  int diffTimestampFitsInBytes=0;
  int commonPrefix;
  int timestampFitsInBytes;
  if (previousState.isFirst()) {
    currentState.readKey(in,keyLength,valueLength);
    currentState.prevOffset=kvPos;
    timestamp=currentState.timestamp;
    if (timestamp < 0) {
      flag|=FLAG_TIMESTAMP_SIGN;
      timestamp=-timestamp;
    }
    timestampFitsInBytes=ByteBufferUtils.longFitsIn(timestamp);
    flag|=(timestampFitsInBytes - 1) << SHIFT_TIMESTAMP_LENGTH;
    commonPrefix=0;
    in.mark();
    ByteBufferUtils.skip(in,currentState.rowLength + KeyValue.ROW_LENGTH_SIZE);
    ByteBufferUtils.moveBufferToStream(out,in,currentState.familyLength + KeyValue.FAMILY_LENGTH_SIZE);
    in.reset();
  }
 else {
    commonPrefix=ByteBufferUtils.findCommonPrefix(in,in.position(),previousState.prevOffset + KeyValue.ROW_OFFSET,keyLength - KeyValue.TIMESTAMP_TYPE_SIZE);
    currentState.readKey(in,keyLength,valueLength,commonPrefix,previousState);
    currentState.prevOffset=kvPos;
    timestamp=currentState.timestamp;
    boolean negativeTimestamp=timestamp < 0;
    if (negativeTimestamp) {
      timestamp=-timestamp;
    }
    timestampFitsInBytes=ByteBufferUtils.longFitsIn(timestamp);
    if (keyLength == previousState.keyLength) {
      flag|=FLAG_SAME_KEY_LENGTH;
    }
    if (valueLength == previousState.valueLength) {
      flag|=FLAG_SAME_VALUE_LENGTH;
    }
    if (currentState.type == previousState.type) {
      flag|=FLAG_SAME_TYPE;
    }
    diffTimestamp=previousState.timestamp - currentState.timestamp;
    boolean minusDiffTimestamp=diffTimestamp < 0;
    if (minusDiffTimestamp) {
      diffTimestamp=-diffTimestamp;
    }
    diffTimestampFitsInBytes=ByteBufferUtils.longFitsIn(diffTimestamp);
    if (diffTimestampFitsInBytes < timestampFitsInBytes) {
      flag|=(diffTimestampFitsInBytes - 1) << SHIFT_TIMESTAMP_LENGTH;
      flag|=FLAG_TIMESTAMP_IS_DIFF;
      if (minusDiffTimestamp) {
        flag|=FLAG_TIMESTAMP_SIGN;
      }
    }
 else {
      flag|=(timestampFitsInBytes - 1) << SHIFT_TIMESTAMP_LENGTH;
      if (negativeTimestamp) {
        flag|=FLAG_TIMESTAMP_SIGN;
      }
    }
  }
  out.write(flag);
  if ((flag & FLAG_SAME_KEY_LENGTH) == 0) {
    ByteBufferUtils.putCompressedInt(out,keyLength);
  }
  if ((flag & FLAG_SAME_VALUE_LENGTH) == 0) {
    ByteBufferUtils.putCompressedInt(out,valueLength);
  }
  ByteBufferUtils.putCompressedInt(out,commonPrefix);
  ByteBufferUtils.skip(in,commonPrefix);
  if (previousState.isFirst() || commonPrefix < currentState.rowLength + KeyValue.ROW_LENGTH_SIZE) {
    int restRowLength=currentState.rowLength + KeyValue.ROW_LENGTH_SIZE - commonPrefix;
    ByteBufferUtils.moveBufferToStream(out,in,restRowLength);
    ByteBufferUtils.skip(in,currentState.familyLength + KeyValue.FAMILY_LENGTH_SIZE);
    ByteBufferUtils.moveBufferToStream(out,in,currentState.qualifierLength);
  }
 else {
    ByteBufferUtils.moveBufferToStream(out,in,keyLength - commonPrefix - KeyValue.TIMESTAMP_TYPE_SIZE);
  }
  if ((flag & FLAG_TIMESTAMP_IS_DIFF) == 0) {
    ByteBufferUtils.putLong(out,timestamp,timestampFitsInBytes);
  }
 else {
    ByteBufferUtils.putLong(out,diffTimestamp,diffTimestampFitsInBytes);
  }
  if ((flag & FLAG_SAME_TYPE) == 0) {
    out.write(currentState.type);
  }
  ByteBufferUtils.skip(in,KeyValue.TIMESTAMP_TYPE_SIZE);
  ByteBufferUtils.moveBufferToStream(out,in,valueLength);
}
