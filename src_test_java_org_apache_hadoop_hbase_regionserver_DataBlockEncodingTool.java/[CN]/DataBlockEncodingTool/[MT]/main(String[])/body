{
  Options options=new Options();
  options.addOption("f",true,"HFile to analyse (REQUIRED)");
  options.getOption("f").setArgName("FILENAME");
  options.addOption("n",true,"Limit number of KeyValue which will be analysed");
  options.getOption("n").setArgName("NUMBER");
  options.addOption("b",false,"Measure read throughput");
  options.addOption("c",false,"Omit corectness tests.");
  options.addOption("a",true,"What kind of compression algorithm use for comparison.");
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=null;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.err.println("Could not parse arguments!");
    System.exit(-1);
    return;
  }
  int kvLimit=Integer.MAX_VALUE;
  if (cmd.hasOption("n")) {
    kvLimit=Integer.parseInt(cmd.getOptionValue("n"));
  }
  if (!cmd.hasOption("f")) {
    System.err.println("ERROR: Filename is required!");
    printUsage(options);
    System.exit(-1);
  }
  String pathName=cmd.getOptionValue("f");
  String compressionName=DEFAULT_COMPRESSION.getName();
  if (cmd.hasOption("a")) {
    compressionName=cmd.getOptionValue("a").toLowerCase();
  }
  boolean doBenchmark=cmd.hasOption("b");
  boolean doVerify=!cmd.hasOption("c");
  final Configuration conf=HBaseConfiguration.create();
  try {
    testCodecs(conf,kvLimit,pathName,compressionName,doBenchmark,doVerify);
  }
  finally {
    (new CacheConfig(conf)).getBlockCache().shutdown();
  }
}
