{
  HBaseTestingUtility htu=new HBaseTestingUtility();
  Configuration conf=htu.getConfiguration();
  FileSystem fs=FileSystem.get(conf);
  byte[] table=Bytes.toBytes("table");
  byte[][] families=new byte[][]{Bytes.toBytes("family1"),Bytes.toBytes("family2"),Bytes.toBytes("family3")};
  int numQualifiers=10;
  byte[][] qualifiers=new byte[numQualifiers][];
  for (int i=0; i < numQualifiers; i++)   qualifiers[i]=Bytes.toBytes("qf" + i);
  int numRows=10;
  byte[][] rows=new byte[numRows][];
  for (int i=0; i < numRows; i++)   rows[i]=Bytes.toBytes("r" + i);
  HTableDescriptor htd=new HTableDescriptor(table);
  for (  byte[] family : families)   htd.addFamily(new HColumnDescriptor(family));
  HRegionInfo hri=new HRegionInfo(htd.getName(),null,null,false);
  String testDir=htu.getDataTestDir() + "/TestResettingCounters/";
  Path path=new Path(testDir);
  if (fs.exists(path)) {
    if (!fs.delete(path,true)) {
      throw new IOException("Failed delete of " + path);
    }
  }
  HRegion region=HRegion.createHRegion(hri,path,conf,htd);
  Increment odd=new Increment(rows[0]);
  Increment even=new Increment(rows[0]);
  Increment all=new Increment(rows[0]);
  for (int i=0; i < numQualifiers; i++) {
    if (i % 2 == 0)     even.addColumn(families[0],qualifiers[i],1);
 else     odd.addColumn(families[0],qualifiers[i],1);
    all.addColumn(families[0],qualifiers[i],1);
  }
  for (int i=0; i < 5; i++)   region.increment(odd,null,false);
  region.flushcache();
  for (int i=0; i < 5; i++)   region.increment(even,null,false);
  Result result=region.increment(all,null,false);
  assertEquals(numQualifiers,result.size());
  KeyValue[] kvs=result.raw();
  for (int i=0; i < kvs.length; i++) {
    System.out.println(kvs[i].toString());
    assertTrue(Bytes.equals(kvs[i].getQualifier(),qualifiers[i]));
    assertEquals(6,Bytes.toLong(kvs[i].getValue()));
  }
  region.close();
  region.getLog().closeAndDelete();
}
