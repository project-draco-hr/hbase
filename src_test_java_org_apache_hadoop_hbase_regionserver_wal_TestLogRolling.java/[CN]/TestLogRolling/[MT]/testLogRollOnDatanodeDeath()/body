{
  assertTrue("This test requires HLog file replication.",fs.getDefaultReplication() > 1);
  new HTable(TEST_UTIL.getConfiguration(),HConstants.META_TABLE_NAME);
  String tableName=getName();
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  if (admin.tableExists(tableName)) {
    admin.disableTable(tableName);
    admin.deleteTable(tableName);
  }
  admin.createTable(desc);
  HTable table=new HTable(TEST_UTIL.getConfiguration(),tableName);
  server=TEST_UTIL.getRSForFirstRegionInTable(Bytes.toBytes(tableName));
  this.log=server.getLog();
  assertTrue("Need HDFS-826 for this test",log.canGetCurReplicas());
  assertTrue("Need append support for this test",FSUtils.isAppendSupported(TEST_UTIL.getConfiguration()));
  dfsCluster.startDataNodes(TEST_UTIL.getConfiguration(),1,true,null,null);
  dfsCluster.waitActive();
  assertTrue(dfsCluster.getDataNodes().size() >= fs.getDefaultReplication() + 1);
  writeData(table,2);
  table.setAutoFlush(true);
  long curTime=System.currentTimeMillis();
  long oldFilenum=log.getFilenum();
  assertTrue("Log should have a timestamp older than now",curTime > oldFilenum && oldFilenum != -1);
  assertTrue("The log shouldn't have rolled yet",oldFilenum == log.getFilenum());
  DatanodeInfo[] pipeline=getPipeline(log);
  assertTrue(pipeline.length == fs.getDefaultReplication());
  assertTrue(dfsCluster.stopDataNode(pipeline[0].getName()) != null);
  Thread.sleep(10000);
  writeData(table,2);
  long newFilenum=log.getFilenum();
  assertTrue("Missing datanode should've triggered a log roll",newFilenum > oldFilenum && newFilenum > curTime);
  writeData(table,3);
  assertTrue("The log should not roll again.",log.getFilenum() == newFilenum);
  assertTrue("New log file should have the default replication",log.getLogReplication() == fs.getDefaultReplication());
}
