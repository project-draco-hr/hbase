{
  backupContext.setPhase(BACKUPPHASE.STORE_MANIFEST);
  if (backupContext.isCancelled()) {
    return;
  }
  BackupManifest manifest;
  boolean fromExistingSnapshot=false;
  for (  String table : backupContext.getTables()) {
    manifest=new BackupManifest(backupContext,table);
    if (fromExistingSnapshot) {
      LOG.debug("backup using existing snapshot will be supported in future jira");
    }
 else {
      ArrayList<BackupImage> ancestors=this.backupManager.getAncestors(backupContext,table);
      for (      BackupImage image : ancestors) {
        manifest.addDependentImage(image);
      }
    }
    if (backupContext.getType().equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
      HashMap<String,HashMap<String,String>> tableTimestampMap=new HashMap<String,HashMap<String,String>>();
      tableTimestampMap.put(table,backupContext.getIncrTimestampMap().get(table));
      manifest.setIncrTimestampMap(tableTimestampMap);
    }
    manifest.store(conf);
  }
  if (backupContext.getType().equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
    manifest=new BackupManifest(backupContext);
    manifest.setIncrTimestampMap(backupContext.getIncrTimestampMap());
    ArrayList<BackupImage> ancestors=this.backupManager.getAncestors(backupContext);
    for (    BackupImage image : ancestors) {
      manifest.addDependentImage(image);
    }
    manifest.store(conf);
  }
}
