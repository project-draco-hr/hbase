{
  try {
    this.beginBackup(backupContext);
    HashMap<String,String> newTimestamps=null;
    boolean fromExistingSnapshot=false;
    if (backupContext.getType().equals(BackupRestoreConstants.BACKUP_TYPE_FULL)) {
      String savedStartCode=null;
      HBaseAdmin hbadmin=null;
      Connection conn=null;
      boolean firstBackup=false;
      if (fromExistingSnapshot) {
        LOG.error("Backup from existing snapshot, so skip the snapshot step. ");
        LOG.error("This feature will be supported by a future jira");
        throw new RuntimeException("Backup from existing snapshot is not supported");
      }
 else {
        try {
          savedStartCode=backupManager.readBackupStartCode();
          firstBackup=savedStartCode == null;
          if (firstBackup) {
            backupManager.writeBackupStartCode("0");
          }
          LOG.info("Execute roll log procedure for full backup ...");
          conn=ConnectionFactory.createConnection(conf);
          hbadmin=(HBaseAdmin)conn.getAdmin();
          hbadmin.execProcedure(LogRollMasterProcedureManager.ROLLLOG_PROCEDURE_SIGNATURE,LogRollMasterProcedureManager.ROLLLOG_PROCEDURE_NAME,new HashMap<String,String>());
          newTimestamps=backupManager.readRegionServerLastLogRollResult();
          if (firstBackup) {
            List<String> logFiles=BackupUtil.getWALFilesOlderThan(conf,newTimestamps);
            backupManager.recordWALFiles(logFiles);
          }
          this.snapshotForFullBackup(backupContext);
        }
 catch (        BackupException e) {
          this.failBackup(backupContext,e,"Unexpected BackupException : ");
          return null;
        }
 finally {
          if (hbadmin != null) {
            hbadmin.close();
          }
          if (conn != null) {
            conn.close();
          }
        }
      }
      this.updateProgress("10.0%",0);
      try {
        this.snapshotCopy(backupContext);
      }
 catch (      Exception e) {
        this.failBackup(backupContext,e,"Unexpected BackupException : ");
        return null;
      }
      backupManager.addIncrementalBackupTableSet(backupContext.getTables());
    }
 else     if (backupContext.getType().equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
      LOG.info("For incremental backup, current table set is " + backupManager.getIncrementalBackupTableSet());
      backupContext.setPhase(BACKUPPHASE.PREPARE_INCREMENTAL);
      if (backupContext.isCancelled()) {
        return null;
      }
      try {
        IncrementalBackupManager incrBackupManager=new IncrementalBackupManager(backupManager);
        newTimestamps=incrBackupManager.getIncrBackupLogFileList(backupContext);
      }
 catch (      Exception e) {
        this.failBackup(backupContext,e,"Unexpected Exception : ");
        return null;
      }
      this.updateProgress("10.0%",0);
      try {
        BackupUtil.copyTableRegionInfo(backupContext,conf);
        this.incrementalCopy(backupContext);
        backupManager.recordWALFiles(backupContext.getIncrBackupFileList());
      }
 catch (      Exception e) {
        this.failBackup(backupContext,e,"Unexpected exception doing incremental copy : ");
        return null;
      }
    }
 else {
      LOG.error("Unsupport backup type: " + backupContext.getType());
    }
    backupContext.setFlag(BACKUPSTATUS.COMPLETE);
    if (!fromExistingSnapshot) {
      if (backupContext.getType().equals(BackupRestoreConstants.BACKUP_TYPE_INCR)) {
        HashMap<String,HashMap<String,String>> previousTimestampMap=backupManager.readLogTimestampMap();
        backupContext.setIncrTimestampMap(previousTimestampMap);
      }
      backupManager.writeRegionServerLogTimestamp(backupContext.getTables(),newTimestamps);
      HashMap<String,HashMap<String,String>> newTableSetTimestampMap=backupManager.readLogTimestampMap();
      String newStartCode=BackupUtil.getMinValue(BackupUtil.getRSLogTimestampMins(newTableSetTimestampMap));
      backupManager.writeBackupStartCode(newStartCode);
    }
    this.completeBackup(backupContext);
  }
 catch (  Exception e) {
    this.failBackup(backupContext,e,"Error caught during backup progress: ");
  }
  return null;
}
