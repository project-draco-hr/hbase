{
  Filter filter;
switch (FilterType.valueOf(type)) {
case ColumnCountGetFilter:
{
      filter=new ColumnCountGetFilter(limit);
    }
  break;
case FilterList:
{
  List<Filter> list=new ArrayList<Filter>();
  for (  FilterModel model : filters) {
    list.add(model.build());
  }
  filter=new FilterList(FilterList.Operator.valueOf(op),list);
}
break;
case FirstKeyOnlyFilter:
{
filter=new FirstKeyOnlyFilter();
}
break;
case InclusiveStopFilter:
{
filter=new InclusiveStopFilter(Base64.decode(value));
}
break;
case PageFilter:
{
filter=new PageFilter(Long.valueOf(value));
}
break;
case PrefixFilter:
{
filter=new PrefixFilter(Base64.decode(value));
}
break;
case QualifierFilter:
{
filter=new QualifierFilter(CompareOp.valueOf(op),comparator.build());
}
break;
case RowFilter:
{
filter=new RowFilter(CompareOp.valueOf(op),comparator.build());
}
break;
case SingleColumnValueFilter:
{
filter=new SingleColumnValueFilter(Base64.decode(family),qualifier != null ? Base64.decode(qualifier) : null,CompareOp.valueOf(op),comparator.build());
if (ifMissing != null) {
((SingleColumnValueFilter)filter).setFilterIfMissing(ifMissing);
}
if (latestVersion != null) {
((SingleColumnValueFilter)filter).setLatestVersionOnly(latestVersion);
}
}
break;
case SkipFilter:
{
filter=new SkipFilter(filters.get(0).build());
}
break;
case ValueFilter:
{
filter=new ValueFilter(CompareOp.valueOf(op),comparator.build());
}
break;
case WhileMatchFilter:
{
filter=new WhileMatchFilter(filters.get(0).build());
}
break;
default :
throw new RuntimeException("unhandled filter type: " + type);
}
return filter;
}
