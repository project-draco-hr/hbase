{
  if (cache.size() == 0 && this.closed) {
    return null;
  }
  if (cache.size() == 0) {
    Result[] values=null;
    long remainingResultSize=maxScannerResultSize;
    int countdown=this.caching;
    callable.setCaching(this.caching);
    boolean skipFirst=false;
    boolean retryAfterOutOfOrderException=true;
    do {
      try {
        if (skipFirst) {
          callable.setCaching(1);
          values=this.caller.callWithRetries(callable);
          callable.setCaching(this.caching);
          skipFirst=false;
        }
        values=this.caller.callWithRetries(callable);
        if (skipFirst && values != null && values.length == 1) {
          skipFirst=false;
          values=this.caller.callWithRetries(callable);
        }
        retryAfterOutOfOrderException=true;
      }
 catch (      DoNotRetryIOException e) {
        if (e instanceof UnknownScannerException) {
          long timeout=lastNext + scannerTimeout;
          if (timeout < System.currentTimeMillis()) {
            long elapsed=System.currentTimeMillis() - lastNext;
            ScannerTimeoutException ex=new ScannerTimeoutException(elapsed + "ms passed since the last invocation, " + "timeout is currently set to "+ scannerTimeout);
            ex.initCause(e);
            throw ex;
          }
        }
 else {
          Throwable cause=e.getCause();
          if ((cause != null && cause instanceof NotServingRegionException) || (cause != null && cause instanceof RegionServerStoppedException) || e instanceof OutOfOrderScannerNextException) {
          }
 else {
            throw e;
          }
        }
        if (this.lastResult != null) {
          this.scan.setStartRow(this.lastResult.getRow());
          skipFirst=true;
        }
        if (e instanceof OutOfOrderScannerNextException) {
          if (retryAfterOutOfOrderException) {
            retryAfterOutOfOrderException=false;
          }
 else {
            throw new DoNotRetryIOException("Failed after retry of " + "OutOfOrderScannerNextException: was there a rpc timeout?",e);
          }
        }
        this.currentRegion=null;
        callable=null;
        continue;
      }
      long currentTime=System.currentTimeMillis();
      if (this.scanMetrics != null) {
        this.scanMetrics.sumOfMillisSecBetweenNexts.addAndGet(currentTime - lastNext);
      }
      lastNext=currentTime;
      if (values != null && values.length > 0) {
        for (        Result rs : values) {
          cache.add(rs);
          for (          Cell kv : rs.raw()) {
            remainingResultSize-=KeyValueUtil.ensureKeyValue(kv).heapSize();
          }
          countdown--;
          this.lastResult=rs;
        }
      }
    }
 while (remainingResultSize > 0 && countdown > 0 && nextScanner(countdown,values == null));
  }
  if (cache.size() > 0) {
    return cache.poll();
  }
  writeScanMetrics();
  return null;
}
