{
  this.userProvider=UserProvider.instantiate(conf);
  this.localAddr=localAddr;
  this.tcpKeepAlive=conf.getBoolean("hbase.ipc.client.tcpkeepalive",true);
  this.clusterId=clusterId != null ? clusterId : HConstants.CLUSTER_ID_DEFAULT;
  this.failureSleep=conf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  this.maxRetries=conf.getInt("hbase.ipc.client.connect.max.retries",0);
  this.tcpNoDelay=conf.getBoolean("hbase.ipc.client.tcpnodelay",true);
  this.cellBlockBuilder=new CellBlockBuilder(conf);
  this.minIdleTimeBeforeClose=conf.getInt(IDLE_TIME,120000);
  this.conf=conf;
  this.codec=getCodec();
  this.compressor=getCompressor(conf);
  this.fallbackAllowed=conf.getBoolean(IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY,IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_DEFAULT);
  this.connectTO=conf.getInt(SOCKET_TIMEOUT_CONNECT,DEFAULT_SOCKET_TIMEOUT_CONNECT);
  this.readTO=conf.getInt(SOCKET_TIMEOUT_READ,DEFAULT_SOCKET_TIMEOUT_READ);
  this.writeTO=conf.getInt(SOCKET_TIMEOUT_WRITE,DEFAULT_SOCKET_TIMEOUT_WRITE);
  this.metrics=metrics;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Codec=" + this.codec + ", compressor="+ this.compressor+ ", tcpKeepAlive="+ this.tcpKeepAlive+ ", tcpNoDelay="+ this.tcpNoDelay+ ", connectTO="+ this.connectTO+ ", readTO="+ this.readTO+ ", writeTO="+ this.writeTO+ ", minIdleTimeBeforeClose="+ this.minIdleTimeBeforeClose+ ", maxRetries="+ this.maxRetries+ ", fallbackAllowed="+ this.fallbackAllowed+ ", bind address="+ (this.localAddr != null ? this.localAddr : "null"));
  }
}
