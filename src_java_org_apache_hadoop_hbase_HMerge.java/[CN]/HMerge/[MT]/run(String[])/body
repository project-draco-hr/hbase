{
  if (args.length == 0 || args.length > 4) {
    printUsage();
    return 1;
  }
  final String masterPrefix="--master=";
  String tableName=null;
  String loRegion=null;
  String hiRegion=null;
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.startsWith(masterPrefix)) {
      this.conf.set("hbase.master",arg.substring(masterPrefix.length()));
    }
 else     if (tableName == null) {
      tableName=arg;
      continue;
    }
 else     if (loRegion == null) {
      loRegion=arg;
      continue;
    }
 else     if (hiRegion == null) {
      hiRegion=arg;
      continue;
    }
 else {
      throw new IllegalArgumentException("Unsupported argument: " + arg);
    }
  }
  final Text lo=new Text(loRegion);
  final Text hi=new Text(hiRegion);
  Merger m=new OnlineMerger((HBaseConfiguration)this.conf,FileSystem.get(this.conf),new Text(tableName)){
    @Override void process() throws IOException {
      try {
        for (HRegionInfo[] regionsToMerge=next(); regionsToMerge != null; regionsToMerge=next()) {
          if (regionsToMerge[0].getRegionName().equals(lo) && regionsToMerge[1].getRegionName().equals(hi)) {
            merge(regionsToMerge,true);
            break;
          }
        }
      }
  finally {
        try {
          this.hlog.closeAndDelete();
        }
 catch (        IOException e) {
          LOG.error(e);
        }
      }
    }
    @Override protected void checkOfflined(    @SuppressWarnings("unused") HRegionInfo hri) throws TableNotDisabledException {
      return;
    }
  }
;
  m.process();
  return 0;
}
