{
  Text[] regionsToDelete={oldRegion1,oldRegion2};
  for (int r=0; r < regionsToDelete.length; r++) {
    if (regionsToDelete[r].equals(latestRegion.getRegionName())) {
      latestRegion=null;
    }
    long lockid=-1L;
    try {
      lockid=table.startUpdate(regionsToDelete[r]);
      table.delete(lockid,COL_REGIONINFO);
      table.delete(lockid,COL_SERVER);
      table.delete(lockid,COL_STARTCODE);
      table.delete(lockid,COL_SPLITA);
      table.delete(lockid,COL_SPLITB);
      table.commit(lockid);
      lockid=-1L;
      if (LOG.isDebugEnabled()) {
        LOG.debug("updated columns in row: " + regionsToDelete[r]);
      }
    }
  finally {
      if (lockid != -1L) {
        table.abort(lockid);
      }
    }
  }
  newRegion.getRegionInfo().setOffline(true);
  long lockid=-1L;
  try {
    lockid=table.startUpdate(newRegion.getRegionName());
    table.put(lockid,COL_REGIONINFO,Writables.getBytes(newRegion.getRegionInfo()));
    table.commit(lockid);
    lockid=-1L;
    if (LOG.isDebugEnabled()) {
      LOG.debug("updated columns in row: " + newRegion.getRegionName());
    }
  }
  finally {
    if (lockid != -1L) {
      table.abort(lockid);
    }
  }
}
