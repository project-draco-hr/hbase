{
  if (trailer.metaIndexCount == 0) {
    return null;
  }
  if (metaIndex == null) {
    throw new IOException("Meta index not loaded");
  }
  byte[] mbname=Bytes.toBytes(metaBlockName);
  int block=metaIndex.blockContainingKey(mbname,0,mbname.length);
  if (block == -1)   return null;
  long blockSize;
  if (block == metaIndex.count - 1) {
    blockSize=trailer.fileinfoOffset - metaIndex.blockOffsets[block];
  }
 else {
    blockSize=metaIndex.blockOffsets[block + 1] - metaIndex.blockOffsets[block];
  }
  long now=System.currentTimeMillis();
synchronized (metaIndex.blockKeys[block]) {
    metaLoads++;
    if (cache != null) {
      ByteBuffer cachedBuf=cache.getBlock(name + "meta" + block);
      if (cachedBuf != null) {
        cacheHits++;
        return cachedBuf.duplicate();
      }
    }
    ByteBuffer buf=decompress(metaIndex.blockOffsets[block],longToInt(blockSize),metaIndex.blockDataSizes[block],true);
    byte[] magic=new byte[METABLOCKMAGIC.length];
    buf.get(magic,0,magic.length);
    if (!Arrays.equals(magic,METABLOCKMAGIC)) {
      throw new IOException("Meta magic is bad in block " + block);
    }
    buf=buf.slice();
    readTime+=System.currentTimeMillis() - now;
    readOps++;
    if (cacheBlock && cache != null) {
      cache.cacheBlock(name + "meta" + block,buf.duplicate(),inMemory);
    }
    return buf;
  }
}
