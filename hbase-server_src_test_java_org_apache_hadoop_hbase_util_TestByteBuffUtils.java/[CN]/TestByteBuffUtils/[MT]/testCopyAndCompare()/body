{
  ByteBuffer bb1=ByteBuffer.allocate(50);
  ByteBuffer bb2=ByteBuffer.allocate(50);
  MultiByteBuff src=new MultiByteBuff(bb1,bb2);
  for (int i=0; i < 7; i++) {
    src.putLong(8l);
  }
  src.put((byte)1);
  src.put((byte)1);
  ByteBuffer bb3=ByteBuffer.allocate(50);
  ByteBuffer bb4=ByteBuffer.allocate(50);
  MultiByteBuff mbbDst=new MultiByteBuff(bb3,bb4);
  mbbDst.put(0,src,0,100);
  int compareTo=ByteBuff.compareTo(src,0,100,mbbDst,0,100);
  assertTrue(compareTo == 0);
  bb3=ByteBuffer.allocate(100);
  SingleByteBuff sbbDst=new SingleByteBuff(bb3);
  src.rewind();
  sbbDst.put(0,src,0,100);
  compareTo=ByteBuff.compareTo(src,0,100,sbbDst,0,100);
  assertTrue(compareTo == 0);
  bb3=ByteBuffer.allocate(100);
  SingleByteBuff sbb=new SingleByteBuff(bb3);
  for (int i=0; i < 7; i++) {
    sbb.putLong(8l);
  }
  sbb.put((byte)1);
  sbb.put((byte)1);
  bb4=ByteBuffer.allocate(100);
  sbbDst=new SingleByteBuff(bb4);
  sbbDst.put(0,sbb,0,100);
  compareTo=ByteBuff.compareTo(sbb,0,100,sbbDst,0,100);
  assertTrue(compareTo == 0);
  sbb.rewind();
  mbbDst=new MultiByteBuff(bb3,bb4);
  mbbDst.rewind();
  mbbDst.put(0,sbb,0,100);
  compareTo=ByteBuff.compareTo(sbb,0,100,mbbDst,0,100);
  assertTrue(compareTo == 0);
}
