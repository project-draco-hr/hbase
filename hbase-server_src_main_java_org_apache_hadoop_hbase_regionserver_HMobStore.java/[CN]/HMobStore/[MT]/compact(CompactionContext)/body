{
  if (compaction.getRequest().isAllFiles()) {
    String compactionName=UUID.randomUUID().toString().replaceAll("-","");
    MobZookeeper zk=null;
    try {
      zk=MobZookeeper.newInstance(region.getBaseConf(),compactionName);
    }
 catch (    KeeperException e) {
      LOG.error("Cannot connect to the zookeeper, forcing the delete markers to be retained",e);
      compaction.getRequest().forceRetainDeleteMarkers();
      return super.compact(compaction);
    }
    boolean keepDeleteMarkers=true;
    boolean majorCompactNodeAdded=false;
    try {
      if (zk.lockColumnFamily(getTableName().getNameAsString(),getFamily().getNameAsString())) {
        try {
          LOG.info("Obtain the lock for the store[" + this + "], forcing the delete markers to be retained");
          boolean hasSweeper=zk.isSweeperZNodeExist(getTableName().getNameAsString(),getFamily().getNameAsString());
          if (!hasSweeper) {
            majorCompactNodeAdded=zk.addMajorCompactionZNode(getTableName().getNameAsString(),getFamily().getNameAsString(),compactionName);
            keepDeleteMarkers=!majorCompactNodeAdded;
          }
        }
 catch (        Exception e) {
          LOG.error("Fail to handle the Zookeeper",e);
        }
 finally {
          zk.unlockColumnFamily(getTableName().getNameAsString(),getFamily().getNameAsString());
        }
      }
      try {
        if (keepDeleteMarkers) {
          LOG.warn("Cannot obtain the lock or a sweep tool is running on this store[" + this + "], forcing the delete markers to be retained");
          compaction.getRequest().forceRetainDeleteMarkers();
        }
        return super.compact(compaction);
      }
  finally {
        if (majorCompactNodeAdded) {
          try {
            zk.deleteMajorCompactionZNode(getTableName().getNameAsString(),getFamily().getNameAsString(),compactionName);
          }
 catch (          KeeperException e) {
            LOG.error("Fail to delete the compaction znode" + compactionName,e);
          }
        }
      }
    }
  finally {
      zk.close();
    }
  }
 else {
    return super.compact(compaction);
  }
}
