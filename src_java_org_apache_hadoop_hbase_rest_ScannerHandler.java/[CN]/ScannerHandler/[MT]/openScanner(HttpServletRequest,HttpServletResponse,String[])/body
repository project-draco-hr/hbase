{
  HTable table=getTable(getTableName(pathSegments));
  String[] raw_columns=request.getParameterValues(COLUMN);
  Text[] columns=null;
  if (raw_columns != null) {
    columns=new Text[raw_columns.length];
    for (int i=0; i < raw_columns.length; i++) {
      columns[i]=new Text(URLDecoder.decode(raw_columns[i],HConstants.UTF8_ENCODING));
    }
  }
 else {
    doMethodNotAllowed(response,"Unspecified columns parameter currently not supported!");
    return;
  }
  String raw_ts=request.getParameter(TIMESTAMP);
  Text startRow=request.getParameter(START_ROW) == null ? HConstants.EMPTY_START_ROW : new Text(URLDecoder.decode(request.getParameter(START_ROW),HConstants.UTF8_ENCODING));
  Text endRow=request.getParameter(END_ROW) == null ? HConstants.EMPTY_START_ROW : new Text(URLDecoder.decode(request.getParameter(END_ROW),HConstants.UTF8_ENCODING));
  Scanner scanner=(request.getParameter(END_ROW) == null) ? table.getScanner(columns,startRow) : table.getScanner(columns,startRow,endRow);
  String scannerid=Integer.toHexString(JenkinsHash.hash(scanner.toString().getBytes(),-1));
  ScannerRecord sr=new ScannerRecord(scanner);
  this.scanners.put(scannerid,sr);
  response.setStatus(201);
  response.addHeader("Location",request.getContextPath() + "/" + pathSegments[0]+ "/"+ pathSegments[1]+ "/"+ scannerid);
  response.getOutputStream().close();
}
