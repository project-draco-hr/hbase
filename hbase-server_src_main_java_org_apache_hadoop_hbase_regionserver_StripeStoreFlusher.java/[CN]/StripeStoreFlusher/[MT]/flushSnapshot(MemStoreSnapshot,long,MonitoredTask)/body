{
  List<Path> result=null;
  int cellsCount=snapshot.getCellsCount();
  if (cellsCount == 0)   return result;
  long smallestReadPoint=store.getSmallestReadPoint();
  InternalScanner scanner=createScanner(snapshot.getScanner(),smallestReadPoint);
  if (scanner == null) {
    return result;
  }
  StripeFlushRequest req=this.policy.selectFlush(this.stripes,cellsCount);
  boolean success=false;
  StripeMultiFileWriter mw=null;
  try {
    mw=req.createWriter();
    StripeMultiFileWriter.WriterFactory factory=createWriterFactory(snapshot.getTimeRangeTracker(),cellsCount);
    StoreScanner storeScanner=(scanner instanceof StoreScanner) ? (StoreScanner)scanner : null;
    mw.init(storeScanner,factory,store.getComparator());
synchronized (flushLock) {
      performFlush(scanner,mw,smallestReadPoint);
      result=mw.commitWriters(cacheFlushSeqNum,false);
      success=true;
    }
  }
  finally {
    if (!success && (mw != null)) {
      if (result != null) {
        result.clear();
      }
      for (      Path leftoverFile : mw.abortWriters()) {
        try {
          store.getFileSystem().delete(leftoverFile,false);
        }
 catch (        Exception e) {
          LOG.error("Failed to delete a file after failed flush: " + e);
        }
      }
    }
    try {
      scanner.close();
    }
 catch (    IOException ex) {
      LOG.warn("Failed to close flush scanner, ignoring",ex);
    }
  }
  return result;
}
