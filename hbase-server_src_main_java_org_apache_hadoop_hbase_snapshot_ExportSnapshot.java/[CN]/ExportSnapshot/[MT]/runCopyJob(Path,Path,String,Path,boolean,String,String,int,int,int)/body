{
  Configuration conf=getConf();
  if (filesGroup != null)   conf.set(CONF_FILES_GROUP,filesGroup);
  if (filesUser != null)   conf.set(CONF_FILES_USER,filesUser);
  if (mappers > 0) {
    conf.setInt(CONF_NUM_SPLITS,mappers);
    conf.setInt(MR_NUM_MAPS,mappers);
  }
  conf.setInt(CONF_FILES_MODE,filesMode);
  conf.setBoolean(CONF_CHECKSUM_VERIFY,verifyChecksum);
  conf.set(CONF_OUTPUT_ROOT,outputRoot.toString());
  conf.set(CONF_INPUT_ROOT,inputRoot.toString());
  conf.setInt(CONF_BANDWIDTH_MB,bandwidthMB);
  conf.set(CONF_SNAPSHOT_NAME,snapshotName);
  conf.set(CONF_SNAPSHOT_DIR,snapshotDir.toString());
  Job job=new Job(conf);
  job.setJobName("ExportSnapshot-" + snapshotName);
  job.setJarByClass(ExportSnapshot.class);
  TableMapReduceUtil.addDependencyJars(job);
  job.setMapperClass(ExportMapper.class);
  job.setInputFormatClass(ExportSnapshotInputFormat.class);
  job.setOutputFormatClass(NullOutputFormat.class);
  job.setMapSpeculativeExecution(false);
  job.setNumReduceTasks(0);
  TokenCache.obtainTokensForNamenodes(job.getCredentials(),new Path[]{inputRoot,outputRoot},conf);
  if (!job.waitForCompletion(true)) {
    throw new ExportSnapshotException("Copy Files Map-Reduce Job failed");
  }
}
