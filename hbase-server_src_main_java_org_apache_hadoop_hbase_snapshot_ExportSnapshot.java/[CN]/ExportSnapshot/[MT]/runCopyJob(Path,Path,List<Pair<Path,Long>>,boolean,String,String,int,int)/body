{
  Configuration conf=getConf();
  if (filesGroup != null)   conf.set(CONF_FILES_GROUP,filesGroup);
  if (filesUser != null)   conf.set(CONF_FILES_USER,filesUser);
  conf.setInt(CONF_FILES_MODE,filesMode);
  conf.setBoolean(CONF_CHECKSUM_VERIFY,verifyChecksum);
  conf.set(CONF_OUTPUT_ROOT,outputRoot.toString());
  conf.set(CONF_INPUT_ROOT,inputRoot.toString());
  conf.setInt("mapreduce.job.maps",mappers);
  Job job=new Job(conf);
  job.setJobName("ExportSnapshot");
  job.setJarByClass(ExportSnapshot.class);
  TableMapReduceUtil.addDependencyJars(job);
  job.setMapperClass(ExportMapper.class);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setOutputFormatClass(NullOutputFormat.class);
  job.setMapSpeculativeExecution(false);
  job.setNumReduceTasks(0);
  Path inputFolderPath=getInputFolderPath(conf);
  for (  Path path : createInputFiles(conf,inputFolderPath,snapshotFiles,mappers)) {
    LOG.debug("Add Input Path=" + path);
    SequenceFileInputFormat.addInputPath(job,path);
  }
  try {
    TokenCache.obtainTokensForNamenodes(job.getCredentials(),new Path[]{inputRoot,outputRoot},conf);
    if (!job.waitForCompletion(true)) {
      throw new ExportSnapshotException("Copy Files Map-Reduce Job failed");
    }
  }
  finally {
    try {
      inputFolderPath.getFileSystem(conf).delete(inputFolderPath,true);
    }
 catch (    IOException e) {
      LOG.warn("Unable to remove MR input folder: " + inputFolderPath,e);
    }
  }
}
