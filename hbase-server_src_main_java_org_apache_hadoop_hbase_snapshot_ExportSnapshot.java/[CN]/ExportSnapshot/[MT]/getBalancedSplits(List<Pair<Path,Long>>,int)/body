{
  Collections.sort(files,new Comparator<Pair<Path,Long>>(){
    public int compare(    Pair<Path,Long> a,    Pair<Path,Long> b){
      long r=a.getSecond() - b.getSecond();
      return (r < 0) ? -1 : ((r > 0) ? 1 : 0);
    }
  }
);
  List<List<Path>> fileGroups=new LinkedList<List<Path>>();
  long[] sizeGroups=new long[ngroups];
  int hi=files.size() - 1;
  int lo=0;
  List<Path> group;
  int dir=1;
  int g=0;
  while (hi >= lo) {
    if (g == fileGroups.size()) {
      group=new LinkedList<Path>();
      fileGroups.add(group);
    }
 else {
      group=fileGroups.get(g);
    }
    Pair<Path,Long> fileInfo=files.get(hi--);
    sizeGroups[g]+=fileInfo.getSecond();
    group.add(fileInfo.getFirst());
    g+=dir;
    if (g == ngroups) {
      dir=-1;
      g=ngroups - 1;
    }
 else     if (g < 0) {
      dir=1;
      g=0;
    }
  }
  if (LOG.isDebugEnabled()) {
    for (int i=0; i < sizeGroups.length; ++i) {
      LOG.debug("export split=" + i + " size="+ StringUtils.humanReadableInt(sizeGroups[i]));
    }
  }
  return fileGroups;
}
