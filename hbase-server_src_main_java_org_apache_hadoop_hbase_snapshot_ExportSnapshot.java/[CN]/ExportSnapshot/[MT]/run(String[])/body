{
  boolean verifyTarget=true;
  boolean verifyChecksum=true;
  String snapshotName=null;
  String targetName=null;
  boolean overwrite=false;
  String filesGroup=null;
  String filesUser=null;
  Path outputRoot=null;
  int bandwidthMB=Integer.MAX_VALUE;
  int filesMode=0;
  int mappers=0;
  Configuration conf=getConf();
  Path inputRoot=FSUtils.getRootDir(conf);
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    if (cmd.equals("-snapshot")) {
      snapshotName=args[++i];
    }
 else     if (cmd.equals("-target")) {
      targetName=args[++i];
    }
 else     if (cmd.equals("-copy-to")) {
      outputRoot=new Path(args[++i]);
    }
 else     if (cmd.equals("-copy-from")) {
      inputRoot=new Path(args[++i]);
      FSUtils.setRootDir(conf,inputRoot);
    }
 else     if (cmd.equals("-no-checksum-verify")) {
      verifyChecksum=false;
    }
 else     if (cmd.equals("-no-target-verify")) {
      verifyTarget=false;
    }
 else     if (cmd.equals("-mappers")) {
      mappers=Integer.parseInt(args[++i]);
    }
 else     if (cmd.equals("-chuser")) {
      filesUser=args[++i];
    }
 else     if (cmd.equals("-chgroup")) {
      filesGroup=args[++i];
    }
 else     if (cmd.equals("-bandwidth")) {
      bandwidthMB=Integer.parseInt(args[++i]);
    }
 else     if (cmd.equals("-chmod")) {
      filesMode=Integer.parseInt(args[++i],8);
    }
 else     if (cmd.equals("-overwrite")) {
      overwrite=true;
    }
 else     if (cmd.equals("-h") || cmd.equals("--help")) {
      printUsageAndExit();
    }
 else {
      System.err.println("UNEXPECTED: " + cmd);
      printUsageAndExit();
    }
  }
  if (snapshotName == null) {
    System.err.println("Snapshot name not provided.");
    printUsageAndExit();
  }
  if (outputRoot == null) {
    System.err.println("Destination file-system not provided.");
    printUsageAndExit();
  }
  if (targetName == null) {
    targetName=snapshotName;
  }
  conf.setBoolean("fs." + inputRoot.toUri().getScheme() + ".impl.disable.cache",true);
  FileSystem inputFs=FileSystem.get(inputRoot.toUri(),conf);
  LOG.debug("inputFs=" + inputFs.getUri().toString() + " inputRoot="+ inputRoot);
  conf.setBoolean("fs." + outputRoot.toUri().getScheme() + ".impl.disable.cache",true);
  FileSystem outputFs=FileSystem.get(outputRoot.toUri(),conf);
  LOG.debug("outputFs=" + outputFs.getUri().toString() + " outputRoot="+ outputRoot.toString());
  boolean skipTmp=conf.getBoolean(CONF_SKIP_TMP,false);
  Path snapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshotName,inputRoot);
  Path snapshotTmpDir=SnapshotDescriptionUtils.getWorkingSnapshotDir(targetName,outputRoot);
  Path outputSnapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(targetName,outputRoot);
  Path initialOutputSnapshotDir=skipTmp ? outputSnapshotDir : snapshotTmpDir;
  if (outputFs.exists(outputSnapshotDir)) {
    if (overwrite) {
      if (!outputFs.delete(outputSnapshotDir,true)) {
        System.err.println("Unable to remove existing snapshot directory: " + outputSnapshotDir);
        return 1;
      }
    }
 else {
      System.err.println("The snapshot '" + targetName + "' already exists in the destination: "+ outputSnapshotDir);
      return 1;
    }
  }
  if (!skipTmp) {
    if (outputFs.exists(snapshotTmpDir)) {
      if (overwrite) {
        if (!outputFs.delete(snapshotTmpDir,true)) {
          System.err.println("Unable to remove existing snapshot tmp directory: " + snapshotTmpDir);
          return 1;
        }
      }
 else {
        System.err.println("A snapshot with the same name '" + targetName + "' may be in-progress");
        System.err.println("Please check " + snapshotTmpDir + ". If the snapshot has completed, ");
        System.err.println("consider removing " + snapshotTmpDir + " by using the -overwrite option");
        return 1;
      }
    }
  }
  try {
    LOG.info("Copy Snapshot Manifest");
    FileUtil.copy(inputFs,snapshotDir,outputFs,initialOutputSnapshotDir,false,false,conf);
  }
 catch (  IOException e) {
    throw new ExportSnapshotException("Failed to copy the snapshot directory: from=" + snapshotDir + " to="+ initialOutputSnapshotDir,e);
  }
  if (!targetName.equals(snapshotName)) {
    SnapshotDescription snapshotDesc=SnapshotDescriptionUtils.readSnapshotInfo(inputFs,snapshotDir).toBuilder().setName(targetName).build();
    SnapshotDescriptionUtils.writeSnapshotInfo(snapshotDesc,snapshotTmpDir,outputFs);
  }
  try {
    runCopyJob(inputRoot,outputRoot,snapshotName,snapshotDir,verifyChecksum,filesUser,filesGroup,filesMode,mappers,bandwidthMB);
    LOG.info("Finalize the Snapshot Export");
    if (!skipTmp) {
      if (!outputFs.rename(snapshotTmpDir,outputSnapshotDir)) {
        throw new ExportSnapshotException("Unable to rename snapshot directory from=" + snapshotTmpDir + " to="+ outputSnapshotDir);
      }
    }
    if (verifyTarget) {
      LOG.info("Verify snapshot integrity");
      verifySnapshot(conf,outputFs,outputRoot,outputSnapshotDir);
    }
    LOG.info("Export Completed: " + targetName);
    return 0;
  }
 catch (  Exception e) {
    LOG.error("Snapshot export failed",e);
    if (!skipTmp) {
      outputFs.delete(snapshotTmpDir,true);
    }
    outputFs.delete(outputSnapshotDir,true);
    return 1;
  }
 finally {
    IOUtils.closeStream(inputFs);
    IOUtils.closeStream(outputFs);
  }
}
