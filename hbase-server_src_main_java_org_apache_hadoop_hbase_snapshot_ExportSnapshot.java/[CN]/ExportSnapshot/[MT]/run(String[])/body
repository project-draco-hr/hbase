{
  boolean verifyChecksum=true;
  String snapshotName=null;
  boolean overwrite=false;
  String filesGroup=null;
  String filesUser=null;
  Path outputRoot=null;
  int bandwidthMB=Integer.MAX_VALUE;
  int filesMode=0;
  int mappers=0;
  Configuration conf=getConf();
  for (int i=0; i < args.length; i++) {
    String cmd=args[i];
    try {
      if (cmd.equals("-snapshot")) {
        snapshotName=args[++i];
      }
 else       if (cmd.equals("-copy-to")) {
        outputRoot=new Path(args[++i]);
      }
 else       if (cmd.equals("-copy-from")) {
        Path sourceDir=new Path(args[++i]);
        URI defaultFs=sourceDir.getFileSystem(conf).getUri();
        FSUtils.setFsDefault(conf,new Path(defaultFs));
        FSUtils.setRootDir(conf,sourceDir);
      }
 else       if (cmd.equals("-no-checksum-verify")) {
        verifyChecksum=false;
      }
 else       if (cmd.equals("-mappers")) {
        mappers=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-chuser")) {
        filesUser=args[++i];
      }
 else       if (cmd.equals("-chgroup")) {
        filesGroup=args[++i];
      }
 else       if (cmd.equals("-bandwidth")) {
        bandwidthMB=Integer.parseInt(args[++i]);
      }
 else       if (cmd.equals("-chmod")) {
        filesMode=Integer.parseInt(args[++i],8);
      }
 else       if (cmd.equals("-overwrite")) {
        overwrite=true;
      }
 else       if (cmd.equals("-h") || cmd.equals("--help")) {
        printUsageAndExit();
      }
 else {
        System.err.println("UNEXPECTED: " + cmd);
        printUsageAndExit();
      }
    }
 catch (    IOException e) {
      printUsageAndExit();
    }
  }
  if (snapshotName == null) {
    System.err.println("Snapshot name not provided.");
    printUsageAndExit();
  }
  if (outputRoot == null) {
    System.err.println("Destination file-system not provided.");
    printUsageAndExit();
  }
  Path inputRoot=FSUtils.getRootDir(conf);
  FileSystem inputFs=FileSystem.get(inputRoot.toUri(),conf);
  LOG.debug("inputFs=" + inputFs.getUri().toString() + " inputRoot="+ inputRoot);
  FileSystem outputFs=FileSystem.get(outputRoot.toUri(),conf);
  LOG.debug("outputFs=" + outputFs.getUri().toString() + " outputRoot="+ outputRoot.toString());
  Path snapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshotName,inputRoot);
  Path snapshotTmpDir=SnapshotDescriptionUtils.getWorkingSnapshotDir(snapshotName,outputRoot);
  Path outputSnapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshotName,outputRoot);
  if (outputFs.exists(outputSnapshotDir)) {
    if (overwrite) {
      if (!outputFs.delete(outputSnapshotDir,true)) {
        System.err.println("Unable to remove existing snapshot directory: " + outputSnapshotDir);
        return 1;
      }
    }
 else {
      System.err.println("The snapshot '" + snapshotName + "' already exists in the destination: "+ outputSnapshotDir);
      return 1;
    }
  }
  if (outputFs.exists(snapshotTmpDir)) {
    if (overwrite) {
      if (!outputFs.delete(snapshotTmpDir,true)) {
        System.err.println("Unable to remove existing snapshot tmp directory: " + snapshotTmpDir);
        return 1;
      }
    }
 else {
      System.err.println("A snapshot with the same name '" + snapshotName + "' may be in-progress");
      System.err.println("Please check " + snapshotTmpDir + ". If the snapshot has completed, ");
      System.err.println("consider removing " + snapshotTmpDir + " by using the -overwrite option");
      return 1;
    }
  }
  LOG.info("Loading Snapshot hfile list");
  final List<Pair<SnapshotFileInfo,Long>> files=getSnapshotFiles(inputFs,snapshotDir);
  if (mappers == 0 && files.size() > 0) {
    mappers=1 + (files.size() / conf.getInt(CONF_MAP_GROUP,10));
    mappers=Math.min(mappers,files.size());
  }
  try {
    LOG.info("Copy Snapshot Manifest");
    FileUtil.copy(inputFs,snapshotDir,outputFs,snapshotTmpDir,false,false,conf);
  }
 catch (  IOException e) {
    throw new ExportSnapshotException("Failed to copy the snapshot directory: from=" + snapshotDir + " to="+ snapshotTmpDir,e);
  }
  try {
    if (files.size() == 0) {
      LOG.warn("There are 0 store file to be copied. There may be no data in the table.");
    }
 else {
      runCopyJob(inputRoot,outputRoot,files,verifyChecksum,filesUser,filesGroup,filesMode,mappers,bandwidthMB);
    }
    LOG.info("Finalize the Snapshot Export");
    if (!outputFs.rename(snapshotTmpDir,outputSnapshotDir)) {
      throw new ExportSnapshotException("Unable to rename snapshot directory from=" + snapshotTmpDir + " to="+ outputSnapshotDir);
    }
    LOG.info("Verify snapshot validity");
    verifySnapshot(conf,outputFs,outputRoot,outputSnapshotDir);
    LOG.info("Export Completed: " + snapshotName);
    return 0;
  }
 catch (  Exception e) {
    LOG.error("Snapshot export failed",e);
    outputFs.delete(snapshotTmpDir,true);
    outputFs.delete(outputSnapshotDir,true);
    return 1;
  }
}
