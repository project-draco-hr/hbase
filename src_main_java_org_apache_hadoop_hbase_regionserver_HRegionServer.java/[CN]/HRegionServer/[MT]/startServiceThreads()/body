{
  String n=Thread.currentThread().getName();
  UncaughtExceptionHandler handler=new UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      abort("Uncaught exception in service thread " + t.getName(),e);
    }
  }
;
  this.service=new ExecutorService(getServerName().toString());
  this.service.startExecutorService(ExecutorType.RS_OPEN_REGION,conf.getInt("hbase.regionserver.executor.openregion.threads",3));
  this.service.startExecutorService(ExecutorType.RS_OPEN_ROOT,conf.getInt("hbase.regionserver.executor.openroot.threads",1));
  this.service.startExecutorService(ExecutorType.RS_OPEN_META,conf.getInt("hbase.regionserver.executor.openmeta.threads",1));
  this.service.startExecutorService(ExecutorType.RS_CLOSE_REGION,conf.getInt("hbase.regionserver.executor.closeregion.threads",3));
  this.service.startExecutorService(ExecutorType.RS_CLOSE_ROOT,conf.getInt("hbase.regionserver.executor.closeroot.threads",1));
  this.service.startExecutorService(ExecutorType.RS_CLOSE_META,conf.getInt("hbase.regionserver.executor.closemeta.threads",1));
  Threads.setDaemonThreadRunning(this.hlogRoller,n + ".logRoller",handler);
  Threads.setDaemonThreadRunning(this.cacheFlusher,n + ".cacheFlusher",handler);
  Threads.setDaemonThreadRunning(this.majorCompactionChecker,n + ".majorCompactionChecker",handler);
  this.leases.setName(n + ".leaseChecker");
  this.leases.start();
  this.webuiport=putUpWebUI();
  if (this.replicationHandler != null) {
    this.replicationHandler.startReplicationServices();
  }
  this.rpcServer.start();
  this.splitLogWorker=new SplitLogWorker(this.zooKeeper,this.getConfiguration(),this.getServerName().toString());
  splitLogWorker.start();
}
