{
  try {
    String scannerName=String.valueOf(scannerId);
    InternalScanner s=this.scanners.get(scannerName);
    if (s == null) {
      throw new UnknownScannerException("Name: " + scannerName);
    }
    try {
      checkOpen();
    }
 catch (    IOException e) {
      this.leases.cancelLease(scannerName);
      throw e;
    }
    this.leases.renewLease(scannerName);
    List<Result> results=new ArrayList<Result>(nbRows);
    long currentScanResultSize=0;
    List<KeyValue> values=new ArrayList<KeyValue>();
    for (int i=0; i < nbRows && currentScanResultSize < maxScannerResultSize; i++) {
      requestCount.incrementAndGet();
      boolean moreRows=s.next(values);
      if (!values.isEmpty()) {
        for (        KeyValue kv : values) {
          currentScanResultSize+=kv.heapSize();
        }
        results.add(new Result(values));
      }
      if (!moreRows) {
        break;
      }
      values.clear();
    }
    return ((HRegion.RegionScanner)s).isFilterDone() && results.isEmpty() ? null : results.toArray(new Result[0]);
  }
 catch (  Throwable t) {
    if (t instanceof NotServingRegionException) {
      String scannerName=String.valueOf(scannerId);
      this.scanners.remove(scannerName);
    }
    throw convertThrowableToIOE(cleanup(t));
  }
}
