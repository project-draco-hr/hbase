{
  String scannerName=String.valueOf(scannerId);
  RegionScanner s=this.scanners.get(scannerName);
  if (s == null)   throw new UnknownScannerException("Name: " + scannerName);
  try {
    checkOpen();
  }
 catch (  IOException e) {
    try {
      this.leases.cancelLease(scannerName);
    }
 catch (    LeaseException le) {
      LOG.info("Server shutting down and client tried to access missing scanner " + scannerName);
    }
    throw e;
  }
  Leases.Lease lease=null;
  try {
    lease=this.leases.removeLease(scannerName);
    List<Result> results=new ArrayList<Result>(nbRows);
    long currentScanResultSize=0;
    List<KeyValue> values=new ArrayList<KeyValue>();
    HRegion region=getRegion(s.getRegionInfo().getRegionName());
    if (region != null && region.getCoprocessorHost() != null) {
      Boolean bypass=region.getCoprocessorHost().preScannerNext(s,results,nbRows);
      if (!results.isEmpty()) {
        for (        Result r : results) {
          for (          KeyValue kv : r.raw()) {
            currentScanResultSize+=kv.heapSize();
          }
        }
      }
      if (bypass != null) {
        return s.isFilterDone() && results.isEmpty() ? null : results.toArray(new Result[0]);
      }
    }
    for (int i=0; i < nbRows && currentScanResultSize < maxScannerResultSize; i++) {
      requestCount.incrementAndGet();
      boolean moreRows=s.next(values);
      if (!values.isEmpty()) {
        for (        KeyValue kv : values) {
          currentScanResultSize+=kv.heapSize();
        }
        results.add(new Result(values));
      }
      if (!moreRows) {
        break;
      }
      values.clear();
    }
    if (region != null && region.getCoprocessorHost() != null) {
      region.getCoprocessorHost().postScannerNext(s,results,nbRows,true);
    }
    return s.isFilterDone() && results.isEmpty() ? null : results.toArray(new Result[0]);
  }
 catch (  Throwable t) {
    if (t instanceof NotServingRegionException) {
      this.scanners.remove(scannerName);
    }
    throw convertThrowableToIOE(cleanup(t));
  }
 finally {
    if (this.scanners.containsKey(scannerName)) {
      if (lease != null)       this.leases.addLease(lease);
    }
  }
}
