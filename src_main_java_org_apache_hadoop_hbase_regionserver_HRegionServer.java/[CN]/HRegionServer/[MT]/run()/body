{
  this.regionServerThread=Thread.currentThread();
  boolean calledCloseUserRegions=false;
  try {
    while (!this.stopped) {
      if (tryReportForDuty())       break;
    }
    long lastMsg=0;
    List<HMsg> outboundMessages=new ArrayList<HMsg>();
    for (int tries=0; !this.stopped && isHealthy(); ) {
      if (!isClusterUp()) {
        if (this.onlineRegions.isEmpty()) {
          stop("Exiting; cluster shutdown set and not carrying any regions");
        }
 else         if (!calledCloseUserRegions) {
          closeUserRegions(this.abortRequested);
          calledCloseUserRegions=true;
        }
      }
      this.catalogTracker.waitForRoot();
      long now=System.currentTimeMillis();
      if ((now - lastMsg) >= msgInterval || !outboundMessages.isEmpty()) {
        try {
          doMetrics();
          tryRegionServerReport(outboundMessages);
          lastMsg=System.currentTimeMillis();
          tries=0;
          if (this.stopped)           continue;
        }
 catch (        Exception e) {
          if (e instanceof IOException) {
            e=RemoteExceptionHandler.checkIOException((IOException)e);
          }
          if (e instanceof YouAreDeadException) {
            throw e;
          }
          tries++;
          if (tries > 0 && (tries % this.numRetries) == 0) {
            checkFileSystem();
          }
          if (this.stopped) {
            continue;
          }
          LOG.warn("Attempt=" + tries,e);
          lastMsg=System.currentTimeMillis();
        }
      }
      now=System.currentTimeMillis();
      HMsg msg=this.outboundMsgs.poll((msgInterval - (now - lastMsg)),TimeUnit.MILLISECONDS);
      if (msg != null)       outboundMessages.add(msg);
    }
  }
 catch (  Throwable t) {
    if (!checkOOME(t)) {
      abort("Unhandled exception: " + t.getMessage(),t);
    }
  }
  this.leases.closeAfterLeasesExpire();
  this.server.stop();
  if (this.infoServer != null) {
    LOG.info("Stopping infoServer");
    try {
      this.infoServer.stop();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  LruBlockCache c=(LruBlockCache)StoreFile.getBlockCache(this.conf);
  if (c != null) {
    c.shutdown();
  }
  cacheFlusher.interruptIfNecessary();
  compactSplitThread.interruptIfNecessary();
  hlogRoller.interruptIfNecessary();
  this.majorCompactionChecker.interrupt();
  if (killed) {
  }
 else   if (abortRequested) {
    if (this.fsOk) {
      closeAllRegions(abortRequested);
      closeWAL(false);
    }
    LOG.info("aborting server at: " + this.serverInfo.getServerName());
  }
 else {
    closeAllRegions(abortRequested);
    closeWAL(true);
    closeAllScanners();
    LOG.info("stopping server at: " + this.serverInfo.getServerName());
  }
  waitOnAllRegionsToClose();
  if (this.hbaseMaster != null) {
    HBaseRPC.stopProxy(this.hbaseMaster);
    this.hbaseMaster=null;
  }
  this.leases.close();
  HConnectionManager.deleteConnection(conf,true);
  this.zooKeeper.close();
  if (!killed) {
    join();
  }
  LOG.info(Thread.currentThread().getName() + " exiting");
}
