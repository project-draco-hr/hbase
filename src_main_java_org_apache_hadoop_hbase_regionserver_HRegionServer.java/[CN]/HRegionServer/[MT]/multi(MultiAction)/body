{
  MultiResponse response=new MultiResponse();
  for (  Map.Entry<byte[],List<Action>> e : multi.actions.entrySet()) {
    byte[] regionName=e.getKey();
    List<Action> actionsForRegion=e.getValue();
    Collections.sort(actionsForRegion);
    Row action=null;
    try {
      for (      Action a : actionsForRegion) {
        action=a.getAction();
        if (action instanceof Delete) {
          delete(regionName,(Delete)action);
          response.add(regionName,new Pair<Integer,Result>(a.getOriginalIndex(),new Result()));
        }
 else         if (action instanceof Get) {
          response.add(regionName,new Pair<Integer,Result>(a.getOriginalIndex(),get(regionName,(Get)action)));
        }
 else         if (action instanceof Put) {
          put(regionName,(Put)action);
          response.add(regionName,new Pair<Integer,Result>(a.getOriginalIndex(),new Result()));
        }
 else {
          LOG.debug("Error: invalid Action, row must be a Get, Delete or Put.");
          throw new IllegalArgumentException("Invalid Action, row must be a Get, Delete or Put.");
        }
      }
    }
 catch (    IOException ioe) {
      if (multi.size() == 1)       throw ioe;
      LOG.debug("Exception processing " + org.apache.commons.lang.StringUtils.abbreviate(action.toString(),64) + "; "+ ioe.getMessage());
      response.add(regionName,null);
    }
  }
  return response;
}
