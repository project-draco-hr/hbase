{
  this.metrics.regions.set(this.onlineRegions.size());
  this.metrics.incrementRequests(this.requestCount.get());
  int stores=0;
  int storefiles=0;
  long memstoreSize=0;
  long storefileIndexSize=0;
synchronized (this.onlineRegions) {
    for (    Map.Entry<String,HRegion> e : this.onlineRegions.entrySet()) {
      HRegion r=e.getValue();
      memstoreSize+=r.memstoreSize.get();
synchronized (r.stores) {
        stores+=r.stores.size();
        for (        Map.Entry<byte[],Store> ee : r.stores.entrySet()) {
          Store store=ee.getValue();
          storefiles+=store.getStorefilesCount();
          storefileIndexSize+=store.getStorefilesIndexSize();
        }
      }
    }
  }
  this.metrics.stores.set(stores);
  this.metrics.storefiles.set(storefiles);
  this.metrics.memstoreSizeMB.set((int)(memstoreSize / (1024 * 1024)));
  this.metrics.storefileIndexSizeMB.set((int)(storefileIndexSize / (1024 * 1024)));
  this.metrics.compactionQueueSize.set(compactSplitThread.getCompactionQueueSize());
  LruBlockCache lruBlockCache=(LruBlockCache)StoreFile.getBlockCache(conf);
  if (lruBlockCache != null) {
    this.metrics.blockCacheCount.set(lruBlockCache.size());
    this.metrics.blockCacheFree.set(lruBlockCache.getFreeSize());
    this.metrics.blockCacheSize.set(lruBlockCache.getCurrentSize());
    CacheStats cacheStats=lruBlockCache.getStats();
    this.metrics.blockCacheHitCount.set(cacheStats.getHitCount());
    this.metrics.blockCacheMissCount.set(cacheStats.getMissCount());
    this.metrics.blockCacheEvictedCount.set(lruBlockCache.getEvictedCount());
    double ratio=lruBlockCache.getStats().getHitRatio();
    int percent=(int)(ratio * 100);
    this.metrics.blockCacheHitRatio.set(percent);
    ratio=lruBlockCache.getStats().getHitCachingRatio();
    percent=(int)(ratio * 100);
    this.metrics.blockCacheHitCachingRatio.set(percent);
  }
}
