{
  this.metrics.regions.set(this.onlineRegions.size());
  this.metrics.incrementRequests(this.requestCount.get());
  this.metrics.requests.intervalHeartBeat();
  int stores=0;
  int storefiles=0;
  long memstoreSize=0;
  int readRequestsCount=0;
  int writeRequestsCount=0;
  long storefileIndexSize=0;
  HDFSBlocksDistribution hdfsBlocksDistribution=new HDFSBlocksDistribution();
  long totalStaticIndexSize=0;
  long totalStaticBloomSize=0;
  long totalMslabWaste=0;
  long tmpfiles;
  long tmpindex;
  long tmpfilesize;
  long tmpbloomsize;
  long tmpstaticsize;
  long tmpMslabWaste;
  String cfname;
  Map<String,MutableDouble> tempVals=new HashMap<String,MutableDouble>();
  for (  Map.Entry<String,HRegion> e : this.onlineRegions.entrySet()) {
    HRegion r=e.getValue();
    memstoreSize+=r.memstoreSize.get();
    readRequestsCount+=r.readRequestsCount.get();
    writeRequestsCount+=r.writeRequestsCount.get();
synchronized (r.stores) {
      stores+=r.stores.size();
      for (      Map.Entry<byte[],Store> ee : r.stores.entrySet()) {
        Store store=ee.getValue();
        tmpfiles=store.getStorefilesCount();
        tmpindex=store.getStorefilesIndexSize();
        tmpfilesize=store.getStorefilesSize();
        tmpbloomsize=store.getTotalStaticBloomSize();
        tmpstaticsize=store.getTotalStaticIndexSize();
        tmpMslabWaste=store.memstore.getMslabWaste();
        cfname="cf." + store.toString();
        this.incrMap(tempVals,cfname + ".storeFileCount",tmpfiles);
        this.incrMap(tempVals,cfname + ".storeFileIndexSizeMB",(tmpindex / (1024.0 * 1024)));
        this.incrMap(tempVals,cfname + ".storeFileSizeMB",(tmpfilesize / (1024.0 * 1024)));
        this.incrMap(tempVals,cfname + ".staticBloomSizeKB",(tmpbloomsize / 1024.0));
        this.incrMap(tempVals,cfname + ".memstoreSizeMB",(store.getMemStoreSize() / (1024.0 * 1024)));
        this.incrMap(tempVals,cfname + ".staticIndexSizeKB",tmpstaticsize / 1024.0);
        this.incrMap(tempVals,cfname + ".mslabWasteKB",tmpMslabWaste / 1024.0);
        storefiles+=tmpfiles;
        storefileIndexSize+=tmpindex;
        totalStaticIndexSize+=tmpstaticsize;
        totalStaticBloomSize+=tmpbloomsize;
        totalMslabWaste+=tmpMslabWaste;
      }
    }
    hdfsBlocksDistribution.add(r.getHDFSBlocksDistribution());
  }
  for (  Entry<String,MutableDouble> e : tempVals.entrySet()) {
    HRegion.setNumericMetric(e.getKey(),e.getValue().longValue());
  }
  this.metrics.stores.set(stores);
  this.metrics.storefiles.set(storefiles);
  this.metrics.memstoreSizeMB.set((int)(memstoreSize / (1024 * 1024)));
  this.metrics.storefileIndexSizeMB.set((int)(storefileIndexSize / (1024 * 1024)));
  this.metrics.rootIndexSizeKB.set((int)(storefileIndexSize / 1024));
  this.metrics.totalStaticIndexSizeKB.set((int)(totalStaticIndexSize / 1024));
  this.metrics.totalStaticBloomSizeKB.set((int)(totalStaticBloomSize / 1024));
  this.metrics.totalMslabWasteKB.set((int)(totalMslabWaste / 1024));
  this.metrics.readRequestsCount.set(readRequestsCount);
  this.metrics.writeRequestsCount.set(writeRequestsCount);
  BlockCache blockCache=cacheConfig.getBlockCache();
  if (blockCache != null) {
    this.metrics.blockCacheCount.set(blockCache.size());
    this.metrics.blockCacheFree.set(blockCache.getFreeSize());
    this.metrics.blockCacheSize.set(blockCache.getCurrentSize());
    CacheStats cacheStats=blockCache.getStats();
    this.metrics.blockCacheHitCount.set(cacheStats.getHitCount());
    this.metrics.blockCacheMissCount.set(cacheStats.getMissCount());
    this.metrics.blockCacheEvictedCount.set(blockCache.getEvictedCount());
    double ratio=blockCache.getStats().getHitRatio();
    int percent=(int)(ratio * 100);
    this.metrics.blockCacheHitRatio.set(percent);
    ratio=blockCache.getStats().getHitCachingRatio();
    percent=(int)(ratio * 100);
    this.metrics.blockCacheHitCachingRatio.set(percent);
  }
  float localityIndex=hdfsBlocksDistribution.getBlockLocalityIndex(getServerName().getHostname());
  int percent=(int)(localityIndex * 100);
  this.metrics.hdfsBlocksLocalityIndex.set(percent);
}
