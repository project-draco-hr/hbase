{
  this.metrics.regions.set(this.onlineRegions.size());
  this.metrics.incrementRequests(this.requestCount.get());
  int stores=0;
  int storefiles=0;
  long memstoreSize=0;
  int readRequestsCount=0;
  int writeRequestsCount=0;
  long storefileIndexSize=0;
  for (  Map.Entry<String,HRegion> e : this.onlineRegions.entrySet()) {
    HRegion r=e.getValue();
    memstoreSize+=r.memstoreSize.get();
    readRequestsCount+=r.readRequestsCount.get();
    writeRequestsCount+=r.writeRequestsCount.get();
synchronized (r.stores) {
      stores+=r.stores.size();
      for (      Map.Entry<byte[],Store> ee : r.stores.entrySet()) {
        Store store=ee.getValue();
        storefiles+=store.getStorefilesCount();
        storefileIndexSize+=store.getStorefilesIndexSize();
      }
    }
  }
  this.metrics.stores.set(stores);
  this.metrics.storefiles.set(storefiles);
  this.metrics.memstoreSizeMB.set((int)(memstoreSize / (1024 * 1024)));
  this.metrics.readRequestsCount.set(readRequestsCount);
  this.metrics.writeRequestsCount.set(writeRequestsCount);
  this.metrics.storefileIndexSizeMB.set((int)(storefileIndexSize / (1024 * 1024)));
  this.metrics.compactionQueueSize.set(compactSplitThread.getCompactionQueueSize());
  this.metrics.flushQueueSize.set(cacheFlusher.getFlushQueueSize());
  BlockCache blockCache=StoreFile.getBlockCache(conf);
  if (blockCache != null) {
    this.metrics.blockCacheCount.set(blockCache.size());
    this.metrics.blockCacheFree.set(blockCache.getFreeSize());
    this.metrics.blockCacheSize.set(blockCache.getCurrentSize());
    CacheStats cacheStats=blockCache.getStats();
    this.metrics.blockCacheHitCount.set(cacheStats.getHitCount());
    this.metrics.blockCacheMissCount.set(cacheStats.getMissCount());
    this.metrics.blockCacheEvictedCount.set(blockCache.getEvictedCount());
    double ratio=blockCache.getStats().getHitRatio();
    int percent=(int)(ratio * 100);
    this.metrics.blockCacheHitRatio.set(percent);
    ratio=blockCache.getStats().getHitCachingRatio();
    percent=(int)(ratio * 100);
    this.metrics.blockCacheHitCachingRatio.set(percent);
  }
}
