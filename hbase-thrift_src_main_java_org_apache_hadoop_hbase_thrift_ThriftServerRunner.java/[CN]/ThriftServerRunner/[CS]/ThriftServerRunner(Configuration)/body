{
  UserProvider userProvider=UserProvider.instantiate(conf);
  boolean securityEnabled=userProvider.isHadoopSecurityEnabled() && userProvider.isHBaseSecurityEnabled();
  if (securityEnabled) {
    host=Strings.domainNamePointerToHostName(DNS.getDefaultHost(conf.get("hbase.thrift.dns.interface","default"),conf.get("hbase.thrift.dns.nameserver","default")));
    userProvider.login("hbase.thrift.keytab.file","hbase.thrift.kerberos.principal",host);
  }
  this.conf=HBaseConfiguration.create(conf);
  this.listenPort=conf.getInt(PORT_CONF_KEY,DEFAULT_LISTEN_PORT);
  this.metrics=new ThriftMetrics(conf,ThriftMetrics.ThriftServerType.ONE);
  this.hbaseHandler=new HBaseHandler(conf,userProvider);
  this.hbaseHandler.initMetrics(metrics);
  this.handler=HbaseHandlerMetricsProxy.newInstance(hbaseHandler,metrics,conf);
  this.realUser=userProvider.getCurrent().getUGI();
  qop=conf.get(THRIFT_QOP_KEY);
  if (qop != null) {
    if (!qop.equals("auth") && !qop.equals("auth-int") && !qop.equals("auth-conf")) {
      throw new IOException("Invalid hbase.thrift.security.qop: " + qop + ", it must be 'auth', 'auth-int', or 'auth-conf'");
    }
    if (!securityEnabled) {
      throw new IOException("Thrift server must" + " run in secure mode to support authentication");
    }
  }
}
