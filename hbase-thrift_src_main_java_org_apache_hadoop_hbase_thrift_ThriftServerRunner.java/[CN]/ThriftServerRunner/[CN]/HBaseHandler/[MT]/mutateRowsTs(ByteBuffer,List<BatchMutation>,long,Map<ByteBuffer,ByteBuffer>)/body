{
  List<Put> puts=new ArrayList<Put>();
  List<Delete> deletes=new ArrayList<Delete>();
  for (  BatchMutation batch : rowBatches) {
    byte[] row=getBytes(batch.row);
    List<Mutation> mutations=batch.mutations;
    Delete delete=new Delete(row);
    addAttributes(delete,attributes);
    Put put=new Put(row,timestamp);
    addAttributes(put,attributes);
    for (    Mutation m : mutations) {
      byte[][] famAndQf=KeyValue.parseColumn(getBytes(m.column));
      if (m.isDelete) {
        if (famAndQf.length == 1) {
          delete.addFamily(famAndQf[0],timestamp);
        }
 else {
          delete.addColumns(famAndQf[0],famAndQf[1],timestamp);
        }
        delete.setDurability(m.writeToWAL ? Durability.SYNC_WAL : Durability.SKIP_WAL);
      }
 else {
        if (famAndQf.length == 1) {
          LOG.warn("No column qualifier specified. Delete is the only mutation supported " + "over the whole column family.");
        }
        if (famAndQf.length == 2) {
          put.addImmutable(famAndQf[0],famAndQf[1],m.value != null ? getBytes(m.value) : HConstants.EMPTY_BYTE_ARRAY);
        }
 else {
          throw new IllegalArgumentException("Invalid famAndQf provided.");
        }
        put.setDurability(m.writeToWAL ? Durability.SYNC_WAL : Durability.SKIP_WAL);
      }
    }
    if (!delete.isEmpty())     deletes.add(delete);
    if (!put.isEmpty())     puts.add(put);
  }
  Table table=null;
  try {
    table=getTable(tableName);
    if (!puts.isEmpty())     table.put(puts);
    if (!deletes.isEmpty())     table.delete(deletes);
  }
 catch (  IOException e) {
    LOG.warn(e.getMessage(),e);
    throw new IOError(Throwables.getStackTraceAsString(e));
  }
catch (  IllegalArgumentException e) {
    LOG.warn(e.getMessage(),e);
    throw new IllegalArgument(Throwables.getStackTraceAsString(e));
  }
 finally {
    closeTable(table);
  }
}
