{
  int start=inputStream.available();
  HFileProtos.FileTrailerProto.Builder builder=HFileProtos.FileTrailerProto.newBuilder();
  builder.mergeDelimitedFrom(inputStream);
  int size=start - inputStream.available();
  inputStream.skip(getTrailerSize() - NOT_PB_SIZE - size);
  if (builder.hasFileInfoOffset()) {
    fileInfoOffset=builder.getFileInfoOffset();
  }
  if (builder.hasLoadOnOpenDataOffset()) {
    loadOnOpenDataOffset=builder.getLoadOnOpenDataOffset();
  }
  if (builder.hasUncompressedDataIndexSize()) {
    uncompressedDataIndexSize=builder.getUncompressedDataIndexSize();
  }
  if (builder.hasTotalUncompressedBytes()) {
    totalUncompressedBytes=builder.getTotalUncompressedBytes();
  }
  if (builder.hasDataIndexCount()) {
    dataIndexCount=builder.getDataIndexCount();
  }
  if (builder.hasMetaIndexCount()) {
    metaIndexCount=builder.getMetaIndexCount();
  }
  if (builder.hasEntryCount()) {
    entryCount=builder.getEntryCount();
  }
  if (builder.hasNumDataIndexLevels()) {
    numDataIndexLevels=builder.getNumDataIndexLevels();
  }
  if (builder.hasFirstDataBlockOffset()) {
    firstDataBlockOffset=builder.getFirstDataBlockOffset();
  }
  if (builder.hasLastDataBlockOffset()) {
    lastDataBlockOffset=builder.getLastDataBlockOffset();
  }
  if (builder.hasComparatorClassName()) {
    comparatorClassName=builder.getComparatorClassName();
  }
  if (builder.hasCompressionCodec()) {
    compressionCodec=Compression.Algorithm.values()[builder.getCompressionCodec()];
  }
 else {
    compressionCodec=Compression.Algorithm.NONE;
  }
}
