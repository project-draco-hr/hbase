{
  EncryptionProtos.WrappedKey wrappedKey=EncryptionProtos.WrappedKey.PARSER.parseDelimitedFrom(new ByteArrayInputStream(value));
  String algorithm=conf.get(HConstants.CRYPTO_KEY_ALGORITHM_CONF_KEY,HConstants.CIPHER_AES);
  Cipher cipher=Encryption.getCipher(conf,algorithm);
  if (cipher == null) {
    throw new RuntimeException("Cipher '" + algorithm + "' not available");
  }
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  byte[] iv=wrappedKey.hasIv() ? wrappedKey.getIv().toByteArray() : null;
  Encryption.decryptWithSubjectKey(out,wrappedKey.getData().newInput(),wrappedKey.getLength(),subject,conf,cipher,iv);
  byte[] keyBytes=out.toByteArray();
  if (wrappedKey.hasHash()) {
    if (!Bytes.equals(wrappedKey.getHash().toByteArray(),Encryption.hash128(keyBytes))) {
      throw new KeyException("Key was not successfully unwrapped");
    }
  }
  return new SecretKeySpec(keyBytes,wrappedKey.getAlgorithm());
}
