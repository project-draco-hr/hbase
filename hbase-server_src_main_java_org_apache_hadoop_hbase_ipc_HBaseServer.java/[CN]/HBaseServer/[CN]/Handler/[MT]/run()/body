{
  LOG.info(getName() + ": starting");
  status.setStatus("starting");
  SERVER.set(HBaseServer.this);
  while (running) {
    try {
      status.pause("Waiting for a call");
      Call call=myCallQueue.take();
      updateCallQueueLenMetrics(myCallQueue);
      status.setStatus("Setting up call");
      status.setConnection(call.connection.getHostAddress(),call.connection.getRemotePort());
      if (LOG.isDebugEnabled())       LOG.debug(getName() + ": has #" + call.id+ " from "+ call.connection);
      String errorClass=null;
      String error=null;
      Message value=null;
      CurCall.set(call);
      Span currentRequestSpan=NullSpan.getInstance();
      try {
        if (!started)         throw new ServerNotRunningYetException("Server is not running yet");
        if (call.tinfo != null) {
          currentRequestSpan=Trace.startSpan("handling " + call.toString(),call.tinfo,Sampler.ALWAYS);
        }
        if (LOG.isDebugEnabled()) {
          UserGroupInformation remoteUser=call.connection.user;
          LOG.debug(getName() + ": call #" + call.id+ " executing as "+ (remoteUser == null ? "NULL principal" : remoteUser.getUserName()));
        }
        RequestContext.set(User.create(call.connection.user),getRemoteIp(),call.connection.protocol);
        value=call(call.connection.protocol,call.rpcRequestBody,call.timestamp,status);
      }
 catch (      Throwable e) {
        LOG.debug(getName() + ", call " + call+ ": error: "+ e,e);
        errorClass=e.getClass().getName();
        error=StringUtils.stringifyException(e);
      }
 finally {
        currentRequestSpan.stop();
        RequestContext.clear();
      }
      CurCall.set(null);
      callQueueSize.add(call.getSize() * -1);
      if (!call.isDelayed() || !call.isReturnValueDelayed()) {
        call.setResponse(value,errorClass == null ? Status.SUCCESS : Status.ERROR,errorClass,error);
      }
      call.sendResponseIfReady();
      status.markComplete("Sent response");
    }
 catch (    InterruptedException e) {
      if (running) {
        LOG.info(getName() + " caught: " + StringUtils.stringifyException(e));
      }
    }
catch (    OutOfMemoryError e) {
      if (errorHandler != null) {
        if (errorHandler.checkOOME(e)) {
          LOG.info(getName() + ": exiting on OOME");
          return;
        }
      }
 else {
        throw e;
      }
    }
catch (    ClosedChannelException cce) {
      LOG.warn(getName() + " caught a ClosedChannelException, " + "this means that the server was processing a "+ "request but the client went away. The error message was: "+ cce.getMessage());
    }
catch (    Exception e) {
      LOG.warn(getName() + " caught: " + StringUtils.stringifyException(e));
    }
  }
  LOG.info(getName() + ": exiting");
}
