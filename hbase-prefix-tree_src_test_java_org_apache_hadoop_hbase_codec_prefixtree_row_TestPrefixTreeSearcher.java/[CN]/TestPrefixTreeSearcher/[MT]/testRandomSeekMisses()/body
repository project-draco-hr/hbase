{
  CellSearcher searcher=null;
  List<Integer> rowStartIndexes=rows.getRowStartIndexes();
  try {
    searcher=DecoderFactory.checkOut(block,true);
    for (    boolean beforeVsAfterOnMiss : new boolean[]{true,false}) {
      for (int i=0; i < rows.getInputs().size(); ++i) {
        KeyValue kv=rows.getInputs().get(i);
        Cell inputNextRow=CellUtil.createFirstOnNextRow(kv);
        CellScannerPosition position=beforeVsAfterOnMiss ? searcher.positionAtOrBefore(inputNextRow) : searcher.positionAtOrAfter(inputNextRow);
        boolean isFirstInRow=rowStartIndexes.contains(i);
        if (isFirstInRow) {
          int rowIndex=rowStartIndexes.indexOf(i);
          if (rowIndex < rowStartIndexes.size() - 1) {
            if (beforeVsAfterOnMiss) {
              Assert.assertEquals(CellScannerPosition.BEFORE,position);
            }
 else {
              Assert.assertEquals(CellScannerPosition.AFTER,position);
            }
            int expectedInputIndex=beforeVsAfterOnMiss ? rowStartIndexes.get(rowIndex + 1) - 1 : rowStartIndexes.get(rowIndex + 1);
            Assert.assertEquals(rows.getInputs().get(expectedInputIndex),searcher.current());
          }
        }
        KeyValue inputPreviousKv=KeyValueUtil.previousKey(kv);
        boolean hit=searcher.positionAt(inputPreviousKv);
        Assert.assertFalse(hit);
        position=searcher.positionAtOrAfter(inputPreviousKv);
        if (CollectionUtils.isLastIndex(rows.getInputs(),i)) {
          Assert.assertTrue(CellScannerPosition.AFTER_LAST == position);
        }
 else {
          Assert.assertTrue(CellScannerPosition.AFTER == position);
          Assert.assertEquals(rows.getInputs().get(i + 1),searcher.current());
        }
      }
    }
  }
  finally {
    DecoderFactory.checkIn(searcher);
  }
}
