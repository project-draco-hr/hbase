{
  Configuration schedConf=HBaseConfiguration.create();
  schedConf.setInt(HConstants.REGION_SERVER_HANDLER_COUNT,0);
  schedConf.setInt("hbase.ipc.server.max.callqueue.length",5);
  PriorityFunction priority=mock(PriorityFunction.class);
  when(priority.getPriority(any(RequestHeader.class),any(Message.class),any(User.class))).thenReturn(HConstants.NORMAL_QOS);
  SimpleRpcScheduler scheduler=new SimpleRpcScheduler(schedConf,0,0,0,priority,HConstants.QOS_THRESHOLD);
  try {
    scheduler.start();
    CallRunner putCallTask=mock(CallRunner.class);
    RpcServer.Call putCall=mock(RpcServer.Call.class);
    putCall.param=RequestConverter.buildMutateRequest(Bytes.toBytes("abc"),new Put(Bytes.toBytes("row")));
    RequestHeader putHead=RequestHeader.newBuilder().setMethodName("mutate").build();
    when(putCallTask.getCall()).thenReturn(putCall);
    when(putCall.getHeader()).thenReturn(putHead);
    assertTrue(scheduler.dispatch(putCallTask));
    schedConf.setInt("hbase.ipc.server.max.callqueue.length",0);
    scheduler.onConfigurationChange(schedConf);
    assertFalse(scheduler.dispatch(putCallTask));
    while (scheduler.getGeneralQueueLength() > 0) {
      Threads.sleepWithoutInterrupt(100);
    }
    schedConf.setInt("hbase.ipc.server.max.callqueue.length",1);
    scheduler.onConfigurationChange(schedConf);
    assertTrue(scheduler.dispatch(putCallTask));
  }
  finally {
    scheduler.stop();
  }
}
