{
  HTableDescriptor desc=new HTableDescriptor(SINGLE_REGION_TABLE_NAME);
  desc.addFamily(new HColumnDescriptor(INPUT_COLUMN));
  desc.addFamily(new HColumnDescriptor(OUTPUT_COLUMN));
  HBaseAdmin admin=new HBaseAdmin(this.conf);
  admin.createTable(desc);
  HTable table=new HTable(conf,new Text(SINGLE_REGION_TABLE_NAME));
  try {
    for (int i=0; i < values.length; i++) {
      long lockid=table.startUpdate(new Text("row_" + String.format("%1$05d",i)));
      try {
        table.put(lockid,TEXT_INPUT_COLUMN,values[i]);
        table.commit(lockid,System.currentTimeMillis());
        lockid=-1;
      }
  finally {
        if (lockid != -1)         table.abort(lockid);
      }
    }
    LOG.info("Print table contents before map/reduce");
    scanTable(SINGLE_REGION_TABLE_NAME,true);
    @SuppressWarnings("deprecation") MiniMRCluster mrCluster=new MiniMRCluster(2,fs.getUri().toString(),1);
    try {
      JobConf jobConf=new JobConf(conf,TestTableMapReduce.class);
      jobConf.setJobName("process column contents");
      jobConf.setNumMapTasks(1);
      jobConf.setNumReduceTasks(1);
      TableMap.initJob(SINGLE_REGION_TABLE_NAME,INPUT_COLUMN,ProcessContentsMapper.class,jobConf);
      TableReduce.initJob(SINGLE_REGION_TABLE_NAME,IdentityTableReduce.class,jobConf);
      JobClient.runJob(jobConf);
    }
  finally {
      mrCluster.shutdown();
    }
    LOG.info("Print table contents after map/reduce");
    scanTable(SINGLE_REGION_TABLE_NAME,true);
    verify(SINGLE_REGION_TABLE_NAME);
  }
  finally {
    table.close();
  }
}
