{
  if (!doCommandLine(args)) {
    return null;
  }
  if (!conf.getBoolean(HConstants.REPLICATION_ENABLE_KEY,HConstants.REPLICATION_ENABLE_DEFAULT)) {
    throw new IOException("Replication needs to be enabled to verify it.");
  }
  conf.set(NAME + ".peerId",peerId);
  conf.set(NAME + ".tableName",tableName);
  conf.setLong(NAME + ".startTime",startTime);
  conf.setLong(NAME + ".endTime",endTime);
  if (families != null) {
    conf.set(NAME + ".families",families);
  }
  if (rowPrefixes != null) {
    conf.set(NAME + ".rowPrefixes",rowPrefixes);
  }
  Pair<ReplicationPeerConfig,Configuration> peerConfigPair=getPeerQuorumConfig(conf);
  ReplicationPeerConfig peerConfig=peerConfigPair.getFirst();
  String peerQuorumAddress=peerConfig.getClusterKey();
  LOG.info("Peer Quorum Address: " + peerQuorumAddress + ", Peer Configuration: "+ peerConfig.getConfiguration());
  conf.set(NAME + ".peerQuorumAddress",peerQuorumAddress);
  HBaseConfiguration.setWithPrefix(conf,PEER_CONFIG_PREFIX,peerConfig.getConfiguration().entrySet());
  conf.setInt(NAME + ".versions",versions);
  LOG.info("Number of version: " + versions);
  Job job=Job.getInstance(conf,conf.get(JOB_NAME_CONF_KEY,NAME + "_" + tableName));
  job.setJarByClass(VerifyReplication.class);
  Scan scan=new Scan();
  scan.setTimeRange(startTime,endTime);
  if (versions >= 0) {
    scan.setMaxVersions(versions);
    LOG.info("Number of versions set to " + versions);
  }
  if (families != null) {
    String[] fams=families.split(",");
    for (    String fam : fams) {
      scan.addFamily(Bytes.toBytes(fam));
    }
  }
  setRowPrefixFilter(scan,rowPrefixes);
  TableMapReduceUtil.initTableMapperJob(tableName,scan,Verifier.class,null,null,job);
  Configuration peerClusterConf=peerConfigPair.getSecond();
  TableMapReduceUtil.initCredentialsForCluster(job,peerClusterConf);
  job.setOutputFormatClass(NullOutputFormat.class);
  job.setNumReduceTasks(0);
  return job;
}
