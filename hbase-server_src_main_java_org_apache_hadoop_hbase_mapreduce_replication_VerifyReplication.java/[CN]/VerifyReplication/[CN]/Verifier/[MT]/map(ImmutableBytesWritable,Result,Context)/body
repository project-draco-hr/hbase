{
  if (replicatedScanner == null) {
    Configuration conf=context.getConfiguration();
    final Scan scan=new Scan();
    scan.setCaching(conf.getInt(TableInputFormat.SCAN_CACHEDROWS,1));
    long startTime=conf.getLong(NAME + ".startTime",0);
    long endTime=conf.getLong(NAME + ".endTime",0);
    String families=conf.get(NAME + ".families",null);
    if (families != null) {
      String[] fams=families.split(",");
      for (      String fam : fams) {
        scan.addFamily(Bytes.toBytes(fam));
      }
    }
    if (startTime != 0) {
      scan.setTimeRange(startTime,endTime == 0 ? HConstants.LATEST_TIMESTAMP : endTime);
    }
    HConnectionManager.execute(new HConnectable<Void>(conf){
      @Override public Void connect(      HConnection conn) throws IOException {
        ZooKeeperWatcher localZKW=null;
        ReplicationPeer peer=null;
        try {
          localZKW=new ZooKeeperWatcher(conf,"VerifyReplication",new Abortable(){
            @Override public void abort(            String why,            Throwable e){
            }
            @Override public boolean isAborted(){
              return false;
            }
          }
);
          ReplicationPeers rp=ReplicationFactory.getReplicationPeers(localZKW,conf,localZKW);
          rp.init();
          Configuration peerConf=rp.getPeerConf(peerId);
          if (peerConf == null) {
            throw new IOException("Couldn't get peer conf!");
          }
          HTable replicatedTable=new HTable(peerConf,conf.get(NAME + ".tableName"));
          scan.setStartRow(value.getRow());
          replicatedScanner=replicatedTable.getScanner(scan);
        }
 catch (        ReplicationException e) {
          throw new IOException("An error occured while trying to connect to the remove peer cluster",e);
        }
 finally {
          if (peer != null) {
            peer.close();
          }
          if (localZKW != null) {
            localZKW.close();
          }
        }
        return null;
      }
    }
);
  }
  Result res=replicatedScanner.next();
  try {
    Result.compareResults(value,res);
    context.getCounter(Counters.GOODROWS).increment(1);
  }
 catch (  Exception e) {
    LOG.warn("Bad row",e);
    context.getCounter(Counters.BADROWS).increment(1);
  }
}
