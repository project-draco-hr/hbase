{
  if (!isAppendSupported(conf)) {
    LOG.warn("Running on HDFS without append enabled may result in data loss");
    return;
  }
  if (!(fs instanceof DistributedFileSystem)) {
    return;
  }
  LOG.info("Recovering file " + p);
  long startWaiting=System.currentTimeMillis();
  boolean recovered=false;
  while (!recovered) {
    try {
      try {
        if (fs instanceof DistributedFileSystem) {
          DistributedFileSystem dfs=(DistributedFileSystem)fs;
          DistributedFileSystem.class.getMethod("recoverLease",new Class[]{Path.class}).invoke(dfs,p);
        }
 else {
          throw new Exception("Not a DistributedFileSystem");
        }
      }
 catch (      InvocationTargetException ite) {
        throw (IOException)ite.getCause();
      }
catch (      Exception e) {
        LOG.debug("Failed fs.recoverLease invocation, " + e.toString() + ", trying fs.append instead");
        FSDataOutputStream out=fs.append(p);
        out.close();
      }
      recovered=true;
    }
 catch (    IOException e) {
      e=RemoteExceptionHandler.checkIOException(e);
      if (e instanceof AlreadyBeingCreatedException) {
        long waitedFor=System.currentTimeMillis() - startWaiting;
        if (waitedFor > FSConstants.LEASE_SOFTLIMIT_PERIOD) {
          LOG.warn("Waited " + waitedFor + "ms for lease recovery on "+ p+ ":"+ e.getMessage());
        }
      }
 else       if (e instanceof LeaseExpiredException && e.getMessage().contains("File does not exist")) {
        throw new FileNotFoundException("The given HLog wasn't found at " + p.toString());
      }
 else {
        throw new IOException("Failed to open " + p + " for append",e);
      }
    }
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ex) {
      new InterruptedIOException().initCause(ex);
    }
  }
  LOG.info("Finished lease recover attempt for " + p);
}
