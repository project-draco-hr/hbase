{
  this.conf=HBaseConfiguration.create(conf);
  String codecClassName=conf.get(WALCellCodec.WAL_CELL_CODEC_CLASS_KEY,WALCellCodec.class.getName());
  this.conf.set(HConstants.RPC_CODEC_CONF_KEY,codecClassName);
  this.rootDir=rootDir;
  this.fs=fs;
  this.sequenceIdChecker=idChecker;
  this.csm=(BaseCoordinatedStateManager)csm;
  this.walFactory=factory;
  this.controller=new PipelineController();
  entryBuffers=new EntryBuffers(controller,this.conf.getInt("hbase.regionserver.hlog.splitlog.buffersize",128 * 1024 * 1024));
  this.minBatchSize=this.conf.getInt("hbase.regionserver.wal.logreplay.batch.size",64);
  this.distributedLogReplay=(RecoveryMode.LOG_REPLAY == mode);
  this.numWriterThreads=this.conf.getInt("hbase.regionserver.hlog.splitlog.writer.threads",3);
  if (csm != null && this.distributedLogReplay) {
    outputSink=new LogReplayOutputSink(controller,entryBuffers,numWriterThreads);
  }
 else {
    if (this.distributedLogReplay) {
      LOG.info("ZooKeeperWatcher is passed in as NULL so disable distrubitedLogRepaly.");
    }
    this.distributedLogReplay=false;
    outputSink=new LogRecoveredEditsOutputSink(controller,entryBuffers,numWriterThreads);
  }
}
