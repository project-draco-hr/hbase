{
  final ServerName serverName=this.serverName;
  try {
    if (this.shouldSplitHlog) {
      LOG.info("Splitting logs for " + serverName);
      this.services.getMasterFileSystem().splitLog(serverName);
    }
    if (isCarryingRoot()) {
      LOG.info("Server " + serverName + " was carrying ROOT. Trying to assign.");
      this.services.getAssignmentManager().regionOffline(HRegionInfo.ROOT_REGIONINFO);
      verifyAndAssignRootWithRetries();
    }
    if (isCarryingMeta()) {
      LOG.info("Server " + serverName + " was carrying META. Trying to assign.");
      this.services.getAssignmentManager().regionOffline(HRegionInfo.FIRST_META_REGIONINFO);
      this.services.getAssignmentManager().assignMeta();
    }
    if (isCarryingRoot() || isCarryingMeta()) {
      this.services.getExecutorService().submit(new ServerShutdownHandler(this.server,this.services,this.deadServers,serverName,false));
      this.deadServers.add(serverName);
      return;
    }
    List<RegionState> regionsInTransition=this.services.getAssignmentManager().processServerShutdown(this.serverName);
    NavigableMap<HRegionInfo,Result> hris=null;
    while (!this.server.isStopped()) {
      try {
        this.server.getCatalogTracker().waitForMeta();
        hris=MetaReader.getServerUserRegions(this.server.getCatalogTracker(),this.serverName);
        break;
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new IOException("Interrupted",e);
      }
catch (      IOException ioe) {
        LOG.info("Received exception accessing META during server shutdown of " + serverName + ", retrying META read",ioe);
      }
    }
    for (    RegionState rit : regionsInTransition) {
      if (!rit.isClosing() && !rit.isPendingClose()) {
        LOG.debug("Removed " + rit.getRegion().getRegionNameAsString() + " from list of regions to assign because in RIT"+ " region state: "+ rit.getState());
        hris.remove(rit.getRegion());
      }
    }
    LOG.info("Reassigning " + (hris == null ? 0 : hris.size()) + " region(s) that "+ serverName+ " was carrying (skipping "+ regionsInTransition.size()+ " regions(s) that are already in transition)");
    if (hris != null) {
      for (      Map.Entry<HRegionInfo,Result> e : hris.entrySet()) {
        if (processDeadRegion(e.getKey(),e.getValue(),this.services.getAssignmentManager(),this.server.getCatalogTracker())) {
          this.services.getAssignmentManager().assign(e.getKey(),true);
        }
      }
    }
  }
  finally {
    this.deadServers.finish(serverName);
  }
  LOG.info("Finished processing of shutdown of " + serverName);
}
