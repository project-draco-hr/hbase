{
  byte[] row=Bytes.toBytes("testrow");
  byte[] fam=Bytes.toBytes("testfamily");
  byte[] qf1=Bytes.toBytes("testqualifier1");
  byte[] qf2=Bytes.toBytes("testqualifier2");
  byte[] qf3=Bytes.toBytes("testqualifier3");
  byte[] qf4=Bytes.toBytes("testqualifier4");
  byte[] qf5=Bytes.toBytes("testqualifier5");
  byte[] qf6=Bytes.toBytes("testqualifier6");
  byte[] qf7=Bytes.toBytes("testqualifier7");
  byte[] val=Bytes.toBytes("testval");
  MemStore memstore=new MemStore();
  memstore.add(new KeyValue(row,fam,qf1,val));
  memstore.add(new KeyValue(row,fam,qf2,val));
  memstore.add(new KeyValue(row,fam,qf3,val));
  memstore.snapshot();
  KeyValueSkipListSet snapshot=memstore.getSnapshot();
  assertEquals(3,memstore.snapshot.size());
  assertEquals(0,memstore.kvset.size());
  memstore.add(new KeyValue(row,fam,qf4,val));
  memstore.add(new KeyValue(row,fam,qf5,val));
  assertEquals(2,memstore.kvset.size());
  List<KeyValueScanner> scanners=memstore.getScanners(0);
  memstore.clearSnapshot(snapshot);
  assertTrue(chunkPool.getPoolSize() == 0);
  for (  KeyValueScanner scanner : scanners) {
    scanner.close();
  }
  assertTrue(chunkPool.getPoolSize() > 0);
  chunkPool.clearChunks();
  memstore.snapshot();
  snapshot=memstore.getSnapshot();
  memstore.add(new KeyValue(row,fam,qf6,val));
  memstore.add(new KeyValue(row,fam,qf7,val));
  scanners=memstore.getScanners(0);
  for (  KeyValueScanner scanner : scanners) {
    scanner.close();
  }
  memstore.clearSnapshot(snapshot);
  assertTrue(chunkPool.getPoolSize() > 0);
}
