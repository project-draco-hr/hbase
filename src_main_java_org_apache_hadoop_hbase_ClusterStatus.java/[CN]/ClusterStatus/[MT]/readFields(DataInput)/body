{
  super.readFields(in);
  hbaseVersion=in.readUTF();
  int count=in.readInt();
  this.liveServers=new HashMap<ServerName,HServerLoad>(count);
  for (int i=0; i < count; i++) {
    byte[] versionedBytes=Bytes.readByteArray(in);
    HServerLoad hsl=new HServerLoad();
    hsl.readFields(in);
    this.liveServers.put(ServerName.parseVersionedServerName(versionedBytes),hsl);
  }
  count=in.readInt();
  deadServers=new ArrayList<ServerName>(count);
  for (int i=0; i < count; i++) {
    deadServers.add(ServerName.parseVersionedServerName(Bytes.readByteArray(in)));
  }
  count=in.readInt();
  this.intransition=new TreeMap<String,RegionState>();
  for (int i=0; i < count; i++) {
    String key=in.readUTF();
    RegionState regionState=new RegionState();
    regionState.readFields(in);
    this.intransition.put(key,regionState);
  }
  this.clusterId=in.readUTF();
  int masterCoprocessorsLength=in.readInt();
  masterCoprocessors=new String[masterCoprocessorsLength];
  for (int i=0; i < masterCoprocessorsLength; i++) {
    masterCoprocessors[i]=in.readUTF();
  }
}
