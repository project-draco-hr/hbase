{
  int version=getVersion();
  try {
    super.readFields(in);
  }
 catch (  VersionMismatchException e) {
    int startIndex=e.toString().lastIndexOf('v') + 1;
    version=Integer.parseInt(e.toString().substring(startIndex));
  }
  hbaseVersion=in.readUTF();
  int count=in.readInt();
  this.liveServers=new HashMap<ServerName,HServerLoad>(count);
  for (int i=0; i < count; i++) {
    byte[] versionedBytes=Bytes.readByteArray(in);
    HServerLoad hsl=new HServerLoad();
    hsl.readFields(in);
    this.liveServers.put(ServerName.parseVersionedServerName(versionedBytes),hsl);
  }
  count=in.readInt();
  deadServers=new ArrayList<ServerName>(count);
  for (int i=0; i < count; i++) {
    deadServers.add(ServerName.parseVersionedServerName(Bytes.readByteArray(in)));
  }
  count=in.readInt();
  this.intransition=new TreeMap<String,RegionState>();
  for (int i=0; i < count; i++) {
    String key=in.readUTF();
    RegionState regionState=new RegionState();
    regionState.readFields(in);
    this.intransition.put(key,regionState);
  }
  this.clusterId=in.readUTF();
  int masterCoprocessorsLength=in.readInt();
  masterCoprocessors=new String[masterCoprocessorsLength];
  for (int i=0; i < masterCoprocessorsLength; i++) {
    masterCoprocessors[i]=in.readUTF();
  }
  if (version >= VERSION_MASTER_BACKUPMASTERS) {
    this.master=ServerName.parseVersionedServerName(Bytes.readByteArray(in));
    count=in.readInt();
    this.backupMasters=new ArrayList<ServerName>(count);
    for (int i=0; i < count; i++) {
      this.backupMasters.add(ServerName.parseVersionedServerName(Bytes.readByteArray(in)));
    }
  }
 else {
    this.master=new ServerName(ServerName.UNKNOWN_SERVERNAME,-1,ServerName.NON_STARTCODE);
    this.backupMasters=new ArrayList<ServerName>(0);
  }
}
