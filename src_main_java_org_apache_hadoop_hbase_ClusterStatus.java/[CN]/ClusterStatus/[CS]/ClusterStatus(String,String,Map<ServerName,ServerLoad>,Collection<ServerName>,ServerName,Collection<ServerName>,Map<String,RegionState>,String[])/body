{
  this.hbaseVersion=hbaseVersion;
  Map<ServerName,HServerLoad> convertedLoad=new HashMap<ServerName,HServerLoad>();
  for (  Map.Entry<ServerName,ServerLoad> entry : servers.entrySet()) {
    ServerLoad sl=entry.getValue();
    Map<byte[],RegionLoad> regionLoad=new HashMap<byte[],RegionLoad>();
    for (    HBaseProtos.RegionLoad rl : sl.getRegionLoadsList()) {
      Set<String> regionCoprocessors=new HashSet<String>();
      for (      HBaseProtos.Coprocessor coprocessor : rl.getCoprocessorsList()) {
        regionCoprocessors.add(coprocessor.getName());
      }
      byte[] regionName=rl.getRegionSpecifier().getValue().toByteArray();
      RegionLoad converted=new RegionLoad(regionName,rl.getStores(),rl.getStorefiles(),rl.getStoreUncompressedSizeMB(),rl.getStorefileSizeMB(),rl.getMemstoreSizeMB(),rl.getStorefileIndexSizeMB(),rl.getRootIndexSizeKB(),rl.getTotalStaticIndexSizeKB(),rl.getTotalStaticBloomSizeKB(),rl.getReadRequestsCount(),rl.getWriteRequestsCount(),rl.getTotalCompactingKVs(),rl.getCurrentCompactedKVs(),regionCoprocessors);
      regionLoad.put(regionName,converted);
    }
    HServerLoad hsl=new HServerLoad(sl.getTotalNumberOfRequests(),sl.getRequestsPerSecond(),sl.getUsedHeapMB(),sl.getMaxHeapMB(),regionLoad,new HashSet<String>(Arrays.asList(masterCoprocessors)));
    convertedLoad.put(entry.getKey(),hsl);
  }
  this.liveServers=convertedLoad;
  this.deadServers=deadServers;
  this.master=master;
  this.backupMasters=backupMasters;
  this.intransition=rit;
  this.clusterId=clusterid;
  this.masterCoprocessors=masterCoprocessors;
}
