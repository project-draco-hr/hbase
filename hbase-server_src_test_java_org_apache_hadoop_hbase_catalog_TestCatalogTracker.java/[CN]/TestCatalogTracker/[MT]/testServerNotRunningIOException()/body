{
  final AdminProtocol admin=Mockito.mock(AdminProtocol.class);
  final ClientProtocol client=Mockito.mock(ClientProtocol.class);
  HConnection connection=mockConnection(admin,client);
  try {
    GetRegionInfoResponse.Builder builder=GetRegionInfoResponse.newBuilder();
    builder.setRegionInfo(HRegionInfo.convert(new HRegionInfo(Bytes.toBytes("test"))));
    Mockito.when(admin.getRegionInfo((RpcController)Mockito.any(),(GetRegionInfoRequest)Mockito.any())).thenThrow(new ServiceException(new IOException("Server not running, aborting"))).thenReturn(builder.build());
    Mockito.when(connection.getRegionServerWithRetries((ServerCallable<Result>)Mockito.any())).thenReturn(getMetaTableRowResult());
    Mockito.when(client.get((RpcController)Mockito.any(),(GetRequest)Mockito.any())).thenReturn(GetResponse.newBuilder().build());
    final CatalogTracker ct=constructAndStartCatalogTracker(connection);
    try {
      RootRegionTracker.setRootLocation(this.watcher,SN);
      ct.setMetaLocation(SN);
      final AtomicBoolean metaSet=new AtomicBoolean(false);
      final CountDownLatch latch=new CountDownLatch(1);
      Thread t=new Thread(){
        @Override public void run(){
          try {
            latch.countDown();
            metaSet.set(ct.waitForMeta(100000) != null);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
;
      t.start();
      latch.await();
      Threads.sleep(1);
      ct.setMetaLocation(SN);
      t.join();
      Assert.assertTrue(metaSet.get());
    }
  finally {
      ct.resetMetaLocation();
      RootRegionTracker.deleteRootLocation(this.watcher);
    }
  }
  finally {
    HConnectionManager.deleteConnection(UTIL.getConfiguration());
  }
}
