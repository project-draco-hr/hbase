{
  Path allFileNamesPath=new Path(conf.get(WORKING_ALLNAMES_FILE_KEY));
  SequenceFile.Reader allNamesReader=null;
  MergeSortReader visitedNamesReader=null;
  List<String> toBeArchived=new ArrayList<String>();
  try {
    allNamesReader=new SequenceFile.Reader(fs,allFileNamesPath,conf);
    visitedNamesReader=new MergeSortReader(fs,conf,new Path(conf.get(WORKING_VISITED_DIR_KEY)));
    String nextAll=(String)allNamesReader.next((String)null);
    String nextVisited=visitedNamesReader.next();
    do {
      if (nextAll != null) {
        if (nextVisited != null) {
          int compare=nextAll.compareTo(nextVisited);
          if (compare < 0) {
            toBeArchived.add(nextAll);
            nextAll=(String)allNamesReader.next((String)null);
          }
 else           if (compare > 0) {
            nextVisited=visitedNamesReader.next();
          }
 else {
            nextAll=(String)allNamesReader.next((String)null);
            nextVisited=visitedNamesReader.next();
          }
        }
 else {
          toBeArchived.add(nextAll);
          nextAll=(String)allNamesReader.next((String)null);
        }
      }
 else {
        break;
      }
    }
 while (nextAll != null || nextVisited != null);
  }
  finally {
    if (allNamesReader != null) {
      IOUtils.closeStream(allNamesReader);
    }
    if (visitedNamesReader != null) {
      visitedNamesReader.close();
    }
  }
  return toBeArchived;
}
