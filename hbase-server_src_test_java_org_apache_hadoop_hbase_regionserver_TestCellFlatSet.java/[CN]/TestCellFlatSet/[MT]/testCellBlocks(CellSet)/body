{
  final byte[] oneAndHalf=Bytes.toBytes(20);
  final byte[] f=Bytes.toBytes("f");
  final byte[] q=Bytes.toBytes("q");
  final byte[] v=Bytes.toBytes(4);
  final KeyValue outerCell=new KeyValue(oneAndHalf,f,q,10,v);
  assertEquals(NUM_OF_CELLS,cs.size());
  assertFalse(cs.contains(outerCell));
  assertTrue(cs.contains(cells[0]));
  Cell first=cs.first();
  assertTrue(cells[0].equals(first));
  assertTrue(cs.contains(cells[NUM_OF_CELLS - 1]));
  Cell last=cs.last();
  assertTrue(cells[NUM_OF_CELLS - 1].equals(last));
  SortedSet<Cell> tail=cs.tailSet(cells[1]);
  assertEquals(NUM_OF_CELLS - 1,tail.size());
  SortedSet<Cell> head=cs.headSet(cells[1]);
  assertEquals(1,head.size());
  SortedSet<Cell> tailOuter=cs.tailSet(outerCell);
  assertEquals(NUM_OF_CELLS - 1,tailOuter.size());
  Cell tailFirst=tail.first();
  assertTrue(cells[1].equals(tailFirst));
  Cell tailLast=tail.last();
  assertTrue(cells[NUM_OF_CELLS - 1].equals(tailLast));
  Cell headFirst=head.first();
  assertTrue(cells[0].equals(headFirst));
  Cell headLast=head.last();
  assertTrue(cells[0].equals(headLast));
}
