{
  for (int i=0; i != ascCells.length; ++i) {
    NavigableSet<Cell> excludeTail=cs.tailSet(ascCells[i],false);
    NavigableSet<Cell> includeTail=cs.tailSet(ascCells[i],true);
    assertEquals(ascCells.length - 1 - i,excludeTail.size());
    assertEquals(ascCells.length - i,includeTail.size());
    Iterator<Cell> excludeIter=excludeTail.iterator();
    Iterator<Cell> includeIter=includeTail.iterator();
    for (int j=1 + i; j != ascCells.length; ++j) {
      assertEquals(true,CellUtil.equals(excludeIter.next(),ascCells[j]));
    }
    for (int j=i; j != ascCells.length; ++j) {
      assertEquals(true,CellUtil.equals(includeIter.next(),ascCells[j]));
    }
  }
  assertEquals(NUM_OF_CELLS,cs.tailSet(lowerOuterCell,false).size());
  assertEquals(0,cs.tailSet(upperOuterCell,false).size());
  for (int i=0; i != ascCells.length; ++i) {
    NavigableSet<Cell> excludeHead=cs.headSet(ascCells[i],false);
    NavigableSet<Cell> includeHead=cs.headSet(ascCells[i],true);
    assertEquals(i,excludeHead.size());
    assertEquals(i + 1,includeHead.size());
    Iterator<Cell> excludeIter=excludeHead.iterator();
    Iterator<Cell> includeIter=includeHead.iterator();
    for (int j=0; j != i; ++j) {
      assertEquals(true,CellUtil.equals(excludeIter.next(),ascCells[j]));
    }
    for (int j=0; j != i + 1; ++j) {
      assertEquals(true,CellUtil.equals(includeIter.next(),ascCells[j]));
    }
  }
  assertEquals(0,cs.headSet(lowerOuterCell,false).size());
  assertEquals(NUM_OF_CELLS,cs.headSet(upperOuterCell,false).size());
  NavigableMap<Cell,Cell> sub=cs.getDelegatee().subMap(lowerOuterCell,true,upperOuterCell,true);
  assertEquals(NUM_OF_CELLS,sub.size());
  Iterator<Cell> iter=sub.values().iterator();
  for (int i=0; i != ascCells.length; ++i) {
    assertEquals(true,CellUtil.equals(iter.next(),ascCells[i]));
  }
}
