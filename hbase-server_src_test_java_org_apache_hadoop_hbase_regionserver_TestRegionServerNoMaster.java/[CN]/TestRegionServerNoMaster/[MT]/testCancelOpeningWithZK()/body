{
  closeNoZK();
  checkRegionIsClosed();
  getRS().getRegionsInTransitionInRS().put(hri.getEncodedNameAsBytes(),Boolean.TRUE);
  ZKAssign.createNodeClosing(HTU.getZooKeeperWatcher(),hri,getRS().getServerName());
  AdminProtos.CloseRegionRequest crr=RequestConverter.buildCloseRegionRequest(getRS().getServerName(),regionName,false);
  try {
    getRS().rpcServices.closeRegion(null,crr);
    Assert.assertTrue(false);
  }
 catch (  ServiceException expected) {
    Assert.assertTrue(expected.getCause() instanceof NotServingRegionException);
  }
  Assert.assertTrue(ZKAssign.deleteNode(getRS().getZooKeeper(),hri.getEncodedName(),EventType.M_ZK_REGION_CLOSING,0));
  Assert.assertEquals(Boolean.FALSE,getRS().getRegionsInTransitionInRS().get(hri.getEncodedNameAsBytes()));
  HTableDescriptor htd=getRS().tableDescriptors.get(hri.getTable());
  BaseCoordinatedStateManager csm=new ZkCoordinatedStateManager();
  csm.initialize(getRS());
  csm.start();
  ZkOpenRegionCoordination.ZkOpenRegionDetails zkCrd=new ZkOpenRegionCoordination.ZkOpenRegionDetails();
  zkCrd.setServerName(getRS().getServerName());
  zkCrd.setVersionOfOfflineNode(0);
  getRS().service.submit(new OpenRegionHandler(getRS(),getRS(),hri,htd,csm.getOpenRegionCoordination(),zkCrd));
  checkRegionIsClosed();
  Assert.assertEquals(-1,ZKAssign.getVersion(HTU.getZooKeeperWatcher(),hri));
  reopenRegion();
}
