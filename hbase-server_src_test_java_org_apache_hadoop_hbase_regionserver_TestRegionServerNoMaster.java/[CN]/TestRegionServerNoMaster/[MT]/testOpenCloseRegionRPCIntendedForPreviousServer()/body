{
  Assert.assertTrue(getRS().getRegion(regionName).isAvailable());
  ServerName sn=getRS().getServerName();
  ServerName earlierServerName=ServerName.valueOf(sn.getHostname(),sn.getPort(),1);
  try {
    CloseRegionRequest request=RequestConverter.buildCloseRegionRequest(earlierServerName,regionName,true);
    getRS().getRSRpcServices().closeRegion(null,request);
    Assert.fail("The closeRegion should have been rejected");
  }
 catch (  ServiceException se) {
    Assert.assertTrue(se.getCause() instanceof IOException);
    Assert.assertTrue(se.getCause().getMessage().contains("This RPC was intended for a different server"));
  }
  closeNoZK();
  try {
    AdminProtos.OpenRegionRequest orr=RequestConverter.buildOpenRegionRequest(earlierServerName,hri,0,null);
    getRS().getRSRpcServices().openRegion(null,orr);
    Assert.fail("The openRegion should have been rejected");
  }
 catch (  ServiceException se) {
    Assert.assertTrue(se.getCause() instanceof IOException);
    Assert.assertTrue(se.getCause().getMessage().contains("This RPC was intended for a different server"));
  }
 finally {
    reopenRegion();
  }
}
