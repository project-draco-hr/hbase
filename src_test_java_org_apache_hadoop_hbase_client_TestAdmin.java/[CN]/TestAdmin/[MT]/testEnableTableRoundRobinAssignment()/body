{
  byte[] tableName=Bytes.toBytes("testEnableTableAssignment");
  byte[][] splitKeys={new byte[]{1,1,1},new byte[]{2,2,2},new byte[]{3,3,3},new byte[]{4,4,4},new byte[]{5,5,5},new byte[]{6,6,6},new byte[]{7,7,7},new byte[]{8,8,8},new byte[]{9,9,9}};
  int expectedRegions=splitKeys.length + 1;
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc,splitKeys);
  HTable ht=new HTable(TEST_UTIL.getConfiguration(),tableName);
  Map<HRegionInfo,HServerAddress> regions=ht.getRegionsInfo();
  assertEquals("Tried to create " + expectedRegions + " regions "+ "but only found "+ regions.size(),expectedRegions,regions.size());
  admin.disableTable(tableName);
  admin.enableTable(tableName);
  HTable metaTable=new HTable(TEST_UTIL.getConfiguration(),HConstants.META_TABLE_NAME);
  List<HRegionInfo> regionInfos=admin.getTableRegions(tableName);
  Map<String,Integer> serverMap=new HashMap<String,Integer>();
  for (int i=0, j=regionInfos.size(); i < j; i++) {
    HRegionInfo hri=regionInfos.get(i);
    Get get=new Get(hri.getRegionName());
    Result result=metaTable.get(get);
    String server=Bytes.toString(result.getValue(HConstants.CATALOG_FAMILY,HConstants.SERVER_QUALIFIER));
    Integer regioncount=serverMap.get(server);
    if (regioncount == null) {
      regioncount=0;
    }
    regioncount++;
    serverMap.put(server,regioncount);
  }
  List<Map.Entry<String,Integer>> entryList=new ArrayList<Map.Entry<String,Integer>>(serverMap.entrySet());
  Collections.sort(entryList,new Comparator<Map.Entry<String,Integer>>(){
    public int compare(    Map.Entry<String,Integer> oa,    Map.Entry<String,Integer> ob){
      return (oa.getValue() - ob.getValue());
    }
  }
);
  assertTrue(entryList.size() == 3);
  assertTrue((entryList.get(2).getValue() - entryList.get(0).getValue()) < 2);
}
