{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 0:
      if (field.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list28=iprot.readListBegin();
          this.success=new ArrayList<TResult>(_list28.size);
          for (int _i29=0; _i29 < _list28.size; ++_i29) {
            TResult _elem30;
            _elem30=new TResult();
            _elem30.read(iprot);
            this.success.add(_elem30);
          }
          iprot.readListEnd();
        }
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 1:
  if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
    this.io=new TIOError();
    this.io.read(iprot);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
