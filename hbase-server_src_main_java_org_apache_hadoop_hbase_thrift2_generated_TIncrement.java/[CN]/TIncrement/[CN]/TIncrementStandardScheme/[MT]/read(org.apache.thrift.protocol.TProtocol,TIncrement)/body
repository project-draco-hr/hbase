{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.row=iprot.readBinary();
        struct.setRowIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list62=iprot.readListBegin();
      struct.columns=new ArrayList<TColumnIncrement>(_list62.size);
      for (int _i63=0; _i63 < _list62.size; ++_i63) {
        TColumnIncrement _elem64;
        _elem64=new TColumnIncrement();
        _elem64.read(iprot);
        struct.columns.add(_elem64);
      }
      iprot.readListEnd();
    }
    struct.setColumnsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.writeToWal=iprot.readBool();
struct.setWriteToWalIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map65=iprot.readMapBegin();
struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map65.size);
for (int _i66=0; _i66 < _map65.size; ++_i66) {
ByteBuffer _key67;
ByteBuffer _val68;
_key67=iprot.readBinary();
_val68=iprot.readBinary();
struct.attributes.put(_key67,_val68);
}
iprot.readMapEnd();
}
struct.setAttributesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
