{
  TTupleProtocol iprot=(TTupleProtocol)prot;
  struct.row=iprot.readBinary();
  struct.setRowIsSet(true);
{
    org.apache.thrift.protocol.TList _list73=new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,iprot.readI32());
    struct.columns=new ArrayList<TColumnIncrement>(_list73.size);
    for (int _i74=0; _i74 < _list73.size; ++_i74) {
      TColumnIncrement _elem75;
      _elem75=new TColumnIncrement();
      _elem75.read(iprot);
      struct.columns.add(_elem75);
    }
  }
  struct.setColumnsIsSet(true);
  BitSet incoming=iprot.readBitSet(2);
  if (incoming.get(0)) {
{
      org.apache.thrift.protocol.TMap _map76=new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,iprot.readI32());
      struct.attributes=new HashMap<ByteBuffer,ByteBuffer>(2 * _map76.size);
      for (int _i77=0; _i77 < _map76.size; ++_i77) {
        ByteBuffer _key78;
        ByteBuffer _val79;
        _key78=iprot.readBinary();
        _val79=iprot.readBinary();
        struct.attributes.put(_key78,_val79);
      }
    }
    struct.setAttributesIsSet(true);
  }
  if (incoming.get(1)) {
    struct.durability=TDurability.findByValue(iprot.readI32());
    struct.setDurabilityIsSet(true);
  }
}
