{
  if (cache.size() == 0 && this.closed) {
    return null;
  }
  if (cache.size() == 0) {
    Result[] values=null;
    long remainingResultSize=maxScannerResultSize;
    int countdown=this.caching;
    callable.setCaching(this.caching);
    boolean skipFirst=false;
    do {
      try {
        values=getConnection().getRegionServerWithRetries(callable);
        if (skipFirst) {
          skipFirst=false;
          values=getConnection().getRegionServerWithRetries(callable);
        }
      }
 catch (      DoNotRetryIOException e) {
        long timeout=lastNext + scannerTimeout;
        if (e instanceof UnknownScannerException && timeout < System.currentTimeMillis()) {
          long elapsed=System.currentTimeMillis() - lastNext;
          ScannerTimeoutException ex=new ScannerTimeoutException(elapsed + "ms passed since the last invocation, " + "timeout is currently set to "+ scannerTimeout);
          ex.initCause(e);
          throw ex;
        }
        Throwable cause=e.getCause();
        if (cause == null || !(cause instanceof NotServingRegionException)) {
          throw e;
        }
        if (this.lastResult != null) {
          this.scan.setStartRow(this.lastResult.getRow());
          skipFirst=true;
        }
        this.currentRegion=null;
        continue;
      }
      lastNext=System.currentTimeMillis();
      if (values != null && values.length > 0) {
        for (        Result rs : values) {
          cache.add(rs);
          for (          KeyValue kv : rs.raw()) {
            remainingResultSize-=kv.heapSize();
          }
          countdown--;
          this.lastResult=rs;
        }
      }
    }
 while (remainingResultSize > 0 && countdown > 0 && nextScanner(countdown,values == null));
  }
  if (cache.size() > 0) {
    return cache.poll();
  }
  return null;
}
