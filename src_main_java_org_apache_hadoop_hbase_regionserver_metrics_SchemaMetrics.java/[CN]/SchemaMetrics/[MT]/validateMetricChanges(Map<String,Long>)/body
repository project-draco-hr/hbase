{
  final Map<String,Long> newMetrics=getMetricsSnapshot();
  final Map<String,Long> allCfDeltas=new TreeMap<String,Long>();
  final Map<String,Long> allBlockCategoryDeltas=new TreeMap<String,Long>();
  final Map<String,Long> deltas=diffMetrics(oldMetrics,newMetrics);
  final Pattern cfTableMetricRE=useTableNameGlobally ? TABLE_AND_CF_NAME_RE : CF_NAME_RE;
  final Set<String> allKeys=new TreeSet<String>(oldMetrics.keySet());
  allKeys.addAll(newMetrics.keySet());
  for (  SchemaMetrics cfm : cfToMetrics.values()) {
    for (    String metricName : cfm.getAllMetricNames()) {
      if (metricName.startsWith(CF_PREFIX + CF_PREFIX)) {
        throw new AssertionError("Column family prefix used twice: " + metricName);
      }
      final long oldValue=getLong(oldMetrics,metricName);
      final long newValue=getLong(newMetrics,metricName);
      final long delta=newValue - oldValue;
      if (delta != 0) {
        if (cfm != ALL_SCHEMA_METRICS) {
          final String aggregateMetricName=cfTableMetricRE.matcher(metricName).replaceAll("");
          if (!aggregateMetricName.equals(metricName)) {
            LOG.debug("Counting " + delta + " units of "+ metricName+ " towards "+ aggregateMetricName);
            putLong(allCfDeltas,aggregateMetricName,getLong(allCfDeltas,aggregateMetricName) + delta);
          }
        }
 else {
          LOG.debug("Metric=" + metricName + ", delta="+ delta);
        }
      }
      Matcher matcher=BLOCK_CATEGORY_RE.matcher(metricName);
      if (matcher.find()) {
        String metricNoBlockCategory=matcher.replaceAll("");
        putLong(allBlockCategoryDeltas,metricNoBlockCategory,getLong(allBlockCategoryDeltas,metricNoBlockCategory) + delta);
      }
    }
  }
  StringBuilder errors=new StringBuilder();
  for (  String key : ALL_SCHEMA_METRICS.getAllMetricNames()) {
    long actual=getLong(deltas,key);
    long expected=getLong(allCfDeltas,key);
    if (actual != expected) {
      if (errors.length() > 0)       errors.append("\n");
      errors.append("The all-CF metric " + key + " changed by "+ actual+ " but the aggregation of per-CF/table metrics "+ "yields "+ expected);
    }
  }
  for (  String key : allKeys) {
    if (BLOCK_CATEGORY_RE.matcher(key).find() || key.contains(ALL_SCHEMA_METRICS.getBloomMetricName(false)) || key.contains(ALL_SCHEMA_METRICS.getBloomMetricName(true))) {
      continue;
    }
    long actual=getLong(deltas,key);
    long expected=getLong(allBlockCategoryDeltas,key);
    if (actual != expected) {
      if (errors.length() > 0)       errors.append("\n");
      errors.append("The all-block-category metric " + key + " changed by "+ actual+ " but the aggregation of "+ "per-block-category metrics yields "+ expected);
    }
  }
  if (errors.length() > 0) {
    throw new AssertionError(errors.toString());
  }
}
