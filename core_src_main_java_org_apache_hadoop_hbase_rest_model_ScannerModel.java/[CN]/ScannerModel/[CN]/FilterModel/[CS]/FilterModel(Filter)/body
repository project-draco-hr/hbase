{
  String typeName=filter.getClass().getSimpleName();
  FilterType type=FilterType.valueOf(typeName);
  this.type=typeName;
switch (type) {
case ColumnCountGetFilter:
    this.limit=((ColumnCountGetFilter)filter).getLimit();
  break;
case FilterList:
this.op=((FilterList)filter).getOperator().toString();
this.filters=new ArrayList<FilterModel>();
for (Filter child : ((FilterList)filter).getFilters()) {
this.filters.add(new FilterModel(child));
}
break;
case FirstKeyOnlyFilter:
break;
case InclusiveStopFilter:
this.value=Base64.encodeBytes(((InclusiveStopFilter)filter).getStopRowKey());
break;
case PageFilter:
this.value=Long.toString(((PageFilter)filter).getPageSize());
break;
case PrefixFilter:
this.value=Base64.encodeBytes(((PrefixFilter)filter).getPrefix());
break;
case QualifierFilter:
case RowFilter:
case ValueFilter:
this.op=((CompareFilter)filter).getOperator().toString();
this.comparator=new WritableByteArrayComparableModel(((CompareFilter)filter).getComparator());
break;
case SingleColumnValueFilter:
{
SingleColumnValueFilter scvf=(SingleColumnValueFilter)filter;
this.family=Base64.encodeBytes(scvf.getFamily());
byte[] qualifier=scvf.getQualifier();
if (qualifier != null) {
this.qualifier=Base64.encodeBytes(qualifier);
}
this.op=scvf.getOperator().toString();
this.comparator=new WritableByteArrayComparableModel(scvf.getComparator());
if (scvf.getFilterIfMissing()) {
this.ifMissing=true;
}
if (scvf.getLatestVersionOnly()) {
this.latestVersion=true;
}
}
break;
case SkipFilter:
this.filters=new ArrayList<FilterModel>();
this.filters.add(new FilterModel(((SkipFilter)filter).getFilter()));
break;
case WhileMatchFilter:
this.filters=new ArrayList<FilterModel>();
this.filters.add(new FilterModel(((WhileMatchFilter)filter).getFilter()));
break;
default :
throw new RuntimeException("unhandled filter type " + type);
}
}
