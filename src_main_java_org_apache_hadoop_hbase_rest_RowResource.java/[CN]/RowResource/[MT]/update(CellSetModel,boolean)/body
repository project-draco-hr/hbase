{
  servlet.getMetrics().incrementRequests(1);
  if (servlet.isReadOnly()) {
    throw new WebApplicationException(Response.Status.FORBIDDEN);
  }
  HTablePool pool=servlet.getTablePool();
  HTableInterface table=null;
  try {
    List<RowModel> rows=model.getRows();
    List<Put> puts=new ArrayList<Put>();
    for (    RowModel row : rows) {
      byte[] key=row.getKey();
      if (key == null) {
        key=rowspec.getRow();
      }
      if (key == null) {
        throw new WebApplicationException(Response.Status.BAD_REQUEST);
      }
      Put put=new Put(key);
      int i=0;
      for (      CellModel cell : row.getCells()) {
        byte[] col=cell.getColumn();
        if (col == null)         try {
          col=rowspec.getColumns()[i++];
        }
 catch (        ArrayIndexOutOfBoundsException e) {
          col=null;
        }
        if (col == null) {
          throw new WebApplicationException(Response.Status.BAD_REQUEST);
        }
        byte[][] parts=KeyValue.parseColumn(col);
        if (parts.length == 2 && parts[1].length > 0) {
          put.add(parts[0],parts[1],cell.getTimestamp(),cell.getValue());
        }
 else {
          put.add(parts[0],null,cell.getTimestamp(),cell.getValue());
        }
      }
      puts.add(put);
      if (LOG.isDebugEnabled()) {
        LOG.debug("PUT " + put.toString());
      }
    }
    table=pool.getTable(tableResource.getName());
    table.put(puts);
    table.flushCommits();
    ResponseBuilder response=Response.ok();
    return response.build();
  }
 catch (  IOException e) {
    throw new WebApplicationException(e,Response.Status.SERVICE_UNAVAILABLE);
  }
 finally {
    if (table != null) {
      try {
        pool.putTable(table);
      }
 catch (      IOException ioe) {
        throw new WebApplicationException(ioe,Response.Status.SERVICE_UNAVAILABLE);
      }
    }
  }
}
