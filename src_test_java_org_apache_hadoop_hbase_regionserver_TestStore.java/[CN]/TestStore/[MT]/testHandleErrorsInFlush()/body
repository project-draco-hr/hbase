{
  LOG.info("Setting up a faulty file system that cannot write");
  Configuration conf=HBaseConfiguration.create();
  conf.set(UnixUserGroupInformation.UGI_PROPERTY_NAME,"testhandleerrorsinflush,foo");
  conf.setClass("fs.file.impl",FaultyFileSystem.class,FileSystem.class);
  FileSystem fs=FileSystem.get(conf);
  assertEquals(FaultyFileSystem.class,fs.getClass());
  init(getName(),conf);
  LOG.info("Adding some data");
  this.store.add(new KeyValue(row,family,qf1,1,(byte[])null));
  this.store.add(new KeyValue(row,family,qf2,1,(byte[])null));
  this.store.add(new KeyValue(row,family,qf3,1,(byte[])null));
  LOG.info("Before flush, we should have no files");
  FileStatus[] files=fs.listStatus(store.getHomedir());
  Path[] paths=FileUtil.stat2Paths(files);
  System.err.println("Got paths: " + Joiner.on(",").join(paths));
  assertEquals(0,paths.length);
  try {
    LOG.info("Flushing");
    flush(1);
    fail("Didn't bubble up IOE!");
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getMessage().contains("Fault injected"));
  }
  LOG.info("After failed flush, we should still have no files!");
  files=fs.listStatus(store.getHomedir());
  paths=FileUtil.stat2Paths(files);
  System.err.println("Got paths: " + Joiner.on(",").join(paths));
  assertEquals(0,paths.length);
}
