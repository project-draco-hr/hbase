{
  LOG.info("Setting up a faulty file system that cannot write");
  final Configuration conf=HBaseConfiguration.create();
  User user=User.createUserForTesting(conf,"testhandleerrorsinflush",new String[]{"foo"});
  conf.setClass("fs.file.impl",FaultyFileSystem.class,FileSystem.class);
  user.runAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws Exception {
      FileSystem fs=FileSystem.get(conf);
      assertEquals(FaultyFileSystem.class,fs.getClass());
      init(getName(),conf);
      LOG.info("Adding some data");
      store.add(new KeyValue(row,family,qf1,1,(byte[])null));
      store.add(new KeyValue(row,family,qf2,1,(byte[])null));
      store.add(new KeyValue(row,family,qf3,1,(byte[])null));
      LOG.info("Before flush, we should have no files");
      FileStatus[] files=fs.listStatus(store.getHomedir());
      Path[] paths=FileUtil.stat2Paths(files);
      System.err.println("Got paths: " + Joiner.on(",").join(paths));
      assertEquals(0,paths.length);
      try {
        LOG.info("Flushing");
        flush(1);
        fail("Didn't bubble up IOE!");
      }
 catch (      IOException ioe) {
        assertTrue(ioe.getMessage().contains("Fault injected"));
      }
      LOG.info("After failed flush, we should still have no files!");
      files=fs.listStatus(store.getHomedir());
      paths=FileUtil.stat2Paths(files);
      System.err.println("Got paths: " + Joiner.on(",").join(paths));
      assertEquals(0,paths.length);
      return null;
    }
  }
);
}
