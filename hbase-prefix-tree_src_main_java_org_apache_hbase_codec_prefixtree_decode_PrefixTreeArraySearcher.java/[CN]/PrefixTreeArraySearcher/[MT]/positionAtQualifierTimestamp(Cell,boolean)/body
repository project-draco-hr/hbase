{
  int minIndex=0;
  int maxIndex=currentRowNode.getLastCellIndex();
  int diff;
  while (true) {
    int midIndex=(maxIndex + minIndex) / 2;
    diff=populateNonRowFieldsAndCompareTo(midIndex,key);
    if (diff == 0) {
      return CellScannerPosition.AT;
    }
 else     if (minIndex == maxIndex) {
      break;
    }
 else     if ((minIndex + 1) == maxIndex) {
      diff=populateNonRowFieldsAndCompareTo(maxIndex,key);
      if (diff > 0) {
        diff=populateNonRowFieldsAndCompareTo(minIndex,key);
      }
      break;
    }
 else     if (diff < 0) {
      minIndex=currentCellIndex;
    }
 else {
      maxIndex=currentCellIndex;
    }
  }
  if (diff == 0) {
    return CellScannerPosition.AT;
  }
 else   if (diff < 0) {
    if (beforeOnMiss) {
      return CellScannerPosition.BEFORE;
    }
    if (advance()) {
      return CellScannerPosition.AFTER;
    }
    return CellScannerPosition.AFTER_LAST;
  }
 else {
    if (!beforeOnMiss) {
      return CellScannerPosition.AFTER;
    }
    if (previous()) {
      return CellScannerPosition.BEFORE;
    }
    return CellScannerPosition.BEFORE_FIRST;
  }
}
