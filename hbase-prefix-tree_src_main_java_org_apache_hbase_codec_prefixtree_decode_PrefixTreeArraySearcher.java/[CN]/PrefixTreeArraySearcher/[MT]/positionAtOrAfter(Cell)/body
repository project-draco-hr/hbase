{
  reInitFirstNode();
  int fanIndex=-1;
  while (true) {
    int currentNodeDepth=rowLength;
    int rowTokenComparison=compareToCurrentToken(key);
    if (rowTokenComparison != 0) {
      return fixRowTokenMissForward(rowTokenComparison);
    }
    if (rowMatchesAfterCurrentPosition(key)) {
      return positionAtQualifierTimestamp(key,false);
    }
    if (!currentRowNode.hasFan()) {
      if (hasOccurrences()) {
        populateFirstNonRowFields();
        return CellScannerPosition.AFTER;
      }
 else {
        return fixRowFanMissForward(0);
      }
    }
    byte searchForByte=CellTool.getRowByte(key,currentNodeDepth);
    fanIndex=currentRowNode.whichFanNode(searchForByte);
    if (fanIndex < 0) {
      int insertionPoint=-fanIndex;
      return fixRowFanMissForward(insertionPoint);
    }
    followFan(fanIndex);
  }
}
