{
  this.conf=env.getConfiguration();
  if (HFile.getFormatVersion(conf) < HFile.MIN_FORMAT_VERSION_WITH_TAGS) {
    throw new RuntimeException("A minimum HFile version of " + HFile.MIN_FORMAT_VERSION_WITH_TAGS + " is required to persist visibility labels. Consider setting "+ HFile.FORMAT_VERSION_KEY+ " accordingly.");
  }
  ZooKeeperWatcher zk=null;
  if (env instanceof MasterCoprocessorEnvironment) {
    MasterCoprocessorEnvironment mEnv=(MasterCoprocessorEnvironment)env;
    zk=mEnv.getMasterServices().getZooKeeper();
  }
 else   if (env instanceof RegionCoprocessorEnvironment) {
    regionEnv=(RegionCoprocessorEnvironment)env;
    zk=regionEnv.getRegionServerServices().getZooKeeper();
  }
 else   if (env instanceof RegionServerCoprocessorEnvironment) {
    throw new RuntimeException("Visibility controller should not be configured as " + "'hbase.coprocessor.regionserver.classes'.");
  }
  if (zk == null) {
    throw new RuntimeException("Error obtaining VisibilityLabelsManager, zk found null.");
  }
  try {
    this.visibilityManager=VisibilityLabelsManager.get(zk,this.conf);
  }
 catch (  IOException ioe) {
    throw new RuntimeException("Error obtaining VisibilityLabelsManager",ioe);
  }
  if (env instanceof RegionCoprocessorEnvironment) {
    scanLabelGenerators=VisibilityUtils.getScanLabelGenerators(this.conf);
  }
}
