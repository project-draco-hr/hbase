{
  if (c.getEnvironment().getRegion().getRegionInfo().getTable().isSystemTable()) {
    return;
  }
  Map<String,List<Tag>> labelCache=new HashMap<String,List<Tag>>();
  for (int i=0; i < miniBatchOp.size(); i++) {
    Mutation m=miniBatchOp.getOperation(i);
    CellVisibility cellVisibility=null;
    try {
      cellVisibility=m.getCellVisibility();
    }
 catch (    DeserializationException de) {
      miniBatchOp.setOperationStatus(i,new OperationStatus(SANITY_CHECK_FAILURE,de.getMessage()));
      continue;
    }
    boolean sanityFailure=false;
    boolean modifiedTagFound=false;
    Pair<Boolean,Tag> pair=new Pair<Boolean,Tag>(false,null);
    for (CellScanner cellScanner=m.cellScanner(); cellScanner.advance(); ) {
      pair=checkForReservedVisibilityTagPresence(cellScanner.current(),pair);
      if (!pair.getFirst()) {
        if (authorizationEnabled) {
          miniBatchOp.setOperationStatus(i,new OperationStatus(SANITY_CHECK_FAILURE,"Mutation contains cell with reserved type tag"));
          sanityFailure=true;
        }
        break;
      }
 else {
        Tag tag=pair.getSecond();
        if (cellVisibility == null && tag != null) {
          cellVisibility=new CellVisibility(TagUtil.getValueAsString(tag));
          modifiedTagFound=true;
        }
      }
    }
    if (!sanityFailure) {
      if (cellVisibility != null) {
        String labelsExp=cellVisibility.getExpression();
        List<Tag> visibilityTags=labelCache.get(labelsExp);
        if (visibilityTags == null) {
          boolean authCheck=authorizationEnabled && checkAuths && !(isSystemOrSuperUser());
          try {
            visibilityTags=this.visibilityLabelService.createVisibilityExpTags(labelsExp,true,authCheck);
          }
 catch (          InvalidLabelException e) {
            miniBatchOp.setOperationStatus(i,new OperationStatus(SANITY_CHECK_FAILURE,e.getMessage()));
          }
          if (visibilityTags != null) {
            labelCache.put(labelsExp,visibilityTags);
          }
        }
        if (visibilityTags != null) {
          List<Cell> updatedCells=new ArrayList<Cell>();
          for (CellScanner cellScanner=m.cellScanner(); cellScanner.advance(); ) {
            Cell cell=cellScanner.current();
            List<Tag> tags=CellUtil.getTags(cell);
            if (modifiedTagFound) {
              removeReplicationVisibilityTag(tags);
            }
            tags.addAll(visibilityTags);
            Cell updatedCell=CellUtil.createCell(cell,tags);
            updatedCells.add(updatedCell);
          }
          m.getFamilyCellMap().clear();
          for (          Cell cell : updatedCells) {
            if (m instanceof Put) {
              Put p=(Put)m;
              p.add(cell);
            }
 else             if (m instanceof Delete) {
              Delete d=(Delete)m;
              d.addDeleteMarker(cell);
            }
          }
        }
      }
    }
  }
}
