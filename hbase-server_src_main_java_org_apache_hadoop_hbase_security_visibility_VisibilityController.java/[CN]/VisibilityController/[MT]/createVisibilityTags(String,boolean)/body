{
  ExpressionNode node=null;
  node=this.expressionParser.parse(visibilityLabelsExp);
  node=this.expressionExpander.expand(node);
  List<Tag> tags=new ArrayList<Tag>();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  List<Integer> labelOrdinals=new ArrayList<Integer>();
  if (addSerializationTag) {
    tags.add(VisibilityUtils.VIS_SERIALIZATION_TAG);
  }
  if (node.isSingleNode()) {
    getLabelOrdinals(node,labelOrdinals);
    writeLabelOrdinalsToStream(labelOrdinals,dos);
    tags.add(new Tag(VisibilityUtils.VISIBILITY_TAG_TYPE,baos.toByteArray()));
    baos.reset();
  }
 else {
    NonLeafExpressionNode nlNode=(NonLeafExpressionNode)node;
    if (nlNode.getOperator() == Operator.OR) {
      for (      ExpressionNode child : nlNode.getChildExps()) {
        getLabelOrdinals(child,labelOrdinals);
        writeLabelOrdinalsToStream(labelOrdinals,dos);
        tags.add(new Tag(VisibilityUtils.VISIBILITY_TAG_TYPE,baos.toByteArray()));
        baos.reset();
        labelOrdinals.clear();
      }
    }
 else {
      getLabelOrdinals(nlNode,labelOrdinals);
      writeLabelOrdinalsToStream(labelOrdinals,dos);
      tags.add(new Tag(VisibilityUtils.VISIBILITY_TAG_TYPE,baos.toByteArray()));
      baos.reset();
    }
  }
  return tags;
}
