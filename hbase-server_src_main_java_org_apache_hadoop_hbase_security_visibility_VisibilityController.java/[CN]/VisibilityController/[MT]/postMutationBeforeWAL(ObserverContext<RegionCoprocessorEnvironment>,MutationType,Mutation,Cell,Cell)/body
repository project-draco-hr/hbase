{
  List<Tag> tags=Lists.newArrayList();
  CellVisibility cellVisibility=null;
  try {
    cellVisibility=mutation.getCellVisibility();
  }
 catch (  DeserializationException e) {
    throw new IOException(e);
  }
  if (cellVisibility == null) {
    return newCell;
  }
  Iterator<Tag> tagsItr=CellUtil.tagsIterator(newCell.getTagsArray(),newCell.getTagsOffset(),newCell.getTagsLength());
  while (tagsItr.hasNext()) {
    Tag tag=tagsItr.next();
    if (tag.getType() != VisibilityUtils.VISIBILITY_TAG_TYPE && tag.getType() != VisibilityUtils.VISIBILITY_EXP_SERIALIZATION_TAG_TYPE) {
      tags.add(tag);
    }
  }
  try {
    tags.addAll(createVisibilityTags(cellVisibility.getExpression(),true));
  }
 catch (  ParseException e) {
    throw new IOException(e);
  }
  KeyValue newKv=KeyValueUtil.ensureKeyValue(newCell);
  KeyValue rewriteKv=new KeyValue(newKv.getRowArray(),newKv.getRowOffset(),newKv.getRowLength(),newKv.getFamilyArray(),newKv.getFamilyOffset(),newKv.getFamilyLength(),newKv.getQualifierArray(),newKv.getQualifierOffset(),newKv.getQualifierLength(),newKv.getTimestamp(),KeyValue.Type.codeToType(newKv.getTypeByte()),newKv.getValueArray(),newKv.getValueOffset(),newKv.getValueLength(),tags);
  rewriteKv.setSequenceId(newKv.getMvccVersion());
  return rewriteKv;
}
