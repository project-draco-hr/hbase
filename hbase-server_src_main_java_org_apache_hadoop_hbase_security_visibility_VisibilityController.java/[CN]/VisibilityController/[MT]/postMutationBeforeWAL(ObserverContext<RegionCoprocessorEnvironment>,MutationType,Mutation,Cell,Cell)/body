{
  List<Tag> tags=Lists.newArrayList();
  CellVisibility cellVisibility=null;
  try {
    cellVisibility=mutation.getCellVisibility();
  }
 catch (  DeserializationException e) {
    throw new IOException(e);
  }
  if (cellVisibility == null) {
    return newCell;
  }
  Set<Integer> auths=null;
  User user=getActiveUser();
  if (checkAuths && user != null && user.getShortName() != null) {
    auths=this.visibilityManager.getAuthsAsOrdinals(user.getShortName());
  }
  try {
    tags.addAll(createVisibilityTags(cellVisibility.getExpression(),true,auths,user.getShortName()));
  }
 catch (  ParseException e) {
    throw new IOException(e);
  }
  if (newCell.getTagsLength() > 0) {
    Iterator<Tag> tagsItr=CellUtil.tagsIterator(newCell.getTagsArray(),newCell.getTagsOffset(),newCell.getTagsLength());
    while (tagsItr.hasNext()) {
      Tag tag=tagsItr.next();
      if (tag.getType() != VisibilityUtils.VISIBILITY_TAG_TYPE && tag.getType() != VisibilityUtils.VISIBILITY_EXP_SERIALIZATION_TAG_TYPE) {
        tags.add(tag);
      }
    }
  }
  KeyValue rewriteKv=new KeyValue(newCell.getRowArray(),newCell.getRowOffset(),newCell.getRowLength(),newCell.getFamilyArray(),newCell.getFamilyOffset(),newCell.getFamilyLength(),newCell.getQualifierArray(),newCell.getQualifierOffset(),newCell.getQualifierLength(),newCell.getTimestamp(),KeyValue.Type.codeToType(newCell.getTypeByte()),newCell.getValueArray(),newCell.getValueOffset(),newCell.getValueLength(),tags);
  rewriteKv.setSequenceId(newCell.getMvccVersion());
  return rewriteKv;
}
