{
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.apache.hadoop.hbase.shaded.protobuf.generated.ClusterStatusProtos.RegionLoad)) {
    return super.equals(obj);
  }
  org.apache.hadoop.hbase.shaded.protobuf.generated.ClusterStatusProtos.RegionLoad other=(org.apache.hadoop.hbase.shaded.protobuf.generated.ClusterStatusProtos.RegionLoad)obj;
  boolean result=true;
  result=result && (hasRegionSpecifier() == other.hasRegionSpecifier());
  if (hasRegionSpecifier()) {
    result=result && getRegionSpecifier().equals(other.getRegionSpecifier());
  }
  result=result && (hasStores() == other.hasStores());
  if (hasStores()) {
    result=result && (getStores() == other.getStores());
  }
  result=result && (hasStorefiles() == other.hasStorefiles());
  if (hasStorefiles()) {
    result=result && (getStorefiles() == other.getStorefiles());
  }
  result=result && (hasStoreUncompressedSizeMB() == other.hasStoreUncompressedSizeMB());
  if (hasStoreUncompressedSizeMB()) {
    result=result && (getStoreUncompressedSizeMB() == other.getStoreUncompressedSizeMB());
  }
  result=result && (hasStorefileSizeMB() == other.hasStorefileSizeMB());
  if (hasStorefileSizeMB()) {
    result=result && (getStorefileSizeMB() == other.getStorefileSizeMB());
  }
  result=result && (hasMemstoreSizeMB() == other.hasMemstoreSizeMB());
  if (hasMemstoreSizeMB()) {
    result=result && (getMemstoreSizeMB() == other.getMemstoreSizeMB());
  }
  result=result && (hasStorefileIndexSizeMB() == other.hasStorefileIndexSizeMB());
  if (hasStorefileIndexSizeMB()) {
    result=result && (getStorefileIndexSizeMB() == other.getStorefileIndexSizeMB());
  }
  result=result && (hasReadRequestsCount() == other.hasReadRequestsCount());
  if (hasReadRequestsCount()) {
    result=result && (getReadRequestsCount() == other.getReadRequestsCount());
  }
  result=result && (hasWriteRequestsCount() == other.hasWriteRequestsCount());
  if (hasWriteRequestsCount()) {
    result=result && (getWriteRequestsCount() == other.getWriteRequestsCount());
  }
  result=result && (hasTotalCompactingKVs() == other.hasTotalCompactingKVs());
  if (hasTotalCompactingKVs()) {
    result=result && (getTotalCompactingKVs() == other.getTotalCompactingKVs());
  }
  result=result && (hasCurrentCompactedKVs() == other.hasCurrentCompactedKVs());
  if (hasCurrentCompactedKVs()) {
    result=result && (getCurrentCompactedKVs() == other.getCurrentCompactedKVs());
  }
  result=result && (hasRootIndexSizeKB() == other.hasRootIndexSizeKB());
  if (hasRootIndexSizeKB()) {
    result=result && (getRootIndexSizeKB() == other.getRootIndexSizeKB());
  }
  result=result && (hasTotalStaticIndexSizeKB() == other.hasTotalStaticIndexSizeKB());
  if (hasTotalStaticIndexSizeKB()) {
    result=result && (getTotalStaticIndexSizeKB() == other.getTotalStaticIndexSizeKB());
  }
  result=result && (hasTotalStaticBloomSizeKB() == other.hasTotalStaticBloomSizeKB());
  if (hasTotalStaticBloomSizeKB()) {
    result=result && (getTotalStaticBloomSizeKB() == other.getTotalStaticBloomSizeKB());
  }
  result=result && (hasCompleteSequenceId() == other.hasCompleteSequenceId());
  if (hasCompleteSequenceId()) {
    result=result && (getCompleteSequenceId() == other.getCompleteSequenceId());
  }
  result=result && (hasDataLocality() == other.hasDataLocality());
  if (hasDataLocality()) {
    result=result && (java.lang.Float.floatToIntBits(getDataLocality()) == java.lang.Float.floatToIntBits(other.getDataLocality()));
  }
  result=result && (hasLastMajorCompactionTs() == other.hasLastMajorCompactionTs());
  if (hasLastMajorCompactionTs()) {
    result=result && (getLastMajorCompactionTs() == other.getLastMajorCompactionTs());
  }
  result=result && getStoreCompleteSequenceIdList().equals(other.getStoreCompleteSequenceIdList());
  result=result && (hasFilteredReadRequestsCount() == other.hasFilteredReadRequestsCount());
  if (hasFilteredReadRequestsCount()) {
    result=result && (getFilteredReadRequestsCount() == other.getFilteredReadRequestsCount());
  }
  result=result && unknownFields.equals(other.unknownFields);
  return result;
}
