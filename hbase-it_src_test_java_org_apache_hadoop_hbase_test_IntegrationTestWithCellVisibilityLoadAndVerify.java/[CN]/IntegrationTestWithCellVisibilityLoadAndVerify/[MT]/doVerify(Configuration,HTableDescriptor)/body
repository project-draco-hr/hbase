{
  System.out.println(String.format("Verifying for auths %s, %s, %s, %s",CONFIDENTIAL,TOPSECRET,SECRET,PRIVATE));
  PrivilegedExceptionAction<Job> scanAction=new PrivilegedExceptionAction<Job>(){
    @Override public Job run() throws Exception {
      return doVerify(conf,htd,CONFIDENTIAL,TOPSECRET,SECRET,PRIVATE);
    }
  }
;
  Job job=ADMIN.runAs(scanAction);
  this.numRowsReadWithExp1=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_1).getValue();
  this.numRowsReadWithExp2=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_2).getValue();
  this.numRowsReadWithExp3=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_3).getValue();
  this.numRowsReadWithExp4=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_4).getValue();
  assertEquals(this.numRowsLoadedWithExp1,this.numRowsReadWithExp1);
  assertEquals(this.numRowsLoadedWithExp2,this.numRowsReadWithExp2);
  assertEquals(0,this.numRowsReadWithExp3);
  assertEquals(0,this.numRowsReadWithExp4);
  System.out.println(String.format("Verifying for auths %s, %s",PRIVATE,PUBLIC));
  scanAction=new PrivilegedExceptionAction<Job>(){
    @Override public Job run() throws Exception {
      return doVerify(conf,htd,PRIVATE,PUBLIC);
    }
  }
;
  job=ADMIN.runAs(scanAction);
  this.numRowsReadWithExp1=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_1).getValue();
  this.numRowsReadWithExp2=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_2).getValue();
  this.numRowsReadWithExp3=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_3).getValue();
  this.numRowsReadWithExp4=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_4).getValue();
  assertEquals(0,this.numRowsReadWithExp1);
  assertEquals(0,this.numRowsReadWithExp2);
  assertEquals(0,this.numRowsReadWithExp3);
  assertEquals(this.numRowsLoadWithExp4,this.numRowsReadWithExp4);
  System.out.println(String.format("Verifying for auths %s, %s",SECRET,PUBLIC));
  scanAction=new PrivilegedExceptionAction<Job>(){
    @Override public Job run() throws Exception {
      return doVerify(conf,htd,PRIVATE,PUBLIC);
    }
  }
;
  job=NORMAL_USER.runAs(scanAction);
  this.numRowsReadWithExp1=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_1).getValue();
  this.numRowsReadWithExp2=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_2).getValue();
  this.numRowsReadWithExp3=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_3).getValue();
  this.numRowsReadWithExp4=job.getCounters().findCounter(Counters.ROWS_VIS_EXP_4).getValue();
  assertEquals(0,this.numRowsReadWithExp1);
  assertEquals(0,this.numRowsReadWithExp2);
  assertEquals(this.numRowsLoadWithExp3,this.numRowsReadWithExp3);
  assertEquals(0,this.numRowsReadWithExp4);
}
