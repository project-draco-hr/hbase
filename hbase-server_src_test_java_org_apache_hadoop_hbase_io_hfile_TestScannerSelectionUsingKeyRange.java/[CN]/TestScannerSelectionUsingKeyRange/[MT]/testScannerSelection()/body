{
  Configuration conf=TEST_UTIL.getConfiguration();
  conf.setInt("hbase.hstore.compactionThreshold",10000);
  HColumnDescriptor hcd=new HColumnDescriptor(FAMILY_BYTES).setBlockCacheEnabled(true).setBloomFilterType(bloomType);
  HTableDescriptor htd=new HTableDescriptor(TABLE);
  htd.addFamily(hcd);
  HRegionInfo info=new HRegionInfo(TABLE);
  HRegion region=HRegion.createHRegion(info,TEST_UTIL.getDataTestDir(),conf,htd);
  for (int iFile=0; iFile < NUM_FILES; ++iFile) {
    for (int iRow=0; iRow < NUM_ROWS; ++iRow) {
      Put put=new Put(Bytes.toBytes("row" + iRow));
      for (int iCol=0; iCol < NUM_COLS_PER_ROW; ++iCol) {
        put.add(FAMILY_BYTES,Bytes.toBytes("col" + iCol),Bytes.toBytes("value" + iFile + "_"+ iRow+ "_"+ iCol));
      }
      region.put(put);
    }
    region.flushcache();
  }
  Scan scan=new Scan(Bytes.toBytes("aaa"),Bytes.toBytes("aaz"));
  CacheConfig.blockCacheDisabled=false;
  CacheConfig cacheConf=new CacheConfig(conf);
  LruBlockCache cache=(LruBlockCache)cacheConf.getBlockCache();
  cache.clearCache();
  InternalScanner scanner=region.getScanner(scan);
  List<Cell> results=new ArrayList<Cell>();
  while (scanner.next(results)) {
  }
  scanner.close();
  assertEquals(0,results.size());
  Set<String> accessedFiles=cache.getCachedFileNamesForTest();
  assertEquals(expectedCount,accessedFiles.size());
  region.close();
}
