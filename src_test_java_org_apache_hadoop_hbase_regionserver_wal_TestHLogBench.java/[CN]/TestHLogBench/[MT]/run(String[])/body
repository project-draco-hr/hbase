{
  int exitCode=-1;
  int i=0;
  if (argv.length < 4) {
    printUsage("");
    return exitCode;
  }
  try {
    init();
  }
 catch (  HBaseRPC.VersionMismatch v) {
    LOG.warn("Version Mismatch between client and server" + "... command aborted.");
    return exitCode;
  }
catch (  IOException e) {
    LOG.warn("Bad connection to FS. command aborted.");
    return exitCode;
  }
  try {
    for (; i < argv.length; i++) {
      if ("-numThreads".equals(argv[i])) {
        i++;
        this.numThreads=Integer.parseInt(argv[i]);
      }
 else       if ("-numIterationsPerThread".equals(argv[i])) {
        i++;
        this.numIterationsPerThread=Integer.parseInt(argv[i]);
      }
 else       if ("-path".equals(argv[i])) {
        i++;
        this.regionRootDir=new Path(argv[i]);
        this.regionRootDir=regionRootDir.makeQualified(this.fs);
      }
 else       if ("-nosync".equals(argv[i])) {
        this.appendNoSync=true;
      }
 else {
        printUsage(argv[i]);
        return exitCode;
      }
    }
  }
 catch (  NumberFormatException nfe) {
    LOG.warn("Illegal numThreads or numIterationsPerThread, " + " a positive integer expected");
    throw nfe;
  }
  go();
  return 0;
}
