{
  return new InputStream(){
    private final ByteBuffer buf=buffer.slice();
    @Override public void mark(    int readlimit){
      buf.mark();
    }
    @Override public boolean markSupported(){
      return true;
    }
    @Override public void reset() throws IOException {
      try {
        buf.reset();
      }
 catch (      InvalidMarkException e) {
        throw new IOException(e);
      }
    }
    @Override public int available() throws IOException {
      return buf.remaining();
    }
    @Override public int read() throws IOException {
      if (!buf.hasRemaining()) {
        return -1;
      }
      return buf.get() & 0xFF;
    }
    @Override public int read(    byte[] bytes,    int off,    int len) throws IOException {
      if (!buf.hasRemaining()) {
        return -1;
      }
      len=Math.min(len,buf.remaining());
      buf.get(bytes,off,len);
      return len;
    }
  }
;
}
