{
  IntegrationTestingUtility testUtil=getTestingUtil(conf);
  testUtil.getConfiguration().setInt("hfile.format.version",3);
  testUtil.getConfiguration().set(HConstants.CRYPTO_KEYPROVIDER_CONF_KEY,KeyProviderForTesting.class.getName());
  testUtil.getConfiguration().set(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY,"hbase");
  testUtil.getConfiguration().setClass("hbase.regionserver.hlog.reader.impl",SecureProtobufLogReader.class,HLog.Reader.class);
  testUtil.getConfiguration().setClass("hbase.regionserver.hlog.writer.impl",SecureProtobufLogWriter.class,HLog.Writer.class);
  testUtil.getConfiguration().setBoolean(HConstants.ENABLE_WAL_ENCRYPTION,true);
  testUtil.getConfiguration().setInt(HRegion.MEMSTORE_PERIODIC_FLUSH_INTERVAL,120000);
  super.setUp();
  SecureRandom rng=new SecureRandom();
  byte[] keyBytes=new byte[AES.KEY_LENGTH];
  rng.nextBytes(keyBytes);
  Key cfKey=new SecretKeySpec(keyBytes,"AES");
  final HBaseAdmin admin=testUtil.getHBaseAdmin();
  HTableDescriptor tableDescriptor=new HTableDescriptor(admin.getTableDescriptor(Bytes.toBytes(getTablename())));
  for (  HColumnDescriptor columnDescriptor : tableDescriptor.getColumnFamilies()) {
    columnDescriptor.setEncryptionType("AES");
    columnDescriptor.setEncryptionKey(EncryptionUtil.wrapKey(testUtil.getConfiguration(),"hbase",cfKey));
    LOG.info("Updating CF schema for " + getTablename() + "."+ columnDescriptor.getNameAsString());
    admin.disableTable(getTablename());
    admin.modifyColumn(getTablename(),columnDescriptor);
    admin.enableTable(getTablename());
    testUtil.waitFor(10000,1000,true,new Predicate<IOException>(){
      @Override public boolean evaluate() throws IOException {
        return admin.isTableAvailable(getTablename());
      }
    }
);
  }
}
