{
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  HMaster m=cluster.getMaster();
  HTable ht=TEST_UTIL.createTable(TABLENAME,FAMILYNAME);
  assertTrue(m.assignmentManager.getTableStateManager().isTableState(TABLENAME,TableState.State.ENABLED));
  TEST_UTIL.loadTable(ht,FAMILYNAME,false);
  ht.close();
  List<Pair<HRegionInfo,ServerName>> tableRegions=MetaTableAccessor.getTableRegionsAndLocations(m.getZooKeeper(),m.getShortCircuitConnection(),TABLENAME);
  LOG.info("Regions after load: " + Joiner.on(',').join(tableRegions));
  assertEquals(1,tableRegions.size());
  assertArrayEquals(HConstants.EMPTY_START_ROW,tableRegions.get(0).getFirst().getStartKey());
  assertArrayEquals(HConstants.EMPTY_END_ROW,tableRegions.get(0).getFirst().getEndKey());
  LOG.info("Splitting table");
  TEST_UTIL.getHBaseAdmin().split(TABLENAME);
  LOG.info("Waiting for split result to be about to open");
  RegionStates regionStates=m.assignmentManager.getRegionStates();
  while (regionStates.getRegionsOfTable(TABLENAME).size() <= 1) {
    Thread.sleep(100);
  }
  LOG.info("Making sure we can call getTableRegions while opening");
  tableRegions=MetaTableAccessor.getTableRegionsAndLocations(m.getZooKeeper(),m.getShortCircuitConnection(),TABLENAME,false);
  LOG.info("Regions: " + Joiner.on(',').join(tableRegions));
  assertEquals(3,tableRegions.size());
  LOG.info("Making sure we can call getTableRegionClosest while opening");
  Pair<HRegionInfo,ServerName> pair=m.getTableRegionForRow(TABLENAME,Bytes.toBytes("cde"));
  LOG.info("Result is: " + pair);
  Pair<HRegionInfo,ServerName> tableRegionFromName=MetaTableAccessor.getRegion(m.getShortCircuitConnection(),pair.getFirst().getRegionName());
  assertEquals(tableRegionFromName.getFirst(),pair.getFirst());
}
