{
  super();
  this.server=server;
  this.threadWakeFrequency=conf.getLong(HConstants.THREAD_WAKE_FREQUENCY,10 * 1000);
  long max=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
  this.globalMemcacheLimit=globalMemcacheLimit(max,DEFAULT_UPPER,UPPER_KEY,conf);
  long lower=globalMemcacheLimit(max,DEFAULT_LOWER,LOWER_KEY,conf);
  if (lower > this.globalMemcacheLimit) {
    lower=this.globalMemcacheLimit;
    LOG.info("Setting globalMemcacheLimitLowMark == globalMemcacheLimit " + "because supplied " + LOWER_KEY + " was > "+ UPPER_KEY);
  }
  this.globalMemcacheLimitLowMark=lower;
  this.blockingStoreFilesNumber=conf.getInt("hbase.hstore.blockingStoreFiles",-1);
  if (this.blockingStoreFilesNumber == -1) {
    this.blockingStoreFilesNumber=1 + conf.getInt("hbase.hstore.compactionThreshold",3);
  }
  this.blockingWaitTime=conf.getInt("hbase.hstore.blockingWaitTime",90000);
  LOG.info("globalMemcacheLimit=" + StringUtils.humanReadableInt(this.globalMemcacheLimit) + ", globalMemcacheLimitLowMark="+ StringUtils.humanReadableInt(this.globalMemcacheLimitLowMark)+ ", maxHeap="+ StringUtils.humanReadableInt(max));
}
