{
  final String[] protectedSubDirs=new String[]{HConstants.BASE_NAMESPACE_DIR,HConstants.HFILE_ARCHIVE_DIRECTORY,HConstants.HREGION_LOGDIR_NAME,HConstants.HREGION_OLDLOGDIR_NAME,MasterProcedureConstants.MASTER_PROCEDURE_LOGDIR,HConstants.CORRUPT_DIR_NAME,HConstants.HBCK_SIDELINEDIR_NAME,MobConstants.MOB_DIR_NAME};
  checkRootDir(this.rootdir,conf,this.fs);
  checkTempDir(this.tempdir,conf,this.fs);
  for (  String subDir : protectedSubDirs) {
    checkSubDir(new Path(this.rootdir,subDir));
  }
  checkStagingDir();
  if (isSecurityEnabled) {
    fs.setPermission(new Path(rootdir,HConstants.VERSION_FILE_NAME),secureRootFilePerms);
    fs.setPermission(new Path(rootdir,HConstants.CLUSTER_ID_FILE_NAME),secureRootFilePerms);
  }
  FsPermission currentRootPerms=fs.getFileStatus(this.rootdir).getPermission();
  if (!currentRootPerms.getUserAction().implies(FsAction.EXECUTE) || !currentRootPerms.getGroupAction().implies(FsAction.EXECUTE) || !currentRootPerms.getOtherAction().implies(FsAction.EXECUTE)) {
    LOG.warn("rootdir permissions do not contain 'excute' for user, group or other. " + "Automatically adding 'excute' permission for all");
    fs.setPermission(this.rootdir,new FsPermission(currentRootPerms.getUserAction().or(FsAction.EXECUTE),currentRootPerms.getGroupAction().or(FsAction.EXECUTE),currentRootPerms.getOtherAction().or(FsAction.EXECUTE)));
  }
}
