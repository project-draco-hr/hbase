{
  long splitTime=0, splitLogSize=0;
  List<Path> logDirs=getLogDirs(serverNames);
  if (distributedLogSplitting) {
    splitLogManager.handleDeadWorkers(serverNames);
    splitTime=EnvironmentEdgeManager.currentTimeMillis();
    splitLogSize=splitLogManager.splitLogDistributed(serverNames,logDirs,filter);
    splitTime=EnvironmentEdgeManager.currentTimeMillis() - splitTime;
  }
 else {
    for (    Path logDir : logDirs) {
      this.splitLogLock.lock();
      try {
        HLogSplitter splitter=HLogSplitter.createLogSplitter(conf,rootdir,logDir,oldLogDir,this.fs);
        try {
          FSUtils.waitOnSafeMode(conf,conf.getInt(HConstants.THREAD_WAKE_FREQUENCY,1000));
          splitter.splitLog();
        }
 catch (        OrphanHLogAfterSplitException e) {
          LOG.warn("Retrying splitting because of:",e);
          splitter=HLogSplitter.createLogSplitter(conf,rootdir,logDir,oldLogDir,this.fs);
          splitter.splitLog();
        }
        splitTime=splitter.getTime();
        splitLogSize=splitter.getSize();
      }
  finally {
        this.splitLogLock.unlock();
      }
    }
  }
  if (this.metricsMaster != null) {
    if (filter == this.META_FILTER) {
      this.metricsMaster.addMetaWALSplit(splitTime,splitLogSize);
    }
 else {
      this.metricsMaster.addSplit(splitTime,splitLogSize);
    }
  }
}
