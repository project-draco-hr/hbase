{
  HRegion region=null;
  try {
    int testIndex=0;
    TEST_UTIL.startMiniZKCluster();
    final Server server=new MockServer(TEST_UTIL);
    HTableDescriptor htd=new HTableDescriptor("testShouldNotCompeleteOpenedRegionSuccessfullyIfVersionMismatches");
    HRegionInfo hri=new HRegionInfo(htd.getName(),Bytes.toBytes(testIndex),Bytes.toBytes(testIndex + 1));
    region=HRegion.createHRegion(hri,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
    assertNotNull(region);
    AssignmentManager am=Mockito.mock(AssignmentManager.class);
    when(am.isRegionInTransition(hri)).thenReturn(new RegionState(region.getRegionInfo(),RegionState.State.OPEN,System.currentTimeMillis(),server.getServerName()));
    zkw=HBaseTestingUtility.createAndForceNodeToOpenedState(TEST_UTIL,region,server.getServerName());
    when(am.getZKTable()).thenReturn(new ZKTable(zkw));
    Stat stat=new Stat();
    String nodeName=ZKAssign.getNodeName(zkw,region.getRegionInfo().getEncodedName());
    ZKUtil.getDataAndWatch(zkw,nodeName,stat);
    OpenedRegionHandler handler=new OpenedRegionHandler(server,am,region.getRegionInfo(),server.getServerName(),stat.getVersion());
    ZKAssign.transitionNode(zkw,region.getRegionInfo(),server.getServerName(),EventType.RS_ZK_REGION_OPENED,EventType.RS_ZK_REGION_OPENED,stat.getVersion());
    boolean expectedException=false;
    try {
      handler.process();
    }
 catch (    Exception e) {
      expectedException=true;
    }
    assertFalse("The process method should not throw any exception.",expectedException);
    List<String> znodes=ZKUtil.listChildrenAndWatchForNewChildren(zkw,zkw.assignmentZNode);
    String regionName=znodes.get(0);
    assertEquals("The region should not be opened successfully.",regionName,region.getRegionInfo().getEncodedName());
  }
  finally {
    region.close();
    region.getLog().closeAndDelete();
    TEST_UTIL.shutdownMiniZKCluster();
  }
}
