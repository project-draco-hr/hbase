{
  HRegion region=null;
  try {
    int testIndex=0;
    TEST_UTIL.startMiniZKCluster();
    final Server server=new MockServer(TEST_UTIL);
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("testShouldNotCompeleteOpenedRegionSuccessfullyIfVersionMismatches"));
    HRegionInfo hri=new HRegionInfo(htd.getTableName(),Bytes.toBytes(testIndex),Bytes.toBytes(testIndex + 1));
    region=HRegion.createHRegion(hri,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
    assertNotNull(region);
    AssignmentManager am=Mockito.mock(AssignmentManager.class);
    RegionStates rsm=Mockito.mock(RegionStates.class);
    Mockito.doReturn(rsm).when(am).getRegionStates();
    when(rsm.isRegionInTransition(hri)).thenReturn(false);
    when(rsm.getRegionState(hri)).thenReturn(new RegionState(region.getRegionInfo(),RegionState.State.OPEN,System.currentTimeMillis(),server.getServerName()));
    zkw=HBaseTestingUtility.createAndForceNodeToOpenedState(TEST_UTIL,region,server.getServerName());
    when(am.getTableStateManager()).thenReturn(new ZKTableStateManager(zkw));
    Stat stat=new Stat();
    String nodeName=ZKAssign.getNodeName(zkw,region.getRegionInfo().getEncodedName());
    ZKUtil.getDataAndWatch(zkw,nodeName,stat);
    BaseCoordinatedStateManager csm=new ZkCoordinatedStateManager();
    csm.initialize(server);
    csm.start();
    OpenRegionCoordination orc=csm.getOpenRegionCoordination();
    ZkOpenRegionCoordination.ZkOpenRegionDetails zkOrd=new ZkOpenRegionCoordination.ZkOpenRegionDetails();
    zkOrd.setServerName(server.getServerName());
    zkOrd.setVersion(stat.getVersion());
    OpenedRegionHandler handler=new OpenedRegionHandler(server,am,region.getRegionInfo(),orc,zkOrd);
    ZKAssign.transitionNode(zkw,region.getRegionInfo(),server.getServerName(),EventType.RS_ZK_REGION_OPENED,EventType.RS_ZK_REGION_OPENED,stat.getVersion());
    boolean expectedException=false;
    try {
      handler.process();
    }
 catch (    Exception e) {
      expectedException=true;
    }
    assertFalse("The process method should not throw any exception.",expectedException);
    List<String> znodes=ZKUtil.listChildrenAndWatchForNewChildren(zkw,zkw.assignmentZNode);
    String regionName=znodes.get(0);
    assertEquals("The region should not be opened successfully.",regionName,region.getRegionInfo().getEncodedName());
  }
  finally {
    HRegion.closeHRegion(region);
    TEST_UTIL.shutdownMiniZKCluster();
  }
}
