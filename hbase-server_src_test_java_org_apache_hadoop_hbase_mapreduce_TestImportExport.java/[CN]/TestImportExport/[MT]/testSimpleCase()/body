{
  String EXPORT_TABLE="exportSimpleCase";
  HTable t=UTIL.createTable(Bytes.toBytes(EXPORT_TABLE),FAMILYA);
  Put p=new Put(ROW1);
  p.add(FAMILYA,QUAL,now,QUAL);
  p.add(FAMILYA,QUAL,now + 1,QUAL);
  p.add(FAMILYA,QUAL,now + 2,QUAL);
  t.put(p);
  p=new Put(ROW2);
  p.add(FAMILYA,QUAL,now,QUAL);
  p.add(FAMILYA,QUAL,now + 1,QUAL);
  p.add(FAMILYA,QUAL,now + 2,QUAL);
  t.put(p);
  String[] args=new String[]{EXPORT_TABLE,OUTPUT_DIR,"1000"};
  GenericOptionsParser opts=new GenericOptionsParser(new Configuration(UTIL.getConfiguration()),args);
  Configuration conf=opts.getConfiguration();
  args=opts.getRemainingArgs();
  Job job=Export.createSubmittableJob(conf,args);
  job.getConfiguration().set("mapreduce.framework.name","yarn");
  job.waitForCompletion(false);
  HBaseFsck.debugLsr(conf,new Path("."));
  assertTrue(job.isSuccessful());
  String IMPORT_TABLE="importTableSimpleCase";
  t=UTIL.createTable(Bytes.toBytes(IMPORT_TABLE),FAMILYB);
  args=new String[]{"-D" + Import.CF_RENAME_PROP + "="+ FAMILYA_STRING+ ":"+ FAMILYB_STRING,IMPORT_TABLE,OUTPUT_DIR};
  opts=new GenericOptionsParser(new Configuration(UTIL.getConfiguration()),args);
  conf=opts.getConfiguration();
  args=opts.getRemainingArgs();
  job=Import.createSubmittableJob(conf,args);
  job.getConfiguration().set("mapreduce.framework.name","yarn");
  job.waitForCompletion(false);
  HBaseFsck.debugLsr(conf,new Path("."));
  assertTrue(job.isSuccessful());
  Get g=new Get(ROW1);
  g.setMaxVersions();
  Result r=t.get(g);
  assertEquals(3,r.size());
  g=new Get(ROW2);
  g.setMaxVersions();
  r=t.get(g);
  assertEquals(3,r.size());
}
