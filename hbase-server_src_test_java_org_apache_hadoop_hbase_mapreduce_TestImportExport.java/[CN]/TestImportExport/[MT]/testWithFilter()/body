{
  String EXPORT_TABLE="exportSimpleCase_ImportWithFilter";
  HTableDescriptor desc=new HTableDescriptor(EXPORT_TABLE);
  desc.addFamily(new HColumnDescriptor(FAMILYA).setMaxVersions(5));
  UTIL.getHBaseAdmin().createTable(desc);
  HTable exportTable=new HTable(UTIL.getConfiguration(),EXPORT_TABLE);
  Put p=new Put(ROW1);
  p.add(FAMILYA,QUAL,now,QUAL);
  p.add(FAMILYA,QUAL,now + 1,QUAL);
  p.add(FAMILYA,QUAL,now + 2,QUAL);
  p.add(FAMILYA,QUAL,now + 3,QUAL);
  p.add(FAMILYA,QUAL,now + 4,QUAL);
  exportTable.put(p);
  String[] args=new String[]{EXPORT_TABLE,OUTPUT_DIR,"1000"};
  GenericOptionsParser opts=new GenericOptionsParser(new Configuration(cluster.getConfiguration()),args);
  Configuration conf=opts.getConfiguration();
  copyConfigurationValues(UTIL.getConfiguration(),conf);
  args=opts.getRemainingArgs();
  Job job=Export.createSubmittableJob(conf,args);
  job.getConfiguration().set("mapreduce.framework.name","yarn");
  job.waitForCompletion(false);
  assertTrue(job.isSuccessful());
  String IMPORT_TABLE="importWithFilter";
  desc=new HTableDescriptor(IMPORT_TABLE);
  desc.addFamily(new HColumnDescriptor(FAMILYA).setMaxVersions(5));
  UTIL.getHBaseAdmin().createTable(desc);
  HTable importTable=new HTable(UTIL.getConfiguration(),IMPORT_TABLE);
  args=new String[]{"-D" + Import.FILTER_CLASS_CONF_KEY + "="+ PrefixFilter.class.getName(),"-D" + Import.FILTER_ARGS_CONF_KEY + "="+ Bytes.toString(ROW1),IMPORT_TABLE,OUTPUT_DIR,"1000"};
  opts=new GenericOptionsParser(new Configuration(cluster.getConfiguration()),args);
  conf=opts.getConfiguration();
  copyConfigurationValues(UTIL.getConfiguration(),conf);
  args=opts.getRemainingArgs();
  job=Import.createSubmittableJob(conf,args);
  job.getConfiguration().set("mapreduce.framework.name","yarn");
  job.waitForCompletion(false);
  assertTrue(job.isSuccessful());
  PrefixFilter filter=new PrefixFilter(ROW1);
  int count=getCount(exportTable,filter);
  Assert.assertEquals("Unexpected row count between export and import tables",count,getCount(importTable,null));
  args=new String[]{"-D" + Import.FILTER_CLASS_CONF_KEY + "="+ Filter.class.getName(),"-D" + Import.FILTER_ARGS_CONF_KEY + "="+ Bytes.toString(ROW1)+ "",EXPORT_TABLE,OUTPUT_DIR,"1000"};
  opts=new GenericOptionsParser(new Configuration(cluster.getConfiguration()),args);
  conf=opts.getConfiguration();
  copyConfigurationValues(UTIL.getConfiguration(),conf);
  args=opts.getRemainingArgs();
  job=Import.createSubmittableJob(conf,args);
  job.getConfiguration().set("mapreduce.framework.name","yarn");
  job.waitForCompletion(false);
  assertFalse("Job succeeedd, but it had a non-instantiable filter!",job.isSuccessful());
  exportTable.close();
  importTable.close();
}
