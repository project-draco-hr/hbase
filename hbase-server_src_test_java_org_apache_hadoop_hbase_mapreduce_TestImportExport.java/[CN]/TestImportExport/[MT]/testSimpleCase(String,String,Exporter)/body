{
  try (Table t=UTIL.createTable(TableName.valueOf(exportTable),FAMILYA,3)){
    Put p=new Put(ROW1);
    p.addColumn(FAMILYA,QUAL,now,QUAL);
    p.addColumn(FAMILYA,QUAL,now + 1,QUAL);
    p.addColumn(FAMILYA,QUAL,now + 2,QUAL);
    t.put(p);
    p=new Put(ROW2);
    p.addColumn(FAMILYA,QUAL,now,QUAL);
    p.addColumn(FAMILYA,QUAL,now + 1,QUAL);
    p.addColumn(FAMILYA,QUAL,now + 2,QUAL);
    t.put(p);
    p=new Put(ROW3);
    p.addColumn(FAMILYA,QUAL,now,QUAL);
    p.addColumn(FAMILYA,QUAL,now + 1,QUAL);
    p.addColumn(FAMILYA,QUAL,now + 2,QUAL);
    t.put(p);
  }
   String[] args=new String[]{"-D" + TableInputFormat.SCAN_ROW_START + "=\\x32row1","-D" + TableInputFormat.SCAN_ROW_STOP + "=\\x32row3",exportTable,FQ_OUTPUT_DIR,"1000"};
  assertTrue(exporter.toString(),exporter.runExport(args));
  try (Table t=UTIL.createTable(TableName.valueOf(importTable),FAMILYB,3)){
    args=new String[]{"-D" + Import.CF_RENAME_PROP + "="+ FAMILYA_STRING+ ":"+ FAMILYB_STRING,importTable,FQ_OUTPUT_DIR};
    assertTrue(exporter.toString(),runImport(args));
    Get g=new Get(ROW1);
    g.setMaxVersions();
    Result r=t.get(g);
    assertEquals(exporter.toString(),3,r.size());
    g=new Get(ROW2);
    g.setMaxVersions();
    r=t.get(g);
    assertEquals(exporter.toString(),3,r.size());
    g=new Get(ROW3);
    r=t.get(g);
    assertEquals(exporter.toString(),0,r.size());
  }
 }
