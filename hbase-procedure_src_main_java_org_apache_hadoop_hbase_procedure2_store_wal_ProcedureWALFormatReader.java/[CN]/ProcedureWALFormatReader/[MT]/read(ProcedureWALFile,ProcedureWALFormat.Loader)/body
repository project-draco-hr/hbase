{
  FSDataInputStream stream=log.getStream();
  try {
    boolean hasMore=true;
    while (hasMore) {
      ProcedureWALEntry entry=ProcedureWALFormat.readEntry(stream);
      if (entry == null) {
        LOG.warn("nothing left to decode. exiting with missing EOF");
        hasMore=false;
        break;
      }
switch (entry.getType()) {
case PROCEDURE_WAL_INIT:
        readInitEntry(entry);
      break;
case PROCEDURE_WAL_INSERT:
    readInsertEntry(entry);
  break;
case PROCEDURE_WAL_UPDATE:
case PROCEDURE_WAL_COMPACT:
readUpdateEntry(entry);
break;
case PROCEDURE_WAL_DELETE:
readDeleteEntry(entry);
break;
case PROCEDURE_WAL_EOF:
hasMore=false;
break;
default :
throw new CorruptedWALProcedureStoreException("Invalid entry: " + entry);
}
}
}
 catch (InvalidProtocolBufferException e) {
LOG.error("got an exception while reading the procedure WAL: " + log,e);
loader.markCorruptedWAL(log,e);
}
if (!localProcedureMap.isEmpty()) {
log.setProcIds(localProcedureMap.getMinProcId(),localProcedureMap.getMaxProcId());
procedureMap.mergeTail(localProcedureMap);
}
}
