{
  List<ServerName> tmp=getListOfServerNames(randomServers(5,0));
  List<HRegionInfo> hris=randomRegions(20);
  hris.add(HRegionInfo.FIRST_META_REGIONINFO);
  tmp.add(master);
  Map<ServerName,List<HRegionInfo>> plans=loadBalancer.roundRobinAssignment(hris,tmp);
  assertTrue(plans.get(master).contains(HRegionInfo.FIRST_META_REGIONINFO));
  assertEquals(1,plans.get(master).size());
  int totalRegion=0;
  for (  List<HRegionInfo> regions : plans.values()) {
    totalRegion+=regions.size();
  }
  assertEquals(hris.size(),totalRegion);
  for (  int[] mock : regionsAndServersMocks) {
    LOG.debug("testBulkAssignment with " + mock[0] + " regions and "+ mock[1]+ " servers");
    List<HRegionInfo> regions=randomRegions(mock[0]);
    List<ServerAndLoad> servers=randomServers(mock[1],0);
    List<ServerName> list=getListOfServerNames(servers);
    Map<ServerName,List<HRegionInfo>> assignments=loadBalancer.roundRobinAssignment(regions,list);
    float average=(float)regions.size() / servers.size();
    int min=(int)Math.floor(average);
    int max=(int)Math.ceil(average);
    if (assignments != null && !assignments.isEmpty()) {
      for (      List<HRegionInfo> regionList : assignments.values()) {
        assertTrue(regionList.size() == min || regionList.size() == max);
      }
    }
    returnRegions(regions);
    returnServers(list);
  }
}
