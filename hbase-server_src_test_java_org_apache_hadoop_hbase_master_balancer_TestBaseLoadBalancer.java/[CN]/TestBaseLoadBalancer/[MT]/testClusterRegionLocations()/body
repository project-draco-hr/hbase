{
  List<ServerName> servers=getListOfServerNames(randomServers(10,10));
  List<HRegionInfo> regions=randomRegions(101);
  Map<ServerName,List<HRegionInfo>> clusterState=new HashMap<ServerName,List<HRegionInfo>>();
  assignRegions(regions,servers,clusterState);
  RegionLocationFinder locationFinder=mock(RegionLocationFinder.class);
  when(locationFinder.getTopBlockLocations(regions.get(0))).thenReturn(Lists.newArrayList(servers.get(0)));
  when(locationFinder.getTopBlockLocations(regions.get(1))).thenReturn(Lists.newArrayList(servers.get(0),servers.get(1)));
  when(locationFinder.getTopBlockLocations(regions.get(42))).thenReturn(Lists.newArrayList(servers.get(4),servers.get(9),servers.get(5)));
  BaseLoadBalancer.Cluster cluster=new Cluster(clusterState,null,locationFinder);
  int r0=ArrayUtils.indexOf(cluster.regions,regions.get(0));
  int r1=ArrayUtils.indexOf(cluster.regions,regions.get(1));
  int r10=ArrayUtils.indexOf(cluster.regions,regions.get(10));
  int r42=ArrayUtils.indexOf(cluster.regions,regions.get(42));
  int s0=cluster.serversToIndex.get(servers.get(0).getHostAndPort());
  int s1=cluster.serversToIndex.get(servers.get(1).getHostAndPort());
  int s4=cluster.serversToIndex.get(servers.get(4).getHostAndPort());
  int s5=cluster.serversToIndex.get(servers.get(5).getHostAndPort());
  int s9=cluster.serversToIndex.get(servers.get(9).getHostAndPort());
  assertEquals(1,cluster.regionLocations[r0].length);
  assertEquals(s0,cluster.regionLocations[r0][0]);
  assertEquals(2,cluster.regionLocations[r1].length);
  assertEquals(s0,cluster.regionLocations[r1][0]);
  assertEquals(s1,cluster.regionLocations[r1][1]);
  assertEquals(0,cluster.regionLocations[r10].length);
  assertEquals(3,cluster.regionLocations[r42].length);
  assertEquals(s4,cluster.regionLocations[r42][0]);
  assertEquals(s9,cluster.regionLocations[r42][1]);
  assertEquals(s5,cluster.regionLocations[r42][2]);
}
