{
  assertEquals(3,UTIL.getDFSCluster().getDataNodes().size());
  store.registerListener(new ProcedureStore.ProcedureStoreListener(){
    @Override public void postSync(){
      Threads.sleepWithoutInterrupt(2000);
    }
    @Override public void abortProcess(){
    }
  }
);
  final AtomicInteger reCount=new AtomicInteger(0);
  Thread[] thread=new Thread[store.getNumThreads() * 2 + 1];
  for (int i=0; i < thread.length; ++i) {
    final long procId=i + 1;
    thread[i]=new Thread(){
      public void run(){
        try {
          LOG.debug("[S] INSERT " + procId);
          store.insert(new TestProcedure(procId,-1),null);
          LOG.debug("[E] INSERT " + procId);
        }
 catch (        RuntimeException e) {
          reCount.incrementAndGet();
          LOG.debug("[F] INSERT " + procId + ": "+ e.getMessage());
        }
      }
    }
;
    thread[i].start();
  }
  Thread.sleep(1000);
  LOG.info("Stop DataNode");
  UTIL.getDFSCluster().stopDataNode(0);
  assertEquals(2,UTIL.getDFSCluster().getDataNodes().size());
  for (int i=0; i < thread.length; ++i) {
    thread[i].join();
  }
  assertFalse(store.isRunning());
  assertTrue(reCount.toString(),reCount.get() >= store.getNumThreads() && reCount.get() < thread.length);
}
