{
  if (blockIndex == null) {
    throw new IOException("Block index not loaded");
  }
  if (block < 0 || block >= blockIndex.count) {
    throw new IOException("Requested block is out of range: " + block + ", max: "+ blockIndex.count);
  }
synchronized (blockIndex.blockKeys[block]) {
    blockLoads++;
    if (cache != null) {
      ByteBuffer cachedBuf=cache.getBlock(name + block,cacheBlock);
      if (cachedBuf != null) {
        cacheHits++;
        return cachedBuf.duplicate();
      }
    }
    long now=System.currentTimeMillis();
    long onDiskBlockSize;
    if (block == blockIndex.count - 1) {
      long offset=this.metaIndex != null ? this.metaIndex.blockOffsets[0] : this.trailer.fileinfoOffset;
      onDiskBlockSize=offset - blockIndex.blockOffsets[block];
    }
 else {
      onDiskBlockSize=blockIndex.blockOffsets[block + 1] - blockIndex.blockOffsets[block];
    }
    ByteBuffer buf=decompress(blockIndex.blockOffsets[block],longToInt(onDiskBlockSize),this.blockIndex.blockDataSizes[block],pread);
    byte[] magic=new byte[DATABLOCKMAGIC.length];
    buf.get(magic,0,magic.length);
    if (!Arrays.equals(magic,DATABLOCKMAGIC)) {
      throw new IOException("Data magic is bad in block " + block);
    }
    buf=buf.slice();
    readTime+=System.currentTimeMillis() - now;
    readOps++;
    if (cacheBlock && cache != null) {
      cache.cacheBlock(name + block,buf.duplicate(),inMemory);
    }
    return buf;
  }
}
