{
  GroupingTableMap gTableMap=null;
  try {
    Result result=mock(Result.class);
    Reporter reporter=mock(Reporter.class);
    final byte[] bSeparator=Bytes.toBytes(" ");
    gTableMap=new GroupingTableMap();
    Configuration cfg=new Configuration();
    cfg.set(GroupingTableMap.GROUP_COLUMNS,"familyA:qualifierA familyB:qualifierB");
    JobConf jobConf=new JobConf(cfg);
    gTableMap.configure(jobConf);
    final byte[] firstPartKeyValue=Bytes.toBytes("34879512738945");
    final byte[] secondPartKeyValue=Bytes.toBytes("35245142671437");
    byte[] row={};
    List<Cell> cells=ImmutableList.<Cell>of(new KeyValue(row,"familyA".getBytes(),"qualifierA".getBytes(),firstPartKeyValue),new KeyValue(row,"familyB".getBytes(),"qualifierB".getBytes(),secondPartKeyValue));
    when(result.listCells()).thenReturn(cells);
    final AtomicBoolean outputCollected=new AtomicBoolean();
    OutputCollector<ImmutableBytesWritable,Result> outputCollector=new OutputCollector<ImmutableBytesWritable,Result>(){
      @Override public void collect(      ImmutableBytesWritable arg,      Result result) throws IOException {
        assertArrayEquals(com.google.common.primitives.Bytes.concat(firstPartKeyValue,bSeparator,secondPartKeyValue),arg.copyBytes());
        outputCollected.set(true);
      }
    }
;
    gTableMap.map(null,result,outputCollector,reporter);
    verify(result).listCells();
    Assert.assertTrue("Output not received",outputCollected.get());
    final byte[] firstPartValue=Bytes.toBytes("238947928");
    final byte[] secondPartValue=Bytes.toBytes("4678456942345");
    byte[][] data={firstPartValue,secondPartValue};
    ImmutableBytesWritable byteWritable=gTableMap.createGroupKey(data);
    assertArrayEquals(com.google.common.primitives.Bytes.concat(firstPartValue,bSeparator,secondPartValue),byteWritable.get());
  }
  finally {
    if (gTableMap != null)     gTableMap.close();
  }
}
