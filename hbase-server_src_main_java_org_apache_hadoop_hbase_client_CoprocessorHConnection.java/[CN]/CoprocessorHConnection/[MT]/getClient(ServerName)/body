{
  if (!this.serverName.equals(serverName)) {
    return delegate.getClient(serverName);
  }
  final BlockingService blocking=ClientService.newReflectiveBlockingService(this.server);
  final RpcServerInterface rpc=this.server.getRpcServer();
  final MonitoredRPCHandler status=TaskMonitor.get().createRPCStatus(Thread.currentThread().getName());
  status.pause("Setting up server-local call");
  final long timestamp=EnvironmentEdgeManager.currentTimeMillis();
  BlockingRpcChannel channel=new BlockingRpcChannel(){
    @Override public Message callBlockingMethod(    MethodDescriptor method,    RpcController controller,    Message request,    Message responsePrototype) throws ServiceException {
      try {
        return rpc.call(blocking,method,request,null,timestamp,status).getFirst();
      }
 catch (      IOException e) {
        throw new ServiceException(e);
      }
    }
  }
;
  return ClientService.newBlockingStub(channel);
}
