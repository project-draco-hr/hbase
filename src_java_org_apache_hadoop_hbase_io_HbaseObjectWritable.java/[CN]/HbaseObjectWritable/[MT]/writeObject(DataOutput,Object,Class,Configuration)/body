{
  if (instance == null) {
    instance=new NullInstance(declaredClass,conf);
    declaredClass=Writable.class;
  }
  Text.writeString(out,declaredClass.getName());
  if (declaredClass.isArray()) {
    int length=Array.getLength(instance);
    out.writeInt(length);
    for (int i=0; i < length; i++) {
      writeObject(out,Array.get(instance,i),declaredClass.getComponentType(),conf);
    }
  }
 else   if (declaredClass == String.class) {
    Text.writeString(out,(String)instance);
  }
 else   if (declaredClass.isPrimitive()) {
    if (declaredClass == Boolean.TYPE) {
      out.writeBoolean(((Boolean)instance).booleanValue());
    }
 else     if (declaredClass == Character.TYPE) {
      out.writeChar(((Character)instance).charValue());
    }
 else     if (declaredClass == Byte.TYPE) {
      out.writeByte(((Byte)instance).byteValue());
    }
 else     if (declaredClass == Short.TYPE) {
      out.writeShort(((Short)instance).shortValue());
    }
 else     if (declaredClass == Integer.TYPE) {
      out.writeInt(((Integer)instance).intValue());
    }
 else     if (declaredClass == Long.TYPE) {
      out.writeLong(((Long)instance).longValue());
    }
 else     if (declaredClass == Float.TYPE) {
      out.writeFloat(((Float)instance).floatValue());
    }
 else     if (declaredClass == Double.TYPE) {
      out.writeDouble(((Double)instance).doubleValue());
    }
 else     if (declaredClass == Void.TYPE) {
    }
 else {
      throw new IllegalArgumentException("Not a primitive: " + declaredClass);
    }
  }
 else   if (declaredClass.isEnum()) {
    Text.writeString(out,((Enum)instance).name());
  }
 else   if (Writable.class.isAssignableFrom(declaredClass)) {
    Text.writeString(out,instance.getClass().getName());
    ((Writable)instance).write(out);
  }
 else {
    throw new IOException("Can't write: " + instance + " as "+ declaredClass);
  }
}
