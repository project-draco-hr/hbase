{
  String className=Text.readString(in);
  Class<?> declaredClass=PRIMITIVE_NAMES.get(className);
  if (declaredClass == null) {
    try {
      declaredClass=conf.getClassByName(className);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("readObject can't find class",e);
    }
  }
  Object instance;
  if (declaredClass.isPrimitive()) {
    if (declaredClass == Boolean.TYPE) {
      instance=Boolean.valueOf(in.readBoolean());
    }
 else     if (declaredClass == Character.TYPE) {
      instance=Character.valueOf(in.readChar());
    }
 else     if (declaredClass == Byte.TYPE) {
      instance=Byte.valueOf(in.readByte());
    }
 else     if (declaredClass == Short.TYPE) {
      instance=Short.valueOf(in.readShort());
    }
 else     if (declaredClass == Integer.TYPE) {
      instance=Integer.valueOf(in.readInt());
    }
 else     if (declaredClass == Long.TYPE) {
      instance=Long.valueOf(in.readLong());
    }
 else     if (declaredClass == Float.TYPE) {
      instance=Float.valueOf(in.readFloat());
    }
 else     if (declaredClass == Double.TYPE) {
      instance=Double.valueOf(in.readDouble());
    }
 else     if (declaredClass == Void.TYPE) {
      instance=null;
    }
 else {
      throw new IllegalArgumentException("Not a primitive: " + declaredClass);
    }
  }
 else   if (declaredClass.isArray()) {
    int length=in.readInt();
    instance=Array.newInstance(declaredClass.getComponentType(),length);
    for (int i=0; i < length; i++) {
      Array.set(instance,i,readObject(in,conf));
    }
  }
 else   if (declaredClass == String.class) {
    instance=Text.readString(in);
  }
 else   if (declaredClass.isEnum()) {
    instance=Enum.valueOf((Class<? extends Enum>)declaredClass,Text.readString(in));
  }
 else {
    Class instanceClass=null;
    try {
      instanceClass=conf.getClassByName(Text.readString(in));
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("readObject can't find class",e);
    }
    Writable writable=WritableFactories.newInstance(instanceClass,conf);
    writable.readFields(in);
    instance=writable;
    if (instanceClass == NullInstance.class) {
      declaredClass=((NullInstance)instance).declaredClass;
      instance=null;
    }
  }
  if (objectWritable != null) {
    objectWritable.declaredClass=declaredClass;
    objectWritable.instance=instance;
  }
  return instance;
}
