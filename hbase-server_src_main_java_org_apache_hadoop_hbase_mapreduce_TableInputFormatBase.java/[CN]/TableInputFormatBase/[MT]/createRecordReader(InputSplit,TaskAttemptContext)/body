{
  if (table == null) {
    initialize(context);
  }
  try {
    if (getTable() == null) {
      throw new IOException(INITIALIZATION_ERROR);
    }
  }
 catch (  IllegalStateException exception) {
    throw new IOException(INITIALIZATION_ERROR,exception);
  }
  TableSplit tSplit=(TableSplit)split;
  LOG.info("Input split length: " + StringUtils.humanReadableInt(tSplit.getLength()) + " bytes.");
  final TableRecordReader trr=this.tableRecordReader != null ? this.tableRecordReader : new TableRecordReader();
  Scan sc=new Scan(this.scan);
  sc.setStartRow(tSplit.getStartRow());
  sc.setStopRow(tSplit.getEndRow());
  trr.setScan(sc);
  trr.setTable(getTable());
  return new RecordReader<ImmutableBytesWritable,Result>(){
    @Override public void close() throws IOException {
      trr.close();
      closeTable();
    }
    @Override public ImmutableBytesWritable getCurrentKey() throws IOException, InterruptedException {
      return trr.getCurrentKey();
    }
    @Override public Result getCurrentValue() throws IOException, InterruptedException {
      return trr.getCurrentValue();
    }
    @Override public float getProgress() throws IOException, InterruptedException {
      return trr.getProgress();
    }
    @Override public void initialize(    InputSplit inputsplit,    TaskAttemptContext context) throws IOException, InterruptedException {
      trr.initialize(inputsplit,context);
    }
    @Override public boolean nextKeyValue() throws IOException, InterruptedException {
      return trr.nextKeyValue();
    }
  }
;
}
