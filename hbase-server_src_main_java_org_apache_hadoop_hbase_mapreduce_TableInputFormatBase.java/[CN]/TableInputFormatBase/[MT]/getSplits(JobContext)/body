{
  if (table == null) {
    throw new IOException("No table was provided.");
  }
  this.nameServer=context.getConfiguration().get("hbase.nameserver.address",null);
  RegionSizeCalculator sizeCalculator=new RegionSizeCalculator(table);
  Pair<byte[][],byte[][]> keys=table.getStartEndKeys();
  if (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {
    HRegionLocation regLoc=table.getRegionLocation(HConstants.EMPTY_BYTE_ARRAY,false);
    if (null == regLoc) {
      throw new IOException("Expecting at least one region.");
    }
    List<InputSplit> splits=new ArrayList<InputSplit>(1);
    long regionSize=sizeCalculator.getRegionSize(regLoc.getRegionInfo().getRegionName());
    TableSplit split=new TableSplit(table.getName(),HConstants.EMPTY_BYTE_ARRAY,HConstants.EMPTY_BYTE_ARRAY,regLoc.getHostnamePort().split(Addressing.HOSTNAME_PORT_SEPARATOR)[0],regionSize);
    splits.add(split);
    return splits;
  }
  List<InputSplit> splits=new ArrayList<InputSplit>(keys.getFirst().length);
  for (int i=0; i < keys.getFirst().length; i++) {
    if (!includeRegionInSplit(keys.getFirst()[i],keys.getSecond()[i])) {
      continue;
    }
    HRegionLocation location=table.getRegionLocation(keys.getFirst()[i],false);
    InetSocketAddress isa=new InetSocketAddress(location.getHostname(),location.getPort());
    if (isa.isUnresolved()) {
      LOG.warn("Failed resolve " + isa);
    }
    InetAddress regionAddress=isa.getAddress();
    String regionLocation;
    try {
      regionLocation=reverseDNS(regionAddress);
    }
 catch (    NamingException e) {
      LOG.warn("Cannot resolve the host name for " + regionAddress + " because of "+ e);
      regionLocation=location.getHostname();
    }
    byte[] startRow=scan.getStartRow();
    byte[] stopRow=scan.getStopRow();
    if ((startRow.length == 0 || keys.getSecond()[i].length == 0 || Bytes.compareTo(startRow,keys.getSecond()[i]) < 0) && (stopRow.length == 0 || Bytes.compareTo(stopRow,keys.getFirst()[i]) > 0)) {
      byte[] splitStart=startRow.length == 0 || Bytes.compareTo(keys.getFirst()[i],startRow) >= 0 ? keys.getFirst()[i] : startRow;
      byte[] splitStop=(stopRow.length == 0 || Bytes.compareTo(keys.getSecond()[i],stopRow) <= 0) && keys.getSecond()[i].length > 0 ? keys.getSecond()[i] : stopRow;
      byte[] regionName=location.getRegionInfo().getRegionName();
      long regionSize=sizeCalculator.getRegionSize(regionName);
      TableSplit split=new TableSplit(table.getName(),splitStart,splitStop,regionLocation,regionSize);
      splits.add(split);
      if (LOG.isDebugEnabled()) {
        LOG.debug("getSplits: split -> " + i + " -> "+ split);
      }
    }
  }
  return splits;
}
