{
  boolean closeOnFinish=false;
  if (table == null) {
    initialize(context);
    closeOnFinish=true;
  }
  try {
    if (getTable() == null) {
      throw new IOException(INITIALIZATION_ERROR);
    }
  }
 catch (  IllegalStateException exception) {
    throw new IOException(INITIALIZATION_ERROR,exception);
  }
  try {
    RegionSizeCalculator sizeCalculator=new RegionSizeCalculator(getRegionLocator(),getAdmin());
    TableName tableName=getTable().getName();
    Pair<byte[][],byte[][]> keys=getStartEndKeys();
    if (keys == null || keys.getFirst() == null || keys.getFirst().length == 0) {
      HRegionLocation regLoc=getRegionLocator().getRegionLocation(HConstants.EMPTY_BYTE_ARRAY,false);
      if (null == regLoc) {
        throw new IOException("Expecting at least one region.");
      }
      List<InputSplit> splits=new ArrayList<InputSplit>(1);
      long regionSize=sizeCalculator.getRegionSize(regLoc.getRegionInfo().getRegionName());
      TableSplit split=new TableSplit(tableName,scan,HConstants.EMPTY_BYTE_ARRAY,HConstants.EMPTY_BYTE_ARRAY,regLoc.getHostnamePort().split(Addressing.HOSTNAME_PORT_SEPARATOR)[0],regionSize);
      splits.add(split);
      return splits;
    }
    List<InputSplit> splits=new ArrayList<InputSplit>(keys.getFirst().length);
    for (int i=0; i < keys.getFirst().length; i++) {
      if (!includeRegionInSplit(keys.getFirst()[i],keys.getSecond()[i])) {
        continue;
      }
      HRegionLocation location=getRegionLocator().getRegionLocation(keys.getFirst()[i],false);
      InetSocketAddress isa=new InetSocketAddress(location.getHostname(),location.getPort());
      if (isa.isUnresolved()) {
        LOG.warn("Failed resolve " + isa);
      }
      InetAddress regionAddress=isa.getAddress();
      String regionLocation;
      regionLocation=reverseDNS(regionAddress);
      byte[] startRow=scan.getStartRow();
      byte[] stopRow=scan.getStopRow();
      if ((startRow.length == 0 || keys.getSecond()[i].length == 0 || Bytes.compareTo(startRow,keys.getSecond()[i]) < 0) && (stopRow.length == 0 || Bytes.compareTo(stopRow,keys.getFirst()[i]) > 0)) {
        byte[] splitStart=startRow.length == 0 || Bytes.compareTo(keys.getFirst()[i],startRow) >= 0 ? keys.getFirst()[i] : startRow;
        byte[] splitStop=(stopRow.length == 0 || Bytes.compareTo(keys.getSecond()[i],stopRow) <= 0) && keys.getSecond()[i].length > 0 ? keys.getSecond()[i] : stopRow;
        byte[] regionName=location.getRegionInfo().getRegionName();
        long regionSize=sizeCalculator.getRegionSize(regionName);
        TableSplit split=new TableSplit(tableName,scan,splitStart,splitStop,regionLocation,regionSize);
        splits.add(split);
        if (LOG.isDebugEnabled()) {
          LOG.debug("getSplits: split -> " + i + " -> "+ split);
        }
      }
    }
    boolean enableAutoBalance=context.getConfiguration().getBoolean(MAPREDUCE_INPUT_AUTOBALANCE,false);
    if (enableAutoBalance) {
      long totalRegionSize=0;
      for (int i=0; i < splits.size(); i++) {
        TableSplit ts=(TableSplit)splits.get(i);
        totalRegionSize+=ts.getLength();
      }
      long averageRegionSize=totalRegionSize / splits.size();
      if (averageRegionSize <= 0) {
        LOG.warn("The averageRegionSize is not positive: " + averageRegionSize + ", "+ "set it to 1.");
        averageRegionSize=1;
      }
      return calculateRebalancedSplits(splits,context,averageRegionSize);
    }
 else {
      return splits;
    }
  }
  finally {
    if (closeOnFinish) {
      closeTable();
    }
  }
}
