{
  rp.init();
  try {
    rp.removePeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    rp.enablePeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    rp.disablePeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    rp.getStatusOfConnectedPeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  assertFalse(rp.connectToPeer("bogus"));
  rp.disconnectFromPeer("bogus");
  assertEquals(0,rp.getRegionServersOfConnectedPeer("bogus").size());
  assertNull(rp.getPeerUUID("bogus"));
  assertNull(rp.getPeerConf("bogus"));
  assertNumberOfPeers(0,0);
  rp.addPeer(ID_ONE,KEY_ONE);
  assertNumberOfPeers(0,1);
  rp.addPeer(ID_TWO,KEY_TWO);
  assertNumberOfPeers(0,2);
  try {
    rp.getStatusOfConnectedPeer(ID_ONE);
    fail("There are no connected peers, should have thrown an IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
  assertNull(rp.getPeerUUID(ID_ONE));
  assertEquals(KEY_ONE,ZKUtil.getZooKeeperClusterKey(rp.getPeerConf(ID_ONE)));
  rp.disconnectFromPeer(ID_ONE);
  assertEquals(0,rp.getRegionServersOfConnectedPeer(ID_ONE).size());
  rp.connectToPeer(ID_ONE);
  assertNumberOfPeers(1,2);
  assertTrue(rp.getStatusOfConnectedPeer(ID_ONE));
  rp.disablePeer(ID_ONE);
  assertConnectedPeerStatus(false,ID_ONE);
  rp.enablePeer(ID_ONE);
  assertConnectedPeerStatus(true,ID_ONE);
  assertEquals(1,rp.getRegionServersOfConnectedPeer(ID_ONE).size());
  assertNotNull(rp.getPeerUUID(ID_ONE).toString());
  rp.disconnectFromPeer(ID_ONE);
  assertNumberOfPeers(0,2);
  try {
    rp.getStatusOfConnectedPeer(ID_ONE);
    fail("There are no connected peers, should have thrown an IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
}
