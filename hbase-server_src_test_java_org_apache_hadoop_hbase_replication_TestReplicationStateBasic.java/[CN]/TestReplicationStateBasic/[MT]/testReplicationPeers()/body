{
  rp.init();
  try {
    rp.unregisterPeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    rp.enablePeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    rp.disablePeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    rp.getStatusOfPeer("bogus");
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  IllegalArgumentException e) {
  }
  assertFalse(rp.peerConnected("bogus"));
  rp.peerDisconnected("bogus");
  assertNull(rp.getPeerConf("bogus"));
  assertNumberOfPeers(0);
  rp.registerPeer(ID_ONE,new ReplicationPeerConfig().setClusterKey(KEY_ONE));
  assertNumberOfPeers(1);
  rp.registerPeer(ID_TWO,new ReplicationPeerConfig().setClusterKey(KEY_TWO));
  assertNumberOfPeers(2);
  try {
    rp.getStatusOfPeer(ID_ONE);
    fail("There are no connected peers, should have thrown an IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
  assertEquals(KEY_ONE,ZKConfig.getZooKeeperClusterKey(rp.getPeerConf(ID_ONE).getSecond()));
  rp.unregisterPeer(ID_ONE);
  rp.peerDisconnected(ID_ONE);
  assertNumberOfPeers(1);
  rp.registerPeer(ID_ONE,new ReplicationPeerConfig().setClusterKey(KEY_ONE));
  rp.peerConnected(ID_ONE);
  assertNumberOfPeers(2);
  assertTrue(rp.getStatusOfPeer(ID_ONE));
  rp.disablePeer(ID_ONE);
  assertConnectedPeerStatus(false,ID_ONE);
  rp.enablePeer(ID_ONE);
  assertConnectedPeerStatus(true,ID_ONE);
  rp.peerDisconnected(ID_ONE);
  assertNumberOfPeers(2);
  try {
    rp.getStatusOfPeer(ID_ONE);
    fail("There are no connected peers, should have thrown an IllegalArgumentException");
  }
 catch (  IllegalArgumentException e) {
  }
}
