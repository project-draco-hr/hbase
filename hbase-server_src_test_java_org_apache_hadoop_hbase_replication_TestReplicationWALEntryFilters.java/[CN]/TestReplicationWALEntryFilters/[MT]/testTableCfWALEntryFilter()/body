{
  ReplicationPeer peer=mock(ReplicationPeer.class);
  when(peer.getTableCFs()).thenReturn(null);
  Entry userEntry=createEntry(null,a,b,c);
  TableCfWALEntryFilter filter=new TableCfWALEntryFilter(peer);
  assertEquals(createEntry(null,a,b,c),filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c);
  Map<TableName,List<String>> tableCfs=new HashMap<TableName,List<String>>();
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c);
  tableCfs=new HashMap<TableName,List<String>>();
  tableCfs.put(TableName.valueOf("bar"),null);
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c);
  tableCfs=new HashMap<TableName,List<String>>();
  tableCfs.put(TableName.valueOf("foo"),Lists.newArrayList("a"));
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(createEntry(null,a),filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c,d);
  tableCfs=new HashMap<TableName,List<String>>();
  tableCfs.put(TableName.valueOf("foo"),Lists.newArrayList("a","c"));
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(createEntry(null,a,c),filter.filter(userEntry));
}
