{
  ReplicationPeer peer=mock(ReplicationPeer.class);
  when(peer.getTableCFs()).thenReturn(null);
  HLog.Entry userEntry=createEntry(a,b,c);
  TableCfWALEntryFilter filter=new TableCfWALEntryFilter(peer);
  assertEquals(createEntry(a,b,c),filter.filter(userEntry));
  userEntry=createEntry(a,b,c);
  Map<String,List<String>> tableCfs=new HashMap<String,List<String>>();
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(a,b,c);
  tableCfs=new HashMap<String,List<String>>();
  tableCfs.put("bar",null);
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(a,b,c);
  tableCfs=new HashMap<String,List<String>>();
  tableCfs.put("foo",Lists.newArrayList("a"));
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(createEntry(a),filter.filter(userEntry));
  userEntry=createEntry(a,b,c,d);
  tableCfs=new HashMap<String,List<String>>();
  tableCfs.put("foo",Lists.newArrayList("a","c"));
  when(peer.getTableCFs()).thenReturn(tableCfs);
  filter=new TableCfWALEntryFilter(peer);
  assertEquals(createEntry(a,c),filter.filter(userEntry));
}
