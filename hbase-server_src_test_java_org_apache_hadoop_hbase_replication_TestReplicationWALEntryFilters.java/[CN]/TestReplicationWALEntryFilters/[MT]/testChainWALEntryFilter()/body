{
  Entry userEntry=createEntry(a,b,c);
  ChainWALEntryFilter filter=new ChainWALEntryFilter(passFilter);
  assertEquals(createEntry(a,b,c),filter.filter(userEntry));
  filter=new ChainWALEntryFilter(passFilter,passFilter);
  assertEquals(createEntry(a,b,c),filter.filter(userEntry));
  filter=new ChainWALEntryFilter(passFilter,passFilter,passFilter);
  assertEquals(createEntry(a,b,c),filter.filter(userEntry));
  filter=new ChainWALEntryFilter(nullFilter);
  assertEquals(null,filter.filter(userEntry));
  filter=new ChainWALEntryFilter(nullFilter,passFilter);
  assertEquals(null,filter.filter(userEntry));
  filter=new ChainWALEntryFilter(passFilter,nullFilter);
  assertEquals(null,filter.filter(userEntry));
  filter=new ChainWALEntryFilter(nullFilter,passFilter,nullFilter);
  assertEquals(null,filter.filter(userEntry));
  filter=new ChainWALEntryFilter(nullFilter,nullFilter);
  assertEquals(null,filter.filter(userEntry));
  filter=new ChainWALEntryFilter(new ChainWALEntryFilter(passFilter,new ChainWALEntryFilter(passFilter,passFilter),new ChainWALEntryFilter(passFilter),new ChainWALEntryFilter(passFilter)),new ChainWALEntryFilter(passFilter));
  assertEquals(createEntry(a,b,c),filter.filter(userEntry));
  filter=new ChainWALEntryFilter(new ChainWALEntryFilter(passFilter,new ChainWALEntryFilter(passFilter,new ChainWALEntryFilter(nullFilter))),new ChainWALEntryFilter(passFilter));
  assertEquals(null,filter.filter(userEntry));
}
