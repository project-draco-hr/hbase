{
  WALEntryFilter filter=new ChainWALEntryFilter(new ScopeWALEntryFilter());
  Entry userEntry=createEntry(null,a,b);
  Entry userEntryA=createEntry(null,a);
  Entry userEntryB=createEntry(null,b);
  Entry userEntryEmpty=createEntry(null);
  assertEquals(null,filter.filter(userEntry));
  TreeMap<byte[],Integer> scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  userEntry=createEntry(scopes,a,b);
  assertEquals(null,filter.filter(userEntry));
  scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  scopes.put(c,HConstants.REPLICATION_SCOPE_GLOBAL);
  userEntry=createEntry(scopes,a,b);
  assertEquals(userEntryEmpty,filter.filter(userEntry));
  scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  scopes.put(a,HConstants.REPLICATION_SCOPE_LOCAL);
  userEntry=createEntry(scopes,a,b);
  assertEquals(userEntryEmpty,filter.filter(userEntry));
  scopes.put(b,HConstants.REPLICATION_SCOPE_LOCAL);
  assertEquals(userEntryEmpty,filter.filter(userEntry));
  scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  scopes.put(a,HConstants.REPLICATION_SCOPE_GLOBAL);
  userEntry=createEntry(scopes,a,b);
  assertEquals(userEntryA,filter.filter(userEntry));
  scopes.put(b,HConstants.REPLICATION_SCOPE_LOCAL);
  assertEquals(userEntryA,filter.filter(userEntry));
  scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  scopes.put(b,HConstants.REPLICATION_SCOPE_GLOBAL);
  userEntry=createEntry(scopes,a,b);
  assertEquals(userEntryB,filter.filter(userEntry));
  scopes.put(a,HConstants.REPLICATION_SCOPE_LOCAL);
  assertEquals(userEntryB,filter.filter(userEntry));
  scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  scopes.put(b,HConstants.REPLICATION_SCOPE_GLOBAL);
  userEntry=createEntry(scopes,a,b);
  assertEquals(userEntryB,filter.filter(userEntry));
  scopes.put(a,HConstants.REPLICATION_SCOPE_LOCAL);
  assertEquals(userEntryB,filter.filter(userEntry));
}
