{
  final TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
  Admin hBaseAdmin=TEST_UTIL.getHBaseAdmin();
  HColumnDescriptor colDesc=new HColumnDescriptor(fam);
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(colDesc);
  hBaseAdmin.createTable(desc);
  try (Table table=TEST_UTIL.getConnection().getTable(tableName)){
    Put put=new Put(row1);
    put.addColumn(fam,qual,value);
    put.setCellVisibility(new CellVisibility(CONFIDENTIAL));
    table.put(put);
    Delete d=new Delete(row1);
    d.addColumn(fam,qual);
    table.delete(d);
    PrivilegedExceptionAction<Void> scanAction=new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Scan s=new Scan();
          ResultScanner scanner=table.getScanner(s);
          Result[] next=scanner.next(3);
          assertEquals(next.length,1);
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
;
    SUPERUSER.runAs(scanAction);
    d=new Delete(row1);
    d.setCellVisibility(new CellVisibility(CONFIDENTIAL));
    d.addColumn(fam,qual);
    table.delete(d);
    scanAction=new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Scan s=new Scan();
          ResultScanner scanner=table.getScanner(s);
          Result[] next=scanner.next(3);
          assertEquals(next.length,0);
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
;
    SUPERUSER.runAs(scanAction);
  }
 }
