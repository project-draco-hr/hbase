{
  setAuths();
  final TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
  try (Table table=doPuts(tableName)){
    TEST_UTIL.getHBaseAdmin().flush(tableName);
    PrivilegedExceptionAction<Void> actiona=new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Table table=new HTable(conf,tableName)){
          Delete d1=new Delete(row1);
          d1.setCellVisibility(new CellVisibility(CONFIDENTIAL));
          d1.addFamily(fam);
          table.delete(d1);
          Delete d2=new Delete(row1);
          d2.setCellVisibility(new CellVisibility(SECRET + "&" + TOPSECRET));
          d2.addFamily(fam);
          table.delete(d2);
          Delete d3=new Delete(row1);
          d3.setCellVisibility(new CellVisibility("(" + PRIVATE + "&"+ CONFIDENTIAL+ ")|("+ SECRET+ "&"+ TOPSECRET+ ")"));
          d3.addFamily(fam);
          table.delete(d3);
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
;
    SUPERUSER.runAs(actiona);
    Scan s=new Scan();
    s.setMaxVersions(5);
    s.setAuthorizations(new Authorizations(SECRET,PRIVATE,CONFIDENTIAL,TOPSECRET));
    ResultScanner scanner=table.getScanner(s);
    Result[] next=scanner.next(3);
    assertEquals(1,next.length);
    CellScanner cellScanner=next[0].cellScanner();
    cellScanner.advance();
    Cell current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row2,0,row2.length));
  }
 }
