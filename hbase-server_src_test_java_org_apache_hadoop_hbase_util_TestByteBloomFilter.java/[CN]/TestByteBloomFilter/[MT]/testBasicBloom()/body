{
  ByteBloomFilter bf1=new ByteBloomFilter(1000,(float)0.01,Hash.MURMUR_HASH,0);
  ByteBloomFilter bf2=new ByteBloomFilter(1000,(float)0.01,Hash.MURMUR_HASH,0);
  bf1.allocBloom();
  bf2.allocBloom();
  byte[] key1={1,2,3,4,5,6,7,8,9};
  byte[] key2={1,2,3,4,5,6,7,8,7};
  bf1.add(key1);
  bf2.add(key2);
  assertTrue(bf1.contains(key1));
  assertFalse(bf1.contains(key2));
  assertFalse(bf2.contains(key1));
  assertTrue(bf2.contains(key2));
  byte[] bkey={1,2,3,4};
  byte[] bval="this is a much larger byte array".getBytes();
  bf1.add(bkey);
  bf1.add(bval,1,bval.length - 1);
  assertTrue(bf1.contains(bkey));
  assertTrue(bf1.contains(bval,1,bval.length - 1));
  assertFalse(bf1.contains(bval));
  assertFalse(bf1.contains(bval));
  ByteArrayOutputStream bOut=new ByteArrayOutputStream();
  bf1.writeBloom(new DataOutputStream(bOut));
  ByteBuffer bb=ByteBuffer.wrap(bOut.toByteArray());
  ByteBloomFilter newBf1=new ByteBloomFilter(1000,(float)0.01,Hash.MURMUR_HASH,0);
  assertTrue(newBf1.contains(key1,bb));
  assertFalse(newBf1.contains(key2,bb));
  assertTrue(newBf1.contains(bkey,bb));
  assertTrue(newBf1.contains(bval,1,bval.length - 1,bb));
  assertFalse(newBf1.contains(bval,bb));
  assertFalse(newBf1.contains(bval,bb));
  System.out.println("Serialized as " + bOut.size() + " bytes");
  assertTrue(bOut.size() - bf1.byteSize < 10);
}
