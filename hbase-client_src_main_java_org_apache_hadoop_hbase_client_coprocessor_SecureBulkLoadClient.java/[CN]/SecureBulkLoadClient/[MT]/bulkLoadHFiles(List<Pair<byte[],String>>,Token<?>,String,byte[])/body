{
  try {
    CoprocessorRpcChannel channel=table.coprocessorService(startRow);
    SecureBulkLoadProtos.SecureBulkLoadService instance=ProtobufUtil.newServiceStub(SecureBulkLoadProtos.SecureBulkLoadService.class,channel);
    SecureBulkLoadProtos.DelegationToken protoDT=SecureBulkLoadProtos.DelegationToken.newBuilder().build();
    if (userToken != null) {
      protoDT=SecureBulkLoadProtos.DelegationToken.newBuilder().setIdentifier(ZeroCopyLiteralByteString.wrap(userToken.getIdentifier())).setPassword(ZeroCopyLiteralByteString.wrap(userToken.getPassword())).setKind(userToken.getKind().toString()).setService(userToken.getService().toString()).build();
    }
    List<ClientProtos.BulkLoadHFileRequest.FamilyPath> protoFamilyPaths=new ArrayList<ClientProtos.BulkLoadHFileRequest.FamilyPath>();
    for (    Pair<byte[],String> el : familyPaths) {
      protoFamilyPaths.add(ClientProtos.BulkLoadHFileRequest.FamilyPath.newBuilder().setFamily(ZeroCopyLiteralByteString.wrap(el.getFirst())).setPath(el.getSecond()).build());
    }
    SecureBulkLoadProtos.SecureBulkLoadHFilesRequest request=SecureBulkLoadProtos.SecureBulkLoadHFilesRequest.newBuilder().setFsToken(protoDT).addAllFamilyPath(protoFamilyPaths).setBulkToken(bulkToken).build();
    ServerRpcController controller=new ServerRpcController();
    BlockingRpcCallback<SecureBulkLoadProtos.SecureBulkLoadHFilesResponse> rpcCallback=new BlockingRpcCallback<SecureBulkLoadProtos.SecureBulkLoadHFilesResponse>();
    instance.secureBulkLoadHFiles(controller,request,rpcCallback);
    SecureBulkLoadProtos.SecureBulkLoadHFilesResponse response=rpcCallback.get();
    if (controller.failedOnException()) {
      throw controller.getFailedOn();
    }
    return response.getLoaded();
  }
 catch (  Throwable throwable) {
    throw new IOException(throwable);
  }
}
