{
  Assume.assumeTrue(createWithFavoredNode != null);
  InetSocketAddress[] nodes=new InetSocketAddress[REGION_SERVERS];
  List<DataNode> datanodes=TEST_UTIL.getDFSCluster().getDataNodes();
  Method selfAddress;
  try {
    selfAddress=DataNode.class.getMethod("getSelfAddr");
  }
 catch (  NoSuchMethodException ne) {
    selfAddress=DataNode.class.getMethod("getXferAddress");
  }
  for (int i=0; i < REGION_SERVERS; i++) {
    nodes[i]=(InetSocketAddress)selfAddress.invoke(datanodes.get(i));
  }
  String[] nodeNames=new String[REGION_SERVERS];
  for (int i=0; i < REGION_SERVERS; i++) {
    nodeNames[i]=nodes[i].getAddress().getHostAddress() + ":" + nodes[i].getPort();
  }
  for (int i=0; i < REGION_SERVERS; i++) {
    HRegionServer server=TEST_UTIL.getHBaseCluster().getRegionServer(i);
    List<HRegion> regions=server.getOnlineRegions(TABLE_NAME);
    for (    HRegion region : regions) {
      List<org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName> favoredNodes=new ArrayList<org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName>(3);
      String encodedRegionName=region.getRegionInfo().getEncodedName();
      for (int j=0; j < FAVORED_NODES_NUM; j++) {
        org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.Builder b=org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.ServerName.newBuilder();
        b.setHostName(nodes[(i + j) % REGION_SERVERS].getAddress().getHostAddress());
        b.setPort(nodes[(i + j) % REGION_SERVERS].getPort());
        b.setStartCode(-1);
        favoredNodes.add(b.build());
      }
      server.updateRegionFavoredNodesMapping(encodedRegionName,favoredNodes);
    }
  }
  for (int i=0; i < FLUSHES; i++) {
    TEST_UTIL.loadTable(table,COLUMN_FAMILY);
    TEST_UTIL.flush();
  }
  for (int i=0; i < REGION_SERVERS; i++) {
    HRegionServer server=TEST_UTIL.getHBaseCluster().getRegionServer(i);
    List<HRegion> regions=server.getOnlineRegions(TABLE_NAME);
    for (    HRegion region : regions) {
      List<String> files=region.getStoreFileList(new byte[][]{COLUMN_FAMILY});
      for (      String file : files) {
        FileStatus status=TEST_UTIL.getDFSCluster().getFileSystem().getFileStatus(new Path(new URI(file).getPath()));
        BlockLocation[] lbks=((DistributedFileSystem)TEST_UTIL.getDFSCluster().getFileSystem()).getFileBlockLocations(status,0,Long.MAX_VALUE);
        for (        BlockLocation lbk : lbks) {
          locations:           for (          String info : lbk.getNames()) {
            for (int j=0; j < FAVORED_NODES_NUM; j++) {
              if (info.equals(nodeNames[(i + j) % REGION_SERVERS])) {
                continue locations;
              }
            }
            fail("Block location " + info + " not a favored node");
          }
        }
      }
    }
  }
}
