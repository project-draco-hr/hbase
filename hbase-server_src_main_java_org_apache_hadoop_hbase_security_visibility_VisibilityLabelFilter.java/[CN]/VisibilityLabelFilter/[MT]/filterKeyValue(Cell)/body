{
  if (curFamily.getBytes() == null || (Bytes.compareTo(curFamily.getBytes(),curFamily.getOffset(),curFamily.getLength(),cell.getFamilyArray(),cell.getFamilyOffset(),cell.getFamilyLength()) != 0)) {
    curFamily.set(cell.getFamilyArray(),cell.getFamilyOffset(),cell.getFamilyLength());
    curFamilyMaxVersions=cfVsMaxVersions.get(curFamily);
    curQualifier.unset();
  }
  if (curQualifier.getBytes() == null || (Bytes.compareTo(curQualifier.getBytes(),curQualifier.getOffset(),curQualifier.getLength(),cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength()) != 0)) {
    curQualifier.set(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength());
    curQualMetVersions=0;
  }
  curQualMetVersions++;
  if (curQualMetVersions > curFamilyMaxVersions) {
    return ReturnCode.SKIP;
  }
  boolean visibilityTagPresent=false;
  if (cell.getTagsLength() > 0) {
    Iterator<Tag> tagsItr=CellUtil.tagsIterator(cell.getTagsArray(),cell.getTagsOffset(),cell.getTagsLength());
    while (tagsItr.hasNext()) {
      boolean includeKV=true;
      Tag tag=tagsItr.next();
      if (tag.getType() == VisibilityUtils.VISIBILITY_TAG_TYPE) {
        visibilityTagPresent=true;
        int offset=tag.getTagOffset();
        int endOffset=offset + tag.getTagLength();
        while (offset < endOffset) {
          Pair<Integer,Integer> result=StreamUtils.readRawVarint32(tag.getBuffer(),offset);
          int currLabelOrdinal=result.getFirst();
          if (currLabelOrdinal < 0) {
            int temp=-currLabelOrdinal;
            if (this.authLabels.get(temp)) {
              includeKV=false;
              break;
            }
          }
 else {
            if (!this.authLabels.get(currLabelOrdinal)) {
              includeKV=false;
              break;
            }
          }
          offset+=result.getSecond();
        }
        if (includeKV) {
          return ReturnCode.INCLUDE;
        }
      }
    }
  }
  return visibilityTagPresent ? ReturnCode.SKIP : ReturnCode.INCLUDE;
}
