{
  SecurityInfo securityInfoMock=Mockito.mock(SecurityInfo.class);
  Mockito.when(securityInfoMock.getServerPrincipal()).thenReturn(HBaseKerberosUtils.KRB_PRINCIPAL);
  SecurityInfo.addInfo("TestDelayedService",securityInfoMock);
  boolean delayReturnValue=false;
  InetSocketAddress isa=new InetSocketAddress(HOST,0);
  TestDelayedImplementation instance=new TestDelayedImplementation(delayReturnValue);
  BlockingService service=TestDelayedRpcProtos.TestDelayedService.newReflectiveBlockingService(instance);
  RpcServerInterface rpcServer=new RpcServer(null,"testSecuredDelayedRpc",Lists.newArrayList(new RpcServer.BlockingServiceAndInterface(service,null)),isa,serverConf,new FifoRpcScheduler(serverConf,1));
  rpcServer.start();
  RpcClient rpcClient=RpcClientFactory.createClient(clientConf,HConstants.DEFAULT_CLUSTER_ID.toString());
  try {
    InetSocketAddress address=rpcServer.getListenerAddress();
    if (address == null) {
      throw new IOException("Listener channel is closed");
    }
    BlockingRpcChannel channel=rpcClient.createBlockingRpcChannel(ServerName.valueOf(address.getHostName(),address.getPort(),System.currentTimeMillis()),clientUser,0);
    TestDelayedRpcProtos.TestDelayedService.BlockingInterface stub=TestDelayedRpcProtos.TestDelayedService.newBlockingStub(channel);
    List<Integer> results=new ArrayList<>();
    TestThread th1=new TestThread(stub,true,results);
    final Throwable exception[]=new Throwable[1];
    Collections.synchronizedList(new ArrayList<Throwable>());
    Thread.UncaughtExceptionHandler exceptionHandler=new Thread.UncaughtExceptionHandler(){
      public void uncaughtException(      Thread th,      Throwable ex){
        exception[0]=ex;
      }
    }
;
    th1.setUncaughtExceptionHandler(exceptionHandler);
    th1.start();
    th1.join();
    if (exception[0] != null) {
      while (exception[0].getCause() != null) {
        exception[0]=exception[0].getCause();
      }
      throw (Exception)exception[0];
    }
    assertEquals(0xDEADBEEF,results.get(0).intValue());
  }
  finally {
    rpcClient.close();
    rpcServer.stop();
  }
}
