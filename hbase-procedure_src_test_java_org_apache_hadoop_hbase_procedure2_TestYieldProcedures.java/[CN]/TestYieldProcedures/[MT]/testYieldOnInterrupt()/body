{
  final int NUM_STATES=3;
  int count=0;
  TestStateMachineProcedure proc=new TestStateMachineProcedure(true,true);
  ProcedureTestingUtility.submitAndWait(procExecutor,proc);
  assertEquals(NUM_STATES * 4,proc.getExecutionInfo().size());
  for (int i=0; i < NUM_STATES; ++i) {
    TestStateMachineProcedure.ExecutionInfo info=proc.getExecutionInfo().get(count++);
    assertEquals(false,info.isRollback());
    assertEquals(i,info.getStep().ordinal());
    info=proc.getExecutionInfo().get(count++);
    assertEquals(false,info.isRollback());
    assertEquals(i,info.getStep().ordinal());
  }
  for (int i=NUM_STATES - 1; i >= 0; --i) {
    TestStateMachineProcedure.ExecutionInfo info=proc.getExecutionInfo().get(count++);
    assertEquals(true,info.isRollback());
    assertEquals(i,info.getStep().ordinal());
    info=proc.getExecutionInfo().get(count++);
    assertEquals(true,info.isRollback());
    assertEquals(i,info.getStep().ordinal());
  }
  assertEquals(0,procRunnables.size());
  assertEquals(0,procRunnables.addFrontCalls);
  assertEquals(12,procRunnables.addBackCalls);
  assertEquals(11,procRunnables.yieldCalls);
  assertEquals(13,procRunnables.pollCalls);
  assertEquals(1,procRunnables.completionCalls);
}
