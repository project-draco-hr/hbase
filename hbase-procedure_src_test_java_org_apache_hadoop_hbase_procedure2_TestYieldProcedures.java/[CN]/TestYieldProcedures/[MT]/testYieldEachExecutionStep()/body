{
  final int NUM_STATES=3;
  TestStateMachineProcedure[] procs=new TestStateMachineProcedure[3];
  for (int i=0; i < procs.length; ++i) {
    procs[i]=new TestStateMachineProcedure(true,false);
    procExecutor.submitProcedure(procs[i]);
  }
  ProcedureTestingUtility.waitNoProcedureRunning(procExecutor);
  long prevTimestamp=0;
  for (int execStep=0; execStep < NUM_STATES; ++execStep) {
    for (int i=0; i < procs.length; ++i) {
      assertEquals(NUM_STATES * 2,procs[i].getExecutionInfo().size());
      TestStateMachineProcedure.ExecutionInfo info=procs[i].getExecutionInfo().get(execStep);
      LOG.info("i=" + i + " execStep="+ execStep+ " timestamp="+ info.getTimestamp());
      assertEquals(false,info.isRollback());
      assertEquals(execStep,info.getStep().ordinal());
      assertEquals(prevTimestamp + 1,info.getTimestamp());
      prevTimestamp++;
    }
  }
  int count=NUM_STATES;
  for (int execStep=NUM_STATES - 1; execStep >= 0; --execStep) {
    for (int i=0; i < procs.length; ++i) {
      assertEquals(NUM_STATES * 2,procs[i].getExecutionInfo().size());
      TestStateMachineProcedure.ExecutionInfo info=procs[i].getExecutionInfo().get(count);
      LOG.info("i=" + i + " execStep="+ execStep+ " timestamp="+ info.getTimestamp());
      assertEquals(true,info.isRollback());
      assertEquals(execStep,info.getStep().ordinal());
      assertEquals(prevTimestamp + 1,info.getTimestamp());
      prevTimestamp++;
    }
    count++;
  }
}
