{
  final int NUM_STATES=3;
  TestStateMachineProcedure[] procs=new TestStateMachineProcedure[3];
  for (int i=0; i < procs.length; ++i) {
    procs[i]=new TestStateMachineProcedure(true,false);
    procExecutor.submitProcedure(procs[i]);
  }
  ProcedureTestingUtility.waitNoProcedureRunning(procExecutor);
  for (int i=0; i < procs.length; ++i) {
    assertEquals(NUM_STATES * 2,procs[i].getExecutionInfo().size());
    int index=0;
    for (int execStep=0; execStep < NUM_STATES; ++execStep) {
      TestStateMachineProcedure.ExecutionInfo info=procs[i].getExecutionInfo().get(index++);
      assertEquals(false,info.isRollback());
      assertEquals(execStep,info.getStep().ordinal());
    }
    for (int execStep=NUM_STATES - 1; execStep >= 0; --execStep) {
      TestStateMachineProcedure.ExecutionInfo info=procs[i].getExecutionInfo().get(index++);
      assertEquals(true,info.isRollback());
      assertEquals(execStep,info.getStep().ordinal());
    }
  }
  assertEquals(0,procRunnables.size());
  assertEquals(0,procRunnables.addFrontCalls);
  assertEquals(18,procRunnables.addBackCalls);
  assertEquals(15,procRunnables.yieldCalls);
  assertEquals(19,procRunnables.pollCalls);
  assertEquals(3,procRunnables.completionCalls);
}
