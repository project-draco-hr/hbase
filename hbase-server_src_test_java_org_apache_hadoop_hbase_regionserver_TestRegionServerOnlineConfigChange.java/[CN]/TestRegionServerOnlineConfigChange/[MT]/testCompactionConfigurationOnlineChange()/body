{
  String strPrefix="hbase.hstore.compaction.";
  Store s=r1.getStore(COLUMN_FAMILY1);
  if (!(s instanceof HStore)) {
    LOG.error("Can't test the compaction configuration of HStore class. " + "Got a different implementation other than HStore");
    return;
  }
  HStore hstore=(HStore)s;
  double newCompactionRatio=hstore.getStoreEngine().getCompactionPolicy().getConf().getCompactionRatio() + 0.1;
  conf.setFloat(strPrefix + "ratio",(float)newCompactionRatio);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newCompactionRatio,hstore.getStoreEngine().getCompactionPolicy().getConf().getCompactionRatio(),0.00001);
  double newOffPeakCompactionRatio=hstore.getStoreEngine().getCompactionPolicy().getConf().getCompactionRatioOffPeak() + 0.1;
  conf.setFloat(strPrefix + "ratio.offpeak",(float)newOffPeakCompactionRatio);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newOffPeakCompactionRatio,hstore.getStoreEngine().getCompactionPolicy().getConf().getCompactionRatioOffPeak(),0.00001);
  long newThrottlePoint=hstore.getStoreEngine().getCompactionPolicy().getConf().getThrottlePoint() + 10;
  conf.setLong("hbase.regionserver.thread.compaction.throttle",newThrottlePoint);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newThrottlePoint,hstore.getStoreEngine().getCompactionPolicy().getConf().getThrottlePoint());
  int newMinFilesToCompact=hstore.getStoreEngine().getCompactionPolicy().getConf().getMinFilesToCompact() + 1;
  conf.setLong(strPrefix + "min",newMinFilesToCompact);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newMinFilesToCompact,hstore.getStoreEngine().getCompactionPolicy().getConf().getMinFilesToCompact());
  int newMaxFilesToCompact=hstore.getStoreEngine().getCompactionPolicy().getConf().getMaxFilesToCompact() + 1;
  conf.setLong(strPrefix + "max",newMaxFilesToCompact);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newMaxFilesToCompact,hstore.getStoreEngine().getCompactionPolicy().getConf().getMaxFilesToCompact());
  conf.setLong(CompactionConfiguration.HBASE_HSTORE_OFFPEAK_START_HOUR,6);
  conf.setLong(CompactionConfiguration.HBASE_HSTORE_OFFPEAK_END_HOUR,7);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertFalse(hstore.getOffPeakHours().isOffPeakHour(4));
  long newMinCompactSize=hstore.getStoreEngine().getCompactionPolicy().getConf().getMinCompactSize() + 1;
  conf.setLong(strPrefix + "min.size",newMinCompactSize);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newMinCompactSize,hstore.getStoreEngine().getCompactionPolicy().getConf().getMinCompactSize());
  long newMaxCompactSize=hstore.getStoreEngine().getCompactionPolicy().getConf().getMaxCompactSize() - 1;
  conf.setLong(strPrefix + "max.size",newMaxCompactSize);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newMaxCompactSize,hstore.getStoreEngine().getCompactionPolicy().getConf().getMaxCompactSize());
  long newMajorCompactionPeriod=hstore.getStoreEngine().getCompactionPolicy().getConf().getMajorCompactionPeriod() + 10;
  conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,newMajorCompactionPeriod);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newMajorCompactionPeriod,hstore.getStoreEngine().getCompactionPolicy().getConf().getMajorCompactionPeriod());
  float newMajorCompactionJitter=hstore.getStoreEngine().getCompactionPolicy().getConf().getMajorCompactionJitter() + 0.02F;
  conf.setFloat("hbase.hregion.majorcompaction.jitter",newMajorCompactionJitter);
  rs1.getConfigurationManager().notifyAllObservers(conf);
  assertEquals(newMajorCompactionJitter,hstore.getStoreEngine().getCompactionPolicy().getConf().getMajorCompactionJitter(),0.00001);
}
