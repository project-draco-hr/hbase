{
  Class<?> declaredClass=CODE_TO_CLASS.get(in.readByte());
  Object instance;
  if (declaredClass.isPrimitive()) {
    if (declaredClass == Boolean.TYPE) {
      instance=Boolean.valueOf(in.readBoolean());
    }
 else     if (declaredClass == Character.TYPE) {
      instance=Character.valueOf(in.readChar());
    }
 else     if (declaredClass == Byte.TYPE) {
      instance=Byte.valueOf(in.readByte());
    }
 else     if (declaredClass == Short.TYPE) {
      instance=Short.valueOf(in.readShort());
    }
 else     if (declaredClass == Integer.TYPE) {
      instance=Integer.valueOf(in.readInt());
    }
 else     if (declaredClass == Long.TYPE) {
      instance=Long.valueOf(in.readLong());
    }
 else     if (declaredClass == Float.TYPE) {
      instance=Float.valueOf(in.readFloat());
    }
 else     if (declaredClass == Double.TYPE) {
      instance=Double.valueOf(in.readDouble());
    }
 else     if (declaredClass == Void.TYPE) {
      instance=null;
    }
 else {
      throw new IllegalArgumentException("Not a primitive: " + declaredClass);
    }
  }
 else   if (declaredClass.isArray()) {
    if (declaredClass.equals(byte[].class)) {
      instance=Bytes.readByteArray(in);
    }
 else     if (declaredClass.equals(Result[].class)) {
      instance=Result.readArray(in);
    }
 else {
      int length=in.readInt();
      instance=Array.newInstance(declaredClass.getComponentType(),length);
      for (int i=0; i < length; i++) {
        Array.set(instance,i,readObject(in,conf));
      }
    }
  }
 else   if (List.class.isAssignableFrom(declaredClass)) {
    int length=in.readInt();
    instance=new ArrayList(length);
    for (int i=0; i < length; i++) {
      ((ArrayList)instance).add(readObject(in,conf));
    }
  }
 else   if (declaredClass == String.class) {
    instance=Text.readString(in);
  }
 else   if (declaredClass.isEnum()) {
    instance=Enum.valueOf((Class<? extends Enum>)declaredClass,Text.readString(in));
  }
 else {
    Class instanceClass=null;
    Byte b=in.readByte();
    if (b.byteValue() == NOT_ENCODED) {
      String className=Text.readString(in);
      try {
        instanceClass=getClassByName(conf,className);
      }
 catch (      ClassNotFoundException e) {
        LOG.error("Can't find class " + className,e);
        throw new IOException("Can't find class " + className,e);
      }
    }
 else {
      instanceClass=CODE_TO_CLASS.get(b);
    }
    if (Writable.class.isAssignableFrom(instanceClass)) {
      Writable writable=WritableFactories.newInstance(instanceClass,conf);
      try {
        writable.readFields(in);
      }
 catch (      Exception e) {
        LOG.error("Error in readFields",e);
        throw new IOException("Error in readFields",e);
      }
      instance=writable;
      if (instanceClass == NullInstance.class) {
        declaredClass=((NullInstance)instance).declaredClass;
        instance=null;
      }
    }
 else {
      if (instanceClass.isArray()) {
        int length=in.readInt();
        instance=Array.newInstance(instanceClass.getComponentType(),length);
        for (int i=0; i < length; i++) {
          Array.set(instance,i,HbaseObjectWritable.readObject(in,conf));
        }
      }
 else {
        int length=in.readInt();
        byte[] objectBytes=new byte[length];
        in.readFully(objectBytes);
        ByteArrayInputStream bis=null;
        ObjectInputStream ois=null;
        try {
          bis=new ByteArrayInputStream(objectBytes);
          ois=new ObjectInputStream(bis);
          instance=ois.readObject();
        }
 catch (        ClassNotFoundException e) {
          LOG.error("Error in readFields",e);
          throw new IOException("Error in readFields",e);
        }
 finally {
          if (bis != null)           bis.close();
          if (ois != null)           ois.close();
        }
      }
    }
  }
  if (objectWritable != null) {
    objectWritable.declaredClass=declaredClass;
    objectWritable.instance=instance;
  }
  return instance;
}
