{
  Object instanceObj=instance;
  Class declClass=declaredClass;
  if (instanceObj == null) {
    instanceObj=new NullInstance(declClass,conf);
    declClass=Writable.class;
  }
  writeClassCode(out,declClass);
  if (declClass.isArray()) {
    if (declClass.equals(byte[].class)) {
      Bytes.writeByteArray(out,(byte[])instanceObj);
    }
 else     if (declClass.equals(Result[].class)) {
      Result.writeArray(out,(Result[])instanceObj);
    }
 else {
      int length=Array.getLength(instanceObj);
      out.writeInt(length);
      for (int i=0; i < length; i++) {
        writeObject(out,Array.get(instanceObj,i),declClass.getComponentType(),conf);
      }
    }
  }
 else   if (List.class.isAssignableFrom(declClass)) {
    List list=(List)instanceObj;
    int length=list.size();
    out.writeInt(length);
    for (int i=0; i < length; i++) {
      writeObject(out,list.get(i),list.get(i).getClass(),conf);
    }
  }
 else   if (declClass == String.class) {
    Text.writeString(out,(String)instanceObj);
  }
 else   if (declClass.isPrimitive()) {
    if (declClass == Boolean.TYPE) {
      out.writeBoolean(((Boolean)instanceObj).booleanValue());
    }
 else     if (declClass == Character.TYPE) {
      out.writeChar(((Character)instanceObj).charValue());
    }
 else     if (declClass == Byte.TYPE) {
      out.writeByte(((Byte)instanceObj).byteValue());
    }
 else     if (declClass == Short.TYPE) {
      out.writeShort(((Short)instanceObj).shortValue());
    }
 else     if (declClass == Integer.TYPE) {
      out.writeInt(((Integer)instanceObj).intValue());
    }
 else     if (declClass == Long.TYPE) {
      out.writeLong(((Long)instanceObj).longValue());
    }
 else     if (declClass == Float.TYPE) {
      out.writeFloat(((Float)instanceObj).floatValue());
    }
 else     if (declClass == Double.TYPE) {
      out.writeDouble(((Double)instanceObj).doubleValue());
    }
 else     if (declClass == Void.TYPE) {
    }
 else {
      throw new IllegalArgumentException("Not a primitive: " + declClass);
    }
  }
 else   if (declClass.isEnum()) {
    Text.writeString(out,((Enum)instanceObj).name());
  }
 else   if (Writable.class.isAssignableFrom(declClass)) {
    Class<?> c=instanceObj.getClass();
    Byte code=CLASS_TO_CODE.get(c);
    if (code == null) {
      out.writeByte(NOT_ENCODED);
      Text.writeString(out,c.getName());
    }
 else {
      writeClassCode(out,c);
    }
    ((Writable)instanceObj).write(out);
  }
 else   if (Serializable.class.isAssignableFrom(declClass)) {
    Class<?> c=instanceObj.getClass();
    Byte code=CLASS_TO_CODE.get(c);
    if (code == null) {
      out.writeByte(NOT_ENCODED);
      Text.writeString(out,c.getName());
    }
 else {
      writeClassCode(out,c);
    }
    ByteArrayOutputStream bos=null;
    ObjectOutputStream oos=null;
    try {
      bos=new ByteArrayOutputStream();
      oos=new ObjectOutputStream(bos);
      oos.writeObject(instanceObj);
      byte[] value=bos.toByteArray();
      out.writeInt(value.length);
      out.write(value);
    }
  finally {
      if (bos != null)       bos.close();
      if (oos != null)       oos.close();
    }
  }
 else {
    throw new IOException("Can't write: " + instanceObj + " as "+ declClass);
  }
}
