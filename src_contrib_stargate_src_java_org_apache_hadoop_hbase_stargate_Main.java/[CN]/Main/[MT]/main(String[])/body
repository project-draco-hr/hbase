{
  Options options=new Options();
  options.addOption("p","port",true,"service port");
  CommandLineParser parser=new PosixParser();
  CommandLine cmd=parser.parse(options,args);
  int port=8080;
  if (cmd.hasOption("p")) {
    port=Integer.valueOf(cmd.getOptionValue("p"));
  }
  HBaseConfiguration conf=new HBaseConfiguration();
  if (cmd.hasOption("m")) {
    conf.set("hbase.master",cmd.getOptionValue("m"));
  }
  String jetty_home=".";
  Server server=new Server();
  QueuedThreadPool threadPool=new QueuedThreadPool();
  threadPool.setMaxThreads(100);
  server.setThreadPool(threadPool);
  Connector connector=new SelectChannelConnector();
  connector.setPort(port);
  connector.setMaxIdleTime(30000);
  server.setConnectors(new Connector[]{connector});
  HandlerCollection handlers=new HandlerCollection();
  ContextHandlerCollection contexts=new ContextHandlerCollection();
  RequestLogHandler requestLogHandler=new RequestLogHandler();
  handlers.setHandlers(new Handler[]{contexts,new DefaultHandler(),requestLogHandler});
  server.setHandler(handlers);
  WebAppDeployer deployer1=new WebAppDeployer();
  deployer1.setContexts(contexts);
  deployer1.setWebAppDir(jetty_home + "/webapps");
  deployer1.setParentLoaderPriority(false);
  deployer1.setExtract(true);
  deployer1.setAllowDuplicates(false);
  server.addLifeCycle(deployer1);
  NCSARequestLog requestLog=new NCSARequestLog(jetty_home + "/logs/jetty-yyyy_mm_dd.log");
  requestLog.setExtended(false);
  requestLogHandler.setRequestLog(requestLog);
  server.setStopAtShutdown(true);
  server.setSendServerVersion(true);
  server.start();
  server.join();
}
