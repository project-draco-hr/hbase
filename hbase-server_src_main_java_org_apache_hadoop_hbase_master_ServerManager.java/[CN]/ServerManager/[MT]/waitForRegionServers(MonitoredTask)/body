{
  final long interval=this.master.getConfiguration().getLong("hbase.master.wait.on.regionservers.interval",1500);
  final long timeout=this.master.getConfiguration().getLong("hbase.master.wait.on.regionservers.timeout",4500);
  final int minToStart=this.master.getConfiguration().getInt("hbase.master.wait.on.regionservers.mintostart",1);
  final int maxToStart=this.master.getConfiguration().getInt("hbase.master.wait.on.regionservers.maxtostart",Integer.MAX_VALUE);
  long now=EnvironmentEdgeManager.currentTimeMillis();
  final long startTime=now;
  long slept=0;
  long lastLogTime=0;
  long lastCountChange=startTime;
  int count=countOfRegionServers();
  int oldCount=0;
  while (!this.master.isStopped() && slept < timeout && count < maxToStart && (lastCountChange + interval > now || count < minToStart)) {
    if (oldCount != count || lastLogTime + interval < now) {
      lastLogTime=now;
      String msg="Waiting for region servers count to settle; currently" + " checked in " + count + ", slept for "+ slept+ " ms,"+ " expecting minimum of "+ minToStart+ ", maximum of "+ maxToStart+ ", timeout of "+ timeout+ " ms, interval of "+ interval+ " ms.";
      LOG.info(msg);
      status.setStatus(msg);
    }
    final long sleepTime=50;
    Thread.sleep(sleepTime);
    now=EnvironmentEdgeManager.currentTimeMillis();
    slept=now - startTime;
    oldCount=count;
    count=countOfRegionServers();
    if (count != oldCount) {
      lastCountChange=now;
    }
  }
  LOG.info("Finished waiting for region servers count to settle;" + " checked in " + count + ", slept for "+ slept+ " ms,"+ " expecting minimum of "+ minToStart+ ", maximum of "+ maxToStart+ ","+ " master is "+ (this.master.isStopped() ? "stopped." : "running."));
}
