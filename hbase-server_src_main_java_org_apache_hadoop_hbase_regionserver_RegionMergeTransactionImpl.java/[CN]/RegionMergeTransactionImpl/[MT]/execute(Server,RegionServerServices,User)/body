{
  this.server=server;
  this.rsServices=services;
  if (rsCoprocessorHost == null) {
    rsCoprocessorHost=server != null ? ((HRegionServer)server).getRegionServerCoprocessorHost() : null;
  }
  final HRegion mergedRegion=createMergedRegion(server,services,user);
  if (rsCoprocessorHost != null) {
    if (user == null) {
      rsCoprocessorHost.postMergeCommit(this.region_a,this.region_b,mergedRegion);
    }
 else {
      try {
        user.getUGI().doAs(new PrivilegedExceptionAction<Void>(){
          @Override public Void run() throws Exception {
            rsCoprocessorHost.postMergeCommit(region_a,region_b,mergedRegion);
            return null;
          }
        }
);
      }
 catch (      InterruptedException ie) {
        InterruptedIOException iioe=new InterruptedIOException();
        iioe.initCause(ie);
        throw iioe;
      }
    }
  }
  stepsAfterPONR(server,services,mergedRegion,user);
  transition(RegionMergeTransactionPhase.COMPLETED);
  return mergedRegion;
}
