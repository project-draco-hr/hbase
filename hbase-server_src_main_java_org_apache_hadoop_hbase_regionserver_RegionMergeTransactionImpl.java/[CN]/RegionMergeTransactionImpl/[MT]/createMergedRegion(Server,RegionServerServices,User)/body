{
  LOG.info("Starting merge of " + region_a + " and "+ region_b.getRegionInfo().getRegionNameAsString()+ ", forcible="+ forcible);
  if ((server != null && server.isStopped()) || (services != null && services.isStopping())) {
    throw new IOException("Server is stopped or stopping");
  }
  if (rsCoprocessorHost != null) {
    boolean ret=rsCoprocessorHost.preMerge(region_a,region_b,user);
    if (ret) {
      throw new IOException("Coprocessor bypassing regions " + this.region_a + " "+ this.region_b+ " merge.");
    }
  }
  boolean testing=server == null ? true : server.getConfiguration().getBoolean("hbase.testing.nocluster",false);
  HRegion mergedRegion=stepsBeforePONR(server,services,testing);
  @MetaMutationAnnotation final List<Mutation> metaEntries=new ArrayList<Mutation>();
  if (rsCoprocessorHost != null) {
    boolean ret=rsCoprocessorHost.preMergeCommit(region_a,region_b,metaEntries,user);
    if (ret) {
      throw new IOException("Coprocessor bypassing regions " + this.region_a + " "+ this.region_b+ " merge.");
    }
    try {
      for (      Mutation p : metaEntries) {
        HRegionInfo.parseRegionName(p.getRow());
      }
    }
 catch (    IOException e) {
      LOG.error("Row key of mutation from coprocessor is not parsable as region name." + "Mutations from coprocessor should only be for hbase:meta table.",e);
      throw e;
    }
  }
  transition(RegionMergeTransactionPhase.PONR);
  if (services != null && !services.reportRegionStateTransition(TransitionCode.MERGE_PONR,mergedRegionInfo,region_a.getRegionInfo(),region_b.getRegionInfo())) {
    throw new IOException("Failed to notify master that merge passed PONR: " + region_a.getRegionInfo().getRegionNameAsString() + " and "+ region_b.getRegionInfo().getRegionNameAsString());
  }
  return mergedRegion;
}
