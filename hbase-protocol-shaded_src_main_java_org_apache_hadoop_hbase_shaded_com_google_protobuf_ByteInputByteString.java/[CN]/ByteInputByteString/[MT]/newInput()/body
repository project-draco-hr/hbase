{
  return new InputStream(){
    private final ByteInput buf=buffer;
    private int pos=offset;
    private int limit=pos + length;
    private int mark=pos;
    @Override public void mark(    int readlimit){
      this.mark=readlimit;
    }
    @Override public boolean markSupported(){
      return true;
    }
    @Override public void reset() throws IOException {
      this.pos=this.mark;
    }
    @Override public int available() throws IOException {
      return this.limit - this.pos;
    }
    @Override public int read() throws IOException {
      if (available() <= 0) {
        return -1;
      }
      return this.buf.read(pos++) & 0xFF;
    }
    @Override public int read(    byte[] bytes,    int off,    int len) throws IOException {
      int remain=available();
      if (remain <= 0) {
        return -1;
      }
      len=Math.min(len,remain);
      buf.read(pos,bytes,off,len);
      pos+=len;
      return len;
    }
  }
;
}
