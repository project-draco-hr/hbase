{
  while (!server.isStopRequested()) {
    while (!rollLog.get() && !server.isStopRequested()) {
      long now=System.currentTimeMillis();
      if (this.lastLogRollTime + this.optionalLogRollInterval <= now) {
        rollLog.set(true);
        this.lastLogRollTime=now;
      }
 else {
synchronized (rollLog) {
          try {
            rollLog.wait(server.threadWakeFrequency);
          }
 catch (          InterruptedException e) {
            continue;
          }
        }
      }
    }
    if (!rollLog.get()) {
      continue;
    }
    rollLock.lock();
    try {
      LOG.info("Rolling hlog. Number of entries: " + server.getLog().getNumEntries());
      server.getLog().rollWriter();
    }
 catch (    IOException ex) {
      LOG.error("Log rolling failed",RemoteExceptionHandler.checkIOException(ex));
      server.checkFileSystem();
    }
catch (    Exception ex) {
      LOG.error("Log rolling failed",ex);
      server.checkFileSystem();
    }
 finally {
      rollLog.set(false);
      rollLock.unlock();
    }
  }
  LOG.info("LogRoller exiting.");
}
