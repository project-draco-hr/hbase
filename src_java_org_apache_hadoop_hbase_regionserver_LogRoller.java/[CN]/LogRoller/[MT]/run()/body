{
  while (!server.isStopRequested()) {
    long now=System.currentTimeMillis();
    boolean periodic=false;
    if (!rollLog.get()) {
      periodic=(now - this.lastrolltime) > this.rollperiod;
      if (!periodic) {
synchronized (rollLog) {
          try {
            rollLog.wait(server.threadWakeFrequency);
          }
 catch (          InterruptedException e) {
          }
        }
        continue;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Hlog roll period " + this.rollperiod + "ms elapsed");
      }
    }
    rollLock.lock();
    try {
      this.lastrolltime=now;
      byte[][] regionsToFlush=server.getLog().rollWriter();
      if (regionsToFlush != null) {
        for (        byte[] r : regionsToFlush)         scheduleFlush(r);
      }
    }
 catch (    FailedLogCloseException e) {
      LOG.fatal("Forcing server shutdown",e);
      server.checkFileSystem();
      server.abort();
    }
catch (    java.net.ConnectException e) {
      LOG.fatal("Forcing server shutdown",e);
      server.checkFileSystem();
      server.abort();
    }
catch (    IOException ex) {
      LOG.fatal("Log rolling failed with ioe: ",RemoteExceptionHandler.checkIOException(ex));
      server.checkFileSystem();
      server.abort();
    }
catch (    Exception ex) {
      LOG.error("Log rolling failed",ex);
      server.checkFileSystem();
    }
 finally {
      rollLog.set(false);
      rollLock.unlock();
    }
  }
  LOG.info("LogRoller exiting.");
}
