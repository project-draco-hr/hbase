{
  HRegionInfo hri=createBasic3FamilyHRegionInfo(Bytes.toString(TEST_TABLE));
  final HTableDescriptor htd=createBasic3FamilyHTD(Bytes.toString(TEST_TABLE));
  HRegion region2=HRegion.createHRegion(hri,hbaseRootDir,this.conf,htd);
  Path basedir=new Path(this.hbaseRootDir,Bytes.toString(TEST_TABLE));
  deleteDir(basedir);
  fs.mkdirs(new Path(basedir,hri.getEncodedName()));
  HLog log=new HLog(this.fs,this.dir,this.oldLogDir,this.conf);
  SampleRegionWALObserver cp=getCoprocessor(log);
  cp.setTestValues(TEST_TABLE,TEST_ROW,TEST_FAMILY[0],TEST_QUALIFIER[0],TEST_FAMILY[1],TEST_QUALIFIER[1],TEST_FAMILY[2],TEST_QUALIFIER[2]);
  assertFalse(cp.isPreWALWriteCalled());
  assertFalse(cp.isPostWALWriteCalled());
  Put p=creatPutWith2Families(TEST_ROW);
  Map<byte[],List<KeyValue>> familyMap=p.getFamilyMap();
  WALEdit edit=new WALEdit();
  addFamilyMapToWALEdit(familyMap,edit);
  boolean foundFamily0=false;
  boolean foundFamily2=false;
  boolean modifiedFamily1=false;
  List<KeyValue> kvs=edit.getKeyValues();
  for (  KeyValue kv : kvs) {
    if (Arrays.equals(kv.getFamily(),TEST_FAMILY[0])) {
      foundFamily0=true;
    }
    if (Arrays.equals(kv.getFamily(),TEST_FAMILY[2])) {
      foundFamily2=true;
    }
    if (Arrays.equals(kv.getFamily(),TEST_FAMILY[1])) {
      if (!Arrays.equals(kv.getValue(),TEST_VALUE[1])) {
        modifiedFamily1=true;
      }
    }
  }
  assertTrue(foundFamily0);
  assertFalse(foundFamily2);
  assertFalse(modifiedFamily1);
  long now=EnvironmentEdgeManager.currentTimeMillis();
  log.append(hri,hri.getTableName(),edit,now,htd);
  foundFamily0=false;
  foundFamily2=false;
  modifiedFamily1=false;
  for (  KeyValue kv : kvs) {
    if (Arrays.equals(kv.getFamily(),TEST_FAMILY[0])) {
      foundFamily0=true;
    }
    if (Arrays.equals(kv.getFamily(),TEST_FAMILY[2])) {
      foundFamily2=true;
    }
    if (Arrays.equals(kv.getFamily(),TEST_FAMILY[1])) {
      if (!Arrays.equals(kv.getValue(),TEST_VALUE[1])) {
        modifiedFamily1=true;
      }
    }
  }
  assertFalse(foundFamily0);
  assertTrue(foundFamily2);
  assertTrue(modifiedFamily1);
  assertTrue(cp.isPreWALWriteCalled());
  assertTrue(cp.isPostWALWriteCalled());
}
