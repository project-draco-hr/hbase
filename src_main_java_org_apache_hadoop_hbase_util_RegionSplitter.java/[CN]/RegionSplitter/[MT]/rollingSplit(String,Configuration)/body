{
  Class<? extends SplitAlgorithm> splitClass=conf.getClass("split.algorithm",MD5StringSplit.class,SplitAlgorithm.class);
  SplitAlgorithm splitAlgo;
  try {
    splitAlgo=splitClass.newInstance();
  }
 catch (  Exception e) {
    throw new IOException("Problem loading split algorithm: ",e);
  }
  final int minOS=conf.getInt("split.outstanding",2);
  HTable table=new HTable(conf,tableName);
  final int MAX_OUTSTANDING=Math.max(table.getCurrentNrHRS() / 2,minOS);
  Path hbDir=new Path(conf.get(HConstants.HBASE_DIR));
  Path tableDir=HTableDescriptor.getTableDir(hbDir,table.getTableName());
  Path splitFile=new Path(tableDir,"_balancedSplit");
  FileSystem fs=FileSystem.get(conf);
  LinkedList<Pair<byte[],byte[]>> tmpRegionSet=getSplits(table,splitAlgo);
  LinkedList<Pair<byte[],byte[]>> outstanding=Lists.newLinkedList();
  int splitCount=0;
  final int origCount=tmpRegionSet.size();
  LOG.debug("Bucketing regions by regionserver...");
  TreeMap<HServerAddress,LinkedList<Pair<byte[],byte[]>>> daughterRegions=Maps.newTreeMap();
  for (  Pair<byte[],byte[]> dr : tmpRegionSet) {
    HServerAddress rsLocation=table.getRegionLocation(dr.getSecond()).getServerAddress();
    if (!daughterRegions.containsKey(rsLocation)) {
      LinkedList<Pair<byte[],byte[]>> entry=Lists.newLinkedList();
      daughterRegions.put(rsLocation,entry);
    }
    daughterRegions.get(rsLocation).add(dr);
  }
  LOG.debug("Done with bucketing.  Split time!");
  long startTime=System.currentTimeMillis();
  FSDataInputStream tmpIn=fs.open(splitFile);
  byte[] rawData=new byte[tmpIn.available()];
  tmpIn.readFully(rawData);
  tmpIn.close();
  FSDataOutputStream splitOut=fs.create(splitFile);
  splitOut.write(rawData);
  try {
    while (!daughterRegions.isEmpty()) {
      LOG.debug(daughterRegions.size() + " RS have regions to splt.");
      for (HServerAddress rsLoc=daughterRegions.firstKey(); rsLoc != null; rsLoc=daughterRegions.higherKey(rsLoc)) {
        Pair<byte[],byte[]> dr=null;
        LOG.debug("Finding a region on " + rsLoc);
        LinkedList<Pair<byte[],byte[]>> regionList=daughterRegions.get(rsLoc);
        while (!regionList.isEmpty()) {
          dr=regionList.pop();
          byte[] split=dr.getSecond();
          HRegionLocation regionLoc=table.getRegionLocation(split);
          HServerAddress newRs=regionLoc.getServerAddress();
          if (newRs.compareTo(rsLoc) != 0) {
            LOG.debug("Region with " + splitAlgo.rowToStr(split) + " moved to "+ newRs+ ". Relocating...");
            if (!daughterRegions.containsKey(newRs)) {
              LinkedList<Pair<byte[],byte[]>> entry=Lists.newLinkedList();
              daughterRegions.put(newRs,entry);
            }
            daughterRegions.get(newRs).add(dr);
            dr=null;
            continue;
          }
          byte[] sk=regionLoc.getRegionInfo().getStartKey();
          if (sk.length != 0) {
            if (Bytes.equals(split,sk)) {
              LOG.debug("Region already split on " + splitAlgo.rowToStr(split) + ".  Skipping this region...");
              ++splitCount;
              dr=null;
              continue;
            }
            byte[] start=dr.getFirst();
            Preconditions.checkArgument(Bytes.equals(start,sk),splitAlgo.rowToStr(start) + " != " + splitAlgo.rowToStr(sk));
          }
          break;
        }
        if (regionList.isEmpty()) {
          daughterRegions.remove(rsLoc);
        }
        if (dr == null)         continue;
        byte[] split=dr.getSecond();
        LOG.debug("Splitting at " + splitAlgo.rowToStr(split));
        HBaseAdmin admin=new HBaseAdmin(table.getConfiguration());
        admin.split(table.getTableName(),split);
        LinkedList<Pair<byte[],byte[]>> finished=Lists.newLinkedList();
        if (conf.getBoolean("split.verify",true)) {
          outstanding.addLast(dr);
          while (outstanding.size() >= MAX_OUTSTANDING) {
            finished=splitScan(outstanding,table,splitAlgo);
            if (finished.isEmpty()) {
              Thread.sleep(30 * 1000);
            }
 else {
              outstanding.removeAll(finished);
            }
          }
        }
 else {
          finished.add(dr);
        }
        for (        Pair<byte[],byte[]> region : finished) {
          splitOut.writeChars("- " + splitAlgo.rowToStr(region.getFirst()) + " "+ splitAlgo.rowToStr(region.getSecond())+ "\n");
          splitCount++;
          if (splitCount % 10 == 0) {
            long tDiff=(System.currentTimeMillis() - startTime) / splitCount;
            LOG.debug("STATUS UPDATE: " + splitCount + " / "+ origCount+ ". Avg Time / Split = "+ org.apache.hadoop.util.StringUtils.formatTime(tDiff));
          }
        }
      }
    }
    if (conf.getBoolean("split.verify",true)) {
      while (!outstanding.isEmpty()) {
        LinkedList<Pair<byte[],byte[]>> finished=splitScan(outstanding,table,splitAlgo);
        if (finished.isEmpty()) {
          Thread.sleep(30 * 1000);
        }
 else {
          outstanding.removeAll(finished);
          for (          Pair<byte[],byte[]> region : finished) {
            splitOut.writeChars("- " + splitAlgo.rowToStr(region.getFirst()) + " "+ splitAlgo.rowToStr(region.getSecond())+ "\n");
          }
        }
      }
    }
    LOG.debug("All regions have been sucesfully split!");
  }
  finally {
    long tDiff=System.currentTimeMillis() - startTime;
    LOG.debug("TOTAL TIME = " + org.apache.hadoop.util.StringUtils.formatTime(tDiff));
    LOG.debug("Splits = " + splitCount);
    LOG.debug("Avg Time / Split = " + org.apache.hadoop.util.StringUtils.formatTime(tDiff / splitCount));
    splitOut.close();
  }
  fs.delete(splitFile,false);
}
