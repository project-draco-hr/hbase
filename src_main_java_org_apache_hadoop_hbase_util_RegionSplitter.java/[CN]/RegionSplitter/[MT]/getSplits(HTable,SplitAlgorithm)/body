{
  Path hbDir=new Path(table.getConfiguration().get(HConstants.HBASE_DIR));
  Path tableDir=HTableDescriptor.getTableDir(hbDir,table.getTableName());
  Path splitFile=new Path(tableDir,"_balancedSplit");
  FileSystem fs=FileSystem.get(table.getConfiguration());
  Set<Pair<String,String>> daughterRegions=Sets.newHashSet();
  if (!fs.exists(splitFile)) {
    LOG.debug("No _balancedSplit file.  Calculating splits...");
    Set<Pair<byte[],byte[]>> rows=Sets.newHashSet();
    Pair<byte[][],byte[][]> tmp=table.getStartEndKeys();
    Preconditions.checkArgument(tmp.getFirst().length == tmp.getSecond().length,"Start and End rows should be equivalent");
    for (int i=0; i < tmp.getFirst().length; ++i) {
      byte[] start=tmp.getFirst()[i], end=tmp.getSecond()[i];
      if (start.length == 0)       start=splitAlgo.firstRow();
      if (end.length == 0)       end=splitAlgo.lastRow();
      rows.add(Pair.newPair(start,end));
    }
    LOG.debug("Table " + Bytes.toString(table.getTableName()) + " has "+ rows.size()+ " regions that will be split.");
    Path tmpFile=new Path(tableDir,"_balancedSplit_prepare");
    FSDataOutputStream tmpOut=fs.create(tmpFile);
    for (    Pair<byte[],byte[]> r : rows) {
      byte[] splitPoint=splitAlgo.split(r.getFirst(),r.getSecond());
      String startStr=splitAlgo.rowToStr(r.getFirst());
      String splitStr=splitAlgo.rowToStr(splitPoint);
      daughterRegions.add(Pair.newPair(startStr,splitStr));
      LOG.debug("Will Split [" + startStr + " , "+ splitAlgo.rowToStr(r.getSecond())+ ") at "+ splitStr);
      tmpOut.writeChars("+ " + startStr + splitAlgo.separator()+ splitStr+ "\n");
    }
    tmpOut.close();
    fs.rename(tmpFile,splitFile);
  }
 else {
    LOG.debug("_balancedSplit file found. Replay log to restore state...");
    FSUtils.getInstance(fs,table.getConfiguration()).recoverFileLease(fs,splitFile,table.getConfiguration());
    FSDataInputStream tmpIn=fs.open(splitFile);
    StringBuilder sb=new StringBuilder(tmpIn.available());
    while (tmpIn.available() > 0) {
      sb.append(tmpIn.readChar());
    }
    tmpIn.close();
    for (    String line : sb.toString().split("\n")) {
      String[] cmd=line.split(splitAlgo.separator());
      Preconditions.checkArgument(3 == cmd.length);
      byte[] start=splitAlgo.strToRow(cmd[1]);
      String startStr=splitAlgo.rowToStr(start);
      byte[] splitPoint=splitAlgo.strToRow(cmd[2]);
      String splitStr=splitAlgo.rowToStr(splitPoint);
      Pair<String,String> r=Pair.newPair(startStr,splitStr);
      if (cmd[0].equals("+")) {
        LOG.debug("Adding: " + r);
        daughterRegions.add(r);
      }
 else {
        LOG.debug("Removing: " + r);
        Preconditions.checkArgument(cmd[0].equals("-"),"Unknown option: " + cmd[0]);
        Preconditions.checkState(daughterRegions.contains(r),"Missing row: " + r);
        daughterRegions.remove(r);
      }
    }
    LOG.debug("Done reading. " + daughterRegions.size() + " regions left.");
  }
  LinkedList<Pair<byte[],byte[]>> ret=Lists.newLinkedList();
  for (  Pair<String,String> r : daughterRegions) {
    ret.add(Pair.newPair(splitAlgo.strToRow(r.getFirst()),splitAlgo.strToRow(r.getSecond())));
  }
  return ret;
}
