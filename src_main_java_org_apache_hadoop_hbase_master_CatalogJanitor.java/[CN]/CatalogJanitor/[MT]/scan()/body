{
  final AtomicInteger count=new AtomicInteger(0);
  final Map<HRegionInfo,Result> splitParents=new TreeMap<HRegionInfo,Result>(new Comparator<HRegionInfo>(){
    @Override public int compare(    HRegionInfo left,    HRegionInfo right){
      if (left == null)       return -1;
      if (right == null)       return 1;
      int result=Bytes.compareTo(left.getTableName(),right.getTableName());
      if (result != 0)       return result;
      result=Bytes.compareTo(left.getStartKey(),right.getStartKey());
      if (result != 0)       return result;
      result=Bytes.compareTo(left.getEndKey(),right.getEndKey());
      if (result != 0)       return -result;
      return result;
    }
  }
);
  MetaReader.Visitor visitor=new MetaReader.Visitor(){
    @Override public boolean visit(    Result r) throws IOException {
      if (r == null || r.isEmpty())       return true;
      count.incrementAndGet();
      HRegionInfo info=getHRegionInfo(r);
      if (info == null)       return true;
      if (info.isSplitParent())       splitParents.put(info,r);
      return true;
    }
  }
;
  MetaReader.fullScan(this.server.getCatalogTracker(),visitor);
  int cleaned=0;
  for (  Map.Entry<HRegionInfo,Result> e : splitParents.entrySet()) {
    if (cleanParent(e.getKey(),e.getValue()))     cleaned++;
  }
  if (cleaned != 0) {
    LOG.info("Scanned " + count.get() + " catalog row(s) and gc'd "+ cleaned+ " unreferenced parent region(s)");
  }
 else   if (LOG.isDebugEnabled()) {
    LOG.debug("Scanned " + count.get() + " catalog row(s) and gc'd "+ cleaned+ " unreferenced parent region(s)");
  }
}
